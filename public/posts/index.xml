<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Limboy</title>
        <link>https://limboy.me/posts/</link>
        <description></description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://limboy.me/posts/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 30 Jun 2022 00:00:00 +0000</lastBuildDate>
        
        <item>
            <title>Vercel, Cloudflare, fly.io 我的网页三剑客</title>
            <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/vercel-cf-fly/</link>
            <guid>https://limboy.me/posts/vercel-cf-fly/</guid>
            <description>&lt;p&gt;自己时不时地会写一些网页（如 &lt;a href=&quot;https:&#x2F;&#x2F;pinyincaichengyu.com&#x2F;&quot;&gt;拼音猜成语&lt;&#x2F;a&gt;）或部署一些静态页面（如这个博客），或者托管一些资源文件（如播客音频），这就涉及到线上服务的选择。目前来看 &lt;a href=&quot;https:&#x2F;&#x2F;vercel.com&quot;&gt;Vercel&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;cloudflare.net&quot;&gt;Cloudflare&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;fly.io&lt;&#x2F;a&gt; 能较好地满足我的大部分需求。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dns-guan-li-cdn&quot;&gt;DNS 管理 &amp;amp; CDN&lt;&#x2F;h3&gt;
&lt;p&gt;这部分交由 Cloudflare(简称 CF) 来管理。在 CF 后台新建 Site 后，在域名注册商处，将 Name Server 设置为 Cloudflare 的 Name Server 就行了，就是下面这两个&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;leah.ns.cloudflare.com
&lt;&#x2F;span&gt;&lt;span&gt;wesley.ns.cloudflare.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside class=&quot;info&quot; &gt;
  CF 也提供域名注册服务，如果是新的域名，可以直接在 CF 注册，管理起来更方便，价格也不贵。
&lt;&#x2F;aside&gt;
&lt;p&gt;因为 CF 的主营业务还是 CDN，所以提供了一个很方便的功能：代理网站静态资源，也就是这朵橘色的云（Proxy Status）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;vercel-cf-fly&amp;#x2F;cf-dns.jpg&quot;
        width=&quot;1746&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;开启了之后，domain 下的资源（如图片，CSS 等）会被 CF 缓存到 CDN，用户访问这些资源时，就直接访问 CDN 上的缓存，不会到自己的服务器，可以节省很多流量。而且 CF 的 CDN 流量是免费的，所以不用担心哪天站点访问量剧增带来的流量费用。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 开启「自动代理」后，如果出现直接访问 OK，但通过 CF 访问就会出现问题的现象，可以把 &lt;code&gt;SSL&#x2F;TLS&lt;&#x2F;code&gt; 设置为「灵活」。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;vercel-cf-fly&amp;#x2F;cf-forwarding-settings.jpg&quot;
        width=&quot;2106&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  如果发现 CF 访问统计中，有很多的流量没有缓存，可能是跟 Vercel 返回的 &lt;code&gt;Cache-Control&lt;&#x2F;code&gt; 有关，比如 &lt;code&gt;Cache-Control: public, max-age=0, must-revalidate&lt;&#x2F;code&gt;，表示不缓存，这样 CF 也要遵从这个约定，当用户访问资源文件时，如果浏览器本地没有缓存，或者已经过期，每次请求到了 CF 这里后，CF 也还是要到源站（Vercel）去取。这样不仅没有让 CF 发挥 CDN 的优势，反而因为要回源，导致请求变慢。&lt;&#x2F;p&gt;
&lt;p&gt;好在 Vercel 支持自定义 header 规则（更多的规则可以看&lt;a href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;docs&#x2F;project-configuration&quot;&gt;这里&lt;&#x2F;a&gt;），我们可以在 &lt;code&gt;vercel.json&lt;&#x2F;code&gt; 里重新定义 &lt;code&gt;Cache-Control&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;headers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;source&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;(.*).(jpe?g|png|ico|webp|svg|mp4|gif|xml|ttf|woff2?)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;headers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cache-Control&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;public, max-age=31536000, immutable&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样当访问特定后缀的资源文件时，就会返回我们定义的 &lt;code&gt;Cache-Control&lt;&#x2F;code&gt;，CF 会根据新的 &lt;code&gt;Cache-Control&lt;&#x2F;code&gt; 策略来缓存，比如这里设置了永不过期。&lt;&#x2F;p&gt;
&lt;p&gt;PS: Vercel 有个&lt;a href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;support&#x2F;articles&#x2F;using-cloudflare-with-vercel&quot;&gt;页面&lt;&#x2F;a&gt;专门讨论了与 CF 并存的问题，想进一步了解的话，可以看一下。
&lt;&#x2F;aside&gt;&lt;aside class=&quot;warn&quot; &gt;
  CF 默认不缓存 HTML 文件，如果要设置更加灵活的缓存策略，可以通过 Page Rules 来完成，免费用户可以设置 3 个规则，基本够用了。
&lt;&#x2F;aside&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;vercel-cf-fly&amp;#x2F;cf-page-rules.jpg&quot;
        width=&quot;1608&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一个好处是，可以在 CF 的后台看到页面的访问统计，虽然比较简单（能看到访问次数，但无法精确到页面，或者来源），但不需要额外的 JS 代码，不用依赖第三方访问统计服务，也还不错。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  CF 还可以托管一些存储服务的文件，以 &lt;a href=&quot;https:&#x2F;&#x2F;www.backblaze.com&#x2F;&quot;&gt;Backblaze&lt;&#x2F;a&gt;(又称 B2) 为例，对 DNS 的 CNAME 做一下映射（同样要将 Proxy 设置为 Proxied），比如将 &lt;code&gt;assets.example.com&lt;&#x2F;code&gt; 映射到 &lt;code&gt;f002.backblazeb2.com&lt;&#x2F;code&gt;，通过后台或 API 上传资源文件（如播客的音频）后会得到 B2 的 URL，将域名换一下就行了。比如将 &lt;code&gt;https:&#x2F;&#x2F;f002.backblazeb2.com&#x2F;a&#x2F;b.mp3&lt;&#x2F;code&gt; 替换为 &lt;code&gt;https:&#x2F;&#x2F;assets.example.com&#x2F;a&#x2F;b.mp3&lt;&#x2F;code&gt;，就可以使用 CF 的 CDN 服务了。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;jing-tai-ye-mian&quot;&gt;静态页面&lt;&#x2F;h3&gt;
&lt;p&gt;通过 SSG（静态内容生成器）生成的博客或文档等静态资源，会部署到 &lt;a href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;&quot;&gt;Vercel&lt;&#x2F;a&gt; 上，体验确实很不错。比如 Connect Github 后，做一些简单的配置，就能方便地 Deploy 了。push 到 main 之外的分支，可以生成 Preview 页面，确定内容正确后，再 push 到 main 分支，就上线了。这也是 Vercel 提倡的 Develop, Preview, Ship 流程。&lt;&#x2F;p&gt;
&lt;p&gt;每个月 100 G 的流量（所有 Projects 加起来）如果都走 Vercel，可能不太够，但结合 CF 就完全能 hold 住了（流量主要是一些 HTML 页面）。&lt;&#x2F;p&gt;
&lt;p&gt;如果要写一些复杂的页面或涉及到一些后端逻辑，也可以使用 Vercel 开源的 &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;Next.js&lt;&#x2F;a&gt;。API 会以 Serverless 的方式运行（所以不要依赖一些内存全局变量）。最近 Middleware 也 &lt;a href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;blog&#x2F;vercel-edge-middleware-dynamic-at-the-speed-of-static&quot;&gt;GA&lt;&#x2F;a&gt; 了，可以在请求到达具体页面前再做一些处理（比如判断是否有特定的 Cookie，然后重定向到特定的页面）。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  CF 也提供类似的服务 &lt;a href=&quot;https:&#x2F;&#x2F;pages.cloudflare.com&#x2F;&quot;&gt;Cloudflare Pages&lt;&#x2F;a&gt;，不过目前对 Vercel 还比较满意，就没考虑切换。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;dong-tai-shu-ju&quot;&gt;动态数据&lt;&#x2F;h3&gt;
&lt;p&gt;如果涉及到数据库，对个人项目来说，要么在单独的 VPS 上部署，要么在 Serverless code 里通过 API 去连接 Cloud Database Service，前者有一定的维护成本，要保障 VPS、后端服务、DB Service 的正常运行，还要考虑各种运维（网络耗时、磁盘空间、CPU、内存占用等等），后者就要找一个合适的服务商，确保价格、空间、流量、使用体验等比较满意。&lt;&#x2F;p&gt;
&lt;p&gt;其实也可以有第三种选择，我选的是 &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;&quot;&gt;fly.io&lt;&#x2F;a&gt;，可以简单地理解为把 Docker 部署到边缘节点，让用户可以就近访问服务。fly 的免费版本提供了一定的存储空间（3GB，先创建 Volume，然后 mount 到 App 上），一些简单的项目，一个 SQLite 文件就搞定了，备份起来也很方便。更 Serious 的项目可以使用他们提供的 Postgres 数据库（支持多节点部署，读写分离）。&lt;&#x2F;p&gt;
&lt;p&gt;这样就兼具了 VPS 的灵活性，又免去了不少运维成本，又因为服务可以部署在全球的各个节点，访问速度上也比较有保障（挂了 Volume 后，就只能锁定单个区域，因为 Volume 跟 App 和 Region 绑定）。&lt;&#x2F;p&gt;
&lt;p&gt;目前只是在上面部署了一个小项目，还没有较正经地使用，不过有 &lt;a href=&quot;https:&#x2F;&#x2F;remix.run&#x2F;&quot;&gt;Remix&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;kentcdodds.com&#x2F;uses&quot;&gt;Kent&lt;&#x2F;a&gt; 的背书，从一些&lt;a href=&quot;https:&#x2F;&#x2F;xeiaso.net&#x2F;blog&#x2F;fly.io-heroku-replacement&quot;&gt;其他的反馈&lt;&#x2F;a&gt;来看也还可以，应该会是不错的选择。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个原因是 fly.io 给我的感觉也是满酷的，比如 &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;jobs&#x2F;rust-developer&#x2F;&quot;&gt;Rust 开发的招聘文&lt;&#x2F;a&gt;，这是其中一段：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The premise of our hiring process is that we’re going to show you the kind of work we’re doing and then see if you enjoy actually doing it; “work-sample challenges”. Unlike a lot of places that assign “take-home problems”, our challenges are the backbone of our whole process; they’re not pre-screeners for an interview gauntlet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;这三家服务商基本覆盖了我所有的线上需求，而且只需支付很少（或者免费）的费用就能支撑足够大的访问量（Cloudflare 功不可没）。如果你也有类似的需求，或许可以考虑下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>通过 VisiData 来方便地分析数据</title>
            <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/visidata/</link>
            <guid>https://limboy.me/posts/visidata/</guid>
            <description>&lt;p&gt;在 Hacker News 上看到一篇 &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=31824030&quot;&gt;通过 SQLite 来方便地操作 CSV&lt;&#x2F;a&gt; 的文章，利用 sqlite3 对 csv 原生支持的能力，对 csv 执行 SQL 查询，来获得自己想要的数据。试了下确实挺方便的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;sqlite-one-liner.jpg&quot;
        width=&quot;1278&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  &lt;code&gt;tweets.csv&lt;&#x2F;code&gt; 是从 Twitter 导出的个人数据。可以在 Twitter 的 Settings and privacy 中找到 download an archive of your data 的选项，点击后过一段时间就能收到自己的数据了
&lt;&#x2F;aside&gt;
&lt;p&gt;保存为一个 bash function 后，就更方便了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;csv2sqlite&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sqlite3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; :memory:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.mode csv&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;.import $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;.csv $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.mode column&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# usage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;csv2sqlite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tweets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;select * from tweets limit 1&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;顺便看了下 HN 上的评论，发现有不少人提到了 &lt;a href=&quot;https:&#x2F;&#x2F;www.visidata.org&quot;&gt;VisiData&lt;&#x2F;a&gt; 这个工具，就体验了下，确实很不错，能满足常见的数据查询工作，还不用写 SQL。下面就通过 &lt;code&gt;tweets.csv&lt;&#x2F;code&gt; 这个文件，结合具体的场景来看看 VisiData 的使用姿势。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  VisiData 是一个表格类数据（如 json, csv）分析工具，既支持类似 Excel 的数据显示，又有终端操作的高效，能够处理百万行的数据。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jsvine.github.io&#x2F;visidata-cheat-sheet&#x2F;en&#x2F;&quot;&gt;这个快捷键列表&lt;&#x2F;a&gt;很方便，基本可以覆盖常用的操作了。
&lt;&#x2F;aside&gt;&lt;h2 id=&quot;mei-nian-fa-liao-duo-shao-tweet&quot;&gt;每年发了多少 Tweet&lt;&#x2F;h2&gt;
&lt;p&gt;VisiData 安装完后，直接 &lt;code&gt;vd tweets.csv&lt;&#x2F;code&gt; 就可以了，界面如下：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-overview.jpg&quot;
        width=&quot;1752&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中有一列为 &lt;code&gt;timestamp&lt;&#x2F;code&gt;，包含了 &lt;code&gt;date&lt;&#x2F;code&gt; 和 &lt;code&gt;time&lt;&#x2F;code&gt;，我们需要将 &lt;code&gt;Year&lt;&#x2F;code&gt; 分离出来，然后才能进行聚合操作。分离的过程也很简单，先选中 &lt;code&gt;timestamp&lt;&#x2F;code&gt; 这一列，输入快捷键 &lt;code&gt;:&lt;&#x2F;code&gt; 就会进入到正则切分模式，输入空格 &lt;code&gt; &lt;&#x2F;code&gt;，就可以将 &lt;code&gt;date&lt;&#x2F;code&gt; 和 &lt;code&gt;time&lt;&#x2F;code&gt; 分开了，然后再对 &lt;code&gt;date&lt;&#x2F;code&gt; 列执行同样的操作，不过要用 &lt;code&gt;-&lt;&#x2F;code&gt; 来切分，这样就能得到 &lt;code&gt;Year&lt;&#x2F;code&gt; 了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-year.jpg&quot;
        width=&quot;1354&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  列名为自动生成，这里没有调整，可以通过 &lt;code&gt;^&lt;&#x2F;code&gt; 快捷键重命名。
&lt;&#x2F;aside&gt;
&lt;p&gt;接下来，在 &lt;code&gt;Year&lt;&#x2F;code&gt; 对应的列，按一下 &lt;code&gt;F&lt;&#x2F;code&gt; (&lt;code&gt;shift+f&lt;&#x2F;code&gt;)，就能达到 &lt;code&gt;group by&lt;&#x2F;code&gt; 的效果，这个真的太方便了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-year-count.jpg&quot;
        width=&quot;1256&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  VisiData 会新建一个 Table，所以不用担心会覆盖当前的表格，操作完后，输入 &lt;code&gt;q&lt;&#x2F;code&gt; 就能回到之前的表格。
&lt;&#x2F;aside&gt;
&lt;p&gt;可以看到我最爱唠叨的年份是 2008 和 2010 年，那时 Twitter 还能正常访问，有点什么想法就想发一下，也能在 Twitter 上找到很多有意思的人。&lt;&#x2F;p&gt;
&lt;p&gt;也可以通过这个方法看发推频率最高的是那几天：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-tweets-per-day.jpg&quot;
        width=&quot;1204&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;或者看自己 &lt;code&gt;@&lt;&#x2F;code&gt; 频率最高的是哪些人：（这里显示的是 user_id，可以通过 user_id 转 username 的服务来看对应的人）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-reply.jpg&quot;
        width=&quot;1270&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;mou-yi-tian-fa-liao-na-xie-tui&quot;&gt;某一天发了哪些推&lt;&#x2F;h2&gt;
&lt;p&gt;找到了发推最多的日子后，接下来很自然就想看看这几天自己都发了些啥，比如我想看 &lt;code&gt;2008-01-16&lt;&#x2F;code&gt; 这一天的推，先选择日期列，然后输入快捷键 &lt;code&gt;|&lt;&#x2F;code&gt;，表示要选择符合正则表达式的行，此时 status bar 会提示输入正则，输入 &lt;code&gt;2008-01-16&lt;&#x2F;code&gt; 后回车，就能选中这些行了。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  虽然状态栏会提示有 N 行被选中，但并没有出现在当前显示的列表中，输入快捷键 &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt; 就能看到了。
&lt;&#x2F;aside&gt;
&lt;p&gt;如果 &lt;code&gt;text&lt;&#x2F;code&gt; 列的内容没有完全显示出来，可以选中 &lt;code&gt;text&lt;&#x2F;code&gt; 列，输入快捷键 &lt;code&gt;_&lt;&#x2F;code&gt; 就行了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-day-tweets.jpg&quot;
        width=&quot;1656&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;tu-xing-hua-xian-shi-mei-ge-yue-de-fa-tui-shu-liang&quot;&gt;图形化显示每个月的发推数量&lt;&#x2F;h2&gt;
&lt;p&gt;VisiData 还支持散点图，我们可以通过这个功能来看每个月的发推数量，不过显示的效果不太好。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;visidata-plot.jpg&quot;
        width=&quot;1568&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;好在 VisiData 可以将当前 Table 的内容导出为 &lt;code&gt;csv&lt;&#x2F;code&gt;, &lt;code&gt;json&lt;&#x2F;code&gt; 等常用格式，我们可以将这些数据导入到其他的 plot 服务来获得更好的显示效果。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;visidata&amp;#x2F;plot.jpg&quot;
        width=&quot;1400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  上图使用的是 &lt;a href=&quot;https:&#x2F;&#x2F;www.csvplot.com&quot;&gt;csvplot&lt;&#x2F;a&gt; 这个在线服务。
&lt;&#x2F;aside&gt;&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;VisiData 是一个开源项目，有 5 年多的历史了，还在持续维护着，可信任程度还是比较高的。以上是我的简单探索，已经可以满足不少需求了。一开始我对 TUI (Terminal UI) 是有点抗拒的，感觉不如 GUI 美观，但结合 Terminal 的操作确实太方便了，之后如果有不太复杂的数据分析需求，应该还会选择 VisiData。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>刚好够用的简易前端工具集</title>
            <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/just-enough-toolkits-for-simple-frontend-project/</link>
            <guid>https://limboy.me/posts/just-enough-toolkits-for-simple-frontend-project/</guid>
            <description>&lt;p&gt;前端构建工具总给人一种很 magic 很复杂的感觉，理解它需要花一番工夫，不理解直接用的话，总觉得心里不踏实，出问题或者加需求不一定能搞定。我习惯用 React，官方推荐用 &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&#x2F;&quot;&gt;Create React App&lt;&#x2F;a&gt; 来创建项目，但它给我的感觉太黑盒了，而且新建一个项目就会添加 1000 多个 package，也不知道这 1000 多个 package 是干啥用的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;$ npx create-react-app demo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Creating a new React app in ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Installing packages. This might take a couple of minutes.
&lt;&#x2F;span&gt;&lt;span&gt;Installing react, react-dom, and react-scripts with cra-template...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;added 1354 packages in 18s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果用 webpack 的话，挑战也很大，首先要捋清它的工作模式就要费一番工夫，文档都啃下来也不简单，同时它又很灵活，提供了几十个 Hook，每个 Hook 都对应不同的时机，有自己的参数，文档上也没有详细说明这些 Hook 具体的时机和适合的使用场景。插件很丰富，但挑起来也很累，配置项很多，大约有 10086 个（当然，此处用了夸张手法），有些 Plugin 如 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jantimon&#x2F;html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;&#x2F;a&gt; 还有自己的 Plugin。对于前端新人真的很劝退。&lt;&#x2F;p&gt;
&lt;p&gt;如果是自己的前端项目，能实现以下几点就可以了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;js 这块能通过 &lt;code&gt;npm install&lt;&#x2F;code&gt; 安装依赖，打出一个 js 包（最好支持 tree-shaking）&lt;&#x2F;li&gt;
&lt;li&gt;css 这块能支持类似 tailwind 的使用姿势&lt;&#x2F;li&gt;
&lt;li&gt;维护方便，部署方便&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 1 点，可以使用 &lt;a href=&quot;https:&#x2F;&#x2F;esbuild.github.io&#x2F;&quot;&gt;esbuild&lt;&#x2F;a&gt;，这是一个用 go 写的 js bundler（可以把相关的 js 文件合并成一个浏览器可以识别和运行的 js 文件），足够快，功能也够用，虽然还未到 1.0，但已被一些知名项目使用（如 vite &#x2F; snowpack）。&lt;&#x2F;p&gt;
&lt;p&gt;对于第 2 点，可以使用 &lt;a href=&quot;https:&#x2F;&#x2F;windicss.org&#x2F;&quot;&gt;windicss&lt;&#x2F;a&gt;，相比 &lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;tailwind&lt;&#x2F;a&gt; 更轻量，性能也更好。&lt;&#x2F;p&gt;
&lt;p&gt;对于第 3 点，我预期的目录结构是这样的：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;|- dist&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- assets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- styles&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- layouts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  |- index.html
&lt;&#x2F;span&gt;&lt;span&gt;|- scripts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  |- index.jsx
&lt;&#x2F;span&gt;&lt;span&gt;  |- components&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    |- App.jsx
&lt;&#x2F;span&gt;&lt;span&gt;|- package.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dist&lt;&#x2F;code&gt; 是待发布的目录，运行 &lt;code&gt;npm build&lt;&#x2F;code&gt; 命令后所有的文件都会在这个目录下。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assets&lt;&#x2F;code&gt; 用来放资源文件（如图片）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;styles&lt;&#x2F;code&gt; css 文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;&#x2F;code&gt; html 文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;&#x2F;code&gt; react 等 js 文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;每个目录的职能都很清晰，也没有各种 config 文件，维护起来比较方便（为什么是按 function 来分，而不是 feature，可以看下&lt;a href=&quot;https:&#x2F;&#x2F;www.joshwcomeau.com&#x2F;react&#x2F;file-structure&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;），部署也很简单。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  关于 HMR（Hot Module Replacement），我觉得是 Plus，不是 Essential，如果能在（几乎）不增加复杂度的前提下提供这个功能，自然可以有，但如果因此增加了复杂度和理解成本，那就先放一放。
&lt;&#x2F;aside&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;&#x2F;code&gt; 是入口页，这里会引用最终的 css 和 js 文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;stylesheet&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;assets&#x2F;index.css&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;icon&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;fav.farm&#x2F;👻&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;root&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;assets&#x2F;index.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;index.jsx&lt;&#x2F;code&gt; 是 js 的入口文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;react&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ReactDOM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;react-dom&#x2F;client&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&#x2F;components&#x2F;App&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ReactDOM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.createRoot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;document.getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;root&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;root.render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;&#x2F;code&gt; 的核心内容大概是这样的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;scripts&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev-js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cp -r layouts&#x2F;* dist &amp;amp;&amp;amp; cp -r assets dist &amp;amp;&amp;amp; esbuild scripts&#x2F;index.jsx --servedir=dist --outdir=dist&#x2F;assets --bundle&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev-css&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss &amp;#39;.&#x2F;layouts&#x2F;**&#x2F;*.html&amp;#39; &amp;#39;.&#x2F;scripts&#x2F;**&#x2F;*.{js,jsx}&amp;#39; -o dist&#x2F;assets&#x2F;index.css --dev&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently -g &amp;#39;npm:dev-*&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build-js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cp -r layouts&#x2F;* dist &amp;amp;&amp;amp; cp -r assets dist &amp;amp;&amp;amp; esbuild scripts&#x2F;index.jsx --bundle --minify --outfile=dist&#x2F;assets&#x2F;index.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build-css&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss &amp;#39;.&#x2F;layouts&#x2F;**&#x2F;*.html&amp;#39; &amp;#39;.&#x2F;scripts&#x2F;**&#x2F;*.{js,jsx}&amp;#39; -o dist&#x2F;assets&#x2F;index.css --minify&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently -g &amp;#39;npm:build-*&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;esbuild&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^0.14.32&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;react&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^18.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;react-dom&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^18.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^3.5.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^7.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单说明下 &lt;code&gt;scripts&lt;&#x2F;code&gt; 栏下的几个命令:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dev-js&lt;&#x2F;code&gt;: 把相关内容复制到 dist 目录下，然后让 &lt;code&gt;esbuild&lt;&#x2F;code&gt; 来 serve 这个目录，当 js 文件有变化时，再次请求页面，就会得到最新的 js 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dev-css&lt;&#x2F;code&gt;: &lt;code&gt;windicss&lt;&#x2F;code&gt; 监控特定目录下的文件，有变化时会自动生成新的 css 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;&#x2F;code&gt;: 通过 &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;concurrently&quot;&gt;concurrently&lt;&#x2F;a&gt; 一并执行 &lt;code&gt;dev-js&lt;&#x2F;code&gt; 和 &lt;code&gt;dev-css&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build-js&lt;&#x2F;code&gt;: 通过 &lt;code&gt;esbuild&lt;&#x2F;code&gt; 命令把 js 文件打包成一个（minify 之后）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build-css&lt;&#x2F;code&gt;: 通过 &lt;code&gt;windicss&lt;&#x2F;code&gt; 命令扫描项目中的关键字，并生成 minify 后的 css 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build&lt;&#x2F;code&gt;: 通过 &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;concurrently&quot;&gt;concurrently&lt;&#x2F;a&gt; 一并执行 &lt;code&gt;build-js&lt;&#x2F;code&gt; 和 &lt;code&gt;build-css&lt;&#x2F;code&gt; 。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;之后如果想要新增依赖，用 &lt;code&gt;npm install&lt;&#x2F;code&gt; 或 &lt;code&gt;pnpm add&lt;&#x2F;code&gt; 就行了，相比 &lt;code&gt;create-react-app&lt;&#x2F;code&gt; 或者 &lt;code&gt;webpack&lt;&#x2F;code&gt;，能力上肯定会弱一些，但也更容易理解。&lt;&#x2F;p&gt;
&lt;p&gt;这就是我目前的「刚好够用的简易前端工具集」的尝试，用来写简单的页面应该够用了，如果你有别的想法，也欢迎交流～&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的前端学习路线</title>
            <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/frontend-learning/</link>
            <guid>https://limboy.me/posts/frontend-learning/</guid>
            <description>&lt;h2 id=&quot;wei-shi-yao-yao-xue-xi-qian-duan&quot;&gt;为什么要学习前端&lt;&#x2F;h2&gt;
&lt;p&gt;前端开发，开发的到底是什么呢？严格来说是运行于浏览器（或者与 Native 结合的混合式架构）之上的图形化交互页面（GUI）。可以是一个网站，也可以是一个单页面应用（如 &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;games&#x2F;wordle&#x2F;index.html&quot;&gt;Worlde&lt;&#x2F;a&gt;），基于 WegGL 还能做出很&lt;a href=&quot;https:&#x2F;&#x2F;stars.chromeexperiments.com&quot;&gt;炫酷的效果&lt;&#x2F;a&gt;，或者接近 Native 的体验（如 &lt;a href=&quot;https:&#x2F;&#x2F;figma.com&quot;&gt;Figma&lt;&#x2F;a&gt;），借助跨平台框架（如 &lt;a href=&quot;https:&#x2F;&#x2F;reactnative.dev&#x2F;&quot;&gt;React Native&lt;&#x2F;a&gt;，&lt;a href=&quot;https:&#x2F;&#x2F;www.electronjs.org&#x2F;&quot;&gt;Electron&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;&quot;&gt;Tarui&lt;&#x2F;a&gt;）能够让前端页面与 Native 深度结合。&lt;&#x2F;p&gt;
&lt;p&gt;所以前端开发有较多的落地场景，相比其他的编程类别，前端开发更贴近用户，门槛也相对低一些（仅仅是门槛，要做到出类拔萃难度还是挺高的），这让那些对创作有热情，但计算机基础又不是那么牢固的人（比如我）可以有一个不错的创作空间。除此之外以下几点也是选择前端开发的重要原因：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-ti-yan-jia&quot;&gt;开发体验佳&lt;&#x2F;h3&gt;
&lt;p&gt;得益于 IDE、包管理工具、浏览器及其他开发工具的持续迭代和优化，前端的开发体验已越发舒适。比如 &lt;a href=&quot;https:&#x2F;&#x2F;vitejs.dev&#x2F;&quot;&gt;vite&lt;&#x2F;a&gt; 让代码改动（即使代码量很大）能实时反映在浏览器（这不仅能提高开发效率，对于保持心流状态也很重要），VS Code 良好的代码编写体验和丰富的插件，&lt;a href=&quot;https:&#x2F;&#x2F;pnpm.io&quot;&gt;pnpm&lt;&#x2F;a&gt; 对 &lt;code&gt;node_modules&lt;&#x2F;code&gt; （如包的平行罗列，文件夹 size 大等）的改善，Chrome 在性能和调试能力上的不断优化和改进，TypeScript 也降低了编写易维护代码的门槛。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-ran-kua-ping-tai&quot;&gt;天然跨平台&lt;&#x2F;h3&gt;
&lt;p&gt;只要一个 URL，就能在不同的设备访问，而且保持相同的体验，这个感觉太棒了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shang-xian-kuai-qie-bu-hui-bei-qia&quot;&gt;上线快且不会被卡&lt;&#x2F;h3&gt;
&lt;p&gt;如果是移动端 App，不可避免地要与审核人员打交道，被打回也是常事。如果线上出了问题，iOS 平台只能重新发版走审核流程，前端则没有这个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-zhan-peng-bo&quot;&gt;发展蓬勃&lt;&#x2F;h3&gt;
&lt;p&gt;经常会看到有人吐槽前端开发变化太快了，一个工具还没玩明白，新的工具又出来了。我觉得这是好事，说明有活力又尚未完全成熟，这不就是进入这个行业的好时机么？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;2021.stateofjs.com&#x2F;en-US&#x2F;opinions&quot;&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frontend-learning&amp;#x2F;frontend-happiness.jpg&quot;
        width=&quot;2020&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gu-zhang-ying-xiang-xiao&quot;&gt;故障影响小&lt;&#x2F;h3&gt;
&lt;p&gt;当然这是相对的，前端也可以出现很严重的故障，只是相比后端，跟用户的数据打交道，前端犯错的可容忍性和可恢复性会高一些。我甚至觉得同是编程，前端和后端是两种类型的人，前者更 Creative，后者则更需要考虑细致和沉稳。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wo-de-qian-duan-xue-xi-lu-xian&quot;&gt;我的前端学习路线&lt;&#x2F;h2&gt;
&lt;p&gt;前端涉及到的内容会很多，如果没有 Roadmap 很容易迷失（尤其是对刚入门的新手），以下是我整理的一张表格，作为自己的 Roadmap。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;posts&#x2F;frontend-learning&#x2F;frontend-roadmap.jpg&quot;&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frontend-learning&amp;#x2F;frontend-roadmap.jpg&quot;
        width=&quot;1816&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;划分为 7 大板块：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Computer Science&lt;&#x2F;strong&gt; (基础，无论从事哪类编程都要了解)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Software Engineering&lt;&#x2F;strong&gt;（软件工程，也属于基础，但更贴近实战）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nice to Have&lt;&#x2F;strong&gt;（Optional，如果掌握这些技能可以加分）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Frontend Tooling&lt;&#x2F;strong&gt;（前端的工具集）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Framework &amp;amp; Libraries&lt;&#x2F;strong&gt;（前端相关的开发框架和类库）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Web Related&lt;&#x2F;strong&gt;（Web 相关的知识点）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Toolkit&lt;&#x2F;strong&gt;（开发环境相关）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;然后根据 &lt;strong&gt;Know in General&lt;&#x2F;strong&gt;（知道大概原理），&lt;strong&gt;Familiarity with Usage&lt;&#x2F;strong&gt;（熟练使用）和 &lt;strong&gt;Know in Detail&lt;&#x2F;strong&gt;（了解实现细节）来设置每一块的学习目标，比如对于 Computer Science 来说，知道大概原理即可，不需要牢记细节。而对于日常会使用的 Framework 和 Library 则需要深入了解实现，甚至能手动写一个。&lt;&#x2F;p&gt;
&lt;p&gt;每个板块里的内容，会按照我自己的喜好来学习，比如包管理工具我更喜欢 &lt;code&gt;pnpm&lt;&#x2F;code&gt;，Computer Science 里学习操作系统相关的内容会选择 &lt;a href=&quot;https:&#x2F;&#x2F;pages.cs.wisc.edu&#x2F;%7Eremzi&#x2F;OSTEP&#x2F;&quot;&gt;OSTEP&lt;&#x2F;a&gt; 这本书等等。&lt;&#x2F;p&gt;
&lt;p&gt;有了这张图，学习起来会更有底：自己目前大概到了哪个阶段，哪块需要重点补强一下，优先学习哪个（感觉跟「皇室战争」升级建筑一样一样的 😂）。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;2022&#x2F;06&#x2F;21 更新了更全的学习内容&lt;&#x2F;p&gt;
&lt;h2 id=&quot;career&quot;&gt;Career&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Building a Career in Software&lt;&#x2F;li&gt;
&lt;li&gt;The Passionate Programmer&lt;&#x2F;li&gt;
&lt;li&gt;Unwritten Laws of Engineering&lt;&#x2F;li&gt;
&lt;li&gt;The Clean Coder: A Code of Conduct for Professional Programmers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;inspire&quot;&gt;Inspire&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[Book] The Design of the UNIX Operating System&lt;&#x2F;li&gt;
&lt;li&gt;[Book] UNIX: A History and a Memoir&lt;&#x2F;li&gt;
&lt;li&gt;[Book] How Linux Works&lt;&#x2F;li&gt;
&lt;li&gt;[Book] Mastering Bitcoin: Programming the Open Blockchain&lt;&#x2F;li&gt;
&lt;li&gt;[Book] Software Engineering at Google&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] Peer-to-peer networking with BitTorrent&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] state charts: a visual formalism for complex systems&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] How to share a secret&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] Kademlia: A Peer-to-peer Information System Based on the XOR Metric&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] Out of the Tar Pit&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] On the criteria to be used in decomposing systems into modules&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] Build systems à la carte: Theory and practice&lt;&#x2F;li&gt;
&lt;li&gt;[Paper] In Search of an Understandable Consensus Algorithm&lt;&#x2F;li&gt;
&lt;li&gt;[Article] Solving Every Sudoku Puzzle&lt;&#x2F;li&gt;
&lt;li&gt;[Article] How to Write a Spelling Corrector&lt;&#x2F;li&gt;
&lt;li&gt;[Lecture] Distributed Systems (via Martin Kleppmann)&lt;&#x2F;li&gt;
&lt;li&gt;[Presentation] Inventing on principle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;computer-science&quot;&gt;Computer Science&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;OSTEP&lt;&#x2F;li&gt;
&lt;li&gt;图解 TCP&#x2F;IP&lt;&#x2F;li&gt;
&lt;li&gt;网络是怎样连接的&lt;&#x2F;li&gt;
&lt;li&gt;剑指 offer&lt;&#x2F;li&gt;
&lt;li&gt;Algorithm Design Manual&lt;&#x2F;li&gt;
&lt;li&gt;编程之美&lt;&#x2F;li&gt;
&lt;li&gt;SCIPJS&lt;&#x2F;li&gt;
&lt;li&gt;Pearls of Functional Algorithm Design&lt;&#x2F;li&gt;
&lt;li&gt;System Design Interview&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;maintainable-and-reliable-code&quot;&gt;Maintainable and Reliable Code&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;How to Design a Good API and Why it Matters&lt;&#x2F;li&gt;
&lt;li&gt;Philosophy of Software Design&lt;&#x2F;li&gt;
&lt;li&gt;The Pragmatic Programmer&lt;&#x2F;li&gt;
&lt;li&gt;Refactoring: Improving the Design of Existing Code&lt;&#x2F;li&gt;
&lt;li&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;&#x2F;li&gt;
&lt;li&gt;Test-Driven Development: By Example&lt;&#x2F;li&gt;
&lt;li&gt;Microservices Patterns&lt;&#x2F;li&gt;
&lt;li&gt;Composing Software&lt;&#x2F;li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;&#x2F;li&gt;
&lt;li&gt;Fundamentals of Software Architecture: An Engineering Approach&lt;&#x2F;li&gt;
&lt;li&gt;Software Architecture: The Hard Parts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dev-mate&quot;&gt;Dev Mate&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;VS Code&lt;&#x2F;li&gt;
&lt;li&gt;Chrome&lt;&#x2F;li&gt;
&lt;li&gt;Git&lt;&#x2F;li&gt;
&lt;li&gt;Docker&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;&#x2F;li&gt;
&lt;li&gt;TypeScript&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;web&quot;&gt;Web&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;&#x2F;li&gt;
&lt;li&gt;CSS&lt;&#x2F;li&gt;
&lt;li&gt;Web API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tools-and-libraries&quot;&gt;Tools and Libraries&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Next.js&lt;&#x2F;li&gt;
&lt;li&gt;Jest&lt;&#x2F;li&gt;
&lt;li&gt;Windi CSS&lt;&#x2F;li&gt;
&lt;li&gt;Prisma&lt;&#x2F;li&gt;
&lt;li&gt;Vite&lt;&#x2F;li&gt;
&lt;li&gt;pnpm&lt;&#x2F;li&gt;
&lt;li&gt;fastify&lt;&#x2F;li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt;React Testing Library&lt;&#x2F;li&gt;
&lt;li&gt;React Query&lt;&#x2F;li&gt;
&lt;li&gt;React Router&lt;&#x2F;li&gt;
&lt;li&gt;Zustand&lt;&#x2F;li&gt;
&lt;li&gt;Immer&lt;&#x2F;li&gt;
&lt;li&gt;Mantine&lt;&#x2F;li&gt;
&lt;li&gt;Framer Motion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;learn&quot;&gt;Learn&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;css-doodle&lt;&#x2F;li&gt;
&lt;li&gt;Turborepo&lt;&#x2F;li&gt;
&lt;li&gt;Preact&lt;&#x2F;li&gt;
&lt;li&gt;SolidJS&lt;&#x2F;li&gt;
&lt;li&gt;million&lt;&#x2F;li&gt;
&lt;li&gt;alpine&lt;&#x2F;li&gt;
&lt;li&gt;swr&lt;&#x2F;li&gt;
&lt;li&gt;vite&lt;&#x2F;li&gt;
&lt;li&gt;rollup&lt;&#x2F;li&gt;
&lt;li&gt;patterns.dev&lt;&#x2F;li&gt;
&lt;li&gt;browser.engineering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>用 Apple Watch 来约束娱乐时间</title>
            <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/limit-entertainment/</link>
            <guid>https://limboy.me/posts/limit-entertainment/</guid>
            <description>&lt;p&gt;从职场出来之后，少了工作上的压力，有了更多可支配的时间，本是极好之事，但如果缺少规划，也很容易出现一天过去了，好像正事啥都没干，一个月过去了，制定的目标还遥遥无期的现象，毕竟「时间收割机」太多了。&lt;&#x2F;p&gt;
&lt;p&gt;收割的过程就好像无意识地来到一片沼泽地，走着走着不知不觉就陷了进去，此时明知状况不对，却也很难再爬出来了。要解决这个问题可以从两方面入手：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;让无意识行为变成有意识行为&lt;&#x2F;li&gt;
&lt;li&gt;限制在沼泽地里的时间&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;最简单粗暴的解决方案是离开沼泽地，也就是不使用各类社交 App、不玩游戏、不看竞技游戏或其他休闲类视频（通常在被收割之后会产生这类想法）。但这通常是自然而然的行为（比如沉迷在另一件让自己无法自拔的事情中，进而无暇做其他事），而非一时的决心。我目前的解决方案是使用 Apple Watch 的计时功能：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;有两个倒计时（可以按需增减）对应游戏和其他休闲活动。&lt;&#x2F;li&gt;
&lt;li&gt;有一个正计时对应在正事上（给自己安排的 Todo）花的时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;limit-entertainment&amp;#x2F;watch-1.png&quot;
        width=&quot;368&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为拿起手机，打开 App 的过程实在太方便，所以会形成无意识的行为，有了倒计时器，每次打开游戏或者其他休闲 App 前，都要激活它。这让无意识行为变成有意识行为，在沼泽地里也更容易有时间观念。同时又由于 Apple Watch 的便捷性，不会给记录的过程造成阻碍。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;limit-entertainment&amp;#x2F;watch-2.png&quot;
        width=&quot;368&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;没有用完的倒计时，可以顺延到第二天（比如第二天有一场很重要的球赛，前一天就可以少用点，「蓄力」）。目前使用下来感觉还不错，如果你也有跟我类似的困扰，或许可以尝试下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>通过视频片段来学习英语</title>
            <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/english-video-clips/</link>
            <guid>https://limboy.me/posts/english-video-clips/</guid>
            <description>&lt;p&gt;「背单词」是件很有挑战的事情，尤其是在出了校园之后，持续下去更是困难。那如何让这个过程多点乐趣呢？然后就想到了视频：如果把包含对应单词的影视片段裁剪出来，通过看视频的方式会不会让「背单词」不那么枯燥？一方面可以对单词的上下文可以有更多的了解，另外也正好可以回顾这些作品。&lt;&#x2F;p&gt;
&lt;p&gt;感觉可行，怎么做呢？其实也简单，从字幕文件入手，字幕包含了单词，也有 Time Offset，拿到这些信息后，找到对应的视频文件，通过 &lt;code&gt;ffmpeg&lt;&#x2F;code&gt; 去截取视频片段就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-bu-xia-zai-ying-shi-ju-he-zi-mu&quot;&gt;第一步：下载影视剧和字幕&lt;&#x2F;h3&gt;
&lt;p&gt;这一步主要是体力活，把字幕和视频文件名对应。有个小技巧：通过 &lt;code&gt;rename&lt;&#x2F;code&gt; 命令可以根据正则批量重命名文件（需要先通过 &lt;code&gt;brew&lt;&#x2F;code&gt; 安装）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# $n 可以反向引用前面括号里的内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# -n 选项可以预览重命名后的效果（dry run）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 「老友记.Friends.s01e07.ass」将会被重命名为「Friends.S01E07.ass」
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;s&#x2F;老友记.(Friends.)s([\d]+)e([\d]+)&#x2F;$1S$2E$3&#x2F;g&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside class=&quot;info&quot; &gt;
  Mac 也内置了批量重命名文件的功能（选择多个文件 -&amp;gt; 右键 -&amp;gt; 重命名），如果不需要正则替换的话，这个也很方便
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;di-er-bu-xie-jiao-ben&quot;&gt;第二步：写脚本&lt;&#x2F;h3&gt;
&lt;p&gt;这个脚本的目标是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;找到包含该单词的视频，并解析出开始时间&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;code&gt;ffmpeg&lt;&#x2F;code&gt; 截取视频片段&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;其中 &lt;code&gt;.ass&lt;&#x2F;code&gt; 文件每一行的字幕格式如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Dialogue: 0,0:11:38.57,0:11:39.84,*Default,NTP,0000,0000,0000,,沃尔特  来看看\NCheck it out Walt.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以只要定位到包含该单词的行，然后找到符合特征(&lt;code&gt;dd:dd:dd.dd&lt;&#x2F;code&gt;)的字符串即可。这里遇到一个小问题，在打开某些字幕文件时会出现乱码，通过 Hex Editor 看了下长这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;english-video-clips&amp;#x2F;utf-16.jpg&quot;
        width=&quot;1054&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;BOM 头是 &lt;code&gt;0xFFFE&lt;&#x2F;code&gt;（小端序），同时还有用来占位的 &lt;code&gt;00&lt;&#x2F;code&gt;，是 &lt;code&gt;utf16le&lt;&#x2F;code&gt; 编码的文件。所以在判断该用哪种编码打开时要格外注意。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-san-bu-jie-qu-shi-pin&quot;&gt;第三步：截取视频&lt;&#x2F;h3&gt;
&lt;p&gt;这一部分比较简单，一行命令就妥了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# -t 表示 duration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ffmpeg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -ss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 01:19:27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; input.mp4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 00:00:30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; copy output.mp4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最终效果大概这样：
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;assets.limboy.me&amp;#x2F;file&amp;#x2F;limboy-personal&amp;#x2F;stage0-demo.mov&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来可行，但还挺不方便的，总不能每次要生成视频都要打开终端吧，要找到生成的视频并浏览也不够便捷，如果还要加上「生词本」的功能，同时查看该单词的具体解释又该怎么办呢？难道要写一个桌面端应用 🤔&lt;&#x2F;p&gt;
&lt;p&gt;我甚至想到用 &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;Next.js&lt;&#x2F;a&gt; 来开发一个本地 web 服务了，感觉还是太麻烦。那有没有能实现这些功能、足够好用，同时开发成本也低的解决方案呢？这时我想到了 &lt;a href=&quot;https:&#x2F;&#x2F;www.raycast.com&#x2F;&quot;&gt;Raycast&lt;&#x2F;a&gt; 这个平时一直在用的 Launcher。&lt;&#x2F;p&gt;
&lt;p&gt;浏览了下文档后，发现可以很好地满足需求。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-si-bu-jie-ru-raycast-sheng-cheng-dan-ci-shi-pin&quot;&gt;第四步：接入 Raycast（生成单词视频）&lt;&#x2F;h3&gt;
&lt;p&gt;简单介绍下 Raycast，它是一个 Mac 下的启动器，跟 &lt;a href=&quot;https:&#x2F;&#x2F;www.alfredapp.com&#x2F;&quot;&gt;Alfred&lt;&#x2F;a&gt; 类似，但 UI 和 UE 比 Alfred 更好，还免费，支持的 Extension 也不少。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;english-video-clips&amp;#x2F;raycast.jpg&quot;
        width=&quot;1500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里我们会用到一个脚本用来生成单词视频，一个 Extension 用来浏览单词对应的视频和解释，同时支持添加到单词本（Add to New）。&lt;&#x2F;p&gt;
&lt;p&gt;创建脚本的过程很简单，启动 Raycast 后，输入 &lt;code&gt;Create Script Command&lt;&#x2F;code&gt;，输入必要的信息，就会生成一个 &lt;code&gt;.sh&lt;&#x2F;code&gt; 结尾的文件（需要先在 Setting 的 Extension 页，&lt;code&gt;Add Script Directory&lt;&#x2F;code&gt;），把生成视频的脚本复制上去就行了。效果如下：&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;assets.limboy.me&amp;#x2F;file&amp;#x2F;limboy-personal&amp;#x2F;raycast-cli.mov&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h3 id=&quot;di-wu-bu-jie-ru-raycast-liu-lan-dan-ci&quot;&gt;第五步：接入 Raycast（浏览单词）&lt;&#x2F;h3&gt;
&lt;p&gt;Raycast 提供了方便的 &lt;a href=&quot;https:&#x2F;&#x2F;developers.raycast.com&#x2F;&quot;&gt;API&lt;&#x2F;a&gt;（React）来搭建界面和交互。得益于良好的设计，这些 API 使用起来非常舒服和直观。同时因为是运行在 Node 环境，所以可以访问本地文件、执行脚本等。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  下次如果有涉及跟本地交互的需求，可能会优先考虑 Raycast，不合适的话再考虑本地运行 Next.js 服务。
&lt;&#x2F;aside&gt;
&lt;p&gt;最终的效果如下：&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;assets.limboy.me&amp;#x2F;file&amp;#x2F;limboy-personal&amp;#x2F;raycast-english-clips.mov&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;代码也不过百来行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ActionPanel&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Icon &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;@raycast&#x2F;api&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;fs&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execSync &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;child_process&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;useState &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;react&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWordsDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;Users&#x2F;limboy&#x2F;Dropbox&#x2F;Videos&#x2F;Snippets&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newWordsDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;Users&#x2F;limboy&#x2F;Dropbox&#x2F;English&#x2F;Snippets&#x2F;Memorizing&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;allWords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.readdirSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWordsDir&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.filter&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newWords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.readdirSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newWordsDir&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.filter&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;allSnippets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWordsDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.readdirSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toggleNew &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;toNew&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;toNew&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`ln -s ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWordsDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;} ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newWordsDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}`&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`rm ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newWordsDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}`&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;List&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Item
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;All Words&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{Icon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;actions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;Action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Push
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;All Words&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&amp;lt;WordsList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Item
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;New Words&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{Icon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Star&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;actions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;Action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Push
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;All Words&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&amp;lt;WordsList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;WordsList&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;isAll &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span&gt;}) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wordsFunction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newWords&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;setWords&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;wordsFunction&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;List&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dictPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;dict:&#x2F;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;List.Item
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;list-icon.png&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;actions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;Action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Push
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{Icon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Video&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Show Video Snippets&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&amp;lt;Snippets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;Action.Open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Show in Dict&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dictPath&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Action
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{Icon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{isAll ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Add to New&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Remove from New&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;onAction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{() =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toggleNew&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;isAll&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setWords&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;wordsFunction&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;                  }}
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ActionPanel&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;      })}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;Snippets&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;}) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;List&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;allSnippets&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;snippet&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;videoPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allWordsDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;snippet&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;List.Item
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{Icon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Video&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;snippet&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;actions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;Action.Open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;videoPath&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Open Video&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;&#x2F;ActionPanel&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;      })}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过这种方式，不仅让影视文件可以被再次唤醒，同时也有助于单词的记忆，还挺方便的。接下来就看能背多少个单词了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的 Logseq 使用习惯</title>
            <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/logseq/</link>
            <guid>https://limboy.me/posts/logseq/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;logseq.com&#x2F;&quot;&gt;Logseq&lt;&#x2F;a&gt; 是有一次在跟 &lt;a href=&quot;https:&#x2F;&#x2F;lutaonan.com&#x2F;&quot;&gt;Randy&lt;&#x2F;a&gt; 聊天时，他提到最近用得比较多的笔记工具。试用了之后，就被吸引了。经过一段时间摸索，找到了比较舒服的使用姿势，跟大家分享下。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;PS:&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;bytetalk.fm&quot;&gt;Bytetalk&lt;&#x2F;a&gt; 有一期&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61c6cccac525309a443b5b36&quot;&gt;跟 Logseq 创始人的访谈播客&lt;&#x2F;a&gt;，感兴趣的话可以听一下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;PPS:&lt;&#x2F;strong&gt; Randy 做过一个&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=DxoGJBb1mWQ&quot;&gt;视频&lt;&#x2F;a&gt;，分享了他&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;randyloop&#x2F;status&#x2F;1501588790988918784?s=20&amp;amp;t=W_yXlH6y6i-xoL08uhZE9g&quot;&gt;使用 Logseq 的一些经验&lt;&#x2F;a&gt;
&lt;&#x2F;aside&gt;&lt;h2 id=&quot;logseq-shi-shi-yao&quot;&gt;Logseq 是什么&lt;&#x2F;h2&gt;
&lt;p&gt;Logseq 是一个以 Outline 为组织形式，以 Block 为核心，支持双向链接和灵活查询的笔记工具。由于它的强大和灵活，很多人（包括我）都用它来 Organize Life。&lt;&#x2F;p&gt;
&lt;p&gt;相比于其他的笔记工具，Logseq 的独特点有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极低的记录门槛&lt;&#x2F;strong&gt;。每天会自动新建 Journal，然后直接写就行了。Outline 模式也让输入变得非常轻量。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;强大的查询能力&lt;&#x2F;strong&gt;。基于 Outline 组织模式的笔记工具，如果欠缺聚合能力，就容易出现孤岛，Logseq 内置了 Simple Query 和 Advanced Query 两种模式，可以很好地按需聚合内容。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开源&lt;&#x2F;strong&gt;。开源给人一种安心感，也能体现创作者对代码的信心。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;免费&lt;&#x2F;strong&gt;。嗯，这个理由很充分了···&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Local Data&lt;&#x2F;strong&gt;。数据存在本地，不用担心数据泄露或者被用来作为大数据的训练集，也能让 App 的体验更流畅（相比 Online Service，如 Roam Research）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;&#x2F;strong&gt;。没有使用私有格式，其他工具也能打开&#x2F;浏览文件内容，也方便对数据做二次开发。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;活跃的社区&lt;&#x2F;strong&gt;。不用担心没人用，导致停止开发，遇到问题也能愉快地交流。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;PS:&lt;&#x2F;strong&gt; Logseq 的部分投资人也是 Logseq 的重度用户，甚至会写 Logseq 的插件
&lt;&#x2F;aside&gt;
&lt;p&gt;当然槽点也是有的，比如设计上还不够精细，文档也有待完善，Advanced Query 虽然很好用，但门槛也很高。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  以天为单位来录入内容的另一好处是方便回顾，如果想知道哪天做了哪些事，打开当天的页面就能了解大概。
&lt;&#x2F;aside&gt;
&lt;p&gt;Logseq 使用起来很自由，但如果缺少规范也容易迷失，无法发挥最大威力，下面就来聊聊我的一些使用经验，仅供参考。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-xie-gai-nian&quot;&gt;一些概念&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;block&quot;&gt;Block&lt;&#x2F;h3&gt;
&lt;p&gt;Block 是 Logseq 中很重要的一个概念，随便在里面输入一段话，这段话就是一个 Block。Block 可以有 Parent 和 Children&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 每一行都是 Block
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 缩进后会成为 Child Block
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 点击左边的小圆点可以进入到 Block 内页
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 也可以折叠和展开
&lt;&#x2F;span&gt;&lt;span&gt;• &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Logseq 是一个不错的笔记工具
&lt;&#x2F;span&gt;&lt;span&gt;  • &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;开源且免费
&lt;&#x2F;span&gt;&lt;span&gt;  • &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;使用方便
&lt;&#x2F;span&gt;&lt;span&gt;  • &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;page&quot;&gt;Page&lt;&#x2F;h3&gt;
&lt;p&gt;如果只有 Block，那这些 Block 之间就很难建立关联，Page 可以解决这个问题（Tag 也可以）。只要在一段文字的前后加入两个中括号就行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Logseq 会自动成为一个 Page，title 就是 Logseq
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 点击进去后还能看到 Back Link，也就是这个 Block
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Logseq&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;最近的一些更新
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tag&quot;&gt;Tag&lt;&#x2F;h3&gt;
&lt;p&gt;跟 Page 类似，Tag 也可以达到聚合 Block 的效果，只要在前面加上 &lt;code&gt;#&lt;&#x2F;code&gt;。既然两者效果类似，那使用场景有什么区别呢？我的习惯是：如果是一段语句的组成部分就用 Page，其他场景就用 Tag（因为 Tag 无法处理空格，所以我更习惯用 &lt;code&gt;#[[Tag]]&lt;&#x2F;code&gt; 这种形式）。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Logseq 的 advanced query 学起来好累啊 #Thoughts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;写一篇 [[关于 Logseq]] 的文章
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;back-link&quot;&gt;Back Link&lt;&#x2F;h3&gt;
&lt;p&gt;所有有 Tag 或 Page 的 Block 都会被聚合在一起，同时还会带上日期，这个非常方便。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;backlink.jpg&quot;
        width=&quot;1122&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;&#x2F;h3&gt;
&lt;p&gt;Page 和 Block 都可以有自己的属性，对于 Page 来说，第一行如果是 &lt;code&gt;XXX::YYY&lt;&#x2F;code&gt; 这样的形式就会被认为是该页面的属性，对于 Block 则是下一个缩进行。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;properties.jpg&quot;
        width=&quot;498&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图中，&lt;code&gt;关于个人笔记&lt;&#x2F;code&gt;这个页面就有一个 &lt;code&gt;is&lt;&#x2F;code&gt; 的属性，该属性的 value 是 &lt;code&gt;[[Blog]]&lt;&#x2F;code&gt;。结合 Advanced Query 可以实现一些很方便的效果。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  给页面加属性毕竟是一件有成本的事情，我会对持续多天的页面（通常是一个领域或项目）的内容加上属性，对于像 &lt;code&gt;#Pearls&lt;&#x2F;code&gt; 这些不那么重要的内容就只是加 Tag
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;simple-query&quot;&gt;Simple Query&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;logseq.github.io&#x2F;#&#x2F;page&#x2F;queries&quot;&gt;Simple Query&lt;&#x2F;a&gt; 比较容易理解，但能力也有限，格式为 &lt;code&gt;{{query (some query detail here)}}&lt;&#x2F;code&gt;，常用的有：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;{{query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#tag&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query [[page]]}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;full-text search&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;[[project]] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt; NOW LATER))}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;[[page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]] [[page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]])}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;between&lt;&#x2F;span&gt;&lt;span&gt; -7d +7d) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt; DONE))}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt; key value)}}
&lt;&#x2F;span&gt;&lt;span&gt;{{query (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;page-tags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#tag&lt;&#x2F;span&gt;&lt;span&gt;)}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;advanced-query&quot;&gt;Advanced Query&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.logseq.com&#x2F;#&#x2F;page&#x2F;advanced%20queries&quot;&gt;Advanced Query&lt;&#x2F;a&gt; 会更复杂，但能力也更强，格式如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;{:title  [:h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Your query title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; :query  [:find (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pull&lt;&#x2F;span&gt;&lt;span&gt; ?b [*])
&lt;&#x2F;span&gt;&lt;span&gt;          :where ...]
&lt;&#x2F;span&gt;&lt;span&gt; :inputs [...]
&lt;&#x2F;span&gt;&lt;span&gt; :view             (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;[query-result] [:div ...])
&lt;&#x2F;span&gt;&lt;span&gt; :result-transform (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;[query-result] ...)
&lt;&#x2F;span&gt;&lt;span&gt; :collapsed? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些是 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Datalog&quot;&gt;Datalog&lt;&#x2F;a&gt; 的语法，具体解释可见&lt;a href=&quot;https:&#x2F;&#x2F;docs.datomic.com&#x2F;on-prem&#x2F;query&#x2F;query.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-yao-dian&quot;&gt;使用要点&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;biao-qian-he-shu-xing-de-xuan-ze&quot;&gt;标签和属性的选择&lt;&#x2F;h3&gt;
&lt;p&gt;通常出于便利考虑，会选择给 Block 加标签，以聚合同类内容，比如 &lt;code&gt;[[pnpm 的设计理念]]&lt;&#x2F;code&gt; 这个包含 Page 的 Block，可以加一个 &lt;code&gt;#[[Frontend]]&lt;&#x2F;code&gt; 标签，这样进入到 &lt;code&gt;Frontend&lt;&#x2F;code&gt; 页面后就能看到 &lt;code&gt;[[pnpm 的设计理念]]&lt;&#x2F;code&gt; 这个 Block 了。&lt;&#x2F;p&gt;
&lt;p&gt;那么这两种用法有什么区别呢？&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; Tag
&lt;&#x2F;span&gt;&lt;span&gt;[[pnpm 的设计理念]] #[[Programming]] #[[Frontend]]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Properties
&lt;&#x2F;span&gt;&lt;span&gt;pnpm 的设计理念
&lt;&#x2F;span&gt;&lt;span&gt;category:: [[Programming]]
&lt;&#x2F;span&gt;&lt;span&gt;sub-category:: [[Frontend]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;直接用 Tag 的话，有两个问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果 &lt;code&gt;[[pnpm 的设计理念]]&lt;&#x2F;code&gt; 下的内容较多，要分很多天来啃，那么这个 Block 都要手动加上 &lt;code&gt;#[[Frontend]]&lt;&#x2F;code&gt; 这个标签。&lt;&#x2F;li&gt;
&lt;li&gt;如果要给这个 Block 加上其他的 Tag，如 &lt;code&gt;#[[Build Tool]]&lt;&#x2F;code&gt;，那么就要找到所有引用该页面的 Block，挨个加上这个 Tag。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果最近一段时间在研究这个话题，那么可以每天 &lt;code&gt;copy ref&lt;&#x2F;code&gt; 过来，然后在下面补充学习内容。学习完后，如果其他 Block 要引用 &lt;code&gt;[[pnpm 的设计理念]]&lt;&#x2F;code&gt;，比如 &lt;code&gt;正如在 [[pnpm 的设计理念]] 中所说...&lt;&#x2F;code&gt; 这段话，不加标签，那么这个 Block 就会失去跟 &lt;code&gt;[[Frontend]]&lt;&#x2F;code&gt; &lt;code&gt;[[Programming]]&lt;&#x2F;code&gt; 的关联，如果要加标签则容易遗漏，也显得奇怪。&lt;&#x2F;p&gt;
&lt;p&gt;对于会被其他 Block 引用的 Page，可以采用给页面加属性，然后结合 Advanced Query 来实现。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  关于使用 flat blocks（block 之间是平行关系） 还是 nest blocks（block 之间是层级关系），这个因人而异。我之前喜欢用 nest blocks，如:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;• [[Thoughts]]
&lt;&#x2F;span&gt;&lt;span&gt;  • Logseq 还是挺好用的
&lt;&#x2F;span&gt;&lt;span&gt;  • 应该要写一篇使用 Logseq 心得的文章
&lt;&#x2F;span&gt;&lt;span&gt;  • ···
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，可以建立 Daily 模版，然后只要往对应的 Block 下面添加内容就行了。进入页面后，也能看到相关的 Block。但如果 Block 的属性复杂一些，如既属于编程，同时还是一本书，就不知道该放在哪个 Block 下面了。&lt;&#x2F;p&gt;
&lt;p&gt;flat blocks 就像这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;• 冰椰拿铁什么时候这么难喝了 #Tiny
&lt;&#x2F;span&gt;&lt;span&gt;• 后面两个人说话好大声呀 #Tiny
&lt;&#x2F;span&gt;&lt;span&gt;• 晚上想看一部电影 #Thoughts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;后来对 nest blocks 和 flat blocks 定了个规则，只有有明确从属关系的才使用 nest blocks（如书摘，文摘），其他默认用 flat blocks。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;ye-mian-shu-xing-he-gao-ji-jian-suo&quot;&gt;页面属性和高级检索&lt;&#x2F;h3&gt;
&lt;p&gt;页面属性上面已有介绍（页面的第一行以 &lt;code&gt;Key::Value&lt;&#x2F;code&gt; 这样的格式书写），我常用的属性有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;is:&lt;&#x2F;strong&gt; 表示这个 Page 是什么，如 &lt;code&gt;is::[[Blog]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;category:&lt;&#x2F;strong&gt; 这个 Page 的分类，如 &lt;code&gt;category::[[Programming]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;sub-category:&lt;&#x2F;strong&gt; 这个 Page 的子分类，如 &lt;code&gt;sub-category::[[Frontend]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;medium:&lt;&#x2F;strong&gt; 这个 Page 的媒介类型（视频、书、文章等），如 &lt;code&gt;medium::[[Book]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside class=&quot;info&quot; &gt;
  一开始没有分这么细，用 &lt;code&gt;tags::[[Book]] [[Programming]]&lt;&#x2F;code&gt; 这种形式聚合在一起。但在写 Query 时遇到了障碍，被迫「降级」成这种写法。
&lt;&#x2F;aside&gt;
&lt;p&gt;然后就可以用 Query 把这些 Block 找出来了。比如可以找到所有包含 &lt;code&gt;category::[[Programming]]&lt;&#x2F;code&gt; 属性的页面的 Block。如果只是找出页面是不够的，我们来看下对比。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;compare.jpg&quot;
        width=&quot;1310&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面是 Block，下面是 Page，通常我们更想要得到上面的效果。为此，需要写 Advanced Query，下面这段代码会找到所有引用了包含 &lt;code&gt;category&lt;&#x2F;code&gt; 属性为 &lt;code&gt;Programming&lt;&#x2F;code&gt; 的页面的 Block。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#+BEGIN_QUERY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; 以下注释是我查找网上文章结合自己的理解，不一定对
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; &amp;#39;?xxx&amp;#39; 表示一个变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; &amp;#39;$&amp;#39; 表示数据库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; &amp;#39;:xxx&amp;#39; 表示字段和查询关键字
&lt;&#x2F;span&gt;&lt;span&gt;{:title [:h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Todo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; :query [:find (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pull&lt;&#x2F;span&gt;&lt;span&gt; ?b [*]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;;找到所有符合条件的条目，&amp;#39;*&amp;#39; 表示条目的所有字段
&lt;&#x2F;span&gt;&lt;span&gt; :in $ ?category &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;;&amp;#39;?category&amp;#39; 就是通过 &amp;#39;inputs&amp;#39; 传过来的变量
&lt;&#x2F;span&gt;&lt;span&gt; :where
&lt;&#x2F;span&gt;&lt;span&gt;  [?b :block&#x2F;ref-pages ?p] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;;条件语句用 &amp;#39;[]&amp;#39; 表示，?p 是什么下面会说明
&lt;&#x2F;span&gt;&lt;span&gt;  [?p :block&#x2F;properties ?pr] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;;?p 是包含了 properties 为 ?pr 的页面，?pr 是什么，下面会说明
&lt;&#x2F;span&gt;&lt;span&gt;  [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt; ?pr :category) ?t] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; get 是获取 object 的属性，并将它设置为 ?t
&lt;&#x2F;span&gt;&lt;span&gt;  [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;contains?&lt;&#x2F;span&gt;&lt;span&gt; ?t ?category)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; contains?（注意&amp;#39;?&amp;#39;在后面）表示 predict，也就是符合特定条件
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;[?b :block&#x2F;marker ?m])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; not [xxx] 表示对 [xxx] 的结果取反
&lt;&#x2F;span&gt;&lt;span&gt; ]
&lt;&#x2F;span&gt;&lt;span&gt; :inputs [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Programming&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;; 传入一个参数
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#+END_QUERY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果要找到标记为 TODO 的，稍作下调整即可:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#+BEGIN_QUERY
&lt;&#x2F;span&gt;&lt;span&gt;{:title [:h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Doing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; :query [:find (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pull&lt;&#x2F;span&gt;&lt;span&gt; ?b [*])
&lt;&#x2F;span&gt;&lt;span&gt; :in $ ?category
&lt;&#x2F;span&gt;&lt;span&gt;:where
&lt;&#x2F;span&gt;&lt;span&gt; [?b :block&#x2F;marker ?m]
&lt;&#x2F;span&gt;&lt;span&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ?m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;TODO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt; [?b :block&#x2F;ref-pages ?p]
&lt;&#x2F;span&gt;&lt;span&gt; [?p :block&#x2F;properties ?pr]
&lt;&#x2F;span&gt;&lt;span&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt; ?pr :category) ?t]
&lt;&#x2F;span&gt;&lt;span&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;contains?&lt;&#x2F;span&gt;&lt;span&gt; ?t ?category)]
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; :inputs [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Programming&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;#+END_QUERY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside class=&quot;info&quot; &gt;
  这里使用 &lt;code&gt;:inputs [:current-page]&lt;&#x2F;code&gt; 会更加灵活，但 Logseq 对 &lt;code&gt;current-page&lt;&#x2F;code&gt; 做了小写处理，导致 &lt;code&gt;(contains? ?t ?category)&lt;&#x2F;code&gt; 无法匹配，换用其他写法如 &lt;code&gt;(some #(= (clojure.string&#x2F;lower-case %) ?current-page) (into [] ?t))&lt;&#x2F;code&gt; （将 &lt;code&gt;set&lt;&#x2F;code&gt; 先转为 &lt;code&gt;vect&lt;&#x2F;code&gt;，再通过 some 判断是否有一个 item，小写化之后跟 &lt;code&gt;?current-page&lt;&#x2F;code&gt; 一样），也不行，所以就手动传入 Page Name 了。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;shi-yong-copy-block-embed-lai-ju-he-nei-rong-dao-ye-mian&quot;&gt;使用 Copy block embed 来聚合内容到页面&lt;&#x2F;h3&gt;
&lt;p&gt;这是某一天的 Journal 页，每天的页面内容大概就是这个样子&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;journal.jpg&quot;
        width=&quot;1688&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到有些 Block 打了标签，有些没有。没打标签的，通常会 Link 到一个 Page，在 Page 里会有相关的属性，通过属性可以将 Block Query 出来。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;page-properties.jpg&quot;
        width=&quot;1674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  因为这个 Page 有可能在其他 Block 中被引用，所以选择了 Properties
&lt;&#x2F;aside&gt;
&lt;p&gt;展开的内容就记在 Block 下，这样回顾时也方便知道每天都记了哪些内容。但这样会比较零散，其他 Block 再引用该 Page 时，只能看到内容分散在不同天的 Block 下。这里有一个 Tip 是使用 &lt;code&gt;Copy block embed&lt;&#x2F;code&gt;。将每天记录的内容 &lt;code&gt;Copy block embeds&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;copy-block-embeds.jpg&quot;
        width=&quot;756&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后在对应的页面粘贴即可&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;paste-embed-blocks.jpg&quot;
        width=&quot;1670&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在一处编辑，其他地方自动更新。点击右边的数字可以看到原始的内容。这样既可以发挥 Logseq 快速记录的特性，又能让相关内容很好地聚合。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  &lt;code&gt;copy ref&lt;&#x2F;code&gt; 和 &lt;code&gt;copy embeds&lt;&#x2F;code&gt; 都可以同步显示内容。区别是，前者只能展示一级内容，且点击后会跳转到 Source Block，后者可以展示多个层级的内容，且可以就地编辑。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;zai-ye-mian-nei-jiang-xiang-guan-block-an-bu-tong-wei-du-ju-he&quot;&gt;在页面内将相关 Block 按不同维度聚合&lt;&#x2F;h3&gt;
&lt;p&gt;因为 Block 与 Page 之间是通过属性间接关联在一起的，所以这些 Block 不会自动出现在该 Page 下，需要通过 Advanced Query 将它们检索出来，相关的 Code 上面已经有了，这里看下展示效果：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;page.jpg&quot;
        width=&quot;1664&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;划分的维度很简单：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox:&lt;&#x2F;strong&gt; 没有 Todo 标记的（&lt;code&gt;(not [?b :block&#x2F;marker ?m])&lt;&#x2F;code&gt;），表示将来某一天可以做&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Todo:&lt;&#x2F;strong&gt; 标记为 &lt;code&gt;TODO&lt;&#x2F;code&gt; 的 Block&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Doing:&lt;&#x2F;strong&gt; 标记为 &lt;code&gt;DOING&lt;&#x2F;code&gt; 的 Block&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Done:&lt;&#x2F;strong&gt; 标记为 &lt;code&gt;DONE&lt;&#x2F;code&gt; 的 Block&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside class=&quot;info&quot; &gt;
  这里需要在设置里将 &amp;quot;DOING 耗时统计&amp;quot;  这一项关掉，不然只要在 TODO 和 DOING 状态间切换就会进行耗时计算，这跟我们的使用姿势不符。
&lt;&#x2F;aside&gt;
&lt;p&gt;假如 &lt;code&gt;Todo&lt;&#x2F;code&gt; 列表空了，就从 &lt;code&gt;Inbox&lt;&#x2F;code&gt; 中找几个，状态切换为 &lt;code&gt;TODO&lt;&#x2F;code&gt; ，就会自动出现在 &lt;code&gt;Todo&lt;&#x2F;code&gt; 这个 Group 下。&lt;&#x2F;p&gt;
&lt;p&gt;假如 &lt;code&gt;Doing&lt;&#x2F;code&gt; 的做完了，从 &lt;code&gt;Todo&lt;&#x2F;code&gt; 中找几个，状态切换为 &lt;code&gt;DOING&lt;&#x2F;code&gt; （点击 TODO 按钮即可），就会自动出现在 &lt;code&gt;Doing&lt;&#x2F;code&gt; 这个 Group 下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-bing-guan-li-todo&quot;&gt;一并管理 Todo&lt;&#x2F;h3&gt;
&lt;p&gt;用 Logseq 管理 Todo 不是一个顺便的行为，而是合适的行为。对于 Todo 来说，我觉得 Context 是很重要的，而 Logseq 可以为 Todo 提供足够多的 Context，同时可以将 Todo 和其他 Block 联系起来。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chang-jing-mo-ni&quot;&gt;场景模拟&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jin-tian-de-dai-ban-shi-xiang-you-na-xie&quot;&gt;今天的待办事项有哪些&lt;&#x2F;h3&gt;
&lt;p&gt;先从昨天的 Todo 中找哪些今天可以继续做的，通过 copy ref 的方式，放到今天的 Todo 列表中。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  用 copy ref 可以保持一致性，只要修改一处，其他地方都会同时更新。
&lt;&#x2F;aside&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;today-todo.jpg&quot;
        width=&quot;898&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击进去后可以看到相关的引用&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;ref-backlink.jpg&quot;
        width=&quot;1674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  注意到 Block 后面的数字，这是 Logseq 的一个 Feature：点击 「TODO」后会切换到「DOING」，同时开始计时，当再切换到「TODO」或「DONE」时，就能看到经过了多少时间。可以在 Settings 里关闭该功能。
&lt;&#x2F;aside&gt;
&lt;p&gt;如果这几个 Todo 做完了，可以从其他标为 Favorite 页面的待办里挑几个出来。「挑」的过程就是将 Block 的 &lt;code&gt;&#x2F;TODO&lt;&#x2F;code&gt; 切换为 &lt;code&gt;&#x2F;DOING&lt;&#x2F;code&gt;，然后 copy ref 到今天的 Todo 列表里。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  我的一些 Favorite 页面，方便回顾&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;- Ideas &#x2F;&#x2F; 随时冒出来的一些想法
&lt;&#x2F;span&gt;&lt;span&gt;- Thoughts&#x2F;&#x2F; 自己的一些思考
&lt;&#x2F;span&gt;&lt;span&gt;- Pearls &#x2F;&#x2F; 网上看到的一些不错的内容
&lt;&#x2F;span&gt;&lt;span&gt;- Tiny &#x2F;&#x2F; 记录生活中的一些小细节
&lt;&#x2F;span&gt;&lt;span&gt;- Articles
&lt;&#x2F;span&gt;&lt;span&gt;- Books
&lt;&#x2F;span&gt;&lt;span&gt;- Frontend
&lt;&#x2F;span&gt;&lt;span&gt;- Programming
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bpikCLhpIRY&quot;&gt;这个视频&lt;&#x2F;a&gt;的作者用了另一种维度来作为 Daily Entry 的模版&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;- Create
&lt;&#x2F;span&gt;&lt;span&gt;- Consume
&lt;&#x2F;span&gt;&lt;span&gt;- Connect
&lt;&#x2F;span&gt;&lt;span&gt;- Celebrate
&lt;&#x2F;span&gt;&lt;span&gt;- Coordinate
&lt;&#x2F;span&gt;&lt;span&gt;- Consolidate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;&#x2F;aside&gt;&lt;h3 id=&quot;zuo-du-shu-bi-ji&quot;&gt;做读书笔记&lt;&#x2F;h3&gt;
&lt;p&gt;这是 Logseq 的又一个亮点，通过命令 &lt;code&gt;&#x2F;Upload an asset&lt;&#x2F;code&gt; 上传 PDF 文件后（其实就是将文件拷贝到 Logseq 在本地的目录），点击该文件可以左右分栏，左边是 PDF 电子书，右边是笔记区。阅读过程中，如果有想记录的内容，可以先在 PDF 中高亮，然后右键选择 &lt;code&gt;copy ref&lt;&#x2F;code&gt;，在 Block 中粘贴，就能引用到这些文字了。相比传统的复制粘贴，&lt;code&gt;copy ref&lt;&#x2F;code&gt; 的内容点击后，可以回到 PDF，进而查看更多的上下文。也可以方便地加入自己的 Comment&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;pdf-read.jpg&quot;
        width=&quot;1581&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;lin-shi-chu-xian-de-dai-ban-shi-xiang&quot;&gt;临时出现的待办事项&lt;&#x2F;h3&gt;
&lt;p&gt;可以新建一个 &lt;code&gt;Inbox&lt;&#x2F;code&gt; 页面，然后把事项放到当天的 Journal 页，打上 &lt;code&gt;Inbox&lt;&#x2F;code&gt; 标签。如&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;• 帮忙调研某个产品 #Inbox
&lt;&#x2F;span&gt;&lt;span&gt;• 用户反馈了个 Bug #Inbox
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后就可以在工作间隙，Review 这些 Inbox 项，看是否应该在今天处理，是否要加上特定的属性（方便归类到特定的页面）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-gu&quot;&gt;回顾&lt;&#x2F;h3&gt;
&lt;p&gt;回顾是一个很重要的过程，对于学到的内容可以加深印象，了解进行中的事情处于什么状态，帮助制定下一阶段的计划。对于每一个需要回顾的页面，可以都加入到侧栏的 Favorites，同时结合 Advanced Query 把 Block 按 Todo &#x2F; Doing &#x2F; Done 区分开来（像 Ideas &#x2F; Thoughts 这样的页面就不需要了）。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  如果担心遗漏，可以按日期来 Review
&lt;&#x2F;aside&gt;&lt;h2 id=&quot;xiao-ji-qiao&quot;&gt;小技巧&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;输入 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 会出现自动提示，比如设置为 TODO，上传附件等，其中 &lt;code&gt;&#x2F;Today&lt;&#x2F;code&gt; 和 &lt;code&gt;&#x2F;Current time&lt;&#x2F;code&gt; 很方便，前者可以自动添加当前日期，如 &lt;code&gt;[[2022-03-24]]&lt;&#x2F;code&gt;，这样就会以 Back Link 的形式出现在 &lt;code&gt;2022-03-24&lt;&#x2F;code&gt; Journal 页。后者会输出当前时间（精确到分钟），可以用来记录时间消耗。&lt;code&gt;&#x2F;Draw&lt;&#x2F;code&gt; 甚至可以嵌入一个画板。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;{{cloze content}}&lt;&#x2F;code&gt; 可以把 &lt;code&gt;content&lt;&#x2F;code&gt; 隐藏起来，点击后展开，可以用来记忆单词。&lt;&#x2F;li&gt;
&lt;li&gt;将常用的结构设置为 Template（比如每天的例行事项，右键点击左边的小圆点可以看到这个选项），在需要的地方选择该模版即可自动填充模版内容。&lt;&#x2F;li&gt;
&lt;li&gt;在设置里开启「Developer mode」后，可以安装 Plugins 和 Themes&lt;&#x2F;li&gt;
&lt;li&gt;按住 &lt;code&gt;Shift&lt;&#x2F;code&gt; 点击 Page 链接，可以在 Sidebar 打开，方便同时浏览&lt;&#x2F;li&gt;
&lt;li&gt;编辑代码或者 Query，可以点击上面的空白区域

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;logseq&amp;#x2F;edit-query.jpg&quot;
        width=&quot;984&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;以上就是我目前的 Logseq 使用习惯。因为 Logseq 灵活又强大，大家的使用姿势都不太一样，以下这几个链接也可以一并参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bmpi.dev&#x2F;self&#x2F;life-in-plain-text&#x2F;&quot;&gt;我的人生管理系统&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bmpi.dev&#x2F;self&#x2F;okr-gtd-note-logseq&#x2F;&quot;&gt;OKR + GTD + Note =&amp;gt; Logseq&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=BhHfF0P9A80&quot;&gt;How I Use Logseq to Take Notes and Organize My Life&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=DxoGJBb1mWQ&quot;&gt;我是如何使用 Logseq 的 (via Randy)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bpikCLhpIRY&quot;&gt;How I Orgnise My Life&lt;&#x2F;a&gt; 作者用的 Roam Research，可以参考下使用理念&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ScRrcL__SSI&quot;&gt;Roam Research 作者是如何使用 Roam Research 的&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>拼音猜成语</title>
            <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/idiom/</link>
            <guid>https://limboy.me/posts/idiom/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pinyincaichengyu.com&#x2F;&quot;&gt;拼音猜成语&lt;&#x2F;a&gt; 是我第一款 PV 超过百万的产品，这里就来聊聊它背后的故事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;data.jpg&quot;
        width=&quot;2257&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h3&gt;
&lt;p&gt;有一段时间在 Twitter 上经常能看到有推友在发各种颜色的方块，原来是一个叫 &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;games&#x2F;wordle&#x2F;index.html&quot;&gt;Wordle&lt;&#x2F;a&gt; 的英文猜词小游戏，试玩了后发现还挺不错的，轻量、节制还益智。就拉妹子一起来玩，有时还会在零点一起挑战。但非母语也影响了游戏体验，遇到一些生僻的词就只能束手就擒了。某天走在路上就在想，是不是可以做一个成语版的 Wordle，用拼音？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa&quot;&gt;开发&lt;&#x2F;h3&gt;
&lt;p&gt;有了方向之后，就开始细化具体的游戏机制，发现只要把成语拆解为拼音组合，就可以像 Wordle 那样猜了。较快地搭了一个原型后，让妹子体验了下，发现可以玩，好像还挺好玩，这也给了我一些信心。之后大概花了 1 个星期的时间完善这个小游戏，从琢磨游戏机制到设计界面和交互，到实现功能、填充词库。这段时间在学习前端，正好可以通过这个项目来练手。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-ce&quot;&gt;内测&lt;&#x2F;h3&gt;
&lt;p&gt;其实就是拉人来玩。在常去的咖啡馆也邀请了店员来感受下这个游戏，有表示拼音不太友好的，但也有顺利玩下来并猜到答案的，看起来玩法上应该还 OK，拼音字母可能会是个障碍，但了解了玩法之后应该问题不大。也在小群里让小伙伴们体验了下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shang-xian&quot;&gt;上线&lt;&#x2F;h3&gt;
&lt;p&gt;开发完上线后，在 &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;_limboy&#x2F;status&#x2F;1483622557782003712?s=20&quot;&gt;Twitter&lt;&#x2F;a&gt; 上发了一下，反响还不错，也收到了不少反馈。比如没有对输入做限制可以「作弊」，对字母判定上有一些疑惑，有的同学表示太难了，也有觉得简单的。结合这些反馈做了些调整，比如只能输入有效的拼音组合，对键盘做了字母高亮等，自己玩下来感觉难度正好。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuan-bo&quot;&gt;传播&lt;&#x2F;h3&gt;
&lt;p&gt;经过几天的自然传播后，一天有几千 UV，Twitter 上搜索「pinyincaichengyu.com」也能看到有不少人在玩这个游戏。查看访问统计，一开始 Twitter 的来源最多，几天后从 Facebook、Google 和 Instagram 来的越来越多。有一段时间新加坡的玩家占了大多数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fan-kui&quot;&gt;反馈&lt;&#x2F;h3&gt;
&lt;p&gt;Side Project 的成就感除了完成作品之外，还有很大一部分是用户的反馈。从来信才知道有不少国外的朋友在通过这个小游戏学习中文，也有教汉语的老师会在课后跟同学们一起玩这个游戏，有在新加坡的电台听到介绍这个游戏的。当然也有反馈游戏 Bug 和 Feature 的，比如词库里「厚积薄发」的「薄」声调被标记成了「bao」，然后那个时间段就收到了不少反馈该问题的来信。&lt;&#x2F;p&gt;
&lt;p&gt;因为游戏反响还不错，有国外的媒体来信希望了解这个游戏更多的信息，如澎湃新闻英文频道、卫报，也有国内媒体，这个确实是意料之外。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-jin&quot;&gt;改进&lt;&#x2F;h3&gt;
&lt;p&gt;第一版上线后，代码质量感觉还是不够好，于是从头开始又写了一遍，这次代码设计上更加合理，流程上也更加规范，加入了测试集和 Storybook，顺便把觉得不错的 Feature 如声调提示、统计信息、成语解释等给加上了，对 UI 也做了些优化。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;popup.jpg&quot;
        width=&quot;1344&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  加入「游戏统计」这块还有点小挑战，因为没有用户系统，只能通过设备来判断，而发给服务器的请求又很容易伪造，所以需要一套防护措施。采用的是客户端加密的方式，&lt;code&gt;import&lt;&#x2F;code&gt; 一段加密后的 js，然后生成一个全局变量（用来验证和避免重放攻击），因为这段 js 用到了很多浏览器相关的 API，所以不太好通过 cli 的方式直接引用（当然可以用 headless 工具，不过这也增加了成本）
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;kai-yuan&quot;&gt;开源&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;idiom&quot;&gt;开源&lt;&#x2F;a&gt;就像是个节点，让这个小游戏的源码出现在了公共区域，虽然不一定会有多少人关注。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-huo&quot;&gt;收获&lt;&#x2F;h3&gt;
&lt;p&gt;通过这个项目更加熟悉了前端，包括工程化、React、CSS、JS、Browser API 等等，也感受到了 Side Project 的乐趣，更重要的是对自己的长处和短板有了更清晰的认识，为之后的发展方向选择提供了样本。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于 Bytetalk</title>
            <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bytetalk/</link>
            <guid>https://limboy.me/posts/bytetalk/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;podcast&#x2F;6177bab6b69226ed16a3ed41&quot;&gt;Bytetalk&lt;&#x2F;a&gt; 是去年的一个尝试性项目，以访谈的形式与不同领域的程序员聊聊他们的故事。一方面可以拓展自己的视野，另一方面也能给听众一些启发。第一季 7 期录制下来，结果还不错，感谢各位嘉宾朋友和听众们。等接下来有了更明确的规划后，再来开始第二季。这里简单回顾下 Bytetalk 背后的一些故事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;data.jpg&quot;
        width=&quot;2172&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之所以选择播客，而不是更常见的视频，主要是因为自己在镜头前会变得不自然，访谈嘉宾可能也会有这方面的困扰，另一方面视频的录制和剪辑成本也会更高。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;6177bab6b69226ed16a3ed42&quot;&gt;第一期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;第一期节目尤为重要，因为在录制播客方面的经验几乎为零，所以需要容忍度高、能聊又互相熟悉的嘉宾。为此借着聚餐的名义，将字节的几个小伙伴「诱骗」到家里，期间还玩了会桥牌。因为是第一次录多人聊天，在设备调试这块就花了近半小时，好在最后的效果还能接受。&lt;&#x2F;p&gt;
&lt;p&gt;第一期节目没有特定的主题，主要围绕一些常见的话题展开讨论，如：如何保持对工作的热情，提升竞争力，度过 35 岁危机等等。因为相互之间比较熟悉，所以聊天的氛围还不错。在推上发了之后，也收到了些正面反馈。&lt;&#x2F;p&gt;
&lt;p&gt;通过这一期节目，基本把播客的整个制作流程摸熟了，但作为主持人还有很大的成长空间，同时录音质量把控和后期剪辑这两块还有待改善。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-er-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;618208328a9c9c36e9977e44&quot;&gt;第二期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;有了第一次的经验，接下来找访谈对象时，会更有意识地去找有「聊点」的嘉宾，然后就想到了之前在凤凰网的同事，他现在已经在经营自己的潜水事业了，我很好奇他是如何进行这么大的跨行业转行。虽然好久没有联系，勾搭了之后，还是接受了邀请，这也给了我不小的信心。这一次是远程，访谈大纲和线上录制都通过飞书来完成，还挺顺利的（PS：那时还没有意识到录多轨音频的重要性 😂）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-san-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;618c9897fad86a854205b2a0&quot;&gt;第三期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;第三期我想邀请的嘉宾是&lt;a href=&quot;https:&#x2F;&#x2F;imtx.me&#x2F;&quot;&gt;图拉鼎&lt;&#x2F;a&gt;，我觉得应该会有很多人对独立开发者感兴趣，另一方面也好久没聊了，正好可以借录制播客聚聚。还会担心他档期比较紧或者对播客录制不太感冒，结果比我想的顺利。于是就找了一个茶馆，开始了第三期节目的录制&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;teahouse.jpg&quot;
        width=&quot;2000&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;一个小插曲:&lt;&#x2F;strong&gt; 由于收听次数较多，VPS 流量已经顶不住了，听众也反馈有卡顿的现象。图拉鼎建议可以试下 Cloudflare，果然非常有效，而且还是免费，一下就让我成了 Cloudflare 的粉丝，并以股票支持。（虽然买了之后就一路降降降···）
&lt;&#x2F;aside&gt;&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;另一个小插曲:&lt;&#x2F;strong&gt; 我妈也会听这个节目，她说这一期她最喜欢。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;di-si-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61948a3ee2550ba6b3fa8f2b&quot;&gt;第四期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;前三期节目播出后，收到了 &lt;a href=&quot;https:&#x2F;&#x2F;lutaonan.com&#x2F;&quot;&gt;Randy&lt;&#x2F;a&gt; 的来信，让我觉得特别惊喜，因为自己之前也有关注过他，正好可以做一期播客。这个过程中我也感受到了 Randy 的认真和专业。为了这次播客，他准备了非常详细的文稿，针对访谈大纲基本都有详细的回应文字，音频录制设备也很完善。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-wu-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;619c9a7515e2f7df2eca996e&quot;&gt;第五期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在寻找下一个嘉宾时，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;yihong0618&quot;&gt;yihong&lt;&#x2F;a&gt; 出现在了我的视野，他的 running page、对跑步的坚持、对开源的热情、那股爱折腾的劲儿给我留了下了很深的印象，就想邀请他来聊一期，他也愉快地答应了。&lt;&#x2F;p&gt;
&lt;p&gt;这次的录制过程还有一些小插曲，我拉小蕊作为 co-host 来共同录制，结果我带上了收音设备，却忘了带上对应的连接线。然后就用了 AirPods 结合 iPhone 的录音。跟 yihong 一开始用的飞书视频，结果由于飞书对 VPN 的支持不好，导致通话效果不佳（后来才发现是 VPN 的原因），最后用的微信语音，双方各自录制自己的音轨，由于两边都缺少专业的录音设备，导致这次的音频效果不够理想（试了 GarageBand 的各种奇技淫巧，还是无法弥补音源质量上的不足）。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;PS:&lt;&#x2F;strong&gt; yihong 的东北话实在太有喜感了，哈哈。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;di-liu-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61b43114f7b64dfb09f2524c&quot;&gt;第六期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;因为自己开始逐渐关注前端，然后就发现 &lt;a href=&quot;https:&#x2F;&#x2F;antfu.me&#x2F;&quot;&gt;Anthony Fu&lt;&#x2F;a&gt; 在我的 Timeline 上出镜率很高，内容也都很棒。去了解了下之后，发现这位同学很不一样：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antfu&quot;&gt;Github&lt;&#x2F;a&gt; 上有很多的 Sponsor，参与&#x2F;主导了一些很有影响力的开源项目，也会有一些很奇特的 Idea，用英文交流，习惯在国外的开源社区活动，Github Contribution 几乎全是绿的。这完全勾起了我的好奇心，很想了解这位神人背后的一些故事，于是就试探性地在推上发了邀请，没想到很快答应了。&lt;&#x2F;p&gt;
&lt;p&gt;Anthony 同学的语言表达和组织能力确实很强，全程我基本只要把问题抛过去，就能有较完整和流畅的回复。后期剪辑时还重新录制了下自己的那一轨音频（因为原先的那一轨有些瑕疵，加上我说的内容也较少 😂），导致听起来不像一个完整的访谈···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-qi-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61c6cccac525309a443b5b36&quot;&gt;第七期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在跟 Randy 聊时，他有提到过 &lt;a href=&quot;https:&#x2F;&#x2F;logseq.com&#x2F;&quot;&gt;Logseq&lt;&#x2F;a&gt; 这款笔记利器，就去体验了下，然后就被惊到了。极低的输入成本，强大的双链和 Query，方便的 Journal，Privacy First，Local Data 等等。然后就想着要是能邀请 Logseq 的作者来聊聊就太好了，按照惯例，先在推上勾搭，没想到我跟作者&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tiensonqin&quot;&gt;天生&lt;&#x2F;a&gt;竟还有交集（同在花瓣工作过），他也答应了这次邀请。在推上发了这个消息后，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;laike9m&quot;&gt;laike9m&lt;&#x2F;a&gt; 也有兴趣一起来聊聊，于是就有了这期的访谈，播出后反响也不错。天生的谦逊、对 logseq 的热情和 laike9m 的专业性都给我留下了很深的印象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-wei&quot;&gt;结尾&lt;&#x2F;h3&gt;
&lt;p&gt;制作 Bytetalk 的过程让我对播客有了更多的了解，也明白了其中的艰辛（寻找嘉宾，准备大纲，后期剪辑等等）。但看到大家的反馈就觉得这事值得，等我把这事思考地成熟些，就可以开始第二季了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>2021 Review</title>
            <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/2021-review/</link>
            <guid>https://limboy.me/posts/2021-review/</guid>
            <description>&lt;p&gt;2021 这一年如果要有个分界点的话，那就是年中离开字节跳动。在飞书工作了两年之后，自觉还是无法适应和胜任相关的工作。一方面自己对移动端开发的热情越来越低，其他方面也没有太强烈的意愿，另一方面飞书的强度对我这个「老人」挑战也挺大的，加上 ToB 业务属性，处理多方问题和反馈也对精力撕扯得厉害。不过确实也学到了很多，尤其是身边的小伙伴们，他们真的很棒。&lt;&#x2F;p&gt;
&lt;p&gt;辞职之后给了自己一段缓冲期，逐步去探索能够持续有热情地做十年的事情。不得不说，可以自由支配的时间是一件奢侈品，一旦适应就很难再回去了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>100 个囚犯的随机选择问题</title>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/100-prisoners/</link>
            <guid>https://limboy.me/posts/100-prisoners/</guid>
            <description>&lt;p&gt;近日看到一道题，感觉挺有意思的，和大家分享下。题目的内容是这样的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;有 100 个囚犯，每人被随机分配 1 - 100 其中的一个数（无重复）。&lt;&#x2F;li&gt;
&lt;li&gt;在另一个房间中有 100 个抽屉，每个抽屉被随机分配了 1 - 100 其中的一个数（无重复）。&lt;&#x2F;li&gt;
&lt;li&gt;囚犯只有打开抽屉才能知道抽屉里面的数字。&lt;&#x2F;li&gt;
&lt;li&gt;如果该数字正好是自己被分配的数，则顺利通过，下一个囚犯继续找。&lt;&#x2F;li&gt;
&lt;li&gt;100 个囚犯每个人都在 50 步（打开一个抽屉算一步）内找到自己的编号，游戏才算赢，才能被释放。&lt;&#x2F;li&gt;
&lt;li&gt;游戏过程中抽屉里的数字不会变动，囚犯之间不能互相传递信息，但可以事先商定策略。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;囚犯的数是随机分配的，抽屉里的数也是随机放的，看起来很难形成有效策略。如果每个人都按随机打开抽屉的方式去找自己的编号，那么 100 个人都在 50 步内找到自己的数的概率是非常小的。多小呢，我们来算一下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1 个人在 50 步内找到跟自己编号相同的数的概率是 50%（想象把 100 个数字平均分成两堆，每堆 50 个数，自己的编号一定在其中一堆，也就是二选一）&lt;&#x2F;li&gt;
&lt;li&gt;100 个人都选对的概率是：0.5 _ 0.5 _ ... * 0.5， 也就是 0.5 的 100 次方，数量级是 10 的 -31 次方，接近普朗克常数的数量级了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果从地球诞生开始算起，且 1 秒能完成该游戏，那么 45 亿年后的现在， 极大的概率这 100 个囚犯还没有成功完成过一次该游戏。所以盲猜的方式不可取。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-huan-si-lu&quot;&gt;转换思路&lt;&#x2F;h3&gt;
&lt;p&gt;每个抽屉有自己的顺序编号，如果把抽屉里的数用来指向下一个抽屉，那么抽屉和抽屉里的数就能形成链表。说来你可能不信，按照这种链表的思路，可以将成功率提高到 30% 以上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ju-ti-zuo-fa&quot;&gt;具体做法&lt;&#x2F;h3&gt;
&lt;p&gt;假设某个囚犯抽到的数字是 5，也就是需要在 50 步内，找到放了 5 的那个抽屉。先找到第 5 个抽屉打开，然后看里面的数字是多少，如果不是 5，则找到该数字对应的抽屉再打开，以此类推。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;100-prisoners&amp;#x2F;100-prisoners-boxes.png&quot;
        width=&quot;986&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最终要么在 50 步内找到，要么没有。看起来并没有什么特别，为什么成功率能提高那么多呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tan-jiu-yuan-yin&quot;&gt;探究原因&lt;&#x2F;h3&gt;
&lt;p&gt;链表有一个重要的概念：环。如果这 100 个数字全部组成一个环，如 &lt;code&gt;1 -&amp;gt; 4 -&amp;gt; 38 -&amp;gt; ... -&amp;gt; 1&lt;&#x2F;code&gt;，那么并不会提高成功率。但如果这 100 个数字形成了多个环，如：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;1,5 -&amp;gt; 5,10 -&amp;gt; 10,1 -&amp;gt; 1,5
&lt;&#x2F;span&gt;&lt;span&gt;2,36 -&amp;gt; 36,70 -&amp;gt; 70,8 -&amp;gt; 8,19 -&amp;gt; ... -&amp;gt; 2,36
&lt;&#x2F;span&gt;&lt;span&gt;9,9 -&amp;gt; 9,9 &#x2F;&#x2F; 序号为 9 的抽屉里，正好放的是 9 这个数字
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这就有意思了。首先这些链表一定会形成环，因为每一个抽屉里都有一个指针（放的那个随机数），且抽屉的序号可以与随机数完全对应（没有多余，也没有遗漏），所以没有一个抽屉是起点或终点。&lt;&#x2F;p&gt;
&lt;p&gt;再来看，如果某个链表包含的抽屉数小于等于 50 意味着什么？意味着一定可以在 50 次内找到有自己序号的那个抽屉。&lt;&#x2F;p&gt;
&lt;p&gt;假设囚犯拿到的数字还是 5，他打开序号为 5 的抽屉（一定要打开跟自己序号对应的抽屉，不能随机挑一个，可以带着这个问题往下看），然后一路按照数字与抽屉序号这种对应方式，来到了环形链表的最后一个抽屉前，打开它，里面放的就会是想要找的数字：5。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;100-prisoners&amp;#x2F;100-prisoners-list.png&quot;
        width=&quot;1276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为环形链表的长度不超过 50，因此抽屉打开次数也必然不超过 50。所以只要只要这 100 个数形成的环形链表中没有一个长度大于 50，按照这个策略，囚犯们就可以全部在 50 步内找到自己的数字。&lt;&#x2F;p&gt;
&lt;p&gt;那接下来的问题就是，这个概率有多大？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;suan-suan-gai-lu&quot;&gt;算算概率&lt;&#x2F;h3&gt;
&lt;p&gt;除去有一条链表长度大于 50 的情况（不可能存在多条环形链表的长度超过 50，毕竟一共只有 100 个），其他情况都能成功，所以成功的概率就是 &lt;code&gt;1 - 其中一条链表长度大于50的概率&lt;&#x2F;code&gt;。&lt;code&gt;一条链表长度大于 50&lt;&#x2F;code&gt; 的概率，就是把链表长度为 51 到 100 的概率相加。&lt;&#x2F;p&gt;
&lt;p&gt;假设链表的长度为 n(n &amp;gt; 50)，我们来算一下它出现的概率。首先，从 100 个抽屉里任选 n 个抽屉作为产生链表的抽屉，这个有 &lt;code&gt;C(100, n)&lt;&#x2F;code&gt; 种抽法（顺序无关，抽到 1，2，3 号抽屉，和 2，3，1 号抽屉没有区别，所以这里是组合的情况）。&lt;&#x2F;p&gt;
&lt;p&gt;除了选出来的 n 个抽屉，在剩下抽屉里放随机数，有 &lt;code&gt;P(100-n, 100-n)&lt;&#x2F;code&gt; 种放法（顺序相关，所以是排列），也就是 &lt;code&gt;(100-n)!&lt;&#x2F;code&gt; 种。&lt;&#x2F;p&gt;
&lt;p&gt;最后来看看选出来的 n 个抽屉要形成一个环，有几种放法。抽屉里的随机数不是随便放都可以的，比如跟抽屉序号相同的随机数就不能被放到该抽屉中。&lt;&#x2F;p&gt;
&lt;p&gt;假设有 3 个抽屉，就只有两种放法：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;100-prisoners&amp;#x2F;100-prisoners-list-1.png&quot;
        width=&quot;1546&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;1 号抽屉里只能放 2 或者 3，如果放了 2，则 2 号抽屉里只能放 3，如果放了 3，则 3 号抽屉里就只能放 2，因此只有两种放法。&lt;&#x2F;p&gt;
&lt;p&gt;如果是 4 个抽屉有几种放法呢？这个新的抽屉可以出现在原先 3 条链的其中一条链，每出现在其中一条链，就有 2 种放法，所以 4 个抽屉就有 3*2 = 6 种方法形成一个环。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;100-prisoners&amp;#x2F;100-prisoners-list-2.png&quot;
        width=&quot;556&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以此类推， 5 个抽屉有 &lt;code&gt;4*3*2&lt;&#x2F;code&gt; 种方法形成一个环，&lt;code&gt;n&lt;&#x2F;code&gt; 个抽屉就有 &lt;code&gt;(n-1)!&lt;&#x2F;code&gt; 种放法。&lt;&#x2F;p&gt;
&lt;p&gt;把这些都乘起来就是长度为 n 的链表的可以摆放的个数：&lt;code&gt;C(100, n) * (100-n)! * (n-1)!&lt;&#x2F;code&gt;，其中 &lt;code&gt;C(100, n)&lt;&#x2F;code&gt; = &lt;code&gt;100!&#x2F;((100-n)! * n!)&lt;&#x2F;code&gt;，这个表达式的结果为：&lt;code&gt;100!&#x2F;n&lt;&#x2F;code&gt;，而这 100 个随机数所有可摆放的个数为：100!，也就是说，链表个数为 n 的可能性为 &lt;code&gt;1&#x2F;n&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;接下来就好办了，把这些可能性排除就是成功的可能性了：&lt;&#x2F;p&gt;
&lt;p&gt;1 - ($\frac{1}{51}$ + $\frac{1}{52}$ + ... + $\frac{1}{100}$) ≈ 0.31183&lt;&#x2F;p&gt;
&lt;p&gt;所以，按照这个链表的思路去找自己的号码，就有 30% 以上的概率能够全员通过。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 如果在玩游戏前，可以有一次交换抽屉里随机数的机会，那就可以让胜率达到 100% 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datagenetics.com&#x2F;blog&#x2F;december42014&#x2F;index.html&quot;&gt;100 Prisoners Escape Problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;100_prisoners_problem&quot;&gt;100 prisoners problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>2021&#x2F;10 小记</title>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/2021-10-notes/</link>
            <guid>https://limboy.me/posts/2021-10-notes/</guid>
            <description>&lt;p&gt;10 月份在老家待了 10 天，要做的事有了些方向。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-shi-ju&quot;&gt;影视剧&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ha-li-bo-te&quot;&gt;哈利波特&lt;&#x2F;h3&gt;
&lt;p&gt;在老家时刷完的，看着还是挺过瘾的。10 年来，几乎没有换过人（除了几位不可抗因素无法参与拍摄的），这点也挺打动我的，可以看出大家对这部剧的用心和爱心。斯内普这条线很棒，从开始一直到结束，演员演得也无可挑剔，死亡圣器的设定也不错。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 多比的战力我觉得可以排进前三。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fei-zi-ran-si-wang&quot;&gt;非自然死亡&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;日本一年约有 130 万人死亡，其中不知道死因的非自然死亡者（被称为「异状死」）则约有 17 万人，可以执行解剖任务判析死因的解剖法医仅 170 人，在人力与工作量严重失衡与资源不足的情况下，仅有 2 万 583 位死者会进行司法解剖，司法解剖率为 12.4％。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;行业剧除了让观众了解某个行业外，通常还会有一些其他的表达，比如 UDI 虽然是虚构的，但一些数字却是真实的。或许可以让相关部门引起重视，进而带来些改变。&lt;&#x2F;p&gt;
&lt;p&gt;剧情还挺紧凑的，之前以为会走温情路线，没想到是一部悬疑剧，也是通过这部剧开始追 冢原亚由子（导演） 和 野木亚纪子（编剧）的其他剧。&lt;&#x2F;p&gt;
&lt;p&gt;作为一部行业剧，编剧显然用心地去了解过这个行业，作为观众也可以对这个行业有一个大概的了解，甚至在心中就埋下了进入这个行业的种子，这块野木亚纪子确实做得很好（另一部剧「重版出来」也如此）。&lt;&#x2F;p&gt;
&lt;p&gt;看日剧，通常我还会关注一些其他的点，如设计，着装等。第一集死于 MERS 的男主的房间虽然不大，但设计地挺合理，采光也不错，住着应该挺舒服的。&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;2021-10-notes&amp;#x2F;udi-01.jpg&quot;
        width=&quot;1920&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;2021-10-notes&amp;#x2F;udi-02.jpg&quot;
        width=&quot;1920&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;PS: 一直以为女主是上户彩，没想到是石原里美，也太像了···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhong-ban-chu-lai&quot;&gt;重版出来&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;人如果不知道自己身处在何处，是无法前进的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;又是冢原亚由子（导演） 和 野木亚纪子（编剧）合作的一部行业剧。了解了日本漫画业的运作机制，原来要做到重版还挺不容易的，这也是出版商非常看重的一点。&lt;&#x2F;p&gt;
&lt;p&gt;女主不算特别漂亮，但挺可爱的，做事非常认真细致，极具活力。&lt;&#x2F;p&gt;
&lt;p&gt;剧中把漫画家、责编、书店和读者的关系捋得很清楚，也可以看到各个角色之间的那种牵绊。出版界的术语也做了简要的介绍：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;「NAME」就像乐谱，不会看乐谱，就无法想象旋律，所以对于编辑来说，学会看 NAME 是基础中的基础。&lt;&#x2F;p&gt;
&lt;p&gt;「AORI」是在作品的首页或尾页加入的短语，编辑每期配合漫画内容考虑，是作品的装饰，也是编辑能力的展现。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;shu&quot;&gt;书&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-common-path-to-uncommon-success&quot;&gt;The Common Path to Uncommon Success&lt;&#x2F;h3&gt;
&lt;p&gt;跟小创聊天时，他提到最近在看的一本书，确实不错，尤其适合我目前的状态。书中描述了作者如何进入到播客行业，如何找到切入点，一步步做大，然后从中总结出一些「Common Path」，挺有启发的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your big idea needs to be a combination of your passions and your expertise.&lt;&#x2F;p&gt;
&lt;p&gt;Identify an underserved niche and fill that void to the best of your ability.&lt;&#x2F;p&gt;
&lt;p&gt;Always enter the conversation already taking place in the customer&#x27;s mind.&lt;&#x2F;p&gt;
&lt;p&gt;How do you know when it hurts? It hurts when you become nervous that your target market is too small.That&#x27;s when you&#x27;ve niched down to a place you can dominate.&lt;&#x2F;p&gt;
&lt;p&gt;withn every big idea there&#x27;s a niche being ignored. It&#x27;s your job to identify that void and serve those people.&lt;&#x2F;p&gt;
&lt;p&gt;The only right choce is what is best for their avatar. Allow your perfect customer to be your guide at every fork in the road.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bytetalk&quot;&gt;ByteTalk&lt;&#x2F;h3&gt;
&lt;p&gt;一个程序员的访谈播客，在小宇宙搜「ByteTalk」就能看到，也可以查看&lt;a href=&quot;https:&#x2F;&#x2F;bytetalk.fm&quot;&gt;网页版&lt;&#x2F;a&gt;或&lt;a href=&quot;https:&#x2F;&#x2F;bytetalk.fm&#x2F;index.xml&quot;&gt;订阅&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;第一期跟飞书的几个小伙伴聊了聊程序员相关的话题，接下来会再邀请程序员背景的嘉宾来聊聊他们的故事。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snakemaster&quot;&gt;SnakeMaster&lt;&#x2F;h3&gt;
&lt;p&gt;在字节工作时，在部门内部举办过一个贪吃蛇编程比赛，反响还不错，这次玩法上做了些调整，自我感觉还挺有意思的。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 这种创作的感觉真好。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一个看起来不可能赢的游戏</title>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/impossible-win-game/</link>
            <guid>https://limboy.me/posts/impossible-win-game/</guid>
            <description>&lt;p&gt;游戏一共涉及三个人，你和一个小伙伴组成一队答题，另一人来出题。题目的内容是这样的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;有一块方形木板，上面共有 64 个格子（8x8)，旁边有 64 枚硬币&lt;&#x2F;li&gt;
&lt;li&gt;出题人会将所有硬币都放到格子上，但硬币是正面朝上还是反面朝上，完全看出题人的心情&lt;&#x2F;li&gt;
&lt;li&gt;全部摆放完后（每个格子上都有一枚硬币），出题人会将其中一枚硬币指定为魔币，当然会指哪个也全看出题人的心情&lt;&#x2F;li&gt;
&lt;li&gt;整个过程你作为旁观者只能看着。在叫队友进来答题（找出该魔币）之前，可以将这 64 个硬币中的任意一个进行翻转&lt;&#x2F;li&gt;
&lt;li&gt;队友进来之后，不能与他进行任何通信，他的目标是找到出题人指定的那个魔币（事先可以和队友商量策略）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhen-de-ke-neng-ma&quot;&gt;真的可能吗？&lt;&#x2F;h3&gt;
&lt;p&gt;信息量太少了，将一枚硬币翻转，只有 1 比特的信息，而且队友进来之后完全不知道哪个被翻转了（就算看到 63 个正面，一个反面，也不知道是不是这个反面被翻转过），更别说要找到出题人指定的魔币。&lt;&#x2F;p&gt;
&lt;p&gt;这个魔币可以出现在 64 个格子的任意位置，用二进制来表示的话，需要 6 位（$2^6$ = 64），同时硬币的翻转可以带来奇偶的改变，结合这两点能不能找到点思路呢？&lt;&#x2F;p&gt;
&lt;p&gt;发散一下，10 个老鼠从 1000 瓶水中找毒水是不是跟这个场景有点像？难道把 64 个数字用二进制表示会有什么不同？&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;000000 = 0
&lt;&#x2F;span&gt;&lt;span&gt;000001 = 1
&lt;&#x2F;span&gt;&lt;span&gt;000010 = 2
&lt;&#x2F;span&gt;&lt;span&gt;000011 = 3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;111111 = 63
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那个魔币一定是这组数中的一个，假设吃了它会死，只要找到 6 只老鼠，emmm···&lt;&#x2F;p&gt;
&lt;p&gt;那有没有可能棋盘本身就能组成 6 只老鼠呢？假如可以，就让每只老鼠分别代表一个二进制位&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;老鼠 A -&amp;gt; $2^0$&lt;br &#x2F;&gt;
老鼠 B -&amp;gt; $2^1$&lt;br &#x2F;&gt;
老鼠 C -&amp;gt; $2^2$&lt;br &#x2F;&gt;
老鼠 D -&amp;gt; $2^3$&lt;br &#x2F;&gt;
老鼠 E -&amp;gt; $2^4$&lt;br &#x2F;&gt;
老鼠 F -&amp;gt; $2^5$&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;然后通过硬币正面朝上数量的奇偶性来表示该位是 1 或 0，这样队友进来时，先按照某种约定的方式找到「老鼠 A」，然后判断它的奇偶性，这样就能知道第一位（最右边）是 0 还是 1，同理找到「老鼠 B」，判断奇偶，确定第二位。最后会形成一个完整的二进制数，比如 &lt;code&gt;001100&lt;&#x2F;code&gt;，也就是 12，那么魔币所在的位置就是 12。&lt;&#x2F;p&gt;
&lt;p&gt;因为翻转硬币就能改变奇偶性，如果能通过翻转硬币达到随意控制某一&#x2F;几位变成 0 或 1，就能把二进制调整为魔币对应的数字，按照该策略，计算出二进制数后，就能知道魔币所在位置。&lt;&#x2F;p&gt;
&lt;p&gt;接下来的问题是，如何让棋盘本身形成 6 个比特位？&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-0.png&quot;
        width=&quot;2492&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;ji-xu-si-suo&quot;&gt;继续思索&lt;&#x2F;h3&gt;
&lt;p&gt;假如你跟队友约定，左边四列代表第 1 位，右边四列代表第 2 位，上边四行代表第 3 位，下边四行代表第 4 位，中间四列代表第 5 位，中间四行代表第 6 位，也就是每 1 位都有特定的区域，然后数该区域里硬币为正面的个数，如果为奇数则表示该位为 1，偶数则为 0。而你可以通过翻转硬币来将这个二进制数变为魔币所在位置的二进制数，是不是就妥了？&lt;&#x2F;p&gt;
&lt;p&gt;那应该怎么分呢，如果按照上面的分法，该如何达到翻转某个硬币来调整各个组的奇偶性呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hua-fen-zu-de-ce-lue&quot;&gt;划分组的策略&lt;&#x2F;h3&gt;
&lt;p&gt;假设出题人摆放完硬币后，按照上面的分组查找，得出的二进制数为：&lt;code&gt;001100&lt;&#x2F;code&gt;，出题人指定魔币的位置为 42，也就是 &lt;code&gt;101010&lt;&#x2F;code&gt;，这个数的 $2^0$，$2^2$，$2^5$ 与得出的二进制不同，因此这 3 组需要翻转，其他组不动。&lt;&#x2F;p&gt;
&lt;p&gt;理想状态自然是每个组之间没有重叠，然后将各自组的其中一枚硬币翻转，但这样最多需要翻转 6 次（原始二进制数和目标二进制数各位都不相同）。所以一定会有交叉，那如何交叉才能使得所有可能的翻转组合都被覆盖到呢？如果用 1 表示翻转，那么二进制表示的 64 个数字，不就是所有可能的翻转组合么？&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-2.png&quot;
        width=&quot;1412&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 3，也就是 &lt;code&gt;000011&lt;&#x2F;code&gt; 表示翻转 $2^0$ 和 $2^1$ 所在的组，原先为奇数个正面的硬币，就变成偶数个，反之亦然，其他 4 个组维持原状。&lt;&#x2F;p&gt;
&lt;p&gt;好像有思路了。对于 $2^0$ 这一组，包含的数为末尾为 1 的二进制数，$2^1$ 这一组，则包含倒数第二位为 1 的二进制数，以此类推（下图可点击放大）：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-3.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样 6 个组就划分完了，假设经过计算后发现要调整 $2^5$, $2^3$, $2^1$ 这 3 个组硬币的奇偶性，也就是 &lt;code&gt;101010&lt;&#x2F;code&gt;，对应十进制就是 42，那么将 42 号硬币翻一面就行了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-4.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;是不是只影响了 $2^5$, $2^3$, $2^1$ 这 3 个组，$2^0$, $2^2$, $2^4$ 这 3 组安然无恙。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;p&gt;假设出题人最后的硬币摆放如下（白色为正面，灰色为反面，），指定魔币序号为 39。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-5.png&quot;
        width=&quot;2492&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照上面的分组规则，看看每个组包含的硬币正反面情况&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-6.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;分别为：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$2^0$ 正面数量为 23，奇数，该位为 1&lt;br &#x2F;&gt;
$2^1$ 正面数量为 20，偶数，该位为 0&lt;br &#x2F;&gt;
$2^2$ 正面数量为 22，偶数，该位为 0&lt;br &#x2F;&gt;
$2^3$ 正面数量为 22，偶数，该位为 0&lt;br &#x2F;&gt;
$2^4$ 正面数量为 19，奇数，该位为 1&lt;br &#x2F;&gt;
$2^5$ 正面数量为 22，偶数，该位为 0&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个二进制数就是：&lt;code&gt;010001&lt;&#x2F;code&gt;。目标数是 &lt;code&gt;39&lt;&#x2F;code&gt;，对应的二进制表示为：&lt;code&gt;100111&lt;&#x2F;code&gt;，需要调整的是 $2^5$, $2^4$, $2^2$, $2^1$ 这 4 个组。&lt;code&gt;110110&lt;&#x2F;code&gt; 这个数变成 10 进制就是 &lt;code&gt;54&lt;&#x2F;code&gt;，也就是将序号为 &lt;code&gt;54&lt;&#x2F;code&gt; 的硬币翻转一下。&lt;&#x2F;p&gt;
&lt;p&gt;答题人进来后，按照约定的分组规则，分别计算各个组的奇偶数：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$2^0$ 正面数量为 23，奇数（不变），该位为 1&lt;br &#x2F;&gt;
$2^1$ 正面数量为 21，奇数，该位为 1&lt;br &#x2F;&gt;
$2^2$ 正面数量为 23，奇数，该位为 1&lt;br &#x2F;&gt;
$2^3$ 正面数量为 22，偶数（不变），该位为 0&lt;br &#x2F;&gt;
$2^4$ 正面数量为 20，偶数，该位为 0&lt;br &#x2F;&gt;
$2^5$ 正面数量为 23，奇数，该位为 1&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最终得到的二进制位 &lt;code&gt;100111&lt;&#x2F;code&gt;，也就是十进制的 &lt;code&gt;39&lt;&#x2F;code&gt;，魔币的位置找到了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-san&quot;&gt;发散&lt;&#x2F;h3&gt;
&lt;p&gt;二进制操作中，让一部分保持不变，另一部分翻转，这个行为不就是异或(不变的部分为 0，变化的部分为 1)么，比如想让 &lt;code&gt;100111&lt;&#x2F;code&gt; 的最后一位变成 0，那么只要与 &lt;code&gt;000001&lt;&#x2F;code&gt; 执行异或操作就行了。异或还有一个性质是与同样的数再次异或可以得到原先的数，利用这个特性，也可以将异或用在一些加密场景。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datagenetics.com&#x2F;blog&#x2F;december12014&#x2F;index.html&quot;&gt;Impossible Escape?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;根据 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Phuker&quot;&gt;Phuker&lt;&#x2F;a&gt; 提供的 3B1B &lt;a href=&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1UD4y1U7or&quot;&gt;视频链接&lt;&#x2F;a&gt;，再进行一些延展。视频里提到如果不是 64 个硬币，而是 3 个硬币，就没有必胜的策略了。这就很有意思了，3 个硬币中找一个不是比从 64 中找一个简单么？还真不是。&lt;&#x2F;p&gt;
&lt;p&gt;视频中把「找硬币」映射为「顶点着色」问题，翻转硬币就是从某个顶点到相邻顶点（n 个硬币表示 n 维空间），3 个硬币（对应 3 位二进制）翻转任意一个，也就是从一个正方体（每个顶点是一个 3 维坐标，具体可以参见视频）8 个顶点的任意一点到相邻点。因为不知道这三个硬币会被如何摆放，也就是 8 个顶点都有可能（3 位二进制一共有 8 种摆放形式），需要从任意一个顶点出发，应用某种规则，让相邻的 3 个点对应 3 种状态，而这是无法做到的：把 3 种状态标记为红点、绿点、蓝点，每个顶点对应一种颜色，如果要满足需求，则在每个顶点看来，相邻的点一定有红色的点（其他点也一样，红色只是其中一种），也就是 8 个点，又因为 1 个点周围有 3 个点，所以每个点都被数了 3 次，这样的话红色的点就有 &lt;code&gt;8&#x2F;3&lt;&#x2F;code&gt; 个，自然无法实现。要能被整除，也就是 $2^n$&#x2F;n 为正整数，则 n 本身必须是 2 的次方，如 2，4，8，16... 才可以，题目中的 64 是 2 的 8 次方，因此可以实现。&lt;&#x2F;p&gt;
&lt;p&gt;视频中还提到了「海明码」，原理上跟这道题的解法很像，也是根据二进制的位数来切分区域，不同的是每个区域有一位（第一位）是校验位，可以是奇校验（该区域的 1 的个数为奇数，可以通过校验位来确保）或偶校验。如果其中某一位出错（比如 0 -&amp;gt; 1），那么不仅可以知道有错（只要是一位出错，奇偶性一定发生改变），还能知道第几位错了（就像这道题中找到那个魔币）。具体原理可以看 3B1B 的&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=X8jsijhllIA&quot;&gt;这个视频&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>是否要买 M1 Pro</title>
            <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/buy-m1-pro-or-not/</link>
            <guid>https://limboy.me/posts/buy-m1-pro-or-not/</guid>
            <description>&lt;p&gt;熬夜看完了苹果 &lt;code&gt;Unleashed&lt;&#x2F;code&gt; 发布会，很心动。Touch Bar 没有了，MagSafe、各个方便的接口也都回来了。性能、显示效果等各方面都有了较明显的提升，在 M1 Pro 面前，我这台 2014 Macbook Pro 几乎是被全方位无死角碾压，于是就有了更新设备的念头。&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;首先看价格，粗配下来，大约在 2 万左右，信用卡分 24 期，每月 1000，也还可以接受，手头这台 MBP 已服役 7 年，换一台新设备非常合理。但它平时用着也没太大问题，除了电池续航和 GPU 差了一点。那是买还是不买呢？&lt;&#x2F;p&gt;
&lt;p&gt;已经明显能感觉到脑海里的两个小人开始搏斗了，感性的那个说：这么惊艳的笔记本，早买早享受啊；理性的那个说：现在这个用着也还可以，为什么要买呢？最后我决定跟随理性的声音，主要是从投资的角度考虑。&lt;&#x2F;p&gt;
&lt;p&gt;如果这台新笔记本产生的价值能超过两万（当然这个只能粗略估计），就值得买。简单看下这台设备可以带来的改变：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;效率：更流畅的 App 体验、节省编译时间、提高视频编辑效率、连接多台显示器提高工作效率&lt;&#x2F;li&gt;
&lt;li&gt;体验：键盘的手感、没有 Touch Bar 的愉悦感、显示效果的提升、空间音频、前置摄像头&lt;&#x2F;li&gt;
&lt;li&gt;便利：长续航、全接口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;效率方面，没有较耗时的编译任务，不需要视频编辑，一台外界显示器基本够用，系统也没有卡顿到影响使用；体验方面：显示效果看着也没什么问，空间音频、前置摄像头属于 Plus；便利方面，长续航确实弱项，但平时也都会插电，所以也还好。&lt;&#x2F;p&gt;
&lt;p&gt;如此看来，虽然是一台真香设备，虽然当前设备已经 7 岁高龄，但从投资角度看，目前带来的回报还是少了点，等真有需求时再下单吧。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;aside class=&quot;info&quot; &gt;
  Update: 已入 16 寸 M1 Pro，还是挺香的，接下来就让它产生更多的价值吧。
&lt;&#x2F;aside&gt;</description>
        </item>
        
        
        <item>
            <title>2021&#x2F;09 小记</title>
            <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/2021-09-notes/</link>
            <guid>https://limboy.me/posts/2021-09-notes/</guid>
            <description>&lt;p&gt;9 月看了些书，刷了些剧，花了不少时间思考接下来的方向。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-shi-ju&quot;&gt;影视剧&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;yu-zhou-shi-kong-zhi-lu&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;24698699&#x2F;&quot;&gt;宇宙时空之旅&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;毫无疑问是一部巨作，作者追随卡尔·萨根的脚步，重新梳理了下探索宇宙的脉络，但科普类视频会有一个通病，或者说视频的通病：看的过程很过瘾，看完之后很快就忘了，视频通过华丽的视效，有一种让你少动脑的倾向，这也是我更喜欢看书的原因。&lt;&#x2F;p&gt;
&lt;p&gt;看之前我有些疑问：宇宙的发展路线是怎样的？作为人类如何 follow 这个发展路线？看完之后我觉得宇宙并没有什么发展路线，虽然有很多的行星和恒星，但这些星体之间并不会像蚁群那样表现出智能。主旋律是旋转、膨胀和平衡：卫星绕着行星转，行星绕着恒星转，恒星绕着星系中心（比如银河系的中心就是个大黑洞）转，从大爆炸那一刻到现在，一直都在膨胀，膨胀的速度也恰到好处，恒星通过核聚变与自身引力达到平衡。一个星系可以有几千亿颗恒星，宇宙中有几千亿个星系，如此数量庞大的星星们根本不关心人类，它们只是燃烧着，旋转着，膨胀着。&lt;&#x2F;p&gt;
&lt;p&gt;碳元素作为我们身体的重要组成，大多来自于恒星，所以我们都是星星的孩子（氢原子们压呀压，变成了氦，氦原子们压呀压，变成了碳）。&lt;&#x2F;p&gt;
&lt;p&gt;探索宇宙奥秘的过程也充满曲折。布鲁诺从哥白尼和其他书中得到了「宇宙无限论」的启示，进而质疑已有的宗教和神学，而且到处演说，导致最后被罗马教会烧死（其实细想下，布鲁诺并没有任何证据可以支撑宇宙无限论，以此来抨击已有的宗教体系，都是讲故事，为啥要信你的这个呢）。达尔文提出的进化机制打破了之前认为的造物主假说：不管形态多奇特，行为多古怪，能适应环境，生存并繁衍就行，同时通过基因突变，更合适的基本被延续了下去，打不过这些基因的自然也就被淘汰了。人也一样，是哺乳动物进化的结果。大自然并不关心你过得快不快乐，生活有没有意义，它就这么俯视众生：来，让我看看谁能更适应环境，谁能走得更远。&lt;&#x2F;p&gt;
&lt;p&gt;后来的一些大佬们又不断地拓宽了我们对宇宙的认识，比如哈雷，赫歇耳，牛顿，爱因斯坦，法拉第，麦克斯韦等等，人们花了 1000 多年才知道光到底是个什么，但为什么会是这样其实也不清楚，根据光速不变（不管你以多少速度与光速相对还是相向而行）又可以产生很多反直觉的结论，宇宙的奥义或许永远探究不完，但一个叶绿体内都可以藏着极其复杂的能量工厂，我们只要在自己的宇宙里遨游即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huo-gu&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;20644938&#x2F;&quot;&gt;硅谷&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;之前刷了一半，这次补上。用三个字来概括就是：有那味（真好看）。Richard 负责搞事情，Bachman 负责烘气氛，Gilfoyle 和 Dinesh 组 CP，Jared 负责暖，Monica 负责养眼。&lt;&#x2F;p&gt;
&lt;p&gt;名场面不少，第一季当 Gilfoyle 说出 D2F 时确实惊到我了；痴迷于 Three Comma 的 Hanneman 的那瓶酒压到 Delete 键后引发的混乱场面也是印象深刻；Always Blue；Bachman 在车里嗑嗨了想名字；Jared 被自动驾驶汽车带到集装箱后的那股绝望；Gilfoyle 嘲笑 Jared 定制的 PiedPiper 外套；Jin Yang 的 「Not a Hotdog」等等，太多了。&lt;&#x2F;p&gt;
&lt;p&gt;剧组的顾问团队也很专业，除了 Space 和 Tab 之争，霍夫曼编码，香农熵、敏捷开发、单元测试等，甚至连 &lt;a href=&quot;http:&#x2F;&#x2F;www.hooli.xyz&quot;&gt;hooli&lt;&#x2F;a&gt; 和 &lt;a href=&quot;http:&#x2F;&#x2F;www.piedpiper.com&quot;&gt;piedpiper&lt;&#x2F;a&gt; 都有现实中的官网（Hooli 应该是对应 Google，xyz 域名就能看出来，名字上也有相似性），显然是下了一番功夫。&lt;&#x2F;p&gt;
&lt;p&gt;硅谷的创业要素大都有涉及，如创业孵化器，收购，不断 Pivot，专利官司，竞争与合作，内部成员矛盾，甚至一些很潮的概念如去中心化互联网都一应俱全。以「压缩」作为内核的切入点很棒，因为它确实可以带来很多方向的可能性，比如文件存储（噩梦般的 Box）、视频直播、去中心化互联网（剧中提到的方案是用压缩换得的空间来换设备的算力和存储）、压缩 SDK 等。&lt;&#x2F;p&gt;
&lt;p&gt;非常用心的一部剧，虽然 Peter Gregory 的演员意外去世，Bachman 的演员第四季后退出带来了些遗憾，但依然无法掩盖这部剧的出色。最有一集有被泪到。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hei-fan&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;22523177&#x2F;&quot;&gt;黑帆&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一部比较小众的美剧，也是二刷了，把海盗刻画地非常细致，比如海盗组织内部的分工，抢到的财物的处理，当时社会对海盗的态度等。当然这不是一部纪录片，这些内容都是在剧情中自然地呈现。&lt;&#x2F;p&gt;
&lt;p&gt;整部剧从 Flint 的角度来说，可以简化为一句话：跟着我干就对了。一开始想通过西班牙的 500 万银币让拿骚自治，让海盗们从良（这也是他之前作为海军少校一直想要实现的目标），结果因为各种原因，银币让其他人搞走了，但得到了更强有力的筹码，一位有影响力人物的独生女，在谈判过程中发现对方就是出卖他和他挚爱的人，他的另一挚爱巴洛夫人也被当场击毙，仇恨的种子就此埋下，在另一个敌对海盗大佬出于大局观前来营救时，这个种子开始发芽，导致最终拿骚按着他之前设想的那样可以被洗白时，他也不干了，他不相信这些人，他要为挚爱们复仇，于是又卷入了另一伙人进来，继续战斗。&lt;&#x2F;p&gt;
&lt;p&gt;Flint 虽是船长，也极具领袖气质，但地位一直不稳，因为之前他因为私心带团队去劫财，结果只是为了实现自己的刺杀目的，这个让他开始失信于团队，好在厨子舵手成长速度惊人，才有所缓和。故事的主要发生地拿骚（一个小岛，主要用来销售海盗抢来的财物）上也有很多故事，两位女性主角（一位是销售网络头头的女儿，另一位是极有头脑和野心的妓女大佬）和海盗们一起撑起了整部剧。&lt;&#x2F;p&gt;
&lt;p&gt;PS：&lt;a href=&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1Fx411P76K&quot;&gt;主题曲&lt;&#x2F;a&gt;是一大亮点（一开始出现的音色是绞弦琴发出来的，很有特点），舍不得快进，个人感觉不输西部世界。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu&quot;&gt;书&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;xiang-ta-lan&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3673771&#x2F;&quot;&gt;项塔兰&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;逃亡时，每一天都是人生的全部。每一分钟的自由，都是以喜剧收场的一部短篇小说。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这村子还给我某种笃定的感觉，我在任何城市都没体验过的感觉：那种笃定感滋生于土地和耕种者可互换之时，滋生于人与大自然合而为一之时。城市是不断在改变的地方，而且是不可回复的改变。城市的招牌声音，是风钻发出的响尾蛇般的嗒嗒震颤声——商业爬行动物攻击的警告声。但这村子里的改变是循环往复的改变。自然界的改变，随着四季循环，回复原状。凡来自大地的，最终都回归大地；凡兴盛茁壮的，都渐渐消失以再度滋长。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;鲁赫玛拜便决定以项塔兰为我的名字，意为和平之人或天赐平和的男子&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的一生里都有很多个起点、很多个转折点，有运气、意志与命运的问题。在普拉巴克村子看着淹水桩，女人替我取名项塔兰的那一天，是个起点。这时我才知道，那是个起点。我知道，在那晚之前，在聆听那些盲人歌手演唱之前，我在印度其他地方所做过的其他事，甚至我这辈子去过的所有地方所做过的其他事，都是在为那个有着阿布德尔·哈德汗参与的起点做准备。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果你能感受快乐，真正的快乐，只有片刻，但你从一开始就知道那最终会让你难过、痛苦，那你会选择享受那快乐，还是逃避？”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Salaam aleikum（祝你平安）。你跟我说你们会给人熊抱，我想那是你们国家的习俗。尽管我觉得那很奇怪，尽管我不懂，但我想你在这里一定会很寂寞，因为孟买没有熊。为此，我找来一只熊给你抱，请享用。希望它和你国家的抱抱熊差不多。我很忙，也很健康，感谢上帝。事情忙完了，我很快就回孟买，印沙阿拉。愿上帝保佑你和你的兄弟。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们干预外界时，我们有所作为时，即使抱持最良善的动机，也永远都可能带来新灾难。那灾难或许不是我们直接促成的，但没有我们的作为，那灾难不可能会发生。卡拉曾经说过，世上最不可原谅的错事，有些是由有心改变现状的人造成的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;人对人所做的最不堪的事，是打击对方内心里想热爱世界的那个部分。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“祝她生十个女儿，每个女儿都嫁得风风光光！”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;神作&lt;&#x2F;strong&gt;。越狱、吸毒、黑帮成员、逃亡、医生，这就是小说主角的标签，而这是一本自传式小说，怪不得里面的一些描写感觉非常细致。&lt;&#x2F;p&gt;
&lt;p&gt;几乎是一口气读完的，隔天又快速重温了一遍。主人公从澳大利亚越狱，来到了孟买，这座注重情义又极具包容的城市，然后就开始了流亡生活，认识了一个叫普巴拉克的爱笑的本地人，通过撮合国外游客体验药物刺激抽取提成来维生，成为少数几个去过村庄的外国人，还被赐予了项塔兰的称号，后由于护照到期问题，来到了贫民窟，凭借着不太扎实的医学功底，开始了行医治病的生活，期间一个叫卡拉的人的出现，改变了他的人生轨迹，从贫民窟出来后的他开始与一个叫哈德汗的黑帮领袖接触，成为了他团队的一份子，一起探讨生命的意义，宇宙的奥义，最终参与了那场圣战。当然故事的发展要复杂得多，细节描写也很透彻，非常值得回味的一部小说。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 不知道为什么，卡拉在我脑中的形象是&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;celebrity&#x2F;1274989&#x2F;&quot;&gt;吉瀬美智子&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>2021&#x2F;08 小记</title>
            <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/2021-08-notes/</link>
            <guid>https://limboy.me/posts/2021-08-notes/</guid>
            <description>&lt;p&gt;8 月是离开字节跳动后的第一个月，主要从事的活动以阅读和看剧为主。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-shi-ju&quot;&gt;影视剧&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;feng-zheng&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25752323&#x2F;&quot;&gt;风筝&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;信仰至高无上&lt;br &#x2F;&gt;
到底至高无上到什么程度&lt;br &#x2F;&gt;
到底要高到什么层次&lt;br &#x2F;&gt;
才能够让你有一个决心&lt;br &#x2F;&gt;
能够牺牲到&lt;br &#x2F;&gt;
你最纯朴人性中的那种基本关系&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;看的是无删减版（51 集），五星推荐。一直以为「潜伏」之后，很难再有谍战片能与之一较高下了，但「风筝」确实达到了新的高度，超长的时间线也很罕见（从解放前一直讲到文革结束）。前 20 集并没有感觉到多出彩，罗海琼（饰演韩冰）的表演一度让我觉得很出戏，但后面的剧情发展着实惊艳，可以一瞥当时那场运动下人们的状态，可以看到信仰冲突和深厚友情带来的痛苦与煎熬，想杀「我」的是「我」的战友，救「我」的却是我的敌人，尤其宫庶在林桃墓前与六哥相认的场景，看得实在是揪心。到后面谁是影子已经不重要了，就想这俩人能多过一阵相安无事的日子。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duan-ju-kai-shi-la&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;35358556&#x2F;&quot;&gt;短剧开始啦&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 makubes 号没有发现任何宝藏，壮志未酬，就要沉船了。但我很高兴，能和你们一起冒险。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;也是一部五星推荐的剧，风格上跟&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26635329&#x2F;&quot;&gt;火花&lt;&#x2F;a&gt;有点像，「火花」讲的是几位漫才艺人的故事，「短剧」讲的是几位短剧演员的故事。漫才，有点像相声，但节奏更快，几乎没有垫话，节目通常只有五分钟到十分钟。短剧，有点像小品，同样节奏极快，表演更加夸张。「短剧」里的三位主人公有 10 年之约，如果 10 年之后还没火，就解散。结果确实也没火，但这个过程让他们收获极多。两位女性角色，一个是三人组合的铁杆粉丝，另一个是她的妹妹，这五个人的生活因为短剧而串联在一起。每一集都有一个短剧，这些短剧都提炼自三人生活中的一些事，不一定那么好笑，但品一品还挺有味道。演员们的演技真的炸裂，不少桥段很自然地就把眼泪勾了出来（当然编剧也功不可没），应该会二刷。&lt;&#x2F;p&gt;
&lt;p&gt;PS: &lt;a href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;4JLJ1Rf5qNdnjldxGNL8bW&quot;&gt;OST&lt;&#x2F;a&gt; 很赞，但 Spotify 上听不了（可能跟地区有关），感兴趣的可以翻一下豆瓣小组的讨论，里面有下载地址。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dong-jing-ai-qing-gu-shi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1438760&#x2F;&quot;&gt;东京爱情故事&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如何才能不爱上一个人？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;很古老的一部日剧，画质不高，一开始也不怎么吸引人，勉强看了下去，越到后面就陷得越深，也开始明白为什么这部剧会有这么高的分。莉香太有活力了，而且很照顾丸子的感受，很少见她悲伤的时刻，就像自带治愈能力的法师一样，前一秒刚承受了 800 点打击，下一秒就满血复活。最后她没有跟丸子在一起，既为她感到难过，又为她开心，难过是因为如此深爱过的人最终选择了别人，开心的是我觉得丸子配不上这份爱。要说丸子有没有爱过莉香，肯定是爱过的，只是他无法回应等价的爱，加上心里还放不下里美，所以在里美的攻势下妥协了。虽然莉香很想补上爱媛这一课，最后在柱子上两人的名字也感觉有点希望，但最终莉香还是提前离开了。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 为什么这部剧的背景音乐只有一首？？？会听累的呀！！！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;da-xiao-huang-yan&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25953429&#x2F;&quot;&gt;大小谎言&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;偏女性向的一部美剧，Girls help Girls。故事发生在美丽的海边城市，五位女主人公也都住在海边还不错的房子里（可能海边的房子就是很便宜吧，毕竟窗外就能看到海，打开窗就能吹海风，傍晚在沙滩跑跑步看看日落，这种无聊的生活应该没多少人愿意体验），因为孩子上学和一些其他的事情，这些人的生活开始交织了起来，大家也都有些自己的小秘密，随着剧情的发展，这些小秘密们也慢慢被揭开，家暴男的死亡也让 Girls 更加团结起来。观感不错，但应该不会二刷。&lt;&#x2F;p&gt;
&lt;p&gt;PS: &lt;a href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;4YU2XJH8yVtQh5oPylvoDw&quot;&gt;OST&lt;&#x2F;a&gt; 非常赞。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-xia-wei-lai&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;35158124&#x2F;&quot;&gt;盛夏未来&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;很赞。青春片其实很难拍，要做到阳光青涩而不矫情，故事抓人不落俗套，需要编剧、演员、导演的共同努力，这部片我觉得做到了。除此之外，英文字幕和中文字幕的差异这个细节有点厉害。张子枫和吴磊这一对，怎么说呢，磕到了！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lang-ren-sha&quot;&gt;狼人杀&lt;&#x2F;h3&gt;
&lt;p&gt;虎牙狼人杀看得多一点，作为下饭视频，各位演员们的演技和口技确实了得。狼人杀吸引人的一点是把生活&#x2F;工作中一些精髓提取了出来，再整合到游戏中，让你可以在更微缩更纯粹的场景下体验那种乐趣。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu&quot;&gt;书&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;she-jiao-tian-xing&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;26806961&#x2F;&quot;&gt;社交天性&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;书中提到了社交的三大驱动力：&lt;strong&gt;连接&lt;&#x2F;strong&gt;、&lt;strong&gt;心智解读&lt;&#x2F;strong&gt;和&lt;strong&gt;协调&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;大脑天生就与其他人有一定程度的连接，比如当被冷落时会感到痛苦（书中提到了一个简单但有效的三人玩球的实验），这种痛苦跟肉体的痛苦没什么区别（在大脑内部社会痛苦和物理疼痛共用一个神经机制，所以吃阿司匹林这样的止痛药也能减少社交痛苦）。与别人合作，被真诚地夸奖时会感到愉悦，这种愉悦跟吃到巧克力一样，物质奖励和社会奖赏也共享同一个神经认知过程。&lt;&#x2F;p&gt;
&lt;p&gt;心智解读则从婴儿时期就慢慢开始了，经过 10 来年的训练，孩子已经能从父母的一些举动中读懂其中的含义，正是这种能够考虑到周围人心理反应的能力，让我们可以提早想象到接下来的反应，这样才会提高我们获得社会奖赏的机会，降低社会痛苦。&lt;&#x2F;p&gt;
&lt;p&gt;每个人都是共性与个性的结合体，太突出个性就容易不合群，进而感受到社交痛苦，太注重共性，就容易迷失自己，协调则是要把握好这两者的度。&lt;&#x2F;p&gt;
&lt;p&gt;还将大脑分为了社会思考和非社会思考这两个二元对立的模块，而且是此消彼长的关系，这也解释了为什么高智商的人往往不太好相处。书中还提到新大脑皮层变得更大的主要原因（有邓巴提出）是因为社交需要，更大的大脑能够应对更大的群体。&lt;&#x2F;p&gt;
&lt;p&gt;内容是啰嗦了点，不过一些实验和模型还是挺有意思的，比如棒冰测试（棉花糖实验的简化版，也是跟延迟满足有关）、SCARF 模型（Status &#x2F; Certainty &#x2F; Autonomy &#x2F; Relatedness &#x2F; Fairness）。简单来说，人希望融入群体，与他人合作，并在群体中具有重要性的这个倾向是天生的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bei-tao-yan-de-yong-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;26369699&#x2F;&quot;&gt;被讨厌的勇气&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;二刷了，讲的有点多，简单梳理了下，大概是这几点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;课题分离（想清楚这是我的问题还是你的问题）&lt;&#x2F;li&gt;
&lt;li&gt;变换视角（重要的不是被给予了什么，而是如何利用被给予的东西，跟自己比，而不是跟别人比。这也是我关掉朋友圈，少上 Twitter 的一个原因：太容易看到别人的亮点，进而对自己的心态产生影响）&lt;&#x2F;li&gt;
&lt;li&gt;勇于改变（不受过去影响，有被讨厌的勇气：「不想被人讨厌」也许是我的课题，但「是否讨厌我」却是别人的课题）&lt;&#x2F;li&gt;
&lt;li&gt;共同体感觉（把对自己的执着，变成对他人的关心。自我接纳（俺就是这么一个人），他者信赖（不附加其他条件地信任），他者贡献（工作的本质是对他人的贡献））&lt;&#x2F;li&gt;
&lt;li&gt;活在当下（把人生理解成点的连续，我们的人生只存在于刹那之中，认真地做好当下的事情）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;虽然书的核心是阿德勒心理学，但也能看到「你的灯亮着吗」和「高效能人士的七个习惯」这两本书的影子。不时翻翻还是会有所收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;e-yi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;26877752&#x2F;&quot;&gt;恶意&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;令他害怕的，并非暴力本身，而是那些讨厌自己的人所散发的负面能量。他从来没有想象过，在这世上竟然会有这样的恶意存在。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;也是二刷，但就像看第一遍一样 🤦🏻‍♂️，未免剧透就不聊细节了，看完确实感受到了人性中的恶意。故事的设计没得说，层层反转，惊叹东野的功底。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shang-di-zhi-tou-zi-ma&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;33477229&#x2F;&quot;&gt;上帝掷骰子吗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;三百年硝烟散尽，波和粒子以这样一种奇怪的方式达成妥协：两者原来是不可分割的一个整体。就像漫画中教皇善与恶的两面，虽然在每个确定的时刻，只有一面能够体现出来，但它们确实集中在一个人的身上。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;还是二刷 🤦🏻‍♂️，讲量子力学的书，从物理学的两朵乌云开始，故事性很强，同时也能感受到作者的物理学功底，在一些知识点的表述上也很形象。当一本小说看也未尝不可，量子力学里面的各个大牛，就像闯荡江湖的侠士，只不过他们做的不是行侠仗义之事，而是智力大冲浪。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>对自己说的一些话</title>
            <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/words-to-myself/</link>
            <guid>https://limboy.me/posts/words-to-myself/</guid>
            <description>&lt;h2 id=&quot;tou-zi-si-wei&quot;&gt;投资思维&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;怎么过一天，就怎么过一生，如果认为明天或一年之后会有所改变，那么今天的自己是一年前希望看到的自己么&lt;&#x2F;li&gt;
&lt;li&gt;随着时间的推移，资产（你认为有价值的一切）变得更有价值还是更廉价&lt;&#x2F;li&gt;
&lt;li&gt;把每一个场景都看成投资场景，每一个行为当作投资行为，重视它对现在及将来的影响&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;you-xi-hua-si-wei&quot;&gt;游戏化思维&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;不要玩别人的游戏，玩自己的游戏，立足现实，不抱怨，总能找到&#x2F;设计适合自己的游戏&lt;&#x2F;li&gt;
&lt;li&gt;玩游戏最重要的是理解规则，每一个小点都不放过，同时开放思维，一把尺子不只能用来测量，也能用来敲门&lt;&#x2F;li&gt;
&lt;li&gt;找到最合理的游戏策略，然后在实践过程中不断总结和调整&lt;&#x2F;li&gt;
&lt;li&gt;不要相信毅力，重视反馈，当没有反馈或者负反馈时，及时调整阶段性目标和策略&lt;&#x2F;li&gt;
&lt;li&gt;尽全力去赢得游戏&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qie-huan-shi-jiao&quot;&gt;切换视角&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;在被负面情绪笼罩时，思维容易闭塞，行动容易变形，先把这朵负面情绪的乌云摘出来，让自己在理性的状态下去思考&lt;&#x2F;li&gt;
&lt;li&gt;多从别人的视角来看问题，考虑他们的想法和诉求&lt;&#x2F;li&gt;
&lt;li&gt;一个知识点想不明白时，把自己代入到构建的场景中，或者反过来想&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bao-chi-hao-qi&quot;&gt;保持好奇&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;好奇能让思维保持活跃，而思维的乐趣是不可替代的&lt;&#x2F;li&gt;
&lt;li&gt;好奇能让一本书变成起点而不是终点&lt;&#x2F;li&gt;
&lt;li&gt;好奇能发现更大的世界&lt;&#x2F;li&gt;
&lt;li&gt;追根溯源，对问题有更深的理解，找到更合适的解决方案&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zhu-zhong-shu-chu&quot;&gt;注重输出&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;只是看书或者视频，容易造成已经理解了某个知识点的错觉，短期记忆未经加固，很快就会「挥发」&lt;&#x2F;li&gt;
&lt;li&gt;无输出不输入，输出的方式可以是文章或者视频或者闲聊，经过强化后的内容更容易进入长期记忆&lt;&#x2F;li&gt;
&lt;li&gt;输出的过程会联结之前的积累，让知识更扎实，输出过程也会更流畅，输入和输出的比例可以控制在 3:7&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peaceful-mindful&quot;&gt;Peaceful &amp;amp; Mindful&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;平和的心境和敏捷的思维是值得追求的，每天尽可能地在这两点上都有所提升&lt;&#x2F;li&gt;
&lt;li&gt;冥想的奥义是专注当下，觉察并审视情绪和想法，每天可以花点时间在这上面&lt;&#x2F;li&gt;
&lt;li&gt;友谊能带来更深层的快乐，找到合适的人去努力经营&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;get-your-hands-dirty&quot;&gt;Get Your Hands Dirty&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;不要只停留在理论上，去实践，会发现更多的问题和挑战，也更有趣味，&amp;quot;What I cannot create, I do not understand&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Make it Artsy，在追求更好的过程中，精练技能，活用知识，享受最终的结果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>十分钟冥想</title>
            <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ten-minutes-a-day-mindfulness/</link>
            <guid>https://limboy.me/posts/ten-minutes-a-day-mindfulness/</guid>
            <description>&lt;p&gt;对于冥想，我们经常听到的一句话是：把注意力集中在呼吸上。可这样做到底有什么用，走神了怎么办？&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;34888157&#x2F;&quot;&gt;十分钟冥想&lt;&#x2F;a&gt;这本书带来了一些解答。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;一点题外话，比尔·盖茨把这本书加入到了他的推荐书单中，但是在 &lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;34888157&#x2F;&quot;&gt;GoodReads&lt;&#x2F;a&gt; 上打了三星···&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;书中对冥想的体验做了很多比喻，如路边看车，蓝天白云，池塘，舞台。我更喜欢路边看车的比喻，在冥想过程中，各种念头就像车一样在路上开过，你就在路边看着，但不上车。不过我想对这个比喻做一点改造，还是在路边，但不是看车，而是看路边的树，就像把注意力集中在呼吸上，想法就像车子一样会在路上穿梭，有一些车可能特别好看，就多看两眼，有人在车里向你打招呼可能还会上去坐一会儿，这些都没问题，只是要记得及时回来，继续看树。&lt;&#x2F;p&gt;
&lt;p&gt;树上会有鸟，也会有虫，抛去给事物加上的标签（如美丽的，丑陋的），按照最直接的方式去观察，去体验，每棵树看起来都差不多，但细看之下也会各有不同。&lt;&#x2F;p&gt;
&lt;p&gt;这其中有两个很重要的点：专注和觉察。冥想既是手段也是目的，当我们越来越擅长冥想后，就更容易做到专注和觉察，并将这两个技能运用到生活中，从这个角度来讲，冥想是一种技能。冥想本身也能对大脑产生潜移默化的影响，比如帮助缓解精神压力，维持大脑健康等等，因此冥想本身也可以是目标。&lt;&#x2F;p&gt;
&lt;p&gt;书中提到了「头脑空间」的概念，它是一种深层的宁静感和满足感，无关乎当时的情绪，一种你知道一切都安好的状态。这就是冥想可以达到的结果。再来说说「正念」，正念是在做任何事情时心在当下，安定在当下的能力，通过冥想练习，可以帮助习得这个能力。&lt;&#x2F;p&gt;
&lt;p&gt;还有很重要的一点是「适度好奇」，去好奇情绪的源头到底在哪里，比如感到悲伤时，试着去寻找悲伤的源头，它是怎样的一件事，在身体的哪个部位，是不是可以将情绪与之分离？就像超人眼睛发射射线，把这辆车给销毁了。&lt;&#x2F;p&gt;
&lt;p&gt;不仅可以对情绪适度好奇，还可以对各种念头&#x2F;想法进行好奇，或者说凝视，经过这番凝视后，原本很强烈的想法，会变得不那么强烈。就好像一辆车在路上不断地按着喇叭不停地招呼你上车，而你就这么看着它，然后它会出于某种羞愧的感觉，慢慢地降低按喇叭的频率，默默开走。比如文章写了一半，想玩会游戏，就让这个想法自然地出来，而你就审视这个想法：这个想法是怎么冒出来的？是锋利的还是枯燥的？之前玩游戏的体验是怎样的？玩后的状态又是怎样的？审视的时间越长，这个想法就越不像自己的。（这一部分参考了「洞见」，还有待实践）&lt;&#x2F;p&gt;
&lt;p&gt;我自己在实践过程中发现，冥想 10 分钟还比较可控，但拉长到 30 分钟后，路上的车（各种想法）就越来越多，在看对面的房子（专注于呼吸）和看车（跟随想法）之间不断地切换，可能跟当时的状态也有关：晚上睡不着，就试了下卧式冥想。&lt;&#x2F;p&gt;
&lt;p&gt;把冥想的技能运用到生活中，就是正念，这时的冥想客体是当前在做的事情，而那些车子可能是想法或者情绪，保持觉察就是要知道路上有车子（比如要意识到自己目前的生气状态），同时不上车（不被这些情感支配，做出下意识的行为）。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说对应的工具，我目前在用的是 &lt;a href=&quot;https:&#x2F;&#x2F;endel.io&quot;&gt;Endel&lt;&#x2F;a&gt;，在声音上下了一番功夫，设计上也很有特点，使用起来还不错。但不能写入 Health 的 Mindfulness，App 内部也没有统计（如每天冥想多长时间），这点上稍有欠缺。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;根据「洞见：佛学为什么是真的」再补充一些，归纳起来还是两点：专注本体；觉察并审视想法和情绪。从进化论的角度来说，「人」这个系统，为了适应环境，提高基因传播率，会给各种事物贴上标签来提高效率，比如常见的树木，美丽的蝴蝶，丑陋的蟑螂，烦人的喇叭声等等，在这些情绪的包裹下再去观察事物，就像戴上了有色眼镜一样，容易失真。人也一样，不按好人和坏人来分，而是在不同场景下做的好事和坏事。充分调动感官，摘掉标签，去体验事物的本性，进而感受到更深层次的平静与安宁。&lt;&#x2F;p&gt;
&lt;p&gt;觉察并审视想法和情绪：想刷一会手机，玩会儿游戏，感到悲伤、紧张，当这些想法或情绪出现时（就像在上面例子中的车），通常会诱导你采取一些行动，或者让你陷入某种状态，这时需要先意识到它们，也就是觉察，然后再对它们进行审视，通常来说这些想法或情绪就会慢慢消解了（有待尝试和体验）。&lt;&#x2F;p&gt;
&lt;p&gt;这两点，都可以在冥想的过程中体验，并在现实生活中应用，所以每天多花些时间用来冥想，应该会不错。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>不再钟情于移动端开发</title>
            <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bye-mobile-dev/</link>
            <guid>https://limboy.me/posts/bye-mobile-dev/</guid>
            <description>&lt;p&gt;投身于移动端开发（iOS 为主）也有些年头了，但这几年它带来的乐趣却越来越少，曾经可以为了实现一个效果凌晨三点起床 Coding，现在能让我三点起床的估计只有 Deadline 和失眠了。为啥会这样呢，大概有这么几个原因：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-ji-de-yin-an-mian&quot;&gt;手机的阴暗面&lt;&#x2F;h3&gt;
&lt;p&gt;正如把宇航员送上天的火箭，也可以把导弹「送」到其他国家，科技往往有两面性，App 也不例外，抖音上可以学到新的知识，也能偷走一下午的时间。&lt;&#x2F;p&gt;
&lt;p&gt;很羡慕那些能与手机和谐相处的人，不受蛊惑又物尽其用，我做不到，最近在尝试把它放在看不见的地方，出门就放包里，让 Apple Watch 扮演传呼机的角色。Cal Newport 的 &lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;30374975&#x2F;&quot;&gt;Digital Minimalism&lt;&#x2F;a&gt; 里描述的内容比较符合我对手机的使用理念，简单来说就是把智能手机当作非智能手机来使用。非智能手机有个很好的特点是有明确的使用场景，且不具有成瘾性。&lt;&#x2F;p&gt;
&lt;p&gt;App 开发商们在意的是 DAU（每日活跃用户数）、停留时间、用户粘度，他们会充分利用人的心理来定制化开发功能，用极低的成本来让你获得正反馈，这种正反馈的感觉驻留在大脑后，就很容易被再次触发，进而影响专心工作的时间和质量。在各个 App 的合力助攻下，手机就越来越像个黑洞，把本可以用来休息、独处、自省、思考、锻炼、社交、阅读、创作的时间都吸了进去。&lt;&#x2F;p&gt;
&lt;p&gt;严歌苓说「人间极乐之事，无不是苦中作乐。生命一天不达到那个浓度和烈度，没有到达那个敏感度、兴奋点，瘾就没过去，那一天就活得窝囊」。这个「瘾」和手机的「瘾」有一个关键的区别：思考在其中占的比例。App 为了达到 Hook 的效果，会尽可能地降低认知负担，也就是「思考」的参与，同时提供源源不断的内容供消费，或者让你时不时地想回访。就像「象与骑象人」，要去某个地方，可以是象（非理性）说了算，也可以是骑象人（理性）说了算，前者明显更好说服。时间一长，象的话语权就会越来越大，有时骑象人明显感觉到有问题，却发现很难干预，比如抖音刷的时候很过瘾，过后又会觉得有愧疚感，因为当象终于累了的时候，骑象人才能说得上话。&lt;&#x2F;p&gt;
&lt;p&gt;所以我更喜欢工具类 App，在特定的场景帮用户解决特定的问题，但自己去做这类 App 又是另一回事了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xing-ye-xian-zhuang&quot;&gt;行业现状&lt;&#x2F;h3&gt;
&lt;p&gt;对于移动端开发来说，大概有业务开发、研发支撑、基础架构这几个方向。对业务开发来说，要找到乐趣其实不容易，一方面是产品会催着上线，另一方面产品设计也较难产生「wow，cool，好想把它做出来」的感觉，如果有 Code Review 兜底的话还会好一点，不然很容易产生技术债。一个功能一旦上线就不能轻易下线，这些技术债也会随着时间的累积慢慢发挥它的威力。而新 Feature 不能停，也要不断地还债，光是要理清这些债务就很费功夫，改动起来就更难了。而这些改动很难描述成漂亮的数字和业绩，对晋升帮助不大，所以大家都愿意做新业务，然后产生新的债务，如此循环。&lt;&#x2F;p&gt;
&lt;p&gt;基础架构主要围绕性能优化、组件化、动态化、基础类库展开，研发支撑主要是 CI &#x2F; CD，辅以一些提高效率的工具，虽然业内相关的文章不少，但落实到每个公司内部都会有自己独特的问题和技术挑战。不过我在这些方面的意愿不强烈。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-ye-fa-zhan&quot;&gt;职业发展&lt;&#x2F;h3&gt;
&lt;p&gt;如果只是从事移动端开发，那么这个职业的生命周期还是挺短的，一方面移动端开发的门槛并不是很高，新人更有冲劲，也更愿意学。另一方面，随着年龄的增长，即使你也还能拼，对薪资也没有太高的要求，团队融入和管理成本都会是问题。所以不要被还不错的待遇迷惑，尽早想好 pivot 的方向，当机会出现时可以及时把握住。比如：技术管理，技术专家，独立开发者。&lt;&#x2F;p&gt;
&lt;p&gt;「技术管理」是一个有高杠杆率的岗位，考验综合能力，要能够且愿意处理各种杂事，有技术判断力，制定团队规划，考虑团队成员成长等等。&lt;&#x2F;p&gt;
&lt;p&gt;「技术专家」则需要在某一领域持续耕耘和深挖，要有扎实的技术功底和耐心，但如果这个领域本身的生命周期就不长，那这个方向就有待商榷了。&lt;&#x2F;p&gt;
&lt;p&gt;「独立开发者」是一条很难走的路，能坚持下来的不多，获得可观回报的就更少了。它独特的魅力在于可以享受更纯粹的创作乐趣，也能被用户的正反馈所激励。但要有至少一款还不错的产品，同时需要有一定的门槛，不然很容易被竟品赶上或超越，还要时刻留意新的产品机会，开发之外的事情也不少，都要 hold 住。&lt;&#x2F;p&gt;
&lt;p&gt;这几条路线对我来说，要么能力上有欠缺，要么意愿上不强烈。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so-what-s-your-plan&quot;&gt;So What&#x27;s Your Plan?&lt;&#x2F;h3&gt;
&lt;p&gt;我对自己的认知是更喜欢探索和创作，脱离移动端可以更好地释放这些热情，当然这也可能是一个错觉。巴菲特在 1998 年的佛罗里达演讲里说：「财务自由之后想做什么工作，现在就该做什么工作，是那种期待第二天到来的工作，这样的工作才是理想的工作，能学到东西，充满激情」。探索和创作是我目前最想做的事，那就先把它做了吧。&lt;&#x2F;p&gt;
&lt;p&gt;如果不 Work 怎么办，发现自己对这两件事只是浅浅的喜欢，无法形成可持续发展怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s OK，但这个过程必须要帮自己弄清楚一件事：我的长处是什么？要有所作为，就要发挥自己的长处，可以采用的方式是「回馈分析法」：事先记录下自己对结果的预期，9 到 12 月后，再将结果与自己的预期比较。（该方法来源于彼得·德鲁克的「如何实现自我管理」）&lt;&#x2F;p&gt;
&lt;p&gt;如果结果符合预期，那很好，可以继续走下去，如果不符合预期，至少断了这个念想，避免在从事其他工作时，老是记挂着「要是我能去做 xx 就好了」。&lt;&#x2F;p&gt;
&lt;p&gt;为什么是现在呢？因为「找到自己喜欢的事」越早越好，随着年龄的增加，身体的维护成本会越来越高，羁绊也会越来越多，热情会慢慢降低，大脑的运算能力也会下滑。虽然稳妥的方式可能带来更高的收入，但这都是有代价的。&lt;&#x2F;p&gt;
&lt;p&gt;Ironically，当我有了较充足的时间可以去探索自己喜欢的事时，手机成了一个不小的阻碍，因为太容易拿起来，然后可以玩很久。Deep Work 并不容易，稍微 Deep 一会，就想浮出水面，这方面还需要不断地训练。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>WaitButWhy - The Tail End(你的时间的尾端)</title>
            <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/wbw-the-tail-end/</link>
            <guid>https://limboy.me/posts/wbw-the-tail-end/</guid>
            <description>&lt;p&gt;这是我很喜欢的博客 &lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2015&#x2F;12&#x2F;the-tail-end.html&quot;&gt;WaitButWhy&lt;&#x2F;a&gt; 2015 年的一篇文章。我们都知道人生短暂，可到底是怎么个短法？10 年是个模糊的表述，我们很难在脑海里想象 10 年是什么概念。10 个冬天，跟父母在一起 100 天，这样就会更直观些。Tim Urban（文章作者）对人生的时间进行了拆解，将它可视化，映射为各类事件，看看人生时间的尾端到底意味着什么。以下为译文：&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2014&#x2F;05&#x2F;life-weeks.html&quot;&gt;去年的一篇文章&lt;&#x2F;a&gt;，我们直观地展示了人的寿命。按年份划分：
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544160-d197ee58-cb43-4dd8-93a8-b76beeda7b09.jpg&quot; alt=&quot;Years&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按月：
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544134-8ae008fd-2a74-4538-915e-0c41d73a4dec.jpg&quot; alt=&quot;Months&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按周：
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544150-9b364768-efa1-42b0-8ac2-4e1d277c4522.png&quot; alt=&quot;Weeks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在写那篇文章时，我还做了个按天的，但看起来有点多，所以没有放上去，现在把它放出来:
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544126-91747935-c386-4147-a90c-a0d3d1650669.png&quot; alt=&quot;Days&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;日表带给我的震撼不比周表少。每一个点都是具体的日子，周二，周五或周日。即使有幸能活到 90 岁高龄，也可以在一张纸上记录下每一天。&lt;&#x2F;p&gt;
&lt;p&gt;那篇文章发布后，我一直在想一些其他的事情。除了用时间来衡量生命，还可以用事件来体现。以我自己为例：&lt;&#x2F;p&gt;
&lt;p&gt;我今年 34 岁，乐观一点能画火柴小人（这里指 WaitButWhy 网站）到 90 岁。这样的话，我还能经历不到 60 个冬天：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544158-dcf85249-39a5-4824-bc1a-f9e7137414b6.png&quot; alt=&quot;Winters&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大约 60 次超级碗(Superbowls):
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544147-34424ace-7f96-4a95-8e9c-1987bdaa37de.png&quot; alt=&quot;Superbowls&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大海很冷，经常泡在里面也非我要的体验，所以一年游一次差不多了。这么说来，我只能再游个 60 次：
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544137-d8add20f-8663-4c50-aa8f-e53a0a4b3477.png&quot; alt=&quot;Ocean&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了为 WaitButWhy 做调研之外，一年大概读 5 本书，总以为将来可以读很多很多书，但事实上只有 300 本，并且希望将来没什么事情可以打断这个习惯
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544108-8c84c6a8-58c3-466b-a81d-f1b8ea9714ea.png&quot; alt=&quot;books&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我在波士顿长大，一直去看红袜队的比赛，但如果我不搬回去，我可能会继续以目前大约每三年去看一次红袜队比赛的节奏，也就是 20 次
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544145-be7184d2-359d-49a6-81ac-1fe6d2380c2d.png&quot; alt=&quot;sox&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我经历过 8 次总统选举，还可以参与 15 次，见过 5 位总统，没有什么意外，我还会再看到大约 9 位
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544144-1697b1bd-543f-46e6-afa1-8eb3258aad5a.png&quot; alt=&quot;presidents&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我大约一个月吃一次披萨，所以还有 700 多次吃披萨的机会。但对饺子我更乐观些。我一个月要吃两次饺子，每次至少吃 6 个，所以饺子的量还是比较富裕的
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544129-07f251a2-df6c-4c34-9fe3-2c8cbf0bb961.png&quot; alt=&quot;dumplings-small&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但这些事情不是我一直在想的。上面提到的大多数事情在我生命中，每年都以相似的频率发生。如果我的人生已经走过了 1&#x2F;3，我也已经体验了 1&#x2F;3 的事件。&lt;&#x2F;p&gt;
&lt;p&gt;我一直在想生活中非常重要的一部分，与上面这些例子不同，它并没有随着时间的推移而均匀地发生——这种比例与我度过的时间完全不一致：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;人际关系（父母&#x2F;亲属&#x2F;朋友）。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的父母已经 60 多岁了。18 岁之前，我差不多有 90% 的时间和父母在一起。但自从去上大学，然后搬出波士顿，我可能每年只见他们 5 次，每次 2 天左右。一年 10 天。是我童年时期的 3%。&lt;&#x2F;p&gt;
&lt;p&gt;乐观一点，假如当我 60 岁时，父母还都健在，那么还有大约 30 年的时间。如果保持每年 10 天的频率，大约还有 300 天能跟父母在一起，比小时候一年的时间都少。&lt;&#x2F;p&gt;
&lt;p&gt;面对现实，你会意识到即使没有到人生的终点，对于生命中最重要的一些人，你也已经到了时间的尽头。如果我把已经和将要跟父母在一起的事件画出来，就会非常明显了：
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;130544140-a0056b2d-c60a-4d3b-98a9-3179226bb234.png&quot; alt=&quot;parents-small&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当我高中毕业，跟父母在一起的时间就已经用掉了 93%。我现在正享受那最后的 5% 的时间，我们已经来到了尾声。&lt;&#x2F;p&gt;
&lt;p&gt;跟我的两个姐姐也是差不多的情况。在一起住了 10 年和 13 年后，我现在跟他们住在不同的城市，每年会跟每个人各聚 15 天左右。希望这给我们留下大约 15% 的时间。&lt;&#x2F;p&gt;
&lt;p&gt;老朋友也一样。读高中时，我跟要好的 4 位同学一星期有 5 天在一起。4 年时间相聚 700 次。现在，我们 5 人分散在全国各地，生活和时间表完全不一样，每 10 年可能能聚个 10 天，这个小团体的时间已经是最后的 7% 了。&lt;&#x2F;p&gt;
&lt;p&gt;有了这些信息后，我们能做什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;抛开技术进步能让我活到 700 岁之外，这三点是值得注意的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1) 跟你在乎的人尽量住的近些。&lt;&#x2F;strong&gt; 在同一个城市和其他城市相比，在一起的时间能差 10 倍。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2) 注重优先级。&lt;&#x2F;strong&gt; 余下的时间要跟谁打照面取决于哪些人会在你的见面优先级列表上。确保这个列表是你自己而不是无意识的惯性设定的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;3) 注重时间的质量。&lt;&#x2F;strong&gt; 如果跟你在乎的人相处的时间只剩 10%（与之前在一起的时间相比），当你和他们在一起时，把这个事实放在脑海中，并珍视那段时间。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Bonus: Kurzgesagt(德语中 In a nutshell 的意思) 基于这篇文章出了一部短视频：&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JXeJANDKwDc&quot;&gt;What Are You Doing With Your Life? The Tail End&lt;&#x2F;a&gt;，通过动画更直观地把人这一生，事件，剩余时间，意外等描绘了出来，值得一看。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>如何生活（How to Live）</title>
            <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-live/</link>
            <guid>https://limboy.me/posts/how-to-live/</guid>
            <description>&lt;p&gt;Derek Sivers 最近出了一本新书：&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&#x2F;h&quot;&gt;How to Live&lt;&#x2F;a&gt;，花了两年时间写作，两年时间修改，也是他认为迄今最好的作品，（目前还未对外开放，感兴趣的可以花 $15 在他的博客上购买）。&lt;&#x2F;p&gt;
&lt;p&gt;在讲书的内容前，先简单介绍下作者，我关注 Sivers 还是从他的&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&quot;&gt;博客&lt;&#x2F;a&gt;开始，他是一个音乐家，企业家，也是一个程序员，喜欢创作（Saying no to almost everything, so I can have lots of time for making.）。2008 年卖掉公司后，全身心投入到学习和创作中，&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&#x2F;about&quot;&gt;这里&lt;&#x2F;a&gt;有关于他自己的详细介绍。他的博客文章一般都不长，但往往挺有启发。我最感兴趣的是他的生活方式和处世哲学。&lt;&#x2F;p&gt;
&lt;p&gt;这本书中，作者罗列了 27 条有冲突的答案，看看哪些最能击中你，以下是击中我的部分：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-nuo-commit&quot;&gt;承诺（Commit）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;你一直在追寻最好的人、地方或职业&lt;br &#x2F;&gt;
但「追寻最好的」就是问题本身&lt;br &#x2F;&gt;
没有哪个选择是天然最好的&lt;br &#x2F;&gt;
成就最好选择的是你自己&lt;br &#x2F;&gt;
你通过承诺让选择成为了最好的选择&lt;br &#x2F;&gt;
你的信念和行动让选择变得更好&lt;&#x2F;p&gt;
&lt;p&gt;选择一个没有退路的承诺&lt;br &#x2F;&gt;
然后它就成了你最好的选择&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ve been looking for the best person, place, or career.&lt;br &#x2F;&gt;
But seeking the best is the problem.&lt;br &#x2F;&gt;
No choice is inherently the best.&lt;br &#x2F;&gt;
What makes something the best choice?
You
You make it the best through your commitment to it.&lt;br &#x2F;&gt;
You dedication and actions make any choice great.&lt;&#x2F;p&gt;
&lt;p&gt;Pick one and irreversibly commit.&lt;br &#x2F;&gt;
Then it becomes the best choice for you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生活中那些不重要的就让它去吧&lt;br &#x2F;&gt;
看起来可能微小，但加一起就会压垮你的灵魂&lt;br &#x2F;&gt;
将注意力集中在少数几个你承诺的事情上，其他的就别管了&lt;&#x2F;p&gt;
&lt;p&gt;不重要的事情不做&lt;br &#x2F;&gt;
重要的事情天天做&lt;&#x2F;p&gt;
&lt;p&gt;Ignore other aspects of your life
Let go of every unnecessary obligation
Each one seems small, but together, they&#x27;ll drain your soul.&lt;br &#x2F;&gt;
Focus your attention on the few things you&#x27;re committed to, and nothing else.&lt;&#x2F;p&gt;
&lt;p&gt;If it&#x27;s not important, never do it.&lt;br &#x2F;&gt;
If it&#x27;s important, do it every day.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;选择一个职业&lt;br &#x2F;&gt;
建立信誉和专业度&lt;br &#x2F;&gt;
因为切断了其他选项，你不会因此偏离方向&lt;br &#x2F;&gt;
因为你给了承诺，你就不会失败&lt;br &#x2F;&gt;
即使需要花更多年，你也不会失败，除非放弃&lt;&#x2F;p&gt;
&lt;p&gt;Commit to one career path
Build your expertise and reputation over time
Because you cut off other options, you won&#x27;t be derailed by distraction.&lt;br &#x2F;&gt;
Since you&#x27;re committed, you can&#x27;t fail.&lt;br &#x2F;&gt;
Even if it takes you years longer than expected, it&#x27;s not failure until you give up.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;shi-yao-ye-bu-zuo-do-nothing&quot;&gt;什么也不做（Do Nothing）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;你的情绪认为你应该回应&lt;br &#x2F;&gt;
如果忽略它的急迫性，它就消失了&lt;br &#x2F;&gt;
观察自己&lt;br &#x2F;&gt;
你的大脑是最好的实验室&lt;br &#x2F;&gt;
也是最私密和宁静的工作场所&lt;&#x2F;p&gt;
&lt;p&gt;Your emotions insist they need you to respond
When you ignore the urges, they go away.&lt;br &#x2F;&gt;
Observe yourself.&lt;br &#x2F;&gt;
Your own mind is the best laboratory.&lt;br &#x2F;&gt;
It&#x27;s also the most private and peaceful place to work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果需要钱，就成为投资人&lt;br &#x2F;&gt;
这是产出投入比最高的方式&lt;&#x2F;p&gt;
&lt;p&gt;If you need money, be an investor.&lt;br &#x2F;&gt;
It&#x27;s the only career where you profit the most by doing the least.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果看起来有必要付诸行动，并且摆脱不了这个想法，先写下来&lt;br &#x2F;&gt;
当你在想一件事时，通常它会变得重要&lt;br &#x2F;&gt;
一段时间后你会发现，并不是&lt;&#x2F;p&gt;
&lt;p&gt;如果依旧觉得有必要，拉长下时间线&lt;br &#x2F;&gt;
一年之后还会觉得重要么？&lt;br &#x2F;&gt;
十年之后？&lt;br &#x2F;&gt;
把时间线拉得足够长，它就会显得不那么重要&lt;br &#x2F;&gt;
然后它就不会再缠着你了&lt;&#x2F;p&gt;
&lt;p&gt;If an action feels necessary, and you can&#x27;t let it go, just write it down for later.&lt;br &#x2F;&gt;
Everything seems more important while you&#x27;re thinking of it.&lt;br &#x2F;&gt;
Later, you&#x27;ll realize it&#x27;s not.&lt;&#x2F;p&gt;
&lt;p&gt;But if it still feels necessary, adjust your time frame.&lt;br &#x2F;&gt;
A year from now, will it be important?
Ten years from now?
Zoom out as far as you need to make it unimportant.&lt;br &#x2F;&gt;
Then you&#x27;re free of it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;chang-xian-si-wei-think-super-long-term&quot;&gt;长线思维（Think Super-Long-Term）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;着眼于未来&lt;br &#x2F;&gt;
做能对未来（将来的自己和后代们）产生积极作用的[小]事情&lt;&#x2F;p&gt;
&lt;p&gt;在大脑里装一个时间机器，不断想象未来的自己和后代们会生活在怎样的世界&lt;br &#x2F;&gt;
用行动让想象不再遥远&lt;&#x2F;p&gt;
&lt;p&gt;Serve the future
Do small things now with huge benefits for your old self, your descendants, and future generations.&lt;&#x2F;p&gt;
&lt;p&gt;Actions amplify through time to have a massive impact on the future.&lt;br &#x2F;&gt;
Let this fact guide your life.&lt;br &#x2F;&gt;
Use a time machine in your mind, constantly picturing your future self and your great-grandchildren&#x27;s world.&lt;br &#x2F;&gt;
Act now to influence that time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;想象未来的自己评判当前的选择&lt;br &#x2F;&gt;
做一个决定时，想象当你老了会怎样看待这个决定&lt;br &#x2F;&gt;
未来的自己和家人会因为你做了什么而感激你&lt;br &#x2F;&gt;
现在一些不起眼的事情会通过时间的复利在将来给予回报&lt;&#x2F;p&gt;
&lt;p&gt;Imagine your future self judging your current life choices.&lt;br &#x2F;&gt;
When making a decision, ask yourself how you&#x27;ll feel about it when you&#x27;re old.&lt;br &#x2F;&gt;
What would your future self and family thank you for?
Simple actions now will compound to give them a better life.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;推迟满足感&lt;br &#x2F;&gt;
今天的不适会在将来得到回报&lt;br &#x2F;&gt;
如果未来可期，就不会在意当前的付出&lt;br &#x2F;&gt;
你永远不会后悔没有放纵&lt;&#x2F;p&gt;
&lt;p&gt;Delay gratification.&lt;br &#x2F;&gt;
Today&#x27;s discomfort brings future rewards.&lt;br &#x2F;&gt;
When you have a clear view of the future, you won&#x27;t mind the small sacrifice.&lt;br &#x2F;&gt;
You never regret not indulging.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;把钱花在能带来长远回报的事情上，比如教育&lt;br &#x2F;&gt;
换句话说，不要花钱，只有投资&lt;br &#x2F;&gt;
越早开始越好，因为时间就是那个乘数&lt;&#x2F;p&gt;
&lt;p&gt;Only spend money on things that do long-term good, like education.&lt;br &#x2F;&gt;
In other words, never spend, only invest.&lt;br &#x2F;&gt;
The earlier you start, the better, since time is the multiplier.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尤其注意那些看起来无害的习惯&lt;br &#x2F;&gt;
假想每个 Action 都会持续下去，而不是一次性的&lt;br &#x2F;&gt;
吃一个饼干，持续下去，你就会变胖&lt;br &#x2F;&gt;
开心购物，持续下去，你就会负债累累&lt;br &#x2F;&gt;
你选择一个行为，就选择了它带来的（将来的）结果&lt;&#x2F;p&gt;
&lt;p&gt;Be extra-careful of habits that seem harmless.&lt;br &#x2F;&gt;
Imagine each choice continuing forever.&lt;br &#x2F;&gt;
Eat a cookie, and eventually you&#x27;re obese.&lt;br &#x2F;&gt;
Shop for fun, and eventually you&#x27;re deep in debt.&lt;br &#x2F;&gt;
When you choose a behavior, you choose its future consequences.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhi-zao-hui-yi-make-memories&quot;&gt;制造回忆（Make Memories）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你老了，甚至忘了经年发生的事情&lt;br &#x2F;&gt;
如果想不起来，就像没有发生过&lt;br &#x2F;&gt;
你可以有一个健康长寿的生命，但如果你记不住，那就像你只有短暂的生命一样&lt;br &#x2F;&gt;
这多可悲&lt;&#x2F;p&gt;
&lt;p&gt;你要避免出现这种状况&lt;br &#x2F;&gt;
避免单调，保持新鲜体验&lt;&#x2F;p&gt;
&lt;p&gt;What if, when you&#x27;re older, you can&#x27;t recall entire years?
If you can&#x27;t remember something, it&#x27;s like it never happened.&lt;br &#x2F;&gt;
You could have a long healthy life, but if you can&#x27;t remember it, it&#x27;s like you had a short life.&lt;br &#x2F;&gt;
What a horrible way to live.&lt;&#x2F;p&gt;
&lt;p&gt;You need to prevent this.&lt;br &#x2F;&gt;
Monotony is the enemy.&lt;br &#x2F;&gt;
Novelty is the solution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将你的经历变成故事&lt;br &#x2F;&gt;
故事是经历的精华&lt;br &#x2F;&gt;
让你的故事变得有趣&lt;br &#x2F;&gt;
通过复述好的故事，记忆会更持久，人们会偶尔谈及或者让你再讲一遍&lt;&#x2F;p&gt;
&lt;p&gt;Turn your experiences into stories.&lt;br &#x2F;&gt;
A story is the remains of an experience.&lt;br &#x2F;&gt;
Make your stories entertaining, so people like to hear them.&lt;br &#x2F;&gt;
By telling good stories, your memories can last longer, because people will echo them back to you occasionally, or ask you to tell them again.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有意义的事情越容易记住&lt;br &#x2F;&gt;
赋予事件以意义，以便记住他们&lt;&#x2F;p&gt;
&lt;p&gt;The more something means to you, the more you&#x27;ll remember it.&lt;br &#x2F;&gt;
Give moments meaning to remember them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jing-tong-xie-shi-yao-master-something&quot;&gt;精通些什么（Master Something）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;成为一个偏执狂，在一些困难的事情上做到足够出色&lt;br &#x2F;&gt;
给自己找一个可以在余生不断深入研究的东西&lt;br &#x2F;&gt;
精通是最好的目标，因为富人买不了，急躁的人无法急于求成，特权者不能继承它，没有人可以窃取它&lt;br &#x2F;&gt;
你只能通过自己的努力来获得&lt;&#x2F;p&gt;
&lt;p&gt;Be a monomaniac on a mission to be truly great at something difficult.&lt;br &#x2F;&gt;
Pick one thing and spend the rest of your life getting deeper into it.&lt;br &#x2F;&gt;
Mastery is the best goal because the rich can&#x27;t buy it, the impatient can&#x27;t rush it, the privileged can&#x27;t inherit it, and nobody can steal it.&lt;br &#x2F;&gt;
You can only earn it through hard work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学得越多，待学的就越多&lt;br &#x2F;&gt;
你能看到普通人看不到的东西&lt;br &#x2F;&gt;
随着逐渐深入，你会发现这条路越来越有趣&lt;&#x2F;p&gt;
&lt;p&gt;The more you learn about something, the more there is to learn.&lt;br &#x2F;&gt;
You see what normal people don&#x27;t see.&lt;br &#x2F;&gt;
The path gets more and more interesting as you go.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还没有决定要掌握什么，选择任何让你害怕、着迷的东西&lt;br &#x2F;&gt;
不要问，“这真的是我想要的吗？” 或 “这是我的热情所在吗？”&lt;br &#x2F;&gt;
这些问题导致无休止的搜索和失望&lt;br &#x2F;&gt;
人们不会因为选择错误的道路而失败——他们会因为不选择而失败&lt;br &#x2F;&gt;
做出你的选择，然后致力于不断改进&lt;br &#x2F;&gt;
在你开始找到感觉后，热情就会出现&lt;&#x2F;p&gt;
&lt;p&gt;If you haven’t decided what to master, pick anything that scares you, fascinates you, or infuriates you.&lt;br &#x2F;&gt;
Don’t ask, “Is this the real me?” or “Is this my passion?”
Those questions lead to endless searching and disappointment.&lt;br &#x2F;&gt;
People don’t fail by choosing the wrong path — they fail by not choosing.&lt;br &#x2F;&gt;
Make your choice, then make a lifetime commitment to constant improvement.&lt;br &#x2F;&gt;
The passion comes after you start getting good.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当只有一个优先级时，决策就会很容易&lt;br &#x2F;&gt;
Decisions are easy when you have only one priority&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;应该志向高远，这有助于你做成事&lt;br &#x2F;&gt;
大多数人在生活中失败的原因不是目标太高，而是目标太低&lt;br &#x2F;&gt;
如果你的目标很高但没达成，你并没有真的失败&lt;&#x2F;p&gt;
&lt;p&gt;Pursuing mastery is ambitious, which helps your chance of success.&lt;br &#x2F;&gt;
Most people fail in life not by aiming too high, but by aiming too low.&lt;br &#x2F;&gt;
If you aim high and miss, you don’t actually fail.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xun-qiu-tong-ku-pursue-pain&quot;&gt;寻求痛苦（Pursue Pain）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一切美好都来源于某种痛苦&lt;br &#x2F;&gt;
肌肉的酸痛让你更强壮&lt;br &#x2F;&gt;
练习的痛苦是通往精通之路&lt;br &#x2F;&gt;
艰难的谈话可以促进友谊&lt;&#x2F;p&gt;
&lt;p&gt;Everything good comes from some kind of pain.&lt;br &#x2F;&gt;
Muscle fatigue makes you healthy and strong.&lt;br &#x2F;&gt;
The pain of practice leads to mastery.&lt;br &#x2F;&gt;
Difficult conversations save your relationships.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生存之道就是与痛苦为伴&lt;br &#x2F;&gt;
用它作为你的指南针&lt;br &#x2F;&gt;
总是采取更难的选择&lt;br &#x2F;&gt;
总是逼迫自己到不舒服的状态&lt;br &#x2F;&gt;
忽略你的直觉&lt;&#x2F;p&gt;
&lt;p&gt;The way to live is to steer towards the pain.&lt;br &#x2F;&gt;
Use it as your compass.&lt;br &#x2F;&gt;
Always take the harder option.&lt;br &#x2F;&gt;
Always push into discomfort.&lt;br &#x2F;&gt;
Ignore your instincts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;选择痛苦，它就变得可以承受&lt;br &#x2F;&gt;
它变得无法伤害你&lt;br &#x2F;&gt;
你成了它的主人，而不是受害者&lt;&#x2F;p&gt;
&lt;p&gt;Choosing pain makes it bearable.&lt;br &#x2F;&gt;
It loses its power to hurt you.&lt;br &#x2F;&gt;
You become its master, not victim.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人没得选&lt;br &#x2F;&gt;
一旦你驯服了自己的痛苦，就帮更多的人去驯服他们的痛苦&lt;&#x2F;p&gt;
&lt;p&gt;容易的路越走越难，反之亦然&lt;&#x2F;p&gt;
&lt;p&gt;Most people don’t get to choose how they suffer.&lt;br &#x2F;&gt;
Once you tame pain for yourself, tame it for others.&lt;&#x2F;p&gt;
&lt;p&gt;The easy road leads to a hard future.&lt;br &#x2F;&gt;
The hard road leads to an easy future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;cheng-wei-xian-feng-be-a-famous-pioneer&quot;&gt;成为先锋（Be a Famous Pioneer）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;去经历伟大的冒险，去讲述精彩的故事，去激励他人&lt;br &#x2F;&gt;
追求大规模的媒体关注，不是为了虚荣心或自我，而是为了让你的故事能够帮助别人打开思路，激发想象力，带领更多的人来探索。&lt;&#x2F;p&gt;
&lt;p&gt;Your job is not just to act, but to tell a fascinating story of how you did so, and inspire others to do it.&lt;br &#x2F;&gt;
Make great adventures, but tell greater stories.&lt;br &#x2F;&gt;
Pursue massive media attention, not for vanity or ego, but so your stories can open minds, spark imaginations, and lead to further explorations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xuan-ze-jing-guo-shi-jian-jian-yan-de-shi-wu-value-only-what-has-endured&quot;&gt;选择经过时间检验的事物（ Value Only What Has Endured）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;新闻是嘈杂的，因为他们必须要炒作&lt;br &#x2F;&gt;
他们试图让你关注一些实际上并不重要的事情&lt;br &#x2F;&gt;
他们制造虚假的紧迫感、社会地位、恐惧、震惊，或任何可能的伎俩来操纵你的心理开关，最终帮助他们获利&lt;br &#x2F;&gt;
相比之下，真正重要的事情是安静的。&lt;&#x2F;p&gt;
&lt;p&gt;The world of news is noisy, because they have to hype it.&lt;br &#x2F;&gt;
They try to get you to pay attention to something that’s not actually important.&lt;br &#x2F;&gt;
They create a false sense of urgency, social status, fear, shock, or any tricks possible to manipulate your psychological triggers, and ultimately help them profit.&lt;br &#x2F;&gt;
By contrast, the truly important things are quiet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生活在过去&lt;br &#x2F;&gt;
观看伟大的电影&lt;br &#x2F;&gt;
阅读经典之作&lt;br &#x2F;&gt;
听听传奇故事&lt;br &#x2F;&gt;
这些东西之所以能持续下去，是因为它们经过了时间的考验&lt;br &#x2F;&gt;
时间是最好的过滤器&lt;&#x2F;p&gt;
&lt;p&gt;Live in the past.&lt;br &#x2F;&gt;
Watch the greatest movies of all time.&lt;br &#x2F;&gt;
Read the classics.&lt;br &#x2F;&gt;
Listen to the legends.&lt;br &#x2F;&gt;
These things have lasted because they work so well.&lt;br &#x2F;&gt;
Time is the best filter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;掌握基本原理，而不是新技巧&lt;br &#x2F;&gt;
学习那些不受时间影响的技艺&lt;br &#x2F;&gt;
这些知识不会失去价值&lt;br &#x2F;&gt;
在任何给定的领域，学习仍然存在的最古老的东西，因为它是最有可能持续的&lt;&#x2F;p&gt;
&lt;p&gt;Master the fundamentals, not new tricks.&lt;br &#x2F;&gt;
Learn the timeless aspects of your craft.&lt;br &#x2F;&gt;
This knowledge will never lose its value.&lt;br &#x2F;&gt;
In any given field, learn the oldest thing still around, since it’s the one most likely to last.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xiao-dui-ren-sheng-laugh-at-life&quot;&gt;笑对人生（Laugh at Life）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;幽默是生命的精神--是健康、充满活力的思想和灵魂的标志&lt;br &#x2F;&gt;
Humor is the spirit of life — a sign of a healthy, vibrant mind and soul.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;幽默意味着超越必要性、超越现实地思考一件事&lt;br &#x2F;&gt;
这就是为什么我们钦佩机智的人&lt;br &#x2F;&gt;
它表明你迅速地从多个角度观察某件事情，找到最让你开心的那一个，并将其传达给别人&lt;br &#x2F;&gt;
观察力、创造力和同理心，都在一瞬间完成&lt;br &#x2F;&gt;
还有什么能比这更好地体现一个健康的心灵呢？&lt;&#x2F;p&gt;
&lt;p&gt;Humor means using your mind beyond necessity, beyond reality, for both noticing and imagining.&lt;br &#x2F;&gt;
That’s why we admire a quick wit.&lt;br &#x2F;&gt;
It shows you quickly looked at something from many angles, found the one that amused you the most, and considerately expressed it to someone else.&lt;br &#x2F;&gt;
Observation, creativity, and empathy, all in an instant.&lt;br &#x2F;&gt;
What could be a better sign of a healthy mind?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ju-an-si-wei-prepare-for-the-worst&quot;&gt;居安思危（Prepare for the Worst）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;事情会变得越来越难&lt;br &#x2F;&gt;
未来将考验你的耐力&lt;&#x2F;p&gt;
&lt;p&gt;到目前为止，你生活在一个繁荣的时代&lt;br &#x2F;&gt;
你没有经历过大规模的衰败，但你可能会&lt;br &#x2F;&gt;
赚钱会更难&lt;br &#x2F;&gt;
会更难快乐&lt;br &#x2F;&gt;
现在喜欢的很多东西都会消失&lt;br &#x2F;&gt;
回顾往昔，今年是你经历过的最轻松的一年&lt;&#x2F;p&gt;
&lt;p&gt;你会受伤或生病，失去看、听、移动或思考的能力&lt;br &#x2F;&gt;
你会向往你现在拥有的健康&lt;&#x2F;p&gt;
&lt;p&gt;Things are going to get harder.&lt;br &#x2F;&gt;
The future will test your strength.&lt;&#x2F;p&gt;
&lt;p&gt;So far, you’ve lived in a time of prosperity.&lt;br &#x2F;&gt;
You haven’t experienced massive devastation, but you probably will.&lt;br &#x2F;&gt;
It’ll be harder to make money.&lt;br &#x2F;&gt;
It’ll be harder to be happy.&lt;br &#x2F;&gt;
Much of what you love now will be gone.&lt;br &#x2F;&gt;
You’ll look back at this year as one of the easiest you ever had.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll get injured or sick, losing some of your ability to see, hear, move, or think.&lt;br &#x2F;&gt;
You’ll wish for the health you have now.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;未来是不可预测和不可控制的&lt;br &#x2F;&gt;
想象所有可能出错的事情&lt;br &#x2F;&gt;
为每一个做好准备，这样它们就不会惊到你或伤害你&lt;&#x2F;p&gt;
&lt;p&gt;The future is unpredictable and uncontrollable.&lt;br &#x2F;&gt;
Picture all the things that could go wrong.&lt;br &#x2F;&gt;
Prepare for each, so they won’t surprise or hurt you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;想象最糟糕的场景，直到它们感觉真实&lt;br &#x2F;&gt;
接受它们&lt;br &#x2F;&gt;
意识到最坏的情况并没有那么糟糕&lt;&#x2F;p&gt;
&lt;p&gt;Vividly imagine the worst scenarios until they feel real.&lt;br &#x2F;&gt;
Accepting them is the ultimate happiness and security.&lt;br &#x2F;&gt;
Realize that the worst is not that bad.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你最大的敌人是贪得无厌&lt;br &#x2F;&gt;
认识到你对生活的诉求，并破除这个习惯&lt;br &#x2F;&gt;
练习品味你所拥有的东西，以及它们带给你的愉悦&lt;&#x2F;p&gt;
&lt;p&gt;Your biggest enemy is insatiability.&lt;br &#x2F;&gt;
Recognize your desire to be entertained by life, and break the habit.&lt;br &#x2F;&gt;
Practice being happy with what you have.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;bian-de-fu-you-get-rich&quot;&gt;变得富有（Get Rich）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;金钱不过是一个中性的价值交换物&lt;br &#x2F;&gt;
能赚钱证明你正在为人们的生活增加价值&lt;br &#x2F;&gt;
变得富有说明你对世界有用，为他人做更多的事&lt;br &#x2F;&gt;
服务更多&lt;br &#x2F;&gt;
分享更多&lt;br &#x2F;&gt;
贡献更多&lt;br &#x2F;&gt;
世界会奖励你创造的价值&lt;br &#x2F;&gt;
追求财富，因为它是道德的、美好的、无限的&lt;&#x2F;p&gt;
&lt;p&gt;Money is nothing more than a neutral exchange of value.&lt;br &#x2F;&gt;
Making money is proof you’re adding value to people’s lives.&lt;br &#x2F;&gt;
Aiming to get rich is aiming to be useful to the world.&lt;br &#x2F;&gt;
It’s striving to do more for others.&lt;br &#x2F;&gt;
Serving more.&lt;br &#x2F;&gt;
Sharing more.&lt;br &#x2F;&gt;
Contributing more.&lt;br &#x2F;&gt;
The world rewards you for creating value.&lt;br &#x2F;&gt;
Pursue wealth because it’s moral, good, and unlimited.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;全力致富，否则就不会发生&lt;br &#x2F;&gt;
调整你的自我意识：你应该并且将会变得富有&lt;br &#x2F;&gt;
如果你潜意识里觉得自己不配，你就不会变得富有&lt;br &#x2F;&gt;
但如果你真的觉得你值得拥有它，你就会不惜一切代价去实现它&lt;br &#x2F;&gt;
所以先调整你的自我意识&lt;&#x2F;p&gt;
&lt;p&gt;Be fully committed to getting rich, or it won’t happen.&lt;br &#x2F;&gt;
Adjust your self-image so that you congruently feel that you should and will be rich.&lt;br &#x2F;&gt;
If you subconsciously don’t feel you deserve it, you’ll sabotage your pursuit.&lt;br &#x2F;&gt;
But if you truly feel you deserve it, you’ll do whatever it takes.&lt;br &#x2F;&gt;
So adjust your self-image first.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;chuang-zuo-create&quot;&gt;创作（Create）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Die empty.&lt;br &#x2F;&gt;
Get every idea out of your head and into reality.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你更愿意成为哪个？&lt;br &#x2F;&gt;
一个因为忙于消费而多年没有创造任何东西的人？&lt;br &#x2F;&gt;
或者因为你忙于创作而多年来没有消费任何东西的人？&lt;&#x2F;p&gt;
&lt;p&gt;不要等待灵感&lt;br &#x2F;&gt;
灵感永远不会迈出第一步&lt;br &#x2F;&gt;
只有当你表明你不需要她时，她才会来&lt;br &#x2F;&gt;
不管怎样，每天做你该做的事&lt;&#x2F;p&gt;
&lt;p&gt;Which would you rather be?&lt;br &#x2F;&gt;
Someone who hasn’t created anything in years because you’re so busy consuming?&lt;br &#x2F;&gt;
Or someone who hasn’t consumed anything in years because you’re so busy creating?&lt;&#x2F;p&gt;
&lt;p&gt;Don’t wait for inspiration.&lt;br &#x2F;&gt;
Inspiration will never make the first move.&lt;br &#x2F;&gt;
She comes only when you’ve shown you don’t need her.&lt;br &#x2F;&gt;
Do your work every day, no matter what.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ping-heng-balance-everything&quot;&gt;平衡（Balance Everything）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;坏事情往往来自于极端&lt;br &#x2F;&gt;
这个太多&lt;br &#x2F;&gt;
或那个太少&lt;&#x2F;p&gt;
&lt;p&gt;All bad things in life come from extremes.&lt;br &#x2F;&gt;
Too much of this.&lt;br &#x2F;&gt;
Too little of that.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们不够平衡时，我们就会心烦意乱&lt;br &#x2F;&gt;
工作过度，爱得太浅，吃得太多，睡得不够&lt;br &#x2F;&gt;
只注重财富，却忽视健康&lt;br &#x2F;&gt;
专注于现在，却忽略了未来&lt;&#x2F;p&gt;
&lt;p&gt;When we lack balance, we’re upset.&lt;br &#x2F;&gt;
Over-worked, under-loved, over-eating, under-sleeping.&lt;br &#x2F;&gt;
Focused on wealth, but ignoring health.&lt;br &#x2F;&gt;
Focused on the present, but ignoring the future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;平衡生活的最佳工具是时钟&lt;br &#x2F;&gt;
就像猎人的狗一样，时钟将是您最好的盟友&lt;br &#x2F;&gt;
它会保护你，控制你的冲动，保护对你重要的东西&lt;&#x2F;p&gt;
&lt;p&gt;安排一切以确保你的时间和精力的平衡&lt;br &#x2F;&gt;
日程安排可以防止拖延、分心和痴迷&lt;br &#x2F;&gt;
时间表让你按照目标行事，而不是你的情绪&lt;&#x2F;p&gt;
&lt;p&gt;与朋友一起度过美好的时光&lt;br &#x2F;&gt;
安排体检&lt;br &#x2F;&gt;
安排学习时间&lt;br &#x2F;&gt;
安排你生活的方方面面，一个都不落&lt;&#x2F;p&gt;
&lt;p&gt;平衡的日程安排可以保护你免于不知所措和忽视重要的需求&lt;br &#x2F;&gt;
你不会过度工作、过度玩耍或过度放纵&lt;&#x2F;p&gt;
&lt;p&gt;The best tool for a balanced life is the clock.&lt;br &#x2F;&gt;
Like a hunter’s dog, the clock will be your best ally.&lt;br &#x2F;&gt;
It will guard you, keep your impulses in check, and protect what’s important to you.&lt;&#x2F;p&gt;
&lt;p&gt;Schedule everything to ensure balance of your time and effort.&lt;br &#x2F;&gt;
Scheduling prevents procrastination, distraction, and obsession.&lt;br &#x2F;&gt;
A schedule makes you act according to the goals of your highest self, not your passing mood.&lt;&#x2F;p&gt;
&lt;p&gt;Schedule quality time with dear friends.&lt;br &#x2F;&gt;
Schedule preventative health checkups. ”&lt;br &#x2F;&gt;
Schedule focused time to learn.&lt;br &#x2F;&gt;
Schedule each aspect of your life, ignoring none.&lt;&#x2F;p&gt;
&lt;p&gt;The balanced schedule protects you from hurting yourself, from getting overwhelmed and ignoring important needs.&lt;br &#x2F;&gt;
You won’t over-work, over-play, or over-indulge.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>我的音乐播放器可能跟你的不太一样</title>
            <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-music-player/</link>
            <guid>https://limboy.me/posts/my-music-player/</guid>
            <description>&lt;p&gt;听音乐是很正常的需求，市面上也有很多解决此类诉求的工具，比如 Apple Music 或者 Spotify，我之前用的比较多的是 Spotify，后来由于付款方式（不习惯将自己的账号密码让淘宝上的商家操作）不便，就切换到了 Apple Music，但实在用得不舒服（尤其是「喜欢的歌」这么简单的一个诉求，都要通过极其复杂的方式（在 Mac 端的 Music 中新建 Smart List，filter 设为 loved is true，这还不够，还要将歌曲加入到 Library 才行）才能实现），每次一进首页都要推荐给我各种新歌&#x2F;可能喜欢的歌，可是大部分场景我只是想听特定的歌，就需要各种操作找到入口。&lt;&#x2F;p&gt;
&lt;p&gt;为什么音乐播放器会变成现在这样？在 iPod 时代，我们消费音乐的习惯是将买&#x2F;下载下来的音乐放到 iPod 里，然后听就行了。比如 C 罗现在还在用 iPod Shuffle 听歌&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125544155-4519700d-50b9-4953-ac47-f1f2557ec9e4.jpeg&quot; alt=&quot;5e13a5ac855cc278f2770de6 jpeg!720&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;或者用 Winamp&#x2F;千千静听 将从各个地方捣鼓过来的音乐细心地管理起来，修改它的 MetaData，按专辑&#x2F;歌手分类，那个时代的音乐好像多了一点仪式感。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125544179-b8c8213c-d9f2-4673-9bbe-f5eec0859c4d.jpg&quot; alt=&quot;2021020219415270&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但流媒体出来之后，一切都变了，它让我们变得更懒，不用再去到处下载，不用再去编辑 id3 tag，在一个 App 里全部搞定。确实方便了，但我们也不再「拥有」一首歌，无论是实体还是数字形式的，我们拥有的只是一段时间的使用权。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，我更在意的是其中的商业模式，为了能让用户更高频更长久地使用 App，会结合很多推荐算法来猜你喜欢（有时确实还挺准的，当然我是指 Spotify），但这会带来两个问题：1. 歌曲的「厚重感」下降了。2. 主体变了，听歌的我好像在被算法投喂。以前的音乐就像书一样，可以买回来放在书架上，分门别类地整理好，想看的时候挑一本就行。现在书还是那本书，但是要坐交通工具（网络）去某个地方（App）看，会有各种不同的新书&#x2F;可能喜欢的书来吸引我。如果同一首歌听了超过 5 遍，感觉都对不起算法。现在一打开流媒体播放器，就有种 overwhelmed 的感觉，就像是算法在指导我，你应该听哪些歌。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，音乐有很强的「场景唤醒」能力。如果某一段时间经常在听一类歌，当几年后（甚至更久），再听到这些歌时，当时的场景，周围的人，发生的事都会浮现出来，这感觉很好。流媒体出来之后，这个能力也被大大削弱了，每次打开流媒体 App，首屏的内容都是新的（至少是新旧混杂的），即使我们再想听某几首歌，也很容易钻到其他歌曲里，这样音乐就凿不出时间的坑。&lt;&#x2F;p&gt;
&lt;p&gt;流媒体背后的逻辑其实是现在很多 App 的共性，通过「直达人心」的算法来攫取你的注意力，用便捷的操作来形成 hook，从而达到「停不下来」的效果。这类工具我想称为「热工具」，与之相对的是「冷工具」，就像冷兵器一样，容易操作，可控，不 Magic，能否耍得 6，完全取决于操作者。我喜欢冷工具，就像 Winamp 或 千千静听那样。&lt;&#x2F;p&gt;
&lt;p&gt;于是我就开始寻找合适的播放媒介，前一阵子买过 iPod Shuffle，但后来怎么也找不到了（这可能就是做得太 mini 的一个弊端吧），想想还是从 App 入手吧，需要跨平台，最好能同步，同时属于「冷工具」，交互和 UI 尽量简单些，找了一些 MP3 播放器都不太满意，最后的解决方案是：Telegram。&lt;&#x2F;p&gt;
&lt;p&gt;Telegram 支持上传歌曲，如果同时上传多首歌曲，就可以形成 Playlist（只要上传时选择「Group」就行）。比如我最近特别想听 Bob Dylan 的 Tempest，就可以以 Playlist 形式出现&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125545341-a58bc3af-392b-4aa0-b784-c770faa88507.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;后台播放也没问题，同步的话，自然不在话下。有一个小问题是，默认点击一首歌后，当前 Chat 里的所有歌都会加到 Queue 里，无法只播放某个 Playlist，解决办法也很简单（也是官方推荐的做法），新建一个 Private Channel，然后把 Playlist forward 过去就行了。&lt;&#x2F;p&gt;
&lt;p&gt;最后就是歌曲的来源，我会优先考虑从 Youtube 下载，如果没有，再看有没有方便的渠道可以购买，还是没有的话，fallback 到其他下载渠道。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>[译] Paul Graham: Life is Short</title>
            <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/life-is-short/</link>
            <guid>https://limboy.me/posts/life-is-short/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Paul Graham 5 年前的&lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;vb.html&quot;&gt;文章&lt;&#x2F;a&gt;，表述了他对「生命短暂」的一些感受，发现还没有比较好的译文，就翻译了下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;众所周知，生命是短暂的。当我还是个孩子的时候，我曾经怀疑过这个问题。生命是真的短暂，还是我们只是在抱怨生命的有限？如果我们活了 10 倍的时间，我们是否也会觉得生命很短？&lt;&#x2F;p&gt;
&lt;p&gt;似乎无法回答这个问题，就没再去想它。等我有了孩子后，再来看这个问题，我想我有答案了：生命确实是短暂的。&lt;&#x2F;p&gt;
&lt;p&gt;有了孩子后，我知道了如何将一个连续的量，即时间，转换成离散的量。你只有 52 个周末和你两岁的孩子在一起。如果有魔法的圣诞节从 3 岁持续到 10 岁，你只能看着你的孩子体验 8 次。8 次并不是很多的东西。好比你握了 8 颗花生，或者一个书架上有 8 本书可供选择，无论你的寿命有多长，数量肯定会很有限。&lt;&#x2F;p&gt;
&lt;p&gt;好吧，那么生命实际上是短暂的。知道这个又会怎样呢？&lt;&#x2F;p&gt;
&lt;p&gt;对我来说有。这意味着「人生苦短，莫把时间耗费在了 x 上」这样的论点有很大的力量，而不仅仅是一个比喻。如果可以的话，应该试着消除这些 x。&lt;&#x2F;p&gt;
&lt;p&gt;如果你问自己，你的时间花在了哪些不必要（bullshit）的事情上，你可能已经知道答案了。可有可无的会议，无意义的争端，官僚主义，装腔作势，处理别人的错误，交通堵塞，令人上瘾但没有回报的消遣。&lt;&#x2F;p&gt;
&lt;p&gt;它们有两种方式融入到你的生活：要么是强迫你，要么是欺骗你。在某种程度上，你必须忍受环境强加给你的 bullshit，因为你需要挣钱。事实上，供求法则解释了这一点：某种工作越有回报，人们就越会去做。不过，强迫你做的 bullshit 可能比你想象的要少。但也有很多人选择放弃这种「磨练」，搬到传统意义上机会较少，但更贴近生活的地方。这可能会变得越来越普遍。&lt;&#x2F;p&gt;
&lt;p&gt;你可以在不搬家的情况下，一定程度上做到这一点。你必须花在 bullshit 上的时间因雇主而不同。虽然大多数大型组织（包括许多小型组织）都无法幸免，但如果你有意识地把避免 bullshit 放在首位，而不是其他因素（如金钱和声望），有可能会找到那些能减少浪费你时间的雇主。&lt;&#x2F;p&gt;
&lt;p&gt;如果你是一个自由职业者或经营一家小公司，你可以在客户层面上做到这一点。如果你放弃或避开那些「有毒」的客户，就可以减少 bullshit 的事情。&lt;&#x2F;p&gt;
&lt;p&gt;虽然有些 bullshit 不可避免地被强加在你身上，但那些通过欺骗你而潜入你生活的 bullshit 就是自己的原因了。自己选择的 bullshit 可能比被迫的 bullshit 更难消除。引诱你浪费时间的事情非常善于欺骗你。我们都熟悉的一个例子是在网上争论。当有人反驳你时，会感觉是在攻击你。当被攻击时，你的本能是为自己辩护。但是像很多本能一样，这个本能并不是为我们当今生活的世界设计的。大多数时候最好不要为自己辩护（避免陷进去）。不然你的生命就会被这些人剥夺。&lt;&#x2F;p&gt;
&lt;p&gt;网上争论只是偶然让人上瘾。还有比这更危险的事情。正如我以前写过的，技术进步的一个副产品是，我们喜欢的东西往往变得更容易上瘾。这意味着我们需要越来越有意识地努力避免上瘾--抽离出另一个自己，问「我想这样度过我的时间吗？」&lt;&#x2F;p&gt;
&lt;p&gt;除了避免 bullshit 之外，人们应该积极寻找重要的事情。但不同事情对不同的人重要程度都不一样，大多数人必须了解什么对他们是重要的。少数人很幸运，很早就意识到他们喜欢数学、照顾动物或写作，然后想办法花大量的时间去做。但是大多数人的生活开始时是由重要的事情和不重要的事情组成的，然后逐渐学会区分它们。&lt;&#x2F;p&gt;
&lt;p&gt;对年轻人来说，这种困惑大部分是由他们所处的环境引起的。在初中和高中，其他孩子对你的看法似乎是世界上最重要的事情。但是，当你问成年人他们在那个年龄段犯了什么错误时，几乎所有人都说他们太在乎其他孩子对自己的看法。&lt;&#x2F;p&gt;
&lt;p&gt;区分重要事物的一个启发式方法是问自己：你将来是否会关心它。假装重要的东西通常有一个看起来很重要的点。这就是它欺骗你的方式。曲线下的面积很小，但其形状像针一样刺入你的意识。&lt;&#x2F;p&gt;
&lt;p&gt;重要的事情不一定是那些人们称之为「重要 」的事情。与朋友喝咖啡很重要。在以后的你看来，不会觉得那是在浪费时间。&lt;&#x2F;p&gt;
&lt;p&gt;有小孩子的一个好处是，他们让你花时间在重要的事情上：他们。当你盯着手机时，他们会抓住你的袖子，说「你能和我一起玩吗？」 这有可能是最不 bullshit 的选择。&lt;&#x2F;p&gt;
&lt;p&gt;如果生命是短暂的，我们应该预期到它的短暂会让我们大吃一惊。你认为事情是理所当然的，然后它们就消失了。你认为你可以永远写那本书，或爬那座山，或其他什么，然后你意识到时机已经错过了。最不可挽回的时机是在他人死亡的时候。他们的生命也很短暂。我母亲去世后，我希望我有更多的时间陪她。我活得好像她会一直在那里一样。她以她典型的安静方式加强了这种错觉。但那是幻觉。 我想很多人都会犯和我一样的错误。&lt;&#x2F;p&gt;
&lt;p&gt;避免被某些事情吓到的方法通常是有意识地意识到它。在生活非常不稳定的时候，过去的人们对死亡的认识达到了现在看起来有点病态的程度。我不知道为什么，但不断提醒自己有一个死神在每个人的肩膀上徘徊，似乎不是正确的答案。也许一个更好的解决方案是反过来看。培养一种对你最想做的事情不耐烦的态度。在攀登那座山或写那本书或看望你的母亲之前不要等待。你不需要不断地提醒自己为什么你不应该等待。只是不要等待。&lt;&#x2F;p&gt;
&lt;p&gt;我还能想到当一个人没有多少东西的时候会做的两件事：试图获得更多的东西，以及品味自己拥有的东西。这两件事在这里都有意义。&lt;&#x2F;p&gt;
&lt;p&gt;你如何生活会影响你的寿命。大多数人可以做得更好。比如我。&lt;&#x2F;p&gt;
&lt;p&gt;但是，通过更密切地关注你所拥有的时间，可能会有更好的效果。让日子匆匆过去是很容易的。富有想象力的人非常喜欢的 「flow」状态的另一面是无法在每天的工作和琐事中暂停下来品味生活。我读过的最引人注目的东西之一不是在书中，而是书的标题：詹姆斯-萨尔特的《燃烧的日子》（Burning the Days）。&lt;&#x2F;p&gt;
&lt;p&gt;在一定程度上减缓时间是可能的。这方面我也越做越好了（在孩子们的帮助下）。当你有小孩子的时候，有很多时刻是如此完美，让你无法不注意到。&lt;&#x2F;p&gt;
&lt;p&gt;从过去的经历中习得些什么确实有帮助。我对我母亲感到悲伤的原因不仅仅是我想念她，而是我想到了所有我们可以做但没有做的事情。我的大儿子很快就 7 岁了。虽然我怀念 3 岁的他，但至少我对过去的事情没有任何遗憾。我们拥有一个父亲和一个 3 岁孩子所拥有的最美好的时光。&lt;&#x2F;p&gt;
&lt;p&gt;尽可能减少 bullshit 的事情，别老是等着去做重要的事情，品味你所拥有的时间。这就是短暂的生命旅程中该做的事情。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>推荐一部真人秀：双层公寓（都会男女）</title>
            <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/terrace-house/</link>
            <guid>https://limboy.me/posts/terrace-house/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125239798-c560a700-e31b-11eb-9e5e-2a2de0c358ca.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 09 46&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;豆瓣 8.3，imdb 8.2，不过我入坑时并没有参考这些，主要是它出现在了我的 Netflix 推荐，就想看看真人秀到底能秀成怎样，手指就按了下去。节目的设定有点意思：三男三女让他们在同一个家中居住，从中观察他们在一起生活会发生怎样的故事。每个人的背景，身份和工作都不一样。除了在家中表现出的场景，在户外和工作里，镜头也跟踪拍摄。号称没有剧本，在同一个屋檐下的生活怎么发展，全凭他们演绎。&lt;&#x2F;p&gt;
&lt;p&gt;一部分是出于好奇，还有一部分是画面美：电视剧的质感，养眼的参与者，别墅的设计，东京和美食。对了，还有刺激的场外主持人解说。&lt;&#x2F;p&gt;
&lt;p&gt;以下是我觉得剧中吸引我的点：&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-chu&quot;&gt;相处&lt;&#x2F;h2&gt;
&lt;p&gt;来参加这个节目的，多半想收获一段可以持续的恋情（有一个人除外，这个人我们后面单独说），但最吸引我的不是他们出去玩或者告白，而是成员之间主动沟通和包容的心态（经常听到，但很少见到实战），当出现多对一或室友间出现矛盾时，总会有人主动去沟通，去表明自己的态度，把事情说清楚，如果解决不了就通过「家庭会议」的方式上升，最后基本都能把矛盾解开，然后 Move On。当有人做了很 Shit 的事情时，也不会被排挤出去，大家还是会给机会，去接纳，去看到对方的改变。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dian-ping&quot;&gt;点评&lt;&#x2F;h2&gt;
&lt;p&gt;这也是本剧的一大亮点，就像银魂如果少了吐槽部分，就只剩银了。除了剧中人物，场外也有主持人队伍会进行点评，他们会用犀利的语言，刁钻的角度，生动的演绎来剖析剧中发生的事情，当脱口秀来听也不错。&lt;&#x2F;p&gt;
&lt;p&gt;比如速人和理子的地下恋情（做一套，演一套）曝光后，被开会讨论，但整个过程中速人都没有站出来，只有理子一个人在扛，跟理子的聊天也是进行到一半自己先走了。由希子当时表示，想把他打一顿，再用麻袋装起来拖走。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;user-images.githubusercontent.com&amp;#x2F;35974&amp;#x2F;125240176-56d01900-e31c-11eb-9a28-c7abb2c71af9.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h2 id=&quot;mei-shi&quot;&gt;美食&lt;&#x2F;h2&gt;
&lt;p&gt;剧中有不少聚餐&#x2F;Party 的场景，自然也会有美食，正好了解下平常他们都会吃怎样的食物，简单的话，也可以 Copy 下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240231-6c454300-e31c-11eb-8c07-74229a43724b.jpg&quot; alt=&quot;image-7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240271-78c99b80-e31c-11eb-8fa8-f80f91005e4f.jpg&quot; alt=&quot;image-34&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240282-7ebf7c80-e31c-11eb-8bb3-48fdf3c6e631.jpg&quot; alt=&quot;image-41&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240305-8717b780-e31c-11eb-94b5-1dbe7da21ea5.jpg&quot; alt=&quot;image-63&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240325-8ed75c00-e31c-11eb-92a8-c081c5d5142d.jpg&quot; alt=&quot;image-75&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-zhai&quot;&gt;住宅&lt;&#x2F;h2&gt;
&lt;p&gt;节目组租下了一个带泳池的别墅，同时提供一辆车。别墅的设计比较简洁，有很大的客厅和开放式厨房，卧室的设计像回到了大学时代的学生宿舍，为沟通提供了很便利的条件。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240387-a1ea2c00-e31c-11eb-8e8c-d52a8001fdf1.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 10 35&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240396-a4e51c80-e31c-11eb-9524-2fa483b16031.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 11 04&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240405-a7e00d00-e31c-11eb-9308-bb3a96bcf914.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 12 33&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240414-ab739400-e31c-11eb-8c81-94ede2fde236.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 12 48&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240428-af9fb180-e31c-11eb-87ca-8f7658931d93.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 14 06&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240442-b3333880-e31c-11eb-8094-01f5cadc2186.jpg&quot; alt=&quot;Screen Shot 2021-07-12 at 00 14 57&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jing-dian&quot;&gt;景点&lt;&#x2F;h2&gt;
&lt;p&gt;成员们出去玩或者聚餐，拍摄组也会一直跟随，正好可以了解下东京附近的一些景点&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240519-cfcf7080-e31c-11eb-9c84-09107845547d.jpg&quot; alt=&quot;image-17&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240531-d362f780-e31c-11eb-838b-77d4cf05ed48.jpg&quot; alt=&quot;image-19&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240786-28067280-e31d-11eb-8e6f-04b6e0c1ac46.jpg&quot; alt=&quot;image-28&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240796-2c329000-e31d-11eb-9f7e-3a53fc779e7b.jpg&quot; alt=&quot;image-32&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240813-30f74400-e31d-11eb-927d-9d6f78bedabc.jpg&quot; alt=&quot;image-37&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240819-33f23480-e31d-11eb-883f-61f2a826842f.jpg&quot; alt=&quot;image-38&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240841-3a80ac00-e31d-11eb-8c63-b6aaf72b8178.jpg&quot; alt=&quot;image-45&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ban-tian-you-ren&quot;&gt;半田悠人&lt;&#x2F;h2&gt;
&lt;p&gt;这个就是前面提到的那个不是来谈恋爱的人，他是学建筑设计的，临近毕业，把参加节目当作一段冒险，同时吸收灵感。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240936-5c7a2e80-e31d-11eb-935d-2c095a177591.jpg&quot; alt=&quot;image-89&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125240990-73b91c00-e31d-11eb-88c9-c9cbf8c952f8.jpg&quot; alt=&quot;image-123&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;他吸引我的点是什么呢？跟安达雄基（踢踏舞）一样，他也有明确的梦想，但为什么给人的感觉会差这么多。我想了下大概有这么几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;关心和帮助朋友&lt;&#x2F;li&gt;
&lt;li&gt;谦和的姿态&lt;&#x2F;li&gt;
&lt;li&gt;真诚的心态&lt;&#x2F;li&gt;
&lt;li&gt;敏锐的洞察力&lt;&#x2F;li&gt;
&lt;li&gt;达成目标的决心&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;用其他成员的话来说，半田是团队里的平衡点，将大家团结在一起。&lt;&#x2F;p&gt;
&lt;p&gt;当半田要离开时，流下眼泪的，不只是在这里和他一起生活，受过他无数关照的室友，还有主持人由希子。她在 Terrace House 主持之中扮演着一个见尽世面，坚强而不失风趣，偶尔有点儿糟糕的成熟女性（同时也是玲奈的对照，少女与熟女）。「我发过誓不在电视上哭，但眼泪还是不知不觉流了下来」。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125241050-89c6dc80-e31d-11eb-8294-47e0c6ecc625.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jing-tou&quot;&gt;镜头&lt;&#x2F;h2&gt;
&lt;p&gt;跟国内用一些夸张的音效和文字旁白来烘托综艺感不同，这部真人秀就像在拍电视剧一样，内心世界主要通过镜头语言来完成，比如下面这段夏美聊到家居服时，美咲觉得很尴尬，此时镜头很敏锐地捕捉到了美咲的表情。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;user-images.githubusercontent.com&amp;#x2F;35974&amp;#x2F;125241079-95b29e80-e31d-11eb-8313-142cae739187.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h2 id=&quot;yin-le&quot;&gt;音乐&lt;&#x2F;h2&gt;
&lt;p&gt;每一集至少有 5 首背景音乐，一共 46 集，也就是有 200 多首不同的音乐，都很应景，没有跳出感，说明制作团队确实花了很多心思（有一些歌曲还很难找）。比如光要走的时候，美咲和光在泳池边的对话，背景声比较轻，找不到关键字作为线索。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 片头曲 Slow Down 挺好听的，很有夏日的感觉。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;user-images.githubusercontent.com&amp;#x2F;35974&amp;#x2F;125242016-c941f880-e31e-11eb-9066-50c513c54ec6.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h2 id=&quot;zui-hou&quot;&gt;最后&lt;&#x2F;h2&gt;
&lt;p&gt;这部剧的基调还是挺放松的，Netflix 的制作也够精良，B 站上可以收看完整的剧集（两季，46 集），剧中出现的地点和音乐可以在这里浏览（音乐不全）：&lt;a href=&quot;http:&#x2F;&#x2F;www.terrace-house.jp&#x2F;inthecity&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.terrace-house.jp&#x2F;inthecity&#x2F;&lt;&#x2F;a&gt; 。剧荒时，可以考虑下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>近日随想</title>
            <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/random-thoughts/</link>
            <guid>https://limboy.me/posts/random-thoughts/</guid>
            <description>&lt;h3 id=&quot;can-yu-gan&quot;&gt;参与感&lt;&#x2F;h3&gt;
&lt;p&gt;「参与感」能很大程度上增强体验，获得额外的收获，而这是可以自主完成的。比如看史书时，想想如果那个角色是自己，会怎么做？看电视剧时，如果我是编剧，我会让这两个人怎么发展？看真人秀时想我能从中看到自己的影子么？我会处理得更好么？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shuang-ceng-gong-yu-du-hui-nan-nu&quot;&gt;双层公寓：都会男女&lt;&#x2F;h3&gt;
&lt;p&gt;打开 Netflix 看看有什么可以填充闲暇时光的，偶然看到了这部恋爱真人秀，觉得挺新奇就看了下，结果居然停不下来了。故事的背景是六个人（三男三女）在一间别墅（带泳池）里度过 18 周（不是每天都在里面，不打乱正常的工作&#x2F;学习节奏，但会住在这里），然后还有一辆车。&lt;&#x2F;p&gt;
&lt;p&gt;「双层公寓」之前是富士电台的真人秀节目，2015 年开始，Netflix 与富士电视台联合制作，并在 Netflix 首播。「都会男女」整体看下来像是一部日剧：精良的拍摄，「演员」细腻的情感和东京的实景。&lt;&#x2F;p&gt;
&lt;p&gt;让我看完第一集的是养眼的小哥哥和小姐姐，但吸引我看下去的却是其他部分：无剧本，日本文化中的内敛和细腻，搞笑的场外八卦，从陌生到熟悉过程中真实性格的逐渐呈现，成员之间的化学反应和冲突等等，会想知道之后的剧情，甚至能从中学到一些人与人之间的相处之道。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-chu-bu-zai-de-shou-ji-hui-dai-lai-shi-yao-fu-zuo-yong&quot;&gt;无处不在的手机会带来什么副作用&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The most dangerous thing about carrying a cell phone everywhere is that you&#x27;re never bored. Boredom, like pain, is a signal.&lt;&#x2F;p&gt;
&lt;p&gt;-- Paul Graham&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;think-small&quot;&gt;Think Small&lt;&#x2F;h3&gt;
&lt;p&gt;不要老想着你能为世界带来什么，世界会因你而产生怎样的变化。踏踏实实地找到自己的强项，找到&#x2F;创造一个能发挥该强项的场景，That&#x27;s it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rick-and-morty-s05e02&quot;&gt;Rick and Morty S05E02&lt;&#x2F;h3&gt;
&lt;p&gt;最不明白的是，为什么 Decoy 知道自己[可能]是 Decoy 后会想着消灭其他的 Decoy？消灭其他 Decoy 后，自己不是更容易被敌人消灭，进而违背了当初创建 Decoy 的初衷？（后来想了下，应该是担心事情失控）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-wan-de-qian-shui-ting&quot;&gt;夜晚的潜水艇&lt;&#x2F;h3&gt;
&lt;p&gt;近日读陈春成的「夜晚的潜水艇」，惊叹作者居然是 90 后。吸引我读下去的是第一篇「夜晚的潜水艇」，最 wow 的是最后一篇「音乐家」。精美的文字，无边的想象力，在现实与虚幻之间穿梭，一点点去解开谜团。里面有匠人精神，有安放，有丢失最重要的东西，还有点不许联想。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;na-xie-chen-zhong-de-hua-ti-gai-zhao-shui-liao-ni&quot;&gt;那些「沉重」的话题该找谁聊呢？&lt;&#x2F;h3&gt;
&lt;p&gt;可以找朋友聊，可是他们都在为了生活而马不停蹄，或者回了一个表情包；可以在网上聊，可是谁会在网上聊这些呢？最后这些问题也识趣地消失了，就像不曾有过一样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-yu-he-xin-nian&quot;&gt;信誉和信念&lt;&#x2F;h3&gt;
&lt;p&gt;最重要的好像就只有这两个东西，信誉让你可以有更多的机会，信念可以帮你挺过最艰难的时光。就像八卦和故事，前者让我们知道谁干活靠谱，谁吊儿郎当，后者让我们知道为什么要干这些事。&lt;&#x2F;p&gt;
&lt;p&gt;至于选择，那只是一个根据信念推导出来的一个 Derived Result，不本质。比如我在早期持有过一定数量的特斯拉股票，但在看到增长不符合自己的预期后就很快出了。我们经常会将某个人的成功归因于 ta 的选择，却看不到这个选择之后的坚持。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stp-shi-yi-ge-hen-hao-de-mo-xing&quot;&gt;STP 是一个很好的模型&lt;&#x2F;h3&gt;
&lt;p&gt;STP 分别是：市场细分（Segmentation） 目标市场选择（Targeting）和市场定位（Positioning）&lt;&#x2F;p&gt;
&lt;p&gt;简单来说，就是选取一个不同的坐标系，然后看这个坐标系的市场组成是怎样的，你在这个坐标系下你的竞争力是什么。&lt;&#x2F;p&gt;
&lt;p&gt;比如常见的笛卡尔坐标系，一个点是通过距离中心点的距离来描述的，（5,10）表示 x 方向距离为 5，y 方向距离为 10。这样确实可以描述一个平面上所有的点。但也可以有另外的描述方式，比如极坐标系，可以用「距离中点的距离和角度」来表示。&lt;&#x2F;p&gt;
&lt;p&gt;第一步 Segmentation，根据不同要素将客户群体进行细分，比如星巴克的 Segmentation 可能是收入、闲暇时间、聊天诉求、步行距离等，这样就有了一个一个的小块：比如收入低、闲暇时间多、聊天诉求强，步行距离要求不高的人（如小镇青年）。&lt;&#x2F;p&gt;
&lt;p&gt;第二步 Targeting，按照上面的画出来的一个个小块，看看哪些是自己的目标用户。对于星巴克来说收入中高、聊天诉求强、步行距离要求高的那一批人就可以是自己的目标用户。然后就大概知道了这部分人群的市场空间大概有多大。&lt;&#x2F;p&gt;
&lt;p&gt;第三步 Positioning，有了 Targeting 之后，不一定一开始就直接瞄准这些人，因为可能这个市场还是有点大（如果较小的话，增长空间也小了），这时可以找一个更小的切入点，给自己一个合适的定位，先把这一部分人服务好，之后再逐步扩大。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zui-gao-xue-yi-zhi-yong-fa&quot;&gt;最高学以致用法&lt;&#x2F;h3&gt;
&lt;p&gt;这是日本的一位精神科医生出的一本书，他本人也是该方法的忠实践行者（在 Youtube 已经输出了 3000 多个视频）。核心理念是：无输出，不输入（比较极端，但记起来比较方便）。只是做大量输入，不重视对所学知识的反复提取、记忆背诵、检索分类及实践结合，那么脑神经，就是「走到哪儿路径消失到哪儿」。细想，是不是这样呢？这也是为什么推崇每日写作，不管写作质量如何，它能帮你反刍获取到的信息，让它的印痕更深刻些。书中提到了很多高效输出的方式（如通过 facts 和 thoughts 的方式写读后感，写得越多，大脑越活；多用图来表示，记忆更深刻）可以尝试。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-shi-jian&quot;&gt;暗时间&lt;&#x2F;h3&gt;
&lt;p&gt;暗时间做什么，差不多能预见到一个人几年之后的状态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-guo-nei-shao-you-you-xiu-de-chan-pin&quot;&gt;为什么国内少有优秀的产品&lt;&#x2F;h3&gt;
&lt;p&gt;整体来说，国内优秀作品的数量会比国外的少不少（所以对于那些愿意沉下心来打磨产品的团队，我会尤其心生敬意）。为什么呢？我觉得不是技能上的缺失，而是环境、用户群和心态的多重作用。大环境上商业化氛围过重，大家都在往钱的方向靠，一些蠢蠢欲动的团队也在伺机 Copy 出现苗头的产品；人群方面，对产品设计有较高 Bar 的人群数量还不是很多，「能用就行」的不在少数；创作者的心态方面，更希望借助各种商业模式够短期套现，而不是通过优质产品培养忠诚的用户群。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>从「创新者」看计算机发展史</title>
            <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/computer-history/</link>
            <guid>https://limboy.me/posts/computer-history/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247497-86309a00-db54-11eb-832e-b1dc310ebcae.jpg&quot; alt=&quot;computer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;计算机不是某一个人创造出来的，这其中有很多杰出的人物的参与，他们当中既有匠心独具的创新者，也有绝顶聪明的天才。本文主要根据「创新者」一书中提到的人物和发展轨迹，结合其他相关资料和自己的理解梳理了大概的脉络。（对计算机历史感兴趣的推荐看原书，会详细很多，也有不少精彩的故事）&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：巴贝奇和埃达在 19 世纪 40 年代就有了对计算机的构想（巴贝奇分析机），埃达也因为对巴贝奇分析机的注解，成为计算机历史上的一位重要人物。但因为跟现代计算机距离较远，就不展开了，感兴趣的可以看下「创新者」里的相关章节。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tu-ling-lun-ke-ji-suan-shu-ji-qi-zai-pan-ding-wen-ti-zhong-de-ying-yong&quot;&gt;图灵：论可计算数及其在判定问题中的应用&lt;&#x2F;h2&gt;
&lt;p&gt;1935 年，图灵对数理逻辑发生兴趣。1936 年发表「论可计算数及其在判定问题中的应用」一文。文章的主题是回答希尔伯特 (David Hilbert)在 1928 年提出的 3 个数学难题之一：系统是可判定的吗？有没有可以判定特定命题是否可证明的方法，会不会出现某些陈述存在不可判定状态的可能性？。图灵机器就是为此提出的一个概念。论文发表后引起美国科学家的重视，应邀到美国普林斯顿大学，1938 取得博士学位。&lt;&#x2F;p&gt;
&lt;p&gt;图灵机器是图灵在他的论文中提出的一个抽象的计算机模型，由下面几部分构成&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;n 个符号 S={s1,...,sn},其中有空格符号 b∈S ; m 个状态 Q={q1,...,qm}, 其中有初始状态 q1∈ Q&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一条两个方向或一个方向是潜在无穷长的由格子组成的带子。每个格子可以存放一个符号。带子边附有一个读写头，读写头处于某个状态并指向某个格子，可以读写所指格子上的符号，并在带子上左右移动。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247590-9ba5c400-db54-11eb-8d97-9d488827e324.png&quot; alt=&quot;5CDDDC9D-7BA4-49CD-B092-9726048E5E1A&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图灵的伟大贡献不仅是提出了图灵机器的概念，更重要的是还提出了通用图灵机 (Universal Turing Machine ) 的概念。 现代电子计算机的计算模型其实就是这样一种通用图灵机，它能接受一段描述其他图灵机的程序，并运行程序实现该程序所描述的算法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-nong-ji-dian-qi-kai-guan-dian-lu-de-fu-hao-fen-xi&quot;&gt;香农：继电器开关电路的符号分析&lt;&#x2F;h2&gt;
&lt;p&gt;1938 年香农在 MIT 获得电气工程硕士学位，硕士论文题目是「A Symbolic Analysis of Relay and Switching Circuits」（继电器与开关电路的符号分析），首次将电路和数学联系起来。他已经注意到电话交换电路与布尔代数之间的类似性，即把布尔代数的“真”与“假”和电路系统的“开”与“关”对应起来，并用 1 和 0 表示。于是他用布尔代数分析并优化开关电路，这就奠定了数字电路的理论基础。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：图灵还曾经在贝尔实验室与香农一起讨论过脑科学相关的话题，他们发现各自在 1937 年发表的论文之间存在一个共同点：它们都证明了采用简单二进制指令操作的机器不仅可以用于解决数学问题，同时也适用于所有的逻辑问题。由于逻辑是人脑思维的基础，因此机器在理论上可以模仿人类的智能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;huo-hua-de-ai-ken-ma-ke-1-hao&quot;&gt;霍华德·艾肯：马克 1 号&lt;&#x2F;h2&gt;
&lt;p&gt;在 1937 年，一位叫作霍华德·艾肯（Howard Aiken）的哈佛博士研究生正在准备自己的物理学论文。他发现论文中复杂冗长的计算很难使用加法机来完成，于是他游说学校建造一台更加先进的计算机。&lt;&#x2F;p&gt;
&lt;p&gt;哈佛的马克一号借鉴了巴贝奇的很多想法。这是一台数字化的机器，不过它没有采用二进制，它的齿轮表示的是十进制数字。它有一根 50 英尺长的转轴，上面装有 72 个计数器，每个计数器可以储存长达 23 位的数字。完整的机器重量为 5 吨，长 80 英尺，宽 50 英尺。机器的转轴和其他活动部件是通过电力驱动的，但它的计算速度并不快。这是因为它没有采用电磁继电器，而是使用了机械继电器，这种继电器的每次开关都是由电动马达完成的。它计算一次乘法大概要花六秒钟的时间，相比之下，斯蒂比兹的机器只需一秒钟。不过它确实具备了现代计算机的一个基本功能：它是完全自动化的。程序和数据的输入都通过纸带完成，而且它还可以在没有人为干预的情况下连续运作多日。因此艾肯对马克一号的评价是“巴贝奇的梦想实现了”。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mo-qi-li-ai-ke-te-eniac&quot;&gt;莫奇利&#x2F;埃克特：ENIAC&lt;&#x2F;h2&gt;
&lt;p&gt;莫奇利在华盛顿郊区的切维蔡斯镇长大，从小就受到了在这个地区不断增进的科学氛围的熏陶，富有人格魅力，而且十分擅长（和热衷于）解释事物，后来成为了一名教授。&lt;&#x2F;p&gt;
&lt;p&gt;跟其他需要在工作中进行大量复杂计算的人一样，莫奇利也希望发明一台可以完成这些计算的机器。作为一个善于社交的人，他开始四处了解其他人正在做的事情，并将了解到的想法融会贯通——这是伟大创新者之间的一个共同点。&lt;&#x2F;p&gt;
&lt;p&gt;当他决定要制造一台自己的真空管计算机之后，莫奇利做了一件表现出优秀创新者特点的事情：总结自己在四处考察期间所了解到的全部信息。他的信息收集来源包括斯沃斯摩尔学院、达特茅斯学院、贝尔实验室、美国无线电公司、世界博览会和艾奥瓦州州立大学等各种地方，然后他会把收集到的信息融合成为自己的想法。&lt;&#x2F;p&gt;
&lt;p&gt;他在当年的夏季课程中认识了一位非常适合参与这项工作的搭档：埃克特，一位对精密工程有着完美主义情节的研究生。&lt;&#x2F;p&gt;
&lt;p&gt;战争会促进科学的发展。美国在 1941 年 12 月正式加入“二战”，战争的需要使得美国有充足的动力为莫奇利和埃克特正在研发的机器提供资助。宾夕法尼亚大学和位于阿伯丁试验场的陆军军械部当时得到了一项军方指派的任务——为美国输送到欧洲的火炮武器制作记录发射角设置的说明书。为了实现精确的瞄准，这些火炮的弹道表需要考虑数百项发射条件，包括温度、湿度、风速、高度和火药的种类等。&lt;&#x2F;p&gt;
&lt;p&gt;仅仅针对一种火炮发射的一种炮弹，它的弹道表制作就需要通过微分方程组计算三千条弹道。这项工作通常会使用万尼瓦尔·布什在麻省理工学院发明的微分分析机来完成。这台机器的计算工作需要超过 170 个人的协助，这些被称为“计算员”（computer）的工作人员大多数都是女性。为了求解这些方程，他们需要在桌面加法机上进行繁复的操作。这项工作召集了全国各地的女性数学专业学生来完成。尽管如此，仅仅为了计算一个弹道表就要花费超过一个月的时间。到了 1942 年夏天，这样的计算进度显然已经越来越跟不上战事的需求，导致美军的部分火炮出现了无法使用的情况。&lt;&#x2F;p&gt;
&lt;p&gt;莫奇利在当年 8 月写了一份备忘录，他在其中提出了一个可以帮助军方解决这个难题的方法。这份将会改变计算机发展历史的备忘录的题目是“高速真空管设备的计算应用”。莫奇利在备忘录中为他和埃克特希望建造的机器请求资助：这是一台使用真空管电路的数字电子计算机，它可以求解微分方程和进行其他的数学计算。他表示，“如果这种机器能够采用电子元件，它们的计算速度将会得到大幅提升。” 美国陆军部在 1943 年 4 月 9 日正式决定资助建造这台电子计算机。&lt;&#x2F;p&gt;
&lt;p&gt;这台机器在不久后就被赋予了一个更容易被记住的名字：ENIAC，即电子数字积分计算机（Electronic Numerical Integrator andComputer）。尽管 ENIAC 的主要设计用途是求解微分方程，这是计算火炮弹道的关键所在，但是莫奇利在报告中表示它可以配有一个“编程设备”，这样它就可以用于完成其他的任务，成为一台更为通用的计算机。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 ENIAC 是一台数字化的计算机，但它没有采用二进制系统（只使用 0 和 1 两个数字），而是选择了十进制系统，它采用的计数器是带有十个数字的。ENIAC 在 1945 年 11 月开始全面投入运作。它当时可以在一秒钟之内进行 5 000 次加减法运算，这个运算速度要比之前发明的计算机快 100 倍。它的长度为 100 英尺，高为 8 英尺，占地面积相当于一间普通的三居室公寓。它的重量接近 30 吨，机器内部含有 17 468 个真空管。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;feng-nuo-yi-man-guan-yu-edvac-de-bao-gao-chu-gao&quot;&gt;冯·诺伊曼：关于 EDVAC 的报告初稿&lt;&#x2F;h2&gt;
&lt;p&gt;20 世纪 30 年代后期，身处高等研究院的冯·诺依曼开始将研究兴趣转向利用数学方式建模爆炸的冲击波。凭借这方面的研究经验，他在 1943 年加入了曼哈顿计划。作为曼哈顿计划的成员，他需要经常前往位于新墨西哥州洛斯阿拉莫斯的秘密设施，参与那里的原子弹研发工作。由于当时可用的铀–235 只足够制造一个原子弹，所以洛斯阿拉莫斯的科学家们也在尝试设计一种使用钚–239 的原子弹。冯·诺依曼的主要工作是研制能够将钚核装料压缩至临界质量的炸药透镜。&lt;&#x2F;p&gt;
&lt;p&gt;这种内爆式设计的评估需要求解大量的方程，用于计算爆炸产生的空气或其他物质的压缩流速。于是冯·诺依曼开始前往各地了解高速计算机的发展前景。在当年的夏天和秋天，他多次来回穿梭于哈佛大学、普林斯顿大学、贝尔实验室和阿伯丁之间，他就像是一只蜜蜂一样将自己在各个地方采集到的想法传播给不同的团队。约翰·莫奇利曾经利用自己在四处访问期间收集的想法创造了第一台可行的电子计算机，同样，冯·诺依曼也在不同的地方吸收到设计存储程序的计算机结构所需的资料和概念。&lt;&#x2F;p&gt;
&lt;p&gt;ENIAC 可以在一个小时之内求解一道偏微分方程，而哈佛马克一号则需要花费 80 个小时。这点深深地打动了冯·诺依曼。然而，为不同的任务重新编程 ENIAC 将需要数个小时的时间，冯·诺依曼意识到当需要处理大量各不相同的任务时，这将会是一个严重的缺点。冯·诺依曼后来成为 ENIAC 团队的顾问，他坚持计算机程序应该与数据保存在同一个存储器中的想法，因为这样可以在程序运行的过程中轻易地对其进行调整。&lt;&#x2F;p&gt;
&lt;p&gt;在宾夕法尼亚大学忙碌工作了 10 个月之后，他主动提出将他们的讨论内容以书面形式汇总起来。他在开往洛斯阿拉莫斯的长途列车上开始撰写这份报告。也就是著名的「First Draft of a Report on the EDVAC」，草案不仅详述了 EDVAC 的设计，还为现代计算机的发展指明了道路： 1. 机器内部使用二进制表示数据； 2. 像存储数据一样存储程序； 3. 计算机由运算器、控制器、存储器、输入模块和输出模块 5 部分组成。这份报告是计算机发展史上一个划时代的文献。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 十进制在计算机中表示是很麻烦的，计算机做的都是位运算，那该怎么用电路来模拟这十种状态呢？于是人们用电压来控制数字，每隔 0.5v 就代表一个数字，比方说 0.5v 代表 1,1.0v 代表 2，但由于当时的机能所限，真空电子管的精度堪忧，这就导致得出的结果往往不准确；最后设计者们也没办法了，干脆用十根电子管代替 0-9，这种简单粗暴的方式使让接线变得异常复杂，还造成了严重的硬件浪费，计算机的体积也是相当庞大。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;xiang-nong-xin-xi-lun&quot;&gt;香农：信息论&lt;&#x2F;h2&gt;
&lt;p&gt;是的，还是那个熟悉的香农，1948 年，香农发表论文《通信的数学理论》（A Mathematical Theory of Communication），信息论的伟大之处在于用数学描述信息，让信息变得可测，在信号处理、数据压缩、自然语言等许多领域，起着关键作用。文中他提出了现在熟知的比特（Bit）概念，以及著名的信息熵。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-ke-li-ba-ding-bu-la-dun-jing-ti-guan&quot;&gt;肖克利&#x2F;巴丁&#x2F;布拉顿：晶体管&lt;&#x2F;h2&gt;
&lt;p&gt;计算机的发明并没有立刻引起一场革命。这是因为它们需要依赖使用大体积、高成本、易损坏和高耗能的真空管才能运作，最初的计算机都是一些造价不菲的庞然大物，只有企业、研究性大学和军事设施才能拥有它们。&lt;&#x2F;p&gt;
&lt;p&gt;当时贝尔实验室越来越重视一个研究领域：固体物理学。这是一门研究电子如何在固体材料之中流动的学科，它尤其需要理论家和工程师之间的联合。20 世纪 30 年代，贝尔实验室的工程师们一直在测试包括硅在内的各种材料。硅是地壳中除了氧之外最常见的元素，同时也是沙子的主要成分。在这些测试当中，他们会将不同的材料通电，并尝试控制材料中的电流。与此同时，贝尔实验室的理论家们正在同一栋大楼里面埋头研究量子力学领域的惊人发现。&lt;&#x2F;p&gt;
&lt;p&gt;在量子理论不断发展的同时，贝尔实验室的冶金学家也在研究制作新型材料的方式，他们采用了全新的提纯技术、化学处理方法以及稀有矿物和普通矿物之间的合成配方。为了解决一些常见的问题，比如真空管的灯丝太容易烧坏，或者电话话筒膜片发出的声音太小等，他们尝试合成了一些新型合金，然后通过加热或冷却的方式来提升这些合金的性能。他们就像是厨房里的大厨一样，在不断的试错过程中掀起了一场材料科学的革命，它与量子力学领域正在进行的理论革命齐头并进。&lt;&#x2F;p&gt;
&lt;p&gt;在测试硅和锗的材料样本的过程中，贝尔实验室的化学工程师偶然证实了理论家们提出的大部分猜想。他们发现理论家、工程师和冶金学家之间有着许多可以互相学习的地方，于是贝尔实验室在 1936 年成立了一个固体物理研究小组，这支队伍聚集了一批实用和理论领域的重量级人物。他们会在每周举行一次的午后聚会上分享各自的发现，其间还会进行学院风格的互相质问环节。在正式的聚会过后，他们会继续参与一些持续到深夜的非正式讨论。与仅仅阅读各自的论文相比，亲自会面讨论是一种更有成效的做法：频繁的互动可以将人们的想法跃迁到更高的轨道上，就像是电子一样，偶尔挣脱束缚的想法也会引起一些连锁反应。&lt;&#x2F;p&gt;
&lt;p&gt;肖克利在 1936 年从麻省理工学院毕业，这时贝尔实验室的默文·凯利来到学校面试他，并当场为他提供了一份工作。他还向肖克利指派了一项任务：找出一种可以替代真空管的装置，它需要比真空管更加可靠、稳定和廉价。经过了三年的研究之后，肖克利开始确信自己可以找出这个问题的答案——利用包括硅在内的固体材料取代带有发光灯丝的真空管。&lt;&#x2F;p&gt;
&lt;p&gt;正如莫奇利需要埃克特一样。在贝尔实验室的大楼中有许多符合肖克利要求的人才，其中最突出的一位是来自西部的沃尔特·布拉顿，他是一个充满活力且争强好胜的人。&lt;&#x2F;p&gt;
&lt;p&gt;战争结束后，凯利（贝尔实验室真空管部门的主管）把布拉顿和肖克利分配到一个研究小组工作，这个小组的目标是“将固体物理学领域的理论和实践工作统一起来”。也就是说，他们要继续完成在战争之前遗留下来的任务：利用半导体制作出真空管的替代品。&lt;&#x2F;p&gt;
&lt;p&gt;虽然肖克利是这个小组的首席理论家，但由于他的职责是管理整个小组的工作（他在另外一个楼层办公），所以他们决定邀请另外一位理论家加入这个小组。他们的人选是约翰·巴丁，一位言语温和的量子理论专家。&lt;&#x2F;p&gt;
&lt;p&gt;这项研究在接下来的一年里都没有多大的进展，然而他们却在 1947 年 11 月取得了一系列重大的突破，因此这个月也被称为“奇迹之月”。巴丁完善了“光伏效应”（photovoltaic effect）的理论，光伏效应指的是光照可以使两种互相接触的材料之间产生电压。他推测这个过程或许可以移除部分形成屏障的电子。与巴丁并肩工作的布拉顿设计出了一些用于测试这个想法的实验。&lt;&#x2F;p&gt;
&lt;p&gt;之后肖克利又对晶体管做了改善，使用 PN 结取代金属点触。但由于他的好胜心和独断专行，把小组变成了实现自己想法的工具，无法继续升迁，因此选择离开，去开创自己的事业。后来在企业家阿诺德·贝克曼的帮助下，他在 Palo Alto （也就是后来的硅谷）建立了自己的部门，同时通过自己的威望，招募了一批行业内的杰出人才，包括诺伊斯、摩尔，这两人后来由于无法与肖克利共事，出来后创办了仙童半导体，以及后来的英特尔。从这个角度来说，虽然肖克利由于一些自身的缺陷没有成就更大的事业，但他确实对硅谷的发展起到了至关重要的作用。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 贝尔实验室是一个融合创新的大锅。除了晶体管以外，它在计算机电路、激光技术和蜂窝电话等领域都处于领先地位。但是它却不太善于利用自己的发明来获取利润。作为一家几乎垄断整个电话服务市场的规约公司，它对开发新产品的积极性并不高，而且法律也会限制它利用自己的垄断地位进入其他市场。为了避免公众的批评和反垄断行动的攻击，它向来都会慷慨地向其他公司提供自己的专利授权。它为晶体管设定了相当低的授权费用，任何公司只需向其支付 25 000 美元即可获得生产晶体管的许可，它甚至为这些公司开办了讲述晶体管制造技术的研习班。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;nuo-yi-si-ji-er-bi-ji-cheng-dian-lu&quot;&gt;诺伊斯&#x2F;基尔比：集成电路&lt;&#x2F;h2&gt;
&lt;p&gt;杰克·基尔比（Jack Kilby）也是那种来自中西部农村的男孩，小时候，他在工作间里和父亲一起捣鼓电子元件，组装业余无线电。基尔比的第一份工作是在密尔沃基的电子零件公司中心实验室（Centralab）。这家公司当时在尝试将助听器元件全部集中到一个陶瓷衬底上，这大致可以算是集成电路思想的前身。基尔比意识到，要想站在晶体管发展潮流的前列，就得进一家较大的公司工作。1958 年夏天，在权衡了多份工作邀约之后，他决定加入德州仪器。&lt;&#x2F;p&gt;
&lt;p&gt;德州仪器的政策是，7 月所有人都统一休假两周。因此，当没有累积假期的基尔比来到达拉斯时，半导体实验室里几乎没什么人。这就让他有时间思考这样一个问题：硅除了用来加工晶体管，还有什么其他用途？&lt;&#x2F;p&gt;
&lt;p&gt;基尔比知道，不含任何杂质的硅性质类似一个简单的电阻。他意识到，还有一种方法可以让硅片上形成 PN 结，充当能储存少量电荷的电容。事实上，硅只要经过不同处理，就可以制成任何电子元件。由此，他提出了所谓的“单片概念”：可以把所有元件集成到单个硅片上，而无须把不同元件焊接在一块电路板上。&lt;&#x2F;p&gt;
&lt;p&gt;差不多同一时间，诺伊斯和仙童半导体的同事们就在从另一个方向入手，探索开发集成电路的可能性。他们之所以着手展开这项研究，是因为遇到了一个棘手的问题，也就是公司做的晶体管不好用。有太多晶体管都发生了故障。只要遇到一丁点儿灰尘，甚至只要接触一些气体就会让晶体管无法正常工作。猛烈敲打或碰撞也会让晶体管出故障。&lt;&#x2F;p&gt;
&lt;p&gt;仙童半导体的物理学家、“八叛逆”之一的让·赫尔尼想出了一个新颖的解决方案。他想在硅晶体管表面敷置一层薄薄的氧化硅层，就像千层蛋糕表面的糖衣一样，这样就能对下面的硅起到保护作用。他在笔记中写道：“在晶体管表面为集成电路敷置氧化层，能使结点不致暴露在外，这样晶体管就不会受到污染。”&lt;&#x2F;p&gt;
&lt;p&gt;这种方法被称为“平面工艺”，因为硅的表面有一个氧化层。当时，赫尔尼只是想设计出可靠的晶体管。他们还没有意识到，可以借助这种在氧化层上开小口的平面工艺将许多种晶体管和其他元件蚀刻在单片硅片上。诺伊斯认识到的第一个问题是，有了平面工艺，就不需要那些从每一层晶体管上伸出的细线了，可以在氧化层顶部印上小铜线，以代替这些布线。这将使晶体管生产变得更快、更可靠。从这一点出发，诺伊斯又产生了下一个洞见：既然能用这些印刷铜线连接晶体管的不同区域，那就也能用它们连接同一块硅片上的两个或更多晶体管。运用开口技术的平面工艺能让杂质分散开来，这样就能把多个晶体管安装在同一块硅芯片上，而印刷铜线能将它们连接起来，形成一个电路。&lt;&#x2F;p&gt;
&lt;p&gt;集成电路最初面向的主要市场是军队。1962 年，战略空军司令部（the Strategic Air Command）设计了名为“民兵二号”（Minuteman Ⅱ）的新型陆基导弹，在每一枚导弹中，仅弹载导航系统就需要 2000 枚集成电路。&lt;&#x2F;p&gt;
&lt;p&gt;美国的民用航空项目成为推动集成电路生产的下一个主要动力。1961 年 5 月，美国总统约翰·F·肯尼迪宣布：“我认为美国应该致力于这样一个目标，我们要在 60 年代结束之前把人送上月球，再让他们安全返回地球。”&lt;&#x2F;p&gt;
&lt;p&gt;这种来自政府的海量稳定需求促使集成电路价格迅速下跌。阿波罗导航计算机的首枚原型芯片售价 1000 美元。到芯片投入常规生产时，每枚芯片的价格降到了 20 美元。1962 年，民兵导弹上每一枚集成电路的平均价格为 50 美元，到 1968 年就降到了 2 美元。这样一来，将集成电路用于普通消费设备的市场便应运而生。&lt;&#x2F;p&gt;
&lt;p&gt;之后仙童半导体（诺伊斯和摩尔共同创办，母公司为仙童，主营摄影器材）乃至帕洛阿尔托的半导体部门都已经变得太大、太官僚。诺伊斯渴望甩掉一些无关紧要的职责，回头去做实验室的一线工作。有一天，诺伊斯问摩尔：“我们办一家新公司怎么样？” 然后就有了后来的英特尔。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;te-de-huo-fu-wei-chu-li-qi&quot;&gt;特德·霍夫：微处理器&lt;&#x2F;h2&gt;
&lt;p&gt;霍夫曾是斯坦福一名年轻教师，他成为英特尔的第十二名员工，任务是设计芯片。他意识到，像英特尔这样设计许多种功能各不相同的芯片既浪费又笨拙。当时，常常有公司来要求英特尔做一种用于完成特定任务的芯片。霍夫（还有诺伊斯和其他人）设想了一种替代方案：发明一种能接受指令，即进行编程，从而按要求完成不同任务的通用芯片。换句话说，也就是在一枚芯片上做出通用计算机。这一设想恰好可以拿来解决 1969 年夏季霍夫负责处理的一个问题。&lt;&#x2F;p&gt;
&lt;p&gt;当时有一家名为“Busicom”的日本公司计划做一款强大的新型台式计算器，想让英特尔制作 12 枚专用集成电路（分别处理显示、运算和存储等任务），芯片的相关细节已经拟定。英特尔同意了，价格也敲定了。诺伊斯让霍夫负责管理该项目。很快，他们遇到了一项挑战。霍夫回忆道：“我对这项设计了解得越多，就越担心英特尔的投入会比原计划要大。芯片的数量和复杂程度都远远超出我的预想。”英特尔不可能以协议价格做出这些芯片。&lt;&#x2F;p&gt;
&lt;p&gt;到 1969 年 9 月，霍夫和他的同事斯坦·麦卓尔（Stan Mazor）已经设计出能遵循编程指令的通用逻辑芯片的架构。这种芯片能够完成 Busicom 所要求的 12 枚芯片中的 9 枚所承担的功能。诺伊斯和霍夫向 Busicom 的高管介绍了这一方案，并获得了后者的认可。&lt;&#x2F;p&gt;
&lt;p&gt;到了重新谈价格的时候，霍夫向诺伊斯提出一个至关重要的建议，正是这一建议为通用芯片创造出一个巨大的市场，并维持了英特尔在数字时代的领军地位。比尔·盖茨和微软效仿了这种做法，10 年之后，IBM 也效仿了这一做法。诺伊斯为 Busicom 提供了优惠的价格，但坚持让英特尔保留新型芯片的知识产权，而且英特尔有权将其授权给其他公司，用于计算器生产以外的其他用途。他意识到，能通过编程实现一切逻辑功能的芯片将成为电子设备的标准元件，就像两英寸厚、四英寸宽的木板是房屋建筑业的标准建材一样。这种芯片会取代专用芯片，这就意味着它们可以批量生产，价格也会不断下降。它们还会让电子行业产生一个比较微妙的变化：在电路板上设计元件配置的硬件工程师变得没那么重要了，取而代之的是新生的软件工程师，他们的工作是将一批指令写入系统。&lt;&#x2F;p&gt;
&lt;p&gt;这就是发生在 20 世纪 70 年代的故事。微处理器催生了数百家为个人电脑做硬件和软件的新公司。英特尔不仅开发了尖端芯片，而且创造了一种文化，激励在风险资本支持下成立的初创公司去改变经济。英特尔还让圣克拉拉谷（从旧金山南部经帕洛阿尔托到圣何塞的一片 40 英里的平坦土地）的杏树果园变身为高科技公司云集的硅谷。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dao-ge-la-si-en-ge-er-ba-te-yan-shi-zhi-mu&quot;&gt;道格拉斯·恩格尔巴特：演示之母&lt;&#x2F;h2&gt;
&lt;p&gt;恩格尔巴特的父亲是一位电气工程师，在俄勒冈州波特兰开了家出售和修理收音机的商店。他从海军退役后，在俄勒冈大学获得了工程学位，随后在 NASA 下属尖端技术研究机构——位于硅谷的埃姆斯研究中心任职。为了结识可以作为结婚对象的女性，羞涩木讷的恩格尔巴特加入了帕洛阿尔托社区活动中心的一个中级希腊民间舞蹈班，后来他果然在这里找到了人生伴侣。订婚的那天，恩格尔巴特在开车上班的路上突然产生了一种可怕的、足以改变他生活方向的忧虑感：“等到我开始工作时，我意识到自己已经失去了目标。”&lt;&#x2F;p&gt;
&lt;p&gt;在接下来的两个月里，恩格尔巴特开始努力为自己寻找有价值的生活目标。他说：“我考虑了所有人类可以为之奋斗的事业，想找到一条适合自己的再教育之路。”他意识到，任何改造世界的努力都是很复杂的。他想到那些努力防治疟疾或增加贫困地区粮食产量的人，结果发现，如果这些问题得到解决，又会引发其他一系列复杂问题，比如人口过剩和水土流失。要想成功地完成一个大项目，就必须对行动中所有错综复杂的细节进行评估，权衡各种可能性，共享信息，组织人力，等等。他回忆说：“然后有一天我突然领悟到，复杂性正是最根本的东西，我感到豁然开朗。如果能以某种方式让人类更好地处理复杂和紧急的问题，能为此做出重大贡献，那你就能够造福全人类。”[插图]这样一种努力不是单单解决世界上的某一个问题；而是能为人们提供解决任何问题的工具。&lt;&#x2F;p&gt;
&lt;p&gt;1968 年 12 月 9 日，恩格尔巴特在旧金山举办的计算机行业大会上进行了这场持续 90 分钟的演示，会场内有近千名观众，只有站的地方。恩格尔巴特身穿白色短袖衬衫，系着深色窄领带，坐在讲台右侧一个时髦的赫曼米勒“行动办公室”操作台边。他那台计算机终端的显示屏被投射到他背后一个 20 英尺的屏幕上。他的第一句话是：“我希望大家有朝一日能习惯这种相当不同寻常的环境。”&lt;&#x2F;p&gt;
&lt;p&gt;恩格尔巴特展示了我们现在司空见惯的众多技术：视频会议、现代桌面式用户界面、文字处理、超文本、鼠标、协作编辑等等。&lt;&#x2F;p&gt;
&lt;p&gt;他向与会者提出了一个对 21 世纪初的我们来说几乎并无意义的问题：“如果在你的办公室有一台带显示器的计算机，你能够以一种直观的方式操作它，得到你想要的结果，它会给你的工作带来多大的便利？”&lt;&#x2F;p&gt;
&lt;p&gt;当然，在那个时候，计算机还是占据整个房间的庞然大物。在恩格尔巴特构想的用户界面中，人们可以使用鼠标来移动光标并选取对象，这在当时属于革命性的想法。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247674-ad876700-db54-11eb-98b8-d3c00af7cb02.jpg&quot; alt=&quot;epub_908185_680&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当时参加「演示之母」的就有艾伦·凯，将利克莱德和恩格尔巴特的思想带入个人电脑之乐土的先驱者就是凯和一家复印机公司研究中心（PARC）一群无拘无束的同事。后来乔布斯就是从 PARC 吸收了很多了 GUI 的理念。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ken-tang-mu-xun-dan-ni-si-li-qi-unix-cao-zuo-xi-tong&quot;&gt;肯·汤姆逊&#x2F;丹尼斯·里奇：Unix 操作系统&lt;&#x2F;h2&gt;
&lt;p&gt;在 Unix 分时系统出现之前，人工和机器的交互简直就像「疯狂动物城」里面的树懒一样，慢是真慢，而且毫无交互体验，和现在相同的是，提交者都不希望有 bug 出现，不然就要重新打卡。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247710-b5470b80-db54-11eb-9765-75cc1aef8531.png&quot; alt=&quot;0B120688-617A-4A05-8CDB-4B671678F871&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;贝尔实验室的 Ken Thompson 和 Dennis Ritchie 开始了一个新的项目——Multics。这是个分时操作系统，在交互式方面有着重要的突破。它允许多人连接到计算机上，每个人都可以获得一部分时间，给用户一个独占整个计算机的感觉，不过计算机实际上还会在他们之间来回切换。如果你可以“独享”的话，你就可以使用电传打字机而不需要打孔卡了。电传打字机这个东西是打字机、打印机和电话线的结合体，你可以输入命令，通过电话线传给计算机，然后输出。这种原理和现在的 SSH 其实比较类似。&lt;&#x2F;p&gt;
&lt;p&gt;不过，Multics 实在是太贵了，尽管它能提供很好的计算环境，很多针对它的描述用到了”过度工程“这个词。 因此，贝尔实验室在 1969 年退出了项目，只有 MIT 和 AT&amp;amp;T 还在支持。&lt;&#x2F;p&gt;
&lt;p&gt;虽然贝尔实验室退出了 Multics 计划，Ken 可没闲着，实验室有一台 PDP-7，说是一台微型机，实际上也是需要一件屋子才能放得下，不过还好已经有显示器了。有一次，Ken 的爱人带着一岁的孩子去加州呆了三周度假。利用这三周的时间，Ken 完成了可以正常运行的系统，他命名为“Uniplexed Information and Computing System”，缩写为 UNICS ，这可以说是 Unix 的初代机了。&lt;&#x2F;p&gt;
&lt;p&gt;肯·汤普森开发出来的原型 Unix 系统，深得贝尔实验室这帮大佬们的青睐。Unix 的另一位热心开发参与者丹尼斯·里奇，他和肯都希望能购置一台比 PDP-7 更好的计算机。但贝尔实验室的管理层被失败的 Multics 搞得心有余悸，说什么也不肯批这个条子。不过大神们有的是暗渡陈仓的办法。因为贝尔实验室每年要编写提交许多专利文件，因此在文字处理上有着迫切需求。正是抓住了这个痛点，提出可以采购 PDP-11 用于编写专利材料，Unix 小组可以为其提供软件。&lt;&#x2F;p&gt;
&lt;p&gt;肯·汤普森和丹尼斯·里奇如愿以偿地拿到了比 PDP-7 更好的 PDP-11，两位大神立即在新机器上展开工作。由此，在 PDP-11 机器上 Unix 完成了从原型到初版的开发。&lt;&#x2F;p&gt;
&lt;p&gt;在此之后，Unix 就一直在实验室里迭代。1975 年 5 月，第六版 Unix 发布，从这一版本开始，Unix 逐渐为外界所知。&lt;&#x2F;p&gt;
&lt;p&gt;为什么这一版具有如此魅力？因为现代操作系统的设计哲学（套路）就此形成，并稳定下来了。这一哲学包含两个方面，第一是简洁，第二是专注。&lt;&#x2F;p&gt;
&lt;p&gt;先说简洁，Unix 的文件系统就是最佳示范。在 Unix 的世界里，一切皆文件。说到文件，我们首先想到的可能是打开一个文档，并在里面输入内容，最后保存关闭。这是一个关于普通文件的典型操作过程，只需要五个系统调用（creat, open, read, write, close）就可以全部完成。&lt;&#x2F;p&gt;
&lt;p&gt;那么，对于其他外接的设备，也可以将其视为一个特殊文件，只需要用五个系统调用组合使用，就能完成读写数据的工作。&lt;&#x2F;p&gt;
&lt;p&gt;再说专注，Unix 系统里有许多程序，这些程序各司其责，只将一件事做好。例如 echo 就是回显文本；cat 就是显示文件内容；ls 就是显示磁盘目录内容。那么，要实现复杂的功能怎么办？答案是借助于 shell、管道与重定向机制，将独立的小程序组合起来，实现想要的功能。这就是一种典型的分工合作思想。&lt;&#x2F;p&gt;
&lt;p&gt;这里面 shell 是供程序所运行的环境，管道是程序间数据流通的通道。管道机制是真正的神来之笔。道格·麦基尔罗伊最初有这个想法，但总是被实现问题所困扰，直到有一天启发了肯·汤普森的思考。如同被上帝亲吻了脑门，肯猛然省悟了管道的机理。他只用了一个小时就在系统调用中实现了管道。这就是将程序的孤岛给连接起来的竖线符：“|”。&lt;&#x2F;p&gt;
&lt;p&gt;UNIX 成功的另一个重要因素是它的可移植性。正是里奇竭尽全力开发了 C 语言，并把 UNIX 用 C 重写了一遍，这才使它具有了这一特性。汤普森是用汇编语言开发 UNIX 的，这种语言高度依赖于硬件，由它开发的软件只能在相同的硬件平台上运行。里奇在由剑桥大学的里查德（M．Richard）于 1969 年开发的 BCPL 语言（Basic Combined Programming Language）的基础上，巧妙地对它进行改进、改造，形成了既具有机器语言能直接操作二进制位和字符的能力，又具有高级语言许多复杂处理功能如循环、转移、分支等的一种简单易学而又灵活、高效的高级程序设计语言。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;heng-li-luo-bo-ci-di-yi-tai-ge-ren-dian-nao&quot;&gt;亨利·罗伯茨：第一台个人电脑&lt;&#x2F;h2&gt;
&lt;p&gt;罗伯茨是个无所畏惧的创业者，他一直都对计算机很感兴趣，他认为其他发烧友也一样。他兴致勃勃地对一位朋友说，他的目标是做一款面向大众，能够彻底清除“计算机圣职阶层”（Computer Priesthood）的电脑。在研究过英特尔 8080 的指令集之后，罗伯茨认为 MITS 能够生产出一款可组装出简陋计算机的 DIY 套件，价格可以卖得非常便宜，在 400 美元以下，让每个计算机爱好者都能买得起。&lt;&#x2F;p&gt;
&lt;p&gt;罗伯茨和他那支杂牌军制作的电脑不会给恩格尔巴特、凯和斯坦福周围实验室的其他人留下什么深刻印象。这款电脑内存只有 256 个字节，没有键盘，也没有其他输入设备。要想输入数据或指令，只能在一排开关之间进行切换。当时施乐 PARC 的专家正在开发可以显示信息的图形界面；而这款出自老魔法三明治店的机器却只能通过前置面板上几盏灯的闪灭来显示二进制码答案。这款电脑在技术方面虽然算不上有多成功，但仍然是一款发烧友向往的产品。发烧友群体中存在一种有待释放的需求，他们渴望有一款像业余无线电设备那样，让他们动手组装和拥有的电脑。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247740-bf690a00-db54-11eb-8182-cdf3be631417.png&quot; alt=&quot;F231040F-A65E-4712-AE05-2A3BBB2649EF&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;与当时其它的计算机相比，它并不是一台性能强劲的计算机（尽管它的成本要低得多），它也不是首个采用微处理器的通用计算机（在它之前已经至少有三个基于微处理器的计算机）。但是 Altair 是一种可供我们所有人使用的计算机。它是历史上我们所拥有的设备中首台流行的计算机，而早于 Altair 计算机都是完全不同的机器，那些大型机和笨重的迷你计算机由穿孔卡编程并且很少与之直接交互。不过 Altair 也是台极其简单的计算机，它没有附带任何操作系统甚至是引导程序。除非你为它购买外围设备，否则 Altair 就是一台装配了 RAM、前面板只有一组开关和灯泡的机器。由于 Altair 操作简单，使得重新理解基本的计算概念都成了十分简单的事情，正如模拟信号时代的人们第一次接触到数字设备一样。&lt;&#x2F;p&gt;
&lt;p&gt;「大众电子学」在一篇报道的导语中宣布：“电脑走进千家万户的时代（科幻小说作家最喜欢的主题）来临了！”一款价格适中而且实用的电脑第一次被推向大众市场。比尔·盖茨后来宣称：“在我看来，Altair 是第一台名副其实的个人电脑。”&lt;&#x2F;p&gt;
&lt;p&gt;1974 年 12 月，就在盖茨和艾伦第一次看到「大众电子学」封面的那一天，两人便决定为个人电脑制作软件了。不仅如此，他们还想改变这个新兴行业的利润分配格局，让硬件成为一种可以替代的商品，并让那些创造出操作系统和应用软件的人获得大部分利润。&lt;&#x2F;p&gt;
&lt;p&gt;盖茨和艾伦准备编写一个能让发烧友用 Altair 电脑自己动手写程序的软件。具体来说，他们决定为编程语言 BASIC 写一个能在 Altair 的英特尔 8080 微处理器上运行的解释器。这将成为针对微处理器的第一款商业化本地高级编程语言，并将开创个人电脑软件行业。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-di-fu-wo-zi-ni-ya-ke-apple-ii&quot;&gt;史蒂夫·沃兹尼亚克：Apple II&lt;&#x2F;h2&gt;
&lt;p&gt;家酿（homebrew）计算机俱乐部的首次会议是在戈登·弗伦奇的车库里举行的，其中有一位参加者叫史蒂夫·沃兹尼亚克，是一位不善与人打交道的年轻硬件工程师，他从大学退学后在位于硅谷小镇库比蒂诺的惠普计算器部门工作。从一位朋友那儿看到那张印着“你在自己组装电脑吗”的传单之后，他便鼓足勇气来参加聚会。他宣称：“那天晚上成为我生命中最重要的夜晚之一。”&lt;&#x2F;p&gt;
&lt;p&gt;当时沃兹尼亚克刚刚完成《打砖块》游戏的设计。聚会刚开始时，沃兹尼亚克感到自己与其他人格格不入。他是做计算器和家用电视游戏显示器的，但那次聚会上人们的主要兴奋点是那台新款 Altair 电脑，而他一开始对这台电脑并不太感兴趣。于是，很容易害羞的沃兹便躲到了角落里。他后来这样描述当时的场面：“那儿有人拿着《大众电子学》杂志，封面图片是一款叫 Altair 的电脑。我发现这些人其实都是 Altair 的粉丝，而不是像我想象的那样对电视终端感兴趣。”他们一个个轮番做自我介绍，轮到沃兹尼亚克的时候，他说：“我叫史蒂夫·沃兹尼亚克，我在惠普做计算器设计工作，我还设计过一个视频终端。”&lt;&#x2F;p&gt;
&lt;p&gt;但有一样东西激起了沃兹尼亚克的兴趣。聚会上有人给大家传阅了一份新款英特尔微处理器的规格表。他回忆说：“当晚我查阅了这份规格表，发现上面有一条将内存中一个位置的数据与 A 寄存器内容相加的指令。当时我想，等等，我再看看。然后我又看到一条让内存和 A 寄存器内容相减的指令。哇！在你眼中这些可能没有什么意义，但我可是清楚地知道这些指令的意义，这是我最兴奋的发现。”&lt;&#x2F;p&gt;
&lt;p&gt;沃兹尼亚克当时在设计一个带有视频显示器和键盘的终端。他本来想把它设计成一个“哑”终端，即自身不具备计算能力，而要通过电话线与其他地方的分时计算机相连的终端。但当他看到那份微处理器规格表时，他突然产生了一个灵感：可以利用微处理器（带有中央处理单元的芯片）赋予他正在制作的终端一些运算能力。这就在 Altair 的基础上迈进了一大步：这是一台集计算机、键盘和屏幕于一体的设备！他说：“这一整套有关个人电脑的设想就这样浮现在我的脑海中。那天晚上，我开始在纸上画草图，这就是苹果 I 型电脑的雏形。”&lt;&#x2F;p&gt;
&lt;p&gt;一位朋友把沃兹尼亚克介绍给了另一个也热衷电子学的孩子，这个孩子住在与他家相隔几个街区的地方，名叫史蒂夫·乔布斯。乔布斯比沃兹尼亚克小将近五岁，当时还在沃兹尼亚克的母校家园高中读书。两人坐在人行道上，交流着他们耍过的恶作剧、他们喜欢的鲍勃·迪伦的歌和做过的电子设计。沃兹尼亚克说：“一般来说，我很难跟人讲清我设计的东西，但史蒂夫立马就能明白。我喜欢他。他精瘦结实，活力四射。”而沃兹尼亚克也给乔布斯留下了很深的印象，乔布斯后来说：“沃兹是我遇到的第一个电子学懂得比我多的人。”&lt;&#x2F;p&gt;
&lt;p&gt;他们最大的一次恶作剧是“蓝盒子”事件，这件事为两人日后的电脑业务合作关系奠定了基础。乔布斯后来反思道：“如果没有蓝盒子，就没有苹果。通过蓝盒子，沃兹和我学会了如何合作。”沃兹尼亚克赞成这种说法：“它让我们体会到，如果把我的工程能力和他的想象力结合起来，我们就能做成一番大事。”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247782-c859db80-db54-11eb-8b5f-09241924bbb2.jpg&quot; alt=&quot;epub_908185_859&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;等到开发苹果 II 型电脑时，他就没再花太多时间研究微处理器规格了，而是到斯坦福购物城的梅西百货去研究 Cuisinart 牌电动厨具。他认为下一代个人电脑应该像家用电器一样：所有元件都装配妥当，带有时尚的外壳，用户买回家后无须再自己组装。从电源到软件，再从键盘到显示器，一切都应该紧密地集成为一体。他解释说：“我希望做出世界上第一台完全一体化的电脑。我们不再面向一小撮喜欢自己组装电脑，懂得如何选购变压器和键盘的发烧友。有数量相当于发烧友一千倍的人想要买回家就能用的电脑。”&lt;&#x2F;p&gt;
&lt;p&gt;苹果 II 型电脑是第一款操作简单且软硬件完全一体化的个人电脑。这款电脑于 1977 年 6 月上市，售价 1 298 美元，不到三年时间就卖出了 10 万台。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>软件设计的哲学</title>
            <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design-philosophy/</link>
            <guid>https://limboy.me/posts/software-design-philosophy/</guid>
            <description>&lt;p&gt;今天要推荐的书是「&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Philosophy-Software-Design-John-Ousterhout&#x2F;dp&#x2F;1732102201&quot;&gt;A Philosophy of Software Design&lt;&#x2F;a&gt;」，作者是 Tcl 语言的设计者，也是斯坦福大学的教授：John Ousterhou。他也在 Google 做了一个&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bmSAYlu0NcY&quot;&gt;相关的分享&lt;&#x2F;a&gt;。作为一个还在从事编程的大佬，看看他是怎么理解软件开发的哲学的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一切都是关于复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在作者看来，「复杂度」是核心，如果无法处理好复杂度，就很难构建大型&#x2F;复杂的系统。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-ding-yi&quot;&gt;复杂度的定义&lt;&#x2F;h3&gt;
&lt;p&gt;复杂度有没有简单的定义呢，作者认为复杂度就是理解和修改系统的成本。比如是否容易理解某一段代码是怎么工作的，如何跟上下游衔接的，处于架构中的哪个部分，改动它会对那些模块产生影响。如果这些都比较模糊，那就是复杂的。&lt;&#x2F;p&gt;
&lt;p&gt;还有一点是「Unknown unknowns」，比如为了完成某个 Feature，不知道哪些地方的代码需要做调整，或者需要知道哪些上下文，这种情况是最糟糕的。所以好的设计一定是「显式」的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-lai-yuan&quot;&gt;复杂度的来源&lt;&#x2F;h3&gt;
&lt;p&gt;依赖和模糊。依赖是指一段代码无法被独立理解和修改，必须参照&#x2F;修改相关代码。我们无法摆脱依赖，但可以让依赖尽量简单和显式。模糊就是一些重要的信息不够突出，比如用了一个通用的变量名，或者时间单位没有说明等。&lt;&#x2F;p&gt;
&lt;p&gt;复杂度也不是孤立的，平时如果不注意，日积月累之后想要再降下去就会比较难了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-xin-tai-zhan-zhu-bian-cheng-yu-zhan-lue-bian-cheng&quot;&gt;处理复杂度的心态：战术编程与战略编程&lt;&#x2F;h3&gt;
&lt;p&gt;战术编程就是只关注眼前需求，没有太考虑需求的本质和将来的演进。这样可能会让需求完成地更快，但也会给系统增加复杂度，进而带来更大的维护成本，于是就产生了「技术债」。&lt;&#x2F;p&gt;
&lt;p&gt;战略编程要意识到「Working code isn&#x27;t enough」，「a great design, which happens to work」才是目标，这需要投入时间去思考去雕琢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-shou-duan-fen-jie-yu-feng-zhuang&quot;&gt;处理复杂度的手段：分解与封装&lt;&#x2F;h3&gt;
&lt;p&gt;分解就是将一个复杂系统拆分为多个相对独立的子系统，子系统之间也会产生依赖，处理依赖的方式是将子系统拆分为 interface 和 implementation。interface 里的内容是供消费方使用的，也就是 what，implementation 对应的是 how。interface 尽量简洁，把复杂度包在 implementation 里内部消化，形成 Deep Module。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841170-d08dfd00-d941-11eb-9e3f-dc0b110bb040.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个 interface 的提炼就涉及到抽象能力了，抽象就是去掉不重要的细节，留下最核心的本质。比如一个文件系统，不需要在 interface 里把文件存储的 block 等细节暴露出来，这样会增加使用者的负担，也会增加复杂度（将来如果换了一种实现，就要修改接口了）。&lt;&#x2F;p&gt;
&lt;p&gt;作者在视频中举了一个 Unix file I&#x2F;O 的例子&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841203-da176500-d941-11eb-918f-82edd6bb9463.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;封装就是信息隐藏，将具体怎么实现的都放到 implementation 里，使用方不需要关心，甚至可以随时更换实现，这样即使内部很复杂，因为没有上游依赖，所以不会将复杂度扩散出去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-jiang-di-fu-za-du-de-fang-shi-you-ya-di-she-ji-cuo-wu&quot;&gt;其他降低复杂度的方式：优雅地设计错误&lt;&#x2F;h3&gt;
&lt;p&gt;只要不符合预期就抛一个 Exception，这是最简单的处理，但对使用方可能不太友好，比如取数组的 Range 时，Index 超过长度抛一个 Exception；文件在使用时请求删除抛一个 Exception；参数校验不通过抛一个 Exception。如果多为使用方想一下，这些 Exception 都是必须要抛的么？有没有可能通过改变语义或设计来避免 Error？&lt;&#x2F;p&gt;
&lt;p&gt;作者举了一个 &lt;code&gt;unset&lt;&#x2F;code&gt; 的例子，一个开始他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：移除一个变量，这样如果传入的变量不存在就要抛异常，这样导致外面使用方要通过 try catch 的方式去使用这个方法，后来他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：让一个变量不可用，如果传入的变量已经不可用了，那就不需要做处理。对比 Windows 和 Unix 对文件删除的不同处理方式（后者在运行时删除不抛出 error），也可以达到减少 Error 的效果。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;yi-ge-li-zi&quot;&gt;一个例子&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个程序，输出从 1 到 n 数字的字符串表示。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果  n  是 3 的倍数，输出“Fizz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  是 5 的倍数，输出“Buzz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  同时是 3 和 5 的倍数，输出 “FizzBuzz”。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果采用「战术编程」的话，很快就能写出一段可以 work 的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;FizzBuzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完全符合题意，也能正确运行，但调整空间太小了&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果条件变了，不是 5 而是 7 怎么办&lt;&#x2F;li&gt;
&lt;li&gt;如果不是输出 Fizz，Buzz 怎么办&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;考虑到这两点，我们再来调整下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;divisor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将变量抽了出来，这样将来调整时，不需要动实现，只需改参数即可。&lt;&#x2F;p&gt;
&lt;p&gt;如果又来了个新需求：小于 10 的都要在前面补 0。如果求快，采用战术编程的话，直接在方法内部加入这个判断分支即可。但可以有更好的解法，比如将计算逻辑放到外面，方法内部只需要判断计算结果即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.predicate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来还可以有更多的演变，比如要输出到文件而不是 console，要具备可测性等等。可以看到一个简单的需求，战术编程和战略编程会带来很大的差异。这种思维和能力上的转变对于写出优雅的代码也会有帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>工程师的成长</title>
            <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/eng-growth/</link>
            <guid>https://limboy.me/posts/eng-growth/</guid>
            <description>&lt;p&gt;我们都需要成长，工程师也不例外。以下是我感觉对工程师的成长比较有帮助的点，供参考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yao-dian&quot;&gt;要点&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;积累信用货币（先把手头的事情做好，再聊你想做什么）&lt;&#x2F;li&gt;
&lt;li&gt;提升影响力（注重输出；做能够影响更多部门&#x2F;使用方的事，并把它做好）&lt;&#x2F;li&gt;
&lt;li&gt;把工作当成内部创业（多研究手头&#x2F;部门的事情，寻找问题&#x2F;机会，把其他部门当作潜在合作伙伴）&lt;&#x2F;li&gt;
&lt;li&gt;清楚自己的强项（将自己的强项和正确的事情结合起来，才能发挥最大的作用）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;huan-jing&quot;&gt;环境&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;与优秀的人共事（学习他们的技能和做事方式，不要成为最聪明的那个）&lt;&#x2F;li&gt;
&lt;li&gt;做符合大趋势的事（ Focus 在某个领域可能是把双刃剑，多结合一些通用技能）&lt;&#x2F;li&gt;
&lt;li&gt;做事情有足够的空间（可以发挥自己的创造力，而不是偏流程化、对着操作手册就能做的事）&lt;&#x2F;li&gt;
&lt;li&gt;一个好的 Mentor（用旁观者视角给你反馈，指出问题和改进方案，帮助成长）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-ge-ti-de-ji-ben-su-zhi&quot;&gt;作为个体的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;自驱力（想在前头，不需要别人来 Push）&lt;&#x2F;li&gt;
&lt;li&gt;好奇心（不局限于自己的 Scope，多了解同事、Lead、行业的事情）&lt;&#x2F;li&gt;
&lt;li&gt;高标准（仅仅做完是不够的，一个问题往往有很多可以挖掘的点）&lt;&#x2F;li&gt;
&lt;li&gt;时间管理（不会疲于应付各种需求和问题，有优先级和 Plan）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-gong-cheng-shi-de-ji-ben-su-zhi&quot;&gt;作为工程师的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;良好的编码能力（1 个月后的自己依然可以维护，出问题可以快速定位）&lt;&#x2F;li&gt;
&lt;li&gt;享受解决问题的乐趣，具备化繁为简的能力（抽象，分解，分层，分模块）&lt;&#x2F;li&gt;
&lt;li&gt;抗压能力（压力下，不变形）&lt;&#x2F;li&gt;
&lt;li&gt;数据意识（好了，坏了，用数据说话）&lt;&#x2F;li&gt;
&lt;li&gt;注重效率（不吝啬在工具上的投入）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kan-wen-ti-de-jiao-du&quot;&gt;看问题的角度&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;如果现状让我不舒服，我可以做什么来改变，而不是逃避和埋冤&lt;&#x2F;li&gt;
&lt;li&gt;如果觉得当前没什么问题，一定是了解得还不够深入&lt;&#x2F;li&gt;
&lt;li&gt;如果是 Ta（某个你欣赏的人）来做你手头的事，Ta 会怎么做&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-shi-qing-de-fang-fa&quot;&gt;做事情的方法&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;设计方案时要考虑周到：竞品调研、上线策略、降级方案、回滚方案、出问题时如何排查等&lt;&#x2F;li&gt;
&lt;li&gt;事情推不动就上升，但要提供充足的上下文以便 Lead 做决策，Context not Control&lt;&#x2F;li&gt;
&lt;li&gt;汇报时要切换视角，有条理，把要点说清楚，同时提供了解细节的入口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么 2021 年加入飞书是不错的选择</title>
            <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/join-lark-2021/</link>
            <guid>https://limboy.me/posts/join-lark-2021/</guid>
            <description>&lt;p&gt;这是一篇招聘文章，相信从标题也能看得出来，为了让它显得比较合理，我假模假样地分析了下原因，您看看是不是这么回事。要是想直接看招聘链接，可以跳到文章末尾处。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分同学可能不太清楚飞书（https:&#x2F;&#x2F;www.feishu.cn）是什么，简单说下，飞书是字节跳动出品，整合即时沟通、日历、视频会议、云文档、云盘、工作台等功能于一体的办公协同工具。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-qu-shi&quot;&gt;1. 趋势&lt;&#x2F;h2&gt;
&lt;p&gt;ToC 市场的人口红利持续疲软，ToB 市场自然成为了增长的突破点，疫情带来的远程办公理念和习惯，已经让更多的企业开始使用并依赖协同办公软件。以头部玩家钉钉为例，根据官方数据，目前（2021 年 1 月）使用钉钉的企业已经超过了 1700 万，这是什么概念？根据&lt;a href=&quot;https:&#x2F;&#x2F;www.ceicdata.com&#x2F;zh-hans&#x2F;china&#x2F;number-of-business-entity-and-company&quot;&gt;这篇文章&lt;&#x2F;a&gt;的数据，截止到 2020 年 5 月，中国的企业数大概在 4000 万左右，新企业的增速大概在 13% 那样，因此即使是目前有最大市场占有量的钉钉也还没到过半的程度。&lt;&#x2F;p&gt;
&lt;p&gt;To C 领域常见的网络效应，在 To B 端也会有么？To C 场景下，身边的人如果都在用微信，那么我也「不得不」使用微信。To B 场景则不一样，A 公司和 B 公司的办公软件完全不需要保持一致，只要能够满足需求，提供可靠的服务，合作顺畅就行，市场占有量并不是最大的考虑因素。但也不是完全没有网络效应，比如 A 和 B 都是互联网公司，且高层之间比较熟悉，如果某款协同工具赢得了 A 的口碑，就有可能让 B 公司也使用该工具。&lt;&#x2F;p&gt;
&lt;p&gt;有没有可能随着疫情得到控制，大家回归到正常工作状态后，就不再需要临时满足远程办公的协同工具？有可能，但应该不是主流，且那些选择放弃的企业还是会慢慢再用回来，因为真的很方便。现在一些传统行业的头部企业也开始往数字化办公迁移，比如三一重工，华润，物美等等。&lt;&#x2F;p&gt;
&lt;p&gt;有没有可能出现马太效应，也就是赢家通吃的情况？不太会。跟 To C 场景不同，企业之间的差异往往比较大，尤其是跨行业的企业，有些注重协同，有些注重管理，有些注重流程，有些注重专业能力（如电商，建筑）等等，不过这些注重点也并非是完全互斥，因此理论上是存在一个工具可以同时满足这些需求，但太难了，即使有，也定会经历长时间的打磨。要解决行业的定制化问题，最好的方式就是做开放，提供能力给 ISV，在协同工具的基础上开发企业定制产品，做这件事的就是开放平台。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-you-shi&quot;&gt;2. 优势&lt;&#x2F;h2&gt;
&lt;p&gt;再来看看飞书，为什么目前市场占有量并不高的飞书有可能在协同办公的 To B 领域取得不错的成绩？我觉得主要有以下这么几点：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gong-ju-shi-zhen-hao-yong&quot;&gt;工具是真好用&lt;&#x2F;h3&gt;
&lt;p&gt;平时国外的工具用得比较多，经常会被他们的设计和细节所打动，飞书这一年多使用下来，感觉不输那些国外的工具，有不少功能甚至更胜一筹，比如文档、表格、聊天的 Reaction、聊天的 Context 等等。这也跟字节对工具的重视有很大关系，经常能看到谢欣，张楠在反馈区反馈各种体验问题，身边使用飞书的朋友也是不啬赞美之词（当然也会有槽点）。&lt;&#x2F;p&gt;
&lt;p&gt;飞书在字节内部已经经历了 4 年多的使用和迭代，能够支持字节这样体量的互联网公司，在使用层面肯定是经得起考验的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xie-tong-shi-zhen-fang-bian&quot;&gt;协同是真方便&lt;&#x2F;h3&gt;
&lt;p&gt;在飞书工作的这段时间里，我没有写过一封邮件，这在其他公司是很难想象的，主要得益于强大的文档系统和超方便的协同。比如在文档里可以@人，发起投票，插入群组以及各种富媒体，可以对文档实时划词评论，文档在聊天消息中也是以标题+预览图的方式展示，日历、开放平台等也都可以方便地串联起来，简单来说就是一体感很强，而不是单独的几个产品放在一起。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fang-shi-zhen-yong-li&quot;&gt;开放是真用力&lt;&#x2F;h3&gt;
&lt;p&gt;比如 OKR 系统，就是基于开放平台搭建的，People，审批，汇报等高频应用也都是构建在开放平台之上，前面也说过，开放平台对于满足不同企业的定制化需求至关重要，因此对开放平台的持续投入也是在预期之内。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-zeng-shi&quot;&gt;3. 增势&lt;&#x2F;h2&gt;
&lt;p&gt;先来说说我身边观察到的自发使用飞书的例子吧。朋友 A 经营一家康复相关的小公司，使用飞书作为协同工具，整体感受还比较满意；朋友 B 参与一家前知乎员工创建的互联网公司，内部协作也是使用飞书。这两个例子都是我正好知道，没有主动向他们 Sell 过。飞书前一段时间刚开了「2020 飞书未来无限大会」，在这个会上宣布了与三一重工、物美、小米、南开、华润等大型企业的合作。&lt;&#x2F;p&gt;
&lt;p&gt;这两件事单独看可能没有什么，但放到一起看就很有意思了，这就意味着飞书既可以让小团队高效协作，也能满足超大型公司的协同。而且即使是超大型公司，也并非集中在某一领域，这也说明了飞书的普适性和定制化能力，有了这样的能力，增长就不会是太大的问题。数据层面也一定程度上体现了这一点。&lt;&#x2F;p&gt;
&lt;p&gt;最后如前面所说，企业协同办公是发展趋势，钉钉虽然有先发优势，也积累了不少的客户，但 To B 市场很大，且网络效应不如 To C 那么严重，同时飞书经历了 4 年多的打磨，积累了较好的口碑，且有很好的普适性和定制化能力，因此在协同办公市场服务好一部分客户，且持续发展问题应该不大。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>应该成为专才还是通才</title>
            <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/specialize-or-generalist/</link>
            <guid>https://limboy.me/posts/specialize-or-generalist/</guid>
            <description>&lt;p&gt;Tim Ferriss 的&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=wCPbPMRNnvk&quot;&gt;一个视频&lt;&#x2F;a&gt;探讨过这个问题，简单总结下他的观点：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Combine a handful of skills that are rarely combined and can be effectively combined.&lt;&#x2F;p&gt;
&lt;p&gt;将多个技能以少见又有效的方式进行组合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如计算机科学 + 律师，或者财务管理 + 公共演讲等，其中演讲、写作、谈判是普适能力，对于技能的有效叠加大有裨益。要在某个特定领域做到 Top 非常困难，掌握大量不同技能不是解决之道，多考虑如何将技能进行有效组合。&lt;&#x2F;p&gt;
&lt;p&gt;做项目时注重积累可以复用的 Skills（能力） 和 Relationship（人际关系），这样即使项目的结果不如预期也不算「失败」，这些积累对于下一个项目的展开和推进会很有帮助。 &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;How-Fail-Almost-Everything-Still-ebook&#x2F;dp&#x2F;B00COOFBA4&quot;&gt;How To Fail at Almost Everything And Still Win Big&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;聊技能组合之前，有一点我觉得很重要：尽最大可能做好一件事的心态。它可以让你走出舒适区、不断尝试和反思、深度学习，只有在这个前提下，技能组合才能发挥最大的价值。技能组合后的产品通常会跟其他同类产品直接竞争（除非正好是蓝海，即使如此，也不能保证每次都会这么好运），只有竭尽所能，才有可能在市场中占据一席之地。&lt;&#x2F;p&gt;
&lt;p&gt;技能组合对技能的深度和组合的有效度都有要求，缺少深度较难形成长期壁垒，不够有效很难适应市场需求。美食 Up 主大姨（绵羊料理）是个很好的例子，她的视频特点是：超强的文案和用科研的精神做菜（据说是博士学位）。当然除此之外甜美的声音、可爱的外表、良好的画质都是加分项，但这些不是区分绵羊料理与其他美食 Up 主的点。她之前在电视台上班，对灯光、摄像、片头、包装都比较了解，然后就做了一次技能组合，只是这次组合失败了，因为成本太高，投入产出不成正比，甚至会让粉丝觉得「恰饭」味儿有点重。&lt;&#x2F;p&gt;
&lt;p&gt;再比如「樊登读书」，作者樊登之前的身份是央视主持人、辩论赛冠军队成员、MBA 资深讲师。辞去工作之后，他将表达能力和泛阅读进行有效结合，出了「樊登读书」这个产品，同时跟「得到」形成了差异化竞争（关于这个产品的解读可以听下疯投圈的&lt;a href=&quot;https:&#x2F;&#x2F;crazy.capital&#x2F;45&quot;&gt;这期播客&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;为什么被组合的技能一定要有深度，简单来说就是别人想抄也不好抄。可以想象这么一个场景：有那么一些人，他们时刻关注新冒出来的产品，只要有点苗头，他们就 Copy 一份来跟你直接竞争。技能的深度可以让这个 Copy 成本变高。&lt;&#x2F;p&gt;
&lt;p&gt;那如何才能有效组合呢，这个涉及到对市场的洞察力、对自身能力的高精度认知和不断尝试。最终的产品面向的是怎样的用户，他们会怎么使用，什么场景下使用，带来怎样的帮助，跟竞争对手的差异等，这是市场洞察力；自己擅长什么，有多擅长，缺少什么，缺的部分自己可以搞定还是需要请人协助等等，这是对自身能力的高精度认知，虽然看起来不难，但如果平时没有经常反思，很容易出现误判；不断尝试更是不可或缺，这其实也算是转型，一次就转型成功的，少之又少，常见的是几次失败的尝试后，又重新依赖原先某个特定的技能。&lt;&#x2F;p&gt;
&lt;p&gt;Tim Ferriss 提到的做每个项目应该有 Skills 的提升和 Relationship 的沉淀，就像写 App 时的基建：网络库、数据存储、图片库等，当新写一个 App 时，可以复用这些基建，大大提高开发效率。比如做谈话节目，可能最终失败了，但至少可以积累视频制作能力，与谈话对象建立联系。这些积累对于下个项目很可能会有帮助。&lt;&#x2F;p&gt;
&lt;p&gt;关于应该培养怎样的 Skills，这个自然看每个人的兴趣，但这个 Skills 应该不只是经验。比如一个神经生物学博士，如果去当公司的 CEO，也可以复用专业知识：​ 是不是可以从神经元之间的通信机制来类比公司内的信息传递，或者从细胞的组成来看待公司的结构等等。跟 Good People 建立 Relationship 也很重要，甚至作为目标都未尝不可。&lt;&#x2F;p&gt;
&lt;p&gt;最后引用一下乔布斯的一段话：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&#x27;t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;你无法预先串联那些点，只有当你回顾时才会发现这些点的价值和意义。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Contact Tracing 技术实现解析</title>
            <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/contact-tracing-tech-analyze/</link>
            <guid>https://limboy.me/posts/contact-tracing-tech-analyze/</guid>
            <description>&lt;p&gt;为了更好地应对 covid-19，&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;covid19&#x2F;contacttracing&quot;&gt;Apple&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.google&#x2F;inside-google&#x2F;company-announcements&#x2F;apple-and-google-partner-covid-19-contact-tracing-technology&#x2F;&quot;&gt;Google&lt;&#x2F;a&gt; 联合发布了一项技术：「 Privacy-Preserving Contact Tracing」，在保护用户隐私的前提下，追踪联系人。这里的联系人不是通讯录里的联系人，而是真实世界中有过联系的人，更确切地说是在蓝牙范围内的人，路上并肩的行人也属于这个范畴。「追踪」是为了当有人确诊后，可以找到有过近距离接触的人，以便告知该信息。&lt;&#x2F;p&gt;
&lt;p&gt;Apple 和 Google 给出的技术方案从宏观来看是：把设备信息通过蓝牙传递到其他手机上，当有人确诊后，将 ta 的设备信息上传到云端，再推到其他手机上，通过比对本地保存的其他设备信息和接收到的设备信息是否匹配，来判定手机 owner 是否存在被感染风险。&lt;&#x2F;p&gt;
&lt;p&gt;为什么选择低功耗蓝牙，一个是主流移动设备基本都配备了该能力，这样就方便跨设备，甚至跨操作系统通信；同时低功耗可以避免给手机带来性能影响；蓝牙属于近场通信，也非常适合 covid-19 的场景。&lt;&#x2F;p&gt;
&lt;p&gt;其次设备信息这么传递，如何保障隐私不被泄漏呢，我们来看下这个问题&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-bi-mian-she-bei-xin-xi-chuan-di-dai-lai-de-yin-si-xie-lou-feng-xian&quot;&gt;如何避免设备信息传递带来的隐私泄漏风险&lt;&#x2F;h2&gt;
&lt;p&gt;如果设备信息就是固定的手机的 udid，或者对应的映射，攻击者就可以利用这个指纹做文章（比如查看另一个人的手机，看是否有某台设备的 udid，以确定两个人是否近距离接触过，或者持续监控&#x2F;跟踪某台设备）。因此这里的 Key 应该是变的，同时又跟设备紧密相关，别人无法仿造和解密。白皮书里涉及到了 3 个 Key：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;74ae60e45645cb3745de5b164fe647178a993e8e.jpg&quot;
        width=&quot;820&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;tracing-key-yi-xia-jian-cheng-tk&quot;&gt;Tracing Key （以下简称 TK）&lt;&#x2F;h3&gt;
&lt;p&gt;一个设备只生成一次，保存在本地，不会被上传。它的目标是足够随机，不会与其他设备产生的 TK 冲突。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;daily-tracing-key-yi-xia-jian-cheng-dtk&quot;&gt;Daily Tracing Key（以下简称 DTK）:&lt;&#x2F;h3&gt;
&lt;p&gt;一天生成一次，一天内不变，从 Tracing Key 派生而来，使用 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HKDF&quot;&gt;HKDF&lt;&#x2F;a&gt; 密钥算法（将较短的密钥生成较长的密钥，同时保证随机性），这个算法使用原始的密钥（Tracing Key）作为输入，使用 &lt;code&gt;DayNumber&lt;&#x2F;code&gt; 作为变量，因为 &lt;code&gt;DayNumber&lt;&#x2F;code&gt; 一天内不变，所以 DTK 一天内也不会变。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;faa9b33a2cbe2d8caca14f5d9fe40488b0290982.png&quot;
        width=&quot;832&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个 Key 的设计目标是隐藏 TK（外部无法根据这个 Key 推测出 TK），同时不会与其他设备的 DTK 冲突。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rolling-proximity-identifier-yi-xia-jian-cheng-rpi&quot;&gt;Rolling Proximity Identifier（以下简称 RPI）&lt;&#x2F;h3&gt;
&lt;p&gt;一个广播周期内（比如 10 分钟）生成同一个 HMAC（密钥散列消息认证码）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;5b07e24e0ab6fc016cd36a5926ae1a659ac0fb19.png&quot;
        width=&quot;1124&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;dkt&lt;sub&gt;i&lt;&#x2F;sub&gt; 表示当天的 Daily Tracing Key，也就是 SHA-256 哈希函数的入参
TIN&lt;sub&gt;j&lt;&#x2F;sub&gt; 表示 TimeIntervalNumber，也就是当天第 j 轮广播周期，比如 10 分钟为一个周期（换一次 RPI）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;64fd3c7f5c0e0c9f4f3a6ff28227e8ddbe39113f.png&quot;
        width=&quot;992&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;j 的取值区间就是 &lt;code&gt;[0,143]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;RPI&lt;&#x2F;code&gt; 的设计目标是隐藏 DKT，同时支持 DKT 的验证（当某个人确诊后，可以通过 ta 的 DKT 计算 RPI 来验证）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-fa-song-rpi&quot;&gt;如何发送 RPI&lt;&#x2F;h3&gt;
&lt;p&gt;前面提到的 3 个 Key，只有最后一个 RPI 会发送到其他设备上（TK 永远不会离开设备，DTK 只有确诊后才会提取其中的一个子集作为 Diagnosis Key），RPI 通过蓝牙发送到其他设备（关于低功耗蓝牙协议的说明，可以参考&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;iini&#x2F;p&#x2F;8969828.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;发送（广播）流程如下：

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;c978802c2c011295dea09a857ca31ba24c56d004.jpg&quot;
        width=&quot;2208&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的通信双方分别是：advertiser（广播数据包）和 scanner（扫描响应包），前者在广播时间间隔内会不断广播数据，这些数据中会包含 RPI，scanner 接收到广播数据后会将 payload 中的 RPI 保存到本地。等切换到下一个时间窗口后，会生成并广播新的 RPI。跨天会以新的 DTK 为基础，生成并广播新的 RPI。&lt;&#x2F;p&gt;
&lt;p&gt;这个过程使用的是 Beaconing 协议，也就是接收方无需应答广播者的数据包，只要默默地把数据记下来就行。一个设备同时是广播者和扫描者。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;guan-yu-kong-jian-zhan-yong&quot;&gt;关于空间占用&lt;&#x2F;h4&gt;
&lt;p&gt;一个 RPI 的长度是 16 字节，所以空间消耗非常少，即使接收到了 10000 个 RPI，也只会占用 156 K 的空间。但还是要有一个 Rotation 的机制，毕竟时间太长的 RPI 意义已经不大了。&lt;&#x2F;p&gt;
&lt;p&gt;这里还有一个潜在的风险是攻击者可以伪造大量的 RPI 数据给 Scanner，虽然每个 RPI 只有 16 字节，但仍有潜在的存储风险。所以 Scanner 的 scan 行为持续时间不能过长&#x2F;过频繁，这同时也能节省电量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-jie-shou-rpi&quot;&gt;如何接收 RPI&lt;&#x2F;h3&gt;
&lt;p&gt;对于 Scanner 来说，流程更加简单，只要存储收到的 RPI 即可。如果云端有推送 Diagnosis Keys（确诊者上传的 DTK），就对它使用 SHA_256 算法（结合 TimeIntervalNumber）， 将结果与本地存储的 RPI 比对，如果 match，就有被感染的风险，系统会推送通知提醒。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;9b0d919706658c6c62ab9b9baab4f7adec60427a.jpg&quot;
        width=&quot;2208&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;guan-yu-api&quot;&gt;关于 API&lt;&#x2F;h2&gt;
&lt;p&gt;苹果和 Google 都放出了 API Interface，虽然没有具体的实现，但光是对比两家的 API 接口就能看出点门道，这个环节个人认为 Google 做得更好，苹果很「意外」地没有使用 Swift 来提供 API，OC 那冗长的语法和 Block，给 API 的友好度打了折扣&lt;&#x2F;p&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;covid19-static.cdn-apple.com&#x2F;applications&#x2F;covid19&#x2F;current&#x2F;static&#x2F;contact-tracing&#x2F;pdf&#x2F;ContactTracing-FrameworkDocumentation.pdf&quot;&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;2b1faeb610533f0fb6da0f92d2f907a272f5ebec.jpg&quot;
        width=&quot;709&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;
&lt;p&gt;相比之下 Google 的 API 看着就舒服多了&lt;&#x2F;p&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;blog.google&#x2F;documents&#x2F;55&#x2F;Android_Contact_Tracing_API.pdf&quot;&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;9dfa8c4a3c89e00c20b346c8fe6e06bfd02547d8.jpg&quot;
        width=&quot;619&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;这个设计非常巧妙，不仅保护了用户隐私，也减少了服务端的压力，对于服务端只需存储和下发 Diagnosis Keys，不需要计算 Key 与 Key，Key 与设备之间的关联。设备也不会有很大的存储和计算压力。从扩展性来看，将来如果有类似的近距离传播流行病，可以复用这套技术。但 Android 设备因为众所周知的原因在国内推行这套基建会比较困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-san-yi-xia&quot;&gt;发散一下&lt;&#x2F;h3&gt;
&lt;p&gt;这个设计中，主要用到了蓝牙和加密哈希算法，苹果在 iOS 13 中的 Find My 也是基于蓝牙和加密协议来实现的，使得手机即使处于离线状态（不要关机就行），依然可以被定位。原理是要拥有至少两台苹果设备（共享私钥），然后每台设备都以一定间隔发送不断变化的公钥，当被周边的苹果设备获取到后，该设备（就像一个跳板）会用这个公钥来加密当前的地理位置信息，上传到苹果服务器，另一台设备就可以用私钥来解开这个加密信息，得到地理位置。这个过程中上传地理位置的设备信息不会暴露（因为压根就没有上传），别人无法解密这个信息，因为基于蓝牙传输，也不需要依赖网络，不得不说也是非常精巧的设计。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>强大的可视化利器 Chrome Trace Viewer 使用详解</title>
            <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/chrome-trace-viewer/</link>
            <guid>https://limboy.me/posts/chrome-trace-viewer/</guid>
            <description>
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b580eea70090ee05b7c8885712df2b271395a8b4.png&quot;
        width=&quot;1390&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最近研究了下 Chrome 自带的 Trace Viewer，发现功能还挺强大的，用来做 Performance Profile，Timeline Tracing 等很方便，但官方的使用文档比较晦涩，资料也比较匮乏和分散，就专门整理了下。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：Trace Viewer 其实可以脱离 &lt;code&gt;chrome:&#x2F;&#x2F;tracing&lt;&#x2F;code&gt; 在线使用，具体操作后面会讲到&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;trace-viewer-jie-shao&quot;&gt;Trace Viewer 介绍&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Trace-Viewer is the javascript frontend for Chrome &lt;code&gt;about:tracing&lt;&#x2F;code&gt; and Android &lt;code&gt;systrace&lt;&#x2F;code&gt;. providing rich analysis and visualization capabilities for trace files, supporting both the linux kernel trace format and Chrome&#x27;s base&#x2F;trace_event.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;它是一个强大的可视化展示和分析工具，之前 google 有一个专门的 trace-viewer 项目，现在该项目合并到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;catapult-project&#x2F;catapult&#x2F;blob&#x2F;master&#x2F;tracing&#x2F;README.md&quot;&gt;catapult&lt;&#x2F;a&gt; 中, catapult 是 Chromium 工程师开发的一系列性能工具的合集，可以用来收集、展示、分析 Chrome、Website 甚至 Android 的性能。&lt;&#x2F;p&gt;
&lt;p&gt;catapult 源码里包含了很多 test case，git clone 下来后，运行 &lt;code&gt;$CATAPULT&#x2F;bin&#x2F;run_dev_server&lt;&#x2F;code&gt;. 然后在浏览器中打开 &lt;code&gt;http:&#x2F;&#x2F;localhost:8003&#x2F;tracing_examples&#x2F;trace_viewer.html&lt;&#x2F;code&gt; 能看到很多 Demo&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b45847555835cc49338b5d58c50fd5f656b4e681.jpg&quot;
        width=&quot;1377&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过 Google 目前正在开发另一套工具 &lt;a href=&quot;https:&#x2F;&#x2F;ui.perfetto.dev&#x2F;#!&#x2F;&quot;&gt;perfetto&lt;&#x2F;a&gt; 打算替换 Trace Viewer，我初步使用了下，感觉不如 Trace Viewer 简洁。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-kai-yuan-xiang-mu-zhong-de-shi-yong&quot;&gt;在开源项目中的使用&lt;&#x2F;h2&gt;
&lt;p&gt;Golang 用它来可视化展示执行过程 https:&#x2F;&#x2F;golang.org&#x2F;cmd&#x2F;trace&#x2F;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;go test -trace trace.out pkg
&lt;&#x2F;span&gt;&lt;span&gt;go tool trace trace.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;49df6cdfe957da75a44c5a074e02d5e7b80dedc1.jpg&quot;
        width=&quot;2098&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 的 Buck Build 系统，用它来展示 Build 时发生了什么&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;a3adb318505c4c13881b90eb2b031f8afb977da7.png&quot;
        width=&quot;900&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从这两个项目可以看出来 Trace Viewer 对于呈现「某段时间发生了什么」 还是有过人之处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trace-viewer-format&quot;&gt;Trace Viewer Format&lt;&#x2F;h2&gt;
&lt;p&gt;Trace Viewer 有一套自己的 &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU&#x2F;edit&quot;&gt;Trace Event Format&lt;&#x2F;a&gt;，只要文件遵循这个格式，就可以被展示。比如：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;23d3a314c8c47e6ea8bf35f46d0e58ea7c9a62be.png&quot;
        width=&quot;1630&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对应的 json 文件内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[ {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000}
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每一个 Event 主要由以下几部分组成：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;myName&amp;quot;, &#x2F;&#x2F; 事件名，会展示在 timeline 上
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;cat&amp;quot;: &amp;quot;category,list&amp;quot;, &#x2F;&#x2F; 事件分类，类似 Tag，但 UI 上不支持选择 Tag
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &#x2F;&#x2F; phase，后面着重会讲到
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ts&amp;quot;: 12345, &#x2F;&#x2F; 事件发生时的时间戳，以微秒表示
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;pid&amp;quot;: 123, &#x2F;&#x2F; 进程名
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;tid&amp;quot;: 456, &#x2F;&#x2F; 线程名
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;args&amp;quot;: { &#x2F;&#x2F; 额外参数，当选中某个 event 后，会在底部的面板展示
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;someArg&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;anotherArg&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;value&amp;quot;: &amp;quot;my value&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中最重要的是 &lt;code&gt;ph&lt;&#x2F;code&gt;，最常用的组合是 &lt;code&gt;B&lt;&#x2F;code&gt; 和 &lt;code&gt;E&lt;&#x2F;code&gt;，分别表示 &lt;code&gt;Begin&lt;&#x2F;code&gt; 和 &lt;code&gt;End&lt;&#x2F;code&gt;，有了这两个信息，Trace Viewer 就能在 timeline 上找到起止点，将它绘制出来。也可以简化为 &lt;code&gt;X&lt;&#x2F;code&gt;，然后加上 &lt;code&gt;dur&lt;&#x2F;code&gt; 表示 duration&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[ {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000, &amp;quot;dur&amp;quot;: 360000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 360000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000, &amp;quot;dur&amp;quot;: 180000000},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但颜色看起来有点随机，能不能自定义呢，可以的，这时就要用到 &lt;code&gt;cname&lt;&#x2F;code&gt; 这个参数：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt; {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将 &lt;code&gt;cname&lt;&#x2F;code&gt; 设置为 &lt;code&gt;good&lt;&#x2F;code&gt;，视觉上会看到绿色，在&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;catapult-project&#x2F;catapult&#x2F;blob&#x2F;master&#x2F;tracing&#x2F;tracing&#x2F;base&#x2F;color_scheme.html&quot;&gt;这里&lt;&#x2F;a&gt;有可选的 cname 列表（藏的真够深···）&lt;&#x2F;p&gt;
&lt;p&gt;左边的 &lt;code&gt;Process Main&lt;&#x2F;code&gt; 能不能也进行个性化定制以显得不那么突兀呢？比如将它改成「时间线」&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;2b199fda93a030e4ceaa09317e67bfd4407a08b1.png&quot;
        width=&quot;1478&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这就要使用 MetaData Phase 了&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;process_name&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;时间线&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它的表示方式是将 &lt;code&gt;ph&lt;&#x2F;code&gt; 设为 &lt;code&gt;M&lt;&#x2F;code&gt;，然后将 &lt;code&gt;name&lt;&#x2F;code&gt; 设为 &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU&#x2F;edit#heading=h.xqopa5m0e28f&quot;&gt;5 种可选值&lt;&#x2F;a&gt;中的一种，比如 &lt;code&gt;process_name&lt;&#x2F;code&gt; 则表示要对进程名做一些定制。metadata 主要是用来为某一类 event 提供更多的信息，比如自定义名字或重新设置排序优先级。&lt;&#x2F;p&gt;
&lt;p&gt;有一些事件，它不是执行耗时，但包含了其他事件，比如「我的一天」，它不是一个可被执行的事件，但将一天做的事情包含进来。这些被称为「异步事件」，表现上就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b918640dca619c8e393599f7096a26043fd70f72.png&quot;
        width=&quot;1514&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;独占一栏，同时使用了斜体字，如果仔细看，还会发现顶部多了一条黑色的线。异步事件的 &lt;code&gt;ph&lt;&#x2F;code&gt; 为 &lt;code&gt;b&lt;&#x2F;code&gt; 和 &lt;code&gt;e&lt;&#x2F;code&gt; 也是 Begin 和 End，只不过变成了小写，同时还要提供 &lt;code&gt;id&lt;&#x2F;code&gt; 和 &lt;code&gt;cat&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;id 用来唯一标识两个异步事件是不是应该被作为同一个来看待（有可能多个异步事件名字都一样），cat 也是必选项，这个不太理解，可能等待的时间太孤独，需要一只猫来陪伴吧。&lt;&#x2F;p&gt;
&lt;p&gt;一件事可能会被拆分为更小的单元，然后执行过程中也会穿插着其他的事件，针对这样的场景，可以通过 &lt;code&gt;Flow Event&lt;&#x2F;code&gt; 来表示&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;7a54bb4d237b14089e5bc83a2f9329b686c941c8.jpg&quot;
        width=&quot;1434&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，在「出方案」和「写代码」之间多了一条线&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;,&amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;s&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;f&amp;quot;, &amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 3600000000},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Flow Event&lt;&#x2F;code&gt; ph 的开始和结束分别为 &lt;code&gt;s(start)&lt;&#x2F;code&gt; 和 &lt;code&gt;f(finish)&lt;&#x2F;code&gt;，跟 &lt;code&gt;Async Event&lt;&#x2F;code&gt; 有点像，但有几点不同：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;不需要带上 cat&lt;&#x2F;li&gt;
&lt;li&gt;同一个 Flow Event，除了 id 相同外，名字也必须相同&lt;&#x2F;li&gt;
&lt;li&gt;结束时用 &lt;code&gt;&amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;&lt;&#x2F;code&gt; 来表示&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Flow Event 需要依附在已有的 Event 上，依附的过程其实就是 ts 匹配，相同&#x2F;最近 ts 的 Event 会自动被匹配到。&lt;&#x2F;p&gt;
&lt;p&gt;出方案的过程中，可能会有纪念意义的事件需要记录下，比如想到了某个点子，这时可以用 &lt;code&gt;ph: &amp;quot;I&amp;quot;&lt;&#x2F;code&gt; 来表示（Instant）&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;想到一个点子&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;I&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 18800000000}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;9fafe4e26805bce1fde36f7970389735fa66ec5a.jpg&quot;
        width=&quot;1482&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中间那根红线就是我们刚加的事件，选中之后会在底部出现该事件的详细信息。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个上进的青年，一天下来之后，需要留一段时间反思今天做的好的和不好的，这可以通过 Snapshot 来体现，就像这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;200ba2a883121853011e9e0c22757929ee257a84.png&quot;
        width=&quot;1272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;右上角那个圆点就是 Snapshot 在 Timeline 上的表现，点击之后可以在底部看到详细内容。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;反思&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;O&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;Ref&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;其他&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000, &amp;quot;args&amp;quot;: {&amp;quot;snapshot&amp;quot;: &amp;quot;充实的一天呢&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Snapshot 的 ph 为 &lt;code&gt;O&lt;&#x2F;code&gt; （字母 O），没有什么限制，详细的内容往 &lt;code&gt;args.snapshot&lt;&#x2F;code&gt; 里放就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;这些差不多就是常用的 ph 了，部分 ph 会有附带的规则，再简单总结下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;ph B&#x2F;E &#x2F;&#x2F; 正常的开始&#x2F;结束事件，最常见，也可以用 X + dur 来表示
&lt;&#x2F;span&gt;&lt;span&gt;ph M &#x2F;&#x2F; Metadata 用来对一类 Event 附加更详细的信息，可以带来 UI 上的变化
&lt;&#x2F;span&gt;&lt;span&gt;ph I &#x2F;&#x2F; 瞬时事件，类似 Mark 一下
&lt;&#x2F;span&gt;&lt;span&gt;ph s&#x2F;e &#x2F;&#x2F; 异步事件，表示自定义的一个事件，表现上跟正常事件会有区别
&lt;&#x2F;span&gt;&lt;span&gt;ph s&#x2F;f &#x2F;&#x2F; Flow 事件，会出现箭头，要通过 ts 匹配最近的 event，结束要使用 bp: e
&lt;&#x2F;span&gt;&lt;span&gt;ph O &#x2F;&#x2F; Snapshot，表现上是一个醒目的圆点，可以在 `args.snapshot` 里放任意数据
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下是 Demo 对应的 Event 内容，只要能生成这样的 JSON 文件，就可以使用 Trace Viewer 强大的可视化能力。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天1&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;,&amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;想到一个点子&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;I&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 18800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;s&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;f&amp;quot;, &amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 3600000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;反思&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;O&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;Ref&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;其他&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000, &amp;quot;args&amp;quot;: {&amp;quot;snapshot&amp;quot;: &amp;quot;充实的一天呢&amp;quot;}},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000, &amp;quot;dur&amp;quot;: 1880000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;process_name&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;时间线&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zai-xian-shi-yong-trace-viewer&quot;&gt;在线使用 Trace Viewer&lt;&#x2F;h2&gt;
&lt;p&gt;通过 &lt;code&gt;chrome:&#x2F;&#x2F;tracing&lt;&#x2F;code&gt; 的方式来使用 Tracer Viewer 还是不太方便，也不利于传播，Google 虽然在 catapult 里提供了 &lt;code&gt;trace2html&lt;&#x2F;code&gt;，但包含的文件很多，使用起来还是有点麻烦，于是参考了 &lt;code&gt;go trace&lt;&#x2F;code&gt; 的源码，把相关文件上传到了 CDN，然后在一个 html 文件里引用，这样只需一个文件即可。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!--
&lt;&#x2F;span&gt;&lt;span&gt;Copyright (c) 2014 The Chromium Authors. All rights reserved.
&lt;&#x2F;span&gt;&lt;span&gt;Use of this source code is governed by a BSD-style license that can be
&lt;&#x2F;span&gt;&lt;span&gt;found in the LICENSE file.
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text&#x2F;html; charset=UTF-8&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    body {
&lt;&#x2F;span&gt;&lt;span&gt;      font-family: arial, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script
&lt;&#x2F;span&gt;&lt;span&gt;    src=&amp;quot;https:&#x2F;&#x2F;sf1-ttcdn-tos.pstatp.com&#x2F;obj&#x2F;developer-baas&#x2F;baas&#x2F;ttnbrzs5vgcryya2z2&#x2F;7d1b75402231d1cd_1583755520315.js&amp;quot;&amp;gt;&amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;use strict&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    window.__hideTraceViewerPolyfillWarning = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    function onTraceViewerImportFail() {
&lt;&#x2F;span&gt;&lt;span&gt;      document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, function () {
&lt;&#x2F;span&gt;&lt;span&gt;        document.body.textContent =
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;#39;tracing&#x2F;bin&#x2F;trace_viewer_full.html is missing. &amp;#39; +
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;#39;Run vulcanize_trace_viewer from $TRACE_VIEWER and reload.&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;link rel=&amp;quot;import&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    href=&amp;quot;https:&#x2F;&#x2F;sf1-ttcdn-tos.pstatp.com&#x2F;obj&#x2F;developer-baas&#x2F;baas&#x2F;ttnbrzs5vgcryya2z2&#x2F;4b94a178762f4049_1583756222365.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    onerror=&amp;quot;onTraceViewerImportFail(event)&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    html,
&lt;&#x2F;span&gt;&lt;span&gt;    body {
&lt;&#x2F;span&gt;&lt;span&gt;      box-sizing: border-box;
&lt;&#x2F;span&gt;&lt;span&gt;      overflow: hidden;
&lt;&#x2F;span&gt;&lt;span&gt;      margin: 0px;
&lt;&#x2F;span&gt;&lt;span&gt;      padding: 0;
&lt;&#x2F;span&gt;&lt;span&gt;      width: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;      height: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #trace-viewer {
&lt;&#x2F;span&gt;&lt;span&gt;      width: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;      height: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #trace-viewer:focus {
&lt;&#x2F;span&gt;&lt;span&gt;      outline: none;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;use strict&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (function () {
&lt;&#x2F;span&gt;&lt;span&gt;      var viewer;
&lt;&#x2F;span&gt;&lt;span&gt;      var url;
&lt;&#x2F;span&gt;&lt;span&gt;      var model;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function load() {
&lt;&#x2F;span&gt;&lt;span&gt;        var req = new XMLHttpRequest();
&lt;&#x2F;span&gt;&lt;span&gt;        var isBinary = &#x2F;[.]gz$&#x2F;.test(url) || &#x2F;[.]zip$&#x2F;.test(url);
&lt;&#x2F;span&gt;&lt;span&gt;        req.overrideMimeType(&amp;#39;text&#x2F;plain; charset=x-user-defined&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        req.overrideMimeType(&amp;#39;contentType: &amp;quot;application&#x2F;x-www-form-urlencoded;charset=utf-8&amp;quot;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        console.log(url);
&lt;&#x2F;span&gt;&lt;span&gt;        req.open(&amp;#39;GET&amp;#39;, url, true);
&lt;&#x2F;span&gt;&lt;span&gt;        if (isBinary)
&lt;&#x2F;span&gt;&lt;span&gt;          req.responseType = &amp;#39;arraybuffer&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        req.onreadystatechange = function (event) {
&lt;&#x2F;span&gt;&lt;span&gt;          if (req.readyState !== 4)
&lt;&#x2F;span&gt;&lt;span&gt;            return;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          window.setTimeout(function () {
&lt;&#x2F;span&gt;&lt;span&gt;            if (req.status === 200)
&lt;&#x2F;span&gt;&lt;span&gt;              onResult(isBinary ? req.response : req.responseText);
&lt;&#x2F;span&gt;&lt;span&gt;            else
&lt;&#x2F;span&gt;&lt;span&gt;              onResultFail(req.status);
&lt;&#x2F;span&gt;&lt;span&gt;          }, 0);
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        req.send(null);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onResultFail(err) {
&lt;&#x2F;span&gt;&lt;span&gt;        var overlay = new tr.ui.b.Overlay();
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.textContent = err + &amp;#39;: &amp;#39; + url + &amp;#39; could not be loaded&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.title = &amp;#39;Failed to fetch data&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.visible = true;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onResult(result) {
&lt;&#x2F;span&gt;&lt;span&gt;        model = new tr.Model();
&lt;&#x2F;span&gt;&lt;span&gt;        var i = new tr.importer.Import(model);
&lt;&#x2F;span&gt;&lt;span&gt;        var p = i.importTracesWithProgressDialog([result]);
&lt;&#x2F;span&gt;&lt;span&gt;        p.then(onModelLoaded, onImportFail);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onModelLoaded() {
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.model = model;
&lt;&#x2F;span&gt;&lt;span&gt;        var urlParams = new URLSearchParams(window.location.search);
&lt;&#x2F;span&gt;&lt;span&gt;        var title = urlParams.get(&amp;quot;title&amp;quot;) || &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        document.getElementById(&amp;#39;title&amp;#39;).innerHTML = title;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onImportFail(err) {
&lt;&#x2F;span&gt;&lt;span&gt;        var overlay = new tr.ui.b.Overlay();
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.textContent = tr.b.normalizeException(err).message;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.title = &amp;#39;Import error&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.visible = true;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      document.addEventListener(&amp;#39;WebComponentsReady&amp;#39;, function () {
&lt;&#x2F;span&gt;&lt;span&gt;        var container = document.createElement(&amp;#39;track-view-container&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        container.id = &amp;#39;track_view_container&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer = document.createElement(&amp;#39;tr-ui-timeline-view&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.track_view_container = container;
&lt;&#x2F;span&gt;&lt;span&gt;        Polymer.dom(viewer).appendChild(container);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.id = &amp;#39;trace-viewer&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.globalMode = true;
&lt;&#x2F;span&gt;&lt;span&gt;        Polymer.dom(document.body).appendChild(viewer);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        var urlParams = new URLSearchParams(window.location.search);
&lt;&#x2F;span&gt;&lt;span&gt;        url = urlParams.get(&amp;quot;tracing_url&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        load();
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    }());
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用方式：&lt;code&gt;http:&#x2F;&#x2F;path&#x2F;to&#x2F;this.html?tracing_url=path&#x2F;to&#x2F;tracing.json&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cai-guo-de-keng&quot;&gt;踩过的坑&lt;&#x2F;h2&gt;
&lt;p&gt;JSON 文件里，如果出现 &lt;code&gt;AStart-BStart-AEnd-BEnd&lt;&#x2F;code&gt; 这样的交叉式多行数据，有可能会导致解析失败。解决方法就是拆解为正常的顺序 &lt;code&gt;AStart-AEnd-BStart-BEnd&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;还有，如果发现某个 Event 的 Start 和 End 明明在那里，但却还是报找不到 End 的话，通常是这个 End 被其他 Start 匹配了（即使名字不一样），所以 root cause 很可能是因为那个 solo Start。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;Trace Viewer 是一款强大的可视化利器，虽然通常被拿来做性能分析，但它的使用场景其实很广，至于能做出什么来，就看你的想象力咯。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>日本印象</title>
            <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/japan-impression/</link>
            <guid>https://limboy.me/posts/japan-impression/</guid>
            <description>&lt;p&gt;时常会从各种途径听到对日本的评价，有好的，有坏的。这次趁着十一假期，去大阪转了转，也来说一下自己的感受。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-zhong-she-ji&quot;&gt;注重设计&lt;&#x2F;h3&gt;
&lt;p&gt;设计是形式与功能的结合，尤其体现在一些细节上。到了大阪后，被带到了酒店，这可能是我见过的最不像酒店的酒店了：没有大堂，没有前台，没有帮你拎行李的小哥，不需要 check in。简单来说，通过合理的设计来避免人力成本。它的设计是这样的：在网上订好日期和房间，到了之后会有一个专门取钥匙的地方，没有锁，直接打开拿到钥匙就可以进房间了，退房的话只需把钥匙放回原处即可。这样的设计，导致除了同行人员，只在「酒店」遇见过一个人。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0003-1.jpg&quot;
        width=&quot;768&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;右侧就是取钥匙的箱子，找到对应的房间号打开，钥匙就在里面。然后我就在想一个问题：这种不加密传输关键信息的方式很容易被其他人破坏，更好的方式至少可以先在网上生成一个密码，然后根据密码来打开箱子。（后来又考证了下，钥匙应该是比预定时间不久放进去的，而且有摄像头，被偷的可能性不高，钥匙归还后箱子会被锁住）&lt;&#x2F;p&gt;
&lt;p&gt;房间的空间比较小，大概也就 20 平米左右，但在合理的布局和设计下，竟然也容得下两个人，而且该有的都有，甚至可以做饭和泡澡。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0006-1.jpg&quot;
        width=&quot;576&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0009.jpg&quot;
        width=&quot;768&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一些很贴心的设计，比如：地铁站出来之后会有指南路标，方便那些没有方向感的人；对着路面的空调会把排风扇的方向往下调避免直接吹到人；地铁除了标志出地名，还会标志出序号，如 Y18，Y19，报站名时也会报序号，这样不认识字的只要记住序号就行了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;14757607584718.jpg&quot;
        width=&quot;450&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;zhu-zhong-ta-ren-de-gan-shou&quot;&gt;注重他人的感受&lt;&#x2F;h3&gt;
&lt;p&gt;这点从上面的一些设计细节就能感受出来，其他的还有：晚上车会打近光灯，这样看着不那么刺眼；轻易不鸣喇叭，在奈良公园时，有个人在拐弯处没有注意到后面的车，还是按自己的节奏在走，虽然挡到了车，后来同伴发现后，喊了她让一下，车才开了过去；地铁也一样，大家一般都比较安静，不会大声说话，当然也有例外，从环球影城回来的那趟列车大家就畅快地聊开了；「车让人」也比较常见。&lt;&#x2F;p&gt;
&lt;p&gt;对弱势群体也很注重他们的体验，比如：洗脸的出水口处会有盲文；地铁的投币口会有盲文；连啤酒的掀盖处都有盲文；马路的红绿灯变成绿色时，还会有叫声，当时还在琢磨这是出于怎样的考虑，后来才想到这样可以更方便那些盲人或色盲过马路。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-shi-gan-jing-zheng-ji&quot;&gt;城市干净整洁&lt;&#x2F;h3&gt;
&lt;p&gt;不光是在日本，去的其他几个地方如台湾、清迈等也类似。更奇怪的是一路上连垃圾箱都很少。后来送我们去机场的司机有提到，他们自己会携带垃圾回收工具，如塑料袋。所以有时喝完水之后，不知该把空水瓶扔哪，就还是放回包里，回到住处再扔到垃圾箱。在这种情况下，还能有意识地不随地扔垃圾，确实不容易，放在国内不知道会是怎样的状况。&lt;&#x2F;p&gt;
&lt;p&gt;后来查阅了下资料，发现这是日本为了治理垃圾而想出的一个办法：减少公共场所的垃圾桶。并且减少垃圾工到居民区收垃圾的次数（然后垃圾就有可能会在家里堆积）。而且他们从小就开始定时扔垃圾、垃圾区分的教育，甚至有日历标明哪天可以扔，哪天不可以，我的天哪···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;man-hua-wen-hua&quot;&gt;漫画文化&lt;&#x2F;h3&gt;
&lt;p&gt;在去大阪的飞机上时就发现，坐我前排的日本的中年大叔，打开了 iPad 上的读书软件，当时就想日本人果然是爱读书啊，因为我身边的日本大爷就在看实体书。然后点击其中一项后，出来了动漫···&lt;&#x2F;p&gt;
&lt;p&gt;到了大阪之后发现，便利店里也有动漫书在卖，也能见到中学生模样的人在那蹭书看（当然，便利店里还有一些喜闻乐见的杂志）；地铁上也有不同年龄阶段的人在看漫画，包括广告都会有动漫的表现形式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-ye-de-fu-wu-xing-ye&quot;&gt;专业的服务行业&lt;&#x2F;h3&gt;
&lt;p&gt;这个从上飞机的那一刻就感受到了，由于是日本航空，所以空姐也都是日本的，面对每个乘客时都是微笑服务，然后表示感谢。飞机餐也比国内的好一个 level，用完餐后，还会递上糖果。&lt;&#x2F;p&gt;
&lt;p&gt;下了飞机之后，机场的入境协调人员和办理手续的都很有礼貌，笑脸相迎。然后就发现了一个现象（这个之后在其他场景也有发现，比如餐厅、停车场等），有不少「高龄工作人员」。查阅了一些资料，提到高龄工作人口比例上升是由于青年劳动者减少，加上快速高龄化人口挤压社会福利体系。这么看来日本的生活压力还是蛮大的。&lt;&#x2F;p&gt;
&lt;p&gt;再回来讲服务行业，第一天「导游」带我们到京都后，找了家餐厅，餐厅的服务员有几位是上了年纪的大妈，上来就表演了空手抓小强的绝技，然后不停地向我们道歉，服务的整个过程也都是很舒服，虽然菜很一般，而且贵！除了餐厅，像便利店这种级别的，店员的服务也丝毫不差。所以即使是当个服务员也不容易呢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;在大阪时，做了一件国内很少做的事：看了一个多小时的电视节目。期间几乎没有拿起手机，一个节目完了就换一个，而且是在语言不通的情况下。其中一个大概是讲当下热门关键字的，有点娱乐节目+新闻的形式，一看里面有个人很眼熟，细一看原来是北野武。还有一个看了挺长时间的节目是「电视购物」，跟国内「只要 998，快来购买吧」的氛围不同，没有夸张的语调，没有突出价格，在介绍了产品背景和功能后，还会把原理以通俗易懂的方式呈现出来，最后还有街头和演播厅的现场演示。看完之后就一个感觉：产品做的真细致，如果我是家庭主妇的话，很可能会买一个／一些。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是乌鸦真的不少。乌鸦在日本的地位还是挺高的，有「立国神兽」之称，走在路上时不时地能见到乌鸦飞过，而且体型是真大，发出的叫声自然也会大一些。不过这些乌鸦还是给日常生活带来了些麻烦，因为他们会把垃圾翻得到处都是（这可能也是减少公共垃圾桶的一个考虑点吧），据说比较好的方法是把黑色的垃圾袋换成黄色的（同学的毕业论文···）。&lt;&#x2F;p&gt;
&lt;p&gt;交通状况好，这可能跟城市有关，不过看了下大阪的人口密度：12,096&#x2F;km²，相比之下，杭州的人口密度为 1,479&#x2F;km²。在大阪没有遇到过堵车，就正常的红绿灯，而杭州则是另一种场景，再要下点雨就更崩溃了。&lt;&#x2F;p&gt;
&lt;p&gt;空气比国内的好不少，出发那天，杭州雾蒙蒙的，能见度不高，尤其是江上，一片朦胧。到了大阪，虽然也有重工业，但空气却还 OK，至少住的这几天都是如此。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0295.jpg&quot;
        width=&quot;768&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到房屋的间距比较小，应该跟面积小有关，楼层不是很高，我们住 10 楼，视野就很开阔了，可能跟地震频发有点关系。&lt;&#x2F;p&gt;
&lt;p&gt;女生普遍比较会化妆，这个在台湾也有感受到，就是无论浓、淡，都会打扮一番再出门，所以很容易见到美女（当然也跟底子好有关），对于男生来说这自然是一件幸福的事啦。&lt;&#x2F;p&gt;
&lt;p&gt;最后要抱怨的一点是英文普及率偏低，很多人都不太会讲英语，包括一些年轻人，会的话，也往往是那种日式英语（想起了那个 supplies 的笑话）。有在需要帮助的时候真是会比较累，往往要比划和猜测结合才能大概让对方明白以及明白对方的意思。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;总体来说，日本还是挺有自己的一套哲学的，虽然有时会有比较死板的感觉，比如一条比较窄的道，会有红绿灯，日本人往往要等到绿灯时才会过去，即使路面上明明没有车。在「照顾他人感受」这点上做得比较极致，包括日常的一些设计、行为举止等，甚至盖个楼都要用布围起来，避免噪音和灰尘，这也是让我印象颇深的一点。&lt;&#x2F;p&gt;
&lt;p&gt;对这个国家的印象还不错，希望有机会还可以再去体验下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>了不起的盖茨</title>
            <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-great-gates/</link>
            <guid>https://limboy.me/posts/the-great-gates/</guid>
            <description>&lt;p&gt;新购买了 Netflix 的付费会员，看到有推荐「Inside Bill’s Brain」就点开看了下，制作非常精良。分了三集来讲，主要描述了离开微软后盖茨在做的事，同时穿插了他的亲情、友情和爱情。&lt;&#x2F;p&gt;
&lt;p&gt;可能是受乔布斯影响，盖茨给我的感觉是不酷但挺能挣钱的，也知道盖茨现在主要在经营着他和妻子梅琳达的基金会，具体在做什么，怎么做非常模糊。借助这部纪录片，让我对盖茨有了更多的了解。结尾提到，他和妻子梅琳达都喜欢一本书：了不起的盖茨比，谈恋爱时，梅琳达的办公室有一盏绿灯，当她办公室没人了，就会点亮，盖茨就知道可以过去了。后来还把书里最喜欢的一句话刻到了自己家的图书馆上：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;His dream must have seemed so close that he could hardly fail to grasp it. He did not know that it was already behind him.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0004.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;影片中主要提到了盖茨在做的三件事：给非洲国家造厕所、消灭脊髓灰质炎（小儿麻痹症）、新能源（核能），每一件都困难重重，但对他来说又非常重要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gei-fei-zhou-guo-jia-zao-ce-suo&quot;&gt;给非洲国家造厕所&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-1-0001.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;众所周知，盖茨喜欢看书，有一天他看到一篇文章里提到「在第三世界，水依旧是致命的」，这些水会让很多孩子死去。因为污水被混进了生活用水里（他们无法忍受使用坑式厕所因为气味难闻，经常溢出，没有下水系统，于是选择随地排便），而孩子们可能在这些水里玩耍，部分水甚至会被用来饮用。于是他就开始思考全球健康问题，以及能做些什么。最直接的方式就是铺设一套下水系统，但这个成本太大，而且需要很多能源和水源，可行性较低。他就开始思索重新设计厕所和污水处理系统，而解决方案也很简单：提出一项竞赛，发明一种厕所，可以在没有水、电力或化粪池的情况下让厕所能够运转。这个周期会比较长，他又请人帮他发明一种新的处理厂，不会浪费水，也不会消耗很多能源。18 个月后这个机器被造出来了，但要在非洲国家正常运行难度不小，需要规模化生产以及维护人员等。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-13-0007.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0002.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0003.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0004.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0005.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0006.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有一段主持人问他：你最难过的是哪一天？盖茨说：妈妈去世的那天。他从小就喜欢看书，又极其聪明，父母也提供了非常好的成长环境，跟巴菲特的第一次会面也是母亲促成的，虽然盖茨声称 90 分钟后要回来写软件，但跟巴菲特一聊就是好几个小时。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人一开始都要先给成功下一个你自己的定义，有了这些对我们自身的具体期待，我们就更有可能成功。说到底，那不在于你得到了什么，甚至也不在于你给予了什么，而在于你成为了一个怎样的人。 — Mary Gates&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xiao-mie-ji-sui-hui-zhi-yan&quot;&gt;消灭脊髓灰质炎&lt;&#x2F;h3&gt;
&lt;p&gt;在微软的时候，盖茨会在每年抽一周的时间，把自己关在运河边的小屋里阅读和思考，吸收大量书籍和科技论文，帮助他理解未来的东西。现在他似乎把自己全部的生活都变成了一个漫长而持续的「思考周」。&lt;&#x2F;p&gt;
&lt;p&gt;基于「每个孩子都应该被平等地对待」的理念，他和妻子梅琳达向「消灭脊髓灰质炎」发起来冲击，但几年过去了，效果却不怎么好。这件事其实非常简单，只要给孩子注射疫苗就可以了，但又非常难，即使花了几十亿美元，还是无法完全消灭：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;尼日利亚的官方地图是 1945 年绘制的，志愿者根据这个地图无法有效地找到目标人群&lt;&#x2F;li&gt;
&lt;li&gt;一些宗教势力会对这种行为归结为「西方邪恶势力」，让行动难以展开&lt;&#x2F;li&gt;
&lt;li&gt;一些动乱地区的武装分子会以各种手段来阻挠这件事，比如杀害相关人员&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了绘制更精确的地图需要动用卫星和各种计算机技术；志愿者有限，为了更高效地覆盖目标群体，需要借助机器学习来预测；为了破除宗教势力的障碍，需要跟他们面对面沟通等等，真的是太难了。好在数据上确实变好了，但依然没有达到「零」目标，为什么要非零不可，盖茨是这么说的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了消灭一种疾病，如果你做到了零，那是很神奇的成就，因为，之后多少年，你都不用再花钱预防，不用去就救治，不会再有悲剧发生。但如果你试图消灭但失败了，那就很糟糕，因为你损害了全球医疗卫生事业的整体声誉和可信度&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于会涉及到大量的经费，他向老朋友巴菲特求助，而后者更是慷慨，拿出自己财产的一大部分给盖茨和梅琳达基金会，这也让他倍感压力和责任。「如果这是你要做的事，那就去做吧」，巴菲特对盖茨说。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的一个关键优势是我的狂热，我会全力以赴，不分昼夜，完全专注于如何写出好的软件。我喜欢狂热，我很享受，我不相信什么周末，我不相信度假。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0008.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0009.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0011.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0012.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0013.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0014.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0015.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这一集里也提到了盖茨的小伙伴们，上学时玩得最好的，到现在还能记得他家电话号码的小伙伴肯特，在一次登山中意外身亡；跟保罗一起经历微软的初创阶段，没日没夜地编程。可惜后来跟保罗之间出现了矛盾，直到保罗生命的尽头才算解开。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-neng-yuan&quot;&gt;新能源&lt;&#x2F;h3&gt;
&lt;p&gt;能源跟我们的生活息息相关，是现代生活方式的核心，目前这些传统能源（石油、煤矿、天然气）当被燃烧时，会向空气中释放二氧化碳，进而导致温室效应。而太阳能或风能之类的技术无法直接替代任何传统能耗，因为有巨大的存储成本，加上较低的转化率以及不受控。如今排向空气中的二氧化碳，会在大气中停留上百年，所以这需要在不同领域进行技术革新。常规创新可能会奏效，但周期较长（可能 50 年左右），于是盖茨开始寻找现在就能奏效的方式，他开始考虑那些被认为特别困难，风险又高的可能性：核能。核能最大的优势是能量密度极高，可以持续使用很多年，且不会有二氧化碳的排放。这里的难点有很多：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;化解人们心中对核能的恐惧&lt;&#x2F;li&gt;
&lt;li&gt;被设计地极其安全，即使是最差情况也不会导致核泄漏&lt;&#x2F;li&gt;
&lt;li&gt;搞定理论和实践层面上的难点&lt;&#x2F;li&gt;
&lt;li&gt;规模化生产&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;他找到了收购一家公司时认识的一位同学（此人也是个奇才，14 岁上大学，发表了 5 本关于面包的书，还研究了下小行星）来一起搞这件事。在科学家和工程师的努力下，这个足够安全的核能被研发了出来，而且经过了艰难的谈判后，终于可以在中国进行规模化生产，结果赶上了中美贸易战，这个计划被迫取消。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我觉得，比尔有种感觉，觉得自己不年轻了，今后的时间不多了，也许是子女去上学了，也许是朋友病倒了，越来越意识到来日无多了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0001.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0002.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0003.jpg&quot;
        width=&quot;1280&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这一集里还提到，他被垄断案搞得焦头烂额，好在最终被证明是清白的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当遇到任何问题，我都会考虑，能否用技术创新来解决，我就知道这个，我就擅长这个，所以，那就是我应对一切问题的方式&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;盖茨的这几个项目都极其困难，进展地也不顺利，他说他需要更加努力。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你遇到一个想要改变世界的人，一个永不放弃的人，一个有着比尔这样头脑的人，你很难不被感动，但也很难不产生疑问，他是不是陷的太深？他能解决这些问题吗？或许永远渴望不可及？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>癌细胞的成长史</title>
            <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/cancer/</link>
            <guid>https://limboy.me/posts/cancer/</guid>
            <description>&lt;p&gt;对癌细胞的工作机制有点好奇，于是就研究了下。&lt;&#x2F;p&gt;
&lt;p&gt;癌细胞是正常细胞基因突变的产物，当然不是每次突变都会产生癌细胞。突变发生的次数其实还挺多的（概率很低，架不住细胞分裂次数很多），但我们的 DNA 上有 30 亿个碱基对，而只有不到 30000 个碱基对组成了基因（就像一个 10G 的硬盘，只放了不到 1M 的内容），只有特定基因发生了变异才有可能产生癌细胞。&lt;&#x2F;p&gt;
&lt;p&gt;癌细胞可以无限增殖、浸润和转移，对应着癌症的不同阶段。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-xian-zeng-zhi&quot;&gt;无限增殖&lt;&#x2F;h3&gt;
&lt;p&gt;当基因突变发生在了两种基因上原癌基因和抑癌基因时，就比较危险了。前者发生变异可以无视生长刺激信号，按着自己的节奏来；后者发生变异可以让凋亡信号发送不出来，这样就几乎实现了永生，不过还需要搞定「端粒酶」。体细胞每次分裂，DNA 顶部的端粒（可以想象成一顶帽子）就会被消耗一些，等到消耗完了，就无法进行下一轮分裂了，通常这个过程可以持续 40 - 60 次（海佛烈克极限）。而干细胞则不一样，它们可以不断分裂，分化成身体的不同组织，还可以补充其他死亡、衰老的细胞，如神一般的存在，原因就在于干细胞里的端粒酶被正常表达，它可以对端粒进行修复，而体细胞里的这个开关则是关着的，因此用一截少一截。癌细胞要实现无限增殖就需要把这个开关也打开。&lt;&#x2F;p&gt;
&lt;p&gt;我们的免疫系统也不是吃干饭的，一旦发现有基因突变的细胞，通常都会处理掉，扼杀在摇篮阶段。不过有时也会有漏网之鱼，毕竟日防夜防，家贼难防。为了生存，癌细胞在分裂的过程中也在不断进化，以此来抵抗、欺骗免疫系统。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-run&quot;&gt;浸润&lt;&#x2F;h3&gt;
&lt;p&gt;即使已经具备无限增殖的能力，营养跟不上也一样白搭，机智的癌细胞会释放一些促进血管新生的因子来欺骗血液循环系统，慢慢地周边就会长出越来越多细小的血管，这样红血球就可以很方便地把氧气、养分送进去滋养癌细胞了。随着癌细胞的不断分裂，就会开始侵犯周围的其他细胞。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-yi&quot;&gt;转移&lt;&#x2F;h3&gt;
&lt;p&gt;不甘心只在一个地方待着，癌细胞们也想着拓展疆土（这做事风格跟人类很像啊···），这就需要借助血液循环系统或淋巴系统，不过首先需要冲破当前组织最外层的膜。出来之后如果选血液系统就要接受白细胞的挑战，如果选淋巴系统就要做好在淋巴结里苦战一番的准备。假如成功地来到了目标器官，很可能会不适应，要么立即死亡，要么分裂几次后死亡，存活率极低。如果活了下来，那么这个器官就成了第二基地，也就成功实现了转移。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-nian-ling-de-guan-xi&quot;&gt;与年龄的关系&lt;&#x2F;h3&gt;
&lt;p&gt;从癌细胞形成到演变成癌症需要很长的时间，大概是 20 - 30 年，而且年龄越大，概率越高。因为细胞分裂的次数越多出错的概率就越大，同时免疫细胞的功能也会越来越差。根据美国在 2010 年的统计，每三个女人和每两个男人中就有一位将在生命的某个阶段罹患癌症。所以对于一个 8 口之家来说，其中一人得癌症的概率还是挺大的。&lt;&#x2F;p&gt;
&lt;p&gt;不过好在医学在进步，对癌症的认知也在发生变化。美国在 1970 年的诊断后 10 年存活率为 24%，2010 年这个数据上升到 50%，翻了一倍，而且有望在 20 年后提升到 75%。所以癌症，尤其是早期并没有想象中的那么可怕。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-dui-ce-lue&quot;&gt;应对策略&lt;&#x2F;h3&gt;
&lt;p&gt;预防优于筛查优于治疗。&lt;&#x2F;p&gt;
&lt;p&gt;预防的话，多运动、戒烟酒、多吃蔬菜水果、注意 PM2.5、减肥，这些都是常规项，还有一些比较隐蔽的，比如避免暴晒（紫外线）、不要喝太烫的饮料（65 度以上的热饮被定义为致癌物）、避免感染（混餐制导致的幽门螺旋杆菌感染）、远离包含黄曲霉素喝马兜铃酸的食物和药物。&lt;&#x2F;p&gt;
&lt;p&gt;治疗的话，如果是前期，其实没什么风险，手术切掉即可，最怕的就是已转移，也就是恶性肿瘤。除了传统的化疗外，还可以靶向治疗（找到癌细胞的靶进行精确打击，不过这个因人而异），免疫疗法（让免疫系统认识癌细胞，进而将它们消灭）等，手段还是挺多的。&lt;&#x2F;p&gt;
&lt;p&gt;最后推荐两个视频，一个是李治中博士的一席演讲：癌症的真相。里面会有更多的数据，讲得也很亲民。另一个是「工作细胞」，讲的是身体里各个细胞的功能，也会讲到免疫系统的工作原理，通过动漫的形式来表达，非常日系，一点都不枯燥，甚至还有点燃···&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>对职业发展的一些想法</title>
            <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/career/</link>
            <guid>https://limboy.me/posts/career/</guid>
            <description>&lt;p&gt;在职业发展这条路上我们会发现有些人走得很顺畅，节节高升，而另一些人则原地踏步或爬得很累，感觉自己已经很努力了，却总是与机会擦肩而过。就像搭错墙的梯子，可能辛辛苦苦地爬了上去，结果却不是自己想要的。因此如果总是在错误的方向上使劲，就不要指望会出现正确的结果。&lt;&#x2F;p&gt;
&lt;p&gt;在我看来，跟职业发展最相关的两个因素是：&lt;strong&gt;稀缺度&lt;&#x2F;strong&gt;和&lt;strong&gt;剩余市场空间&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xi-que-du&quot;&gt;稀缺度&lt;&#x2F;h2&gt;
&lt;p&gt;稀缺度也就是你的优势，比如专业能力突出，或者综合能力很强等等，通常来说需要一定时间的积累。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;1.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;理想状态下，稀缺度的增长是一条斜率固定的斜线，比如一些日企对工龄和职位很讲究，在公司待的时间越长，就越有优势。不过也有可能在某一行做了很久，但只是在重复昨天的故事，稀缺度的增长非常有限，斜率会比较小。同样的稀缺度，新人可以在更短的时间内达到。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;2.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过现实生活中很少有事物的发展是线性的，比如在入行的前一段时间增幅很慢，甚至做了好几年也没见得有什么起色，但好像慢慢地事情开始有了变化，增幅越来越快，就像下面这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;3.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;房产中介就是一个例子，一开始没什么客户资源，想买房或卖房都不会主动来找他。做的时间长了，口碑慢慢有了，客户资源多了，这些因素叠加在一起，就会出现稀缺性的陡增，好像之前播的种都开始开花结果了。&lt;&#x2F;p&gt;
&lt;p&gt;也有不少情况是后期的稀缺度会逐渐降低，因为年龄本身就是一个减分项，尤其是那些对年龄较敏感的行业，比如程序员、服务员。如果没有做出过什么成绩、也没什么影响力、对行业又缺少热情，那么很容易被新人取代。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;4.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;也有些人初期很拼，具备足够高的稀缺度，后来节奏放了下来，斜率也越变越小。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;5.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以，职业发展的一个重要因素就是培养自己的有效稀缺度。&lt;&#x2F;strong&gt;「有效稀缺」和「无效稀缺」的区别在于是否为市场所认可。比如一个程序员如果对产品也有不少心得和经验，这就是有效稀缺；同样是一个程序员，如果相声说得很好，可能加分就不那么多了（但可以给团队带来欢乐，还是加分的）；如果可以单手做 50 个俯卧撑，这样的配搭虽然也很稀缺，但这两个放一起无法形成合力，属于无效稀缺。&lt;&#x2F;p&gt;
&lt;p&gt;当我们面临一些选择时，选对了和选错了，结果往往会大不相同，从稀缺度的角度来看，可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;6.jpg&quot;
        width=&quot;268&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个往往是选了一条容易的路。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;7.jpg&quot;
        width=&quot;233&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个通常是选了个 hard 模式。&lt;&#x2F;p&gt;
&lt;p&gt;所以跳槽如果不能增加有效稀缺度，即使短期来看收益不错，从长远来看可能是弊大于利。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-ti-sheng-xi-que-du&quot;&gt;如何提升稀缺度&lt;&#x2F;h3&gt;
&lt;p&gt;最简单的方式是把自己投放到合适的环境中，如何才算是合适的环境呢？我觉得是「平级同事平均比你厉害 20%」。20% 自然是大概值，想表达的意思是可以从他们身上学到不少，同时又不会由于差距过大而出现沟通障碍。&lt;&#x2F;p&gt;
&lt;p&gt;除了「稀缺度」外，决定职业发展的另外一个重要因素是「剩余市场空间」。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sheng-yu-shi-chang-kong-jian&quot;&gt;剩余市场空间&lt;&#x2F;h2&gt;
&lt;p&gt;剩余市场空间就是市场对该稀缺度的需求程度，这里涉及到市场本身的大小和当前的饱和状况。比如 10 年前一个能修诺基亚全系列的人具有很高的稀缺度，也有不错的市场空间，但 10 年后，这个市场几乎已经没有了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;8.jpg&quot;
        width=&quot;422&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图上右边的那部分表示该稀缺度对应的市场空间，灰色表示该空间已被满足的部分，空白部分就是剩余市场空间，像上面这张图就表示这个市场还远未饱和，此时该稀缺度的人才会很受欢迎。&lt;&#x2F;p&gt;
&lt;p&gt;最理想的模式就是，市场空间足够大，同时满足需求的人才又不多，就像这样（比如当年的移动互联网初期），不过这样的时机并不多。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;9.jpg&quot;
        width=&quot;590&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一段时间过后，可能就会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;10.jpg&quot;
        width=&quot;422&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这时会发现可选的机会越来越少，解决之道要么继续提升稀缺度，要么找一个足够大的剩余市场空间。不过不太建议选后者，因为你看到的跟实际的剩余市场空间往往不匹配，甚至很不匹配。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;职业发展是大事，建议每个季度在完成公司的 KPI 之外，也 Review 下自己的稀缺度和当前的剩余市场空间，发现苗头不对，可以早做准备。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我们是如何「看见」的</title>
            <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/see/</link>
            <guid>https://limboy.me/posts/see/</guid>
            <description>&lt;p&gt;细想一下，我们能看见这个五彩缤纷的世界不是很神奇么？相机高级如 P30 也只能拍出平面的照片，而我们看到的世界是立体的；可见光只是电磁波谱中的一段，怎么就能看见颜色了？让我们来简单了解下其中的奥义。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-zhuang-ti-he-jie-zhuang-ji&quot;&gt;晶状体和睫状肌&lt;&#x2F;h3&gt;
&lt;p&gt;人眼跟相机有点类似，相机的成像原理是反射在物体上的光通过透镜投射到后面的感光元件上。这里有一个焦距的概念，下面中间那张清楚的图片到透镜的距离就是焦距（真实比例的焦距会短很多），在焦距前后的图像就会模糊（离得越远越模糊）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;1.png&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们的眼睛也是类似的一个系统，其中那块透镜就是「晶状体」。如果它是一块固定的镜片，那么只有眼前特定距离的景物是清晰的，也就是一台定焦相机。为了方便切换近景和远景，就需要晶状体具有一定的调节能力，比如在看远处的景物时，平一点；在看近处景物时，凸一点。&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;2.png&quot;
        width=&quot;591&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;3.png&quot;
        width=&quot;368&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要做到效果，就需要睫状肌来帮忙（图中晶状体两侧，它是睫状体的主要组成部分），想象有两只手在挤压晶状体，它就变得更圆了，就能看清楚近处的事物。但如果一直这么挤压着（比如一直盯着手机），它就可能变得麻木，想让它松开时反而不松了，结果就是看远处景物时会出现模糊，也就是近视。对于假性近视来说，睫状肌还有可能恢复，而真近视就只能戴一个凹透镜或做手术了（手术的原理是把晶状体切薄）。远视正好相反，想让这两只手挤压的时候反而不工作了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-wang-mo&quot;&gt;视网膜&lt;&#x2F;h3&gt;
&lt;p&gt;视网膜就是相机里的感光元件，它需要把光信号解析成电信号，然后再把这个信号通过视神经传给后面的神经系统，因此就会有两个部分：光感受器细胞层和神经节细胞层（好比电线）。正常来说，光线直接打到光感受器细胞，然后再通过神经节细胞往后传，但是，这里貌似出了个 Bug，人眼的这两层装反了···&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;4.png&quot;
        width=&quot;720&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;电线放在了上层，于是光要到达光感细胞层，还需要穿过这一层电线，同时区域 4 变成了盲点，因为这里没有光感细胞。正常来说，右图的设计会更合理，也确实有生物的视网膜是这样的。&lt;&#x2F;p&gt;
&lt;p&gt;那如何来修复这个八阿哥呢？不知道是谁想出了个办法，找个地方把电线扒开，这样就能让光直接照到下面的光感细胞，这就是「中央凹」。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;5.jpg&quot;
        width=&quot;683&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图那块凹下去的区域就是中央凹，在这里下层的光感细胞可以充分地沐浴在光线下，因此成像也最清晰。注意到，个凹下面有很多的视锥细胞，周围有很多的视杆细胞，它们又是做啥用的？&lt;&#x2F;p&gt;
&lt;p&gt;这两类细胞分别具有不同的超能力，视锥细胞负责捕捉颜色，视杆细胞对光线更敏感（弱光环境下主要靠它了）。我们有三种视锥细胞，蓝锥、绿锥和红椎，分别对蓝光、绿光和红光最敏感（严格说来是让特定波长的电磁波可以对应到特定的颜色，所以世界本无颜色，只有不同频段的电磁波，人眼将其中的一部分「翻译」成了颜色）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;6.jpg&quot;
        width=&quot;808&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以，这三种光的不同比例就能勾兑出不同的颜色，包括白色（试了下，将叠加模式设为「屏幕」，就能得到白色）。缺乏红椎或绿椎细胞就会出现红-绿色盲，比如缺乏绿椎细胞的对绿色的敏感度比较低，对正常人而言是正常的红色和绿色，在他们看来很容易混淆。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;7.png&quot;
        width=&quot;508&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;狗也缺少接受红色的视锥细胞，因此它们能看到的颜色不如我们多，也有一些大神，如皮皮虾，它们有 16 种视锥细胞，甚至能够看到紫外线和红外线，所以，在皮皮虾看来，这个世界一定是极其绚烂的。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说视杆细胞，它不具有颜色辨识能力，但它对光的敏感性比视锥细胞高了 1000 倍，在夜间或暗环境下，通常只有视杆细胞在起作用（光线好时，则主要靠视锥细胞），这也是为什么暗环境下很难分辨颜色。虽然猫和狗的视锥细胞不如我们，但视杆细胞却比我们多，因此黑暗中，它们的视力要优于我们。&lt;&#x2F;p&gt;
&lt;p&gt;光感受器获取了这些信息之后，还需要进一步的加工，将信息的不同要素抽取出来，然后才会给到神经节细胞（也就是上面说的电线）。就像我们要描述一个物体时，会说它的颜色是什么，形状是怎样的，是不是在动等等，在传递给视神经之前，视网膜也需要对这些信息进行整理。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;8.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;dui-shi-jie-de-jie-shi-zhong-shu-shen-jing-xi-tong&quot;&gt;对世界的解释 — 中枢神经系统&lt;&#x2F;h3&gt;
&lt;p&gt;是的，是解释。比如下面这张图，怎么看都会觉得左边的更长一点，右边的更宽一点，因为这是大脑的计算结果（虽然跟事实不符···）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;9.jpg&quot;
        width=&quot;1142&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们对周围世界的视觉感知主要依赖从视网膜所提取的信息，以及中枢神经系统对这些信息的解释。外部的光线投射到视网膜上时是平面的，为什么看起来世界是立体的呢？这跟眼睛的分布有关，我们的眼睛在脸的左右，两边的视网膜产生的图像会有细微的差异，中枢神经系统会根据这些差异计算出事物与我们的距离并构建出一个三维世界（也可以用两张有细微差异的图片来「欺骗」大脑，从而看到三维的效果）。所以我们获得到的视觉信息是二维的，但在大脑的运算下又多了一维。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;see&amp;#x2F;10.png&quot;
        width=&quot;270&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于那些眼睛分布在两侧的小动物们（比如兔子），它们看到的世界又是怎样的呢？兔子可以看到几乎 360 度的位置（两边各为 180 度还多），这样的话，中间的交叉区域就比较小了，因此只在鼻子前 30° 左右的上方范围可以产生立体感，其他部位与下方都仅有光影，没什么深度感（另外跟狗狗一样，兔子的视锥细胞中也缺少红椎细胞，所以看到的色彩也较少）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;「看见」这个过程还是挺复杂的，在我看来最有意思的，还是其中的「翻译」和「解释」，将特定频率的电磁波翻译成特定颜色，大脑将两张平面的图形解释为立体图形，而且极其高效和准确。所以当世界变得不如意时，不妨调整下看待世界的方式，或许就能和解了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>也来说说黑洞吧</title>
            <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/blackhole/</link>
            <guid>https://limboy.me/posts/blackhole/</guid>
            <description>&lt;p&gt;人类史上第一张直接拍摄的黑洞照片已经出来了，扎扎实实地确认了黑洞的存在，虽然以前从理论和间接观测都得到同样的结果，毕竟不如直接证据证据有说服力，而且还能更多地了解黑洞。就像我们都用微信，都知道有张小龙这个人的存在，如果哪天一起坐下来吃顿饭，还拍了个合照，这感觉就很不一样了。&lt;&#x2F;p&gt;
&lt;p&gt;要说黑洞，自然离不开伟大的爱因斯坦，不过先不急，我们先从欧几里得开始说起。这个人的厉害之处在于提出了一套「公理化方法」，由极少数不需要证明的公理，衍生出许多可被证明的定理，再通过这些定理去解决具体的数学问题。&lt;&#x2F;p&gt;
&lt;p&gt;他提出了平面几何的五条公理：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;从一点向另一点可以引一条直线。&lt;&#x2F;li&gt;
&lt;li&gt;任意线段能无限延伸成一条直线。&lt;&#x2F;li&gt;
&lt;li&gt;给定任意线段，可以以其一个端点作为圆心，该线段作为半径作一个圆。&lt;&#x2F;li&gt;
&lt;li&gt;所有直角都相等。&lt;&#x2F;li&gt;
&lt;li&gt;若两条直线都与第三条直线相交，并且在同一边的内角之和小于两个直角，则这两条直线在这一边必定相交。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;其中第 5 条又可导出这个命题：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过一个不在直线上的点，有且仅有一条不与该直线相交的直线。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;有没有发现第 5 条特别长，看上去也不太自然，于是许多几何学家尝试用其他公理来证明这条公理，但都没有成功。正着来不行，那就反正来，于是就有了非欧几何，黎曼 以「一条平行线也不能引」为新公设，引出黎曼几何（椭圆几何）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;1.png&quot;
        width=&quot;391&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可能黎曼自己都不知道，他这套几何体系到底能用来干什么，在爱因斯坦手里却成了完善广义相对论的有力武器（爱因斯坦之前不太重视数学，这让他吃了不少亏）。广义相对论是用来描述引力的，在这之前牛顿的万有引力定律已经盛行了 200 多年，几乎没有问题（跟水星的自转轨道实际结果有点微小出入），但它没有解释引力到底是啥。在爱因斯坦眼里，引力就是时空的弯曲，就像一个很重的球被放在一张被拉紧的橡皮膜上。橡皮膜会在球的周围向下弯曲。如果你在橡皮膜上涂上肥皂，任何在橡皮膜上行走的东西，如果走到弯曲的部分，就会向下滑向那只球。宇宙的构造就像是一个 3D 或者 4D 不可见的膜。引力就仅仅是宇宙弯曲的结果。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;2.gif&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过广义相对论，可以预言某些大质量恒星终结后，会形成时空极度扭曲以至于所有物质（包括光）都无法逸出的区域，黑洞，虽然爱因斯坦本人并不愿意相信黑洞的存在。类似的情况也发生在了量子领域，为了解释黑体辐射，他提出光的能量在空间中的分布不是连续的，而是由有限数目的「能量量子」组成，能量量子不可再分，然后就打开了量子理论世界的大门，但当玻尔等人进去后告诉他里面的世界有多神奇时，他却不愿相信，因为「上帝不掷骰子」。&lt;&#x2F;p&gt;
&lt;p&gt;再来说回黑洞，黑洞是由质量足够大的恒星在核聚变反应的燃料耗尽后，发生引力坍缩而形成。以我们的太阳为例，太阳作为一颗恒星，它的引力是很大的，会把周围的物质（主要是氢原子）拉向核心，以巨大的压力挤压它们，然后电子就被挤走了，原子核们重新结合成更大的原子核（氮、碳、氧等），这个过程会损失一部分质量，爱因斯坦说质量跟能量其实是一回事（质能方程），虽然两个原子核融合释放的能量比较少，但抵不住原子多啊，这些核聚变产生的能量向外扩张正好跟引力带来的内向压力平衡，因此太阳有一个稳定的大小（PS：地球上的一些多质子原子，比如金子，其实是上一代或上上一代恒星爆炸的产物···）。&lt;&#x2F;p&gt;
&lt;p&gt;太阳死后会变成黑洞么？不会，因为它质量不够大，只会变成白矮星。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;3.jpg&quot;
        width=&quot;912&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那黑洞到底是啥？（是不是很像小程序二维码···）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;4.png&quot;
        width=&quot;274&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;黑洞是一块质量极大的天体，但它的中心却极小，比原子核还要小 1 万亿倍，没有什么能逃得过它的引力，光子也不行，因此外部无法直接观测到它（因为光出不去）。三体里提到过一个「黑域计划」，可以实现在宇宙尺度上实现安全声明从而避免黑暗森林打击，原理是让光的真空速度变为第三宇宙速度——连光都无法离开太阳，从远处看这里就是一篇空白，但人类也因此永远无法离开太阳系。&lt;&#x2F;p&gt;
&lt;p&gt;下面这张图部分同学应该非常熟悉···&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;5.jpg&quot;
        width=&quot;700&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那到底离黑洞中心多远才有可能不被吸进去呢？这就要引出「视界」的概念，假定存在这么一个球面，在这个球面内发出的光不可避免地被拉回黑洞，而从球面外发出的光能逃脱黑洞的引力，这个球面就是视界，球面到中心的距离也被称为「史瓦西半径」。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;6.jpg&quot;
        width=&quot;605&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那这些被吸引去的东西，会变成什么呢？会从其他地方以某种形式出来么？这个就不知道咯，可能里面还有一个小世界，它们在里面过着幸福的生活也说不定···&lt;&#x2F;p&gt;
&lt;p&gt;那么问题来了，这个看不着的东西，如何证明它的存在？最好的办法自然是派一个信使进去，全方位测量之后，再把结果送出来，只可惜任何东西一旦被吸进去就再也出不来了，这个测量信息自然也无法送出来。看起来只能间接地观察了，怎么做呢？还是从电磁波入手。在远离黑洞的地方，气体原子很冷，只有绝对几度，因为冷，它们振动慢，缓慢的振动产生缓慢振荡的电磁波，这些就是无线电波；在离黑洞较近的地方，引力作用下的原子流较快，它们相互碰撞，加热到几千度的高温，它们振动较快，发出振荡较快、波长较短的波，也就是不同颜色的光；离黑洞更近的地方，引力更强，原子流更快，碰撞更剧烈，温度更高（几百万度），原子极快地振动，产生波长很短的电磁波：X 射线（离中心更近的地方还会发射出 γ 射线）。通过捕捉这样的射线就能感知到黑洞的存在，甚至描绘出它的模样（X 射线和我们看到的不同颜色的光本质上没什么区别，只是波长不一样的电磁波）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;blackhole&amp;#x2F;7.jpg&quot;
        width=&quot;960&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这次拍摄也是用了类似的方法，就像用 X 光照射身体的某个部位可以得到一张影像一样，只是拍黑洞的难度要大得多。随着对黑洞了解的加深，不知道还会挖出什么有趣的东西，拭目以待吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于脑，你可能想知道的</title>
            <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/brain/</link>
            <guid>https://limboy.me/posts/brain/</guid>
            <description>&lt;p&gt;脑是极其复杂的，即使到现在我们对它的认识仍然处于非常初级的阶段。哈佛大学的 Jeff Lichtman 教授在开课之前问学生：“如果我们需要了解的大脑的知识是一英里长，那么我们现在处在什么距离上？”学生有的回答半英里，四分之一英里等等答案，但是他会觉得正确的答案是“三英寸”（1 英里 = 63360 英寸）。神经科学家 Moran Cerf 说：如果人类的大脑这么简单，能够让我们理解，那我们将会因为如此简单，而不能理解大脑。不过对大脑的研究持续了这么长时间，加上科技的加成，一些宏观上的功能还是比较有底的。&lt;&#x2F;p&gt;
&lt;p&gt;正文开始前，先留几个问题，感兴趣的话不妨继续往下看&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;爬行动物有脑，哺乳动物也有脑，人脑跟其他脑相比，最大的特点是什么？（貌似进入了面试的场景···）&lt;&#x2F;li&gt;
&lt;li&gt;为什么给自己挠痒痒没有效果？&lt;&#x2F;li&gt;
&lt;li&gt;为什么可以在梦里看见离奇的场景而自己又无能为力？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nao-de-zu-cheng&quot;&gt;脑的组成&lt;&#x2F;h2&gt;
&lt;p&gt;脑在小的时候，相对比较简单，层次也较分明，主要分为前脑、中脑和后脑。前脑又可以分为端脑和间脑。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;1.png&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;到了发育后期，前脑虽然在结构上没什么变化，但是大脑皮层长大了很多，中脑变化不大，后脑分化成了：小脑、脑桥和延髓（图中的脑干由中脑、脑桥和延髓组成。）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;2.jpg&quot;
        width=&quot;1254&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以，对脑的结构进行解构的话，大致可以分成这么几个部分：

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;3.jpg&quot;
        width=&quot;2350&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qian-nao&quot;&gt;前脑&lt;&#x2F;h3&gt;
&lt;p&gt;前脑包含端脑和间脑，端脑就是那一大坨沟沟回回的褶皱（像一盆被端上去的豆腐···），间脑就是卡在中间的那部分脑。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;duan-nao&quot;&gt;端脑&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;pian-zhi-ti&quot;&gt;胼胝体&lt;&#x2F;h5&gt;
&lt;p&gt;我们都知道大脑有左右两部分，这两部分的协同工作全靠胼胝体（出于好奇，查了下「胼胝」是什么东东，其实就是老茧···）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;4.jpg&quot;
        width=&quot;720&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图上绿色的部分就是胼胝体，它就好像是海底电缆，有了它才能实现左右脑高速互联。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;da-nao-pi-ceng&quot;&gt;大脑皮层&lt;&#x2F;h5&gt;
&lt;p&gt;这些沟沟回回就是著名的大脑皮层（新皮层），很多高级功能都在这个皮层里。按功能来分的话，可以分为：运动区、感觉区和联合区。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;5.jpg&quot;
        width=&quot;602&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到联合皮层占了很大一部分，这就是人脑最独特的地方，正是这块区域赋予了人认知的优势。海豚的大脑皮层虽然也很大，也有很多的沟和回，但联合皮层的分布比人脑会少得多，不过光是如此已经让海豚足够聪明了。&lt;&#x2F;p&gt;
&lt;p&gt;那这些运动区和感觉区是啥意思？简单来说就是输入（感觉）和输出（运动），人体的各个部分可以对应到皮层的特定区域，就像大脑里住了两个小人：感觉小人（左边）和运动小人（右边）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;6.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;皮层展开后大概有两张报纸那么大&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;8.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;根据空间位置，大脑皮层可以被分为几个叶：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;额叶：高级认知功能，比如学习、语言、决策、抽象思维、情绪等，自主运动的控制。&lt;&#x2F;li&gt;
&lt;li&gt;枕叶：视觉处理&lt;&#x2F;li&gt;
&lt;li&gt;顶叶：躯体感觉，空间信息处理，视觉信息和体感信息的整合。&lt;&#x2F;li&gt;
&lt;li&gt;颞叶：听觉，嗅觉，高级视觉功能，分辨左右，长期记忆。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;9.jpg&quot;
        width=&quot;475&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h5 id=&quot;e-xie&quot;&gt;额叶&lt;&#x2F;h5&gt;
&lt;p&gt;在人类大脑当中，比起其余脑中的“叶”，这是最大的一部分。前额叶皮层是与许多高级认知功能相关的关键脑区。例如，在抽象规则的认知、工作记忆、注意力调控，以及行为的计划和策略、思维和推理等功能中起着关键性的作用。「飞越疯人院」里，麦克墨菲最后被切除了前额叶，就变得非常温顺和听话，因为失去了高级认知功能。&lt;&#x2F;p&gt;
&lt;p&gt;PS：「额叶切除手术」的发明者居然获得了 1949 年的医学诺贝尔奖，而前一年的医学奖颁给了发明剧毒有机氯杀虫剂 DDT 的瑞士化学家米勒，这可能是诺奖最瞎的两年···&lt;&#x2F;p&gt;
&lt;h5 id=&quot;zhen-xie&quot;&gt;枕叶&lt;&#x2F;h5&gt;
&lt;p&gt;枕叶就是平常睡觉时贴着枕头的那片区域，枕叶跟视觉处理有关。「看见」这个行为需要进行一系列的处理（视觉通路）：光线进入到视网膜后被转化成了电信号，然后沿着视神经快速穿过脑部，到达脑的交换机 — 丘脑，在这之后视觉信息被输送到了脑后的枕叶，再传送给了那里的视觉皮层。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;10.jpg&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;视觉皮层将处理信号的工作分成了几个部分，让它们分别计算距离、形状、色彩、尺寸和速度。任何一个部分只要稍微出些差错，就会造成明显的视觉扭曲。更神奇的是，视觉皮层还会根据运算结果，构建出一个对外部世界的解释。比如下面的「卡尼撒三角」：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;11.png&quot;
        width=&quot;236&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;尽管白色的三角形没有画出来，但我们分明看到它就在那儿。人脑会识别并且预测悉熟的模式，以此将思维的率效提到最高。比如前面这句话有几个词是颠倒顺序的，但你可能并没有注意到。&lt;&#x2F;p&gt;
&lt;p&gt;接下来说说做梦，我们经常会梦到一些离奇的场景，一些不相关的人和事往往会糅合在一起，以富有创意的情节在推进。它的大概流程是这样的：当进入快速眼动睡眠（REM）时，梦境系统开始接管丘脑和视觉皮层，醒着的时候，丘脑的素材来自眼睛，做梦时，它的素材则来自脑干（丘脑只是一部交换机，它不关心素材来自哪里，只是一股脑地将它们传给视觉皮层）。视觉皮层拿到脑干随机产生的这些信号该怎么办？这就到了见证奇迹的时刻，它会尝试从这些信号中理出头绪，将它们串联起来，形成一段完整的故事，而且是边写剧本边演。&lt;&#x2F;p&gt;
&lt;p&gt;梦虽然奇怪，但为什么置身其中时，却往往感觉不到，只有醒来时才会觉得荒诞，因为执行高级决策的前额叶也休息了（毕竟是耗能大户），就像一个没有大人管的娃···&lt;&#x2F;p&gt;
&lt;p&gt;除了做梦外，视觉皮层还可以用来做一些其他的事情，比如「心理意向训练」。据说老虎伍兹在重要比赛之前都会开车到比赛场地，在那里练上几轮，回家后就躺在床上练习那些比赛中需要的击球。&lt;&#x2F;p&gt;
&lt;p&gt;我们通常说的「肌肉记忆」其实并不是肌肉产生了记忆，而是控制特定肌肉的神经系统仿佛有了记忆。所以「想象训练」就是训练这些特定的神经系统，让它们长点记性。有人做了一个实验，要求用手把这些数字从小到大点个遍，越快越好（之所以把数字这么放是为了制造大幅度的复杂动作）：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;12.png&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后把人群分为三组进行练习：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;第一组跟正式测试时一样，用手点数&lt;&#x2F;li&gt;
&lt;li&gt;第二组看着这些数，在想象中用手从小点到大&lt;&#x2F;li&gt;
&lt;li&gt;第三组只是用眼睛看，从小看到大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;三组被试都先执行一次指认任务，然后各自练习，最后再执行一次指认任务，好让研究者评价他们的进步。结果显示，第一组和第二组在练习之后，手臂的动作明显变快了。而对照组（就是只能移动眼睛的那一组）没有任何进步。&lt;&#x2F;p&gt;
&lt;p&gt;所以之后如果需要做演讲分享或一些特定的练习，不妨试试「心理意向训练」（感兴趣的话，可以搜一下 PETTLEP，可以帮助你更系统地使用这个方法）。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ji-di-he&quot;&gt;基底核&lt;&#x2F;h5&gt;
&lt;p&gt;基底核是大脑深部一系列神经核团组成的功能整体，既然藏得这么深，那一定很重要。目前所知它的主要功能为自主运动的控制、整合调节细致的意识活动和运动反应。同时还参与记忆，情感和奖励学习等高级认知功能。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;13.jpg&quot;
        width=&quot;510&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基底核对「习惯养成」和「瘾」有很大的影响（确切说来是其中的「纹状体」和「伏隔核」的功劳）。上面提到它的一个功能是「自主运动的控制」，也就是无意识行为，意味着它可以命令大脑产生动作。比如上班路上，无论是开车还是走路，都可以很轻松地完成，因为太熟悉了。这么神奇的功能，科学家们自然不会放过，于是他们做了一个实验：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;14.jpg&quot;
        width=&quot;566&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;把小老鼠放到迷宫中，在它左侧放了奖赏物，一开始它左顾右盼，到处乱走，但最终还是会发现左侧的奖赏。接下来的几次还是会停顿，但会更快地找到奖赏物，重复次数多了之后，到了十字路口，它会毫不犹豫地左转，变成了习惯。&lt;&#x2F;p&gt;
&lt;p&gt;这么多次的重复，对大脑产生了什么影响呢？科学家们观察到小老鼠练习得越多，它的纹状体活动就越强烈，其他部分的参与度会大幅下降，就像 Tesla 开启了自动驾驶一样。把这块区域损毁，进而关闭习惯系统，则又回到了最开始的试探模式。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说瘾，瘾跟伏隔核有关，最常见的就是手机上瘾，webmd（美国互联网医疗健康信息服务平台）上罗列了&lt;a href=&quot;https:&#x2F;&#x2F;www.webmd.com&#x2F;mental-health&#x2F;addiction&#x2F;signs-of-drug-addiction#1&quot;&gt;药物上瘾&lt;&#x2F;a&gt;的表现，摘录其中几条：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;即使对健康不再有帮助依旧持续吃药（You keep taking a drug after it’s no longer needed for a health problem.）。&lt;&#x2F;li&gt;
&lt;li&gt;需要更多的剂量来达到同样的效果（You need more and more of a substance to get the same effects）。&lt;&#x2F;li&gt;
&lt;li&gt;当不吃药时会感觉到不适应（You feel strange when the drug wears off）。&lt;&#x2F;li&gt;
&lt;li&gt;停不下来，即使知道不应该再继续吃下去（You can’t stop yourself from using the drug, even if you want to.）。&lt;&#x2F;li&gt;
&lt;li&gt;发现很难控制摄入量，比如只想嗑一颗，结果嗑了三颗（You have a hard time giving yourself limits.）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;把「吃药」换成「使用手机」是不是一样适用？为什么会这样，因为在应用的背后，有很多人在努力工作，尽可能地留住你，让你再次使用。不要指望意志力能帮什么忙，最好的办法就是出现：“就看十分钟”、“就玩一会”的心态时就扼杀住。&lt;&#x2F;p&gt;
&lt;p&gt;基底核像一个程序员，一个习惯或者无意识行为的养成，就像一个编好的程序，只要输入变量（收集到的环境信息）和返回值（要达到的目的）跟程序匹配就会自动执行，所以基底核里藏着很多套这样的程序。从「节能」角度来说，确实很高效，这样前额叶皮层就能抽出空来干更重要的事，比如刷手机···。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-nao&quot;&gt;间脑&lt;&#x2F;h4&gt;
&lt;p&gt;说完了端脑，现在来看看间脑，这块夹在脑中间的部分可是很重要的（一般在中间的都很重要···）。它可以分为「丘脑」和「下丘脑」。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;qiu-nao&quot;&gt;丘脑&lt;&#x2F;h5&gt;
&lt;p&gt;丘脑是个大的中继站，负责向更高级的脑区传递感觉信号，以及下行发送高级脑区的命令信号，最终引起肌肉动作。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;15.png&quot;
        width=&quot;382&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之前说「枕叶」时，就提到过丘脑，讲到它会把眼睛带来的电信号带给大脑皮层。除了视觉之外，其他的感觉器官也会把信息给丘脑（除了嗅觉，它走的是边缘系统）。所以它就像脑的中枢，我们对外界的感知，都是丘脑告诉的，如果它的工作机制被完全破解，理论上我们就能接入各种电极来达到最高级的模拟体验，皮层甚至区分不出来这是真实的还是虚幻的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;xia-qiu-nao&quot;&gt;下丘脑&lt;&#x2F;h5&gt;
&lt;p&gt;下丘脑帮助维持很多机体功能的重要状态，比如冷了会不由自主打冷颤，饿了产生饥饿感。还是例如性行为和攻击行为等本能社会行为的关键控制者。为了生存和繁衍，下丘脑可是煞费苦心···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-nao&quot;&gt;小脑&lt;&#x2F;h3&gt;
&lt;p&gt;聊完了前脑，再来聊聊小脑。小脑在感觉感知、协调性，和运动控制中扮演重要角色。它不会主动发起动作，但会接收来自脊髓感觉系统和其他脑区的讯号，影响运动协调、精确度和准确的时机控制。由于小脑的功能是“微调”运动技能，所以小脑的损伤不会带来诸如瘫痪的严重症状，但是会导致精细动作技能、平衡能力、姿势和动作学习方面的症状。&lt;&#x2F;p&gt;
&lt;p&gt;小脑还有一个很有意思的功能是「从“总和”知觉中扣除“期望的”知觉，从而改变感觉方式」。什么意思呢？我们都知道一个人不能够挠自己痒痒。那为什么别人挠你痒痒，你的感觉就很强烈呢？这时就该请我们的研究人员上场了。他们让受试者把头部放在一台机器中（该机器可以检测成像大脑的活动部位和强度），然后挠他们痒痒。他们发现，与触觉相关的称为感觉皮层的大脑区域活动很强烈，小脑则没有明显的活动。当要求受试者在相同部位挠自己痒痒时，发现小脑有一处活动增强，而感觉皮层活动减弱了。这说明小脑预测「期望的」知觉，并发送编码信号抑制了感觉皮层。就好像要期末考试了，你跟老爸说，平时没好好学习，所以分数极有可能不太理想，这样当拿着最终的考试分数让老爸签字时，会在预期之内。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nao-gan&quot;&gt;脑干&lt;&#x2F;h3&gt;
&lt;p&gt;脑干由中脑、脑桥和延髓组成，负责调节复杂的反射活动，包括调节呼吸作用、心跳、血压等，对维持机体生命有重要意义。它就是那个全年无休 007 工作的员工，它要是出了问题，就是大问题了。所以也有人把脑干、小脑和基底核合称为「爬行脑」，也就是最原始的脑（保障生存和繁衍）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-yuan-xi-tong&quot;&gt;边缘系统&lt;&#x2F;h3&gt;
&lt;p&gt;边缘系统包含了很多的部位，它的主要部分环绕大脑两半球内侧形成一个闭合的环（这个环也不边缘啊···）。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;brain&amp;#x2F;16.jpg&quot;
        width=&quot;650&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然有这么多组成部分，它的功能应该也不会弱。其中比较重要的是「影响、产生情绪」，还有「参与学习和记忆活动」。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hai-ma&quot;&gt;海马&lt;&#x2F;h4&gt;
&lt;p&gt;海马是学习和记忆的通道，损伤海马可使学习能力明显下降，近期记忆丧失，但不影响远期（长期）记忆。&lt;&#x2F;p&gt;
&lt;p&gt;为海马的研究做出突出贡献的是一位名叫 亨利·莫莱森 的同学。他每天都看同一本书，因为对他来说这就是本新书。之前为了治疗癫痫，被移除了海马，结果出现了记忆问题，主治医生觉得这是一个很好的研究机会，于是就对他进行了长达 50 年的互动，一步步揭开了海马的神秘面纱。他有如下几个表现：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;虽然亨利不能再记得日常生活里的任何事情，却依然可以唤起自己童年时形成的回忆。&lt;&#x2F;li&gt;
&lt;li&gt;对眼前任何事件的记忆都只能持续几分钟甚至更短的时间，一旦注意力转移，立刻就忘掉先前的那件事。&lt;&#x2F;li&gt;
&lt;li&gt;瞬时记忆没问题，可以记住停留一阵又消失的数字，只要数字在 7 个之内。&lt;&#x2F;li&gt;
&lt;li&gt;让他完成需要练习才能习得的偏复杂技能，只要时间足够长，一样可以流畅地完成。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以海马是构建记忆的一个通道，但不会把记忆都存在那里，等到一定时间之后会被转移（大概需要一年甚至更长）。如果记不住东西，学习的效率自然也会大打折扣。&lt;&#x2F;p&gt;
&lt;p&gt;为什么那些需要练习的偏复杂技能，还是可以习得呢？因为这个过程（非陈述式记忆）更多地发生在基底核中，还记得基底核是一个程序员么？只要练习地够多，它就能写出一套套的程序出来，然后就可以自动运行了。&lt;&#x2F;p&gt;
&lt;p&gt;记忆就像是在一大片橡胶地上踩出来的一条条路。那些踩得不够深的路，由于橡胶的弹性会慢慢消失，但即使踩得够深，如果没有其他的路跟它连接，从「路」的角度看，它的价值也不是很大。我们通常会有这样的体验，在适度的紧张、压力下，记忆的效果会更好，这就好比让橡胶变软一点，方便踩下去的时候留下印记。&lt;&#x2F;p&gt;
&lt;p&gt;对记忆来说，还有很重要的一块是提取，而感官就是极好的提取器，就像在一条条路上放置着醒目的路标。比如听到谢霆锋的歌时，就会想起初中的生活，听到周杰伦的歌时会想起高中生活（是不是暴露了什么···）。味觉、触觉也有类似的功能。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-ren-he&quot;&gt;杏仁核&lt;&#x2F;h4&gt;
&lt;p&gt;杏仁核是情感处理中枢，在恐惧和攻击行为中扮演角色。它接受两方面信息，一是皮层中处理过的感觉信息，另一个是自主产生的对抗或逃跑反应（如流汗、心跳加速），后者是有下丘脑和脑干介入的。它附着在海马的末端，是产生情绪，识别情绪和调节情绪，控制学习和记忆的脑部组织。&lt;&#x2F;p&gt;
&lt;p&gt;杏仁核和海马住得这么近，它对学习和记忆有着重要作用也在情理之中。上面说到适度的紧张对记忆会有帮助，这个紧张的发生场所就是杏仁核。那些具有情绪意义的刺激会引起杏仁核电活动的强烈反应，并形成长期的痕迹储存于脑中。比如自己写的 bug，造成了严重的线上事故时，那天的种种场景一定会记得格外清楚。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;脑确实极为复杂（虽然不一定高效），对它多一点了解，对于理解和调整自己都会有帮助。当科技以第七王国的身份参与到进化时，尤其需要注重对前额叶的使用，一方面层出不穷的「去思考化」产品会不断勾引你，另一方面越来越聪明能干的机器会挑战你的价值，唯有在科技的河流中逆流而上才能赢得进化游戏。&lt;&#x2F;p&gt;
&lt;p&gt;本文主要参考了以下书籍：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;进化的大脑&lt;&#x2F;li&gt;
&lt;li&gt;神经科学·探索脑&lt;&#x2F;li&gt;
&lt;li&gt;神经的逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>架构师思维</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/architect-mindset/</link>
            <guid>https://limboy.me/posts/architect-mindset/</guid>
            <description>&lt;p&gt;「架构师」是一个挺高端的 Title，印象中应该是那些技术特别出众的人。真正的架构师应该是怎样的我也不知道，不同公司对他的能力要求也不会一样，很多公司都不一定有架构师这个职位，但这并不影响拥有「架构师思维」。&lt;&#x2F;p&gt;
&lt;p&gt;什么是架构师思维？就是除了完成开发任务外，还操心着其他事情，而这些事情都围绕一个目标：打造高效的具有持续交付能力的团队。带着这个思维就会发现天花板变高了，自己的提升空间也更大了(当然前提是先把自己手头的活干好···)。&lt;&#x2F;p&gt;
&lt;p&gt;这跟管理者的职能是不是有点重合？是有点，但我觉得管理者应该把重心放到替团队排除障碍，关心团队成员的工作状态上。当然这两个角色也完全可以由一个人承担，也就是技术管理者。&lt;&#x2F;p&gt;
&lt;p&gt;因此除了专业技能过硬之外，还有很多需要考虑的点。我觉得从开发者和开发这两个方向切入会比较合适，开发占大部分。下图是我的总结，欢迎探讨 :)&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;architect-mindset&amp;#x2F;architect-mindset.png&quot;
        width=&quot;2087&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>如何努力工作</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-work-hard/</link>
            <guid>https://limboy.me/posts/how-to-work-hard/</guid>
            <description>&lt;p&gt;Paul Graham 最近写了篇文章 &lt;a href=&quot;http:&#x2F;&#x2F;paulgraham.com&#x2F;hwh.html&quot;&gt;How to Work Hard&lt;&#x2F;a&gt;，看了之后较有感触，就翻译了下，以下为译文。&lt;&#x2F;p&gt;
&lt;p&gt;关于如何努力工作，似乎没有什么可说的，任何上过学的人都知道。有一些 12 岁的孩子，他们的努力程度令人吃惊。但现在我对「努力工作」又有了更深的理解。&lt;&#x2F;p&gt;
&lt;p&gt;我知道如果想做伟大的事情，就必须非常努力地工作。我小时候对这一点并不确定：学校作业的难度各不相同；一个人并不总是要非常努力才能做得好。而一些牛人似乎不费吹灰之力就能把事情做好。我曾经认为是不是可以通过纯粹的聪明才智来达到目的？现在我知道了，没有。&lt;&#x2F;p&gt;
&lt;p&gt;一些学科看起来很容易的原因是我的学校的标准很低。而牛人似乎毫不费力的原因是多年的实践；他们使事情看起来很容易。&lt;&#x2F;p&gt;
&lt;p&gt;当然，那些牛人通常也有天赋。要取得杰出的成绩需要有三个要素：天赋、实践和努力。只用其中两个就可以做得很好，但要做到最好，则需要全部三个：你需要有很好的天赋，经过大量的练习，并且要非常努力。&lt;&#x2F;p&gt;
&lt;p&gt;例如，比尔-盖茨是他那个时代商业领域最聪明的人之一，同时也是最勤奋的人之一。他说：&amp;quot;我在二十多岁时从未休息过一天，一次都没有。&amp;quot; 梅西的情况也类似，他有很好的天赋，但当他的青年教练谈到他时，他们记住的不是他的天赋，而是他的奉献精神和求胜欲望。如果让我选择 20 世纪最佳英国作家的话，我会投 P.G.Wodehouse 一票。74 岁时，他写道：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我每写一本新书，就像我在文学的花园里摘了一个柠檬。这确实是一件好事，它使人保持清醒的头脑，使人把每句话重写 10 遍。很多情况下甚至是 20 遍。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;听起来有点极端。但是比尔-盖茨听起来更极端。十年来没有一天休息？这两个人拥有很好的天赋，但他们也像任何人一样努力工作。这两个你最好都需要。&lt;&#x2F;p&gt;
&lt;p&gt;这似乎很明显，但在实践中我们发现并不是这样。在天赋和努力工作之间存在着一种微弱的对立。它部分来自于文化，部分源于牛人比较罕见。如果很好的天赋和很强的驱动力都是罕见的，那么拥有两者的人就是罕见的平方。你遇到的大多数人，如果一个人很有天赋，另一个大概率就会比较少。但是，如果你想成为一个杰出的人，就需要这两样东西。由于你无法真正改变你的天赋，你能做的，就只剩下努力工作了。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有明确的、外部设置的目标，就像在学校那样，那么努力工作是很直接的一件事。这其中有一些技巧：你必须学会不欺骗自己，不拖延时间（这也是一种欺骗自己的形式），不分心，遇到阻碍时不放弃。但这种程度的自律似乎主要是针对年轻人。&lt;&#x2F;p&gt;
&lt;p&gt;我从小学到的是如何朝着既没有明确定义也没有外部强加的目标努力。如果想做出不错的成绩，你可能必须同时学会这两点。&lt;&#x2F;p&gt;
&lt;p&gt;其中最基本的要求是觉得你应该工作，不需要任何人告诉你。现在，当我不努力工作时，警钟就会响起。我不确定是否有进展，但当我不努力时，我可以确定没有进展，这感觉很不好。&lt;&#x2F;p&gt;
&lt;p&gt;像大多数小孩子一样，我很享受学习或完成新事情时的成就感。随着年龄的增长，当我没有取得任何成就时，这种感觉就演变成了一种厌恶感。我印象很深刻，在我 13 岁时就不再看电视了。&lt;&#x2F;p&gt;
&lt;p&gt;我与几个人交谈过，他们差不多都是在这个年龄段开始认真对待工作。我问帕特里克-科里森，他是什么时候开始觉得讨厌无所事事的感觉的，他说：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;大约是在 13 或 14 岁。我清晰地记得我坐在起居室里，盯着外面，想知道为什么就这么浪费自己的暑假。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;也许在青春期有什么变化？&lt;&#x2F;p&gt;
&lt;p&gt;奇怪的是，认真工作的最大障碍可能来自学校，它使工作（他们所谓的工作）看起来很无聊，毫无意义。我们必须先了解什么是真正的工作，才能全心全意地渴望去做。这需要一段时间，因为即使在大学里，很多工作也是毫无意义的；甚至整个部门都是毫无意义的。但是，当我了解到真正工作的形态时，我发现我对工作的渴望与之契合，就好像它们是为彼此而生的。&lt;&#x2F;p&gt;
&lt;p&gt;我想大多数人需要先了解什么是工作，然后才能爱上它。哈代在《一个数学家的辩白》中论述了这一点。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不记得我小时候对数学有什么热情，我对数学家这个职业有过一些想法，但也认为这只是一份工作而已。我对数学的看法就是考试和奖学金：我想打败其他孩子，而我可以轻松地做到这点。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;他直到大学，读了乔丹的《分析课》 (Cauchy’s Cours d’analyse)后，才知道数学的真正含义，。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我永远不会忘记我在阅读那本了不起的著作时的惊喜，它是我们这一代许多数学家的启蒙书，我在阅读它时第一次知道了数学的真正含义。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;为了理解什么是真正的工作，你需要甄别两种「假工作」。一种是哈代在学校遇到的那种。当课题被改编为教给孩子们时，它们就被扭曲了，常常被扭曲到与实际工作完全不同。另一种是某些类型的工作所固有的。有些类型的工作本质上是假的，或者充其量只是忙碌的工作。&lt;&#x2F;p&gt;
&lt;p&gt;真正的工作都有种共性，但也是一个模糊的标准，而且故意模糊的，因为它必须涵盖很多不同的类型。&lt;&#x2F;p&gt;
&lt;p&gt;一旦你知道真正工作的样子，你就必须学会每天花多少小时来做。这不是简单地在每个清醒的时间工作就行，因为在许多种工作中会有一个临界点，超过这个点，结果的质量就会开始下降。&lt;&#x2F;p&gt;
&lt;p&gt;这个限度因工作类型和个人而异。我做过几种不同类型的工作，每种工作的极限都不一样。我对较难的写作或编程类型的极限是每天约 5 小时。而当我在经营一家创业公司时，我可以一直工作。至少在我做的那三年里是这样；如果要坚持得更久，可能需要偶尔休假。&lt;&#x2F;p&gt;
&lt;p&gt;找到极限的唯一方法就是跨越它。培养对你所做的工作质量的敏感性，然后你就会注意到它是否因为你工作得太辛苦而下降了。诚实在这里至关重要，它包括两个方面：你必须注意到你什么时候在偷懒，但也要注意到你什么时候工作太辛苦。如果你认为工作太辛苦有什么值得骄傲的地方，请把这个想法去掉。你不仅会有更糟糕的结果，还可能是在对别人，或者对自己炫耀。&lt;&#x2F;p&gt;
&lt;p&gt;找到努力工作的极限是一个持续不断的过程。工作的难度和你的能力都会因时而异，所以你需要不断判断你的努力程度和你的表现。&lt;&#x2F;p&gt;
&lt;p&gt;不过，努力工作并不意味着不断逼迫自己去工作。可能有一些人是这样的，但我的经验是，我只有在开始一个项目或遇到某个问题时，才会偶尔逼迫自己。那时候我就可能产生拖延症了。但是一旦我开始行动，往往会持续下去。&lt;&#x2F;p&gt;
&lt;p&gt;让我坚持下去的动力，取决于工作的类型。当我在 Viaweb 工作时，我被对失败的恐惧所驱动。那时我几乎没有拖延，因为总是有一些事情需要做，如果我可以通过做这些事情把我和竞争者之间拉开更多的距离，为什么还要等呢？而现在驱动我写文章的，是那些缺陷。在两篇文章之间，我纠结了好几天。但一旦我开始决定写某一篇，我就不必逼自己了，因为总有一些错误或遗漏会驱动我。&lt;&#x2F;p&gt;
&lt;p&gt;我确实会努力关注重要的议题。许多问题都有一个坚硬的核心，边缘是一些比较容易的东西。努力工作意味着在你能做到的范围内瞄准核心。有些时候可能做不到；有些时候，你只能做一些比较容易的、边缘的事情。但你应该总是尽可能地接近中心而不是停滞不前。&lt;&#x2F;p&gt;
&lt;p&gt;「如何处理你的生活」这一更大的问题是这些硬核问题中的一个。中心有重要的问题，这些问题往往很困难，而边缘的问题则不太重要，比较容易。因此，除了在处理具体问题时涉及的小的、日常的调整外，你偶尔也要对「做哪种类型的工作」做出大的调整。而规则是相同的：努力工作意味着瞄准中心--瞄准对你来说最重要的问题。&lt;&#x2F;p&gt;
&lt;p&gt;无论是一般情况还是在特定领域内，关于哪些问题是最重要的共识往往是错误的。如果你不同意它，而你又觉得自己是对的，这可能是一个好机会。&lt;&#x2F;p&gt;
&lt;p&gt;宏伟的工作通常会更难，但也不应该把困难作为决定做什么的唯一参考。如果你发现某些工作类型对你来说比其他人更容易，无论是因为你碰巧拥有的能力，还是因为找到了一些新的方法，或者仅仅是因为你对它更感兴趣，都可以在这方面下功夫。&lt;&#x2F;p&gt;
&lt;p&gt;除了了解实际工作之外，你还需要弄清楚你适合哪种工作。这意味着要弄清楚你的天赋与哪种工作最匹配；但并不意味着如果你身高 7 英尺，你就必须打篮球。你适合做什么，不仅取决于你的才能，也许更取决于你的兴趣。对某一主题的浓厚兴趣会让人更努力地工作。&lt;&#x2F;p&gt;
&lt;p&gt;发现你的兴趣可能比发现你的才能更难。天赋的类型比兴趣少，往往在童年时就开始显现，而兴趣是一种微妙的东西，可能要到 20 多岁，甚至更晚才会被挖掘出来。此外，还会有一些错误信息需要学会甄别：你是真的对 X 感兴趣，还是因为你会赚很多钱，或者因为其他人会对你印象深刻，或者因为你的父母希望你这样做，所以你想在这方面努力？&lt;&#x2F;p&gt;
&lt;p&gt;要弄清楚该从事什么工作，其难度因人而异，差别很大。还是个孩子的时候，你觉得每个人都有自己的使命，他们所要做的就是弄清楚它是什么。电影里是这样的，给孩子们看的故事书里也是这样的，有时现实生活中也是如此。有些人在小时候就想好了要做什么，然后就去做，比如莫扎特。但其他人，如牛顿，则不安分地从一种工作转向另一种。也许回过头来，我们可以确定其中一项是他们的使命--我们可以希望牛顿在数学和物理学上花更多的时间，而在炼金术和神学上花更少的时间--但这就有点事后诸葛亮的意思了。&lt;&#x2F;p&gt;
&lt;p&gt;因此，虽然有些人的生活快速收敛（知道要做什么，并去做），但也会有一些人的生活从未收敛。对这些人来说，弄清楚要做什么工作与其说是努力工作的前奏，不如说是努力工作的一部分。对这些人来说，我前面描述的过程还有第三个组成部分：在衡量你工作的努力程度和你做得如何的同时，你必须考虑你是否应该继续在这个领域工作，还是转到另一个领域。如果你努力工作，但没有得到足够好的结果，你就应该换。这样表述听起来很简单，但实际上却很难。你不应该在第一天就放弃，只因为你努力工作却没有任何进展。你需要给自己一些时间，让自己有所作为。但是有多少时间呢？如果原本进展顺利的工作不再顺利，你又该怎么办？那时你会给自己多少时间？&lt;&#x2F;p&gt;
&lt;p&gt;什么样的结果才算好？这确实很难决定。如果你正在探索一个很少有人涉足的领域，你甚至可能不知道好的结果是什么样子。历史上有很多误判了他们所做工作的重要性的例子。&lt;&#x2F;p&gt;
&lt;p&gt;检验是否值得从事某项工作的最佳标准是你是否觉得它有趣。这听起来可能是一个危险的主观衡量标准，但它可能是你要得到的最准确的标准。你是从事这项工作的人。谁比你更有资格判断它是否重要，还有什么比它是否有趣更能体现它的重要性呢？&lt;&#x2F;p&gt;
&lt;p&gt;不过，要使这个测试发挥作用，你必须对自己诚实。事实上，这是整个努力工作问题最引人注目的地方：在每一点上都取决于对自己的诚实。&lt;&#x2F;p&gt;
&lt;p&gt;努力工作不仅仅是每天工作到 11 点。它是一个复杂的、动态的系统，必须在每个点上调整得恰到好处。你必须了解实际工作的样子，清楚地看到你最适合做哪种工作，尽可能地接近它的真正核心，在每个时刻准确判断你的能力和你的表现，并在不损害结果质量的情况下每天投入尽可能多的时间。这个网络太复杂了。但是，如果你始终诚实，目光清晰，它就会自动呈现出最佳形状，你就会以一种很少有人能做到的方式取得成效。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>通过iframe实现跨域通信</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/iframe-crossdomain/</link>
            <guid>https://limboy.me/posts/iframe-crossdomain/</guid>
            <description>&lt;p&gt;iframe 还是很强大的，不仅能实现同域通信，还可以跨域通信，甚至跨协议通信(如 file&#x2F;http)，如果再结合 jsonp，那就有很多种玩法了。不过有几条原则需要记住：&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dang-qian-ceng-ji-zhong-de-ren-he-window-du-ke-yi-huo-qu-qi-ta-window-iframe-ye-shi-yi-ge-window&quot;&gt;当前层级中的任何 Window 都可以获取其他 Window(iframe 也是一个 Window)&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-you-tong-yu-window-cai-ke-yi-hu-xiang-cao-zuo&quot;&gt;只有同域 Window 才可以互相操作&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;dang-qian-ceng-ji-xia-de-ren-he-window-ke-yi-she-zhi-qi-ta-window-de-location-ji-shi-shi-bu-tong-de-yu&quot;&gt;当前层级下的任何 Window 可以设置其他 Window 的 location，即使是不同的域&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;dang-ni-gai-bian-url-de-hashtag-hou-mian-de-dong-dong-shi-ye-mian-bu-hui-shua-xin&quot;&gt;当你改变 url 的 hashtag(#后面的东东)时，页面不会刷新&lt;&#x2F;h1&gt;
&lt;p&gt;举例来说，有这么个页面&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;meta http-equiv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content-type&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;html;charset=utf-8&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1.4.2&#x2F;jquery.min.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 不同域的iframe页面 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.domain.com&#x2F;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.domain.com&#x2F;bar&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;bar&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;可以在当前页面设置 proxy iframe 的 location(原则 1,3,4)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 添加了一个hashtag，这样该iframe就不会刷新
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.attr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;src&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;www.domain.com&#x2F;foo#tag&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;iframe foo 操作 iframe bar(原则 1,2)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; in http:&#x2F;&#x2F;www.domain.com&#x2F;foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;.frames[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#someid&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;message from foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以跨域通信其实很简单，在 iframe 和主页里都不断地检测 hashtag 有没有变化，一旦有变化，就做出相应的改变。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hashVal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;window.location.hash.substr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  document.body.style.backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hashVal&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这么做的问题就是，需要不断地去检测 hashtag 是否改变，效率有点低，如果能通过原生的监听来实现，就会更加高效和优雅。这里就涉及到另一个 iframe 特性：可以设置其他 iframe 的大小，即使是不同域的。而页面的 resize 事件是可以监听的，所以就有了下面这个模型。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;iframe-crossdomain&amp;#x2F;crossdomain.png&quot;
        width=&quot;681&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;主页面先把消息附加到 hashtag，然后改变一个隐藏的(或者页面外的)iframe 的 size。这个 iframe 会监听 resize 事件，同时捕获到 hashtag。捕获到 hashtag 后(也就是所需的数据)，再对 hashtag 做进一步的处理。处理完后把数据传到主页内的一个 iframe，或者直接操作该 iframe。这样就比较优雅地完成了跨域操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;demo&lt;&#x2F;h3&gt;
&lt;p&gt;将以下代码拷贝到本地的一个 html 文件，然后双击在浏览器中打开，看看能不能查单词。(ajax 无法跨协议，这是 iframe 比 ajax 强大的地方)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;meta http-equiv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content-type&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;html;charset=utf-8&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1.4.2&#x2F;jquery.min.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#btn&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$proxy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#proxy&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;src&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;src&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;input[name=it]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;width&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;px&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;input type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;it&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;button id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;btn&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Translate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;crossdomain&#x2F;proxy.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;proxy&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;proxy&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;-10px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;crossdomain&#x2F;show.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;show&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;show&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;60%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;300px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更多玩法，可以参考这篇文章: &lt;a href=&quot;Cross-Domain Communication with IFrames&quot;&gt;Cross-Domain Communication with IFrames&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The War of Art</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-war-of-art/</link>
            <guid>https://limboy.me/posts/the-war-of-art/</guid>
            <description>&lt;p&gt;最近在看一本书：&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;War-Art-Through-Creative-Battles&#x2F;dp&#x2F;1936891026&quot;&gt;The War of Art&lt;&#x2F;a&gt;。目前还没有中文版，看起来比较累，加上老外习惯性的话痨，阅读起来也需要一点技巧。&lt;&#x2F;p&gt;
&lt;p&gt;看名字又是「战争」又是「艺术」，好像离自己有点远。其实通篇都是围绕一个主题来讲：Resistance，是与 Resistance 的战争。中文直译过来就是「抗拒」，它是艺术创作最大的敌人，拖延就是抗拒的一种表现。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说「艺术」，Alan Kay 认为「Art is all the stuff that people make」。科学、技术也都是艺术，所以艺术的范畴可以很广。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-you-shi-hou-ming-zhi-dao-gai-zuo-shi-yao-que-zong-shi-mai-bu-chu-na-yi-bu&quot;&gt;为什么有时候明知道该做什么，却总是迈不出那一步&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-war-of-art&amp;#x2F;which-to-choose.jpg&quot;
        width=&quot;1800&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边的事情对自己的成长会更有帮助，右边的事情往往占据了更多的注意力。联想到该做的事时，会查询数据库，看看之前留下的印象是偏愉悦还是偏痛苦的。如果是偏痛苦，就自然不太想去做，也就产生了「Resistance」。同时，那些打发时间的事情查询结果却往往偏愉悦。那边一推，这边一拉，很容易就有了决定。这也是愧疚感产生的原因。&lt;&#x2F;p&gt;
&lt;p&gt;为什么该做的事会产生抗拒心理？因为&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;事情划分不够细，不知道从何下手。&lt;&#x2F;li&gt;
&lt;li&gt;做这些事往往伴随着痛苦，尤其是初期。&lt;&#x2F;li&gt;
&lt;li&gt;周期比较长，很难在短期内看到明显的变化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;人（至少）有两个自我：体验自我和叙事自我。体验自我负责体验过程，叙事自我负责记录，也就是下次会用到的数据库。问题就出在叙事自我只会挑峰值体验和结尾体验来记录，如果在做该做的事时，过程中和结尾都没有被爽到，那么能记录下来的就只有负面的信息（所以初期不要挑战难度过高的项目）。&lt;&#x2F;p&gt;
&lt;p&gt;与此同时，社交、新闻、游戏等 App 的获取成本极低，而内容又有趣好玩，叙事自我就会把这种「愉快」的感觉记录下来。&lt;&#x2F;p&gt;
&lt;p&gt;叙事自我不关心成长，它只是一个忠实的记录者，而我们做决定时又会很在意这些记录，于是矛盾就出现了：成长能让我们感觉到充实、平静，而这些记录却容易导致相反的决定。更有意思的是，我们会为这些「抗拒」找到合适的理由，以免让自己鄙视自己。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-de-geng-zhuan-ye&quot;&gt;变得更专业&lt;&#x2F;h3&gt;
&lt;p&gt;要让自己变得专业起来，如此才能创作出好的作品，享受进步的愉悦和开悟的快感。专业和业余的区别在于前者更持久，后者主要基于乐趣，一旦乐趣降低或消失就失去了前进的动力，而这个过程不可避免会遭遇低谷。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-war-of-art&amp;#x2F;grow-curves.gif&quot;
        width=&quot;3184&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接触到新事物时，往往遵循类似的曲线，状态会有起伏。要变得更专业，就必须降低叙事自我的权重，通过一些技巧来响应内心的召唤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ding-kang-ju&quot;&gt;搞定「抗拒」&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;正是因为不想跑步，所以才跑步，这才是长距离跑者的思维方式 。&lt;&#x2F;p&gt;
&lt;p&gt;-- 村上春树。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;严歌苓写过一篇文章：活得过瘾。里面有一段话印象比较深刻：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我试着不写，可是不行，就像没醒透似的。一连多日不写，就是一连多日半打盹儿地过活，新陈代谢都不对了。出去旅行，同行的有丈夫，有时还有其他朋友。我的写作让他们都很头疼，一些计划要根据我的时间表转。他们抱怨，问我几天不写死不死得了。我说不写就是让我身上有一块痒痒，又不让我挠。哪怕早起一两个小时，我也得把过瘾的时间留出来。对我来说，生命一天不达到那个浓度、烈度，没有到达那个敏感度、兴奋点，那一天就活得窝囊。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最重要的其实就三条：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;让该做的事有一个足够小的切入点可以马上就做。&lt;&#x2F;li&gt;
&lt;li&gt;说服自己去做这件事。只要坚持几分钟，就会发现，其实也没那么痛苦。&lt;&#x2F;li&gt;
&lt;li&gt;持续 1 和 2。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;那些大量占用注意力的 app 第 1 点就做得很好，打开之后，马上就知道该做什么，并且产生愉悦感，使得下次还会记得打开。&lt;&#x2F;p&gt;
&lt;p&gt;人的适应能力很强，即使前几分钟确实痛苦，过了这段时间后就适应了。更高的乐趣往往伴随着痛苦，所以有句话说：世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。&lt;&#x2F;p&gt;
&lt;p&gt;道理虽然简单，做起来却异常困难，因为这里有一个强大的因素在起作用：习惯。习惯决定了很多东西，习惯了打开手机刷新闻，碎片时间刷微博，要对这种下意识的行为进行调整难度非常大，习惯形成的时间越长越难以调整。所以这个过程必然痛苦，要做好心理准备。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于 Flutter Layout 你应该知道的</title>
            <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/flutter-layout/</link>
            <guid>https://limboy.me/posts/flutter-layout/</guid>
            <description>&lt;p&gt;这篇文章首发于 &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@limboy&#x2F;flutter-layout-in-a-nutshell-f2ed3cb66d72&quot;&gt;Medium&lt;&#x2F;a&gt;，略显生硬的英文看来并不太妨碍理解。&lt;&#x2F;p&gt;
&lt;p&gt;与 Flutter 的布局系统搏斗一段时间之后，感觉终于找到了点门道，于是花了点时间整理了下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;he-xin-gai-nian&quot;&gt;核心概念&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;unbounded-constraints&quot;&gt;Unbounded Constraints&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;either the maximum width or the maximum height is set to double.INFINITY&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-scrollview.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ScrollView&lt;&#x2F;code&gt; 和它的子类比如 &lt;code&gt;ListView&lt;&#x2F;code&gt; 或 &lt;code&gt;GridView&lt;&#x2F;code&gt; 是常见的 Unbounded Constraints. 也就是在某一个方向没有限制大小。其他的 widget 只要能够设置 &lt;code&gt;width&lt;&#x2F;code&gt; 或 &lt;code&gt;height&lt;&#x2F;code&gt; 为 &lt;code&gt;double.INFINITY&lt;&#x2F;code&gt; 的也算。有时也会用 &lt;strong&gt;as big as possible&lt;&#x2F;strong&gt; 来描述这些 widgets。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;flex&quot;&gt;Flex&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;when in bounded constraints, try to be as big as possible in that direction.&lt;&#x2F;p&gt;
&lt;p&gt;when in unbounded constraints, try to fit their children in that direction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当在有限的空间内，会撑满整个空间；如果在一个 unbounded constraints 容器里，就匹配子 widget 的大小。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-row-column.png&quot;
        width=&quot;374&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最常见的是 &lt;code&gt;Row&lt;&#x2F;code&gt; 和 &lt;code&gt;Column&lt;&#x2F;code&gt;，如果不嫌麻烦的话，也可以使用 &lt;code&gt;Flex&lt;&#x2F;code&gt; widget。里面可以放 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widget，也可以不是。如果有 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widgets 会把剩余空间计算出来分配给这些 widgets。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;flexible&quot;&gt;Flexible&lt;&#x2F;h4&gt;
&lt;p&gt;跟 &lt;code&gt;Flex&lt;&#x2F;code&gt; 搭配使用，&lt;code&gt;Flexible&lt;&#x2F;code&gt; 可以用来声明使用百分之多少的空间。比如 &lt;code&gt;flex = 1&lt;&#x2F;code&gt; 也就是 &lt;code&gt;1&#x2F;all&lt;&#x2F;code&gt;，如果有两个 widgets，另一个也是 1，那么 &lt;code&gt;all = 2&lt;&#x2F;code&gt;，每个 widget 分配到 50% 的空间。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-expanded.png&quot;
        width=&quot;374&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Expanded&lt;&#x2F;code&gt; 是最常见的 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widget，它会填满主方向上可用的空间（比如 Row 的水平空间或 Column 的垂直空间）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-yao-widgets&quot;&gt;主要 Widgets&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;container&quot;&gt;Container&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers with no children try to be as big as possible unless the incoming constraints are unbounded, in which case they try to be as small as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Containers with children size themselves to their children.&lt;&#x2F;p&gt;
&lt;p&gt;The width, height, and constraints arguments to the constructor override this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这是 Container 的三个主要表现：当没有子 widgets 且没有指定 constraints 时，尽可能地充满可用空间，如果有 constraints 就以 constraints 为准（除非跟 parent constraints 冲突）；如果有子 widgets 则以 children 的 size 为准；可以设置 &lt;code&gt;width&lt;&#x2F;code&gt;, &lt;code&gt;height&lt;&#x2F;code&gt;， &lt;code&gt;constraints&lt;&#x2F;code&gt; 来约束 size。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是一个没有孩子的 container，因此它会表现地尽量大，就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果设置了 &lt;code&gt;width&lt;&#x2F;code&gt; 或 &lt;code&gt;height&lt;&#x2F;code&gt;，则会根据设置的值来表现：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;      width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container-width.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果有 child，则会以 child 的 size 为准：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container-child.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，还可以设置 padding, margin, child 的对齐方式，等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;stack&quot;&gt;Stack&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Stack&lt;&#x2F;code&gt; 有点像 css 的绝对布局，可以在上面盖一些 widgets，比如 profile 页的背景图上放一些个人信息。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each child of a Stack widget is either positioned or non-positioned.&lt;&#x2F;p&gt;
&lt;p&gt;Positioned children are those wrapped in a Positioned widget that has at least one non-null property.&lt;&#x2F;p&gt;
&lt;p&gt;The stack sizes itself to contain all the non-positioned children, which are positioned according to alignment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Stack 的 children 如果没有用 &lt;code&gt;Positioned&lt;&#x2F;code&gt; 修饰的话，就会用 Stack 的 &lt;code&gt;fit&lt;&#x2F;code&gt; 和 &lt;code&gt;alighment&lt;&#x2F;code&gt; 来帮它们找到合适的位置。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  fit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StackFit&lt;&#x2F;span&gt;&lt;span&gt;.loose,
&lt;&#x2F;span&gt;&lt;span&gt;  alignment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Alignment&lt;&#x2F;span&gt;&lt;span&gt;.center,
&lt;&#x2F;span&gt;&lt;span&gt;  children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Positioned&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;     bottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;   )
&lt;&#x2F;span&gt;&lt;span&gt; ],
&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-stack-1.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;StackFit.loose&lt;&#x2F;code&gt; 的意思是，如果 child size 不比 Stack 的大，就用 child 的 size。而如果设置为 &lt;code&gt;StackFit.expand&lt;&#x2F;code&gt; 则会让所有非 &lt;code&gt;Positioned&lt;&#x2F;code&gt; 的 widgets 使用 Stack 的 size。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-stack-2.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Text(&#x27;world&#x27;)&lt;&#x2F;code&gt; 现在就跟 Stack 一样大了，所以看起来像是 &lt;code&gt;alignment.center&lt;&#x2F;code&gt; 没有生效。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;row-and-column&quot;&gt;Row and Column&lt;&#x2F;h4&gt;
&lt;p&gt;它们都是 Flex widgets，Row 可以将 children 横着放，column 可以将 children 竖着放。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;crossAxisAlignment&lt;&#x2F;code&gt; 表示要如何对齐另一侧，比如横着一排的 widgets，垂直方向上它们应该顶部对齐还是居中对齐呢。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mainAxisSize&lt;&#x2F;code&gt; 默认是 &lt;code&gt;MainAxisSize.max&lt;&#x2F;code&gt;，如果想让它变成 Row 或 Column 的真实高度，可以将它设置为 &lt;code&gt;MainAxisSize.min&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sizedbox&quot;&gt;SizedBox&lt;&#x2F;h4&gt;
&lt;p&gt;使用它可以得到一个确定尺寸的 widget。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;safearea&quot;&gt;SafeArea&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;SafeArea&lt;&#x2F;code&gt; 可以让 child widget 在顶部和底部腾出足够的空间方便处理 iPhoneX 这类的手机。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ze&quot;&gt;原则&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bu-yao-zai-flex-widget-li-fang-zhi-unbounded-constraints&quot;&gt;不要在 Flex widget 里放置 unbounded constraints&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Column&lt;&#x2F;code&gt; 是 Flex widget，所以在里面放 &lt;code&gt;ListView&lt;&#x2F;code&gt; 的话，系统不会答应的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ListView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        itemBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, index){
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        itemCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统会给出这样的 error&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;flutter: The following assertion was thrown during performResize():
&lt;&#x2F;span&gt;&lt;span&gt;flutter: Vertical viewport was given unbounded height.
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 Column 作为 Flex 它不知道应该如何安放一个 &lt;strong&gt;as big as possible&lt;&#x2F;strong&gt; 的 widget。解决方法也很简单，只要设置 ListView 的 &lt;code&gt;shrinkWrap=true&lt;&#x2F;code&gt; 即可。这就是告诉 ListView 把自己尽可能地缩小。&lt;&#x2F;p&gt;
&lt;p&gt;可以在 &lt;code&gt;Column&lt;&#x2F;code&gt; 或 &lt;code&gt;Row&lt;&#x2F;code&gt; 里使用 &lt;code&gt;Expanded&lt;&#x2F;code&gt;，因为它是 &lt;code&gt;Flexible&lt;&#x2F;code&gt;，就应该待在 Flex 里面。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-yao-zai-unbounded-widgets-li-she-zhi-flex-wei-bu-deng-yu-0-de-shu-zhi&quot;&gt;不要在 unbounded widgets 里设置 flex 为不等于 0 的数值&lt;&#x2F;h4&gt;
&lt;p&gt;因为空间无限，如果两个 &lt;code&gt;Flexible&lt;&#x2F;code&gt; 分别为 1 和 2，那么 &lt;code&gt;Flex&lt;&#x2F;code&gt; 根本不知道该如何将空间划分成 1:2。如果真这么做的话，会收到这样的 error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;RenderFlex children have non-zero flex but incoming height constraints are unbounded.
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-ce-yan&quot;&gt;小测验&lt;&#x2F;h3&gt;
&lt;p&gt;下面这段代码会让 &lt;code&gt;Hello World&lt;&#x2F;code&gt; 被包裹在中间的小方块里吗？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    alignment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Alignment&lt;&#x2F;span&gt;&lt;span&gt;.center,
&lt;&#x2F;span&gt;&lt;span&gt;    constraints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tight&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxDecoration&lt;&#x2F;span&gt;&lt;span&gt;(color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow),
&lt;&#x2F;span&gt;&lt;span&gt;    child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-squrebox.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;答案是，不会，它会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-squarebox-real.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不是设置了 constraints 系统就要按着这个 constraints 来，在经过计算之后，系统会发现这个 constraints 无法满足需求，而被舍弃，具体过程如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Container&lt;&#x2F;code&gt; 的 &lt;code&gt;build&lt;&#x2F;code&gt; 方法里，发现有设置过 constraints，最终会返回一个 &lt;code&gt;BoxConstraints&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  minWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; minWidth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minWidth, constraints.maxWidth),
&lt;&#x2F;span&gt;&lt;span&gt;  maxWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; maxWidth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minWidth, constraints.maxWidth),
&lt;&#x2F;span&gt;&lt;span&gt;  minHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; minHeight.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minHeight, constraints.maxHeight),
&lt;&#x2F;span&gt;&lt;span&gt;  maxHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; maxHeight.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minHeight, constraints.maxHeight)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 &lt;code&gt;clamp&lt;&#x2F;code&gt; 方法指的是当 minWidth 值比左边的值小时，取左边值，比右边的值大时，取右边值。因为 parent 的 constraints 也就是 screen size 是固定的，因此，&lt;code&gt;minWidth&lt;&#x2F;code&gt; 在跟它们比较之后，还是使用了它们的值。&lt;&#x2F;p&gt;
&lt;p&gt;正确的做法是在外面套一层 &lt;code&gt;Center&lt;&#x2F;code&gt; 或 &lt;code&gt;Align&lt;&#x2F;code&gt; widget。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-de-dao-fu-widget-de-constraints&quot;&gt;如何得到父 widget 的 constraints？&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt;。有时会需要这些信息来做一些显示上的调整。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; borrowed from https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;41558369&#x2F;94962
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Toggling width from 100 to 300 will change what is rendered
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; in the child container
&lt;&#x2F;span&gt;&lt;span&gt;  width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; width: 300.0
&lt;&#x2F;span&gt;&lt;span&gt;  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LayoutBuilder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt; constraints) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(constraints.maxWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;200.0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;BIG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SMALL&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ru-he-huo-qu-ping-mu-chi-cun&quot;&gt;如何获取屏幕尺寸&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;MediaQuery&lt;&#x2F;code&gt;，除了 &lt;code&gt;size&lt;&#x2F;code&gt; 外，还能拿到 &lt;code&gt;devicePixelRatio&lt;&#x2F;code&gt; 之类的 device 信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;差不多就这些了，对于理解 Flutter 的布局应该够用了，希望能带来些帮助，如果有什么错误欢迎指出 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么我觉得 Flutter 短期内不会流行但依然选择学习它</title>
            <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/is-flutter-the-future/</link>
            <guid>https://limboy.me/posts/is-flutter-the-future/</guid>
            <description>&lt;p&gt;Flutter 在去年小火了一把：连续两年在 Google IO 上亮相；1.0 正式版 Release；在闲鱼的大规模使用；各种教程文章的释出等等。我在去年 5 月份那样体验过一阵，觉得还挺不错的，但也没有进一步挖掘，感觉还尚早。我对跨平台框架有种抵触心理，因为它们通常打着提升开发效率的幌子，结果却是降低了效率，除了学习成本外，还有以下几个原因:&lt;&#x2F;p&gt;
&lt;p&gt;首先要抹平平台之间的差异这就不是一件小事，很容易出现各种吊诡的 bug，然后就要投入不少精力去找原因，还不一定能找到。而如果采用 Native 开发，相关的资料会多一些，出了问题找到解决方案的可能性也会大一些。&lt;&#x2F;p&gt;
&lt;p&gt;其次 Native 的沉淀会多很多，当你想要实现某个效果时，通常会有一些现成的（虽然不一定成熟）library 可供选择，即使不完全满足需求，也能从代码中找到思路，而跨平台框架的积累一定没有 Native 的多，因此这块也是个较大的劣势。&lt;&#x2F;p&gt;
&lt;p&gt;最后一定有一些场景是跨平台框架解决不了的，这时就需要求助于 Native。如果是多人，就涉及到了协作效率，如果是单人，那为什么不直接用 Native 开发呢？&lt;&#x2F;p&gt;
&lt;p&gt;因此当时虽然觉得 Flutter 不错，还是没有入坑。Flutter 除了要面对这三个问题外，它的学习成本还不低，使用 dart 语言开发，这本身就是一道足够高的槛; 使用声明式写法来表达 UI 也不一定能被接受; 那一大坨的 API 也着实让人发怵；再加上还有很多 issues 待解决。因此我认为短期内它不会流行。&lt;&#x2F;p&gt;
&lt;p&gt;那为什么我依然选择学习它呢，最重要的几个原因是：开发体验超预期；带来的副作用较小；插件机制弥补了局限性；活跃的社区。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-ti-yan&quot;&gt;开发体验&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ide&quot;&gt;IDE&lt;&#x2F;h4&gt;
&lt;p&gt;能够使用 VSCode 作为主力 IDE 这本身就有足够的吸引力，Debug、Widget Inspector、Hot Reload、Automatically get packages 等等一应俱全，就连被诟病的嵌套过深，VSCode 也提供了一些便利：在每个括号后面以注释形式标注（但不是真的注释）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-nested.jpg&quot;
        width=&quot;556&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对某个类的参数不太清楚，光标移上去即可，想看下实现，Cmd+Click。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-hover.jpg&quot;
        width=&quot;529&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;想快速看下 Framework 里某个类的实现，Cmd+T&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-cmd-t.jpg&quot;
        width=&quot;613&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一些贴心的小功能&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-widget.jpg&quot;
        width=&quot;224&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当然也有改进空间，比如特别想要 auto import 功能。如果想要更完善的支持，可以使用 Android Studio，后者还提供了 Widget Tree、Performance Chart 等功能。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kai-fa-yu-yan&quot;&gt;开发语言&lt;&#x2F;h4&gt;
&lt;p&gt;Dart 这门语言本身并不复杂，看着挺舒服的，没有新发明一些概念，尽量简单（有些地方感觉过于简单了，比如 class 可以同时表示 interface），对异步编程有着很好的支持，自带的标准库基本够用。如果真静下心来看的话，不出三天，语言方面应该不会有太大的障碍了。&lt;&#x2F;p&gt;
&lt;p&gt;Dart 是一门类型安全的语言，跟多数静态语言一样，也支持类型推导，写起来比较舒服。泛型、匿名函数等常见的语言特性都有，甚至支持 mixins。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bian-xie-ti-yan&quot;&gt;编写体验&lt;&#x2F;h4&gt;
&lt;p&gt;得益于 Flutter 的设计，大多数情况下 UI 展示通过 Widget 的组合就基本搞定了，Widget 就是 Description 或者 Config，告诉框架这个 Widget 的一些信息，框架拿到后再构建一个真实的 View 出来。&lt;&#x2F;p&gt;
&lt;p&gt;状态管理和信息流处理也都有很好的支持，基本上可以用 GUI 编程的最佳体验来写。由于 Flutter 是基于最底层的 VSync 信号结合 Skia &#x2F; Text 等引擎来构建视图，有时会遇到 Native 很方便地支持但 Flutter 不支持或者需要额外开发的场景，比如 TextFiled 的 Context Menu，Native 什么都不用做，这个 menu 就有了，而 Flutter 并没有，需要自己实现。&lt;&#x2F;p&gt;
&lt;p&gt;举一个点击事件的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GestureDetector&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      onTap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; () {
&lt;&#x2F;span&gt;&lt;span&gt;        bloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;deleteHabit&lt;&#x2F;span&gt;&lt;span&gt;(habit, context);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Navigator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;delete&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TextStyle&lt;&#x2F;span&gt;&lt;span&gt;(color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.red),
&lt;&#x2F;span&gt;&lt;span&gt;      )),
&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很直观：给 Text Widget 添加一个手势，当点击时，执行 &lt;code&gt;onTap&lt;&#x2F;code&gt; 里面的逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-zuo-yong&quot;&gt;副作用&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说，引入了跨平台框架后会带来一些性能上的损失，App 的 Size 也会大一些，可能还会增加 Crash 率。那 Flutter 在这几块的表现如何呢？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-neng-biao-xian&quot;&gt;性能表现&lt;&#x2F;h4&gt;
&lt;p&gt;我自己试过一个有点复杂的 Demo，Release 模式在 iOS 上跑起来很流畅，效果如下，在 Nexus 6P 上也大致如此&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;camo.githubusercontent.com&#x2F;be369abc92c87ee76810c33719c35161c02b885d&#x2F;68747470733a2f2f692e6c6f6c692e6e65742f323031382f31322f30362f356330393432383237653436332e676966&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过网上有说官方的 Demo 在部分 Android 设备上(系统主要为 4.4)出现了卡顿（iOS 正常），可能在 Android 低端机上表现还不够理想。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bao-da-xiao&quot;&gt;包大小&lt;&#x2F;h4&gt;
&lt;p&gt;我的一个比较简单的 App，上架了之后，在 Google Play 的大小为 7.8M，在 AppStore 上是 15 M，所以大致是 Android 的比原生大 5 M，iOS 的比原生大 10 M 那样。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-android-size.jpg&quot;
        width=&quot;307&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-ios-size.jpg&quot;
        width=&quot;754&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;crash&quot;&gt;Crash&lt;&#x2F;h4&gt;
&lt;p&gt;目前还没有这方面的数据，因为量不大，不好下结论。从个人体验来说，遇到的概率比较少，在 Develop 模式下倒是遇到过开机 Crash，Release 模式下还没有遇到过。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cha-jian-ji-zhi&quot;&gt;插件机制&lt;&#x2F;h3&gt;
&lt;p&gt;Flutter 提供了一套完善的插件机制方便与 Native 端进行数据传送、方法调用、流式处理。大致的实现是定义好两端都认识的基础类型，然后对消息进行编码和解码，再根据不同的消息使用目的（数据传送还是方法调用还是事件订阅）来执行不同的操作，这就给了 Flutter 很大的扩展空间。&lt;&#x2F;p&gt;
&lt;p&gt;有了这套插件机制，Native 和 Flutter 就可以各司其职。Flutter 负责展示相关的，Native 负责提供需要的数据，以及暴露 Native 的能力供调用。比如 App 需要实现跟服务端实时通信的功能，可以在 Native 端开发好功能，然后通过 EventChannel 把数据同步过去即可。&lt;&#x2F;p&gt;
&lt;p&gt;在性能这块，我记得看过闲鱼的一份报告，大概是 10K 以下的数据耗时不到 1ms，因此小数据的互传问题不大。&lt;&#x2F;p&gt;
&lt;p&gt;在 pub.dartlang.org 上，Flutter 相关的插件数量有 2k 多，评分在 90 及以上的差不多有 1k。不多，但也不算少了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huo-yue-de-she-qu&quot;&gt;活跃的社区&lt;&#x2F;h3&gt;
&lt;p&gt;Flutter 项目在 Github 上有近 5 万个关注； 在掘金上，Flutter 标签下有 800 多篇文章；闲鱼团队也在主推 Flutter；Reddit 上 FlutterDev 有近 1 万个关注者；StackOverflow 上也有近万个 Flutter 相关的提问。关注社区的活跃度其实就是想知道会不会在短期内挂掉，从目前的状况看，我觉得可能性比较小，而它被另一个同类产品 PK 掉的可能性则更小，因此值得投入时间去了解它。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;目前 Fluter 比较适合 Side Project 或探索性的项目，就我有限的开发经验来讲，还是挺舒服的，毕竟用优雅的姿势同时搞定两端还是有吸引力的，这也是我选择学习 Flutter 的主要原因。而公司的主打 App 引入 Flutter 则需要冒一定的风险，遇到问题不一定能够 hold 住，短时间内也不一定能带来多少效率上的提升，还要对支持体系进行改造，可能也就大厂玩得起吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Architecture Flutter App the Bloc_Redux Way</title>
            <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bloc-redux/</link>
            <guid>https://limboy.me/posts/bloc-redux/</guid>
            <description>&lt;p&gt;这是&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;bloc_redux&quot;&gt;项目地址&lt;&#x2F;a&gt;，下面来阐述下产生背景和它的一些特点。&lt;&#x2F;p&gt;
&lt;p&gt;接触 Flutter 也有一段时间了，在如何管理状态和处理数据流这块，并没有一个可以直接拿来用的现成方案。好吧，其实有，一个是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brianegan&#x2F;flutter_redux&quot;&gt;flutter_redux&lt;&#x2F;a&gt;，一个是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;felangel&#x2F;bloc&quot;&gt;flutter_bloc&lt;&#x2F;a&gt;。先来说说 flutter_redux，这个可以算是 redux 在 flutter 的官方实现了，主要由两部分组成: &lt;code&gt;StoreProvider&lt;&#x2F;code&gt; 和 &lt;code&gt;StoreConnector&lt;&#x2F;code&gt;，前者用来保存 store，后者用来响应新的 state，看一个代码片段：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Every time the button is tapped, an action is dispatched and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; run through the reducer. After the reducer updates the state,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the Widget will be automatically rebuilt with the latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; count. No need to manually manage subscriptions or Streams!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StoreConnector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  converter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (store) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; store.state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, count) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      count,
&lt;&#x2F;span&gt;&lt;span&gt;      style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Theme&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(context).textTheme.display1,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码的问题在于只要 reducer 有更新 state，那么所有消费该 Store 的 Connector 就会被 rebuild，哪怕这个 state 有 10 个属性，而 reducer 只是改了其中的一个 bool 值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Creates the base [NextDispatcher].
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; The base NextDispatcher will be called after all other middleware provided
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; by the user have been run. Its job is simple: Run the current state through
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the reducer, save the result, and notify any subscribers.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NextDispatcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_createReduceAndNotify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; distinct) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;dynamic&lt;&#x2F;span&gt;&lt;span&gt; action) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;reducer&lt;&#x2F;span&gt;&lt;span&gt;(_state, action);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (distinct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _state) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;    _changeController.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(state);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是 redux 这个 library 里的 Notify 机制，采用的是 &lt;code&gt;==&lt;&#x2F;code&gt; 判断，这就是问题。在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&quot;&gt;react-redux&lt;&#x2F;a&gt; 中，这块是有优化的，通过 &lt;code&gt;connect&lt;&#x2F;code&gt; 的 &lt;code&gt;mapStateToProps&lt;&#x2F;code&gt;，可以让 Component 指定关心 State 的哪些属性，然后在 react-redux 内部会对 &lt;code&gt;mapStateToProps&lt;&#x2F;code&gt; 的返回值和上次保存的进行比较，如果不一样再 rebuild，这样的好处是只有当 Component 关心的哪些属性真的变化时才进行 render。而 flutter_redux 无法做到这点(可能跟 flutter 不让用反射有关)，效率上就会打折扣。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;felangel&#x2F;bloc&quot;&gt;flutter_bloc&lt;&#x2F;a&gt;，这也是关注度蛮高的一个项目，说这个之前先说说 bloc，这是 flutter 提的一个概念，运行机制大致如下：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bloc-redux&amp;#x2F;movie250-bloc.png&quot;
        width=&quot;561&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;它更像一个提案，缺少标准和实现。flutter_bloc 就是对这个提案的一个实现。这个实现本质上没觉得跟 flutter_redux 有太大的区别，而复杂度倒是增加了不少，还提出了一些新的概念(比如 BlocSupervisor, BlocDelegate, Transation)，增加了理解上的困难。在处理核心的 state 问题上依旧跟 flutter_redux 一样，甚至都没有做 &lt;code&gt;==&lt;&#x2F;code&gt; check。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_bindStateSubject&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt; currentEvent;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;(_eventSubject) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;concatMap&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt; event) {
&lt;&#x2F;span&gt;&lt;span&gt;    currentEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; event;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mapEventToState&lt;&#x2F;span&gt;&lt;span&gt;(_stateSubject.value, event);
&lt;&#x2F;span&gt;&lt;span&gt;  }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt; nextState) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; transition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Transition&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        currentState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; _stateSubject.value,
&lt;&#x2F;span&gt;&lt;span&gt;        event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; currentEvent,
&lt;&#x2F;span&gt;&lt;span&gt;        nextState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; nextState,
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocSupervisor&lt;&#x2F;span&gt;&lt;span&gt;().delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onTransition&lt;&#x2F;span&gt;&lt;span&gt;(transition);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onTransition&lt;&#x2F;span&gt;&lt;span&gt;(transition);
&lt;&#x2F;span&gt;&lt;span&gt;      _stateSubject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(nextState);
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在往 &lt;code&gt;_stateSubject&lt;&#x2F;code&gt; 里塞 nextState 时甚至都没有跟之前的 state 进行判断。同时从作者的意图上是希望多个 bloc 一起使用的，这也会造成使用上的不便（比如我这个 Event 到底应该 dispatch 给哪个 bloc？）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginEvent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; widget.loginBloc,
&lt;&#x2F;span&gt;&lt;span&gt;  builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginState&lt;&#x2F;span&gt;&lt;span&gt; loginState,
&lt;&#x2F;span&gt;&lt;span&gt;  ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_loginSucceeded&lt;&#x2F;span&gt;&lt;span&gt;(loginState)) {
&lt;&#x2F;span&gt;&lt;span&gt;      widget.authBloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span&gt;(token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; loginState.token));
&lt;&#x2F;span&gt;&lt;span&gt;      widget.loginBloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoggedIn&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;综上，这两格 Library 都无法满足我，只能再造一个轮子了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bloc-redux&quot;&gt;Bloc_Redux&lt;&#x2F;h2&gt;
&lt;p&gt;其实只要让 flutter_redux 能够更高效地把状态变化传递给 widgets，问题就解决了。那如何做呢？返回一个新的 state，也就是 reducer 之路，应该是行不通了，因为无法高效地找到变化过的属性，即使可以，还要维护一个属性跟 widgets 的 map，太复杂了。换一个想法，Flutter 不是提供了 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt; 么，那让 Widget 自己选择 listen 哪些 stream，然后当一个 action dispatch 过来后，这些 stream 获得相应的改变不就行了么？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;limboy&#x2F;bloc_redux&#x2F;master&#x2F;lib&#x2F;bloc_redux&#x2F;bloc_redux.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中处理 action 的 reducer 被替换成了 bloc，来看一下核心代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; every action should extends this class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; payload;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Input are used to change state.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; usually filled with StreamController &#x2F; BehaviorSubject.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; handled by blocs.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; implements disposable because stream controllers needs to be disposed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; they will be called within store&amp;#39;s dispose method.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Disposable&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Output are streams.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; followed by input. like someController.stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; UI will use it as data source.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Combine these two into one.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt; output;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Bloc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; like reducers in redux, but don&amp;#39;t return a new state.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; when they found something needs to change, just update state&amp;#39;s input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; then state&amp;#39;s output will change accordingly.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span&gt; action, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; input);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Store
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; widget use `store.dispatch` to send action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; store will iterate all blocs to handle this action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; if this is an async action, blocs can dispatch another action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; after data has received from remote.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Disposable&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; blocs;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span&gt; action) {
&lt;&#x2F;span&gt;&lt;span&gt;    blocs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;((f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(action, state.input));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 State 被分成了 StateInput 和 StateOutput，其中 Input 部分给 Bloc，方便更新 Stream；Output 部分给 Widgets，方便接收最新数据。同时 Store 也有一个 dispose 方法，因为到时 store 会被放到 StoreProvider 里，当它被 dispose 时，可以让 store 也 dispose，让那些 stream 可以被 close。&lt;&#x2F;p&gt;
&lt;p&gt;就这么简单，我们来看一个 demo：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Actions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; selectedColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; selectedColor;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colors;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt; input) {
&lt;&#x2F;span&gt;&lt;span&gt;    selectedColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        input.selectedColor.stream, input.selectedColor.value);
&lt;&#x2F;span&gt;&lt;span&gt;    colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span&gt;(input.colors.stream, input.colors.value);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Blocs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colorSelectHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (action, input) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    input.selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(action.payload);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.colors.value
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((colorModel) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colorModel
&lt;&#x2F;span&gt;&lt;span&gt;          ..isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; action.payload.value)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    input.colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(colors);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Store
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    blocs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [colorSelectHandler];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; init
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RandomColor&lt;&#x2F;span&gt;&lt;span&gt;(index).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;randomColor&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    _colors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(_colors);
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(_colors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].color);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Store 就像人的大脑，负责接收信息做出决策，而信息的处理者就是一个个的 Bloc。再来看看 Widget 是如何接收数据，发送 action 的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorsWidget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatelessWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; store &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StoreProvider&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; store.state.output.colors;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.stream,
&lt;&#x2F;span&gt;&lt;span&gt;      initialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.initialData,
&lt;&#x2F;span&gt;&lt;span&gt;      builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, snapshot) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; snapshot.data;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGrid&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            crossAxisCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((colorModel) {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GestureDetector&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                onTap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; () {
&lt;&#x2F;span&gt;&lt;span&gt;                  store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect&lt;&#x2F;span&gt;&lt;span&gt;()..payload &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color);
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                  decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxDecoration&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color,
&lt;&#x2F;span&gt;&lt;span&gt;                      border&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Border&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colorModel.isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;              );
&lt;&#x2F;span&gt;&lt;span&gt;            }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt; 来消费 state output，通过 &lt;code&gt;store.dispatch&lt;&#x2F;code&gt; 来发送 action，It&#x27;s that simple.&lt;&#x2F;p&gt;
&lt;p&gt;最后，附上项目地址：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bloc_redux&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bloc_redux&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>「不就是」与「不仅仅是」</title>
            <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/just-not-only/</link>
            <guid>https://limboy.me/posts/just-not-only/</guid>
            <description>&lt;p&gt;假设我们用笔在纸上画一条线，就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-1x.png&quot;
        width=&quot;591&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来很丝滑。但如果有一个放大镜，放大到 4 倍再来看看，这时可能就会发现一些断点了：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-4x.png&quot;
        width=&quot;591&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果再放大到 8 倍，这些断点就会更加明显：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-8x.png&quot;
        width=&quot;591&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但其实它们是同一个事物，变化的只是观察的方式。远看和近看，近看和细看，会有不同的风景。&lt;&#x2F;p&gt;
&lt;p&gt;So What?&lt;&#x2F;p&gt;
&lt;p&gt;我想起这几次去日本让我印象深刻的一点：把一些小事做到极致。比如只做乌冬面的「山元面蔵」，很小的店面，营业时间也很短，可选的也非常有限，但面就是好吃，就是要排队才能吃的上；又比如腌菜，一听名字就 low low 的，但居然大老远带了几包回来，因为路过一家叫「大安」的腌菜店，试吃了下，居然被征服了。&lt;&#x2F;p&gt;
&lt;p&gt;不就是乌冬面么，不就是腌菜么？这就好比切换到了 1x 视角，乍看之下那条线确实是连续的，你的判断没有错。但有心的人会拿起 4 倍镜甚至 8 倍镜去看，真的没有瑕疵么，没有改进的空间了么？这就进入到了「不仅仅是」模式了。&lt;&#x2F;p&gt;
&lt;p&gt;客户端编程有什么难的么？不就是 MVC 架构加一些常用库再调调系统 API 么？差不多还真就是这些，怪不得 iOS 开发没人要了，不如换一个朝阳产业吧，听说 AI 比较火？&lt;&#x2F;p&gt;
&lt;p&gt;这就是 1x 视角带来的问题，他会影响你的判断，让你放弃一些本来有机会做出一番成就的领域。其实开一下 4x 视角就会发现并没有那么简单：如何优雅地实现动画效果；如何让布局代码更加直观；如何让写出来的页面更容易维护；如何提高多人协作的效率等等，如果发现类似这些问题都已经有成熟的解决方案，也就是这条线在 4x 放大镜下，依旧保持着很好的连续性，或许可以考虑换一条线试试。&lt;&#x2F;p&gt;
&lt;p&gt;如果还不甘心，那就开一下 8x 视角。高性能图片处理、图片滤镜系统有不错的方案么？高频的本地数据读写及服务端同步有好的实现么？网络通信安全及二进制包加密有没有新的玩法？等等，通常会有那么几个有挑战的，看看自己有没有兴趣和能力搞定。&lt;&#x2F;p&gt;
&lt;p&gt;所以，客户端编程不仅仅是「MVC 架构加一些常用库再调调系统 API」，自然后端开发也不仅仅是「CRUD 工程师」。只要调整下放大倍数，就会发现那些「断点」，这些都可以作为切入点。&lt;&#x2F;p&gt;
&lt;p&gt;内心产生的浮躁感，往往是倍数调得不够高，放眼看去就是一条完美的线。「我的天才女友」里，埃莱娜问莉拉：为什么要学习拉丁文？莉拉回答：因为她美。如果这是你在乎的领域，如果你觉得她还不够美，那就让她变得更美吧。在别人眼中她可能「不就是 xx 么」，但在你的眼中，她「不仅仅是 xx」。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Habbit 一个极简的习惯养成 App</title>
            <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/habbit/</link>
            <guid>https://limboy.me/posts/habbit/</guid>
            <description>&lt;h3 id=&quot;01-23-update&quot;&gt;01&#x2F;23 update&lt;&#x2F;h3&gt;
&lt;p&gt;源码放到了 github 上: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;habbit&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;habbit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;「习惯养成」是件大事，一个好习惯受用终生，一个坏习惯会让「更好的你」越来越远。时不时地会有那么几个瞬间下定决心要让美好的事情持续发生，而结果往往不太如意。这里面会有一些策略方面的因素，比如「每周跑 3 次步」比「这个月减 10 斤」更容易实施，也更容易达到减肥的效果。也会有一些战术方面的原因，比如没有好的工具或小团体的监督。最难的是，旧习惯就像一棵大树，现在要把它拔掉还要种上新的树更是难上加难。决心、策略、战术一个都不能少，其中前两个更多的是靠自己，第三个就是工具的施展空间，我希望有一款简单、够用，不需要花很多 willpower 的 App，于是就有了 &lt;a href=&quot;http:&#x2F;&#x2F;habbit.life&#x2F;&quot;&gt;Habbit&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;habbit.life&#x2F;&quot;&gt;Habbit&lt;&#x2F;a&gt; 的设计理念是在能够完成核心功能的前提下尽可能地简单。对于「核心功能」的定义，我认为是可以每天 Check，同时方便浏览。这其中借用了 Jerry Seinfeld 用过的一个技巧：&amp;quot;Don&#x27;t break the chain.&amp;quot;。可能很多人对他不是很熟悉，这里简单介绍下，他是美国著名单人脱口秀喜剧演员，最出名的作品是在美国家喻户晓的的情景喜剧《宋飞正传》Seinfeld（1989 年至 1998 年），他在剧中扮演自己（嗯，九季我都看完了···）。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;He said the way to be a better comic was to create better jokes and the way to create better jokes was to write every day. He revealed a unique calendar system he uses to pressure himself to write.&lt;&#x2F;p&gt;
&lt;p&gt;He told me to get a big wall calendar that has a whole year on one page and hang it on a prominent wall. The next step was to get a big red magic marker.&lt;&#x2F;p&gt;
&lt;p&gt;He said for each day that I do my task of writing, I get to put a big red X over that day. &amp;quot;After a few days you&#x27;ll have a chain. Just keep at it and the chain will grow longer every day. You&#x27;ll like seeing that chain, especially when you get a few weeks under your belt. Your only job next is to not break the chain.&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;他的方法是在墙上挂一个日历，每天任务完成就画个 X。慢慢地当这些 X 连在一起时，你会不忍心中断。很简单的一个技巧，对他来说却很管用，于是我也希望有这么一个简单的 App，可以让我 Chain 一把。这就是 Habbit 的核心功能。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;habbit&amp;#x2F;habbit-screenshot.jpg&quot;
        width=&quot;621&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很简单，希望能带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的 2018</title>
            <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-2018/</link>
            <guid>https://limboy.me/posts/my-2018/</guid>
            <description>&lt;p&gt;今年最大的事情应该就是从公司离职了，到现在也有半年多的时间，期间基本处于摸索阶段，倒也还小有收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gan-wu&quot;&gt;感悟&lt;&#x2F;h3&gt;
&lt;p&gt;如何判断一个人的状态呢？我觉得如果能够清楚的回答：为什么这个时间要做这件事？那就是好的状态。因为这背后会涉及到一些深层次的原因，没有想清楚是很难回答上来的。&lt;&#x2F;p&gt;
&lt;p&gt;为了回答这个问题，首先要知道「做什么」？如何知道呢？不妨以终为始，来看看想要的结果是什么，我希望在我离开这个世界前能够&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;给特定领域（们）带来一些积极的影响。&lt;&#x2F;li&gt;
&lt;li&gt;对世界有更深的了解。&lt;&#x2F;li&gt;
&lt;li&gt;有一小撮聊得来的人。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 1 点，需要先选择一个「领域」。这个领域要跟自己的特点有较大的契合度，同时在短期内不太会被颠覆。这里就涉及到认识自己的问题，我觉得最好的方法就是多尝试。这半年时间里我啃过机器学习，还是从数学层面开始啃的，程度大概是可以理解反向传播涉及到的公式，同时对各类神经网络的实现方式和适用场景有了解；刷过 LeetCode，感觉还是挺吃力的，虽然到后来能找到点窍门，但也没有坚持下去；看完了一本英文的操作系统书；做了一个匿名 App，小范围传播了下，还挺受欢迎的。这些事情尝试下来，同时回顾自己之前感觉比较爽的时刻，就大概知道什么事情是有吸引力的，哪些事情是能力范围外的。在这个前提下再去找匹配的领域就会方便许多。&lt;&#x2F;p&gt;
&lt;p&gt;选定的领域往往会比较大，这时就要进行细分，看看哪块是自己感兴趣的，哪块是比较重要的，哪块是自己不懂的，哪块是最有可能产生高杠杆率的。然后着重突破这一小块细分的领域，先成为这一小块的专家，再去找下一块合适的小领域。&lt;&#x2F;p&gt;
&lt;p&gt;知道了做什么之后，就要选择怎么做，我的经验是「创作和分享」。创作能够将知识点联结起来，达到巩固和完善的效果，同时还能感受到灵感和创意，以及克服种种困难最终完成作品的成就感。分享（通常是文章）考验的是对原理的理解程度，往往写着写着就发现自己并没有真的掌握，同时还可以给其他人带来帮助。&lt;&#x2F;p&gt;
&lt;p&gt;第 2 点对应的是「兴趣」。比如看「基因传」可以了解基因是怎么回事，它是怎么被发现的。「汽车是怎样跑起来的」可以对汽车有更深的了解。电影、小说也一样。&lt;&#x2F;p&gt;
&lt;p&gt;第 3 点是领域+兴趣。除了血缘、地缘和业缘外，如果要在更大范畴里找到那些人，就要进行广播。作品是最好的广播媒介，无论是一个 app、一本书或一篇文章。&lt;&#x2F;p&gt;
&lt;p&gt;知道了领域和兴趣后，接下来就是时间的分配。我非常喜欢 2、3、5 这 3 个数，不仅是前三个质数，还是斐波那契数列，而且加起来正好是 10。如果一天有 10 小时可自由支配时间的话，理想状态下，5 小时分给领域，3 小时分给兴趣。分给领域的时间要么有助于加深理解，要么有助于扩大圈子，而不仅仅是重复技能。&lt;&#x2F;p&gt;
&lt;p&gt;我的大领域是「表现端」，细分一下可以先啃客户端，再细分就是 iOS 端，再细分到 Swift，iOS 特性等等，也可以细分到跨平台层如 Flutter 开始啃，当然相关领域如后端&#x2F;设计也需要一并了解。是不是很像一棵树，从根节点开始，一步步找到子节点，然后再回溯。我希望在交出满意作品的同时，可以为这个领域做出点贡献。&lt;&#x2F;p&gt;
&lt;p&gt;经过以上的分析后，回答这个问题就会更加有底了。但这还只是完成了一半，甚至是一小半，因为知道和做到之间还有一条很大的鸿沟。如果不知为 0，知道为 1，做到至少是 10。也就是做到的难度比知道要大上 10 倍，因为这里有一个拦路虎：旧习惯。不要指望能够一下子做出改变，合适的方法应该是从很微小的地方着手，进而对后续的行为带来一系列的影响。比如手机放得离床远 1 米，或者把电脑放床边，临睡前翻开感兴趣的电子书，这样第二天醒来之后可以接着看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-fa&quot;&gt;启发&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;de-zhou-bu-ke-tou-zi&quot;&gt;德州扑克(投资)&lt;&#x2F;h4&gt;
&lt;p&gt;这个游戏可以很简单地玩，也可以高难度地玩。输了几次之后发现只要控制入池率，也就是只玩好牌，然后选择有跟牌价值的牌玩，一般不会输得太惨（冤家牌除外），尽管看起来少了很多乐趣。&lt;&#x2F;p&gt;
&lt;p&gt;每天的精力就像筹码，如何用好这些筹码来换取最大的回报，值得想一想。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huang-shi-zhan-zheng-ce-lue&quot;&gt;皇室战争(策略)&lt;&#x2F;h4&gt;
&lt;p&gt;这也是玩了很久的一款游戏，到了 4000 的坎之后发现很难再往上爬了，即使偶尔升了上去，也会很快掉下来。以为是卡牌的等级原因，看过几次解说之后发现思维方式很不一样。我通常会按固定的套路出牌，等对方出牌后再想应该怎么应付；但他们会记对方出过什么牌，将要出什么牌，自己的哪些牌要藏着，应该集中精力攻哪边，等等。总体来说是被动应付和主动选择的区别。&lt;&#x2F;p&gt;
&lt;p&gt;这款游戏让我了解到自己在策略方面的不足。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ri-ben-zhi-ye&quot;&gt;日本(职业)&lt;&#x2F;h4&gt;
&lt;p&gt;今年去了两次日本，一次是东京，另一次是京都，印象较深的一点是他们的职业精神。公交司机会挨个对下车的乘客行礼，一家店可以只做乌冬面（配一些辅菜），就连去漂流，划船的小哥也会给游客们讲笑话（尤其是在语言不通的情况下），做一些表演，活跃气氛。有种既然选择了这份职业，就值得把它做好的心态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lie-biao&quot;&gt;列表&lt;&#x2F;h3&gt;
&lt;p&gt;以下是我的 Best 列表：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dian-shi-ju&quot;&gt;电视剧&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The Newsroom (嗯，看哭了)&lt;&#x2F;li&gt;
&lt;li&gt;Rick and Morty&lt;&#x2F;li&gt;
&lt;li&gt;Breaking Bad&lt;&#x2F;li&gt;
&lt;li&gt;Better Call Saul (前三季)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;books&quot;&gt;Books&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Operating Systems: Three Easy Pieces (深入浅出不枯燥，会讲演化过程)&lt;&#x2F;li&gt;
&lt;li&gt;上帝掷骰子吗？（作者非常会讲故事，能学到不少知识）&lt;&#x2F;li&gt;
&lt;li&gt;原则（立足于现实、第三选项、有效决策、避免杏仁核劫持、有意义的人际关系）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;apps&quot;&gt;Apps&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Bear (iPhone + Mac)&lt;&#x2F;li&gt;
&lt;li&gt;Tweetbot (iPhone + Mac)&lt;&#x2F;li&gt;
&lt;li&gt;Things 3 (iPhone + iPad + Mac，用的不多，收藏价值更大)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;quotes&quot;&gt;Quotes&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming, as in many fields, the hard part isn’t solving problems, but deciding what problems to solve. Imagination is hard to measure, but in practice it dominates the kind of productivity that’s measured in lines of code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是欣赏艺术，还是领悟科学，我们最终得到的将是美的享受和看待世界的全新角度。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplicity is complicated but the clarity is worth the fight.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;个体唯一能做的，就是保有自己的一份自由，就是这个世界怎么变，我自己有我自己的世界，这个你不能侵犯。&lt;&#x2F;p&gt;
&lt;p&gt;陈佩斯·事了拂衣去&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The noblest pleasure is the joy of understanding.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;wei-sheng&quot;&gt;尾声&lt;&#x2F;h3&gt;
&lt;p&gt;今年最大的收获大概是更加明确了自己想要什么，之前有小伙伴问我，在名校（CMU）一般专业和一般学校好专业之间如何选择，我说这是在考验你是否真的喜欢那个专业。后来自己也遇到了类似的场景，因为时不时会有猎头推荐不错的职位。坚持自己所爱确实挺难的，尤其是在收入有明显差距的情况下，但从长远来看，我相信这份坚持是值得的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一个 Demo 入门 Flutter</title>
            <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/flutter-demo/</link>
            <guid>https://limboy.me/posts/flutter-demo/</guid>
            <description>&lt;p&gt;Flutter 是 Google 研发的一套移动端开发框架，也是 Google 正在研发的下一代操作系统 Fuchsia 的 App 开发框架（Web 和 Desktop 也都在进行积极的尝试），前几天刚发布了 1.0 正式版。关于 Flutter 的原理和介绍可以参考美团的&lt;a href=&quot;https:&#x2F;&#x2F;tech.meituan.com&#x2F;waimai_flutter_practice.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;本文希望通过一个 Demo 来更深入地了解 Flutter 的布局、状态管理等细节。这个 Demo 可以获取豆瓣的 Top 250 电影，以自定义列表形式呈现，可以收藏&#x2F;取消收藏，可以点击查看详情页。&lt;&#x2F;p&gt;
&lt;p&gt;源码: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;flutter-demo-topmovies&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;flutter-demo-topmovies&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;video.twimg.com&#x2F;ext_tw_video&#x2F;1070286725656662017&#x2F;pu&#x2F;vid&#x2F;360x640&#x2F;uoeUgoq2-EigTzi7.mp4?tag=6&quot;&gt;这里&lt;&#x2F;a&gt;可以查看最终的效果。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-demo.png&quot;
        width=&quot;964&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;mu-lu-hua-fen&quot;&gt;目录划分&lt;&#x2F;h3&gt;
&lt;p&gt;接到这个需求后首先要考虑的是目录结构应该怎么划分，这也是架构的一部分，我是这么分的:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;blocs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;widgets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;models&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;pages&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;routes&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;services&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;main.dart
&lt;&#x2F;span&gt;&lt;span&gt;env.dart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;bloc&quot;&gt;BLoC&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;BLoC&lt;&#x2F;code&gt; 是 Business Logic of Components 的缩写，也就是负责所有业务逻辑的，跟 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的职能挺像的。是一个纯洁的 Dart 类，跟 UI 完全解耦，更加详细的说明可以参见&lt;a href=&quot;https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5bb6f344f265da0aa664d68a&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;widgets&quot;&gt;Widgets&lt;&#x2F;h4&gt;
&lt;p&gt;这个目录下面放的是所有的 Widget，Widget 位于 Flutter Framework 的最上层，用来描述 UI 元素的 Layout &#x2F; Animation 等，或者非 UI 元素(如 DataProvider)，最终这些 Widget 会被组装起来形成 Page。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;models&quot;&gt;Models&lt;&#x2F;h4&gt;
&lt;p&gt;服务端的 JSON 过来后，需要转换成对应的 Model 方便使用，Model 不需要包含业务逻辑，但可以有一些简单的 Model 相关的操作，比如 CRUD。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pages&quot;&gt;Pages&lt;&#x2F;h4&gt;
&lt;p&gt;通常一个 App 会有多个页面组成，这些页面就可以放到这个目录下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;routes&quot;&gt;Routes&lt;&#x2F;h4&gt;
&lt;p&gt;虽然 Flutter 也支持直接 push 一个 Widget，但这样不方便页面管理，对于像「外部的 URL 可以直接跳转到某个页面」这样的功能处理起来也会麻烦些。因此，需要有一个地方可以对 URL 进行注册。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;services&quot;&gt;Services&lt;&#x2F;h4&gt;
&lt;p&gt;这个是放 Remote API 相关的，理论上来说，加一层 Repository 抽象会更加合适，出于方便，就去掉了这一层。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;main-dart&quot;&gt;main.dart&lt;&#x2F;h4&gt;
&lt;p&gt;入口文件，用来初始化 App&lt;&#x2F;p&gt;
&lt;h4 id=&quot;env-dart&quot;&gt;env.dart&lt;&#x2F;h4&gt;
&lt;p&gt;用来设置一些环境变量，类似于 Config。&lt;&#x2F;p&gt;
&lt;p&gt;设置好了目录后，接下来进行任务分解，首先要完成的就是布局，进行布局之前需要有数据源，方便模拟，最好跟正式接口一致，那就先来完成这一项工作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-shu-ju-jie-kou&quot;&gt;设置数据接口&lt;&#x2F;h3&gt;
&lt;p&gt;我们希望从模拟环境到真实环境只需改一个配置即可，为了达到这个目的，我们先把协议定好，到时只要换一个实现就行。这里会用到两个接口&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;package:topmovies&#x2F;models&#x2F;movie.dart&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后新建一个 Mock API 类来实现这个接口&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MockAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createMockMovieWithTitle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;我是电影 $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;movieID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 现在还用不着
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在 &lt;code&gt;env.dart&lt;&#x2F;code&gt; 里新建一个 Env 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;services&#x2F;api.dart&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; apiClient;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其实就是提供一个全局的 apiClient 注入接口，App 初始化时，设置好 apiClient，使用时不需要关心是哪个 apiClient 实例，这样也方便单元测试。&lt;&#x2F;p&gt;
&lt;p&gt;经过这两步后，数据接口就准备好了，接下来需要设置 BLoC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-shou-ye-de-bloc&quot;&gt;设置首页的 BLoC&lt;&#x2F;h3&gt;
&lt;p&gt;BLoC 其实就是 ViewModel，有了 API 实现之后，接下来就要让 Widget 可以用上这些数据，这就是 BLoC 做的事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-bloc.png&quot;
        width=&quot;561&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Widget 告诉 BLoC 发生了什么，BLoC 告诉 Widget 哪些数据更新了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBase&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; _movieEnvelope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _currentStart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;movieEnvelope&lt;&#x2F;span&gt;&lt;span&gt; =&amp;gt; _movieEnvelope.stream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getMovies&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getMovies&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;.apiClient.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(_currentStart).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((movieEnvelope) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; newMovieEnvelope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; movieEnvelope;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_movieEnvelope.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        newMovieEnvelope.movies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _movieEnvelope.value.movies
&lt;&#x2F;span&gt;&lt;span&gt;          ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span&gt;(movieEnvelope.movies);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      _movieEnvelope.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(newMovieEnvelope);
&lt;&#x2F;span&gt;&lt;span&gt;      _currentStart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; movieEnvelope.movies.length;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 Widget 来说，只要 listen &lt;code&gt;bloc.movieEnvelope&lt;&#x2F;code&gt; 就能第一时间拿到最新的 movie 数据，然后把它们展示出来即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streambuilder&quot;&gt;StreamBuilder&lt;&#x2F;h3&gt;
&lt;p&gt;如果直接用 &lt;code&gt;setState&lt;&#x2F;code&gt; 的话，使用姿势是在 state 的 &lt;code&gt;initState&lt;&#x2F;code&gt; 时 listen &lt;code&gt;bloc.movieEnvelope&lt;&#x2F;code&gt;，当收到新的内容时，setState，这样系统就会 rebuild widget，然后用上最新的数据。Flutter 很贴心地提供了便捷的类 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt;，只要告诉它 &lt;code&gt;stream&lt;&#x2F;code&gt;，那么当这个 stream 有新数据时，&lt;code&gt;itemBuilder&lt;&#x2F;code&gt; 就会自动 rebuild。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatefulWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatefulWidget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_MoviesState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_MoviesState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; bloc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; bloc.movieEnvelope,
&lt;&#x2F;span&gt;&lt;span&gt;        builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, snapshot) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; snapshot.data 就是最新的内容
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 返回一个新的 widget 即可
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到这里有一个 &lt;code&gt;BlocProvider&lt;&#x2F;code&gt;，这是何物？它其实也是个 Widget（是的，Flutter 的 Widget 并不局限于 UI）。&lt;&#x2F;p&gt;
&lt;p&gt;为什么通过&lt;code&gt;of&lt;&#x2F;code&gt;方法能拿到这个 bloc？因为在构建 Tree 时，&lt;code&gt;BlocProvider&lt;&#x2F;code&gt; 套在了当前视图的上层(只要从当前节点向上追溯能找到就行)，就像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MyApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatelessWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Douban Movie Top 250&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Home&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而这个 &lt;code&gt;of&lt;&#x2F;code&gt; 方法也很简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_typeOf&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这句话的意思就是从当前 context 向上找，找到第一个该类型的实例为止，找不到就返回 null
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ancestorWidgetOfExactType&lt;&#x2F;span&gt;&lt;span&gt;(type);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; provider.bloc;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;BLoC 差不多有了之后，接下来就可以进入布局阶段了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-ye-bu-ju&quot;&gt;首页布局&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-home-layout.png&quot;
        width=&quot;255&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Flutter 提供了两种列表布局方式: &lt;code&gt;ListView&lt;&#x2F;code&gt; 和 &lt;code&gt;GridView&lt;&#x2F;code&gt;，如果页面里除了列表还有其他元素（比如顶部的 SlideView 等），就需要用到 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 或者 &lt;code&gt;NestedScrollView&lt;&#x2F;code&gt;，首页除了列表没有其他元素，同时一行可能包含多个视图，因此我们选择 &lt;a href=&quot;https:&#x2F;&#x2F;docs.flutter.io&#x2F;flutter&#x2F;widgets&#x2F;GridView-class.html&quot;&gt;GridView&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;GridView 的构建可以使用 &lt;code&gt;GridView.builder&lt;&#x2F;code&gt;, 它需要提供几个关键信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GridView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  gridDelegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 提供最终的布局信息，x,y,width.height
&lt;&#x2F;span&gt;&lt;span&gt;  itemCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 一共有多少元素
&lt;&#x2F;span&gt;&lt;span&gt;  itemBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, index) {} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 每个 item 具体长啥样
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果是固定的每行几列或固定宽度，且每个 item 的呈现形式几乎一样，可以直接使用自带的 &lt;code&gt;SliverGridDelegateWithFixedCrossAxisCount&lt;&#x2F;code&gt; 或 &lt;code&gt;SliverGridDelegateWithMaxCrossAxisExtent&lt;&#x2F;code&gt;，我们这个 case 中，每一行的列表不都是一样的，因此不能直接拿来用，这就需要进入到高级模式了，自己实现 &lt;code&gt;gridDelegate&lt;&#x2F;code&gt;。 &lt;code&gt;SliverGridDelegate&lt;&#x2F;code&gt; 的核心方法是 &lt;code&gt;SliverGridLayout getLayout(SliverConstraints constraints);&lt;&#x2F;code&gt; 也就是返回一个 &lt;code&gt;SliverGridLayout&lt;&#x2F;code&gt;，系统拿到这个 layout 之后，就知道该怎么布局了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGridLayout&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 针对某个 scroll 的偏移量，最小的 index 是多少
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMinChildIndexForScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; scrollOffset);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 针对某个 scroll 的偏移量，最大的 index 是多少
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMaxChildIndexForScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; scrollOffset);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 给一个 index，告诉我它的 x,y,width,height
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGridGeometry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getGeometryForChildIndex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 这些 childcount 一共能产生多大的偏移量
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 知道了这个信息后，系统就可以展示滚动条的长短了
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;computeMaxScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; childCount);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;具体实现这里就不贴出来了，感兴趣的可以在源码里看。还是有点小复杂的，尤其是加上 loadmore 的逻辑后，不过知道了系统想要什么，想尽办法满足它就是了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zai-ru-geng-duo&quot;&gt;载入更多&lt;&#x2F;h3&gt;
&lt;p&gt;第一次请求的布局是完成了，如何实现载入更多的效果呢？在 iOS 中会通过判断是否拉到了底部来触发加载更多的逻辑，在 Flutter 中我们可以换一种方式来达到效果。&lt;&#x2F;p&gt;
&lt;p&gt;什么时候需要加载更多？当前视图的 item 都展示完了的时候，而在展示 item 时，builder 会传入一个 &lt;code&gt;index&lt;&#x2F;code&gt;，用来告知当前 item 处于哪个 &lt;code&gt;index&lt;&#x2F;code&gt;，我们可以把这个信息告诉 BLoC。比如第一页一共展示 20 部电影，当 BLoC 收到 index 19 时，就知道这 20 部都已经被展示过了，就可以通过 API 去拿更多的数据，等拿到后，跟原先的数据进行合并，然后作为新的值告诉 widget，widget 的 StreamBuilder 发现有新数据后，自动刷新 widget，这样新的电影就被展示出来了。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂的一点是加载更多时，需要展示一个 indicator，当没有更多数据时，又是另一个样式，这又该如何处理呢？可以思考下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-api-jie-ru&quot;&gt;Real API 接入&lt;&#x2F;h3&gt;
&lt;p&gt;前面这几步都走完后，列表的布局应该没问题了，接下来就要接入真实的数据了。这个接入过程还是挺简单的，新建一个实现了 &lt;code&gt;API&lt;&#x2F;code&gt; 的类，然后在 App 入口处，用它替换掉 MockAPI&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RealAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;HttpClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getUrl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;top250?start=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;amp;count=40&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; responseBody &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;(utf8.decoder).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(responseBody);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fromJSON&lt;&#x2F;span&gt;&lt;span&gt;(data);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 暂时还用不到，先忽略
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dart 内置了对异步请求的支持，分为两大块，&lt;code&gt;async + await + Future&lt;&#x2F;code&gt; 和 &lt;code&gt;Stream + async* + yield&lt;&#x2F;code&gt;，前者用来处理单次或少量的异步请求，后者用来实现异步的 &lt;code&gt;iterator&lt;&#x2F;code&gt;，也就是数据可能会源源不断地冒出来。&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，通过 await 来拿异步数据就可以了，拿到之后把它转换为 model(方便起见，错误处理就先忽略)。 然后在入口处设置&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;.apiClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RealAPI&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;runApp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;item-de-nei-rong-zhan-shi&quot;&gt;item 的内容展示&lt;&#x2F;h3&gt;
&lt;p&gt;这块是个细致活，对于 Widget 元素的使用可以参考官方的&lt;a href=&quot;https:&#x2F;&#x2F;flutter.io&#x2F;docs&#x2F;development&#x2F;ui&#x2F;layout&quot;&gt;这个教程&lt;&#x2F;a&gt;，需要提一点的是 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt; 这个 widget，默认 child widget 是拿不到 parent 的布局信息的，但有时又需要拿它来进行一些计算，这时就可以在外面套一层 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt;，它的 &lt;code&gt;builder&lt;&#x2F;code&gt; 属性是一个 function，会传一个 &lt;code&gt;BoxConstraints&lt;&#x2F;code&gt; 进来，通过它就能拿到 parent 的布局信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-cang-ying-pian&quot;&gt;收藏影片&lt;&#x2F;h3&gt;
&lt;p&gt;点击影片 title 旁边的 &lt;code&gt;...&lt;&#x2F;code&gt;， 如果是 iOS 平台，则弹出一个 &lt;code&gt;ActionSheet&lt;&#x2F;code&gt;，Android 则弹出 &lt;code&gt;BottomSheet&lt;&#x2F;code&gt;，选择收藏的话，这个 &lt;code&gt;...&lt;&#x2F;code&gt; 会变成红色。&lt;&#x2F;p&gt;
&lt;p&gt;如果要针对不同平台进行不同的展示，可以使用 &lt;code&gt;Platform.isIOS&lt;&#x2F;code&gt; 来区分(这个类在 &lt;code&gt;dart:io&lt;&#x2F;code&gt; package 下)，关于 &lt;code&gt;ActionSheet&lt;&#x2F;code&gt; 和 &lt;code&gt;BottomSheet&lt;&#x2F;code&gt; 的使用，查看相应的 API 即可。比较麻烦的是 &lt;code&gt;...&lt;&#x2F;code&gt; 的变色处理，倒不是变色麻烦，而是要让这个状态得到保持，不然下次再滑到该 item 时，又会回到原先的颜色。&lt;&#x2F;p&gt;
&lt;p&gt;大多数的教程里，对这部分的处理都是更新 list 中该 item 对应的 model，然后让更新后的 list 触发 StreamBuilder 重新渲染 widget，我觉得这样实在有点小题大做了。我的做法是给每个 item 配一个对应的 bloc，item 的 model 和状态都保存在这个 bloc 中，在这个例子中，当某个 movie item widget 需要更新状态时，从它对应的 bloc 中拿即可。&lt;&#x2F;p&gt;
&lt;p&gt;如果这时要新加一个 Feature，当收藏电影时，顶部 AppBar 的右边要有对应的数字显示。在 Google 官方的 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=RS36gBEp8OI&quot;&gt;Demo&lt;&#x2F;a&gt; 里是直接在 widget 的 &lt;code&gt;onTap&lt;&#x2F;code&gt; callback 里调用另一个 bloc 的方法(&lt;code&gt;CartBloc.addition&lt;&#x2F;code&gt;)，这样其实把业务逻辑也耦合到了 UI 里面（如果 CartBloc 的 addition 逻辑变了，或者在添加到 Cart 的同时，还要更新用户状态等，就需要在这个 callback 里调整这些逻辑），因此更好的方法是自己的 bloc 处理完后向上抛 Notification，外层接收到 Notification 后再去更新其他 Bloc。就好像要进行跨部门沟通时，最好让共同的上级知道这件事，或者由他来协调。&lt;&#x2F;p&gt;
&lt;p&gt;这里简单说下 Flutter 里的 Notification 机制，它不像 iOS 里的 &lt;code&gt;NotificationCenter&lt;&#x2F;code&gt; 可以全局接收，而是只有在 widget 上层路径中的 &lt;code&gt;NotificationListener&lt;&#x2F;code&gt; 才能收到通知，这样可以避免通知泛滥的情况。而且使用时，必须继承系统的 &lt;code&gt;Notification&lt;&#x2F;code&gt;，这样每一个通知就是一个特定类，阅读代码或排查起来也会很方便。&lt;&#x2F;p&gt;
&lt;p&gt;至此，首页的电影列表页基本完成了，该进入详情页了，在这之前，还有一件事情要做，那就是 Router 的注册。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;router-zhu-ce&quot;&gt;Router 注册&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;MaterialApp&lt;&#x2F;code&gt; 自带了 Router 注册，乍一看还挺方便的，不过有一个坑就是不支持通过 URL 传递动态参数，比如 &lt;code&gt;&#x2F;movie&#x2F;1024&lt;&#x2F;code&gt;，必须完全匹配才可以。如果真要实现 pattern 匹配就要设置 &lt;code&gt;onGenerateRoute&lt;&#x2F;code&gt; 参数，当通过 Navigator 进行 push 时，这个参数对应的方法就会被触发，可以在这个方法里面进行 URL 的解析。&lt;&#x2F;p&gt;
&lt;p&gt;我在这里实现了个简单的通过 URL 注册 Widget 的方法，URL 支持 pattern，比如 &lt;code&gt;&#x2F;movie&#x2F;{id}&lt;&#x2F;code&gt; 就能匹配 &lt;code&gt;&#x2F;movie&#x2F;1024&lt;&#x2F;code&gt;，使用时，通过 URL 来拿 widget，再把这个 widget push 出去即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; param should wrap with {}, eg: &#x2F;movie&#x2F;{id}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; pattern, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;WidgetBuilder&lt;&#x2F;span&gt;&lt;span&gt; widgetBuilder) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; patternSections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; pattern.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; patternSections.length; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _pattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; patternSections[i];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _router &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; _pattern);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; patternSections.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        _router.widgetBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; widgetBuilder;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      routerEntry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addChild&lt;&#x2F;span&gt;&lt;span&gt;(_router);
&lt;&#x2F;span&gt;&lt;span&gt;      routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getWidget&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; urlSections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span&gt; widget;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; urlSections.length; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _urlSection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; urlSections[i];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt; _router &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; routerEntry.children) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _urlSection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; _router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, _router.name.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            urlParams[param] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _urlSection;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; urlSections.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.widgetBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;              widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                  _router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;widgetBuilder&lt;&#x2F;span&gt;&lt;span&gt;(context, urlParams, params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; params);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;found) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; widget;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;路由的注册&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Routes&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; detail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;movie&#x2F;{id}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;configureRoutes&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(root, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Home&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(detail, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams,
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviePage&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        movieID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; urlParams[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;movie&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;movie&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiang-qing-ye-bu-ju-xuan-ze&quot;&gt;详情页-布局选择&lt;&#x2F;h3&gt;
&lt;p&gt;详情页主要分为 4 个部分，顶部的海报图，中间的概要、横向可滚动的影人列表页和 Tab 标签，以及最下面的列表页。有两个方案可以选，&lt;code&gt;NestedScrollView&lt;&#x2F;code&gt; 和 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt;，前者分为 header 和 body 两部分，可以在里面套 scrollView，最开始选择了这个方案，后来发现 &lt;code&gt;TabbarView&lt;&#x2F;code&gt; 怎么都处理不好，如果把它单独放到 body 里，那么所有剩下的部分就都要放到 header 里，虽然可行，但跑起来会发现，&lt;code&gt;TabbarView&lt;&#x2F;code&gt; 里的 scroll offset 是错的，一部分内容会「钻」进 Tabbar 里，而且底部空了很大一部分。如果把除了海报图，剩下的部分都放到 body 里，也不行，被迫只能选择 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 方案的一个难点是处理 &lt;code&gt;TabbarView&lt;&#x2F;code&gt;，因为不能直接把它放到 &lt;code&gt;slivers&lt;&#x2F;code&gt; 里，于是换了个思路，抛弃 &lt;code&gt;TabbarView&lt;&#x2F;code&gt; 手动实现 tabbar 点击之后，下面的内容切换效果。&lt;&#x2F;p&gt;
&lt;p&gt;详情页的核心代码大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      backgroundColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0xfff4f4f4&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; bloc,
&lt;&#x2F;span&gt;&lt;span&gt;        child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;loading&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NotificationListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TabSwitchNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              onNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (notification) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setState&lt;&#x2F;span&gt;&lt;span&gt;(() {
&lt;&#x2F;span&gt;&lt;span&gt;                  currentTabType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notification.tabContentType;
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;              },
&lt;&#x2F;span&gt;&lt;span&gt;              child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DefaultTabController&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                  length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SafeArea&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CustomScrollView&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                        slivers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieHero&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverToBoxAdapter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieSummary&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverToBoxAdapter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieActors&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverPadding&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;EdgeInsets&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7.0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieReviewTabbar&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieReviewTabbarContent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            tabContentType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; currentTabType,
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                        ],
&lt;&#x2F;span&gt;&lt;span&gt;                      ))),
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }()),
&lt;&#x2F;span&gt;&lt;span&gt;      ));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 tabbar 来说，需要提供一个 controller，要么通过属性设置，要么外面包一层，这里选择了后者，所以可以看到最外面是 &lt;code&gt;DefaultTabController&lt;&#x2F;code&gt;，这样就可以在里面通过 &lt;code&gt;DefaultTabController.of(context)&lt;&#x2F;code&gt; 来拿到这个 controller，进而了解当前选中的 tab，以及控制 tab 的选中情况。&lt;&#x2F;p&gt;
&lt;p&gt;普通的 Widget 要通过 &lt;code&gt;SliverToBoxAdapter&lt;&#x2F;code&gt; 转换才能被放到 slivers 里面，slivers 其实就是 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 的组成部分。通过上面的代码，我们可以知道这个 scrollview 是由哪几部分组成的，非常清晰。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ding-bu-hai-bao-xiao-guo&quot;&gt;详情页-顶部海报效果&lt;&#x2F;h3&gt;
&lt;p&gt;这个效果看上去满复杂的，实现起来很简单，只要使用 &lt;a href=&quot;https:&#x2F;&#x2F;docs.flutter.io&#x2F;flutter&#x2F;material&#x2F;SliverAppBar-class.html&quot;&gt;SliverAppBar&lt;&#x2F;a&gt; 这个 Widget 即可。&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@diegoveloper&#x2F;flutter-collapsing-toolbar-sliver-app-bar-14b858e87abe&quot;&gt;这里&lt;&#x2F;a&gt; 有比较详细的介绍。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ying-pian-jie-shao&quot;&gt;详情页-影片介绍&lt;&#x2F;h3&gt;
&lt;p&gt;这里主要是使用 Text Widget，一个难点是默认内容是截断和收起的，当点击按钮后，展开。如果是在 iOS 里，需要分别计算两者的高度，然后调用 &lt;code&gt;reloadRowsAtIndexPaths&lt;&#x2F;code&gt; 方法，有点麻烦，Flutter 里很简单，widget 自己更新内容即可，不需要考虑高度的计算，也不要显式地调用 reload 方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ying-ren-lie-biao&quot;&gt;详情页-影人列表&lt;&#x2F;h3&gt;
&lt;p&gt;这是一个横向滑动列表，把 &lt;code&gt;ListView&lt;&#x2F;code&gt; 的 &lt;code&gt;scrollDirection&lt;&#x2F;code&gt; 设置为 &lt;code&gt;horizontal&lt;&#x2F;code&gt; 即可&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-tabbar&quot;&gt;详情页-Tabbar&lt;&#x2F;h3&gt;
&lt;p&gt;Tabbar 需要有一个 controller，我们在外面包了一层 &lt;code&gt;DefaultTabController&lt;&#x2F;code&gt;，这里就不需要操心了。比较坑的一点是，&lt;code&gt;TabBar&lt;&#x2F;code&gt; 这个 Widget 没有提供 &lt;code&gt;onTap&lt;&#x2F;code&gt; 方法，只能通过监听 controller 来获取 tab 的变化，不过这样也好，管理起来更方便。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 这里的 Tabbar 是需要吸顶的，因此要用 &lt;code&gt;SliverPersistentHeader&lt;&#x2F;code&gt; 包一下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-dian-ping-lie-biao&quot;&gt;详情页-点评列表&lt;&#x2F;h3&gt;
&lt;p&gt;点评列表是一个 &lt;code&gt;SliverList&lt;&#x2F;code&gt;，配置起来还算简单，那么点击 tab 切换内容这个该如何实现呢？可以思考下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;我个人很喜欢 Flutter， 用它来写 GUI 感觉非常自然和舒服。不需要借助 JSX 或 XML，用编程语言就能搞定，方便 Local Reasoning，不需要在 JSX &#x2F; XML 和 Code 之间来回切换。同时通过 Widget 来配置视图的方式也很方便，GUI 非常适合这种声明式编程。&lt;&#x2F;p&gt;
&lt;p&gt;刚开始接触 Flutter 时，容易被那一大堆的类搞晕，其实了解了核心理念后，啃透几个 Demo，就会慢慢找到感觉。自己再多写写，踩踩坑，就熟练了。&lt;&#x2F;p&gt;
&lt;p&gt;至于性能方面，debug 跟 release 模式还是会有些差距，因此如果在 debug 模式下发现不够流畅，可以切换到 release 模式再试下。&lt;&#x2F;p&gt;
&lt;p&gt;我也是接触 Flutter 不久，如果有不对的地方欢迎指正，如果能给你带来些帮助，备感荣幸。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>操作系统是如何管理内存的</title>
            <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/os-memory/</link>
            <guid>https://limboy.me/posts/os-memory/</guid>
            <description>&lt;p&gt;最近在看 &lt;a href=&quot;http:&#x2F;&#x2F;pages.cs.wisc.edu&#x2F;%7Eremzi&#x2F;OSTEP&#x2F;&quot;&gt;Operating Systems: Three Easy Pieces&lt;&#x2F;a&gt; 这本书，作者在这方面有 20 多年的积累，同时文风非常朴实，不会被各种术语绕晕。该书进从虚拟化、并发、持久化这三个方面来剖析操作系统，从要达到的目标到遇到的问题到解决方案到新的问题，一层层地告诉你为什么会变成现在这个样子。&lt;&#x2F;p&gt;
&lt;p&gt;今天要讲的内容主要是对该书里面关于内存管理这块的一个小结，由于看的是 0.8 版，跟最新的 1.0 版可能会有些许出入。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;每个进程创建的内存地址都是虚拟地址，操作系统使用了虚拟化技术，让进程觉得它拥有了大块可支配的内存的假象，操作系统拿到这个地址后会将它转变为真实的内存地址，从而拿到对应的信息。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of code : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) main)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of heap : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) malloc(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of stack : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;location of code : 0x10df2aec0
&lt;&#x2F;span&gt;&lt;span&gt;location of heap : 0x7fdeea400350
&lt;&#x2F;span&gt;&lt;span&gt;location of stack : 0x7ffee1cd560c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些都是虚拟地址。对于内存的虚拟化，有三个最重要的要素：透明（就像内存只为当前的进程所用）、高效（就像直接操作物理内存那样）、保护（进程之间不能随意读写各自的内存区域），伴随着这三个要素，就开始了探索之旅。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-gu-shi-dai&quot;&gt;远古时代&lt;&#x2F;h2&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;1.jpg&quot;
        width=&quot;222&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一开始，只有一个进程，一切都很美好，除了操作系统的自留地外，剩下的都给那个进程，想怎么折腾都行，只要别超出最大的容量。&lt;&#x2F;p&gt;
&lt;p&gt;但我们知道，那个时候，一台计算机是很贵的，比 iPhone XS Max 还贵，在这么昂贵的机器上同时只能运行一个程序实在浪费，于是就有了支持多进程的需求，所谓多进程，并不需要同时运行这些进程，只要它们都处于 ready 状态，操作系统快速地在它们之间切换，就能达到同时运行的假象。每个进程都需要内存，Context Switch 时，之前内存里的内容怎么办？简单粗暴的方式就是先 dump 到磁盘上，然后再从磁盘上 restore 之前 dump 的内容（如果有的话），但效果并不好，太慢了！&lt;&#x2F;p&gt;
&lt;p&gt;那怎么才能不慢呢？把进程对应的内存依旧留在物理内存中，需要的时候就切换到特定的区域。这就涉及到了内存的保护机制，毕竟进程之间可以随意读取、写入内容就乱套了，非常不安全。因此操作系统需要对物理内存做一层抽象，也就是「地址空间」(Address Space)，一个进程的地址空间包含了该进程所有相关内存，比如 code &#x2F; stack &#x2F; heap。一个 16 KB 的地址空间可能长这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;2.jpg&quot;
        width=&quot;363&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当程序运行时，heap 和 stack 共用中间 free 的区域，当然这只是 OS 层面的抽象。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; this is the line of code we are interested in
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;变成汇编指令后，大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;  ;load 0+ebx into eax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;132&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: addl $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;add 3 to eax register
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;135&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;store eax back to mem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最前面的是 PC (Program Counter)，用来表示当前 code 的索引，比如 CPU 执行到 128 时，进行了 Context Switch，那么在 Switch 回来后，还可以接着从 132 开始执行（当然需要先把 PC 存起来）。之后的就是汇编代码，告诉 CPU 该如何操作。&lt;&#x2F;p&gt;
&lt;p&gt;从进程的角度看，内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;3.jpg&quot;
        width=&quot;272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;真实的物理内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;4.jpg&quot;
        width=&quot;283&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从 32KB 处作为开始，48KB 作为结束。那 32 &#x2F; 48 可不可以动态设置呢，只要在 CPU 上整两个寄存器，base 和 bounds 就可以了，base 指明从哪里开始，bounds 指定哪里是边界。 因此真实物理地址和虚拟地址之间的关系是：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;physical address = virtual address + base
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有时，CPU 上用来做内存地址翻译的也会被叫做「内存管理单元 MMU」(Memory Management Unit)，随着功能越来越强大，MMU 也会变得越来越复杂。&lt;&#x2F;p&gt;
&lt;p&gt;base and bounds 这种做法最大的问题在于空间浪费，Stack 和 Heap 中间有一块 free space，即使没有用，也被占着，那如何才能解放这块区域呢，就有了下面的做法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-duan-segmentation&quot;&gt;分段（Segmentation）&lt;&#x2F;h2&gt;
&lt;p&gt;分段的思想很简单，之前不是一大块都是连在一起的么，现在要把你们都分开，code &#x2F; stack &#x2F; heap 各自成为一段，段内的空间是连续的，段与段之间不必连续，这样空间利用率上就更高了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;7.jpg&quot;
        width=&quot;505&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;5.jpg&quot;
        width=&quot;484&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来问题就来了，一个进程会有多个段，如何知道一个内存地址对应的是哪个段呢？一个方法是用地址的前两个字节来表示：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;6.jpg&quot;
        width=&quot;333&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;00&lt;&#x2F;code&gt; 表示 code, &lt;code&gt;01&lt;&#x2F;code&gt; 表示 heap。获取物理地址的过程大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取前两个比特
&lt;&#x2F;span&gt;&lt;span&gt;Segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; SEG_MASK) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SEG_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取 Offset
&lt;&#x2F;span&gt;&lt;span&gt;Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; Bounds[Segment])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RaiseException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Base[Segment] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; Offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可能有些同学已经忘了位操作，这里简单复习下，所谓掩码就是用来屏蔽指定位的一串二进制，结合 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作就可以让其他位都变为 0，需要保留的位保持原样，比如 &lt;code&gt;110110&lt;&#x2F;code&gt; 这串二进制，想要保留前三位，同时把后三位清零，只需要与 &lt;code&gt;111000&lt;&#x2F;code&gt; 执行 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作即可。如果只想要前 3 位，那么向右移 3 位，&lt;code&gt;&amp;gt;&amp;gt; 3&lt;&#x2F;code&gt;，因此上面那段代码 &lt;code&gt;Segment&lt;&#x2F;code&gt; 就变成了前两个比特。&lt;&#x2F;p&gt;
&lt;p&gt;拿到了 &lt;code&gt;Segment&lt;&#x2F;code&gt; 和 &lt;code&gt;Offset&lt;&#x2F;code&gt;，先判断下是否在安全区域内，如果超出则抛出异常，不然就去找到真实的物理地址。&lt;&#x2F;p&gt;
&lt;p&gt;每个段依旧会有 Base 和 Bounds，但注意到有些段是向上扩张，有些是向下扩张，这个信息也需要被额外记录：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;8.jpg&quot;
        width=&quot;624&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，还会有其他的信息需要记录，比如是否可读写等。&lt;&#x2F;p&gt;
&lt;p&gt;那这个做法有没有问题呢，有的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;当 Context Switch 时，Segment Registers 必须被存储起来方便下次使用。&lt;&#x2F;li&gt;
&lt;li&gt;更大的问题是，每个进程自带了好几个段，且大小不一，容易形成碎片化(之前申请的内存被释放了)，创建新的地址空间时，就不那么方便了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;9.jpg&quot;
        width=&quot;570&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，当一个进程想要申请 20KB 的段时，虽然有 24KB 的剩余空间，但并不连续，因此会申请失败。一种解决方法是让内存空间变得更紧凑，比如暂停正在运行的进程，把内存拷贝到连续的地址空间，修改 Segment Register，这样就可以变成右图那样了。但是代价有点大，拷贝段会花费显著的时间。无论使用何种算法，碎片化一定会存在，只是好点的算法能降低碎片化程度。&lt;&#x2F;p&gt;
&lt;p&gt;顺便提一下 C 里面的内存申请，当 &lt;code&gt;malloc(size_t size)&lt;&#x2F;code&gt; 时，会返回一个指针，当 &lt;code&gt;free(void *pointer)&lt;&#x2F;code&gt; 时，会释放指针对应的区域，也就是说 &lt;code&gt;free&lt;&#x2F;code&gt; 时，不需要知道 &lt;code&gt;size&lt;&#x2F;code&gt;，这是因为申请内存时，有一块额外的区域用来存储这些信息，比如当用户执行 &lt;code&gt;ptr = malloc(20)&lt;&#x2F;code&gt; 时&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;10.jpg&quot;
        width=&quot;611&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了那 20 个字节，头部还留了点空间用来放 &lt;code&gt;size&lt;&#x2F;code&gt; 和 &lt;code&gt;magic&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; __header_t {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; magic;
&lt;&#x2F;span&gt;&lt;span&gt;} header_t;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    header_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;hptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- sizeof&lt;&#x2F;span&gt;&lt;span&gt;(header_t);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;拿到指针后，可以判断 magic number 是否相等，然后计算需要 free 的 size (header + body)，这里有一个&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;%7Ebenson&#x2F;cs326&#x2F;pintos&#x2F;pintos&#x2F;src&#x2F;threads&#x2F;malloc.c&quot;&gt;简易的 malloc 实现&lt;&#x2F;a&gt;供参考。&lt;&#x2F;p&gt;
&lt;p&gt;既然段模式会有碎片化的问题，那如何才能避免呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-ye-paging&quot;&gt;分页（Paging）&lt;&#x2F;h2&gt;
&lt;p&gt;Paging 的思想是把地址空间切分成固定大小的单元。比如下面一个只有 64 字节的地址空间，每个 Page 16 个字节&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;11.jpg&quot;
        width=&quot;471&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对应到真实的物理地址：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;12.jpg&quot;
        width=&quot;441&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，虽然地址空间是连续的，但物理地址并不是。这样的好处是，不用去考虑 heap &#x2F; stack 会被申请多少 size，比如要申请 64 字节地址空间，只要给 4 个 free 的 page 即可，这样 OS 管理起来也很简单，比如只要维护一份 free pages list，然后给出前 4 个。为了记录虚拟页(Virtual Page)跟物理地址之间的关系，OS 需要维护给每个进程维护一份 Page Table，它的作用就是地址翻译。比如 &lt;code&gt;movl &amp;lt;virtual address&amp;gt;, %eax&lt;&#x2F;code&gt;，由于进程的地址空间是 64 字节，因此需要 6 个比特来表示（2^6 = 64）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;13.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于 Page Size 为 16 字节，因此 offset 为 4（4 个比特就能表示全一个 Page 里的任意位置），剩下的前两位作为 VPN (Virtual Page Number)&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;14.jpg&quot;
        width=&quot;275&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;movl 21, %eax&lt;&#x2F;code&gt;, 21 转成 2 进制就是 &lt;code&gt;010101&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;15.jpg&quot;
        width=&quot;285&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;经过地址翻译后，就能找到物理内存中的地址了&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;16.jpg&quot;
        width=&quot;345&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么问题又来了，Page Tables (用来将虚拟地址翻译成物理地址)存在哪里呢？在想这个问题前，先想下 Page Tables 大概有多大？&lt;&#x2F;p&gt;
&lt;p&gt;如果每个 Page Table Entry (PTE) 需要 4 个字节来保存 物理地址(PFN, Physical Frame Number)和其他的状态码，一个进程会有多少个 PTE 呢？假设地址空间为 32 位，Page Size 为 4KB，那么虚拟地址就可以被拆分成 20 bits 的 VPN 和 12 bits 的 Offset，有 2^20 个 VPN 可能需要翻译，就需要有对应数量的 PTE，因此一个进程大概需要 4MB 的内存来存储 Page Tables，想想如果有 100 个进程在运行，就需要 400MB，这个数量可不算小。&lt;&#x2F;p&gt;
&lt;p&gt;既然 Page Tables 如此之大，放 CPU 的寄存器里是不可能了，那就只能放内存了，因此在获取虚拟地址对应的物理内存地址时，需要先访问一次内存，这比直接访问 CPU 的寄存器会慢很多。&lt;&#x2F;p&gt;
&lt;p&gt;顺便来看一下 PTE 到底长啥样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;17.jpg&quot;
        width=&quot;599&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;前几位都是状态位，用来表示这段内存目前的状态，比如是否有效（Valid），是否可读，是否在 Swap 等。PFN 是真正的物理内存地址。&lt;&#x2F;p&gt;
&lt;p&gt;采用分页模式后，物理地址的获取过程就变成了这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; 把 VPN 摘出来
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 把 PTE 的地址组装好
&lt;&#x2F;span&gt;&lt;span&gt;PTEAddr = PTBR + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 访问地址，拿到内容，注意，这里访问了内存，会影响速度
&lt;&#x2F;span&gt;&lt;span&gt;PTE = AccessMemory(PTEAddr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 检查是否有效
&lt;&#x2F;span&gt;&lt;span&gt;if (PTE.Valid == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(SEGMENTATION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else if (CanAccess(PTE.ProtectBits) == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; 有效的话，再去拿真实的物理地址
&lt;&#x2F;span&gt;&lt;span&gt;  Offset = VirtualAddress &amp;amp; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr = (PTE.PFN &amp;lt;&amp;lt; PFN_SHIFT) | offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么如何对这个过程进行加速呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tlb-translation-lookaside-buffer&quot;&gt;TLB (Translation-Lookaside Buffer)&lt;&#x2F;h2&gt;
&lt;p&gt;如果要加速，最容易想到的就是加缓存，TLB 就是 CPU 芯片 MMU 的一部分，首先 check TLB 中有没有该虚拟地址对应的物理地址，有的话直接返回，这样就不用再访问内存了，自然也就快了。那这个 TLB 到底长怎样呢？可以认为是很简单的 Key-Value 对，再加上额外的一些状态码 &lt;code&gt;VPN | PFN | other bits&lt;&#x2F;code&gt;。注意这里也会有 valid bit，只不过这里表示的是当前这个是不是一个有效的翻译，而 Page Table 里的 valid 状态码表示的是该内存是否被初始化过，如果没有被初始化，那么 valid 就为 0。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 Context Switch。每个进程的 VPN 和 PFN 的对应关系是不一样的，因此上一个进程的对应关系对于下一个进程来说，完全无用。那怎么办？最简单粗暴的方式就是进程切换时，直接清空，这样虽然不会出问题，但也降低了缓存命中率，尤其是频繁切换的话。还有一种方法是多加一个字段来表示该段翻译对应的是哪个地址空间（ASID），有点像 PID。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;18.jpg&quot;
        width=&quot;362&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但 CPU 这寸土寸金的地方，不可能放很大的缓存，而且 size 越小，访问速度才会越快，当缓存满了之后怎么办？可以采用常见的策略，比如 LRU 或 Random。所以虽然内存被叫做 Random Access Memory，但也分是否命中缓存，那些命中 TLB 缓存的才是最快的。&lt;&#x2F;p&gt;
&lt;p&gt;OK，访问速度这个问题算是解决了，还有一个体积大的问题又该怎么处理呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smaller-tables&quot;&gt;Smaller Tables&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have two good and seemingly opposing ideas, you should always see if you can combine them into a hybrid that manages to achieve the best of both worlds.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回顾之前，我们采用段模式时，并没有体积大的问题，因为只需要 base and bounds 就可以了，那有没有可能把段和页结合起来呢？我们来试试，如果每个 Segment 对应一个 Table，这样就只需要 3 个 Table。对于 Segment 来说，现在 Bounds 变为了判断 Page Table 的边界（比如有多少个 Pages）。假设 32 位的地址空间，4KB Pages，就会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;20.jpg&quot;
        width=&quot;648&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果 TLB 没有命中的话，过程大概如此&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;SN = (VirtualAddress &amp;amp; SEG_MASK) &amp;gt;&amp;gt; SN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; VPN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;AddressOfPTE = Base[SN] + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这样 Segment 自带的碎片化问题依旧存在，到时 malloc 寻找可用空间时依旧会比较复杂。回过头来，我们再来看下，占用的这 4MB 空间真的是必须的么？&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;21.jpg&quot;
        width=&quot;444&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;22.jpg&quot;
        width=&quot;511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，中间的一大部分都是空的，但依旧会被填充（因为是采用数组的方式来访问），那有没有办法既能表达「无」的信息，又不占用空间呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multi-level-page-tables&quot;&gt;Multi-level Page Tables&lt;&#x2F;h3&gt;
&lt;p&gt;多级分页表。比如要去宿舍找同学玩，发现宿舍大楼门关着，那么就不用再到寝室了，多级分页表的思路也类似，在最前面先做一次粗检，如果粗检都不符合就直接打回，粗检通过之后再来一次细检，这样就能把空间给省下来，具体是怎么做的呢？&lt;&#x2F;p&gt;
&lt;p&gt;把 PTE(Page Table Entry, 包含了物理地址和状态码)放进 page-sized units（比如一个 Page 里放 16 个 PTE），如果该 Page 的 PTE 都无效，那么压根就不申请内存，然后外面包一层 Page Directory 用来表示里面是否有有效的 PTE。就像文件夹一样，如果文件夹里没有文件，自然就不会占用空间。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;23.jpg&quot;
        width=&quot;923&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边是单层 Page Table 的实现，可以看到，虽然只有最下面两层是 valid 的，但中间依旧会有很多被占用的空间（就像要访问数组的第 1000 个元素，必须先要把这 1000 个元素填满）。&lt;&#x2F;p&gt;
&lt;p&gt;右边是两层 Page Table 的实现，通过 Valid 状态码就可以知道是否有必要去物理地址拿内容，如果第一层的 Valid 为 1，那么地址转换后就可以拿到第二层 PTE 的内容，如果此时 Valid 为 0，抛出 Exception，为 1，那么继续去拿真正的存放在物理内存中的内容。 因此最外层的 Valid 为 1，只是表示里面至少有一个 Valid 的 PTE。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，空间上是不是节省了不少。但也有弊端，比如需要两次内存访问才能拿到真正的虚拟地址对应的内容，所以这是一个典型的时间换空间的做法。还有一个弊端就是复杂度，无论是硬件还是操作系统，处理起来肯定比一个线性的 Page Table 查找复杂，但为了省出来的内存，这个 tradeoff 还是可以接受的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设 CPU 在解析指令时，遇到了一个 14 位长的虚拟地址，现在要把它转换为真实地址，并取出其中的内容：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;25.jpg&quot;
        width=&quot;448&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Page Directory Index 告诉 CPU 去第几层找 PDE(Page Directory Entry)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;PDEAddr = PageDirBase + (PDIndex * sizeof(PDE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;PageDirBase 对应具体的物理地址。如果 PDE 的 valid 位为 0，则直接抛异常，不然就把 Page Table Index 拿出来，找到 PTE，看看它的 valid 状态码，如果为 0，抛异常，为 1 则去取最终的物理地址中的内容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;如果要看更详细的，最好还是阅读原著，会有更细致的描述和一些没提到的内容，比如跟磁盘的内存交换。&lt;&#x2F;p&gt;
&lt;p&gt;了解这些底层的运行机制除了满足好奇外，还可以学到不少复杂系统的应对策略，对于其他的项目也会有所启发。比如其中提到的 Mechanism 和 Policy，前者指定大方向，后者处理实现；时间&#x2F;空间上的取舍；当有两种看起来相反的思路时，如何有效地混合；复杂度和性能之间的取舍等等。这些对于设计、编写高质量的程序都大有裨益。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>时而不见</title>
            <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/12hour/</link>
            <guid>https://limboy.me/posts/12hour/</guid>
            <description>&lt;p&gt;某天深夜，独自在床上辗转，忽然被深深的孤独感笼罩，那一刻，我想找到一个出口，一个不用担心身份，不用纠结于措辞，不用担心其他人看法的地方，最好第二天起来就不见了。就像深夜食堂一样，只在晚上营业，早上关门休息。&lt;&#x2F;p&gt;
&lt;p&gt;但是我找不到，所有的社交网络都需要一个账号，而 Note 显然也无法满足我的需求。&lt;&#x2F;p&gt;
&lt;p&gt;我喜欢泡咖啡馆，这个 app 应该像一个关了灯的咖啡馆，你说话会有人听到，可能会有回应，但不知道你是谁。&lt;&#x2F;p&gt;
&lt;p&gt;既然没有满足需求的产品，那就动手做一个吧。&lt;&#x2F;p&gt;
&lt;p&gt;一开始的想法是只在晚上 22 点开放，早上 7 点关门，因此最开始这个 app 的名字叫「2207」。做完后，发给几个朋友内测，感觉还蛮新奇的，会猜某个帖子是不是 xx 发的，也会对晚上 10 点多了份期待。后来更新 app 之后，他们要到晚上才能使用，就不够方便了。于是一个 idea 涌了上来：不如任何时段都可以，然后发完 12 个小时后，自动消失。&lt;&#x2F;p&gt;
&lt;p&gt;于是就有了「时而不见」这个 app。&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-1.jpg&quot;
        width=&quot;621&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-2.jpg&quot;
        width=&quot;621&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再来说说技术层面，一直想用 Swift 正经开发一个 App，这次终于如愿以偿。Swift 是我使用过的语言中最优雅的，就是 Xcode 后腿拖的比较严重，比如两个 block 一嵌套，自动提示就 gg 了，再加上不支持 Vim，开发效率上也是打了点折扣。后端语言选择了 Go，因为使用简单，性能也足够好，口碑和社区也都不错，服务托管在了 Google Cloud 上。&lt;&#x2F;p&gt;
&lt;p&gt;我希望这个 App 能够保持较小的体量，然后服务好这一小撮人，控制好内容。&lt;del&gt;为了避免麻烦，会选择不在国内上架。就不上 app store 了，不定期在&lt;a href=&quot;https:&#x2F;&#x2F;testflight.top&#x2F;t&#x2F;2eIzAb&quot;&gt;这里&lt;&#x2F;a&gt;放出可用名额。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>离开舒适区</title>
            <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/leave-the-comfort-zone/</link>
            <guid>https://limboy.me/posts/leave-the-comfort-zone/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-shu-gua-qu&quot;&gt;什么是舒适区&lt;&#x2F;h3&gt;
&lt;p&gt;简单来说就是待着很舒服的一个区域。不会有太大的压力，做的事情也没什么挑战，从大脑层面来说就是不太需要前额叶皮层的参与，通过基底核(自动处理系统)就能搞定大部分事情。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_1.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这些还是偏感性层面，后来看到王兴的一句话，觉得可以比较好的形容这种状态：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我一整天都没看到、想到、或做过什么值得在饭否上说的事，那这一天就太浑浑噩噩了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;yi-zhi-dai-zai-shu-gua-qu-you-shi-yao-wen-ti-yao&quot;&gt;一直待在舒适区有什么问题么？&lt;&#x2F;h3&gt;
&lt;p&gt;停留在舒适区并没有什么问题，甚至是一件必要的事。就像爬山爬累了，需要找个地方歇一歇，看看风景，聊聊天，恢复精力，但不宜长时间停留。&lt;&#x2F;p&gt;
&lt;p&gt;这是知乎上的一个&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20618648&#x2F;answer&#x2F;15686746&quot;&gt;回答&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一种类人猿，他们比我们的人类祖先有更多的先天优势，比如有很结实的牙齿足以去消化一些纤维很粗的球茎植物，所以他们可以不用去到处进行一些危险的觅食活动，满足于一直靠啃食球状食物为生，而我们的祖先没有这些先天的优势，只能不断进行一些危险的冒险尝试，比如偷袭食肉性猛兽，和它们搏斗，常常因此而丢掉自己的性命，但是我们的祖先从未停止过这些冒险探索，从一次又一次的成功和失败中积累知识和经验，而那些相对于人类有更多先天优势的旁系类人猿一直未作其他尝试都是以球茎植物为生，地球上的环境变化了，球状植物大量减少，所以最后这种类人猿物种由于找不到充足的食物而逐渐消失，最后走到今天的是本来先天条件并不占优势的人类，并且发展壮大了起来。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一直待在舒适区其实就是处于一个不变性系统，这个系统可能就当前来看运行地还不错，但它不具有「反脆弱性」。所谓反脆弱性系统是指那些能够在波动性、随机性、混乱、压力状态下生存下来并且成长的系统。蜡烛的反脆弱性就较低，一股风或几滴水就可能把它浇灭，而火则能够抵抗更大强度的水，甚至能借风成长。&lt;&#x2F;p&gt;
&lt;p&gt;现实世界充满了变数，尤其是科技的参与，加速了进化的脚步。由于骨针的发明，兽皮可以被缝制为衣服，体毛就被「进化」掉了。在集装箱出现之前，码头的工人可以通过贩卖劳动力来换取相应的报酬，集装箱出现之后，这些劳动力就不需要了，尽管他们也抗争过，但毕竟改变不了趋势。科技跟人类的进化一直交织在一起，随着互联网、手机、AI、机器人的出现，它越来越成为了那个「看不见的手」。&lt;&#x2F;p&gt;
&lt;p&gt;同时，科技还有另一种玩法，通过满足短期快感，来形成上瘾性依赖。Rick and Morty 里有一个场景，不断给 Rick 播放一些温馨的画面，然后通过这个过程中产生的物质作为添加剂来制作威化饼干，是不是某些 App 有点像。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_2.jpg&quot;
        width=&quot;1080&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「物竞天择，适者生存」的基本规律一直在运行着，而科技大大地加速了这个过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-hui-chang-shi-jian-ting-liu-zai-shu-gua-qu&quot;&gt;为什么会长时间停留在舒适区？&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得主要有 3 个原因：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;惯性。&lt;&#x2F;li&gt;
&lt;li&gt;对未知的恐惧。&lt;&#x2F;li&gt;
&lt;li&gt;不知道去哪里。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;guan-xing&quot;&gt;惯性&lt;&#x2F;h4&gt;
&lt;p&gt;惯性是很强大的力量，用得最顺手的东西就有更高的使用可能，比如思考或做事方式，甚至对于外人看来不理想的生活也能非常适应。这是一把双刃剑，提高效率的同时，也容易形成定势，「自省」可以帮助意识到这点。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dui-wei-zhi-de-kong-ju&quot;&gt;对未知的恐惧&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;人类最古老而强烈的情绪，便是恐惧；而最古老最强烈的恐惧，便是对未知的恐惧。&lt;&#x2F;p&gt;
&lt;p&gt;— Howard Phillips Lovecraft&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;未知就意味着风险，而大多数人对于风险总是采取回避的策略。可是细想一下，如果生活中充满了确定性，那乐趣何在？&lt;&#x2F;p&gt;
&lt;p&gt;其实可以考虑下 EV，也就是期望值。有 20% 做成的可能性，因此带来的价值是 100，和 100% 的成功率，但价值是 5，哪个更可取？&lt;&#x2F;p&gt;
&lt;p&gt;陌生度越高，风险也就越大，借一笔钱给陌生人和给朋友，承受的风险是不一样的。这里貌似陷入了一个悖论：只有真正地去做某件事才能加深对它的了解，但如果对它不够了解，就有可能选择不做了。互联网出现后，这种尝试成本其实已经很低了，需要的资料网上一搜便有，有了一定的了解，这种恐惧感就会慢慢降低。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-zhi-dao-qu-na-li&quot;&gt;不知道去哪里&lt;&#x2F;h4&gt;
&lt;p&gt;可能是有限的信息源导致的狭窄的可选项，或者是心理偏见排除了不少潜在的可选项。合适的选项应该是自己的特点和跟这些特点匹配的行业的交集。这里难的是客观地认识自己。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-kai-shu-gua-qu-ke-neng-shou-huo-shi-yao&quot;&gt;离开舒适区可能收获什么&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;tong-ku&quot;&gt;痛苦&lt;&#x2F;h4&gt;
&lt;p&gt;第一个收获很可能是痛苦。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two kinds of pain. The sort of pain that makes you strong, or useless pain. The sort of pain that’s only suffering.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这是纸牌屋里的一段台词，哪种痛苦属于「only suffering」呢，我觉得是「未经反思的痛苦」。就像我们会 review 线上故障，找到系统中存在的问题，来避免下次再犯。不反思，就很有可能同样的痛苦一再出现。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sheng-cun-lu&quot;&gt;生存率&lt;&#x2F;h4&gt;
&lt;p&gt;其次是提升生存率，在自然选择这个游戏中的生存率。在打怪升级过程中积累的技能对于应对变化的环境大有裨益。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bi-mian-wu-liao&quot;&gt;避免无聊&lt;&#x2F;h4&gt;
&lt;p&gt;还有一些人，他们已经拥有了足够的自由度和应变能力，那么跳出舒适圈最大的收获可能是「避免无聊」。毕竟物质匮乏和精神无聊是人类的两大痛苦根源。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-chi-kai-shu-gua-qu&quot;&gt;如何离开舒适区&lt;&#x2F;h3&gt;
&lt;p&gt;以「做自我介绍」为例，我相信不少人是不太习惯在众人面前做自我介绍的，对于他们来说这就是一个离开舒适区的行为。我觉得可以从三个层面进行分解。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-chu-dong-li-ya-li&quot;&gt;基础（动力+压力）&lt;&#x2F;h4&gt;
&lt;p&gt;这个是回答为什么要离开舒适区，比如为什么要做好自我介绍。需要有合适的动力和压力。&lt;&#x2F;p&gt;
&lt;p&gt;通常我们不愿做好某件事，往往是缺少了压力或动力。从动力角度来讲，可能是台下坐着你喜欢的小姐姐，从压力角度，可以是领导正看着呢。&lt;&#x2F;p&gt;
&lt;p&gt;这两种力的力度要合适，压力过大容易焦虑，动力过大容易翻车。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xin-nian-zong-neng-zhao-dao-yi-tiao-lu-shou-neng-sheng-qiao&quot;&gt;信念（总能找到一条路+熟能生巧）&lt;&#x2F;h4&gt;
&lt;p&gt;信念可以帮助我们迈出那一步，比如创业，有时动力和压力都有了，但还是不敢。这时总得信一点什么，最好是经过自己验证同时对于离开舒适圈有帮助的。我相信的两条是：总能找到一条路以及熟能生巧。&lt;&#x2F;p&gt;
&lt;p&gt;对于陌生的事情，只要勤加练习，找到诀窍，至少不会做得太差，顶多比别人多花点时间。&lt;&#x2F;p&gt;
&lt;p&gt;有一个大概的创业想法，但不确定合不合适，一些细节也不知道该如何处理，那就继续想，找人聊，总能找到突破口。上天不会给一个你解决不了的问题的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-shi-fan-kui-xun-huan-jin-hua&quot;&gt;做事（反馈循环 + 进化）&lt;&#x2F;h4&gt;
&lt;p&gt;在反馈循环中不断地进化，最核心的是快速进化的能力。Airbnb 的创始人最开始只是因为付不起房租，决定出租房间里的 3 张气垫床。有客户上门之后，发现将房间出租这个 idea 有搞头，接下来不断进化，就成了现在的这个巨头了。&lt;&#x2F;p&gt;
&lt;p&gt;这种反馈可以是来自自己，比如掌握了某个知识点，也可以是来自外部。很少有想法一开始就完美，也很难一开始就把某件事做到满意，这并不重要。上线运行起来，收集用户的反馈，然后做出调整，可能就找到了一条之前根本没想过的路子。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-guo-jian-yan&quot;&gt;成果检验&lt;&#x2F;h3&gt;
&lt;p&gt;通常自己能感受到那种成长，如果要客观来看的话，「特定领域的不可替代性」或许是个不错的衡量方式。要么拓宽了特定领域（更多的可选项），或者提升了不可替代性。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>You and Your Career</title>
            <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/you-and-your-career/</link>
            <guid>https://limboy.me/posts/you-and-your-career/</guid>
            <description>&lt;p&gt;我们通常会遇到职业相关的问题，该选择哪个职业，如何进入某个领域，遇到瓶颈怎么办，是不是要换一份职业等等。这些问题很难通过灵机一动或者顿悟来找到答案。于是我就想，有没有一个合适的模型可以帮助我们思考，至少找到一些思路。还真有，而且这个模型我们每天都能接触到，就是「手机」。&lt;&#x2F;p&gt;
&lt;p&gt;手机如果要正常运行 App，需要满足一些特定的条件：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;硬件系统&lt;&#x2F;li&gt;
&lt;li&gt;操作系统&lt;&#x2F;li&gt;
&lt;li&gt;App Framework&lt;&#x2F;li&gt;
&lt;li&gt;App&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这些组成部分，上层依赖于下层，比如操作系统如果脱离了硬件系统，就没有了操作对象，也就失去了意义。通过这个模型可以帮助我们思考什么是最重要、值得去做的事情。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;硬件系统
&lt;ul&gt;
&lt;li&gt;身体&lt;&#x2F;li&gt;
&lt;li&gt;家人&lt;&#x2F;li&gt;
&lt;li&gt;朋友&lt;&#x2F;li&gt;
&lt;li&gt;财富&lt;&#x2F;li&gt;
&lt;li&gt;环境&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;操作系统
&lt;ul&gt;
&lt;li&gt;元能力（自律、开放、好奇、尝试）&lt;&#x2F;li&gt;
&lt;li&gt;通用能力（写作、沟通、学习）&lt;&#x2F;li&gt;
&lt;li&gt;重要领域的核心知识点&lt;&#x2F;li&gt;
&lt;li&gt;思维框架、方法论、原则&lt;&#x2F;li&gt;
&lt;li&gt;好的习惯&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;App Framework (职业)
&lt;ul&gt;
&lt;li&gt;编程&lt;&#x2F;li&gt;
&lt;li&gt;设计&lt;&#x2F;li&gt;
&lt;li&gt;影视&lt;&#x2F;li&gt;
&lt;li&gt;写作&lt;&#x2F;li&gt;
&lt;li&gt;管理&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;App (作品&#x2F;事迹)
&lt;ul&gt;
&lt;li&gt;iOS App&lt;&#x2F;li&gt;
&lt;li&gt;write a book&lt;&#x2F;li&gt;
&lt;li&gt;lead a team&lt;&#x2F;li&gt;
&lt;li&gt;start a company&lt;&#x2F;li&gt;
&lt;li&gt;direct a movie&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ying-jian-xi-tong&quot;&gt;硬件系统&lt;&#x2F;h3&gt;
&lt;p&gt;一部手机如果没有电，App 再好也无法运行；屏幕如果有亮点看着就会难受；网络连接模块出了问题，就会影响 App 的使用体验。&lt;&#x2F;p&gt;
&lt;p&gt;「身体」就像电池，年轻时电力充沛，连续熬两个通宵都没问题。等过了巅峰期，如果不注意维护，性能就会下降，不光运行时间短了，可能连 CPU 都会降频。&lt;&#x2F;p&gt;
&lt;p&gt;「家人」也容易被忽视，因为他们通常一直都在那里，而我们对经常出现的会习以为常。「以后有的是时间」，但如果优先级比较低，这些时间总是会被其他的事情消耗掉。&lt;&#x2F;p&gt;
&lt;p&gt;「朋友」，我觉得可以定义为有意义的人际关系，引用瑞·达里欧的话来说：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有意义的人际关系意味着人与人之间相互关心，但凡需要帮助就能得到帮助，无论工作内外大家彼此相伴，十分享受在一起的时光。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我们都有社交的需求，会想跟朋友分享、讨论些什么，一起经历些什么，在增进友谊的同时，感到不那么孤单，毕竟不想 die alone。&lt;&#x2F;p&gt;
&lt;p&gt;「财富」也是很重要的一个基础，一定程度上，它等价于自由度。因此不知道做什么时，积累财富至少不会错。但也不要上瘾或迷恋，16 核的 CPU 如果只是运行个计算器还是挺可惜的。&lt;&#x2F;p&gt;
&lt;p&gt;「环境」，比如低温状态下，手机可能会出现异常关机，身边的环境（包括工作环境&#x2F;公司环境&#x2F;大环境等）如果跟想要做的事不匹配，就换一个环境，如果没能力改变，就在这两者之间找到一种平衡。&lt;&#x2F;p&gt;
&lt;p&gt;硬件系统是基础中的基础，可以进行长期投资，一定会有合适的回报。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-xi-tong&quot;&gt;操作系统&lt;&#x2F;h3&gt;
&lt;p&gt;操作系统可以管理和控制计算机硬件和软件资源，对应到这个模型里，就是那些基础项，如果这些基础项足够强大，就能给 App 提供一个稳定、可靠、高效的运行环境，以下是我觉得比较重要的一些基础项：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yuan-neng-li&quot;&gt;元能力&lt;&#x2F;h4&gt;
&lt;p&gt;元能力是其他能力的基础，就像野外生存中会用到的胶带（参考「流言终结者」），或者无敌破坏王里阿修的神奇铁锤（坏了的东西，敲一敲就修好了），即使其他能力忽然间消失了，只要元能力还在就依然有重建的可能（愿原力与你同在···）。&lt;&#x2F;p&gt;
&lt;p&gt;「尝试」，或者说实验是很重要的一项特质。伽利略的特点之一就是爱做实验，包括思想实验。爱因斯坦称他为「现代科学之父」，相比之下，亚里士多德的那个时代对实验就不那么讲究了，比如他认为女人的牙齿比男人的少，甚至都不愿意去数一下自己妻子的牙齿。&lt;&#x2F;p&gt;
&lt;p&gt;「开放」，允许新观点挑战自己的心态。电视上有时会有这样的场景：一个人推开门扫视了下房间之后，发现要找的人不在里面，就走了，而那个人其实就躲在门背后。这就是思维盲点。一个人再聪明，也难免会有几个这样的盲点，跟其他人进行开放的讨论，就有可能找到这些盲点，进而做出更加合适的决策或行动。&lt;&#x2F;p&gt;
&lt;p&gt;「好奇」，WaitButWhy (WBW) 里有提到过一个比喻：Chef(厨师) and Cook(厨子)，厨师会带着好奇心去尝试各种原料和搭配，然后写成食谱，而厨子会按照食谱把菜做出来。瑞·达里欧也提到过「塑造者」的一个特质就是好奇(&lt;code&gt;我发现塑造者通常有一些共同特征：极富好奇心；有把事情弄清楚的强烈冲动&lt;&#x2F;code&gt;)。好奇心越少，就越容易按流程办事，不是想着去弄懂背后的真相&#x2F;原理，而是少犯错。&lt;&#x2F;p&gt;
&lt;p&gt;「自律」就是让大脑的前额叶皮层掌握话语权，而不是杏仁核。比如对「暗时间」的处理上，杏仁核会选择刷 Feed、玩游戏等带来短期快乐的事情，而前额叶皮层会倾向于做一些短期不那么快乐，甚至有点痛苦，但长期来看又很有收益的事情，比如阅读。这很难，但很值。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yong-neng-li&quot;&gt;通用能力&lt;&#x2F;h4&gt;
&lt;p&gt;无论从事哪个职业，都需要这些能力，如果这里出现了一个或几个明显的短板，就容易对职业生涯造成负面影响。&lt;&#x2F;p&gt;
&lt;p&gt;「写作」，Basecamp 招人除了技能过硬之外，对写作也有很高的要求，YC 的 Paul Graham 也是个很好的例子。写作之所以重要，是因为它能反应一个人的思考能力、语言组织能力以及专业技能。同时文字有比较长的生命周期，能够带来更长久的影响。&lt;&#x2F;p&gt;
&lt;p&gt;「沟通」，这绝不是一个简单的技能，很多时候，我们进行的只是「对话」。沟通需要整理好自己的观点、诉求，换位思考，倾听（对方想说什么，有怎样的感受和情感需求等）等。从社会属性讲，我们需要沟通，因为有社交需求；从工作层面讲，也需要沟通，因为不可避免地需要与别人合作，顺畅的沟通是良好合作的基础。&lt;&#x2F;p&gt;
&lt;p&gt;「学习」，如果对于学习能力有自信，有一套适合自己的高效学习方法，就不会害怕新事物，新领域，甚至还会有点兴奋。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhong-yao-ling-yu-de-he-xin-zhi-shi-dian&quot;&gt;重要领域的核心知识点&lt;&#x2F;h4&gt;
&lt;p&gt;查理芒格推崇多元思维模型：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;长久以来，我坚信存在某个系统——几乎所有聪明人都能掌握的系统，它比绝大多数人用的系统管用。你需要做的是在你的头脑里形成一种思维模型的复式框架。有了那个系统之后，你就能逐渐提高对事物的认识。&lt;&#x2F;p&gt;
&lt;p&gt;你必须知道重要学科的重要理论，并经常使用它们——要全部都用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;以下是基于 &lt;a href=&quot;http:&#x2F;&#x2F;bitandliteracy.github.io&#x2F;mental-models&quot;&gt;这篇文章&lt;&#x2F;a&gt; 精简的一些重要领域的核心知识点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;生物学
&lt;ul&gt;
&lt;li&gt;自然选择&lt;&#x2F;li&gt;
&lt;li&gt;差异化生存 (Survival by Differentiation)&lt;&#x2F;li&gt;
&lt;li&gt;遗传学 (Genetics)&lt;&#x2F;li&gt;
&lt;li&gt;生理学 (Physiology)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;会计
&lt;ul&gt;
&lt;li&gt;净现金流 (Free Cash Flow)&lt;&#x2F;li&gt;
&lt;li&gt;成长资本支出 (Growth Capital Expenditures)&lt;&#x2F;li&gt;
&lt;li&gt;沉没成本 (Sunk Cost)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;商业
&lt;ul&gt;
&lt;li&gt;格雷欣法则 (Gresham’s Law, 劣币逐良币)&lt;&#x2F;li&gt;
&lt;li&gt;内在价值 (Intrinsic Value)&lt;&#x2F;li&gt;
&lt;li&gt;经营杠杆 (Operating Leverage)&lt;&#x2F;li&gt;
&lt;li&gt;机会成本 (Opportunity Cost)&lt;&#x2F;li&gt;
&lt;li&gt;五力分析 (Five Forces)&lt;&#x2F;li&gt;
&lt;li&gt;品牌 (Brand)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;化学
&lt;ul&gt;
&lt;li&gt;自催化反应 (Autocatalytic reactions)&lt;&#x2F;li&gt;
&lt;li&gt;化合 (Compounding)&lt;&#x2F;li&gt;
&lt;li&gt;玻尔模型 (Bohr Model)&lt;&#x2F;li&gt;
&lt;li&gt;反应动力学 (Kinetics)&lt;&#x2F;li&gt;
&lt;li&gt;热力学 (Thermodynamics)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;经济学
&lt;ul&gt;
&lt;li&gt;信息不对称 (Asymmetric Information)&lt;&#x2F;li&gt;
&lt;li&gt;创造性破坏 (Creative Destruction)&lt;&#x2F;li&gt;
&lt;li&gt;效用递减 (Diminishing Utility)&lt;&#x2F;li&gt;
&lt;li&gt;规模经济 (Economies of Scale)&lt;&#x2F;li&gt;
&lt;li&gt;经济护城河 (Economic Moat)&lt;&#x2F;li&gt;
&lt;li&gt;机会成本 (Opportunity Cost)&lt;&#x2F;li&gt;
&lt;li&gt;囚徒困境 (Prisoner’s Dilemma)&lt;&#x2F;li&gt;
&lt;li&gt;公地悲剧 (Tragedy of the Commons)&lt;&#x2F;li&gt;
&lt;li&gt;市场 (Markets)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;工程学
&lt;ul&gt;
&lt;li&gt;抽象化 (Abstraction)&lt;&#x2F;li&gt;
&lt;li&gt;递归 (Recursion)&lt;&#x2F;li&gt;
&lt;li&gt;安全边际 (Margin of Safety)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;管理学
&lt;ul&gt;
&lt;li&gt;奥卡姆剃刀 (Occam’s razor)&lt;&#x2F;li&gt;
&lt;li&gt;帕金森定律 (Parkinson’s Law)&lt;&#x2F;li&gt;
&lt;li&gt;过程与结果 (Process versus Outcome)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;数学
&lt;ul&gt;
&lt;li&gt;复利 (Compound Interest)&lt;&#x2F;li&gt;
&lt;li&gt;决策树 (Decision Trees)&lt;&#x2F;li&gt;
&lt;li&gt;大数定律 (Law of Large Numbers)&lt;&#x2F;li&gt;
&lt;li&gt;概率论 (Probability Theory)&lt;&#x2F;li&gt;
&lt;li&gt;贝叶斯定理 (Bayes Theorem)&lt;&#x2F;li&gt;
&lt;li&gt;正态分布 (Normal Distribution)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;物理学
&lt;ul&gt;
&lt;li&gt;牛顿运动定律&lt;&#x2F;li&gt;
&lt;li&gt;电磁学&lt;&#x2F;li&gt;
&lt;li&gt;香农定理&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;心理学
&lt;ul&gt;
&lt;li&gt;自我服务偏见&#x2F;确认偏误&lt;&#x2F;li&gt;
&lt;li&gt;简单联想倾向&lt;&#x2F;li&gt;
&lt;li&gt;回馈倾向&lt;&#x2F;li&gt;
&lt;li&gt;保持一致性倾向&lt;&#x2F;li&gt;
&lt;li&gt;奖励和惩罚&lt;&#x2F;li&gt;
&lt;li&gt;被剥夺超级反映倾向&lt;&#x2F;li&gt;
&lt;li&gt;对比倾向&lt;&#x2F;li&gt;
&lt;li&gt;社会认同倾向&lt;&#x2F;li&gt;
&lt;li&gt;宜家效应&lt;&#x2F;li&gt;
&lt;li&gt;幸存者偏差&lt;&#x2F;li&gt;
&lt;li&gt;羊群效应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;si-wei-kuang-jia-fang-fa-lun-yuan-ze&quot;&gt;思维框架、方法论、原则&lt;&#x2F;h4&gt;
&lt;p&gt;这些就像是自动化的机器，是多年实践形成的一种下意识的反应。&lt;&#x2F;p&gt;
&lt;p&gt;比如这么一个场景：让同事帮忙随便点了份饭，也没有告知名称，后来来了四份饭，结果我拿错了（该场景节选自云风的博客）。有些人会怪订饭的同学没有告知自己的菜名；有些人会觉得又不是什么大事；有些人会据此想到了「三门问题」等等。&lt;&#x2F;p&gt;
&lt;p&gt;又或者老板说这个页面不够流畅，把它变得流畅些。有些人会反馈说目前只能做到这样了；有些人会从产品层面去考虑；有些人罗列出可能的优化点，并且给出投入的成本；有些人会告诉老板还有优先级更高的事情需要去处理等等。&lt;&#x2F;p&gt;
&lt;p&gt;这些就是埋藏在大脑里的自动化机器，如果能调教到很高的水准，就有更高的可能拿到好的结果。同理，如果放之任之，有可能一直是处于低功率状态甚至逆向在运行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hao-de-xi-guan&quot;&gt;好的习惯&lt;&#x2F;h4&gt;
&lt;p&gt;我们都知道习惯的力量很强大，如果能养成一些不错的习惯，就能够持续发挥作用，自己也不会觉得很累。比如习惯在危机中看到机会、找到问题的根因（root cause）、Adding Value to Others 、要事优先、早起、Eat Health、锻炼等等。&lt;&#x2F;p&gt;
&lt;p&gt;所以，如果不知道自己做什么是对的，就做一些不会错的事情，比如加强硬件系统和操作系统。&lt;&#x2F;p&gt;
&lt;p&gt;基础还会有放大作用，就像一个扇形，角度扩大一点点，圆周就可以增长不少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app-framework&quot;&gt;App Framework&lt;&#x2F;h3&gt;
&lt;p&gt;我们开发 App 会使用系统提供的各种 SDK，也就是 Framework，调用它们的 API 来达到符合自己需求的表现。在这里它的定位是「职业」。&lt;&#x2F;p&gt;
&lt;p&gt;有时会感到焦虑，不知道该做什么，好像找不到热情所在，又有被后来者替代的风险，还有生活的压力。一个原因是基础不够扎实，还有就是对「职业」这件事想得不多。这份职业最好结合了自己的兴趣和特长，这样才能走得远。职业不是 2、3 年的事，而是 2、30 年的事，这样就能慢下来，不那么浮躁和着急。就像种一棵树，需要给足够的时间，让它慢慢长。&lt;&#x2F;p&gt;
&lt;p&gt;距离 = 速度 x 时间，天赋决定了速度，但距离不仅仅取决于速度。&lt;&#x2F;p&gt;
&lt;p&gt;那么如何才能找到这样的职业呢？李笑来的苍蝇和蜜蜂的比喻我觉得比较合适：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;把一只蜜蜂装到啤酒瓶里，瓶底对着太阳，你看到的是，那蜜蜂一次又一次地撞到瓶底，永不放弃，坚持不懈，异常专注……直到累死。&lt;&#x2F;p&gt;
&lt;p&gt;把一只苍蝇装到啤酒瓶里，瓶底对着太阳，你看到的是什么呢？那苍蝇四处乱撞，一分钟不到的时间里，它就“误打误撞”冲出了瓶口……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在刚进入一个领域时，就是一只苍蝇，拼命尝试，各种尝试，各种冲撞。一旦找到方向后，马上转变成蜜蜂模式，顺着那个方向拼命地成长，拼命地突破。如果撞了一圈发现还是没有找到突破口，或者发现自己不感兴趣，就换一个领域。&lt;&#x2F;p&gt;
&lt;p&gt;所以年轻时最好多去尝试，这样有更大的几率找到自己中意的领域，同时也对自己有更好的了解。就怕爬了半辈子的梯子发现，搭错了墙。&lt;&#x2F;p&gt;
&lt;p&gt;如果没有机会去做这样的尝试，还有一个方法是回顾下自己最开心、最有成就感的几个时刻，从中应该能看到一些端倪，自己是喜欢创造，还是享受带领团队的那种成就感等等。挖掘到自己的喜好之后，再来看哪些领域跟自己的喜好有比较大的重叠度。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_1.png&quot;
        width=&quot;748&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一种方式是找到自己的精神导师，看看他们都在做什么，从中找到一些启发。比如我会去关注 Alan Kay, Bret Victor, Derek Sivers, Aaron Swartz 等，从他们的文章、作品中找到一些灵感和指引。&lt;&#x2F;p&gt;
&lt;p&gt;也可以尝试下「遗憾最小化」框架。当有一个比较大的决定需要去面对时，想象自己 80 岁的模样，自己最遗憾的事是哪些，哪个决定更能避免这些遗憾的发生。以下是我的 list，供参考：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;没有找到可以携手走完人生路的伴侣。&lt;&#x2F;li&gt;
&lt;li&gt;没有找到自己的热情所在。&lt;&#x2F;li&gt;
&lt;li&gt;没有在热情所在的事情上投入足够的时间。&lt;&#x2F;li&gt;
&lt;li&gt;没有一件值得骄傲的作品。&lt;&#x2F;li&gt;
&lt;li&gt;没有几个可以无话不说又互相关心的朋友。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果现在没有去做，是被什么牵绊住了么？如何解开？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app&quot;&gt;App&lt;&#x2F;h3&gt;
&lt;p&gt;App 就是我们的作品&#x2F;事迹。要让 App 流畅运行，一个是把 App 的性能优化到极致，这样即使操作系统比较弱，依旧可以玩得很溜。有一些人他们从小就知道自己要做什么，这就是很幸运的事。皮克斯的联合创始人艾德文·卡特姆从小就想成为一个动画师，同时自己又有数学和计算机才能，然后意识到计算机图形学将成为动画行业的基础，跟他的爱好几乎完全吻合，就决定投身于这行，结果自然也很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-shi-yao&quot;&gt;做什么&lt;&#x2F;h4&gt;
&lt;p&gt;Career 帮助我们画了一个圈，在这个圈里做什么依旧有很多的选择。要找那些高杠杆率的事情做。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I make sure to leave enough time in my schedule to think about what to work on. The best ways for me to do this are reading books, hanging out with interesting people, and spending time in nature.&lt;&#x2F;p&gt;
&lt;p&gt;— Sam Altman&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我有一个朋友，小刘。她之前在出版行业，负责技术相关的书籍。有一次跟她聊起为什么会选择这件事，她给出了推导过程：大学学的是计算机，因此对这块比较了解，但又不想成为一个地道的码农，同时也不想放弃这个优势，这样可选项就小了许多，再加上自己在文字上的敏感性，「技术出版」这个选项就浮上来了。&lt;&#x2F;p&gt;
&lt;p&gt;经过推导的选项，在执行起来也会安心一些，因为知道这即使不是最佳选择，至少不会错。&lt;&#x2F;p&gt;
&lt;p&gt;目标也很重要。就像玩游戏一样，在不断达成目标的过程中积累技能，然后向更高的关卡挑战。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zen-yao-zuo&quot;&gt;怎么做&lt;&#x2F;h4&gt;
&lt;p&gt;首先要定好优先级，最终能做成什么事情，几乎总是取决于优先级。精力是有限的资源，是用它在各个 app 之间穿梭，还是 focus 在最重要的事情上。&lt;&#x2F;p&gt;
&lt;p&gt;有时会发现时间确实不够用，这要做，那个答应别人了，也要做，留给自己的时间就不多了。 sivers 给出了一个解决方案：&lt;a href=&quot;https:&#x2F;&#x2F;sivers.org&#x2F;hellyeah&quot;&gt;No &amp;quot;yes.&amp;quot; Either &amp;quot;HELL YEAH!&amp;quot; or &amp;quot;no.&amp;quot;&lt;&#x2F;a&gt;。如果不是很兴奋地想要去做，那就 say no。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you say no to most things, you leave room in your life to really throw yourself completely into that rare thing that makes you say “HELL YEAH!”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;mu-biao-fen-jie&quot;&gt;目标分解&lt;&#x2F;h5&gt;
&lt;p&gt;这是很重要的一步，连殖民火星这样的事经过分解之后都可以变得不那么遥不可及，其他的目标又能难到哪里去。&lt;&#x2F;p&gt;
&lt;p&gt;分解的过程也是简化的过程，简化到可以马上就上手做。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing a book seems daunting, so start by doing an essay. If an essay is too much, start by writing a paragraph summary. The important thing is to have something done right away.&lt;&#x2F;p&gt;
&lt;p&gt;— Aaron Swartz (Productivity)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;瑞·达里欧在「原则」这本书里，对于如何实现目标有比较多的阐述，其核心是下面这张图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_2.png&quot;
        width=&quot;551&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在不断地迭代过程中，习得强大的进化能力。即使最开始目标定的有点不妥，只要能根据反馈和结果不断调整，就可以回到正确的轨道上。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;达成过程中对操作系统和 App Framework 都要有所增强。&lt;&#x2F;li&gt;
&lt;li&gt;经常利用痛苦来引导自己进行高质量的思考。认识到自己的思维盲点，避免杏仁核劫持，找到问题的根因。&lt;&#x2F;li&gt;
&lt;li&gt;几乎总是存在着一条你还没有发现的有利道路。&lt;&#x2F;li&gt;
&lt;li&gt;我怎么知道我是对的。&lt;&#x2F;li&gt;
&lt;li&gt;营造开放的环境。&lt;&#x2F;li&gt;
&lt;li&gt;不断迭代。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;我们一生中大部分的时间都会花在工作上，无论是替别人工作，还是为自己工作。因此思考工作这件事是非常有必要的。 WBW 给出了一张图，可以参考下。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_3.png&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要用动态的眼光去看自己和周围的世界，不断地调整和进化，这样就有可能找到自己的 sweet spot。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;www.cs.virginia.edu&#x2F;~robins&#x2F;YouAndYourResearch.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2018&#x2F;04&#x2F;picking-career.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;sivers.org&#x2F;hellyeah&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.amazon.com&#x2F;Pivot-Only-Move-That-Matters&#x2F;dp&#x2F;0143129031&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;blog.samaltman.com&#x2F;productivity&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;www.aaronsw.com&#x2F;weblog&#x2F;productivity&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;bijansabet.com&#x2F;post&#x2F;147533511&#x2F;jeff-bezos-regret-minimization-framework&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.amazon.com&#x2F;Poor-Charlies-Almanack-Charles-Expanded&#x2F;dp&#x2F;1578645018&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;bitandliteracy.github.io&#x2F;mental-models&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>脑海里的演员们（Your Brain at Work）</title>
            <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/your-brain-at-work/</link>
            <guid>https://limboy.me/posts/your-brain-at-work/</guid>
            <description>&lt;p&gt;前一阵子看完了一本书，叫「&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Your-Brain-Work-Strategies-Distraction&#x2F;dp&#x2F;0061771295&quot;&gt;Your Brain at Work&lt;&#x2F;a&gt;」，亚马逊上评价还不错，豆瓣评分更是高达 9.3（虽然只有不到 200 人评价），可惜没有中文版，只能硬着头皮啃了下英文版。&lt;&#x2F;p&gt;
&lt;p&gt;这本书吸引我的点在于它从大脑的运作方式来阐述一些行为，而且会有相应的案例来描述反面例子和调整后的结果，除此之外还给出了一些模型方便联想和记忆。好比买了一辆车之后，告诉你平时要注意哪些不当操作，以及如何发挥最优的性能。所以脑子是个好东西，除了多用之外还要知道怎么用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-tai-he-yan-yuan-men&quot;&gt;舞台和演员们&lt;&#x2F;h3&gt;
&lt;p&gt;大脑的皮质层有一块区域叫「前额叶皮层」，这是人类进化到晚期才出现的皮质结构之一。这个区域主要负责高级认知功能，比如思考和决策（飞越疯人院里男主 McMurphy 最后就是被切除了额叶）。那它的工作机理大概是怎样的呢？作者给我们做了一个很好的比喻：舞台模型。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_1.jpg&quot;
        width=&quot;834&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;wu-tai-hen-xiao-zhi-rong-de-xia-4-ge-yan-yuan&quot;&gt;舞台很小，只容得下 4 个演员&lt;&#x2F;h4&gt;
&lt;p&gt;如果我们把前额叶的活动都抽象为「导演导一场戏」，什么时候演员演好了，导演满意了，任务就完成了。演员就是参与思考、决策的要素，也就是同一时间大脑可以容纳的思考元素是有限的。因此选择思考什么内容很重要。当你在思考中午应该吃什么、明天穿什么衣服、要不要给 XX 去个电话时，都会消耗舞台能量。舞台是一个神圣的地方，尽量让大人物在上面显摆吧。&lt;&#x2F;p&gt;
&lt;p&gt;4 个演员不是指 4 件事，而是某件事会涉及到的一些概念、要点。生活中我们会发现有一些人，他们的反应速度很快，感觉一下能思考很多层面，这并不是他们的舞台很大，而是演员的切换速度比较快，演员的选择上更优，以及演员和观众之间的联系更加密切。&lt;&#x2F;p&gt;
&lt;p&gt;对于新的概念，我们理解起来会比较累，因为观众都不太认识这个演员，自然光要给得足够强(新手光环)，这样能量消耗就多，就会感觉比较累。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mei-tian-de-xi-you-xian&quot;&gt;每天的戏有限&lt;&#x2F;h4&gt;
&lt;p&gt;由于舞台大小和资源的限制，每天能演的戏其实并不多，而我们往往有一种错觉，一天的时间很长，后面再做也无妨。而要演一出高质量的戏，需要导演、演员和灯光（可用资源）的配合，后面确实有时间，但这些要素不一定处于最佳状态。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个重要的点是针对不同类型的戏，舞台需要重新布景，比如演话剧的不同桥段时，舞台的布景也不一样，而这也挺消耗资源的，所以最好是同一类型的戏一并拍完。在编程领域针对不同的任务特点，我们会把它们分为 CPU 密集型或 IO 密集型等，这里也可以进行类似的归类，比如创造、记忆、决策等，然后同类型的尽量打包处理，以此来降低功耗，提升效率。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;guan-zhong&quot;&gt;观众&lt;&#x2F;h4&gt;
&lt;p&gt;一场戏演完后，演员就要回到观众席了，所以演员和观众的身份是可以随时切换的，而观众就是记忆。那些坐在前排的观众是还比较新鲜的记忆，导演在选角时容易被选中。后排的观众就比较惨了，光照不足，如果长得不够有特点，或者导演对他印象不够深刻，很可能就再也没有上场的机会了，谁会记得一个月前的今天自己中午吃了什么呢。&lt;&#x2F;p&gt;
&lt;p&gt;所以为了不被遗忘，观众在短暂的上场时间里要尽量让导演印象深刻，跟底下的观众多一点互动（建立联系），下次当有关联的另一位观众上台时，导演可能还能想起你。所以对于一个新事物，如果仅仅停留在这件事物&#x2F;概念本身，即使当时记得很清楚，没有对它进行更全面的认识，一样会坐到后排而被遗忘。全面认识可以从这几个角度去考虑：为什么会有出现这个概念，它的定义是什么，有什么特性，使用场景是怎样的，能举几个例子么，它是如何实现的，跟它类似的有哪些，如果从更高层面去思考它的本质又是什么，在这个本质的前提下有哪些事物其实跟它是一样的。&lt;&#x2F;p&gt;
&lt;p&gt;所谓「贪多嚼不烂」就是这个道理，从短期看确实记了很多，印象也蛮深刻，因为那时还在观众席的前排，导演一回头就看见了。随着时间的流逝，又会有一批新的观众占据前排，而原先的那些就只能被迫到后排，如果导演在看着舞台上的演员想不起你时，就不容易再上场了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dao-yan&quot;&gt;导演&lt;&#x2F;h4&gt;
&lt;p&gt;导演是非常重要的一个角色，演哪一出，选谁来演，怎么演都靠他，大权在握。因此让导演保持在良好的状态很重要（awareness），而有些时候导演也很无奈，因为没有收到拍戏的需求，这个我们在后面的杏仁核劫持中会讲到。&lt;&#x2F;p&gt;
&lt;p&gt;如何让导演处于 Awareness 状态呢，一种方法是用第三视角来看自己的行为。费曼在研究「睡觉时我们的意识流是如何停顿下来的呢？」这个问题时，就经历了与自己对话的过程。「论语」里讲的「吾日三省吾身」也是类似的道理，要及时抽离出另一个自己来看待自己做的事情并反思。就好像不照镜子就不容易发现嘴角的那粒饭，而别人不一定会主动提醒你那粒饭的存在，想想自己每天带着那粒饭跟人打交道是不是很别扭。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;deng-guang-hen-xiao-hao-neng-liang&quot;&gt;灯光很消耗能量&lt;&#x2F;h4&gt;
&lt;p&gt;我们常说脑力劳动很累，是真的累，因为消耗的是实实在在的能量。舞台模型里，灯光就是这样的能量消耗体。演员要演戏就一定要有灯光，灯光的强弱也有阶段性，在灯光较强的阶段把重要的戏演了，这很重要，也就是我们常说的把先往瓶子里放大石头。一般来说上午的灯光比较强，毕竟休息了一晚上，这时可以先做重要的事，下午灯光相对弱一点了再做「便宜」点的事。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gei-wu-tai-jian-ya&quot;&gt;给舞台减压&lt;&#x2F;h4&gt;
&lt;p&gt;舞台既然是一个有限且宝贵的资源，有什么办法可以降低它的负荷呢，可以试试下面这几个：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;放到基底神经节。也就是让一些行为自动化，比如走路虽然也算一件事，但不怎么耗舞台资源，因为它的记忆大多存储在基底神经节。当一个行为被重复多次后，就会由它来接管。&lt;&#x2F;li&gt;
&lt;li&gt;使用视觉区域。理解一个比较抽象或复杂的概念时，可以在大脑里形成一个画面。比如在理解 TCP&#x2F;IP 协议时，可以想象一条破破烂烂的路，然后那些阻塞、丢包等概念就容易理解了。&lt;&#x2F;li&gt;
&lt;li&gt;写下来。我们总是容易高估大脑的能力，因为在当时可能确实记得比较清楚，但几天之后或者忙其他事情时就容易模糊甚至遗忘。&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;10788371&#x2F;&quot;&gt;清单革命&lt;&#x2F;a&gt;这本书就强调了写下来的重要性。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;hu-luo-bu-he-da-bang-du-xu-yao&quot;&gt;胡萝卜和大棒都需要&lt;&#x2F;h4&gt;
&lt;p&gt;演员也需要刺激，没有动力和压力就无法逼出他们的最佳状态(后面我们会讲到如何让人们更愿意去做某件事，也就是提升动力因素)。这两者的量要合适，过多或过少都不行。比如自己不太喜欢在众人面前分享，而正好需要做这件事，这就属于动力不足；离 DeadLine 不剩几天了，其他人的工作都差不多做完了，主要的瓶颈在自己这里，而自己心里又没什么底，这样就容易压力过大。&lt;&#x2F;p&gt;
&lt;p&gt;解决方法其实也很简单：重新认识。同一件事一定可以从多个角度来看待，就像一个鸡蛋，从侧面看是一个椭圆，而把它立起来从上往下看就是一个圆。比如由于某种原因必须去参加一个无聊的会议，会议里的人也很无聊，怎么办，看起来只能无聊地度过这段时间了？其实有很多玩法，比如给自己设计一个游戏：我猜下次这个人讲话时会讲 XX 这几个话题，这个人有哪些心理偏见，我自己身上有没有，为什么会有这么一个会议，有没有更好的形式，为什么是我来参加等等。通过对这个会议的重新认识就能发现很多乐趣，这样就不会显得那么无聊。&lt;&#x2F;p&gt;
&lt;p&gt;一些公司的高管往往有比较大的压力，如果无法良好应对，就容易出现决策失误。一种方式是把这些压力变成良性压力。比如想象最差情形是怎样，是不是可以承受，如果可以，那压力就不会那么大。如果无法让自己产生压力，也可以通过「重新认识」来形成，比如写一篇文章本身并没有什么压力，但如果想象一下读者对着这篇文章一脸不屑，甚至觉得漏洞百出时的表情是不是就有压力了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-shao-gan-rao&quot;&gt;减少干扰&lt;&#x2F;h4&gt;
&lt;p&gt;如果拍戏时被频繁打扰，这场戏自然就很难拍好了。这些打扰通常来自两部分：外部干扰和内部干扰。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;wai-bu-gan-rao&quot;&gt;外部干扰&lt;&#x2F;h5&gt;
&lt;p&gt;这个比较好理解，最常见的就是手机，各种 Notificaiton，还有就是内部的 IM，或者同事。这些看起来都难以避免，但还是有一些技巧，比如手机我们虽然不能粗暴地把它设置为飞行模式，至少可以把它调到静音，翻过来，来电话时能知道，一般的通知可以稍后处理(或者只针对重要的 App 开通知)。对于办公室的一些干扰或潜在干扰可以戴上耳机，一方面降低外部的噪音，另一方面也表示自己目前不想被打扰，除非有重要的事。&lt;&#x2F;p&gt;
&lt;p&gt;如果可能的话，在从事前额叶密集型事务时，最好找一个自己不会被打扰到的地方，不一定是安静的地方，我会比较喜欢咖啡馆。这样可以让保安们也休息下，因为你知道周围不会有什么人来打扰你，毕竟保持警觉的保安同学也在消耗资源。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;nei-bu-gan-rao&quot;&gt;内部干扰&lt;&#x2F;h5&gt;
&lt;p&gt;相对于外部干扰，内部干扰更容易发生，且影响更大。比如时不时地会冒出一些念头：刷个 Feed，看个新闻，玩个游戏等等，就好像是台下的观众会有冲到舞台的冲动（毕竟都是戏精），如果没有保安拦着就会影响正常的拍戏，而这些事往往有些特点：做的成本很低，又容易陷进去。我们常说的自制力也就是保安的执行力，而要让保安一直处于工作状态，不可避免地会消耗能量。因此不要太依赖自制力，最好让观众们都安分点。如何安分点呢，一种办法是延迟决定，有冲动想做某件事时，先「忍」一段时间，比如 30 秒，然后会发现欲望不那么强烈了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mei-you-si-lu-shi-gai-zen-yao-ban&quot;&gt;没有思路时该怎么办&lt;&#x2F;h4&gt;
&lt;p&gt;Clojure 作者 Rich Hickey 做过一个「&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matthiasn&#x2F;talk-transcripts&#x2F;blob&#x2F;master&#x2F;Hickey_Rich&#x2F;HammockDrivenDev.md&quot;&gt;Hammock Driven Development&lt;&#x2F;a&gt;」的分享，也就是「吊床驱动开发」，简单来讲就是当某个问题怎么想也想不到好的解决方案时，在吊床上睡一会，等醒来后指不定就有答案了。因为在这段非聚焦的场景下容易在潜意识中找到突破口，之前的 「Learning How to Learn」里提到过一个不错的例子，聚焦状态下，弹珠靠的比较紧，我们能快速得找到关联度较高的信息；而发散状态下，弹珠之间的缝隙就会变大，就更有可能触及到远处的弹珠（可能是某个灵感）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xing-ren-he-jie-chi&quot;&gt;杏仁核劫持&lt;&#x2F;h3&gt;
&lt;p&gt;又是一张辣眼睛的图···&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_2.jpg&quot;
        width=&quot;834&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们总觉得人是有自由意志的，在「未来简史」里也有提到，人其实并没有自由意志，甚至可能连意识都没有，只不过是神经元之间的神经递质传递，从树突传到轴突，轴突通过电信号再释放出一些化学物质给下一个神经元，这些数量庞大的神经元之间的信息传递让我们感觉有了意识、思维等。&lt;&#x2F;p&gt;
&lt;p&gt;我们做一个决定时有可能是前额叶帮我们做的（理性），也有可能是杏仁核处理的。杏仁核所在的边缘系统由来已久，哺乳动物也有类似的系统，它帮助我们在远古时代能够躲避猛兽的袭击，在面对老虎时，不需要计算它的瞬时启动速度、经过多久能追上自己等，杏仁核下命令直接跑就是了。又比如婴儿一般都喜欢花，害怕蛇，这些都是根植于基因，不需要后天习得。杏仁核就像一个小孩，很容易有情绪，它后面有一堵墙，上面记录了基因里的信息，以及后天的经验。当一件事情发生时，杏仁核如果发现能在墙上找到记录，可能就自动做决定了。在精心布置的苹果店里，会觉得苹果产品非常高贵，进而产生拥有欲望，然后就下单了。其实从理性层面上考虑，自己真的需要功能这么强劲的手机么，不一定吧。德州扑克也一样，在情绪主导下，很容易做出错误的决定。所以要避免杏仁核有比较大的波动，然后做出非理性决定。有几个方式可以试一下：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tie-biao-qian&quot;&gt;贴标签&lt;&#x2F;h4&gt;
&lt;p&gt;比如当自己处于一种比较难受的状态时，试着用一个词来描述：焦虑&#x2F;压力&#x2F;胡思乱想等等，就像捉妖记里在妖怪头上贴了一张符，他们就动不了了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhong-xin-ren-shi&quot;&gt;重新认识&lt;&#x2F;h4&gt;
&lt;p&gt;这个技能前面也有提到过，通过对事物进行重新认知来平衡动力和压力。比如在自己的这个岗位做不出成绩，是不是由于对这个岗位的认知不够。奇葩大会第二季里，一个叫「河森堡」的博物馆讲解员给我的印象蛮深刻的，在外人看来这是一个类似「导游」性质的职业，但他会根据一些古物去思索背后的原因，然后寻找证据，再用故事的形式向别人阐述，效果也很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xiang-jie-jue-fang-an-er-bu-shi-wei-wen-ti-suo-kun-rao&quot;&gt;想解决方案而不是为问题所困扰&lt;&#x2F;h4&gt;
&lt;p&gt;书里提到一个例子，准备打车去机场时，忽然下起了雨，不太好打车，好不容易来了一辆车，也被前面的人拦走了，这时就容易沉浸在情绪里。如果换一个角度想着「如何才能打到车」就容易找到问题的解决办法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scarf-mo-xing&quot;&gt;SCARF 模型&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_3.jpg&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是一个动力模型，符合这个模型的，人们就更愿意去做；跟这个模型相背的，意愿就不那么强了，比较适合管理人员。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;status&quot;&gt;Status&lt;&#x2F;h4&gt;
&lt;p&gt;地位。我们都希望在一个团体中有一定的地位，或者说受到尊敬，当然这需要自己争取，从管理者的角度，也可以有意识地去加强一些成员的「地位感」，当发现一些事做得还不错时，及时在公众场合给予表扬。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;certainty&quot;&gt;Certainty&lt;&#x2F;h4&gt;
&lt;p&gt;相信。相信分解出来的步骤可以做成某件事。Elon Musk 有一次分享了他殖民火星的计划，分解成了几个阶段，听完之后觉得这事好像真的不是天方夜谭，，并没有物理定律或者科技上的限制，这种情况下做事就会有底。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;autonomy&quot;&gt;Autonomy&lt;&#x2F;h4&gt;
&lt;p&gt;自治。也就是选择空间，对于技术人员来说，这个方案是我自己想的，还是别人想好让我做的，是否可以选择我喜欢的语言来开发等，对于意愿上的影响也挺大的，我们都希望自己有一定的决策权力和空间，即使是一枚螺丝钉，至少也可以选择钉在哪块木板上。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;relatedness&quot;&gt;Relatedness&lt;&#x2F;h4&gt;
&lt;p&gt;社交。生命其实就是基因的载体，而最核心的大脑活动也只是神经元之间的互动，大脑与肌体的互动也是以一种可以理解的机械化的方式进行。其实跟电脑并没有太大的区别，电脑病毒也可以具有自我复制的能力，只不过一个是在硅层面进行，另一个是在化学层面发生。&lt;&#x2F;p&gt;
&lt;p&gt;我现在觉得人跟机器很大的一个不同点是，人（包括很多哺乳动物）都有社交的需求。Ray Dalio 在「原则」里面也有提到，有意义的工作和人际关系是非常重要和基础的需求，因此创造一个 Social 的氛围也蛮重要的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fairness&quot;&gt;Fairness&lt;&#x2F;h4&gt;
&lt;p&gt;公平。有一个游戏是两个人玩，给其中一人一百块钱，并且可以决定怎么分，而另一个人有否决权，也就是如果他不满意，两个人都拿不到钱。从理性角度出发，那个具有否决权的人只要能分到钱都不应该否决，但事实上，如果他觉得不公平，宁愿两个人谁都拿不到。「公平」是很重要的点，如果看到有人明明做得不够好，却得到晋升，心态就会发生变化，感觉自己没有必要那么辛苦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;这本书主要讲解了大脑几个区域的大致运行特点，在了解了这些特点之后，可以有针对地进行改进。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By understanding your brain, you increase your capacity to change your brain. The more you notice your own experience, whether it’s the small capacity of the stage, the dopamine high of novelty, or the way you need a moment to gather an insight, the more opportunities you have to become mindful, stop, and observe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Mindfulness isn’t difficult. What’s difficult is to remember to be mindful.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>如何设计一个配置中心的后端架构</title>
            <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-architecture-config/</link>
            <guid>https://limboy.me/posts/how-to-architecture-config/</guid>
            <description>&lt;p&gt;配置中心能够让 App 具有更好的动态性，通过在远程下发配置来动态改变 App 的行为。假如现在需要设计这么一套系统，该如何去考虑呢，以下是我的一些分析过程。&lt;&#x2F;p&gt;
&lt;p&gt;对「配置中心」这个需求进行分解就是：第一时间把配置发送给客户端。因此我们先来构想一个最简单的场景：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_01.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;客户端和服务端保持一个长链，当在后台操作配置时，会把这个配置以 K&#x2F;V 形式存储，然后通知 Procesor，后者拿到 K&#x2F;V 之后把它推给客户端，整个过程就完成了。这是最原始的形态，接下来会在这个基础上进行演化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pei-zhi-geng-xin-shi-ke-hu-duan-chu-yu-chi-xian-zhuang-tai-zen-yao-ban&quot;&gt;配置更新时，客户端处于离线状态怎么办&lt;&#x2F;h3&gt;
&lt;p&gt;长链只能保证(尽量)客户端在线时能第一时间拿到配置中心的值，处于离线状态（比如没有打开 App）时就无能为力了，因此需要想办法到用户下一次打开 App 时可以拿到最新的值，这个简单处理就是在保存 K&#x2F;V 时，额外存一个 flag 字段，用来表示这个 K&#x2F;V 是否已经成功发送给客户端。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_02.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;duo-fen-pei-zhi-de-chu-li&quot;&gt;多份配置的处理&lt;&#x2F;h3&gt;
&lt;p&gt;通常 K&#x2F;V 对不止一份，那么多份配置，也就是多个 K&#x2F;V 对，又会带来哪些变化呢。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_03.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这时就有三个问题需要我们考虑：存储、流量和同步策略。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cun-chu&quot;&gt;存储&lt;&#x2F;h4&gt;
&lt;p&gt;一个设备的 K&#x2F;V 对通常不会超过 100 项，每对 Size 不超过 1K，也就是一台设备对应的大小上限为 100K 左右，假如设备数为 100 万，就需要 100G 的磁盘空间。这个量还是有点大的，可以优化下。考虑到一些配置项会在多个设备共存，可以把这些配置单独存储，然后把 hash 值作为 Value。假设 Key 的 size 为 30 字节，Value 为 10 字节，这样就只需 40M 的 K&#x2F;V 存储空间。因此由于存储上的限制，我们的设计也要做一下调整:&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_04.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但这样还是有问题，Value 的组合会很多：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_05.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如原来 K1 的 Value 为 V1，更新之后变成了 V2，那么需要新建一组 Value，然后将其中的 V1 变为 V2，因为不知道之前的那一组 Value 是否还有其他设备在引用，这样就会逐渐累积下去，要降低这种累积的话，还要设计清除算法，复杂度就上来。&lt;&#x2F;p&gt;
&lt;p&gt;不妨参考一下 Go 语言里 Slice 的设计，Slice 内部使用了一个数组，但可以指定使用该数组的哪一部分，其实就是索引。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_06.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样某个 Key 如果有新的 Value 了，只需在对应的 Key 后面 append 即可。此时需要同步更新设备的索引，这块可能花一点时间，如果数据都在内存的话其实也还好（由于只是存索引，因此这些数据量内存 hold 得住），持久化可以异步进行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;liu-liang&quot;&gt;流量&lt;&#x2F;h4&gt;
&lt;p&gt;上面已经说过，单个设备的量可以达到 100K，如果每次配置有更新就发送 100K 的数据对到达率会有一定影响，尤其在设备网络情况不佳的情况下。因此这里的目标是如何减少数据传输量，同时尽量避免提升复杂度。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;dui-shu-ju-jin-xing-ya-suo&quot;&gt;对数据进行压缩&lt;&#x2F;h5&gt;
&lt;p&gt;这是比较简单同时效果也不错的方法，这里需要考虑的几个点是压缩比和压缩&#x2F;解压缩速率以及资源消耗。参考&lt;a href=&quot;https:&#x2F;&#x2F;catchchallenger.first-world.info&#x2F;wiki&#x2F;Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO&quot;&gt;这篇文章&lt;&#x2F;a&gt;，可以发现 &lt;code&gt;lz4&lt;&#x2F;code&gt; 在压缩&#x2F;解压缩时间上非常有优势，同时资源占用也很少，就是压缩比不太高。而 &lt;code&gt;lzma&lt;&#x2F;code&gt; 则有更高的压缩比，因此可以参考不同的场景来选择合适的压缩方案。&lt;&#x2F;p&gt;
&lt;p&gt;这还会有一个问题，如果每次请求都进行压缩，效率就太低了，因此需要缓存，缓存的 Key 其实就是 Config Indexes 的哈希(&lt;code&gt;hash(&#x27;1,2;2,0&#x27;)&lt;&#x2F;code&gt;)。这样就需要对所有的 Config Index 存一份哈希值，然后根据这个哈希值去找对应的压缩后的文件。&lt;&#x2F;p&gt;
&lt;p&gt;需要考虑下缓存命中率，如果设备之间很难利用缓存，意义就不大。初步估计一下，这块问题应该不大，除非每个设备都有一份独特的配置。&lt;&#x2F;p&gt;
&lt;p&gt;还有一种常见的减少流量方案，就是使用 Diff。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;shi-yong-diff&quot;&gt;使用 Diff&lt;&#x2F;h5&gt;
&lt;p&gt;Diff 的话一种处理方式是把 K&#x2F;V 的索引放到客户端，然后比对两个索引的 Diff，再把真正的 Value Diff 下发到客户端进行合并。这样就会有一个问题，客户端需要上报它当前的配置中心的索引值，这就涉及到上报时机，有两种方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端轮询。比较低效，也无法保证实时，但不需要维护长链，实现起来相对简单。&lt;&#x2F;li&gt;
&lt;li&gt;服务端在得知更新后，主动向客户端要当前保存在客户端的 Config Indexes，对比之后再发送 Diff。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 2) 种情况，相比直接推送会多了一轮通信，同时对于两端都会增加一些复杂度(处理 Diff)，但好处是可以最大成都节省数据传输。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-she-bei&quot;&gt;多设备&lt;&#x2F;h3&gt;
&lt;p&gt;多设备对服务端的挑战比较大，如果设备数比较多，而服务器资源比较有限，可以考虑客户端轮询的方案，不过同样要处理峰值的情况，比如某次促销可能会带来大量的瞬时并发请求。简单的处理可以用令牌桶算法：桶里的令牌数代表服务器当前的承载能力，每次请求进来消耗一个令牌，如果令牌消耗完了，请求直接拒绝，等服务器缓过来了，再往桶里加令牌。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-wei-du&quot;&gt;多维度&lt;&#x2F;h3&gt;
&lt;p&gt;维度也就是设备的特征，一个设备会有多个特征，比如 &lt;code&gt;iOS 11&lt;&#x2F;code&gt;，&lt;code&gt;v9.3.6&lt;&#x2F;code&gt; 等，同样一个维度也会包含多台设备。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_07.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;维度的设计使用 Set 会比较合适，因为顺序无关，且将来设备的维度改变后，查找起来也会很快(比如当设备升级了版本，就要把设备从旧版本的维度变为新版本的维度)。所以需要在一个合适的时机去检查设备的维度是否需要更新，同时检查是否需要发送配置，这个时机选择在连接建立完成后异步执行比较合适。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-du-geng-xin&quot;&gt;维度更新&lt;&#x2F;h4&gt;
&lt;p&gt;假如设备从「维度 1」更新到了「维度 2」，怎么知道需要更新哪些 K&#x2F;V ？要解决这个问题，可以给维度也建一张表，来保存 Config 信息，Key 为维度名，Value 为 Config Index。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;最终的流程和设计如下：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_08.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本文主要提供了一种架构设计的思路，从最核心的需求开始，随着场景的变化，来不断完善、调整设计。结合常见的考虑点和适当的数据评估，选择相对简单的方案。在细化的过程中，一些问题就会浮现出来，尽早发现，尽早解决，等到开发甚至上线才发现就麻烦了，这也是架构设计的重要性。&lt;&#x2F;p&gt;
&lt;p&gt;最后，请有限度吐槽图片质量，博主已经很努力了···&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>轻量级低风险 iOS Hotfix 方案</title>
            <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-lightweight-hotfix/</link>
            <guid>https://limboy.me/posts/ios-lightweight-hotfix/</guid>
            <description>&lt;p&gt;我们都知道苹果对 Hotfix 抓得比较严，强大好用的 JSPatch 也成为了过去式。但即使测试地再细致，也难保线上 App 不出问题，小问题还能忍忍，大问题就得重新走发布流程，然后等待审核通过，等待用户升级，周期长且麻烦。如果有一种方式相对比较安全，不需要 JSPatch 那么完善，但也足够应付一般场景，使用起来还比较轻量就好了，这也是本文要探讨的主题。&lt;&#x2F;p&gt;
&lt;p&gt;要达到这个目的，Native 层只要透出两种能力就基本可以了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在任意方法前后注入代码的能力，可能的话最好还能替换掉。&lt;&#x2F;li&gt;
&lt;li&gt;调用任意类&#x2F;实例方法的能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;第 2 点不难，只要把 &lt;code&gt;[NSObject performSelector:...]&lt;&#x2F;code&gt; 那一套通过 &lt;code&gt;JSContext&lt;&#x2F;code&gt; 暴露出来即可。难的是第 1 点。其实细想一下，这不就是 AOP 么，而 iOS 有一个很方便的 AOP Library: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt;，只要把它的几个方法通过 JSContext 暴露给 JS 不就可以了么？&lt;&#x2F;p&gt;
&lt;p&gt;选择 Aspects 的原因是它已经经过了验证，不光是功能上的，更重要的是可以通过 AppStore 的审核。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is stable and used in hundreds of apps since it&#x27;s part of PSPDFKit, an iOS PDF framework that ships with apps like Dropbox or Evernote.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Aspects 使用姿势：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前插、后插、替换某个方法都可以。使用类的方式很简单，&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt; 即可，Selector 也一样 &lt;code&gt;NSSelectorFromString&lt;&#x2F;code&gt;，这样就能通过外部传入 String，内部动态构造 Class 和 Selector 来达到 Fix 的效果了。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式的安全性在于：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;不需要中间 JS 文件，准备工作全部在 Native 端完成。&lt;&#x2F;li&gt;
&lt;li&gt;没有使用 App Store 不友好的类&#x2F;方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设线上运行这这样一个 Class，由于疏忽，没有对参数做检查，导致特定情况下会 Crash。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 传一个 0 就 gg 了
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;denominator;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在我们要避免 Crash，就可以通过这种方式来修复&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixScriptString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;fixInstanceMethodReplace(&amp;#39;MightyCrash&amp;#39;, &amp;#39;divideUsingDenominator:&amp;#39;, function(instance, originInvocation, originArguments){ \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    if (originArguments[0] == 0) { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        console.log(&amp;#39;zero goes here&amp;#39;); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } else { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        runInvocation(originInvocation); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:fixScriptString&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行一下看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;result: &lt;&#x2F;span&gt;&lt;span&gt;%.3f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;won&amp;#39;t crash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; result: 0.333
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Javascript log: zero goes here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; won&amp;#39;t crash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It Works, 是不是有那么点意思了。以下是可以正常运行的代码，仅供参考。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Aspects.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;JavaScriptCore&#x2F;JavaScriptCore.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;Felix: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;Felix
&lt;&#x2F;span&gt;&lt;span&gt;+ (Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sharedInstance;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;javascriptString];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_context;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        _context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[JSContext alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [_context setExceptionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Oops: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _context;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;isClassMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:&lt;&#x2F;span&gt;&lt;span&gt;(AspectOptions)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instanceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectorName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selectorName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixImpl:&lt;&#x2F;span&gt;&lt;span&gt;(JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;fixImpl &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(instanceName);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(isClassMethod) {
&lt;&#x2F;span&gt;&lt;span&gt;        klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(klass)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt; sel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString&lt;&#x2F;span&gt;&lt;span&gt;(selectorName);
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:sel withOptions:option usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [fixImpl callWithArguments:@[aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;originalInvocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;className &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(className);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInvocation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInvocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;invocation) {
&lt;&#x2F;span&gt;&lt;span&gt;        [invocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; helper
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;var console = {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;log&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;message) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Javascript log: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,message);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>如果想学点什么，就别依赖笔记软件</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/dont-rely-on-notetaker/</link>
            <guid>https://limboy.me/posts/dont-rely-on-notetaker/</guid>
            <description>&lt;p&gt;笔记软件会造成一种错觉：已经记录下来的就是我的了，不管对这些记录的东西了解如何。尤其一些笔记软件有强大的搜索功能，甚至能搜索图片里的文字，会更加重这种感觉。而学习的重点在于理解和使用，这跟笔记软件并没有太大的关系。&lt;&#x2F;p&gt;
&lt;p&gt;相信不少人都用过 Evernote，记录内容很方便，有洁癖的还会对每一条内容进行归类，看起来非常整齐，比如这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_1jha14cf97jdh940jjga1a8cfebke_500x289.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但记下来并不等于学会了，当内容开始多了起来，还要去思考这条内容应该放在哪里比较合适，就像在打理一个图书馆，书的内容并不是最重要的，放在哪个书架上才是。&lt;&#x2F;p&gt;
&lt;p&gt;我的笔记软件是 Bear，有一段时间会把各种内容都往里面放，放完之后非常有安全感，还会想着每天晚上 Review 一遍来加深印象，但很少发生，因为当你拿起手机时，有那么多「好玩」的 App 等着你翻牌，实在没有理由临幸一段看过的内容。如果就笔记中的某个知识点进行提问的话，很可能答不上来，毕竟需要的时候搜一下就行了，为什么要记在大脑里呢。&lt;&#x2F;p&gt;
&lt;p&gt;这跟 Derek Sivers 的一个 TED 视频阐述的观点有点类似：&lt;a href=&quot;https:&#x2F;&#x2F;www.ted.com&#x2F;talks&#x2F;derek_sivers_keep_your_goals_to_yourself&#x2F;discussion&quot;&gt;Keep your goals to yourself&lt;&#x2F;a&gt;，当你向身边的人描述某件你想做的事后，往往会带来副作用，让你觉得这件事好像已经做了；而那些选择不说的人，有可能为了让别人眼前一亮，而憋出个大招。比如买了一堆书来啃，啃之前先拍下来发个朋友圈，收到了各路朋友的赞后，好像阅读这件事已经做完了或不重要了。&lt;&#x2F;p&gt;
&lt;p&gt;学习本就是个苦差事，笔记软件并没有解决学习中的痛点，甚至会有副作用。Elon Musk 作为一个学习狂人，他认为学习最重要的是要有主干（也就是 First Principle），其他的知识点都可以挂靠到这个主干上。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_32ha61ec8i088cbbd4ja41g59eee1_536x414.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这其实就是抽象能力，能看到不同问题的本质或共同点。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_6ag0eejcjccb68f4aai23gl7fgacg_715x477.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以把不同的「A」想象成不同的问题&#x2F;知识点，当它们出现在我们面前时看起来形态各异，但如果能够注意到本质上它们都是 A，就可以快速应对了。而这种能力需要有意识地训练，直到形成习惯。&lt;&#x2F;p&gt;
&lt;p&gt;所以放弃「通过笔记软件来构建知识体系」的念头吧，它并不会让学习这个过程变得轻松，只会让你沉浸在「好像已经理解了，即使不理解，内容也都在那里只要我想就可以再看一遍而事实上再也不会看」的幻觉里。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么番茄工作法对你没有效果</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/why-u-failed-on-pomodoro/</link>
            <guid>https://limboy.me/posts/why-u-failed-on-pomodoro/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95&quot;&gt;番茄工作法&lt;&#x2F;a&gt; 相信都听说过，原理比较简单：工作 25 分钟，休息 5 分钟（一个番茄）；每 4 个番茄休息 15 - 30 分钟。工作 25 分钟可以让大脑处于「专注」模式，有效地利用相关联的模式和知识来解决问题，休息 5 分钟可以让大脑处于「发散」模式，或许可以发现新的思考事物的角度。&lt;&#x2F;p&gt;
&lt;p&gt;所以番茄工作法还是有科学依据的。但为什么这么一项听上去没有什么门槛的技术，却很难被用起来呢？&lt;&#x2F;p&gt;
&lt;p&gt;对番茄工作法进行一下翻译：在 25 分钟内集中精力处理特定任务，然后休息 5 分钟，Repeat。注意到两个关键字「集中精力」和「特定任务」，这就是难点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-zhong-jing-li&quot;&gt;集中精力&lt;&#x2F;h3&gt;
&lt;p&gt;工作中我们需要开着 IM，以便别人可以随时找到自己，当收到跟自己相关的信息时，需要尽快回复，有些 IM 甚至可以「抖」你。当我们在干活时，如果频频收到信息，那么效率也会大打折扣，而且被打断一次之后，有可能会顺便去看一些其他的新闻，状态和时间一并消耗了。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是「吸精利器」手机。只要有一丝不想干活的念头，都能在手机得到释放。一边是让自己短期难受，但长期受益的事；另一边是短期有乐趣，长期无收益甚至有害的事。大脑做决定时，查询了一下数据库，发现「体验自我」对手机留下的是好的记录，很容易就选择了手机。因为「体验自我」不关心成长，它只负责记录「峰终体验」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;te-ding-ren-wu&quot;&gt;特定任务&lt;&#x2F;h3&gt;
&lt;p&gt;首先得要有任务，如果工作比较充实的话，那么任务会比较明确，当相对轻松些时，就需要自己安排任务，而这就不那么容易了。初入职场时，往往充满了热情，对很多技术都比较好奇，这也想了解，那也想学习，逛着逛着可能一天就没了。有了些工作上的经验和沉淀之后，对于手上的活应付起来更加自如，而剩下的时间可能就花在了非工作相关的事情上。&lt;&#x2F;p&gt;
&lt;p&gt;即使安排了任务，也有可能难度不合适，粒度太粗或太细。比如想学习机器学习，听说周志华老师的「机器学习」很不错，就拿来开始啃，到后面就发现没有数学基础根本啃不下去。又或者安排了一个模糊的任务，比如「学习 Swift」，无从下手。而这又会引发「拖延症」，产生拖延症的主要原因是任务不明确、难度不合理、缺少乐趣。所以如果在任务设定上花的时间少了，产生拖延症的概率就会增加。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ran-hou-ni&quot;&gt;然后呢？&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得「使用番茄工作法失败」可以作为一个参考，是任务划分上出了问题还是集中注意力上有待提升（当然也有一些人对这套方法免疫，他们在状态好时，可以长时间集中注意力不休息，状态差时干些其他的事情，因人而异）。Aaron Swartz 的&lt;a href=&quot;http:&#x2F;&#x2F;www.aaronsw.com&#x2F;weblog&#x2F;productivity&quot;&gt;这篇文章&lt;&#x2F;a&gt;罗列了很多种方法，比如让任务触手可及，之前 Medium 有人分享了如何每天写一篇文章，一个诀窍就是每天晚上把写作软件打开，这样第二天起来打开电脑，就可以开始写了；或者想办法让任务变得有趣，比如背单词是一件很枯燥的事情，但如果把任务换成「给每一个不熟悉的单词安排一个故事」是不是会有意思一点。还有就是在任务划分阶段也就是前期多花点功夫，通过广撒网策略找到合适的方向，然后再拆分成细致可执行的任务，游戏吸引我们的一个原因是我们打开就知道该干什么，如果停留在「学习 Python」，大脑会知道你并不是真的想学，只是一个想法而已。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Aim for slow, steady progress&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>再见，第 381 个质数</title>
            <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/summary-of-2017/</link>
            <guid>https://limboy.me/posts/summary-of-2017/</guid>
            <description>&lt;p&gt;2017 作为第 381 个质数， 很快就要成为过去时了，年初并没有给自己设定什么目标，也就没有目标完成情况这一说。这一年下来还是有不少成长，中间经历过一段彷徨期，像是被关在了一间磨砂的玻璃房里，外面的阳光能照进来，却看不到外面的风景，也找不到出去的门。好在后来慢慢调整了过来，可以心平气和地学习新东西，做一些好玩的产品。下面就罗列下我觉得值得记录的点吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yue-du&quot;&gt;阅读&lt;&#x2F;h3&gt;
&lt;p&gt;这一年下来大概看了 20 本书，大部分都看完了，少部分实在是没有耐性，快进到了最后（比如「堂吉诃德」），有些读完之后印象不是很深（比如「如何衡量你的人生」），下面这几本是看得比较认真，觉得还不错的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;san-ti&quot;&gt;三体&lt;&#x2F;h4&gt;
&lt;p&gt;大概去年还是前年就看过三体三部曲，但印象不深，不少桥段完全想不起来了。今年又有不少人谈起这本书，就耐下性子来重新看了一遍。第一部还是在飞机上通过有声书听完的，依旧非常震撼。因为属于硬科幻，因此对理论功底的要求很高，同时还要通过合适的故事把这些理论串起来，尤其是第三部里面的三个童话故事实在是惊艳。有点像科幻界的 iPhone 时刻（可能是我看的科幻著作太少了 😂）&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ren-sheng-de-zhi-hui&quot;&gt;人生的智慧&lt;&#x2F;h4&gt;
&lt;p&gt;这本书给我带来的感触也挺大的。把「人生的智慧」讲得非常通透，虽是哲学范畴，但里面的一些结论又带有比较强的逻辑性，可以感受到经过了比较深层次的思考。作者在 30 岁时就完成了主要著作「作为意欲和表象的世界」，结果 62 岁完成的著作「附录和补遗」才让他一举成名。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;痛苦和无聊是人类幸福的两个死敌，但人们总在它们之间摇来摆去 —— 脱离了痛苦，便开始无聊；不无聊时，多半痛苦着，程度轻重而已。外在的那种，属于客体，意即生活的艰辛与匮乏造成痛苦，丰裕和安定就滋生无聊；内在那重，属于主体，意即一个人对痛苦和无聊的感受，精神迟钝的人较少感受到痛苦，但后果是空虚，空虚又是无聊的根源。敏感是智力突出者的前提，但他们会夸大事物的表象，因此对痛苦的感受也敏感。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人精神能力的范围尤其决定性地限定了他领略高级快乐的能力。如果这个人的精神能力相当有限，那么，所有来自外在的努力——别人或者运气所能为他做的一切——都不会使他超越只能领略平庸无奇、夹杂着动物性的快乐的范围。他只能享受感观的乐趣、低级的社交、庸俗的消费和闲适的家庭生活。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;能够从事某样活动，如果可能的话，制作某样东西，或者至少学习某一样东西，对于我们的幸福是绝对必要的。一个人的能力需要发挥，并且，他渴望看到发挥能力以后的结果。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;简单概括就是：我们应该多做一些能够增加精神乐趣的事情，这是维持快乐的最有效的方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-lai-jian-shi&quot;&gt;未来简史&lt;&#x2F;h4&gt;
&lt;p&gt;「人类简史」作者的又一力作，「人类简史」没看完，这本倒是看完了，整本书对未来还是偏悲观的，我也基本认可作者的观点。&lt;&#x2F;p&gt;
&lt;p&gt;人在不断地追求快乐，科技在不断地进步，经济在持续发展，但现代化的工具真的带来快乐了么？我们真的比 200 年前的先人们快了么？科技的进步让我们逐渐地成为了「神」，借助外部工具或药物，我们能做到 200 年前的人无法想象的事情。当更加尖端的科技被发明出来且被少数人控制时，那时这批人和普通人的关系，是不是会像现在的人与动物的关系？经济的发展让生态环境不断恶化，要付出代价的不仅是狐狸、野兔，智人也无法逃脱。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;若要维持现代经济，就需要不断且无止境的增长。如果增长停止，经济并不会温和地平静下来，而是会轰然崩塌。正因为如此，资本主义才会鼓励我们追寻不死、快乐和神性。毕竟，我们能穿几双鞋、能开几辆车、能度几个滑雪假期，这些数字都是有限的。经济需要永远持续的增长，也就需要能永远持续的议题——追寻不死、快乐和神性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们的祖先知道我们现在所拥有的工具，一定会以为我们的生活如在天堂般无忧无虑。但事实绝非如此。虽然人类取得了诸多成就，却一直有一种压力逼着我们继续生产、不断努力。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的生化系统不断适应变化，为的是增加生存和繁衍的机会，而不是快乐幸福的机会。只要是有利于生存和繁衍的行为，生化系统就会用愉悦的感觉来回应。但这不过是一时的营销伎俩罢了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以结合「&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2017&#x2F;09&#x2F;unabomber.html&quot;&gt;卡辛斯基的警告&lt;&#x2F;a&gt;」一起看。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-war-of-art&quot;&gt;The War of Art&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;War-Art-Steven-Pressfield-ebook&#x2F;dp&#x2F;B007A4SDCG&quot;&gt;Amazon&lt;&#x2F;a&gt; 上评分很高的一本书，秉承了老外一贯的唠叨风格，核心理念简单概括下就是：把要做的事情划分到足够小，给自己 5 分钟的时间去做，就会发现没那么困难。然后持续这个过程即可。&lt;&#x2F;p&gt;
&lt;p&gt;人（至少）有两个自我：体验自我和叙事自我。体验自我负责体验过程，叙事自我负责记录，也就是下次会用到的数据库。问题就出在叙事自我只会挑峰值体验和结尾体验来记录，如果在做该做的事时，过程中和结尾都没有被爽到，那么能记录下来的就只有负面的信息（所以初期不要挑战难度过高的项目）。&lt;&#x2F;p&gt;
&lt;p&gt;与此同时，社交、新闻、游戏等 App 的获取成本极低，而内容又有趣好玩，叙事自我就会把这种「愉快」的感觉记录下来。&lt;&#x2F;p&gt;
&lt;p&gt;叙事自我不关心成长，它只是一个忠实的记录者，而我们做决定时又会很在意这些记录，于是矛盾就出现了：成长能让我们感觉到充实、平静，而这些记录却容易导致相反的决定。更有意思的是，我们会为这些「抗拒」找到合适的理由，以免让自己鄙视自己。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-kao-de-ji-zhu&quot;&gt;思考的技术&lt;&#x2F;h4&gt;
&lt;p&gt;第二次读这本书，收获依旧颇丰。简单概括就是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过数据、实地访谈、逻辑推导得出不容置疑的结论。&lt;&#x2F;li&gt;
&lt;li&gt;把自己想象成一台思考机器，周边的一切都是思考的原料。&lt;&#x2F;li&gt;
&lt;li&gt;使用这台机器「看到」 5 年后的世界，然后结合自身特点向这个世界迈进。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;作者大前研一之前学的是核物理技术，进入到麦肯锡之后，这些技术就没有任何施展空间了，但在做科研积累下来的思考习惯却派上了大用场。「当你把学校里学到的东西都忘掉以后，剩下的就是教育」，放在这个场景非常合适。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;重要的不是「假设」而是「结论」。问题是什么？核心原因是什么？具体应该怎么做？如果不能直接告诉客户「这么做就能解决问题」就不算真正的解决问题。而真正的解决之策，必然源自现场。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果去观察一些失败的决策往往会发现在推导的某个环节上，把假设当结论，尽管故事听起来毫无破绽。其中还提到了 MECE 的金字塔思考方式对于思维训练也很有帮助。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;clean-architecture&quot;&gt;Clean Architecture&lt;&#x2F;h4&gt;
&lt;p&gt;全名是「Clean Architecture: A Craftsman&#x27;s Guide to Software Structure and Design」。作者是 Robert C. Martin (Uncle Bob)，也是「Clean Code」的作者，好几十年的软件开发经验。这本书对「软件架构」的剖析结构清晰，从常见的编程范式（OOP、FP 等）开始讲起，再到 SOLID 原则，再上升到 Component，最后讲到了一些核心要素：如依赖、边界、服务化等。更重要的是对这些设计理念的独特见解，而不是照本宣科，同时会结合 Demo 来阐述。比如 OOP 虽然有那么多的特性，但最重要的是 DI（依赖注入），然后讲为什么 DI 重要。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The architecture of a system is defined by boundaries that separate high-level policy from low-level detail and follow the Dependency Rule.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;testability is an attribute of good architectures.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;First make it work.&amp;quot; You are out of business if it doesn’t work.
&amp;quot;Then make it right.&amp;quot; Refactor the code so that you and others can understand it and evolve it as needs change or are better understood
&amp;quot;Then make it fast.&amp;quot; Refactor the code for “needed” performance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ying-shi&quot;&gt;影视&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;hei-fan&quot;&gt;黑帆&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_1kaj9df46ej766j5hedkejf94bajc_1080x1599.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
今年看过的最棒的美剧，很想一口气看完，又想慢慢品尝。故事讲的是在一座尚未被正规军占领的小岛上，海盗们把抢来的财宝通过关系网销往外部，但每个人都有自己的小心思。有想把这里建立成独立王国的，有想对这块地进行殖民统治的，有想维持现状的等等，在不同的动机趋势下，各种人群开始了各种明争暗斗，堪比「权力的游戏」，演员的表演也是很大的加分项。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rick-and-morty&quot;&gt;Rick and Morty&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_713j73031c67g48adk084jkk2je0g_564x810.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
某个公众号强烈推荐的，一看评分出奇地高，就有了兴致。用一个关键字来描述的话就是「脑洞奇大」，永远处于喝醉状态的科学家 Rick 带着孙子 Morty 开始了各种神奇的冒险。Rick 基本上属于全知全能，可以通过「任意门」穿越到各个平行时空，可以造出各种稀奇古怪的发明，说的话总是那么直接，但依然有自己的苦恼。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_2fl6jj67d1f9j1eg43gg5ccb05l40_720x405.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有一集是讲在一座全是 Rick 和 Morty 的城市，有一家威化饼厂家，其独特的秘方来自于不断对某个 Rick 「播放」和女儿的温馨画面以产生某种化学元素作为威化饼干的核心成分。在被某一个工作 15 年的 Rick 破坏后，配方升级为「自由之泪」。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_3e4ge576bbf8chkli513ce47205gd_720x392.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qing-hui-da-1988&quot;&gt;请回答 1988&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_816l7kda4198bha54he570gh8408l_1080x1530.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
也是一部评分超高的片，之前看了这个名字并没有什么兴致，真的看了几集之后就一发不可收拾，声明：我是狗焕党。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-sheng&quot;&gt;未生&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_738dl3dg10he8lbc2kj1e6f5d2j11_800x1157.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
职场剧，没有太狗血的剧情，进展也慢悠悠的，演员的表演很有吸引力，现在每次去公司的天台就会想起这部电视剧。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hei-ke-di-guo-san-bu-qu&quot;&gt;黑客帝国三部曲&lt;&#x2F;h4&gt;
&lt;p&gt;之前看得一知半解，重新看一遍之后，清晰了许多，是部佳作，就是里面太多的机械类场景削弱了剧情。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;youth&quot;&gt;Youth&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_54lf0a97g4cb10caa7a4bbkak7445_1080x718.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
适合在阳光明媚的午后看，情节舒缓，画面美，探讨了一些人生大道理，我看了两遍。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;her&quot;&gt;Her&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_053eif73cd13cl44ie7a27h3e5f47_1080x1598.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
AI 热潮，因此又看了一遍，斯佳丽的声音太好听了。跟 AI 谈恋爱看起来也是一件很正常的事情。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;youtube&quot;&gt;Youtube&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;let-s-teach-for-mastery-not-test-scores-sal-khan&quot;&gt;Let&#x27;s teach for mastery - not test scores | Sal Khan&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-MTRxRO5SRA&quot;&gt;链接&lt;&#x2F;a&gt;，可汗的 TED 分享。目前的考试制度比较死板，无法真正检验学生是否习得某种技能或知识，而且由于无法及时地修补知识缺陷，导致越往后面这个缺陷被放大地越明显，加上新的缺陷，直到某一天觉得「自己看来真不是做 XX 的料」。有了「视频教学」后，就可以有针对性地选取自己的薄弱点进行强化训练，基础稳固之后再更上一层楼。不过他也没有提到除了考试，还有没有更合适的验证方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;inside-the-mind-of-a-master-procrastinator-tim-urban&quot;&gt;Inside the mind of a master procrastinator | Tim Urban&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=arj7oStGLkU&quot;&gt;链接&lt;&#x2F;a&gt;, Tim Urban 是著名博客 &lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;&quot;&gt;waitbutwhy&lt;&#x2F;a&gt; 的作者，这个 Ted 视频分享了他对拖延症的一些理解。通过一个 Monster &#x2F; Monkey &#x2F; Decision-Maker 模型非常形象地阐述了拖延症是怎么产生的，以及如何从 Monkey 那里重新夺回主动权。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_63i4i52ccc9bg5l6h287bdebe3g1h_640x426.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在第二篇&lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2013&#x2F;11&#x2F;how-to-beat-procrastination.html&quot;&gt;如何战胜拖延症&lt;&#x2F;a&gt; 一文中作者对这个模型进行了拓展，也很形象。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s11.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_52d1f73b2l9l5l414551fh0ac05i8_640x480.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yi-xi-luo-si-gao-nong-cun-er-tong-de-fa-zhan-zen-yang-ying-xiang-zhong-guo-wei-lai&quot;&gt;一席·罗斯高：农村儿童的发展怎样影响中国未来&lt;&#x2F;h4&gt;
&lt;p&gt;62 岁的斯科特·罗斯高（Scott Douglas Rozelle）是斯坦福大学国际研究所的教授，已从事了约 30 年中国农村研究，专注于农业经济和农村发展。这个结论的推导大概是这样的：教育对一个国家的发展起了很大作用，很多之前「没毕业」的国家，通过加大在教育上的投入后，都毕业了。而中国的农村人口占据了很大一部分，这些人里的农村儿童受教育程度普遍偏低，因此只有提升这些基数较大的人群的教育才有可能让中国毕业。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;channel-tui-jian&quot;&gt;Channel 推荐&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCsooa4yRKGN_zEE8iknghZA&quot;&gt;TED-ED&lt;&#x2F;a&gt; 不是 TED 那样的分享，都是比较简短（5 分钟左右）的小视频，制作精良，内容的覆盖面也很广，有一些有意思的逻辑推理题，我有时会在吃饭的时候提出来，效果还蛮好的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCQtwvRQWnT5Buh9hpvNNryQ&quot;&gt;柴知道&lt;&#x2F;a&gt; 主要是一些科普类的小视频，动画制作蛮用心的，可以开阔眼界。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;MIT&quot;&gt;MIT OpenCourse&lt;&#x2F;a&gt; MIT 的公开课，内容非常丰富，甚至有德州扑克的教学视频。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yin-le&quot;&gt;音乐&lt;&#x2F;h3&gt;
&lt;p&gt;音乐这块一直比较随意，没什么偏好，但总会在不经意间接触到一些印象深刻的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coldplay&quot;&gt;Coldplay&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Viva La Vida. 在苹果发布会上听到的这首歌，当时觉得挺带劲，就查了下，然后就挖掘了下这个乐队，原来「Yellow」也是这个乐队的作品。&lt;&#x2F;li&gt;
&lt;li&gt;Another&#x27;s Arms.&lt;&#x2F;li&gt;
&lt;li&gt;Army Of One.&lt;&#x2F;li&gt;
&lt;li&gt;Violet Hill.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;johnny-cash&quot;&gt;Johnny Cash&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Hurt. Rick and Morty 里面听到的，一下就被吸引了，这首歌是在第二季结束时， Rick 向银河系政府自首时放的，很伤感。后来了解到 Hurt 所在的专辑 「American IV: The Man Comes Around」是 Johnny Cash 在世时的最后一张专辑，也极具纪念意义。&lt;&#x2F;li&gt;
&lt;li&gt;Bridge Over Troubled Water.&lt;&#x2F;li&gt;
&lt;li&gt;Personal Jesus.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;macy-gray&quot;&gt;Macy Gray&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;When I See you. 声音非常特别，有点沙哑和烟嗓，节奏感很不错。&lt;&#x2F;li&gt;
&lt;li&gt;The way.&lt;&#x2F;li&gt;
&lt;li&gt;Beauty in the World.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;david-bowie&quot;&gt;David Bowie&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Changes. 这首歌更多的是纪念意义。当年在 Legend33 跟老胡一起做 App 时，常去的咖啡馆就经常会放这首歌，现在听来满满都是回忆。&lt;&#x2F;li&gt;
&lt;li&gt;Space Oddity. 「白日梦想家」里面第一次听到。&lt;&#x2F;li&gt;
&lt;li&gt;Oh! You Pretty Things.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;chaos-chaos&quot;&gt;Chaos Chaos&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Do You Feel It? 这首歌出现在 Rick and Morty S02E03, Rick 跟 Unity 重逢，最后 Unity 再次离开了 Rick。Rick 经常会说一句无厘头的话：wubba lubba dub dub，没人知道是什么意思，直到有一天鸟人道破玄机，在他们的世界里这句话的意思是：I am in great pain, please help me.&lt;&#x2F;li&gt;
&lt;li&gt;Monsters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;遇见相似的灵魂 - 代鑫。冲这个名字就喜欢。&lt;&#x2F;li&gt;
&lt;li&gt;Avalanche - Leonard Cohen. 黑帆第二季结尾时听到的，Nick Cave 翻唱，查了下原作原来是 Cohen。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=g41FFmNU66U&quot;&gt;Look On Down From The Bridge&lt;&#x2F;a&gt;. Rick and Morty S01E06 出现的，Rick 和 Morty 从另一个平行时空冒险回来发现自己在这个世界里已经死了，然后他们亲手埋葬了自己，替代自己开始了生活。之前不太明白这个 Bridge 是怎么回事，后来才知道，这个 Bridge 是连接这个世界和另一个世界的桥梁，放在这集作为背景非常合适。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ruan-jian&quot;&gt;软件&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;surge&quot;&gt;Surge&lt;&#x2F;h4&gt;
&lt;p&gt;不多讲，年度最佳。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;google-music&quot;&gt;Google Music&lt;&#x2F;h4&gt;
&lt;p&gt;为了能让 Youtube 离线下载和后台播放，就打算买个付费服务感受下，但不支持国内的信用卡，于是换了个思路，通过 Google Music 的付费服务来顺便激活 Youtube Red，没想到 Google Music 用下来还可以(小 bug 还是不少)，可能是我的要求也不太高，对国内的曲库也没有什么要求。少数派写过一篇 &lt;a href=&quot;https:&#x2F;&#x2F;sspai.com&#x2F;post&#x2F;42333&quot;&gt;Google Music 的评测&lt;&#x2F;a&gt; 感兴趣的可以了解下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;youtube-1&quot;&gt;Youtube&lt;&#x2F;h4&gt;
&lt;p&gt;大宝库，尤其是升级了会员之后，也没有广告，用起来很舒服，就是推荐系统有点着急。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mindnode&quot;&gt;Mindnode&lt;&#x2F;h4&gt;
&lt;p&gt;Mindnode 出了 5 之后，趁着打折就买了，非常满意。现在会维护一个大的思维导图，里面的内容五花八门，从编程到交互设计到书摘等一应俱全。
&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_3ba9jag9lcd7fflia92ce3a52ij6k_1343x814.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bear&quot;&gt;Bear&lt;&#x2F;h4&gt;
&lt;p&gt;用过的最舒服的笔记工具了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-guan&quot;&gt;习惯&lt;&#x2F;h3&gt;
&lt;p&gt;要养成一个习惯非常难，下面这些正在养成过程中。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;跑步 (一般都在晚上 10 点之后，在公司的健身房)&lt;&#x2F;li&gt;
&lt;li&gt;思维模型学习（每天学习一个）&lt;&#x2F;li&gt;
&lt;li&gt;冥想（用的 Kevin Rose 出品的 Oak，比较简单，用起来也挺方便，没感受到什么明显的变化，但也没什么成本）&lt;&#x2F;li&gt;
&lt;li&gt;背单词（用的「有道背单词」，做得挺不错的，目前坚持了 15 天）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qi-ta-1&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;can-jia-wwdc&quot;&gt;参加 WWDC&lt;&#x2F;h4&gt;
&lt;p&gt;本来只是随便抽一下，没想到居然抽中了，索性就去感受下吧。认识了很多小伙伴，去了 Infinite 1 总部参观，在苹果总部的食堂吃了顿饭，坐了趟从旧金山到圣荷西的小火车等等，虽然自费，但从收获来讲，还是值得的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-liao-ge-gong-si-nei-bu-de-ji-zhu-wen-zhang-ping-tai&quot;&gt;做了个公司内部的技术文章平台&lt;&#x2F;h4&gt;
&lt;p&gt;最初只是想找个写技术文章的地方，发现没有一个合适的，索性自己撸起袖子干。最开始是模仿 telegra.ph，功能比较简单，只是发布和浏览 Markdown 文章，后来随着使用方的反馈，以及自己的一些想法慢慢完善，现在功能上已经挺齐全了，包括搜索也支持了。&lt;&#x2F;p&gt;
&lt;p&gt;目前有 400 篇的文章，从结果上来看也还不错，毕竟不是「官方指定」，主要是靠着口碑传播。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huang-shi-zhan-zheng-wan-dao-4000-bei&quot;&gt;皇室战争玩到 4000 杯&lt;&#x2F;h4&gt;
&lt;p&gt;这个游戏玩得蛮久的，但杯数一直在 3000 那样，后来跟一同事打赌看谁先到 4000，于是就开始了一段时间的疯狂刷杯，居然真的玩到了 4000+，人的潜力果然是被逼出来的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-yuan-san-jie-mo-fang&quot;&gt;复原三阶魔方&lt;&#x2F;h4&gt;
&lt;p&gt;某天同事心血来潮玩起了魔方，于是就带了一个回家，然后就是对着教程各种练，有时吃饭也会带上，状态好的话，2 分多钟能还原出来，卡壳了可能就需要 3 分多了，速度上比较一般，但还是蛮有成就感的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yong-swift-xie-liao-ge-kan-android-log-de-gong-ju&quot;&gt;用 Swift 写了个看 Android Log 的工具&lt;&#x2F;h4&gt;
&lt;p&gt;有一段时间 Android 相关的问题排查地比较多，而 logcat 看起来有点累，于是就自己做了一个，找回了点做工具的感觉。把它推销给同事后，在排查 Android 问题时，会优先打开它，还是蛮欣慰的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;这一年给自己打分的话，勉强及格吧，没有做出能拿的出手的东西，也没有在哪个方面有比较深入的了解，希望明年能有所改善。2018 年的方向会是机器学习、CS、JS、做一个有趣的 App，想想还是有点激动呢···&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>如何过好这一生</title>
            <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/live-well/</link>
            <guid>https://limboy.me/posts/live-well/</guid>
            <description>&lt;p&gt;这是一个很大的话题，每个人都会有自己的见解。随着年龄的增长，在焦虑感的协迫下，越来越希望尽快找到「正确答案」，来给未来的路指明方向。&lt;&#x2F;p&gt;
&lt;p&gt;怎么算找到呢？一个简单的评判方式是：当听到「xx 在 yy 时间内，通过做 zz 获得了一笔可观的收入」时，内心的波动程度。&lt;&#x2F;p&gt;
&lt;p&gt;对于「如何过好这一生」，我的答案是下面这张图，尽量往「理想模式」靠拢。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;live-well&amp;#x2F;life.png&quot;
        width=&quot;3222&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;ji-ge-qian-ti&quot;&gt;几个前提&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;人的精力有限，过了黄金阶段之后，随着年龄的增长逐渐下滑。&lt;&#x2F;li&gt;
&lt;li&gt;健康是基石，且随着年龄的增长，维护成本逐渐增加。&lt;&#x2F;li&gt;
&lt;li&gt;财富是自由的基础，需要有足够的存量，但不是目的。&lt;&#x2F;li&gt;
&lt;li&gt;精神乐趣最为重要。最高级、最丰富多彩以及维持最为恒久的乐趣是精神思想上的乐趣。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jie-lun-tui-dao&quot;&gt;结论推导&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;早日财务自由。因为年龄增长必然导致精力下降，健康维护成本增加，剩下的时间已然不多，如果再分一点给财富积累，最重要的精神乐趣就享受不了了。&lt;&#x2F;li&gt;
&lt;li&gt;多花时间在精神乐趣上，最重要的事自然应该分配更多的资源。&lt;&#x2F;li&gt;
&lt;li&gt;最合适的途径就是通过大量精神乐趣上的投入，带来财富上的回报。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以，当你不知道该干什么时，读书和挣钱之间挑一个总是没错的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>App 图片体验指标</title>
            <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/app-img-metrics/</link>
            <guid>https://limboy.me/posts/app-img-metrics/</guid>
            <description>&lt;p&gt;网络图片作为 App 的一个重要组成，自然也需要一些关键指标来衡量，有了指标方便看到优化的效果。不过目前貌似没有比较广泛采用的指标，跟其他公司交流时，当聊到 Crash 率，大家都有统一的认知，但聊到图片体验，就很难进行比较了：我们这块一直都不错，用户反馈也不多。但事实可能并不如此。&lt;&#x2F;p&gt;
&lt;p&gt;为什么图片的指标不好定？因为环境比较复杂，边界也不太好确定（不像 Crash，判断条件非常清晰）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;网速比较慢，图片出不来或出来得很慢正不正常。&lt;&#x2F;li&gt;
&lt;li&gt;图片本身就比较大，下载过程自然就慢了，耗时长一点也正常。&lt;&#x2F;li&gt;
&lt;li&gt;即使下载速度比较快，如果是单线程的话，显示上也是一张一张出来，体验并不好。&lt;&#x2F;li&gt;
&lt;li&gt;有时图片即使下载成功了，也有可能无法显示。&lt;&#x2F;li&gt;
&lt;li&gt;···&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果把图片从请求到渲染完成作为一个任务，这个任务的成功跟很多因素有关，但核心阻碍只有一个，就是「图片请求」，其他可优化的空间不多或效果不那么明显，且相对成熟（比如后台多线程下载，滑出屏幕时取消下载等）。因此图片体验的指标可以缩小范围为「图片请求指标」。&lt;&#x2F;p&gt;
&lt;p&gt;跟图片请求最相关的几个因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CDN&lt;&#x2F;li&gt;
&lt;li&gt;客户端网络状况&lt;&#x2F;li&gt;
&lt;li&gt;图片大小&lt;&#x2F;li&gt;
&lt;li&gt;图片格式&lt;&#x2F;li&gt;
&lt;li&gt;请求协议（http&#x2F;1.1 http&#x2F;2）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些就好像汽车的离合、油门、刹车可以供我们控制，也需要一个仪表盘来看到控制的效果。那这个仪表盘里显示的是什么？&lt;&#x2F;p&gt;
&lt;p&gt;我们希望显示的内容能真实地体现用户的图片体验。在这个前提下，很多因素就不需要考虑了，比如网络环境、机型等。因为同样一张图，如果 3 秒后还没有出来，无论是 wifi 还是 2G，这个体验就是不好的。&lt;&#x2F;p&gt;
&lt;p&gt;接下来再来看图片请求会有哪些结果，很简单，请求成功和请求失败。请求失败比较好办，失败就是失败了，记录一下即可。那么请求成功该怎么细分呢？&lt;&#x2F;p&gt;
&lt;p&gt;我们知道在 web 时代，如果页面 3 秒没有出来，用户离开网页的可能性就会高很多。在图片领域没有相对权威的值，因此结合真实体验，拟定了以下的体验指标：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;图片请求失败率:
&lt;&#x2F;span&gt;&lt;span&gt;	图片请求失败次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;图片请求耗时：
&lt;&#x2F;span&gt;&lt;span&gt;	优: 耗时在 (0, 1] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	良: 耗时在 (1, 2] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	中: 耗时在 (2, 3] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	差: 耗时在 (3, ∞) 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于真实环境下图片请求次数会很大，因此可以设置采样率，比如 &lt;code&gt;1&#x2F;1000&lt;&#x2F;code&gt;，也就是 1000 次图片请求记录 1 次，将样本量缩到恰当的范围。&lt;&#x2F;p&gt;
&lt;p&gt;有了这 5 份数据，对于线上的图片体验就能有一定的了解了，接下来可以针对每份数据进行不同维度的数据聚合，比如：城市、网络类型、页面 URL、error_code、CDN 等。如果某个城市的图片访问出了问题，就能很快知道，或者某个 CDN 调整也能快速定位。&lt;&#x2F;p&gt;
&lt;p&gt;同时可以对每份数据的前 N 位 Top 用户进行记录，因为有可能某几个用户发生异常，贡献了大部分的数据。&lt;&#x2F;p&gt;
&lt;p&gt;在这些指标的基础上，可以再从图片大小、尺寸、CDN、网络请求等维度进行优化，方便验证效果。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>工作缺少劲头怎么办</title>
            <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/work-exhaust/</link>
            <guid>https://limboy.me/posts/work-exhaust/</guid>
            <description>&lt;p&gt;工作时间长了之后，有时会出现干活「缺少劲头」的现象。怎么算「缺少劲头」呢？有一种说法是对第二天是否充满期待，我有过这种感觉，很棒，但要天天如此也不容易。我觉得缺少劲头的表现大概就是: 上班时容易被工作以外的事情吸引，下班后也不愿再想工作上的事。这不能说不对，但可以更好。毕竟在公司过的每一天，都是你自己的，何不提升下质量呢。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shi-yao-hui-chu-xian-zhe-ge-wen-ti&quot;&gt;为什么会出现这个问题&lt;&#x2F;h2&gt;
&lt;p&gt;在「如何衡量你的人生」这本书里，作者提到了两个激励因素：基础因素和动力因素。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;基础因素：职业地位、福利待遇、办公环境等。&lt;&#x2F;li&gt;
&lt;li&gt;动力因素：挑战、认可、责任感、成长等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们在选择一份工作时，往往对基础因素考虑的很多，而忽视了动力因素。基础因素相对比较固定，存在边际效应递减的问题。假设上一份工作的月薪是 1 万，下一份工作是 2 万，翻了一倍。在前几天可能还会有点小兴奋，过不了多久这个兴奋感就会过去，因此无法形成持续的激励。&lt;&#x2F;p&gt;
&lt;p&gt;当出现「缺少劲头」时，往往是激励因素出了问题。如果是基础因素出了问题，在证明自身能力的前提下可以争取。如果是动力因素出了问题（往往这个是大多数），这就需要花点时间反思了，是公司的环境问题还是自己的能力问题，多数情况下可能是自己的问题。比如做的事情没有挑战，为什么会被分配到没有挑战的事？有去争取其他更想做的事情么？得到的反馈是什么？或者最近一年感觉没什么成长，是因为确实没什么事情可做，还是自己不知道要做什么？对于做的事情标准不够高？&lt;&#x2F;p&gt;
&lt;p&gt;除了这两个因素外，氛围也很重要，周围的人做事的方式是否认同，是否踏实，是否能形成合力等。尽量去营造积极的氛围，对自己和团队都会大有好处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-jie-jue-zhe-ge-wen-ti&quot;&gt;如何解决这个问题&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;先做成一件事。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;而这并不简单。&lt;&#x2F;p&gt;
&lt;p&gt;假如领导说：你看现在反馈 Android App 图片出不来问题的用户不少，你来解决下。你看了几天代码，做了一些改动，上线后发现效果还不错，反馈的用户果然少了，于是你认为这件事情就算完成了。真的完成了么？这就涉及到了「标准」，这样的标准能给一个及格的分，毕竟精确解决了问题（反馈用户变少了）。但离「做成」还有不少距离，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;能不能设计一个更精确的模型来监控线上图片出不来的现象。&lt;&#x2F;li&gt;
&lt;li&gt;除了图片出不来，图片请求耗时是不是也需要监控下。&lt;&#x2F;li&gt;
&lt;li&gt;顺便看下 iOS 有没有类似的问题。&lt;&#x2F;li&gt;
&lt;li&gt;能不能定义一套「关键指标」用来反映线上用户的图片使用体验。&lt;&#x2F;li&gt;
&lt;li&gt;图片请求能不能做下优化，比如降级策略、弱网策略。&lt;&#x2F;li&gt;
&lt;li&gt;能不能设计一套网络质量检测工具，对于排查其他的网络问题时也能有点帮助。&lt;&#x2F;li&gt;
&lt;li&gt;能不能设计一个代码层面的无侵入网络环境模拟工具，可以自动执行各种网络环境下的单元测试。&lt;&#x2F;li&gt;
&lt;li&gt;能不能在几处关键地方加入打点，方便排查个别用户的图片体验。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一个小需求中能提炼出很多可以做的事：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;让问题排查更有效率。&lt;&#x2F;li&gt;
&lt;li&gt;减少重复性的劳动。&lt;&#x2F;li&gt;
&lt;li&gt;抽象出一套通用解决方案，甚至可以开源，回馈社区。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wei-shi-yao-zuo-cheng-yi-jian-shi-hen-zhong-yao&quot;&gt;为什么「做成一件事」很重要？&lt;&#x2F;h3&gt;
&lt;p&gt;对自己来说，能帮助养成「高标准」的习惯。很多人做事能达到 70 分，但能达到 90 分的就很少，因为太难了。首先需要想到该如何达到 90 分，光是这一条就已不易。而要达到 90 分，往往需要跳出舒适圈：跟其他部门的同事沟通；查看源码或论文；接触一门不太熟悉的语言等等。这个过程会带来不少挑战，同时对自己的成长也会带来帮助。当做成了 1，2 件事情后，慢慢就会形成习惯，而最终是习惯造就了我们自己。做成一件事后，可以营造好的口碑，提升信任感，别人会觉得把事情交给你心里会比较有底，慢慢机会就会多起来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-zhe-jian-shi-mei-shi-yao-xing-qu-zen-yao-ban&quot;&gt;对这件事没什么兴趣怎么办？&lt;&#x2F;h3&gt;
&lt;p&gt;没有兴趣自然就做不好了嘛。那在有兴趣的事情上做得怎么样？足够好么？为什么现在没有在做那样的事？有兴趣是很好的一件事，但乔布斯的一句话可能成为了不把事情做好的借口：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You’ve got to find what you love. If you haven’t found it yet, keep looking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「这不是我喜欢的事情，所以我做不好，我还要继续寻找」。然后把希望寄托在某天忽然被某件事深深吸引。不否认这种情况发生的可能性，但有点像赌博，风险比较高。我觉得缺少兴趣往往是对一件事的认识不够或有偏见。比如对画画缺少兴趣，因为从来没有画好过一副画，也不认为自己有这方面的天赋，如果要求你在一个星期内画一幅颇有难度的画，可能就很难交出一份满意的作品了。其实只要找到诀窍，勤加练习，同时赋予意义就完全有可能做到。赋予意义很重要，首先要说服自己这件事情值得做才有可能做得好：画画能够锻炼耐心，这与写程序是共通的；画画锻炼观察能力，这是一种元能力，对于自我提升会很有帮助；画画涉及到构图，跟程序架构有点像；画画需要扣细节，在追求完美的过程中这种精神必不可少。这样是不是让画画这件事不再枯燥乏味了呢？&lt;&#x2F;p&gt;
&lt;p&gt;当做成了几件事后，会发现其中有一些通用技能可以复用，比如学习能力，问题分解能力，推进能力，沟通能力。这些元能力的习得，对于做成更大的事会很有帮助。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhi-ye-gui-hua&quot;&gt;职业规划&lt;&#x2F;h3&gt;
&lt;p&gt;我自己其实没什么规划，但知道做什么事情会比较开心，只要做这些事能持续获得成就感和成长同时能对别人带来积极影响就行。我会想象 1 年后自己大概是一种怎样的状态，然后努力向那种状态靠拢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-de-geng-zhuan-ye&quot;&gt;变得更专业&lt;&#x2F;h3&gt;
&lt;p&gt;如果要获得别人的认可和尊重，这是唯一的捷径。当遇到难题时会想到你，设计上没什么思路时会找你，方案 Review 时也会找你。解决这些问题的过程中会增加影响力，这对于以后推进一些事情大有裨益。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-dao-yi-ge-bu-shun-yan-de-zhu-guan-zen-yao-ban&quot;&gt;遇到一个不顺眼的主管怎么办&lt;&#x2F;h3&gt;
&lt;p&gt;Ta 的哪些地方导致了「不顺眼」，对自己做的事情会产生怎样的影响，有没有沟通过还是自己的主观判断，Ta 的建议是否中肯等等。误判心理学有一条 &lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E7%A2%BA%E8%AA%8D%E5%81%8F%E8%AA%A4&quot;&gt;确认偏误&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人选择性地回忆、搜集有利细节，忽略不利或矛盾的资讯，来支持自己已有的想法的片面诠释。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;也就是说，当我看 Ta 不顺眼时，会主动收集很多支持「不顺眼」的细节来加强「不顺眼」的印象。先要排除这种情况，再来看 Ta 是不是对你的成长产生了负面影响，如果是的话，再寻求更合适的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-xie-shu-tui-jian&quot;&gt;一些书推荐&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1591848202&quot;&gt;Pivot&lt;&#x2F;a&gt;，作为职业发展培训师在 Google 工作了五年，离开后开始专职投入相关的工作。她把转型的过程分成了 4 个步骤：Plant -&amp;gt; Scan -&amp;gt; Pivot -&amp;gt; Launch，每个步骤都进行了详细的说明，对于考虑转型的同学应该会有帮助。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1617292397&quot;&gt;Soft Skills&lt;&#x2F;a&gt;，这本书的作者也是个软件开发工程师，其中提到了很多工程师应该具有的软技能，包括 Career &#x2F; Marketing &#x2F; Learning &#x2F; Productivity 等，可以开阔下思路。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1455509124&quot;&gt;So Good They Can&#x27;t Ignore You&lt;&#x2F;a&gt;，不要执迷于寻找自己真正的「天职」，而要去掌握稀缺而宝贵的技能。正确地工作胜过正确的工作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;11622053&#x2F;&quot;&gt;如何衡量你的人生&lt;&#x2F;a&gt;，被乔布斯推荐的「创新者的窘境」也出自该作者。围绕三个「简单的问题」来讨论，没时间看书的可以先看下这个 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=tvos4nORf_Y&quot;&gt;TED 视频&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>如何认识事物</title>
            <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-know/</link>
            <guid>https://limboy.me/posts/how-to-know/</guid>
            <description>&lt;p&gt;在一个月明星稀的夜晚，你坐在阳台的躺椅上，手捧着银瓶梅，看得有滋有味。忽然天空闪过一道异光，一个外星生物蹦到了你面前，指了指你手上的那本书问道：这是什么？&lt;&#x2F;p&gt;
&lt;p&gt;你很想直接回答这是一本书，但这样对方可能对你发动超能力。那如何才能把「书」这个东西给讲明白呢？我们来试一下。&lt;&#x2F;p&gt;
&lt;p&gt;书是一种带有文字和图像的纸张的集合。它能够携带大量的信息，不过由于书本身也占用一定的体积，所以当它比较多时也会出现携带不方便等问题。人们通常可以在书店、图书馆或朋友之间获取到书，内容也包罗万象，包括小说、传记、科学著作等等。书通常由墨水、纸张、羊皮纸或者其他材料固定在书脊上组成。书的出现跟活字印刷术有很大关系，它使得大规模、高效率地产出书籍成为了可能，在书出现以前，中国古代会把字刻在竹简上，不过这样的「书」比较笨重，携带的信息也非常有限。在现代出现了电子书，它不占用物理空间，只要有相应的电子设备就能阅读，解决了实体书笨重不方便携带的问题，不过也有人说它少了那种读纸质书的乐趣。从本质上来说，书能满足人们的精神需求，也可以通过读书来交到志同道合的朋友。&lt;&#x2F;p&gt;
&lt;p&gt;经过这么一番简单解释之后，是不是把「书是什么」大概地捋清楚了。看起来有点复杂，了解了下面这个模型之后就会很清晰了。它分为内环和外十字两部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fhj6pju1gkj20hi0fcdgi.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面就来解释下这个模型。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-huan&quot;&gt;内环&lt;&#x2F;h3&gt;
&lt;p&gt;先从左上角的「定义」开始说起，解释「什么」，比如灯泡：可以在夜间提供照明的设备。接下来开始阐述「特性」，简单来说就是优点和缺点，比如书的优点：有质感，有收藏价值，可以记笔记，缺点在于携带不是那么方便，也不环保。了解了特性之后，就自然会想知道由于这些特性，导致它比较适合哪些场景。最后自然想了解它到底是怎么实现的，通过这四点，我们对一件事物就有了基本的了解。&lt;&#x2F;p&gt;
&lt;p&gt;不过还不够，这些更多 Focus 在事物本身，我们也要跳出来看一下，于是就有了「外十字」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wai-shi-zi&quot;&gt;外十字&lt;&#x2F;h3&gt;
&lt;p&gt;外十字主要分为 3 部分。History 回答的是为什么。为什么会有书，书产生之前是怎样的形态，有点像产品需求。Related 说明有没有相关的，一个事物很少会独立存在，总会有什么跟它产生关联，这也方便我们对它产生更全面的认识。Abstract 是对这个事物本身进行抽象，看看能不能提取出本质，这样看书这个行为甚至可以和玩游戏关联起来，因为都能达到精神愉悦。&lt;&#x2F;p&gt;
&lt;p&gt;通过这两部分的结合，对事物的理解就会比较全面了。&lt;&#x2F;p&gt;
&lt;p&gt;我们再来做个简单的测试：什么是红黑树？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;&#x2F;strong&gt; 一种自平衡二叉查找树，需要符合 5 条基本要求（篇幅原因，这里就不列出来了）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;特性：&lt;&#x2F;strong&gt; 从根到叶子的最长可能路径不多于最短的可能路径的两倍长。同时由于本身就是二查找树，因此也继承了它固有的特性，比如查找、插入的时间复杂度都是 O(log n)。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;场景：&lt;&#x2F;strong&gt; 由于相对比较平衡，因此效率较高，C++ STL 中的 map 就是通过它来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;实现：&lt;&#x2F;strong&gt; 主要是插入和删除。插入时需要先将节点染成红色，再通过判断叔父节点的颜色来决定下一步是旋转还是将祖父节点染成红色（篇幅原因，就不列出来了）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;历史：&lt;&#x2F;strong&gt; 为什么会产生红黑树呢？因为二叉查找树有一个很大的问题：容易失衡，这就导致某些场景下效率会很低，因此需要有一个平衡性好一点的二叉查找树。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;相关：&lt;&#x2F;strong&gt; 类似的平衡性不错的还有 AVL 树，比红黑树更平衡，不过实现起来也更复杂，插入、删除时的旋转操作也更多，对平衡性要求特别高的可以考虑 AVL 树。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;抽象：&lt;&#x2F;strong&gt; 回归到二叉查找树的初衷 ，它是一个通用、高效的基础数据结构，可以演化出 set &#x2F; map 等更高级的数据结构，也可以用来排序（中序遍历）。&lt;&#x2F;p&gt;
&lt;p&gt;其他的事物也可以通过这个模型来认识，这样就不会只浮于表面。不妨做一个练习，比如如何认识「如何认识事物」？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The Right Way to Architect iOS App with Swift</title>
            <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-right-way-to-ios-architecture/</link>
            <guid>https://limboy.me/posts/the-right-way-to-ios-architecture/</guid>
            <description>&lt;p&gt;关于 iOS 架构的文章感觉已经泛滥了，前一阵正好 Android 官方推了一套 &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;guide.html&quot;&gt;App Architecture&lt;&#x2F;a&gt; ，于是就在想，对于 iOS 来说，怎样的架构才是最适合的。带着这个问题，我开始了探索。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-architecture-matters&quot;&gt;Why Architecture Matters?&lt;&#x2F;h2&gt;
&lt;p&gt;这是第一个也是最重要的问题，为什么会出现各种 Architecture Pattern？真的那么重要么？&lt;&#x2F;p&gt;
&lt;p&gt;我们来想一下，无论是做一个 App 还是搭一套后台系统，如果是一次性的，今天用完明天就可以扔掉，那么怎么快怎么来，代码重复、代码逻辑、代码格式统统不重要。&lt;&#x2F;p&gt;
&lt;p&gt;这种场景比较适合黑客马拉松，而真实情况往往是我们的代码需要上线，要对用户负责，而一套好的架构会让这些事情变得更加容易。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-jian-ji-qie-zheng-ji&quot;&gt;好的架构简洁且整洁&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;170619_4e7gif674kdad56l6iek5lj8i7dl9_984x329.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;说到架构，往往会想到建筑，软件架构跟建筑不同的点是软件架构会随着时间的推移进行演进，而实体建筑则没这个特性。抛开时间维度，这二者还是有一定的相似性的。&lt;&#x2F;p&gt;
&lt;p&gt;好的架构容易催生好的代码，就像住在干净整洁的房子里，会下意识地让其中的家具、电器、摆饰等也井井有条。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-rang-dai-ma-geng-jia-rong-yi-wei-hu&quot;&gt;好的架构让代码更加容易维护&lt;&#x2F;h3&gt;
&lt;p&gt;不容易维护的代码往往有这么几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;抽象程度低&lt;&#x2F;li&gt;
&lt;li&gt;职责不明确&lt;&#x2F;li&gt;
&lt;li&gt;喜欢走捷径&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;好的架构能对 2 和 3 有一定的作用，对于第 1 点还是要看程序员的能力和经验。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chou-xiang-cheng-du-di&quot;&gt;抽象程度低&lt;&#x2F;h4&gt;
&lt;p&gt;这样的代码往往是命令式编程产生的，也就是像 CPU 那样的思考方式，把产品经理的需求直观地翻译成代码，而不对其中的共性、本质进行抽离和抽象，时间一长就容易看不懂其中的逻辑，需求一变就要改核心代码。&lt;&#x2F;p&gt;
&lt;p&gt;比如下面这段代码，不知道具体要完成什么任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcs43v88j20nk0damzy.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze-bu-ming-que&quot;&gt;职责不明确&lt;&#x2F;h4&gt;
&lt;p&gt;这也是产生「一大坨代码」的原因之一，就像 MVC 模式里，没有说明用户的操作应该在哪里处理，业务逻辑放在什么地方，这样就容易走捷径，怎么方便怎么来，而越是方便到后来就越容易出问题。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xi-huan-zou-jie-jing&quot;&gt;喜欢走捷径&lt;&#x2F;h4&gt;
&lt;p&gt;这是我们的天性，毕竟能够更快更方便地达到目标，为什么不做呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如我们都知道「通知」用起来很方便，所有涉及到单向数据传递的地方都可以使用，比如 Cell 通过通知向 VC 传递点击事件信息、Model 通过通知向 VC 传递数据信息、VC 之间通过通知进行解耦等等。&lt;&#x2F;p&gt;
&lt;p&gt;又比如可以很方便地在 VC 存储状态信息，慢慢地 VC 里这些状态变量就多了起来，到后来要维护这些变量就变得非常困难，出了问题也不好排查。&lt;&#x2F;p&gt;
&lt;p&gt;Clojure 的作者 Rich Hickey 有一个非常著名的 &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt; 分享&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple is often erroneously mistaken for easy. &amp;quot;Easy&amp;quot; means &amp;quot;to be at hand&amp;quot;, &amp;quot;to be approachable&amp;quot;. &amp;quot;Simple&amp;quot; is the opposite of &amp;quot;complex&amp;quot; which means &amp;quot;being intertwined&amp;quot;, &amp;quot;being tied together&amp;quot;. Simple != easy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Simple 是我们所追求的，而 Easy 往往会让事情往反方向发展。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-fu-gai-da-duo-shu-chang-jing&quot;&gt;好的架构能够覆盖大多数场景&lt;&#x2F;h3&gt;
&lt;p&gt;产品经理：老板说要做一个插座，具体怎么实现我不管，下周一就要。拿到这个需求之后，你觉得很简单，完美符合需求，就像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctgc56dj206u06ujrp.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可是好景不长，老板新买了一个电脑，只支持两相的插座，而且现在就要，作为工程师，你不能被这么简单朴实的需求难倒，于是稍微动了下脑筋，就出了一个解决方案：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctvnyggj206c065dhe.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然丑陋，但是可以工作。但我们的目标不只是可以工作（紧急情况除外），更要优雅地工作。&lt;&#x2F;p&gt;
&lt;p&gt;举一个现实的例子，比如页面间支持通过 Router 进行跳转，但有一天发现有页面间通信的需求，然后就会出来一些 trick 的解决方案，比如发通知或者给 Router 加一个 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt; 的方法，本质上跟上图的解决方案没什么区别。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-ti-sheng-kai-fa-xiao-lu-fang-bian-ding-wei-wen-ti&quot;&gt;好的架构能够提升开发效率，方便定位问题&lt;&#x2F;h3&gt;
&lt;p&gt;好的架构能够支持多人并行开发、一定程度的代码复用、单元测试，出了问题能比较方便地找到原因。这几点是架构要解决的主要问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dang-qian-de-zhuang-tai&quot;&gt;当前的状态&lt;&#x2F;h2&gt;
&lt;p&gt;目前主流的主要有 MVC 和 MVVM，VIPER 用的会少一些，它们之间的优劣对比这里就不展开了，可以查看这篇文章来了解：&lt;a href=&quot;https:&#x2F;&#x2F;blog.coding.net&#x2F;blog&#x2F;ios-architecture-patterns&quot;&gt;iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译) - Coding 博客&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单总结下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MVC 模式过于简单，定的标准过于粗放， 容易滋生捷径。&lt;&#x2F;li&gt;
&lt;li&gt;MVVM 会好很多，但场景的覆盖还不够全，比如缺少页面间跳转／通信、数据获取等。&lt;&#x2F;li&gt;
&lt;li&gt;VIPER 更加细致，但有点臃肿。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-define-right&quot;&gt;How to Define “Right”&lt;&#x2F;h2&gt;
&lt;p&gt;每种架构都有自己的特点，如果要定义「Right」的话，至少要符合一些标准，以下是我整理的觉得比较重要的几条：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;尽量简单&lt;&#x2F;li&gt;
&lt;li&gt;结构清晰&lt;&#x2F;li&gt;
&lt;li&gt;职责明确&lt;&#x2F;li&gt;
&lt;li&gt;符合 GUI 编程的特点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jin-liang-jian-dan&quot;&gt;尽量简单&lt;&#x2F;h3&gt;
&lt;p&gt;简单的事物容易理解，也比较容易接受，用爱因斯坦的话来说「尽量简单，但不要过于简单」。VIPER 其实已经挺完善的了，但就是有点复杂，可以看&lt;a href=&quot;https:&#x2F;&#x2F;www.objc.io&#x2F;issues&#x2F;13-architecture&#x2F;viper&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-gou-qing-xi&quot;&gt;结构清晰&lt;&#x2F;h3&gt;
&lt;p&gt;清晰的结构让外人也能很快地知道每个目录是做什么的，里面的文件起着怎样的作用，自己维护起来也方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-ze-ming-que&quot;&gt;职责明确&lt;&#x2F;h3&gt;
&lt;p&gt;也就是 &lt;code&gt;Separation of Concern&lt;&#x2F;code&gt; ，每个单元只需要关心自己的事情，跟外部尽量解耦，这样无论是对代码复用和测试都会很有帮助。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-he-gui-bian-cheng-de-te-dian&quot;&gt;符合 GUI 编程的特点&lt;&#x2F;h3&gt;
&lt;p&gt;GUI 编程和其他的非界面编程还是有差异的，对 GUI 编程的特点进行合适地抽象，并在此基础上形成的架构才更有「对」的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;我比较认同 &lt;code&gt;view = render(state) + handle(event)&lt;&#x2F;code&gt; 这个定义，view 本身只做两件事，给 state 包一层漂亮的外衣，同时对用户的操作做出响应。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inspiring&quot;&gt;Inspiring&lt;&#x2F;h2&gt;
&lt;p&gt;差不多心里有谱了，现在来看看相关领域的架构大概是怎样的，找点启发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;android-architecture&quot;&gt;Android Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;Android 最近出了一套官方推荐的&lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;index.html&quot;&gt;架构&lt;&#x2F;a&gt;，挺细致的，主要的流程如下图所示&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;images&#x2F;final-architecture.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大意就是 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 通过调用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 从 &lt;code&gt;Model&lt;&#x2F;code&gt; 或 &lt;code&gt;Remote&lt;&#x2F;code&gt; 中获取数据，然后放到内置的 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 里，而 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 在 &lt;code&gt;Activity&lt;&#x2F;code&gt; 初始化时即被绑定，因此当 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 变化时，可以马上反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;当用户操作界面时，&lt;code&gt;Activity&lt;&#x2F;code&gt; 会捕获到这些事件，然后调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法，这些方法最终会导致 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 发生改变，再次反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;整体也是 MVVM 的模式，但也有自己的特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 来做单向绑定。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 来统一数据的交互。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;Room&lt;&#x2F;code&gt; 作为持久层。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 供使用。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;LifeCycle&lt;&#x2F;code&gt; 来简化跟生命周期相关的对象的操作，避免内存泄漏。（比如 ViewModel）&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Dagger2&lt;&#x2F;code&gt; 这个依赖注入工具来避免依赖。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;elm-architecture&quot;&gt;Elm Architecture&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Elm is a functional language that compiles to JavaScript. It competes with projects like React as a tool for creating websites and web apps. Elm has a very strong emphasis on simplicity, ease-of-use, and quality tooling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Elm 是一个主打函数式编程，同时通过强大的编译器来尽量确保没有 runtime error 的编程语言，著名的 Redux 就是受它启发。来感受下它的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Html&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html.Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;beginnerProgram &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type Msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;Decrement
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;msg model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;toString model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;+&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 4 块，&lt;code&gt;model&lt;&#x2F;code&gt; , &lt;code&gt;view&lt;&#x2F;code&gt; , &lt;code&gt;update&lt;&#x2F;code&gt; , &lt;code&gt;message&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;view 展示 model 数据，同时将用户的操作作为 message 抛出。&lt;&#x2F;li&gt;
&lt;li&gt;model 包含了页面所需的所有信息。&lt;&#x2F;li&gt;
&lt;li&gt;当 message 被抛出时，会自动进入到 update 方法，update 返回的新 model 自动进入到 view 里被展示。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcussf1ij20e00983yw.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟其他的前端框架不同，Elm 不喜欢 parent-child communication, 也不提倡 components，作为函数式编程语言，它在乎的就是创建 function，通过 &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;reuse&#x2F;&quot;&gt;helper function&lt;&#x2F;a&gt; 来达到类似的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vue-architecture&quot;&gt;Vue Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcv8rgczj20io09wq3l.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Vue 也是采用的 MVVM 模式，把数据绑定在内部处理了，对外部来说只要在 &lt;code&gt;data&lt;&#x2F;code&gt; 里声明特定的 key，在 &lt;code&gt;view&lt;&#x2F;code&gt; 里就可以直接使用，并且实时响应。对于 &lt;code&gt;view&lt;&#x2F;code&gt; 的事件，也会映射到 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法。&lt;&#x2F;p&gt;
&lt;p&gt;Vue 的 &lt;code&gt;Router&lt;&#x2F;code&gt; 是把 path 映射到 component 上，看着也比较清晰。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;user&#x2F;:id&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-right-way-imo&quot;&gt;The Right Way (IMO)&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcvlcjgyj20dw0xg76t.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;目录结构需要能够让不同职责的文件找到自己的归属，同时尽量清晰。这个是我目前觉得还不错的分类&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;External&lt;&#x2F;code&gt; ：一些第三方的 framework。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Extensions&lt;&#x2F;code&gt; : 针对当前 App 做的一些针对性扩展。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;&#x2F;code&gt; : 比较重要的基础组件，在前期就要管控起来。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Models&lt;&#x2F;code&gt; : 对应服务端的 Objects。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Views&lt;&#x2F;code&gt; : 页面。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Shared&lt;&#x2F;code&gt; : 会在 App 内部被公用的部分，方便统一管控。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Utilities&lt;&#x2F;code&gt; : 一些帮助类。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxzpz4yj218m0mw0vs.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本质上跟 MVVM 差不多，只是多补充了些细节。之前也有考虑过采用 ReSwift + RxSwift 的方式，也就是 Redux，后来写下来发现还是有点复杂：比如下拉刷新的 3 个 state （ loading &#x2F; loaded &#x2F; failed），action 要定义（毕竟获取数据的逻辑写在 Action 中），state 中也要定义（视图最终关心的是 state 的变化）；没有很方便的 diff 支持等。于是就回归到了 MVVM 模式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;p&gt;ViewModel 主要有 3 个职责：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Repository 获取&#x2F;修改数据。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 供 View 使用。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Functions&lt;&#x2F;code&gt; 供 View 调用，通常会导致 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 的改变。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这块也算是常规手法，需要注意的一点是 Repository 的初始化，如果要方便测试的话，最好提供注入点（比如初始化时注入或提供 set 方法注入）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;repository&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 的职责就是跟数据打交道，获取远程／本地数据，并将其转换成 Model 返回给 ViewModel。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ye-mian-jian-tiao-zhuan-he-tong-xin&quot;&gt;页面间跳转和通信&lt;&#x2F;h4&gt;
&lt;p&gt;使用 Router 即可，如果是内部的 VC 之间跳转，还可以携带 model 信息。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yong-de-xiao-mo-kuai-components&quot;&gt;通用的小模块( Components )&lt;&#x2F;h4&gt;
&lt;p&gt;我发现前端开发里，&lt;code&gt;Components&lt;&#x2F;code&gt; 用得还蛮多的，客户端开发倒不那么常见。这些小模块其实就是一些可在多个页面复用的业务相关的视图（Widget），可能带有业务逻辑，方便复用，比如「赞」按钮。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-wu-diao-yong&quot;&gt;服务调用&lt;&#x2F;h4&gt;
&lt;p&gt;比如在详情页要使用购物车的「加购」功能，通常做法是采用 &lt;code&gt;Register Procotol&lt;&#x2F;code&gt; 方式，维护一个 Protocol 和 Class 的注册表，并且在 App 启动时进行注册。我发现使用 Swift 的 POP 就不需要这么麻烦了，具体怎么做，我们后面讲。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;这个 Demo 演示了知乎日报的列表和详情页：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcx5hukwj20lt0ijq3x.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来蛮简单的，不过事实可能并非如此，我们来慢慢捋一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chu-shi-ye&quot;&gt;初始页&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxfxauej20af0ijwek.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;刚进来时，会处于原始的 loading 状态，这个状态不同于下拉刷新，可能是一个萌萌的 loading 图。&lt;&#x2F;p&gt;
&lt;p&gt;首先这个页面属于 &lt;code&gt;NewsFeed&lt;&#x2F;code&gt; 页，因此在该目录下新建 3 个文件&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;|- NewsFeedViewModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedRepository.swift
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;本着 view 只是展示 state 的原则，我们首先要处理的就是 state，那么怎么处理？ 这个 Event 是从 View 那边触发的，触发之后，对于 View 来说只能求助于 ViewModel，于是 VM 就提供了一个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 方法。&lt;&#x2F;p&gt;
&lt;p&gt;那这个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 里该做些什么呢？其实也就是根据 repository 的不同结果，设置不同的 state，然后 view 来响应这些 state。同时考虑到之后的「下拉刷新」和「加载更多」，顺便分离出一个通用的 &lt;code&gt;loadData:&lt;&#x2F;code&gt; 方法&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-1&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; todo
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 应该是怎样的呢？在 OC 时代，只要简单的暴露 readonly 的 property，外部无论是 KVO 还是 RAC 都能很方便地进行绑定，到了 swift 时代，如果要做 KVO 就要继承 &lt;code&gt;NSObject&lt;&#x2F;code&gt;，还要加一个 &lt;code&gt;@dynamic&lt;&#x2F;code&gt; 前缀，不优雅。比较理想的状态是使用 RxSwift 的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 作为属性，外部只要 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 就行了。不过在内部如何给这个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 塞数据又有点小问题。最终决定使用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 作为暴露的属性，它的好处是内部不需要再新建一个变量，直接设置这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的 &lt;code&gt;value&lt;&#x2F;code&gt; 即可，弊端就是对于使用方需要先通过 &lt;code&gt;asObservable()&lt;&#x2F;code&gt; 转一下再进行 subscribe，并且只要愿意，也可以设置 &lt;code&gt;value&lt;&#x2F;code&gt; 值，存在误操作的风险。在这里我们先简单起见用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 来做。&lt;&#x2F;p&gt;
&lt;p&gt;接下来的问题就是这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 里应该放什么？肯定要放一些当前的 loading 状态，比如 loaded，failed，loading 这些，那么要不要带上 data？如果不一起带上 data，那么状态的改变和数据的改变就不是一个原子操作，有可能会带来一些异常（比如 view 发现 loading 状态变为 loaded，自动去取最新的 data，但此时 data 可能还没有改变）。因此，我把它们都放到了一起，首先来看一下 &lt;code&gt;ResultModel&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;model&quot;&gt;Model&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个通用的数据结构&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ResultModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; initial, refresh, more
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingStatus: Equatable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loading
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loaded
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; failure(Error)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;==(lhs: LoadingStatus, rhs: LoadingStatus) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; (lhs, rhs) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingStatus: LoadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingType: LoadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;initial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; news:Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span&gt; Variable(ResultModel())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2 如果当前处于 loading 状态，就不继续处理了
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3 设置新的 loading 类型和状态
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loading
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loadingType
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4 接下来就是发网络请求，根据不同的请求结果设置 state
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里使用 &lt;code&gt;static&lt;&#x2F;code&gt; 主要是出于方便。&lt;&#x2F;li&gt;
&lt;li&gt;这里纠结了一段时间，之前是新建了 3 个 loading status（initial, refresh, loadmore），然后每个 status 再细分为 3 种状态(loading, loaded, error)，后来发现这样的话，「当前是哪个 loading status，该 status 目前处于什么状态」判断起来会比较麻烦。于是就按照现在这样进行了拆分。&lt;&#x2F;li&gt;
&lt;li&gt;在这里对状态进行更改之后，UI 那边可以自动收到更新。&lt;&#x2F;li&gt;
&lt;li&gt;这里会调用 Repository 来获取数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;repository-1&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 这块由于是异步交互，因此直接就上 RxSwift 了，返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; ，VM 作为消费方来订阅。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RxSwift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedRepository {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;news(_ offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any]?&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create({ observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;characters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;before&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;latest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Resource(path: path, method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;GET, requestBody: nil, headers: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;], parse: decodeJSON)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个用的是 chris 开源的简单的 API 请求封装 http:&#x2F;&#x2F;chris.eidhof.nl&#x2F;posts&#x2F;tiny-networking-in-swift.html
&lt;&#x2F;span&gt;&lt;span&gt;            apiRequest(baseURL: URL(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;news-at.zhihu.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;, resource: resource, failure: { (reason, result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(reason))
&lt;&#x2F;span&gt;&lt;span&gt;            }, success: { result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在这里直接返回解析后的 Model，这样 VM 那边就不用处理了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-diao-yong-repository&quot;&gt;ViewModel 调用 Repository&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 json 转换为 model
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsedResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_parseResult(result: result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 设置对应的 value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;more {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; (parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? [])
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? []
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loaded
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;date ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 统一设置 value，对外部 subscriber 来说就是原子操作
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }, onError: { (error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;failure(error)
&lt;&#x2F;span&gt;&lt;span&gt;    }, onCompleted: {
&lt;&#x2F;span&gt;&lt;span&gt;    }) {
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里你会注意到有一个 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; ，这个主要是提供灵活性，避免暴力的 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; ，比如获取到了更多的数据之后，可以只 reload 新的数据。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController: UITableViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;        viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoading()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stopAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loaded {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这里调用 Diff 这个 framework 提供的 extension
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;animateRowChanges(oldData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems, newData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;initial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;startAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;「正在加载」和「已经加载」的场景已经处理完了，「加载失败」的处理也类似，比如失败之后显示一个 reload button，点击 reload button 之后，再调用一下 &lt;code&gt;viewModel.initialLoading()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tableview&quot;&gt;TableView&lt;&#x2F;h4&gt;
&lt;p&gt;接下来就来看看如何处理 TableView 的数据展示，其实就是消费 VM 的 property&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里最基本的首页数据展示就基本完成了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jia-zai-geng-duo&quot;&gt;加载更多&lt;&#x2F;h3&gt;
&lt;p&gt;之前一直在纠结这块到底该怎么做才比较合适，如果直接把 newItems append 到原有的 items 列表，形成新的列表，UI 那边拿到之后就只能 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; 了，最好能让 UI 那边知道新的和旧的之间发生了哪些变化，于是就找到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wokalski&#x2F;Diff.swift&quot;&gt;Diff&lt;&#x2F;a&gt; 这个 framework，它能够定位出两个 collection 之间的差异，但前提是 collection item 要实现 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议。于是就有了 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; 的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-huan-gong-neng&quot;&gt;喜欢功能&lt;&#x2F;h3&gt;
&lt;p&gt;喜欢功能本质上是修改 NewsItem 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，然后让 UI 可以感知到这个变化。这里问题就来了：如何对列表中的一个 &lt;code&gt;struct&lt;&#x2F;code&gt; 进行调整？我们知道 &lt;code&gt;struct&lt;&#x2F;code&gt; 是值拷贝的，只要发生赋值行为，拿到的就不再是原先的那个 struct 了（比如把 items 通过参数传递，要修改的话就要进行拷贝，除非设置为 &lt;code&gt;inout&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;这个问题本质上是如何操作 Immutable Objects，然后就想到了 &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;immutable-js&#x2F;&quot;&gt;Immutable.js&lt;&#x2F;a&gt;，它也提供了一些修改 List 的方法，只不过都是返回一个新的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;immutable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;])]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setIn&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;999&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; List [ 0, 1, 2, List [ 999, 4 ] ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，这里简单的处理方式就是通过传进来的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 找到它在 list 中的 index（&lt;code&gt;newsItem&lt;&#x2F;code&gt; 已经实现了 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议），然后把修改过 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性的新的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 放到 index 位置来达到替换的效果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;toggleFav(_ newsItem: NewsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; newsIndex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;index(of: newsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex]
&lt;&#x2F;span&gt;&lt;span&gt;            _newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span&gt;_newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _newsItem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;components&quot;&gt;Components&lt;&#x2F;h4&gt;
&lt;p&gt;由于新闻列表和喜欢的新闻列表表现上一致，那么就可以进行一些复用，比如可以把 Cell 作为 Component。&lt;&#x2F;p&gt;
&lt;p&gt;那对于一个 Component 来说，需要具备哪些特性呢？这个并没有什么约定，本质上就是一个或几个函数，外部调用后会返回一个 view，或者提供一些 block 回调，仅此而已。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;truth-and-computed-properties&quot;&gt;Truth and Computed Properties&lt;&#x2F;h4&gt;
&lt;p&gt;这里的 &lt;code&gt;Truth&lt;&#x2F;code&gt; 是指最源头的数据，比如一个数组，&lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 是指对源头数据进行消费可以得到的结果，比如数组的长度，或数组中的正数等。&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;Truth&lt;&#x2F;code&gt; 就是 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 列表，而喜欢的 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 就是 &lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 。因此只要 newsItems 发生变化，就重新计算喜欢的 NewsItems。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;filter { (item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xi-huan-gong-neng-de-view&quot;&gt;喜欢功能的 View&lt;&#x2F;h4&gt;
&lt;p&gt;主要就是两件事：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;点击 Fav 按钮时，调用 VM 的 &lt;code&gt;toggleFav&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;li&gt;当 Fav 列表更新时，刷新 TableView。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem) { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (button) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ye-mian-tiao-zhuan&quot;&gt;页面跳转&lt;&#x2F;h3&gt;
&lt;p&gt;页面间的跳转用到了 &lt;code&gt;Router&lt;&#x2F;code&gt; ，也就是 open 一个 url 就能到达特定的页面，这么做的好处是可以和外部跳转进来的情况统一处理（因为从外部跳到某个 app 只能通过 openURL）。&lt;&#x2F;p&gt;
&lt;p&gt;但在内部直接输入 URL 总觉得不优雅，而且容易出错，将来如果要修改 URL 也不方便。因此做了一个简单的 &lt;code&gt;Router&lt;&#x2F;code&gt; 来达到这个效果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UIKit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; RouterTable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;home&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; detail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;detail&#x2F;:id&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;asController() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UIViewController.Type {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;to(_ route: RouterTable, parameters: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, Any&amp;gt;?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asController()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2.1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (key, value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;                viewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;putExtra(key, value)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: 添加 shouldBePushed 调用，比如有些页面需要先登录
&lt;&#x2F;span&gt;&lt;span&gt;        DispatchQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;async {
&lt;&#x2F;span&gt;&lt;span&gt;            UINavigationController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;pushViewController(viewController, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;parseURL(_ url: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (RouterTable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;?) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: add implementation
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home, nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 3 部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;这个跟 vue-router 里定义 url 和 components 的关系一样，主要是为了方便统一管理。&lt;&#x2F;li&gt;
&lt;li&gt;这里主要是把 enum 转换为对应的 Controller，因为限制了类型，也就不会出现找不到 VC 的情况。&lt;&#x2F;li&gt;
&lt;li&gt;这个是用来应对外部跳转进来的 URL，把它解析成 &lt;code&gt;RouterTable&lt;&#x2F;code&gt;，统一逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对 2 重点说一下，这个是最简实现，真实场景会比这复杂得多，比如有些页面是 present 出来的，有些页面 push 前需要先判断是否登录等等。&lt;&#x2F;p&gt;
&lt;p&gt;注意到 &lt;code&gt;2.1&lt;&#x2F;code&gt; 的部分，这里有一个 &lt;code&gt;putExtra&lt;&#x2F;code&gt; 方法，这是新添加的一个扩展，参考了 Android 的 &lt;code&gt;Intent&lt;&#x2F;code&gt; &lt;code&gt;putExtra&lt;&#x2F;code&gt; 。实现如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any)
&lt;&#x2F;span&gt;&lt;span&gt;    func getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension UIViewController: ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private struct&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; extra: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any) {
&lt;&#x2F;span&gt;&lt;span&gt;        IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于 extension 不支持 associated properties，因此用 struct 做了个中转。这样，VC 之间的跳转如果要带上额外的参数，只要放到 extra 里即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye&quot;&gt;详情页&lt;&#x2F;h3&gt;
&lt;p&gt;详情页比较简单，只是展示一个 webview，这里比较棘手的问题是 model 数据的同步。由于详情页也可以修改 &lt;code&gt;NewsItem&lt;&#x2F;code&gt; 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，这个改变需要能够实时同步到列表页，不然就会出现状态不同步的情况。&lt;&#x2F;p&gt;
&lt;p&gt;这块的设计也想了一段时间，Pinterest 采用的是&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@Pinterest_Engineering&#x2F;immutable-models-and-data-consistency-in-our-ios-app-d10e248bfef8&quot;&gt;通知的方式&lt;&#x2F;a&gt;，并且额外开发了一个用来支持这种方式的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pinterest&#x2F;plank&quot;&gt;库&lt;&#x2F;a&gt;，不想整的这么麻烦。本质需求是：当传过去的 model 发生变化时通知我。而 RxSwift 里的 &lt;code&gt;Variable&lt;&#x2F;code&gt; 不是正好可以达到这个效果么？于是就有了基于 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的解决方案。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItemVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 详情页可能会对这个 newsItemVariable 进行调整
&lt;&#x2F;span&gt;&lt;span&gt;        newsItemVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 找到这个 item 所在的 index，并进行替换
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;update(item: item)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 带上这个 Variable 到新的 VC
&lt;&#x2F;span&gt;&lt;span&gt;        Router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail, parameters: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: newsItemVariable])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xiang-qing-ye-view-de-chu-li&quot;&gt;详情页 View 的处理&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController: UIViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        navigationItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rightBarButtonItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tap
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; viewModel.load(id)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as?&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;load(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id))
&lt;&#x2F;span&gt;&lt;span&gt;            NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsDetail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URLRequest(url: URL(string: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;shareURL)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;webView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadRequest(request)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里为通过外部 URL 进来的留一个入口。&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;code&gt;getExtra&lt;&#x2F;code&gt; 拿到 &lt;code&gt;Variable&lt;&#x2F;code&gt; 后，接下来就交给 VM 了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;handleDataChange&lt;&#x2F;code&gt; 做的事情就是响应 VM 的 properties 的变化，做一些 UI 上的调整。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;service&quot;&gt;Service&lt;&#x2F;h3&gt;
&lt;p&gt;之前说过使用 Swift 提供 Service 会比较方便，都不需要在 App 启动时进行注册，利用自带的 Protocol Extension 就能达到效果。这个例子中没有用到，就举个其他的例子吧，以购物车为例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放在 Services 目录下的 Protocols.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 具体的实现可以放到对应的页面
&lt;&#x2F;span&gt;&lt;span&gt;extension Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; business logic
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于想要使用这个功能的开发来说，只要看 &lt;code&gt;Services&#x2F;Protocols.swift&lt;&#x2F;code&gt; 就行了。跟 Objective-C 不同，extension 里如果有两个相同的方法，编译器会直接报错，这样就避免了运行期可能出现多个实现的问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;local-reasoning&quot;&gt;Local Reasoning&lt;&#x2F;h3&gt;
&lt;p&gt;Local Reasoning 的意思是对于数据的改动都发生在某一个特定的单元。这也是使用 Value Type 的好处，因为如果使用 Reference Type，只要把其中的一个 Reference 给了出去，就不知道什么时间什么场景下数据会在外部被改变，就像给了你一张银行卡，今天看还剩 1 万，可能明天再去看就只剩 1 千了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 VM 后，所有对数据的改动都发生在 VM 里面，同时对数据的消费也尽量在一个地方，方便维护。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;以上是我自己对「Right Architecture」的一些理解和实践，实际过程中肯定还有很多细节要调整，如果你有什么想法欢迎交流～&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Demo 在这里：https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;ZhihuDailyDemo&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>移动端开发路在何方 - 寻找不变量</title>
            <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mobile-dev-way-out/</link>
            <guid>https://limboy.me/posts/mobile-dev-way-out/</guid>
            <description>&lt;p&gt;最近一段时间，移动端开发好像不像以前那么吃香了，招的人少了，要求更高了，给人一种感觉：这个行业是不是不行了？这个行业没出问题，只是更加理性了。&lt;&#x2F;p&gt;
&lt;p&gt;刚开始的几年，移动端开发还算是新兴领域，会的人不多，供小于求。接下来几年，随着移动端的爆发，需求和人才市场开始同步增长，只是供给侧增长得更快（尤其是经过各类培训机构的「孵化」），一段时间之后，供就大于求了，并且差量越拉越大。原因有很多，比如普遍看好移动端、开发门槛降低、培训机构助力等等。这种不平衡的状态不会维持很久，慢慢地会回归到供需基本平衡的稳定期。就像技术成熟度的曲线一样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1ffi10q2tu3j20m80ftq6r.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一门技术刚兴起时，大家普遍看好，各种文章铺天盖地，造成一种过度繁荣的现象，达到顶峰。然后技术的发展与预期产生偏差，人们的期望值慢慢地降了下来。接下来技术继续演化，进入了稳定期。&lt;&#x2F;p&gt;
&lt;p&gt;我们疑惑、焦虑，主要原因还是看不清局势，不确定未来会往哪个方向发展。对个人如此，对公司也一样，在 2012 年的 re:invent 大会上，贝佐斯阐述了他的战略思维：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我常被问一个问题：“在接下来的 10 年里，会有什么样的变化？”...但我很少被问到“在接下来的 10 年里，什么是不变的？”。我认为第二个问题比第一个问题更加重要，因为你需要将你的战略建立在不变的事物上。&lt;&#x2F;p&gt;
&lt;p&gt;在亚马逊的零售业务中，我们知道消费者会想要更低价格的产品，10 年后仍然如此。他们想要更快的物流，更多的选择。很难想像，会有顾客在 10 年后跑来和我说：“Jeff，我喜欢亚马逊，但你们的价格能不能贵一点，或者到货时间再慢一点。”&lt;&#x2F;p&gt;
&lt;p&gt;...所以我们将精力放到这些不变的事物上，我们知道现在在上面投入的精力，会在 10 年里和 10 年后持续不断的让我们获益。当你发现了一个对的事情，甚至 10 年后依然如一，那么它就值得你将大量的精力倾注于此。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么对于移动端开发的同学来说，有哪些是近几年不会变的事情？以下是我想到的：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-neng-shou-ji-de-gao-pu-ji-lu-yi-ji-gao-shi-yong-lu&quot;&gt;智能手机的高普及率以及高使用率&lt;&#x2F;h4&gt;
&lt;p&gt;目前的普及率已经很高，虽然增长放缓，但将来只会更高，除非出现更优质的替代品，而这个几率非常低（VR 和 AR 算是补充）。因此可以选择在主流平台上进行深耕，毕竟出问题时需要找一个懂的人，而且也需要这些人来探索更多的可能性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-jue-wen-ti-de-you-zhi-app-yi-jiu-you-xi-yin-li&quot;&gt;解决问题的优质 App 依旧有吸引力&lt;&#x2F;h4&gt;
&lt;p&gt;虽然那些高频刚需的巨型 App 抢夺了用户不少注意力，用户也越来越懒得装 App 了，但装得少了并不是不装。比如 Bear App，在市面上有那么多记事类 App 存在的情况下，经过 2 年的打磨，出来后很快得到认可，并且被评为 2016 Best App 之一。所以提高自己的标准，找到痛点，组建团队打磨产品也是一条路，只不过这条路走起来不如以前那么容易了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ruan-ji-neng&quot;&gt;软技能&lt;&#x2F;h4&gt;
&lt;p&gt;工作除了专业技能，还有很大一块是软技能，比如职业化、影响力、沟通、高效工作等等。这些技能往往可以用在你的下一份工作中。我们的工作迟迟不见起色，往往是因为在软技能方面吃了亏。推荐一本程序员写的书「软技能」，专门讲这个。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xue-xi-neng-li&quot;&gt;学习能力&lt;&#x2F;h4&gt;
&lt;p&gt;这也是一项通用技能，当掌握了这项技能之后，即使跨界也能应付自如，但它得来决不容易。比如同样是玩游戏，有些人能很快找到其中的窍门并勤加练习，而有些人玩了大半年水平却依旧止步不前。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xie-zuo-neng-li&quot;&gt;写作能力&lt;&#x2F;h4&gt;
&lt;p&gt;工作中难免会跟写作打交道：写邮件、写文档、写公司博客等等，写作能力体现的不仅仅是文字，而是思考和总结能力，37Signals 在 Getting Real 里也提到了写作的重要性：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are trying to decide between a few people to fill a position, always hire the better writer. It doesn&#x27;t matter if that person is a designer, programmer, marketer, salesperson, or whatever, the writing skills will pay off. Effective, concise writing and editing leads to effective, concise code, design, emails, instant messages, and more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;she-ji-neng-li&quot;&gt;设计能力&lt;&#x2F;h4&gt;
&lt;p&gt;设计无处不在，内部的工具、代码、演讲、甚至小区门口的垃圾桶也是经过设计的。这是一种跨领域的通用能力，而且随着消费升级，人们会更加青睐经过设计的产品。有些能力不错的程序员，有时会因为设计的短板而吃亏，因为看着不优雅的东西，我们往往会怀疑它工作起来也不够优雅。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hou-duan&quot;&gt;后端&lt;&#x2F;h4&gt;
&lt;p&gt;如果去各个招聘网站上搜索，会发现后端的需求还是挺旺盛的。无论是前端、客户端、小程序都需要跟后端通信，而在这些语言中投资一门成熟或有潜力的语言，也是不错的选择。我已经接触了好几个原先只做客户端，现在 java／groovy 也写得溜溜的同学。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-duan&quot;&gt;前端&lt;&#x2F;h4&gt;
&lt;p&gt;前端的使用场景很多，从对外的 H5 页面，到内部的小工具、平台，到跨平台的页面等等，都会用到前端，这个领域也是异常活跃，因此投入时间在这上面也会有相应的回报。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-ben-gong&quot;&gt;基本功&lt;&#x2F;h4&gt;
&lt;p&gt;比如算法、数据结构、TCP／IP 协议、系统设计能力、编码能力等，如果要在这个领域继续玩下去，修炼内功绝对有好处。我之前也不明白工作中明明用不着这些，为什么还要学？等细看了之后发现还是挺有意思的，而且其中的思路内化了之后，对于工作会有启发，还有就是知道内部是怎么运行的，心里会比较有底。&lt;&#x2F;p&gt;
&lt;p&gt;上面这些事情有一个特征：时间对他们的影响不太大。用化学里的一个术语描述就是：长半衰期。我们应该多做一些长半衰期、高价值的事。&lt;&#x2F;p&gt;
&lt;p&gt;到底选择做什么，这个还得看个人的愿景，最喜欢做什么，希望达到怎样的结果。相比上面这些不变项，这个更加重要，不然一样会陷入选择恐慌。所以给自己一点压力，把「3 年后希望自己在怎样的环境下做着什么事情」尽早想清楚吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The Center of Why</title>
            <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-center-of-why/</link>
            <guid>https://limboy.me/posts/the-center-of-why/</guid>
            <description>&lt;p&gt;这是 Alan Kay 在 04 年写的一篇长文。可能有部分同学对 Alan Kay 不是很熟悉，先做一个简单介绍：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;艾伦·凯（Alan Kay）是近当代计算机革命之先驱，他有一句广为人知的名言：预测未来的最好的办法就是创造未来。&lt;&#x2F;p&gt;
&lt;p&gt;三岁就能阅读，五岁便会自学，等到上小学的时候，已经读了上百本书。到现在（77 岁），已经读了大约 20,000 本书，有一份&lt;a href=&quot;http:&#x2F;&#x2F;www.squeakland.org&#x2F;resources&#x2F;books&#x2F;readingList.jsp&quot;&gt;推荐阅读的书单&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;京都奖（号称日本的诺贝尔奖）和图灵奖获得者。Smalltalk 面向对象编程环境语言的发明人之一，也是面向对象编程思想的创始人之一，同时，他还是笔记本电脑最早的构想者和现代图形用户介面 GUI 的建筑师。也最早提出了 Dynabook（后来经过演变就变成了我们今天的笔记本电脑）的概念。当年就乔布斯就是在看到了 PARC 里的这些作品后，下定决心往 GUI 方向发力。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;老爷子对儿童教育非常重视，这也直接激发了他发明新的编程语言和图形视窗系统，希望每个孩子都能有一个笔记本大小的电脑，在软件里建造和模拟他们自己的真实世界模型，并让他们实验、修补、评价和观察这些模型的行为特征。不过用他自己的话来说，他对儿童教育并没有特别大的热情，对于培养优秀的成年人兴趣更大。&lt;&#x2F;p&gt;
&lt;p&gt;现在 Alan Kay 会参与到 YC 新创建的 HARC (Human Advancement Research Community) 项目中，这个项目的使命是通过发明新技术，传播知识和想法，让人们可以看得更远，理解地更加深刻。跟当年的 PARC 有点像，后者由于辉煌时期的原班人马已基本走光，虽然现在独立了出来，也很难再现当年的风采了。&lt;&#x2F;p&gt;
&lt;p&gt;忘了怎么接触到这篇文章了，看完收获不少，不敢独享。这里做了精简的翻译，感兴趣的同学还是直接看英文原文吧，内容会丰富不少。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;geng-duo-de-shu&quot;&gt;更多的书&lt;&#x2F;h3&gt;
&lt;p&gt;在上学之前就读了很多书，发现对同一个观念往往会有很多不同的解说。「there was more than one point of view」，所以不要急着接受某个观点。&lt;&#x2F;p&gt;
&lt;p&gt;然后上学后，发现学校里每个领域只有一本书，也就是老师手里的那本权威书。结果由于准备工作做得过于充分，经常会提各种问题，比如「我在其他书上看到过不是这样的，它也可以是这样···」，自然就被打入冷宫，他倒也不埋怨，反正要学什么看书就行了，不太需要老师。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;9-sui-yu-dao-liao-di-yi-ge-hao-lao-shi&quot;&gt;9 岁遇到了第一个好老师&lt;&#x2F;h3&gt;
&lt;p&gt;在这个老师（看起来应该是个物理老师）的课堂里的教室后面放着一张桌子，上面放着各种工具、线、电池、书，她也不说这些是拿来做啥的。好奇的 Kay 拿来了干电池、电线、钉子、回形针做起了电磁感应实验。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;1.png&quot;
        width=&quot;406&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在成功地吸起回形针后，Kay 同学很兴奋地叫了出来，然后惊讶地发现老师居然没有骂他，而是问他怎么做到的？书里还提到了什么？当他表示下一个要做电报机时，询问了有没有感兴趣的同学一起来做，然后下午找一段时间一起来搞（20%的 Side Project 时间）。&lt;&#x2F;p&gt;
&lt;p&gt;后来有一半以上的同学都参与到了项目中，而且越来越早地来到学校，这样就可以花更多的时间做项目。&lt;&#x2F;p&gt;
&lt;p&gt;也是这份经历让 Kay 意识到应该如何进行基础教育：让孩子们参与到感兴趣的项目中，同时融合数学、科学、艺术在其中。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;They need to go through many of the same processes of discovery in order to make new ideas their own.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-center-of-why-is-art&quot;&gt;The Center of “Why?” is Art&lt;&#x2F;h3&gt;
&lt;p&gt;我们创作的所有事物都可以被称作艺术。科学和技术也都是艺术，只是形式不一样。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;2.png&quot;
        width=&quot;828&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「科学的艺术」就是找到不被愚弄的方式，让不可见变得可见，创建最能反映实际情况的理论。&lt;&#x2F;p&gt;
&lt;p&gt;科学不容易被直观地表现，因为只能借助数学、物理或者计算机等非大自然原产物来揭示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ke-xue-jie-yu-bei-hou-de-zhen-xiang-he-miao-shu-bei-hou-de-zhen-xiang-zhi-jian&quot;&gt;科学介于「背后的真相」和「描述背后的真相」之间&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;3.jpg&quot;
        width=&quot;862&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这两幅地图都有细节，且精心绘制。不同的是右边是真实的地图（印度），而左边是指环王里的地图。很难通过肉眼来区分哪个是现实中的地图，需要借助额外的手段，也就是「科学的艺术」。&lt;&#x2F;p&gt;
&lt;p&gt;以重力为例，它就像一只小兔子，在幕布上的投影就是我们在地球上的感知和量测。我们可以构建一个模型，同样能形成兔子投影，以牛顿的万有引力理论为例，他通过数学来阐述模型，但如果仔细观察会发现真实的兔子投影尾部是一个小圆球，而牛顿的模型尾部是粗长手臂的投影。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;4.png&quot;
        width=&quot;1252&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个「手臂投影」需要花一点时间去发现，比如水星的公转轨道不符合牛顿定律，所以牛顿的万有引力模型并不完美。（为了把小兔子尾部的小圆球补上，爱因斯坦采用了跟牛顿截然不同的方式）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;5.png&quot;
        width=&quot;341&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在最近的几百年里，通过科学，我们发现直觉往往是不准的：我们在不停地愚弄自己。所以尽量避免通过感觉来做判断和行动，多思考一下，不然很容易导致错误的结果。&lt;&#x2F;p&gt;
&lt;p&gt;科学让不可见变得更加可见，而我们对于自己却往往视而不见。很多人生活在自己的故事和社会里，对于自身、环境甚至地球都很危险。所以教育的职责除了教授知识、技能之外，更重要的是传授「让不可见变得可见」的能力。&lt;&#x2F;p&gt;
&lt;p&gt;只有意识到自己看不清，看不全才会学着去发现。教育就是帮助人们认识到自己视野的局限性，同时教会他们如何看得更清楚一些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-xue-zhi-mei&quot;&gt;数学之美&lt;&#x2F;h3&gt;
&lt;p&gt;数学概念往往很难向一个普通人解释清楚，但有一些却可以阐释得很明了。比如 2500 年前对勾股定理的证明（想要了解更多的可以参考&lt;a href=&quot;http:&#x2F;&#x2F;math.stackexchange.com&#x2F;questions&#x2F;675522&#x2F;whats-the-intuition-behind-pythagoras-theorem&quot;&gt;这个帖子&lt;&#x2F;a&gt; ）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;6.png&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;证明过程直观且简单，很美。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-suan-zhi-mei&quot;&gt;计算之美&lt;&#x2F;h3&gt;
&lt;p&gt;计算难免会涉及到数学，在看到 John McCarthy 的 LISP 语言后，Kay 觉得这门强大又优雅的语言充满了魅力，看待事物的角度奇特又深刻，就像麦克斯韦的电磁方程。对他之后的想法产生了很多影响。&lt;&#x2F;p&gt;
&lt;p&gt;在大学时看到了图形编程系统（Sketchpad），愈发觉得计算机可以做的事情会很多且很不一样。后来又接触到了 Simula 语言，同时结合自己的数学和微生物背景（没错，他大学的专业之一是微生物学），他有了这么个想法：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我假定未来理想的计算机能够具备生物组织一样的功能，每个‘细胞’能够独立运作，也能与其他功能一起完成复杂的目标。‘细胞’能够相互重组，以解决问题或者完成功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;围绕着这个想法开始设计系统，进行各种试验，当别人问起他在干什么时，他回答：面向对象编程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;doug-engelbart-he-ta-de-jiao-hu-shi-jie&quot;&gt;Doug Engelbart 和他的交互世界&lt;&#x2F;h3&gt;
&lt;p&gt;Doug Engelbart 创建了 NLS 系统，这个系统包含了导航控制器（鼠标前身）、超文本、图形、命令行输入等，描述了一个可交互的计算机应该是怎样的。&lt;&#x2F;p&gt;
&lt;p&gt;导师介绍了 Ed Cheadle 给 Kay 认识，这位同学试图把计算变得更小，小到可以放在桌上，同时可以交互。然后两人一拍即合，开始研发 FLEX Machine，目标是个人计算机。它被构思成长这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;7.png&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当时是 1968 年，距离 Macintosh 1 发布还有 16 年。&lt;&#x2F;p&gt;
&lt;p&gt;在探索可交互计算机的用途时，遇到了 Seymour Papert 和 LOGO 语言，发现可以通过计算机向儿童更直观地阐述抽象概念，比如数学。Kay 被这个想法震撼到了，觉得这是计算机的正途。于是开始构思类似 Flex 的机器，不过面向儿童，名字叫 Dynabook。把编程语言与游戏结合来表达数学之美。所以计算机除了作为工具，还可以作为展示的平台。（可惜这个本子最终没有做出来，不过也算是笔记本的先驱了）&lt;&#x2F;p&gt;
&lt;p&gt;这就需要一门新的面向对象编程语言，为了向人证明只需半页就能将当时世界上最强大的编程语言描述清楚，两个礼拜之后，Kay 做出了 Smalltalk 的 kernel。一个月之后和同事一起研发出了可以正常工作的高级、简单又强大的面向对象编程语言。&lt;&#x2F;p&gt;
&lt;p&gt;几个月之后，Dynabook 的过渡态产物 Alto 诞生了。1975 年，已经有上千台 Alto 计算机在学校中被使用了。（第一代苹果电脑正式发行在 9 年后）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;8.png&quot;
        width=&quot;491&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之后的几年时间里，PARC 的研究人员各自钻研自己的领域，并且取得了不错的结果，对于推动计算机及互联网功不可没。（这些重要的工作主要是由 25 个科学家完成的）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hai-zi-men-neng-zuo-xie-shi-yao&quot;&gt;孩子们能做些什么？&lt;&#x2F;h3&gt;
&lt;p&gt;孩子们是天生的艺术家，如果要教育他们，要保护好他们的艺术思维，先让他们对某个想法产生兴趣。&lt;&#x2F;p&gt;
&lt;p&gt;比如可以让他们结对组成小项目组（10 人左右），设计汽车，并通过调整参数和一些简单的编程，让这辆车按自己的意愿跑起来。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-center-of-why&amp;#x2F;9.png&quot;
        width=&quot;1242&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在这个过程中可以传授类似「加速度」这样的知识点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-ni-fu-za-mo-xing&quot;&gt;模拟复杂模型&lt;&#x2F;h3&gt;
&lt;p&gt;可以通过图形化编程，让计算机来模拟复杂的系统，比如传染病或者谣言。也可以用来模拟重力或弹性。甚至对现实中的桥梁建模，通过模型来模拟各种极端场景，以此来验证桥梁的可靠性，避免完工后出现各种故障。&lt;&#x2F;p&gt;
&lt;p&gt;「要了解世界，必须构建世界」，通过计算机可以对真实世界进行建模、调整、优化、实验，可以更好地表达自己的想法，这不也是一件很 Romantic 和 Art 的事情么？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>对职业生涯感到迷茫时可以看看这本书</title>
            <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pivot/</link>
            <guid>https://limboy.me/posts/pivot/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o5wmam8j20rs15544o.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;无意中看到了蔡学镛推荐这本书，去 amazon 看了下，评分还挺高，于是就下了电子书，看下来收获还不少。&lt;&#x2F;p&gt;
&lt;p&gt;工作了一段时间之后往往会出现困惑：做的事情好像不再那么激动人心，是不是该转岗？不断涌入的小鲜肉貌似比自己有活力，是不是该跳槽？是不是该换一个方向？这些问题的折磨之处在于「选择」，选择不可避免地会失去一些东西，而我们又是那么害怕失去。慢慢地，就会感到恐慌。&lt;&#x2F;p&gt;
&lt;p&gt;介绍书的内容前，先介绍下作者：珍妮 · 布莱克（Jenny Blake），是 Google 「职业导师计划」的创始成员。在 Google 工作的五年间，她为 1000 多名员工提供了职业培训与指导，进而形成了一套「职业转型方法论」。&lt;&#x2F;p&gt;
&lt;p&gt;本书的核心内容全部浓缩在下面这张图里了：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o6e1r8yj20fq0iqgmx.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;转型分为 4 个阶段，这些阶段不是一次性的，就像上图描述的一样，是循环进行的。时间也不一定，几个月或几年都有可能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-jie-duan-da-ji-chu-plant&quot;&gt;第一阶段：打基础（Plant）&lt;&#x2F;h3&gt;
&lt;p&gt;作者用了一个很形象的比喻：篮球运动里的「转身」。首先要有一个支撑脚来作为基础，然后再做下一步动作。那这个基础是什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;想象下如果钱不是问题，你会如何支配时间？做哪些事最让你兴奋？最引以为豪的事情是什么？希望别人如何介绍你？有没有仰慕的人，他们的什么特质吸引了你？目前面临的困境是什么？希望生活中多一点什么？&lt;&#x2F;p&gt;
&lt;p&gt;这些问题可以帮助找到自己最看重的东西，比如健康、创作、成长、财务自由等。然后围绕这些关键字看看可以做什么。比如「帮助他人」可以：教学、指导、分享等。&lt;&#x2F;p&gt;
&lt;p&gt;知道了自己最在乎的，以及相关的可以做的事情，接下来就可以按照优先级排序（如果不清楚优先级，可以问一下自己：如果只能选一个会选哪个）。&lt;&#x2F;p&gt;
&lt;p&gt;最后会出来一个列表，把它放在自己每天能看到的地方（比如壁纸）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kuai-le-gong-shi&quot;&gt;快乐公式&lt;&#x2F;h4&gt;
&lt;p&gt;由于个体间的差异，能够让我们快乐的事情也不一样，所以这个公式只能自己总结。可以从微观和宏观层面上去拆分。这是一个 Demo：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o6nmuh2j21390qralz.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;作者还给了一些建议，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;避免决策疲劳。精力有限，无论大小决策都需要精力，不要纠结于那些小事（比如今天穿什么）。&lt;&#x2F;li&gt;
&lt;li&gt;锻炼身体。转型过程可能比较漫长，身体一定要撑住。&lt;&#x2F;li&gt;
&lt;li&gt;冥想。有奇效。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ni-xi-wang-1-nian-hou-de-zi-ji-shi-zen-yang-de&quot;&gt;你希望 1 年后的自己是怎样的？&lt;&#x2F;h4&gt;
&lt;p&gt;通过前一步操作，有了罗盘。接下来就该知道具体该往哪里走了。&lt;&#x2F;p&gt;
&lt;p&gt;这个 1 年后的 vision 需要具体且对自己有诱惑力。只有具体才不会偏航；有诱惑力才能克服重重阻碍。那为什么不是 5 年呢？因为变数太多，就像 07 年 iPhone 出来了，Instagram 的作者们会在 04 年决定做一款 iPhone 应用么？&lt;&#x2F;p&gt;
&lt;p&gt;这个 vision 最好有画面感，那种想想就很美好的画面。 比如：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 年后的今天，我希望自己住在伦敦，在咖啡馆准备自己的国际商务课程。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以先有一些模糊的画面，再慢慢雕刻。比如「每天早上恨不得早点起床要做的事」、「通过自己的工作对一部分人产生正面影响」。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ming-que-zi-ji-de-qiang-xiang&quot;&gt;明确自己的强项&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;小时候很喜欢什么事情？&lt;&#x2F;li&gt;
&lt;li&gt;最近因为哪些事而备受称赞？&lt;&#x2F;li&gt;
&lt;li&gt;因为做了什么而有了一定的声誉？&lt;&#x2F;li&gt;
&lt;li&gt;做哪些事让自己感觉很陶醉？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些问题就像镜子，方便看见自己的优势。这样方便知道自己目前的状态，如果要去目的地，还差哪些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-er-jie-duan-sao-miao-scan&quot;&gt;第二阶段：扫描（Scan）&lt;&#x2F;h3&gt;
&lt;p&gt;这个阶段主要是寻找到达目的地的人（导师／贵人）、技能（是否具备转型所需的技能）和机会。多与自己仰慕的人交流，听取他们的建议；做一些调查；填补技能短板；明确怎样的机会是自己最想要的；适当地加强社交圈，增加曝光度。&lt;&#x2F;p&gt;
&lt;p&gt;这个阶段多想想我能提供什么？有哪些需要被解决的问题？同时让自己处于可被发现的状态（就像蓝牙设备一样），通过写作、作品、分享扩大影响圈，这样才能让机会找到你。&lt;&#x2F;p&gt;
&lt;p&gt;在寻找项目的过程中，多想想为什么要做这个项目？想要达到什么目标？想要影响哪些人？应该做些什么才能最大化自己的价值？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fa-zhan-zi-ji-de-she-qun&quot;&gt;发展自己的社群&lt;&#x2F;h4&gt;
&lt;p&gt;这需要时间，但是值得。作者离开 Google 的时候，就是通过在 20% 的业余时间建立的良好口碑，离职后依然有人持续地来咨询。就像 KK 说的，1000 个「死忠粉」，愿意买你出售的任何东西。&lt;&#x2F;p&gt;
&lt;p&gt;作者举了个例子：Daniel Kelleghan 之前作为摄影师在 Groupon 工作，离职后在世界各地拍时尚和建筑，通过与客户合作来维持收入，同时通过 Instagram 上的高质量照片来圈粉。3 年下来积攒了 7000 多个粉丝，由于高质量的图片，被 Instagram 官方推荐，然后就迎来了 10k 的粉丝。接着酒店和服装公司就自动找上门，现在他在很多地方都可以免费吃住，一些大品牌如奥迪也主动来谈合作。&lt;&#x2F;p&gt;
&lt;p&gt;最后如果实在不知道做什么，可以考虑那些没人愿意做的事，可能会有新的灵感，同时又会产生差异化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-san-jie-duan-shi-shui-pilot&quot;&gt;第三阶段：试水（Pilot）&lt;&#x2F;h3&gt;
&lt;p&gt;这个阶段主要是验证。有想法，快速实现和测试，逐步迭代，效果不好就换一个，效果好就投入更多的时间和精力培养。&lt;&#x2F;p&gt;
&lt;p&gt;产品开发中有一个 MVP 的概念：Minimum Viable Products。一个很典型的例子就是 ProductHunt，现在几乎成了发现新优产品的首选。在最开始就是找的网上一个分享链接的服务，邀请好友一起来分享有意思的产品，然后发现有很多的订阅，才开始考虑做一个 ProductHunt 的网站。找人通过修改开源项目，用 8 天的时间搭了一个类似 Hacker News 的简易网站。&lt;&#x2F;p&gt;
&lt;p&gt;合适的试水项目需要跟第一阶段的价值（对你来说最重要的东西）、愿景（最让你兴奋的）、技能、财力、社交圈强相关。&lt;&#x2F;p&gt;
&lt;p&gt;尽可能地在工作之余抽出时间来经营自己的项目。验证过程中，多想想哪些是可行的，哪些不可行，需要做出哪些改变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-si-jie-duan-qi-dong-launch&quot;&gt;第四阶段：启动（Launch）&lt;&#x2F;h3&gt;
&lt;p&gt;如果来到了这个阶段那说明前几个阶段效果不错，这个阶段主要考虑的点是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;何时该踏出那一步。&lt;&#x2F;li&gt;
&lt;li&gt;关键的决策因素是什么？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;需要一点点勇气，同时评估失败的风险，相信自会有判断。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h3&gt;
&lt;p&gt;英文书看下来确实累，不过只要静下心来，问题倒也不大。这个模型其实跟产品的周期挺像的：先定义产品的价值和要解决的问题，然后快速出 MVP，内测、迭代，不断循环，直到质量和功能都 OK 了，正式上线。&lt;&#x2F;p&gt;
&lt;p&gt;还是挺有参考价值的，自己也会在接下来的时间中进行尝试。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>是时候学习 RxSwift 了</title>
            <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/time-to-learn-rxswift/</link>
            <guid>https://limboy.me/posts/time-to-learn-rxswift/</guid>
            <description>&lt;p&gt;相信在过去的一段时间里，对 RxSwift 多少有过接触或耳闻，或者已经积累了不少实战经验。此文主要针对那些在门口徘徊，想进又拍踩坑的同学。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-xue-xi-rxswift&quot;&gt;为什么要学习 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;当决定做一件事情时，至少要知道为什么。RxSwift 官网举了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;RxSwift&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;Why.md&quot;&gt;几个例子&lt;&#x2F;a&gt;，比如可以统一处理 &lt;code&gt;Delegate&lt;&#x2F;code&gt;, &lt;code&gt;KVO&lt;&#x2F;code&gt;, &lt;code&gt;Notification&lt;&#x2F;code&gt;，可以绑定 UI，方便网络请求的处理等等。但这些更多的是描述可以用 RxSwift 来做什么，跟为什么要使用 RxSwift 还是会有点不同。&lt;&#x2F;p&gt;
&lt;p&gt;我们先来分析下 GUI 编程的本质，我喜欢把它抽象为视图和数据的结合。其中视图负责两件事：展示和交互，展示什么由数据决定。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474678383.jpg&quot;
        width=&quot;1276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中单向数据流可以通过&lt;a href=&quot;http:&#x2F;&#x2F;limboy.me&#x2F;tech&#x2F;2016&#x2F;12&#x2F;04&#x2F;reswift-analyze.html&quot;&gt;之前介绍的 ReSwift&lt;&#x2F;a&gt; 完成。看起来好像没 RxSwift 什么事情，其实不然，RxSwift 可以在 UniDirectional Data Flow 的各个阶段都发挥作用，从而让 Data 的处理和流动更加简洁和清晰。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474032179.jpg&quot;
        width=&quot;1272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过对 RxCocoa 的各种回调进行统一处理，方便了「Interact」的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的 transform 和 composite，方便了 &lt;code&gt;Action&lt;&#x2F;code&gt; 的生成（比如使用 &lt;code&gt;throttle&lt;&#x2F;code&gt; 来压缩 &lt;code&gt;Action&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;通过对网络请求以及其他异步数据的获取进行 &lt;code&gt;Observable&lt;&#x2F;code&gt; 封装，方便了异步数据的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过 RxCocoa 的 binding，方便了数据的渲染。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以 ReSwift 规范了数据流，RxSwift 为数据的处理提供了方便，这两个类库的结合，可以产生清晰的架构和易维护的代码。&lt;&#x2F;p&gt;
&lt;p&gt;当然，前提是对它们有足够的了解，尤其是 RxSwift，也就是我们今天的主角。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-rxswift&quot;&gt;什么是 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;在 GUI 编程中，我认为比较复杂的有三个部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;非原生 UI 效果的实现（比如产品经理们经常冒出来的各种想法）。&lt;&#x2F;li&gt;
&lt;li&gt;大量状态的维护。&lt;&#x2F;li&gt;
&lt;li&gt;异步数据的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1）不在这次的讨论范畴（这里的学问也很多，比如流畅性和性能）。2) 可以通过单向数据流来解决（结合 Immutable Data）。3) 可以通过 RxSwift 来解决。那么 RxSwift 是如何处理异步数据的呢？&lt;&#x2F;p&gt;
&lt;p&gt;在说 RxSwift 之前，先来说下 Rx， &lt;a href=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;&quot;&gt;ReactiveX&lt;&#x2F;a&gt; 是一种编程模型，最初由微软开发，结合了观察者模式、迭代器模式和函数式编程的精华，来更方便地处理异步数据流。其中最重要的一个概念是 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;举个简单的例子，当别人在跟你说话时，你就是那个观察者，别人就是那个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，它有几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可能会不断地跟你说话。（&lt;code&gt;onNext:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;可能会说错话。（&lt;code&gt;onError:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;结束会说话。（&lt;code&gt;onCompleted&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;你在听到对方说的话后，也可以有几种反应：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;根据说的话，做相应的事，比如对方让你借本书给他。（&lt;code&gt;subscribe&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;把对方说的话，加工下再传达给其他人，比如对方说小张好像不太舒服，你传达给其他人时就变成了小张失恋了。（&lt;code&gt;map:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;参考其他人说的话再做处理，比如 A 说某家店很好吃，B 说某家店一般般，你需要结合两个人的意见再做定夺。（&lt;code&gt;zip:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以，从生活中也能看到 Rx 的影子。「有些事情急不得，你得等它自己熟」，异步，其实就是跟时间打交道，不同的时间，拿到的数据也会不一样。可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&quot;&gt;在线感受下&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814518766811.jpg&quot;
        width=&quot;1626&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的核心是当数据有变化时，能够立刻知晓，并且通过组合和转换后，可以即时作出响应。有点像塔防，先在路上的各个节点埋好武器，然后等着小怪兽们过来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rxswift-workflow&quot;&gt;RxSwift Workflow&lt;&#x2F;h3&gt;
&lt;p&gt;大致分为这么几个阶段：先把 Native Object 变成 Observable，再通过 Observable 内置的各种强大的转换和组合能力变成新的 Observable，最后消费新的 Observable 的数据。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814540314644.jpg&quot;
        width=&quot;1448&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;native-object-observable&quot;&gt;Native Object -&amp;gt; Observable&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;rx-extension&quot;&gt;.rx extension&lt;&#x2F;h5&gt;
&lt;p&gt;假设需要处理点击事件，正常的做法是给 Tap Gesture 添加一个 Target-Action，然后在那里实现具体的逻辑，这样的问题在于需要重新取名字，而且丢失了上下文。RxSwift (确切说是 RxCocoa) 给系统的诸多原生控件（包括像 &lt;code&gt;URLSession&lt;&#x2F;code&gt;）提供了 rx 扩展，所以点击的处理就变成了这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tapBackground &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UITapGestureRecognizer()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tapBackground&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;event
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;endEditing(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addGestureRecognizer(tapBackground)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是简洁了很多。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;observable-create&quot;&gt;Observable.create&lt;&#x2F;h5&gt;
&lt;p&gt;通过这个方法，可以将 Native 的 object 包装成 &lt;code&gt;Observable&lt;&#x2F;code&gt;，比如对网络请求的封装：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;response(_ request: URLRequest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;(Data, HTTPURLResponse)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dataTaskWithRequest(request) { (data, response, error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(data, httpResponse))
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;resume()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create {
&lt;&#x2F;span&gt;&lt;span&gt;			task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;cancel()
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;出于代码的简洁，略去了对 error 的处理，使用姿势类似&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response(aRequest)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(data)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有两个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Observerable&lt;&#x2F;code&gt; 返回的是一个 &lt;code&gt;Disposable&lt;&#x2F;code&gt;，表示「可扔掉」的，扔哪里呢，就扔到刚刚创建的袋子里，这样当袋子被回收（&lt;code&gt;dealloc&lt;&#x2F;code&gt;）时，会顺便执行一下 &lt;code&gt;Disposable.dispose()&lt;&#x2F;code&gt;，之前创建 &lt;code&gt;Disposable&lt;&#x2F;code&gt; 时申请的资源就会被一并释放掉。&lt;&#x2F;li&gt;
&lt;li&gt;如果有多个 subscriber 来 subscribe &lt;code&gt;response(aRequest)&lt;&#x2F;code&gt; 那么会创建多个请求，从代码也可以看得出来，来一个 observer 就创建一个 task，然后执行。这很有可能不是我们想要的，如何让多个 subscriber 共享一个结果，这个后面会提到。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;variable&quot;&gt;Variable()&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Variable(value)&lt;&#x2F;code&gt; 可以把 value 变成一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，不过前提是使用新的赋值方式 &lt;code&gt;aVariable.value = newValue&lt;&#x2F;code&gt;，来看个 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumberVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable(magicNumber)
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;magic number is &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;73
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 73
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;起初看到时，觉得还蛮神奇的，跟进去看了下，发现是通过 &lt;code&gt;subject&lt;&#x2F;code&gt; 来做的，大意是把 &lt;code&gt;value&lt;&#x2F;code&gt; 存到一个内部变量 &lt;code&gt;_value&lt;&#x2F;code&gt; 里，当调用 &lt;code&gt;value&lt;&#x2F;code&gt; 方法时，先更新 &lt;code&gt;_value&lt;&#x2F;code&gt; 值，然后调用内部的 &lt;code&gt;_subject.on(.next(newValue))&lt;&#x2F;code&gt; 方法告知 subscriber。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;subject&quot;&gt;Subject&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;&#x2F;code&gt; 简单来说是一个可以主动发射数据的 &lt;code&gt;Observable&lt;&#x2F;code&gt;，多了 &lt;code&gt;onNext(value)&lt;&#x2F;code&gt;, &lt;code&gt;onError(error)&lt;&#x2F;code&gt;, &#x27;onCompleted&#x27; 方法，可谓全能型选手。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐶&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐱&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;记得在 RAC 时代，subject 是一个不太推荐使用的功能，因为过于强大了，容易失控。RxSwift 里倒是没有太提及，但还是少用为佳。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;observable-new-observable&quot;&gt;Observable -&amp;gt; New Observable&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;&#x2F;code&gt; 的强大不仅在于它能实时更新 value，还在于它能被修改／过滤／组合等，这样就能随心所欲地构造自己想要的数据，还不用担心数据发生变化了却不知道的情况。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;combine&quot;&gt;Combine&lt;&#x2F;h5&gt;
&lt;p&gt;Combine 就是把多个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 组合起来使用，比如 &lt;code&gt;zip&lt;&#x2F;code&gt; (小提示：如果对这些函数不太敏感，可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&#x2F;&quot;&gt;实际操作下&lt;&#x2F;a&gt;，体会会更深些)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zip&lt;&#x2F;code&gt; 对应现实中的例子就是拉链，拉链需要两个元素这样才能拉上去，这里也一样，只有当两个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都有了新的值时，subscribe 才会被触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stringSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; intSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;zip(stringSubject, intSubject) { stringElement, intElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(stringElement) \(intElement)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅰️ 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅱️ 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果这里 &lt;code&gt;intSubject&lt;&#x2F;code&gt; 始终没有执行 &lt;code&gt;onNext&lt;&#x2F;code&gt;，那么将不会有输出，就像拉链掉了一边的链子就拉不上了。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;zip&lt;&#x2F;code&gt;，还有其他的 combine 的姿势，比如 &lt;code&gt;combineLatest&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;switchLatest&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;transform&quot;&gt;Transform&lt;&#x2F;h5&gt;
&lt;p&gt;这是最常见的操作了，对一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的数值做一些小改动，然后产出新的值，依旧是一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;of(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map { $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是大致的实现（摘自官网）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; ObservableType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;myMap&amp;lt;R&amp;gt;(transform: E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; R) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;R&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe { e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; e {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value):
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; transform(value)
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error):
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(error))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed:
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; subscription
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接受一个 transform 闭包，然后返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因为接下来使用者将会对 &lt;code&gt;myMap&lt;&#x2F;code&gt; 的结果进行 subscribe，所以需要在 create 内部 subscribe 一下，不然最开始的那个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 就是个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt;，一个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt; 是不会产生新的数据的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;filter&quot;&gt;Filter&lt;&#x2F;h5&gt;
&lt;p&gt;Filter 的作用是对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 传过来的数据进行过滤，只有符合条件的才有资格被 subscribe。写法上跟 map 差不多，就不赘述了。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;connect&quot;&gt;Connect&lt;&#x2F;h5&gt;
&lt;p&gt;这是挺有意思的一块，在之前介绍 &lt;code&gt;Observable.create&lt;&#x2F;code&gt; 时有提到过，一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被多次 subscribe 就会被多次触发，如果一个网络请求只想被触发一次，同时支持多个 subscriber，就可以使用 &lt;code&gt;publish&lt;&#x2F;code&gt; + &lt;code&gt;connect&lt;&#x2F;code&gt; 的组合。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 使用了 &lt;code&gt;publish()&lt;&#x2F;code&gt; 方法后，正常的 subscribe 就不会触发它了，除非 &lt;code&gt;connect()&lt;&#x2F;code&gt; 方法被调用。而且每次 subscribe 不会导致 &lt;code&gt;Observable&lt;&#x2F;code&gt; 重新针对 observer 处理一遍。看一下这张图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;documentation&#x2F;operators&#x2F;images&#x2F;publishConnect.c.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有两块需要注意：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之前的两次 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 并没有产生新的 value。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之后 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 的，只是等待新的 value，同时新的 value 还会分发给之前的 subscriber。&lt;&#x2F;li&gt;
&lt;li&gt;即使所有的 &lt;code&gt;subscription&lt;&#x2F;code&gt; 被 &lt;code&gt;dispose&lt;&#x2F;code&gt;, &lt;code&gt;Observable&lt;&#x2F;code&gt; 依旧处于 &lt;code&gt;hot&lt;&#x2F;code&gt; 状态，就好像还以为有人关心新的值一样。（这可能不是想要的结果）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对第 3 点，可以使用 &lt;code&gt;refcount()&lt;&#x2F;code&gt; 来代替 &lt;code&gt;connect()&lt;&#x2F;code&gt;，前者会在没有 subscriber 时自动「冷」下来，不会再产生新的值。（Demo 取自&lt;a href=&quot;http:&#x2F;&#x2F;www.tailec.com&#x2F;blog&#x2F;understanding-publish-connect-refcount-share&quot;&gt;这里&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myObservable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;interval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, scheduler: MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;publish()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;refCount() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mySubscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Disposing at 3 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    mySubscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dispose()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Subscribing again at 6 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Starting at 0 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;span&gt;Next: 2
&lt;&#x2F;span&gt;&lt;span&gt;Disposing at 3 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Subscribing again at 6 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，3 秒后 subscription dispose，此时没有任何 subscriber 还关心 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因此就重置了，所以 6 秒后又回到了初始状态（如果变成 &lt;code&gt;connect&lt;&#x2F;code&gt; 方法的话，会发现 6 秒后会输出 &lt;code&gt;Next: 6 &#x2F; Next: 7&lt;&#x2F;code&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;那如果后加入的 subscriber 想要之前的数据怎么办？可以对原始的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 设置 &lt;code&gt;replay(n)&lt;&#x2F;code&gt;，表示最多返回 n 个元素给后加入的 subscriber。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;p&gt;上面介绍的是最基本的概念。顺便提一下比较常见的几个问题：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-chu-li-scheduler&quot;&gt;如何处理 Scheduler？&lt;&#x2F;h4&gt;
&lt;p&gt;默认代码都是在当前线程中执行的，如果要手动切换线程，可以使用 &lt;code&gt;subsribeOn&lt;&#x2F;code&gt; 和 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 两种方式，一般来说后者用得会多一些，那这两者有什么区别呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 跟位置无关，也就是无论在链式调用的什么地方，&lt;code&gt;Observable&lt;&#x2F;code&gt; 和 &lt;code&gt;subscription&lt;&#x2F;code&gt; 都会受影响；而 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 则仅对之后的调用产生影响，看个 Demo：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; observable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { (observer: AnyObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Disposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;observable thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onCompleted()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;observable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map1 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(ConcurrentDispatchQueueScheduler(qos: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;userInteractive)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map2 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;subscribe thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;observeOn&lt;&#x2F;code&gt;，那么输出如下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 observable thread 和 map1 thread 依旧保持当前线程，但 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 之后就变成了另一个线程。&lt;&#x2F;p&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt;，那么会输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到全都变成了 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 指定的 Queue。所以 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 的感染力很强，连 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都能影响到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cold-observable-he-hot-observable&quot;&gt;Cold Observable 和 Hot Observable&lt;&#x2F;h4&gt;
&lt;p&gt;Cold 相当于 InActive，就像西部世界里，未被激活的机器人一样；Hot 就是处于工作状态的机器人。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;subscription-wei-shi-yao-yao-dispose&quot;&gt;Subscription 为什么要 Dispose？&lt;&#x2F;h4&gt;
&lt;p&gt;因为有了 &lt;code&gt;Subscriber&lt;&#x2F;code&gt; 所以 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被激活，然后内部就会使用各种变量来保存资源，如果不 &lt;code&gt;dispose&lt;&#x2F;code&gt; 的话，这些资源就会一直被 keep，很容易造成内存泄漏。&lt;&#x2F;p&gt;
&lt;p&gt;同时手动 dispose 又嫌麻烦，所以就有了 &lt;code&gt;DisposeBag&lt;&#x2F;code&gt;，当这个 Bag 被回收时，Bag 里面的 subscription 会自动被 dispose，相当于从 MRC 变成了 ARC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;RxSwift 如果概念上整理清楚了，会发现其实并不难，多从 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的角度去思考问题，多想着转换和组合，慢慢就会从命令式编程转到声明式编程，对于抽象能力和代码的可读性都会有提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>「无侵入页面加载完成检测」的一些思路</title>
            <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/page-open-detect/</link>
            <guid>https://limboy.me/posts/page-open-detect/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;在诸多的性能指标里，「页面加载完成耗时」是非常重要的一项，尤其是重点页面，如详情页，1 秒内打开和 3 秒内打开差别是很大的，直接影响 GMV。&lt;&#x2F;p&gt;
&lt;p&gt;再来说一下「页面加载完成」的定义，不是页面 layout 完成，不是请求完成，而是图片和文字都已被渲染完成。比较常见的做法是在页面的 &lt;code&gt;ViewDidAppear&lt;&#x2F;code&gt; 和请求完成且数据被转换成 Model 之后分别打点，前者表示页面出现的时间，后者表示数据获取的时间，基本可以体现出页面加载时间。但也有一些问题比如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;业务经常调整，所以埋点也需要调整，这个过程中很容易出现错埋、漏埋的问题。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面会有多个请求，只有这些请求全部完成后，页面才能渲染，这时数据请求埋点就会有点麻烦。&lt;&#x2F;li&gt;
&lt;li&gt;这几个时间点跟用户真正看到的时间还是会有差别，不够准确。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以一种无侵入的检测机制就很重要了。正好在&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&quot;&gt;掘金&lt;&#x2F;a&gt;上看到了&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&#x2F;post&#x2F;58440e98128fe1006c4c951d&quot;&gt;用图像识别来自动确认网页加载成功&lt;&#x2F;a&gt;，受此启发，觉得此路有戏。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-an&quot;&gt;实现方案&lt;&#x2F;h3&gt;
&lt;p&gt;当 push／present 一个页面时，隔一段时间去截屏并分析当前页面的空白（纯色）部分占比，如果超过某个阈值，就认为页面未加载完成。这里会有几个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;需要主动去截屏检测，而不能加载完成后告知。这其中的差别在于无法得知具体哪个时间加载完成了。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面被故意设计成有较多留白，这时就不容易判断了。&lt;&#x2F;li&gt;
&lt;li&gt;「未加载完成」不同的页面会有不同的表现。&lt;&#x2F;li&gt;
&lt;li&gt;当用户滑动时，有可能之前的页面已经加载了&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;chun-se-zhan-bi&quot;&gt;纯色占比&lt;&#x2F;h3&gt;
&lt;p&gt;最简单的方案就是把图片上的每个像素点都取出来，放到一个字典里，之后如果有相同色值的像素，那么 &lt;code&gt;count++&lt;&#x2F;code&gt;。问题也很明显，一个屏幕几十万个点，这一轮都还没分析完，用户已经打开第二个页面了。&lt;&#x2F;p&gt;
&lt;p&gt;再回到想要达到的目标：纯色部分占比。那么将图片压缩到更小的 size 不就行了么。老套路，铺张画布，把图片浇上去。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)imageWithImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)image scaledToSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span&gt;)newSize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newSize, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawInRect:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsEndImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; newImage;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就是真正的计算了，过程也比较简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 UIImage 转换成 CGImage Data
&lt;&#x2F;span&gt;&lt;span&gt;CGDataProviderRef provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImageGetDataProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;CFDataRef pixelData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGDataProviderCopyData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(provider)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetBytePtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; dataLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; R,G,B, and A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 用来装 color ，key 为 R-G-B 字符串，value 为出现次数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; colorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(dataLength); i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		colorCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; green &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 以 R-G-B 为 key
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, red, green, blue&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;colors[result]) {
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @([colors[result] integerValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 按出现次数排序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allValues&lt;&#x2F;span&gt;&lt;span&gt; sortedArrayUsingComparator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSComparisonResult&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[obj2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedDescending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedAscending&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 计算占比，并从高到低排序，取前 10 个
&lt;&#x2F;span&gt;&lt;span&gt;[sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; _Nonnull stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[percent addObject:@([count intValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(colorCount))];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先把 &lt;code&gt;UIImage&lt;&#x2F;code&gt; 转换成 &lt;code&gt;CFDataRef&lt;&#x2F;code&gt;，再遍历获取 &lt;code&gt;Color&lt;&#x2F;code&gt;，对相同的的 &lt;code&gt;Color&lt;&#x2F;code&gt; 进行累加，最后排一下序即可。&lt;&#x2F;p&gt;
&lt;p&gt;返回的数据类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.4586517&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.06202247&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.02921348&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能拿到了颜色的占比。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;p&gt;假设设定纯色区域超过 30% 认为没有完全加载，来找几个 Demo 测试下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifqtcztfhbqwendcmmzdambqgyyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果符合「未加载完毕」定义&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4139326&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.05438202&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再换一个&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrgizrwme2wgndcmmzdambqmeyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然没有加载完，但结果少于 30%&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.2788764&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.04853933&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果把值设得小一些，那么有可能「误杀」，比如这个界面&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s17.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrdimlemfrggndcmmzdambqmeyde_600x1067.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4530337&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06561798&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.02921348&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个界面已经加载完成了，但由于空白面积较多，因此纯色的占比也较多，如果按照之前的公式就会误伤，如何解决这个问题，之后再讨论。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看另一个未加载完毕的页面：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ie4tszldguytanlcmmzdambqgqyde_750x1278.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个页面的结果是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.3433708&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果中间部分加载出来（也就是面积最大的那一块），那么就变成了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这也属于页面未加载完成，但又是一个新的规则了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;再来回顾一下「截图分析纯色占比」带来的问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;隔 N 秒去截图时，用户可能滑到第 2 屏了，这时第 1 屏加载完了，但 2 屏还没有加载完，不应该属于「页面加载未完成」范畴。&lt;&#x2F;li&gt;
&lt;li&gt;不同页面的纯色特性不一样，有的比较分散，有的正常状态下也会有比较多的纯色，这样就容易误判。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于场景 1 还没有想到特别好的处理方式，一种办法是通过判断 runloop 的 mode 是否等于 &lt;code&gt;UITrackingRunLoopMode&lt;&#x2F;code&gt; 来判断是否有滑动，不太优雅，但可能行得通。&lt;&#x2F;p&gt;
&lt;p&gt;对于场景 2 可以把数据发送到服务端，让服务端去计算某个页面的纯色分布情况，比如大部分都是 &amp;lt; 10%，有少部分在 20% 以上，那么就可以判定为未加载完成，不过成本还是有点高。&lt;&#x2F;p&gt;
&lt;p&gt;所以这个方案虽然可以做到无侵入，但在结果判定上还是存在些缺陷，期待有更成熟的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReSwift 介绍</title>
            <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reswift-analyze/</link>
            <guid>https://limboy.me/posts/reswift-analyze/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-reswift&quot;&gt;什么是 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;ReSwift&lt;&#x2F;a&gt; 是基于 &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; 思想实现的 Swift 类库。基本的流程如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;14808452245719.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当用户点击了视图上的某个元素时，会发出一个 &lt;code&gt;Action&lt;&#x2F;code&gt;，这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 包含了两个基本元素：&lt;code&gt;Action Type&lt;&#x2F;code&gt; 和 &lt;code&gt;Action Payload&lt;&#x2F;code&gt;，比如「点击收藏按钮」这个 &lt;code&gt;Action&lt;&#x2F;code&gt;，可能会被描述为：&lt;code&gt;Action(&amp;quot;CollectButtonTapped&amp;quot;, [&amp;quot;itemID&amp;quot;: 189])&lt;&#x2F;code&gt;。然后这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 就会到达 &lt;code&gt;Store&lt;&#x2F;code&gt;，&lt;code&gt;Store&lt;&#x2F;code&gt; 也很简单，只做两件事：1. 接收 &lt;code&gt;Action&lt;&#x2F;code&gt;；2. 将 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;Reducer&lt;&#x2F;code&gt;。&lt;code&gt;Reducer&lt;&#x2F;code&gt; 做的事情就更简单了，接收 &lt;code&gt;Store&lt;&#x2F;code&gt; 发出的 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt;，内部运算之后，返回一个新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;code&gt;Store&lt;&#x2F;code&gt; 拿到了新的 &lt;code&gt;State&lt;&#x2F;code&gt; 后，再把 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;View&lt;&#x2F;code&gt;。&lt;code&gt;View&lt;&#x2F;code&gt; 渲染新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;简单描述下各个模块的职责：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;View&lt;&#x2F;code&gt; 可以理解为一个「壳」，所有的数据都由 &lt;code&gt;State&lt;&#x2F;code&gt; 提供，这样就把表现层和数据层分开了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;view = f(state)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;action&quot;&gt;Action&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Action&lt;&#x2F;code&gt; 用来描述发生了什么事情，比如不小心用脚踢到了椅子，神经系统就会把这个信息传递给大脑，这个信息就是 &lt;code&gt;Action&lt;&#x2F;code&gt;，而大脑就是之后要讲到的 &lt;code&gt;Store&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;store&quot;&gt;Store&lt;&#x2F;h4&gt;
&lt;p&gt;这是核心模块，就像大脑会不停地接受到各种 &lt;code&gt;Action&lt;&#x2F;code&gt;，并作出反应，只不过在这里 &lt;code&gt;Store&lt;&#x2F;code&gt; 并不具备「做决定」的能力，而是把这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 交给了所有可能关心它的 &lt;code&gt;Reducers&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 推荐一个 App 只有一个 &lt;code&gt;Store&lt;&#x2F;code&gt;，在实际情况中，如果这么做的话，会带来不少的副作用，比如所有的模块都需要依赖 &lt;code&gt;Store&lt;&#x2F;code&gt;，这个 &lt;code&gt;State&lt;&#x2F;code&gt; 会很庞大，不可避免的会影响性能。所以，单个页面或模块有一个 &lt;code&gt;Store&lt;&#x2F;code&gt; 会比较合适。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;state&quot;&gt;State&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;State&lt;&#x2F;code&gt; 是一个隐形的杀手，因为使用它极其方便，而它的危害也不会瞬间爆发，就像温水煮青蛙一样，等发现问题越来越多、被各种多线程问题困扰时，就会感受到它的威力了。&lt;&#x2F;p&gt;
&lt;p&gt;所以把 &lt;code&gt;State&lt;&#x2F;code&gt; 单独拎出来，并且使用 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2015&#x2F;414&#x2F;&quot;&gt;Value Types&lt;&#x2F;a&gt; 来解决各种多线程或变量被修改导致的问题。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2016&#x2F;419&#x2F;&quot;&gt;Protocol and Value Oriented Programming in UIKit Apps&lt;&#x2F;a&gt; 中也推荐使用 Value Composition，而不是继承，同时把 State 集中到一个地方处理，也有助于 Local Reasoning。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-shi-yong-reswift&quot;&gt;为什么要使用 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;确切说来是为什么要使用「单向数据流」的架构模式，主要有这么几个好处：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;数据单向流动容易让结构变得清晰，出问题时也更容易排查。&lt;&#x2F;li&gt;
&lt;li&gt;使用了 「Value Types」作为流动的数据，避免各种诡异的「不小心被篡改」或多线程 bug。&lt;&#x2F;li&gt;
&lt;li&gt;在统一的入口处理数据（State），比起散落在各处更加容易控制。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;Readme&lt;&#x2F;a&gt; 里带了一个简单的 Demo，可以感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ma-yi-pie&quot;&gt;源码一瞥&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift (3.0.0) 的源码很精简，对 Swift 熟悉的话，很快就能看完。说下我自己在看源码的过程中学到的一些 tips 吧。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reduce-de-shi-yong&quot;&gt;Reduce 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;&#x2F;code&gt; 在函数式编程的领域里会经常被用到，甚至可以实现 &lt;code&gt;map&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;filter&lt;&#x2F;code&gt; 等功能，足见其强大。它的运行规则是以函数的处理结果作为初始值，再结合数组中的元素返回处理结果，不断循环，直到数组中的元素全部处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;在 Swift 中，它是 &lt;code&gt;Sequence&lt;&#x2F;code&gt; 协议扩展的一个方法，签名如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;reduce&amp;lt;Result&amp;gt;(_ initialResult: Result, _ nextPartialResult: (Result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Element) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Result) rethrows -&amp;gt; Result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ReSwift 中有好几个地方都用到了 &lt;code&gt;reduce&lt;&#x2F;code&gt;，比如通过它来达到 &lt;code&gt;combineReducer&lt;&#x2F;code&gt; 的效果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public struct&lt;&#x2F;span&gt;&lt;span&gt; CombinedReducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; self.reducers 包含了 AnyReducer 的实例
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reduce(state) { (currentState, reducer) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: action, state: currentState)
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;按照入队列的先后，reducer 被依次执行，并且把生成的新的 &lt;code&gt;State&lt;&#x2F;code&gt; 作为下一个循环的初始值传递给下一个 reducer。&lt;&#x2F;p&gt;
&lt;p&gt;在处理 &lt;code&gt;middleware&lt;&#x2F;code&gt; 时，也有用到类似的技术，不过那个更加复杂些，涉及到&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;zh-hans&#x2F;%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0&quot;&gt;高阶函数&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhuang-shi-qi-mo-shi&quot;&gt;装饰器模式&lt;&#x2F;h4&gt;
&lt;p&gt;装饰器模式简单来说就是在不改变类／方法原有功能的前提下，提供了一些额外的能力。比较常见的有 validator，客户端提交的数据要入库前需要做一下校验，不通过的话直接返回。在 python 里装饰器非常常见，比如在一个方法上加一个 &lt;code&gt;@cached&lt;&#x2F;code&gt; 或者 &lt;code&gt;@validate&lt;&#x2F;code&gt; 等 annotation。&lt;&#x2F;p&gt;
&lt;p&gt;在实现 Reducer 时，有用到这个模式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public protocol Reducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleAction(action: Action, state: ReducerStateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension Reducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; withSpecificTypes(action, state: state, function: handleAction)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;_handleAction&lt;&#x2F;code&gt; 对 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 做了个校验，（&lt;code&gt;withSpecificTypes&lt;&#x2F;code&gt; 函数里如果校验不通过，&lt;code&gt;handleAction&lt;&#x2F;code&gt; 不会被执行），这样对于使用者，只需继承 Reducer 实现 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 方法，ReSwift 内部调用时会使用 &lt;code&gt;_handleAction&lt;&#x2F;code&gt; 来做一些校验。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;StoreSubscriber&lt;&#x2F;code&gt; 里也有用到类似的技术。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;associatedtype-de-shi-yong&quot;&gt;associatedtype 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;通过 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;，可以让 protocol 使用 &lt;code&gt;generic&lt;&#x2F;code&gt;, Natasha 还写过一篇关于 &lt;a href=&quot;https:&#x2F;&#x2F;www.natashatherobot.com&#x2F;swift-what-are-protocols-with-associated-types&#x2F;&quot;&gt;PAT 使用的文章&lt;&#x2F;a&gt;，里面以宠物小精灵为例，通过 PAT 让不同的小精灵具备了不同的能力。不过使用了 &lt;code&gt;associatedtype&lt;&#x2F;code&gt; 或 &lt;code&gt;Self&lt;&#x2F;code&gt; 后，就不能作为变量的类型来声明了，比如 &lt;code&gt;var something: AProtoclWithAssociatedType&lt;&#x2F;code&gt; 这样编译器会报错，具体原因可以参考&lt;a href=&quot;http:&#x2F;&#x2F;krakendev.io&#x2F;blog&#x2F;generic-protocols-and-their-shortcomings&quot;&gt;这篇文章&lt;&#x2F;a&gt;，主要是因为无法指定 Generic 的类型，导致编译器无法在编译期间就确定具体的类型，对于强类型语言来说，这是不能接受的。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 中，在定义 StoreType 时，有用到 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; StoreType {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype State: StateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Initializes the store with a reducer and an intial state.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(reducer: AnyReducer, state: State?)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在定义 reducer protocol 时，也有用到（也是关联了 StateType）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dui-wai-zhi-du-dui-nei-ke-du-xie&quot;&gt;对外只读，对内可读写&lt;&#x2F;h4&gt;
&lt;p&gt;在 OC 时代，通常的做法是在 .h 里声明为 &lt;code&gt;readonly&lt;&#x2F;code&gt;，然后在 .m 的 class extension 里，将同名的属性声明为 &lt;code&gt;readwrite&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Swift 没有头文件的概念，直接一句话搞定 &lt;code&gt;private(set)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; Subscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;State: StateType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private(set) weak var&lt;&#x2F;span&gt;&lt;span&gt; subscriber: AnyStoreSubscriber? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; selector: ((State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any)?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;subscription 希望外部可以拿到 subscriber，但不要修改它，于是在前面加了 &lt;code&gt;private(set)&lt;&#x2F;code&gt;，也就是把 &lt;code&gt;set&lt;&#x2F;code&gt; 方法标记为 private。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift 还是挺值的一试的，一方面是因为单向数据流确实对程序的清晰度有帮助，另一方面 ReSwift 的代码很简洁，内部实现比较容易搞明白，这样即使出问题也比较容易定位。&lt;a href=&quot;https:&#x2F;&#x2F;realm.io&#x2F;news&#x2F;benji-encz-unidirectional-data-flow-swift&#x2F;&quot;&gt;Realm&lt;&#x2F;a&gt; 上有作者分享的案例，可以参考下。不足嘛肯定也有，比如功能比较简单，只是做了数据流，缺少 Diff 支持，在做列表更新／删除时会比较痛苦；如何与 MVVM 等比较成熟的架构有效地结合起来等。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，由于数据都通过 State 来传递，可以在出 bug 时，上传当时的 state 内容方便定位；还可以基于 State 来做&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift#demo&quot;&gt;时光机&lt;&#x2F;a&gt;。不妨在 Side Project 中尝试下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做一个 App 前需要考虑的几件事</title>
            <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/starting-an-app/</link>
            <guid>https://limboy.me/posts/starting-an-app/</guid>
            <description>&lt;p&gt;随着工具链的完善，语言的升级以及各种优质教程的涌现，做一个 App 的成本也越来越低了。尽管如此，有些事情最好前期就做起来，避免当 App 有了一定规模后，再感慨当初为什么没有多留点心。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wan-shan-de-ri-zhi-xi-tong&quot;&gt;完善的日志系统&lt;&#x2F;h3&gt;
&lt;p&gt;以 iOS 为例，有时图方便，就直接用 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 了，甚至线上都一直开着。一方面会影响性能，尤其是输出比较频繁的时候，另一方面也容易泄露敏感信息，所以一般做法是在 Release 模式下禁用 &lt;code&gt;NSLog&lt;&#x2F;code&gt;，比如在 &lt;code&gt;pch&lt;&#x2F;code&gt; 文件中，通过对环境的判断，对 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 做不同的处理。&lt;&#x2F;p&gt;
&lt;p&gt;但这样仍会有问题，比如我们发现线上的 App 在特定场景下会有某种异常的表现，这时就很希望能有日志来提供更多的信息。可以考虑使用像 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CocoaLumberjack&#x2F;CocoaLumberjack&quot;&gt;cocoalumberjack&lt;&#x2F;a&gt; 这样功能更完善的第三方日志工具，在线上仍然开着日志，但不消费，这样就不会泄露敏感信息。当我们需要看日志时，可以通过「调试模式」打开它，然后连上 &lt;a href=&quot;http:&#x2F;&#x2F;lemonjar.com&#x2F;iosconsole&#x2F;&quot;&gt;iOS Console&lt;&#x2F;a&gt; 来看。&lt;&#x2F;p&gt;
&lt;p&gt;因为 Log 是一个很普遍的行为，所以最好前期就规范起来，后期遍地都是 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 时，再要改动会有点麻烦，当然也可以偷懒点，直接把 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 的宏定义改了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;commit-message-gui-fan&quot;&gt;Commit Message 规范&lt;&#x2F;h3&gt;
&lt;p&gt;在前期开发的时候，往往为了快速实现功能，而忽略了 Commit Message 的规范，然后就会出现很随意的 Commit 信息。这样别人在 Review 代码时就会很累，写某个版本的 Release Notes 也会变得艰辛，甚至过一段时间自己都不知道这些 Commit 代表的意思。而如果自己也讲不清这次改动究竟该怎么描述时，往往是这次改动混杂了较多的信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erlang&#x2F;otp&#x2F;wiki&#x2F;Writing-good-commit-messages&quot;&gt;这篇文章&lt;&#x2F;a&gt; 简洁精确地描述了为什么要写好 Commit Message，以及如何写。遵守这些规范后，就很方便产出这样的 Release Notes 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-ma-gui-fan&quot;&gt;代码规范&lt;&#x2F;h3&gt;
&lt;p&gt;这个最好在前期就抓起来，如果前期不做约束，每个人的风格往往会有比较大的差异，导致代码看起来会比较累，甚至有些人是从其他语言转过来的，还会保留之前语言的一些书写习惯，就容易有「出戏」的感觉。一致的代码规范不仅看起来舒服，而且让团队更像一个整体。&lt;&#x2F;p&gt;
&lt;p&gt;这个实施起来会有一定难度，尤其是团队中有一些「老人」的时候，他们往往积累了一套自己的编程习惯，而且不容易被说服。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhun-bei-yi-fen-bian-cheng-shou-ze&quot;&gt;准备一份编程守则&lt;&#x2F;h3&gt;
&lt;p&gt;里面包含了「最佳实践」和「不要踩的坑」，这个可以一定程度上提高开发效率，避免一些低级错误。比如以 iOS 为例，「不要随便使用通知」，因为通知使用起来太方便了，用得多了调试起来就会很累，而且也不好管理；「通知用完之后记得 remove observer」；不要使用&lt;code&gt;containsString&lt;&#x2F;code&gt; (如果还需要支持 iOS 7 的话)。随着时间的累积，这份守则里的内容会越来越多，也是一件挺宝贵的财富。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-mian-bu-ju-gui-fan&quot;&gt;页面布局规范&lt;&#x2F;h3&gt;
&lt;p&gt;这个在 Android 相对还好，基本都是通过 xml 来进行布局。在 iOS 里玩法就多了，有用 storyboard 的，有用 xib 的，有直接计算坐标和大小的，有用原生 autolayout 的，有用第三方布局类的。总之就是各显神通，尽量用同一种布局规范（但不建议直接计算坐标和大小），看起来也会方便些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-ji-mai-dian&quot;&gt;统计埋点&lt;&#x2F;h3&gt;
&lt;p&gt;这是很重要的一块，客户端所有的数据基本就靠它了，所以尽量选择一个灵活、稳定的数据方案，同时最好在他们提供的 SDK 上再封一层，方便做一些额外的事情（比如想同时接入另一家服务作对比）。&lt;&#x2F;p&gt;
&lt;p&gt;统计埋点还有很重要的一点是「验证」，是否有错打、漏打等现象；iOS &#x2F; Android 是否有用同一个点；有些点还需要额外的参数，这些参数的格式是否正确等。这些工具往往只能自己来做了，这也是比较花时间的一部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app-jia-gou&quot;&gt;App 架构&lt;&#x2F;h3&gt;
&lt;p&gt;App 架构会随着业务、人员的增长而演进，所以当发现当前的架构无法满足日常的业务迭代时，就需要考虑对它做调整了。一般来说，大方向上也就是 MVP &#x2F; MVVM，等人员多起来时，基本就是组件化开发，当然组件化也会有它的问题（比如资源 &#x2F; 类重用、组件间通信等），这里就不展开了。&lt;&#x2F;p&gt;
&lt;p&gt;在前期选择一个相对轻量级，但比较清晰的架构（尽量不要选择 MVC），大家都遵守这个架构开发，也能一定程度上提高效率。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-mian-tiao-zhuan-ji-zhi&quot;&gt;页面跳转机制&lt;&#x2F;h3&gt;
&lt;p&gt;虽然 Android、iOS 都原生支持 open 特定 scheme 的 url，不过可能的话，还是通过 router 统一处理会比较方便，也更灵活。比如可以知道注册了哪些 URL；可以知道页面的跳转成功率；方便处理一些奇奇怪怪的需求等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zai-xian-pei-zhi&quot;&gt;在线配置&lt;&#x2F;h3&gt;
&lt;p&gt;在线配置可以赋予 App 极大的灵活性，比如运营的一些活动、banner 位调整、首页弹窗等；还可以针对特定机型、系统分发特定的内容，结合规则引擎甚至可以给一部分有相同特征的用户发推送；可以做流量切分等。所以一个强大&#x2F;稳定的配置中心就显得尤为重要，A&#x2F;B Test 也可以基于配置中心来做。&lt;&#x2F;p&gt;
&lt;p&gt;这里有些注意事项，因为不少配置的值是运营填的，她们对 value 不那么敏感，所以会出现 value 为空，或者不是想要的类型，或者配了张图片，但是体积超大等，有可能造成客户端 crash &#x2F; OOM 等异常表现，所以客户端要有足够强大的容错能力。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xuan-ze-he-gua-de-crash-ping-tai&quot;&gt;选择合适的 Crash 平台&lt;&#x2F;h3&gt;
&lt;p&gt;Crash 会给用户造成极大的负面体验，所以需要经常关注 Crash 情况，尤其是刚发版的那段时间。这块 &lt;a href=&quot;http:&#x2F;&#x2F;fabric.io&quot;&gt;fabric&lt;&#x2F;a&gt; 做的比较好，只是由于是国外的服务，会有些许数据上的丢失，不过问题倒也不是很大，也可以考虑国内的一些服务，如 bugly，毕竟腾讯自己也在用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-review&quot;&gt;Code Review&lt;&#x2F;h3&gt;
&lt;p&gt;这也是容易忽视的一点，当业务需求压过来时，先把功能实现了再说，而且在初期往往人手也不够，抽不出时间来做 Code Review。如果是这样的话，可以先 Review 一些核心的点，保证重要的代码是经过 Review 的，不太重要的业务代码可以先放放，等人员充足后再覆盖更大的范围。&lt;&#x2F;p&gt;
&lt;p&gt;Code Review 的主要作用是保障代码质量，同时促进双方成长，一个担心点是质量偏低的代码比例如果较大的话，会影响开发者的心情，增加维护成本，日积月累就成了重重的「历史包袱」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xuan-ze-he-gua-de-kai-fa-mo-shi&quot;&gt;选择合适的开发模式&lt;&#x2F;h3&gt;
&lt;p&gt;如果是使用 git 来做源码管理的话，可以采用 &lt;a href=&quot;http:&#x2F;&#x2F;jeffkreeftmeijer.com&#x2F;2010&#x2F;why-arent-you-using-git-flow&#x2F;&quot;&gt;flow&lt;&#x2F;a&gt; 模式，基本能满足大部分的需求，而且不少 git 工具也内置了 flow 的支持。这样当需要处理 feature &#x2F; hotfix &#x2F; 发版等场景时，就会很方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-xu-ji-cheng&quot;&gt;持续集成&lt;&#x2F;h3&gt;
&lt;p&gt;持续集成的目的是让产品在快速迭代的过程中还能保证质量，当有错误发生时，可以第一时间被检查出来，方便修复。如果想偷懒的话，可以直接使用成熟的服务，如 &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;travis&lt;&#x2F;a&gt;，也可以自己基于 Jenkins 来搭，iOS 的话，配合 fastlane 效果会更好。自己搭的好处是灵活度更大，可以加入一些个性化需求。&lt;&#x2F;p&gt;
&lt;p&gt;如果有打包平台的话，还可以定时出一个包，这样当发现某个功能使用起来有问题，代码上又没什么头绪时，可以对比以前的包来定位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-guan-li-xi-tong&quot;&gt;Bug 管理系统&lt;&#x2F;h3&gt;
&lt;p&gt;这个 Bug 包括测试阶段和线上的 Bug，Bug 管理工具有很多，使用在线服务或自己搭都可以，但要有，不然很有可能忘了还有哪些问题需要修复，哪些已经修复了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-mu-guan-li-gong-ju&quot;&gt;项目管理工具&lt;&#x2F;h3&gt;
&lt;p&gt;在 App 开发初期，人员较少，沟通起来比较方便，所以很多需求当面就说了，一些原型&#x2F;设计图可能也是直接 AirDrop 过来的，这样效率自然高，但不便管理。比如没有 prd，产品、开发的理解可能不一致，到头来发现做的不是产品想要的，或者一些细节不符合要求；设计图有更新，但没有同步到所有的开发；需求有变更，但当时在专心做某个 feature，可能就忘了，或者没有理解全面等。所以最好还是有一个项目管理工具来统一处理，再结合敏捷开发，项目的质量和进度就容易得到保障。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;checklist&quot;&gt;Checklist&lt;&#x2F;h3&gt;
&lt;p&gt;一个 App 发布上线之后，要保证不出大的问题，就要在发布之前，先检查一下「一定不能出问题」的点是否正常，就像飞机起飞之前一定会走一遍 checklist 一样。比如推送是否正常、log 是否关闭、组件版本是否正确等，随着 App 功能的增加，这个 list 也会越来越长，虽然过一遍 checklist 会花费些时间，但跟收益相比还是值得的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;以上这些点是在感受不过不同量级的 App 开发后整理的，肯定还会有疏漏，不过如果真能做到这些，就已经很不错了，至少当有新人进来时，不会背上沉重的「历史包袱」。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路·续</title>
            <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components-continued/</link>
            <guid>https://limboy.me/posts/mgj-components-continued/</guid>
            <description>&lt;p&gt;前几天在「移动学习分享群」分享了关于蘑菇街组件化方面的一点经验，由于时间和文字描述方面的限制，很多东西表述的不是很清楚，让一些同学产生了疑惑，casatwy 老师也写了篇&lt;a href=&quot;http:&#x2F;&#x2F;casatwy.com&#x2F;iOS-Modulization.html&quot;&gt;文章&lt;&#x2F;a&gt;来纠正其中的一些实现，看完之后确实有不少启发。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yi-de-diao-yong-shi-xian&quot;&gt;统一的调用实现&lt;&#x2F;h4&gt;
&lt;p&gt;将「URL 调用」和「组件间调用」通过 runtime 达到统一，通过 prefix 的方式来避免安全上的一些漏洞。看起来确实会舒服些，也比较灵活。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-guo-category-lai-tong-yi-zu-jian-dui-wai-bao-lu-de-jie-kou&quot;&gt;通过 Category 来统一组件对外暴露的接口&lt;&#x2F;h4&gt;
&lt;p&gt;支持 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 但最终还是走的 target-action，跟内部调用无差别。
这也是我们目前有待提升的点，想知道某个组件支持哪些 URL 或 哪些 Protocol 不够方便，URL 的参数传递也是个问题，将来 URL 发生变动的话，调整起来也比较麻烦。后续会在这块再加强下。&lt;&#x2F;p&gt;
&lt;p&gt;当初决定使用 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 来做页面间的跳转，而不是方法调用，主要是考虑到我们的大部分场景都可以通过这种方式解决，因此就这么定了。&lt;code&gt;openURL:&lt;&#x2F;code&gt; 更像 Android 里的 「隐式 Intent」，不关心谁来处理这个 URL，由系统（MGJRouter）来决定。而方法调用更像「显式 Intent」或者 RPC，明确地知道应该由谁来处理。前者的好处是可以更少地关心业务逻辑，后者的好处是可以很方便地完成参数传递。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geng-ming-que-de-biao-shu&quot;&gt;更明确的表述&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;openURL&lt;&#x2F;code&gt; 只是页面间的调用方式&lt;&#x2F;li&gt;
&lt;li&gt;组件间的调用通过 protocol 来实现&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每个组件都有一个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，这个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，主要做了三件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;注册这个组件关心的 URL&lt;&#x2F;li&gt;
&lt;li&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;li&gt;
&lt;li&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-guan-xin-de-url&quot;&gt;注册这个组件关心的 URL&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;MGJRouter.png&quot;
        width=&quot;432&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;URL 的注册会有对应的 block，拿到这个 URL 后，想怎么折腾就怎么折腾。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-neng-gou-bei-diao-yong-de-fang-fa-shu-xing&quot;&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;h4&gt;
&lt;p&gt;当有一些场景不适合用 URL 的方式时，就可以通过注册 protocol 来实现&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;ModuleManager.png&quot;
        width=&quot;432&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager registerClass:ClassA forProtocol:ProtocolA]&lt;&#x2F;code&gt; 的结果就是在 MM 内部维护的 dict 里新加了一个映射关系。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager classForProtocol:ProtocolA]&lt;&#x2F;code&gt; 的返回结果就是之前在 MM 内部 dict 里 protocol 对应的 class，使用方不需要关心这个 class 是个什么东东，反正实现了 &lt;code&gt;ProtocolA&lt;&#x2F;code&gt; 协议，拿来用就行。&lt;&#x2F;p&gt;
&lt;p&gt;这里需要有一个公共的地方来容纳这些 public protocl，也就是图中的 &lt;code&gt;PublicProtocl.h&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zai-app-sheng-ming-zhou-qi-de-bu-tong-jie-duan-zuo-bu-tong-de-xiang-ying&quot;&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;h4&gt;
&lt;p&gt;上一篇文章中有提到，这里简单说下，&lt;code&gt;ModuleEntry&lt;&#x2F;code&gt;，实现某个特定的协议(该协议继承自 &lt;code&gt;UIApplicationDelegate&lt;&#x2F;code&gt; )，然后实现对应的方法即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhen-dui-casatwy-na-pian-wen-zhang-de-yi-xie-hui-ying&quot;&gt;针对 casatwy 那篇文章的一些回应&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单纯以 openURL 的方式是无法胜任让一个 App 去实施组件化架构的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同意，所以我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;根本无法表达非常规对象&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;单纯地通过 &lt;code&gt;openURL&lt;&#x2F;code&gt; 确实不太好表达，但我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册 URL 的目的其实是一个服务发现的过程，在 iOS 领域中，服务发现的方式是不需要通过主动注册的，使用 runtime 就可以了。另外，注册部分的代码的维护是一个相对麻烦的事情，每一次支持新调用时，都要去维护一次注册列表。如果有调用被弃用了，是经常会忘记删项目的。runtime 由于不存在注册过程，那就也不会产生维护的操作，维护成本就降低了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于通过 runtime 做到了服务的自动发现，拓展调用接口的任务就仅在于各自的模块，任何一次新接口添加，新业务添加，都不必去主工程做操作，十分透明。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;尽管通过 runtime 可以做到这些，但最终还是要通过维护 &lt;code&gt;Category&lt;&#x2F;code&gt; 来暴露新增的 Target-Action，所以 runtime 虽然不存在注册过程，但实际使用过程中，还是会有注册过程，还是需要去维护。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有拆分远程调用和本地间调用&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;从上面的图可以看到，我们其实是分为「组件间调用」和「页面间跳转」两个维度，只要 app 响应某个 URL，无论是 app 内还是 app 外都可以，而「组件间」调用走的完全是另一条路，所以也不会有安全上的问题。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;以远程调用的方式为本地间调用提供服务&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地间调用无法传递非常规参数，复杂参数的传递方式非常丑陋&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上，使用 Protocol&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须要在 app 启动时注册 URL 响应者&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;是的，就蘑菇街的方案来说，这步不可避免。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个不必要的操作会导致不必要的维护成本&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;维护只是在组件内部做调整，并不需要在主工程里做修改。如果采用 Category 的方式，好处是不用在启动时注册，但当组件的接口有变动时，依然要维护 Category，这个成本是免不了的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;新增组件化的调用路径时，蘑菇街的操作相对复杂
在本文给出的组件化方案中，响应者唯一要做的事情就是提供 Target 和 Action，并不需要再做其它的事情&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提供了 Target-Action 之后，还是要在 Category 里添加一个 wrapper 的吧?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有针对 target 层做封装
这种做法使得所有的跨组件调用请求直接 hit 到业务模块，业务模块必然因此变得臃肿难以维护，属于侵入式架构。应该将原本属于调用相应的部分拿出来放在 target-action 中，才能尽可能保证不将无关代码侵入到原有业务组件中，才能保证业务组件未来的迁移和修改不受组件调用的影响，以及降低为项目的组件化实施而带来的时间成本。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「将原本属于调用相应的部分拿出来放在 target-action 中」并不是唯一可行的方式，使用 Protocol&#x2F;URL 注册也可以达到效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;casatwy 的一些思路和思考问题的角度挺不错的，也从他的文章中收获了不少，希望这篇文章能把之前模糊的一些观念说得足够清楚，还有问题的话欢迎继续交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路</title>
            <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components/</link>
            <guid>https://limboy.me/posts/mgj-components/</guid>
            <description>&lt;p&gt;在组件化之前，蘑菇街 App 的代码都是在一个工程里开发的，在人比较少，业务发展不是很快的时候，这样是比较合适的，能一定程度地保证开发效率。&lt;&#x2F;p&gt;
&lt;p&gt;慢慢地代码量多了起来，开发人员也多了起来，业务发展也快了起来，这时单一工程开发模式就会显露出一些弊端&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;耦合比较严重（因为没有明确的约束，「组件」间引用的现象会比较多）&lt;&#x2F;li&gt;
&lt;li&gt;容易出现冲突（尤其是使用 Xib，还有就是 Xcode Project，虽说有&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;truebit&#x2F;xUnique&quot;&gt;脚本&lt;&#x2F;a&gt;可以改善）&lt;&#x2F;li&gt;
&lt;li&gt;业务方的开发效率不够高（只关心自己的组件，却要编译整个项目，与其他不相干的代码糅合在一起）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了解决这些问题，就采取了「组件化」策略。它能带来这些好处&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;加快编译速度（不用编译主客那一大坨代码了）&lt;&#x2F;li&gt;
&lt;li&gt;自由选择开发姿势（MVC &#x2F; MVVM &#x2F; FRP）&lt;&#x2F;li&gt;
&lt;li&gt;方便 QA 有针对性地测试&lt;&#x2F;li&gt;
&lt;li&gt;提高业务开发效率&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先来看下，组件化之后的一个大概架构&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575533415332.jpg&quot;
        width=&quot;1624&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「组件化」顾名思义就是把一个大的 App 拆成一个个小的组件，相互之间不直接引用。那如何做呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-shi&quot;&gt;实现方式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zu-jian-jian-tong-xin&quot;&gt;组件间通信&lt;&#x2F;h4&gt;
&lt;p&gt;以 iOS 为例，由于之前就是采用的 URL 跳转模式，理论上页面之间的跳转只需 open 一个 URL 即可。所以对于一个组件来说，只要定义「支持哪些 URL」即可，比如详情页，大概可以这么做的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首页只需调用 &lt;code&gt;[MGJRouter openURL:@&amp;quot;mgj:&#x2F;&#x2F;detail?id=404&amp;quot;]&lt;&#x2F;code&gt; 就可以打开相应的详情页。&lt;&#x2F;p&gt;
&lt;p&gt;那问题又来了，我怎么知道有哪些可用的 URL？为此，我们做了一个后台专门来管理。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575445324533.jpg&quot;
        width=&quot;2330&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后可以把这些短链生成不同平台所需的文件，iOS 平台生成 .{h,m} 文件，Android 平台生成 .java 文件，并注入到项目中。这样开发人员只需在项目中打开该文件就知道所有的可用 URL 了。&lt;&#x2F;p&gt;
&lt;p&gt;目前还有一块没有做，就是参数这块，虽然描述了短链，但真想要生成完整的 URL，还需要知道如何传参数，这个正在开发中。&lt;&#x2F;p&gt;
&lt;p&gt;还有一种情况会稍微麻烦点，就是「组件 A」要调用「组件 B」的某个方法，比如在商品详情页要展示购物车的商品数量，就涉及到向购物车组件拿数据。&lt;&#x2F;p&gt;
&lt;p&gt;类似这种同步调用，iOS 之前采用了比较简单的方案，还是依托于 &lt;code&gt;MGJRouter&lt;&#x2F;code&gt;，不过添加了新的方法 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt;，注册时也使用新的方法进行注册&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toObjectHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParamters){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some calculation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时 &lt;code&gt;NSNumber *orderCount = [MGJRouter objectForURL:@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot;]&lt;&#x2F;code&gt; 这样就拿到了购物车里的商品数。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂但更具通用性的方法是使用「协议」 &amp;lt;-&amp;gt; 「类」绑定的方式，还是以购物车为例，购物车组件可以提供这么个 Protocol&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;MGJCart &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;orderCount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到通过协议可以直接指定返回的数据类型。然后在购物车组件内再新建个类实现这个协议，假设这个类名为&lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，接着就可以把它与协议关联起来 &lt;code&gt;[ModuleManager registerClass:MGJCartImpl forProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;，对于使用方来说，要拿到这个 &lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，需要调用 &lt;code&gt;[ModuleManager classForProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;。拿到之后再调用 &lt;code&gt;+ (NSInteger)orderCount&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;那么，这个协议放在哪里比较合适呢？如果跟组件放在一起，使用时还是要先引入组件，如果有多个这样的组件就会比较麻烦了。所以我们把这些公共的协议统一放到了 &lt;code&gt;PublicProtocolDomain.h&lt;&#x2F;code&gt; 下，到时只依赖这一个文件就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;Android 也是采用类似的方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zu-jian-sheng-ming-zhou-qi-guan-li&quot;&gt;组件生命周期管理&lt;&#x2F;h4&gt;
&lt;p&gt;理想中的组件可以很方便地集成到主客中，并且有跟 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 一致的回调方法。这也是 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看现在的入口方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didFinishLaunchingWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)launchOptions
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [MGJApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startApp&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] loadModuleFromPlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] pathForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;modules&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; ofType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;plist&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didFinishLaunchingWithOptions:launchOptions&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackLaunchTime&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 &lt;code&gt;[MGJApp startApp]&lt;&#x2F;code&gt; 主要负责一些 SDK 的初始化。&lt;code&gt;[self trackLaunchTime]&lt;&#x2F;code&gt; 是我们打的一个点，用来监测从 &lt;code&gt;main&lt;&#x2F;code&gt; 方法开始到入口方法调用结束花了多长时间。其他的都由 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 搞定，&lt;code&gt;loadModuleFromPlist:pathForResource:&lt;&#x2F;code&gt; 方法会读取 bundle 里的一个 plist 文件，这个文件的内容大概是这样的&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575489295366.jpg&quot;
        width=&quot;906&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个 &lt;code&gt;Module&lt;&#x2F;code&gt; 都实现了 &lt;code&gt;ModuleProtocol&lt;&#x2F;code&gt;，其中有一个 &lt;code&gt;- (BOOL)applicaiton:didFinishLaunchingWithOptions:&lt;&#x2F;code&gt; 方法，如果实现了的话，就会被调用。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题就是，系统的一些事件会有通知，比如 &lt;code&gt;applicationDidBecomeActive&lt;&#x2F;code&gt; 会有对应的 &lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;&#x2F;code&gt;，组件如果要做响应的话，只需监听这个系统通知即可。但也有一些事件是没有通知的，比如 &lt;code&gt;- application:didRegisterUserNotificationSettings:&lt;&#x2F;code&gt;，这时组件如果也要做点事情，怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;一个简单的解决方法是在 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 的各个方法里，手动调一遍组件的对应的方法，如果有就执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didRegisterForRemoteNotificationsWithDeviceToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)deviceToken
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ke-gong-cheng&quot;&gt;壳工程&lt;&#x2F;h4&gt;
&lt;p&gt;既然已经拆出去了，那拆出去的组件总得有个载体，这个载体就是壳工程，壳工程主要包含一些基础组件和业务 SDK，这也是主工程包含的一些内容，所以如果在壳工程可以正常运行的话，到了主工程也没什么问题。不过这里存在版本同步问题，之后会说到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yu-dao-de-wen-ti&quot;&gt;遇到的问题&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zu-jian-chai-fen&quot;&gt;组件拆分&lt;&#x2F;h5&gt;
&lt;p&gt;由于之前的代码都是在一个工程下的，所以要单独拿出来作为一个组件就会遇到不少问题。首先是组件的划分，当时在定义组件粒度时也花了些时间讨论，究竟是粒度粗点好，还是细点好。粗点的话比较有利于拆分，细点的话灵活度比较高。最终还是选择粗一点的粒度，先拆出来再说。&lt;&#x2F;p&gt;
&lt;p&gt;假如要把详情页迁出来，就会发现它依赖了一些其他部分的代码，那最快的方式就是直接把代码拷过来，改个名使用。比较简单暴力。说起来比较简单，做的时候也是挺有挑战的，因为正常的业务并不会因为「组件化」而停止，所以开发同学们需要同时兼顾正常的业务和组件的拆分。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ban-ben-guan-li&quot;&gt;版本管理&lt;&#x2F;h5&gt;
&lt;p&gt;我们的组件包括第三方库都是通过 Cocoapods 来管理的，其中组件使用了私有库。之所以选择 Cocoapods，一个是因为它比较方便，还有就是用户基数比较大，且社区也比较活跃（活跃到了会时不时地触发 Github 的 rate limit，导致长时间 clone 不下来··· &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;4989#issuecomment-193772935&quot;&gt;见此&lt;&#x2F;a&gt;），当然也有其他的管理方式，比如 submodule &#x2F; subtree，在开发人员比较多的情况下，方便、灵活的方案容易占上风，虽然它也有自己的问题。主要有版本同步和更新&#x2F;编译慢的问题。&lt;&#x2F;p&gt;
&lt;p&gt;假如基础组件做了个 API 接口升级，这个升级会对原有的接口做改动，自然就会升一个中位的版本号，比如原先是 1.6.19，那么现在就变成 1.7.0 了。而我们在 Podfile 里都是用 &lt;code&gt;~&lt;&#x2F;code&gt; 指定的，这样就会出现主工程的 pod 版本升上去了，但是壳工程没有同步到，然后群里就会各种反馈编译不过，而且这个编译不过的长尾有时能拖上两三天。&lt;&#x2F;p&gt;
&lt;p&gt;然后我们就想了个办法，如果不在壳工程里指定基础库的版本，只在主工程里指定呢，理论上应该可行，只要不出现某个基础库要同时维护多个版本的情况。但实践中发现，壳工程有时会莫名其妙地升不上去，在 podfile 里指定最新的版本又可以升上去，所以此路不通。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题是 &lt;code&gt;pod update&lt;&#x2F;code&gt; 时间过长，经常会在 &lt;code&gt;Analyzing Dependency&lt;&#x2F;code&gt; 上卡 10 多分钟，非常影响效率。后来排查下来是跟组件的 Podspec 有关，配置了 subspec，且依赖比较多。&lt;&#x2F;p&gt;
&lt;p&gt;然后就是 pod update 之后的编译，由于是源码编译，所以这块的时间花费也不少，接下去会考虑 framework 的方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-xu-ji-cheng&quot;&gt;持续集成&lt;&#x2F;h3&gt;
&lt;p&gt;在刚开始，持续集成还不是很完善，业务方升级组件，直接把 podspec 扔到 private repo 里就完事了。这样最简单，但也经常会带来编译通不过的问题。而且这种随意的版本升级也不太能保证质量。于是我们就搭建了一套持续集成系统，大概如此&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575538180893.jpg&quot;
        width=&quot;1714&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个组件升级之前都需要先通过编译，然后再决定是否升级。这套体系看起来不复杂，但在实施过程中经常会遇到后端的并发问题，导致业务方要么集成失败，要么要等不少时间。而且也没有一个地方可以呈现当前版本的组件版本信息。还有就是业务方对于这种命令行的升级方式接受度也不是很高。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547778269.jpg&quot;
        width=&quot;1944&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于此，在经过了几轮讨论之后，有了新版的持续集成平台，升级操作通过网页端来完成。&lt;&#x2F;p&gt;
&lt;p&gt;大致思路是，业务方如果要升级组件，假设现在的版本是 0.1.7，添加了一些 feature 之后，壳工程测试通过，想集成到主工程里看看效果，或者其他组件也想引用这个最新的，就可以在后台手动把版本升到 0.1.8-rc.1，这样的话，原先依赖 &lt;code&gt;~&amp;gt; 0.1.7&lt;&#x2F;code&gt; 的组件，不会升到 0.1.8，同时想要测试这个组件的话，只要手动把版本调到 0.1.8-rc.1 就可以了。这个过程不会触发 CI 的编译检查。&lt;&#x2F;p&gt;
&lt;p&gt;当测试通过后，就可以把尾部的 &lt;code&gt;-rc.n&lt;&#x2F;code&gt; 去掉，然后点击「集成」，就会走 CI 编译检查，通过的话，会在主工程的 podfile 里写上固定的版本号 0.1.8。也就是说，podfile 里所有的组件版本号都是固定的。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547304396.jpg&quot;
        width=&quot;1986&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;zhou-bian-she-shi&quot;&gt;周边设施&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ji-chu-zu-jian-ji-zu-jian-de-wen-dang-demo-dan-yuan-ce-shi&quot;&gt;基础组件及组件的文档 &#x2F; Demo &#x2F; 单元测试&lt;&#x2F;h4&gt;
&lt;p&gt;无线基础的职能是为集团提供解决方案，只是在蘑菇街 App 里能 work 是远远不够的，所以就需要提供入口，知道有哪些可用组件，并且如何使用，就像这样（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575551851317.jpg&quot;
        width=&quot;2234&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这就要求组件的负责人需要及时地更新 README &#x2F; CHANGELOG &#x2F; API，并且当发生 API 变更时，能够快速通知到使用方。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gong-gong-ui-zu-jian&quot;&gt;公共 UI 组件&lt;&#x2F;h4&gt;
&lt;p&gt;组件化之后还有一个问题就是资源的重复性，以前在一个工程里的时候，资源都可以很方便地拿到，现在独立出去了，也不知道哪些是公用的，哪些是独有的，索性都放到自己的组件里，这样就会导致包变大。还有一个问题是每个组件可能是不同的产品经理在跟，而他们很可能只关注于自己关心的页面长什么样，而忽略了整体的样式。公共 UI 组件就是用来解决这些问题的，这些组件甚至可以跨 App 使用。（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575557095716.jpg&quot;
        width=&quot;1992&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;「组件化」是 App 膨胀到一定体积后的解决方案，能一定程度上解决问题，在提高开发效率的过程中，采坑是难免的，希望这篇文章能够带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>不可变对象的魅力</title>
            <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-power-of-immutable-objects/</link>
            <guid>https://limboy.me/posts/the-power-of-immutable-objects/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;10x Engineer: a developer who incurs technical debt so fast he appears more productive than the 10 developers tasked w&#x2F; cleaning his mess up&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我们都知道，全局变量应该尽量少用或不用，因为它会带来两个明显的问题：耦合和不确定性。有了它，单元测试就不好进行，即使通过了测试，也不能确保这个全局变量变了之后是否能通过测试。 我们经常使用的单例就有全局变量的意味：外部可以直接拿来用，并且可以在任何地方被修改。&lt;&#x2F;p&gt;
&lt;p&gt;为了加快开发速度，往往会以功能实现优先，其中的一个「方法」就是提供可变对象，比如像 OC 里的 &lt;code&gt;NSMutableDictionary&lt;&#x2F;code&gt;。前两天正好遇到一个与此有关的 case，可以拿出来说一下。&lt;&#x2F;p&gt;
&lt;p&gt;我们的网络层发送请求时，默认会带上一些系统参数，比如 iOS 系统版本，app 版本等。同时如果用户已经登录了，也会带上一些用户信息，比如 &lt;code&gt;token&lt;&#x2F;code&gt;。为了方便复用，我们每次请求都会把已有的参数放在一个自定义的网络请求类，假设这个类的名字叫&lt;code&gt;APIClient&lt;&#x2F;code&gt;。同时又允许外部动态添加一些请求参数，比如用户信息，是否启用调试等。&lt;&#x2F;p&gt;
&lt;p&gt;出于方便考虑，我们给 &lt;code&gt;APIClient&lt;&#x2F;code&gt; 类加了一个 &lt;code&gt;NSMutableDictionary&lt;&#x2F;code&gt; 属性 &lt;code&gt;builtinParameters&lt;&#x2F;code&gt;，这样外部只要拿到 &lt;code&gt;APIClient&lt;&#x2F;code&gt; 的单例，然后往这个属性里面添加额外的参数就可以了。&lt;code&gt;APIClient&lt;&#x2F;code&gt; 里会把这些参数组装成 &lt;code&gt;querystring&lt;&#x2F;code&gt; 发送给服务端。&lt;&#x2F;p&gt;
&lt;p&gt;就这样正常运行了一段时间，忽然有一天发现用户登出后，Ta 原先的一些登录信息还是被发送给了服务端。因为这个网络请求类并没有做过改动，所以排查起来没什么头绪。经过多次抓包和跟踪后，终于定位到了问题的原因：&lt;code&gt;builtinParameters&lt;&#x2F;code&gt; 这个属性在外部被改变了。更细致的原因跟一次重构有关，这里就不展开了。&lt;&#x2F;p&gt;
&lt;p&gt;所以可变对象会给调试和维护带来麻烦，尤其是这些对象多起来后，更是不好处理。&lt;&#x2F;p&gt;
&lt;p&gt;「可变对象」就像男人的承诺：不可信，不知道什么时候会因为什么原因发生改变。&lt;&#x2F;p&gt;
&lt;p&gt;「不可变对象」就不一样了，拿到的是什么，就是什么，不会改变，除非被换成了一个新的。&lt;&#x2F;p&gt;
&lt;p&gt;但「这世界唯一不变的就是变化」，不可变对象如何来应对这个充满变数的环境呢？&lt;&#x2F;p&gt;
&lt;p&gt;先来看一下这个「动画」&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;31.media.tumblr.com&#x2F;fe521bb54c25c173355632a3f5e029fe&#x2F;tumblr_nmobaa6IQa1ruhxczo1_500.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过连续快速地翻页来形成动画的假象，这主要是利用了人眼的&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;zh-hant&#x2F;%E8%A6%96%E8%A6%BA%E6%9A%AB%E7%95%99&quot;&gt;视觉停留&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;有点扯远了，但这跟「不可变对象」可变化，还挺像的，这些图像是静态的，不变的，但这本书让这些图像变了起来。这本书可以是一个类，其中的图片可以是一个 ivar，外部可以给这个 ivar 设置新的 value，这样对于 class 来说，就可以放心地使用这个 ivar，不用担心什么时候这个 ivar 自身会发生变化，比如 &lt;code&gt;[dict addObject:]&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 ReactJS+Flux 是如何使用 Immutable Objects 的。&lt;&#x2F;p&gt;
&lt;p&gt;先来说说 Flux，用一张图就能差不多描述清楚了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;flux&#x2F;img&#x2F;flux-simple-f8-diagram-with-client-action-1300w.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Flux 的一个特点是，数据是单向流动的，就像漏斗一样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Dispatcher&lt;&#x2F;code&gt; 是一个「分发器」，它的职责是接受所有的 Action，简单组装后，扔给 Store，其他的事情就不管了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Store&lt;&#x2F;code&gt; 是一个数据中心，当 Store 接收到 Dispatcher 过来的 Action 时，会根据这些 Action，生成新的 States，然后再把它传给 View。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;View&lt;&#x2F;code&gt; 拿到这些新的 States 后，会有选择的进行组件的更新。&lt;&#x2F;p&gt;
&lt;p&gt;这里的 States 就是一个不可变对象，Store 不会去修改 States 的某个属性，而是生成一个新的。但是生成一个新的成本不是会很大？是的，所以可以利用 &lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Copy-on-write&quot;&gt;Copy on Write&lt;&#x2F;a&gt; 等技术进行优化。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看看 ReactJS 拿到这个新的 property 后会如何处理，先来看一张图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-power-of-immutable-objects&amp;#x2F;should-component-update.png&quot;
        width=&quot;555&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;View 会对新的 property 和当前的 property 做比较，如果数据是一致的，那就什么也不做（就像 C2 一样），它下面的节点也不用比较了；如果数据不一致，再往下找，一直找到那[几]个需要更新的节点。&lt;&#x2F;p&gt;
&lt;p&gt;这整个过程没有使用到 Mutable Objects，但照样 Getting Things Done。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;Immutable Objects 和 Mutable Objects 有各自的使用场景，后者可以作为前者的容器。比如 Facebook 在&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2014&#x2F;10&#x2F;Facebook-ios-architecture&quot;&gt;他们的架构文章&lt;&#x2F;a&gt;中提到，他们的 Model 类是只读的，但 Model 寄生的对象可以更新 Model。我们可能习惯了使用可变对象，因为各种教程&#x2F;编程书籍上都是这么写的，但合理地使用「不可变对象」有时会带来更好的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2014&#x2F;10&#x2F;Facebook-ios-architecture&quot;&gt;How Immutable State Helped Facebook to Improve Its iOS App Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realm.io&#x2F;news&#x2F;andy-matuschak-controlling-complexity&#x2F;&quot;&gt;Controlling Complexity in Swift&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;minibooks&#x2F;domain-driven-design-quickly&quot;&gt;Domain Driven Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>MVVM without ReactiveCocoa</title>
            <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</link>
            <guid>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</guid>
            <description>&lt;p&gt;MVVM 是 MVC 模式的一种演进，它主要解决了 ViewController 过于臃肿带来的不易维护和测试的问题。其中 ViewModel 的主要职责是处理业务逻辑并提供 View 所需的数据，这样 VC 就不用关心业务，自然也就瘦了下来。ViewModel 只关心业务数据不关心 View，所以不会与 View 产生耦合，也就更方便进行单元测试。&lt;&#x2F;p&gt;
&lt;p&gt;View 是一个壳，它所呈现的内容都需要由 ViewModel 来提供，而 View 又不与 ViewModel 直接沟通，这时就需要 ViewController 来做中间的协调者。&lt;&#x2F;p&gt;
&lt;p&gt;ViewController 持有 View 和 ViewModel，当 VC 初始化时，会让 ViewModel 去取数据，简单来说就是调用 VM 的某个获取数据的方法。&lt;&#x2F;p&gt;
&lt;p&gt;使用 MVVM 最舒服的姿势是搭配 ReactiveCocoa。不过它的问题在于学习成本和维护成本比较高，在小团队中或许还可以尝试，当开发人员数量较多时就很难推起来了。这也是我们今天要讲的主题：如何不借助 ReactiveCocoa 来实现 MVVM。&lt;&#x2F;p&gt;
&lt;p&gt;先从数据的获取开始说起吧。在 ReactiveCocoa 里有一个类叫「RACCommand」，它的主要作用是执行某个会改变数据的操作，然后提供获取数据的方法，跟我们想要达到的目的很像，所以可以借鉴这个思路，写一个简单的 Command。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCompletionBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandConsumeBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCancelBlock)();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommandResult : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommand : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; executing;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) MGJCommandResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandCancelBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cancelHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 8
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 9
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;input&lt;&#x2F;code&gt; 是外部传过来的值，比如 user_id，当拿到数据后，调用下 completionHandler，这样 &lt;code&gt;result&lt;&#x2F;code&gt; 属性就会变化&lt;&#x2F;li&gt;
&lt;li&gt;有些操作，如 http 请求，需要手动取消&lt;&#x2F;li&gt;
&lt;li&gt;单独把 &lt;code&gt;error&lt;&#x2F;code&gt; 作为一个属性放出来，是因为很多数据请求操作都可能出错，当出错后，只需改变这个 error 属性即可。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;content&lt;&#x2F;code&gt; 存放了这个 Command 的数据处理结果。&lt;&#x2F;li&gt;
&lt;li&gt;标识了这个 Command 目前的运行状态，比如可以根据这个状态来显示 loading。&lt;&#x2F;li&gt;
&lt;li&gt;每次 Command 执行完一个任务后，result 都会改变，外部可以 KVO 这个 result，然后就可以实时获取最新的结果了。&lt;&#x2F;li&gt;
&lt;li&gt;Command 的执行逻辑，如果实现了 &lt;code&gt;cancelHandler&lt;&#x2F;code&gt; 的话，外部调用 &lt;code&gt;cancel&lt;&#x2F;code&gt;，这个 Handler 就会被触发。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来触发 Command 的执行，同时可以传一个参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来取消 Command 的执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;实现起来也蛮简单的，这里就不多说了。用起来大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewModel.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MGJCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConsumeHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler) {
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [FollowRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getFollowList:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)input success:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;users) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usersToFollow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kFollowExpertSearchSucceedSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } failure:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(StatusEntity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ViewController 里的用法大概像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didTapFollowButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 根据 button 找到 userID
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand&lt;&#x2F;span&gt;&lt;span&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;userID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是这样，VC 本身不处理业务逻辑，都交给 ViewModel 去处理，而这些数据请求的结果处理又有不同的处理方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;delegate&quot;&gt;Delegate&lt;&#x2F;h3&gt;
&lt;p&gt;当 ViewModel 拿到数据后，可以把结果以 Delegate 的方式通知 VC，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didFollowUserWithResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)result
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt; doSomeAnimation];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样做的好处是比较符合苹果既有的设计模式，而且也可以通过查看 Delegate 协议来知道 VM 暴露了哪些接口供外部使用。&lt;&#x2F;p&gt;
&lt;p&gt;不过这种方法少了点灵活性，比如需要联合多个属性的变化来做一些事情时，处理起来就会比较麻烦，这也是 RAC 强大的地方。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kvo&quot;&gt;KVO&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 是基于 KVO 构建的，所以也可以用 KVO 来让 VC 获取 VM 的变化。&lt;&#x2F;p&gt;
&lt;p&gt;但我们都知道 KVO 的槽点比较多，比如使用起来不方便，用完还要记得移除等。这里可以使用 Facebook 开源的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;KVOController&quot;&gt;KVOController&lt;&#x2F;a&gt;，它比较好的处理了 KVO 存在的一些问题，同时又能发挥 KVO 带来的便捷性。&lt;&#x2F;p&gt;
&lt;p&gt;有了它我们就能在一个地方把 VM 的更新处理掉了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;KVOController&lt;&#x2F;span&gt;&lt;span&gt; observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt; keyPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionNew&lt;&#x2F;span&gt;&lt;span&gt; block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;observer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;target, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;change) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;newValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; change[NSKeyValueChangeNewKey];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doSomething with the newValue
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对 VM 其他 keyPath 的处理也都可以放到这里
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果觉得这样的写法还是太麻烦，可以做一层简单的封装，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; use newValue to update view
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是会好一点，使用 KVO 比 Delegate 好的一点是不用再额外声明协议和方法，而且支持 block，使用起来也会方便些。&lt;&#x2F;p&gt;
&lt;p&gt;对于像 &lt;code&gt;error&lt;&#x2F;code&gt; 这样很多操作都会产生同样结果的场景，可以单独拿出来，作为 ViewModel 的一个属性，使用时，直接 KVO 这个属性即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-jie-chu-li&quot;&gt;细节处理&lt;&#x2F;h3&gt;
&lt;p&gt;如果不涉及到 TableView 等会出现复用场景的地方，MVVM 使用起来还是比较方便的。如果有了 TableView，又要做一些额外的处理。&lt;&#x2F;p&gt;
&lt;p&gt;一般来说，VC 可以带一个 VM，那如果出现 Cell 时怎么办，Cell 里又包含了按钮，按钮又需要数据请求又怎么处理？这些都是比较常见的场景，也可以通过 MVVM 来解决。&lt;&#x2F;p&gt;
&lt;p&gt;我们知道 VM 的职责是为 View 提供数据支持，Cell 也是一个 View，那么为 Cell 配备一个 VM
不就可以了么。&lt;&#x2F;p&gt;
&lt;p&gt;这样的话，VC 的 VM 需要包含一个数组，里面的元素是 CellVM，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView cellForRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[tableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dequeueReusableCellWithIdentifier:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Cell&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forIndexPath:indexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; cell 可能会用到 cellVM 里的 Command，所以在这里处理 command 的执行结果
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; update cell after like
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然仅仅如此是不够的，我们需要找个恰当的时机把 KVO 移除，避免多次监听。&lt;code&gt;UITableViewDelegate&lt;&#x2F;code&gt; 里的这个方法就很适合。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView didEndDisplayingCell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)cell forRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unobserve:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不过这里也要讲究一个平衡，如果 Cell 的类型比较多，且涉及 Command 的地方不多，只是做呈现方面的工作，直接使用 Entity 会更方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 尽量不涉及业务逻辑，让 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 去做这些事情。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 只是一个中间人，接收 &lt;code&gt;View&lt;&#x2F;code&gt; 的事件、调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的方法、响应 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的变化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 不能包含 View，不然就跟 View 产生了耦合，不方便复用和测试。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 之间可以有依赖。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 避免过于臃肿，不然维护起来也是个问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;MVVM 并不复杂，跟 MVC 也是兼容的，只是多了一个 ViewModel 层，但就是这么一个小改动，就能让代码变得更加容易阅读和维护，不妨试一下吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS 统计打点那些事</title>
            <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-analytics/</link>
            <guid>https://limboy.me/posts/ios-analytics/</guid>
            <description>&lt;p&gt;一个环节，App 的运行状态、改版后的效果、用户的各种行为等都需要打点，市面上也有不少可供选择的第三方库。 假设产品有这么个需求：当用户在详情页点击购买按钮时，记录一下事件。我们实现起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    [XXXAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个需求就这样轻松搞定了，但细细想想还是有不少问题的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;页面上会有其他的 Button，可能每个 Button 都要放上这么一段代码。&lt;&#x2F;li&gt;
&lt;li&gt;这些统计其实跟具体的业务无关，没必要跟业务代码混杂在一起，不优雅。&lt;&#x2F;li&gt;
&lt;li&gt;当改版或者重构时，有可能忘了把相应的打点代码迁移过去。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以需要一种更好的方式来做这件事，这就是使用 AOP(&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Aspect-oriented_programming&quot;&gt;Aspect-Oriented-Programming&lt;&#x2F;a&gt;)，翻译过来就是「面向切面编程」&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;简单来说，就是可以动态的在函数调用的前后插一段代码。iOS 可以使用 Pete Steinberger 开发的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; 这个库，大致原理是在 runtime 层，通过 swizzle method 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;来看一个小 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样在 &lt;code&gt;UIViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewWillAppear:&lt;&#x2F;code&gt; 被调用后，还会再调一下我们定义的 Block，这段日志就会被输出。而打点正好符合这种场景：正事干完之后，额外干一些跟业务无关的事情。&lt;&#x2F;p&gt;
&lt;p&gt;上面的例子，我们通过 AOP 来做的话，大概就是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; no need to call [XXXAnalytics event:]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; AppDelegate.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [DetailViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样统计代码就从业务代码中剥离出来了。但是又产生了一个新问题，多个 Button Event，岂不是要写很多行这样的代码，「重复」这样的事情，作为一个程序员怎么能忍，简单，造一个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)event
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:event];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:ListViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(followButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kAnotherEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来又干净了些。这时，产品经理又提了个需求：当这个按钮点击时，如果已经登录了，发送 EventA，如果没有登录则发送 EventB，也就是说，不再只是 &lt;code&gt;[XXXAnalytics event:]&lt;&#x2F;code&gt; 这么简单了，还需要加上额外的逻辑，这也难不倒我们，加上一个 &lt;code&gt;block&lt;&#x2F;code&gt; 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass
&lt;&#x2F;span&gt;&lt;span&gt;                   selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector
&lt;&#x2F;span&gt;&lt;span&gt;               eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo))eventHandler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(eventHandler) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aspectInfo);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 使用
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) eventHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loggedIn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventA] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventB];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好了，现在只要不是太复杂的打点逻辑(那些需要方法上下文变量的)我们都能应付了，接下来就该等产品来验收了。产品搬了个凳子坐在身边，然后点一下 Button，看一下 Console，被几轮蹂躏后，产品也慢慢地接受了这种验收方式。后来某一天，忽然发现某一项或某几项数据有异常，然后找到开发，瞄了一眼：哦，这个方法被重构了。或者新加的方法忘了加统计了。只能等到下个版本再加上了，如果只是一般的统计数据倒还好，跟钱相关的就麻烦了。&lt;&#x2F;p&gt;
&lt;p&gt;那么有没有一种直观的验证方式呢？当然，程序员是万能的呀。一个理想的状况是，产品打开 App 后，开启某个开关就能看到所有会发送 Event 的按钮，就像这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-analytics&amp;#x2F;analytics_highlight.jpg&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中数字代表了 &lt;code&gt;EventID&lt;&#x2F;code&gt;。如何实现呢？还记得注册事件时，我们有传入 &lt;code&gt;class&lt;&#x2F;code&gt; 和 &lt;code&gt;selector&lt;&#x2F;code&gt; 么，一般我们都会有一个 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt;，那么就可以在 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewDidAppear:&lt;&#x2F;code&gt; 里做点文章了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; BaseViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidAppear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)animated
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidAppear:animated&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取已经注册过的 classes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[OurAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;registeredClasses&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateKeysAndObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectors, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isKindOfClass:NSClassFromString(className)]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 如何根据 selector 找到它的宿主？
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以现在问题就剩下，如何根据 &lt;code&gt;selector&lt;&#x2F;code&gt; 找到对应的 Button，这里要注意，有些 Button 可能要等网络请求完成才会出现，比如 &lt;code&gt;TableViewCell&lt;&#x2F;code&gt; 里的 Button。&lt;&#x2F;p&gt;
&lt;p&gt;没有想到太方便的方法，简单粗暴点就是设置个 Timer 每隔一段时间扫一下 subviews，如果是 button 或 包含 tapGesture 的，就拿它们的 action 对比一下，如果 match 就可以高亮那个 button &#x2F; view 了。&lt;&#x2F;p&gt;
&lt;p&gt;EventID 也一样，之前在注册时也会传一个 EventID 过来，这里直接显示出来即可。对于那些传 &lt;code&gt;eventHandler&lt;&#x2F;code&gt; 的就不行了。&lt;&#x2F;p&gt;
&lt;p&gt;所以理论上是可行的，性能上会稍微有点损耗，尤其是当 subViews 的结构比较复杂时，不过只是内部用来做验证，所以这也不是什么问题。&lt;&#x2F;p&gt;
&lt;p&gt;看起来效果已经不错了，有没有可能让这套体系再灵活一些？比如可以从后端制定打点规则？客户端只是读取一个配置文件，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; analyticsRules 是从配置文件中读取出来的
&lt;&#x2F;span&gt;&lt;span&gt;    [analyticsRules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rules, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;class&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;selector&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eventID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;eventID&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:klass seletor:seletor event: eventID];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那如果在后台的时候填错了 Class 或 Selector 怎么办？还好有 &lt;code&gt;objc_getClassList&lt;&#x2F;code&gt; 和 &lt;code&gt;class_copyMethodList&lt;&#x2F;code&gt; 这两个运行时方法，有了它们就可以在 App 启动时扫一遍已注册的类（过滤掉 UI &#x2F; NS 开头的），然后将它们的 seletor 也一并保存下来发送给服务端，当然这种操作只需在适当的时机做一下就可以了，比如集成打包时。&lt;&#x2F;p&gt;
&lt;p&gt;现在，这套体系就比较完整了。当然这只是我的一些构想，并没有在实践中尝试过，所以肯定会踩到各种各样的坑，不过至少看起来是个可行的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>学习如何学习</title>
            <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learning-how-to-learn/</link>
            <guid>https://limboy.me/posts/learning-how-to-learn/</guid>
            <description>&lt;p&gt;在「如何学习」这点上，一直觉得自己做的不够好，曾经想学吉他，坚持了两个礼拜就以「手指太短，不适合」终结了，后来想学数学，却终究连翻开书的勇气都没有，工作一忙更是顾不上这些了。所以在 Youtube 上看到 Barbara Oakley 的 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vd2dtkMINIw&quot;&gt;Learning How to Learn&lt;&#x2F;a&gt; 时，才发现自己在学习上的各种问题，收获颇多。如果有兴趣的话，建议直接看视频，讲解地很有条理且生动。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Barbara_Oakley&quot;&gt;Barbara Oakley&lt;&#x2F;a&gt; 是系统工程学博士，但对于「学习」方面也颇有研究，在 &lt;a href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;learning-001&#x2F;lecture&quot;&gt;Coursera&lt;&#x2F;a&gt; 上也有相应的课程。还出了几本书，比如 &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Mind-For-Numbers-Science-Flunked-ebook&#x2F;dp&#x2F;B00G3L19ZU&quot;&gt;A Mind For Numbers: How to Excel at Math and Science&lt;&#x2F;a&gt;，这里对于她在 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vd2dtkMINIw&quot;&gt;Google 的分享&lt;&#x2F;a&gt;做一个简单的翻译和摘要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhai-yao&quot;&gt;摘要&lt;&#x2F;h3&gt;
&lt;p&gt;(主持人)我记得查理芒格说过，他认识的人中没有一个不每天阅读的，还把巴菲特形容为一台学习机器。那么如何才能成为一个高效学习者呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zheng-wen&quot;&gt;正文&lt;&#x2F;h3&gt;
&lt;p&gt;我小的时候，想要学习其他语言，但大学的助学金不太容易拿到，而我又迫切想要学习一门语言，然后我想到了一个既可以学习语言，又能得到些收入的方法，那就是参军。然后我确实学了一门语言：俄语。虽然俄国的环境不怎么样，但我喜欢冒险和新的视角。我回想在西点的工程师们，他们解决问题的能力非常出众，往往能想到我想不到的。然后我就想，我能不能也达到跟他们一样的程度？有学生提了这么个问题：如何改变你的大脑。然后我就去了解世界顶级的教授他们是如何做到让学生更好地学习工程学、数学、化学的？他们自己又是如何学习的？跟他们接触后发现，他们常用的有隐喻和类比。接下来我想跟大家分享下学习的关键因素。&lt;&#x2F;p&gt;
&lt;p&gt;我们都知道大脑是很复杂的，那么来简化一下，可以想象成大脑以两种不同的模式工作。第一个是「专注」，另一个则是「发散」。我们用一个弹球机来描述这两种状态。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_analogy.jpg&quot;
        width=&quot;270&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设大脑里有一个弹球机&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_brain.png&quot;
        width=&quot;814&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;底部有一个触发开关，有很多的槽点密集排布。比如，你已经知道了乘法，然后要处理一道乘法运算题。当你处于「专注」模式时，会运用已有的模型，在「乘法」的槽点附近打转，也就是结合以前的学习经验去寻找答案。如果你要解决的问题是基于新的模型，比如你已经知道了乘法运算，但从没有接触过除法运算，如何掌握这个新的模型呢，这时就要用到「发散」了。当处于「发散」状态时，「槽点」之间的距离会变大，你无法通过局限在某一点来解决问题，但至少能找到一种新的思考事物的角度。当你在解决一个非常困难的问题时，不要逼自己长时间处于「专注」状态，这样就会局限在一个狭小的范围。所以需要进入到另一种模式，也就是「发散」模式。简单来说，就是脱离当前的工作环境，出去走走，冲个澡等，总之是让大脑脱离「专注」状态。我们来举一个例子吧。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;salvador-dali.png&quot;
        width=&quot;236&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Salvador_Dal%C3%AD&quot;&gt;Salvador Dali&lt;&#x2F;a&gt; 是 20 世纪著名的超现实主义画家，他最爱干的事情就是，当遇到一个棘手的问题时，会躺在椅子上，放松再放松，同时手里握着一把钥匙。当足够放松到快要睡着时，钥匙就会掉在地上，与地板碰撞的声音会把他叫醒，然后就可以带着从「发散」状态收获的想法继续进入到「专注」模式。&lt;&#x2F;p&gt;
&lt;p&gt;你可能会觉得这个对艺术家有用，那么对工程师是否也同样有效呢？据传，爱迪生也有类似的行为爱好，只不过不是钥匙，而是滚珠轴承。&lt;&#x2F;p&gt;
&lt;p&gt;当你在解决一个问题时，即使已经有成千上万的人已经解决过了，但对你来说确实第一次，你也可以试试类似的方法。&lt;&#x2F;p&gt;
&lt;p&gt;当你处于「专注」状态时，并没有利用到其他更多的关联，这也是为什么在两种状态间切换是如此重要。就像你不能一下吃成大胖子一样，神经系统也是需要一段时间来适应新的学习和思维方式。&lt;&#x2F;p&gt;
&lt;p&gt;你或许会说，我有拖延症，那我们就来说说拖延症。拖延症的成因是当你面对不喜欢做的事情时，大脑的「痛感中心」就会被激活。所以当你看一本不喜欢的书时，会感觉到隐痛，这种痛就像手指被锤子砸了一样，通常会有两种做法：第一种是花大概 20 分钟去搞定它，然后痛感就会慢慢降低进而消失。但如果你像大多数人一样，将注意力集中到其他做起来更舒服的事情上，就会马上就会感到好些了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;procrastination.png&quot;
        width=&quot;1798&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从某种程度上来说，拖延症也是会上瘾的，这对你的生活是非常有害的。最有效的方式是使用「番茄工作法」，通常来说设置 25 分钟为一个「番茄时间」，然后关闭其他所有会打扰你的一切。在这 25 分钟内，集中精力进入到「专注」模式。由于你专注于当前的任务，而不是「我必须完成它」的痛苦，做起来就会容易很多。当到时间后，给自己点奖励，出去走走或上上网、聊聊天都行。有一点要注意的是，不要以完成任务为目标，时间到了，就休息。它能帮助你跨过痛苦期，进入 flow 状态。还有就是不要一下子做太多的「番茄」，一步一步来，慢慢适应这套系统。&lt;&#x2F;p&gt;
&lt;p&gt;还有跟学习很相关的一点是睡眠。常常有人说考试前要睡好觉，事实上，睡眠在各种层面上都很重要。当处于非睡眠状态时，代谢物会在细胞间产生，它们就像垃圾一样在那，而且越积越多，这会影响你的判断。这也是为什么当你长时间工作时，逻辑会越来越乱。当你睡觉时，这些细胞会缩小，然后垃圾就被冲走了，就像重新打扫了房间一样。&lt;&#x2F;p&gt;
&lt;p&gt;根据神经学上的发现，将学习分为多个短期学习、睡觉，多个短期学习、睡觉，这样的循环系统，对于构建神经网络非常有帮助，这也是高效学习的秘诀之一。&lt;&#x2F;p&gt;
&lt;p&gt;人每天都会长出新的神经元，有两种方式可以让这些神经元存活并成长。一个就是将自己暴露在新的环境中，这也是为什么旅行会很有帮助，这些新元素能让新出生的神经元活下来。还有一个让新长出来的神经元活下来的方法，很简单，就是锻炼。不需要励志成为奥林匹克运动员或者成为马拉松选手，即使只是简单的散步也是非常有效的。但即使只有几天的锻炼也会带来更大的效果，它会增强新神经元的存活和生长。&lt;&#x2F;p&gt;
&lt;p&gt;接下来聊聊工作记忆（Working Memory），工作记忆就是临时记住一些信息，以前常说有 7 个槽可以用，这也是为什么你能记住 7 位数的电话号码，但事实上大概只有 4 个槽可以用，所以当你用工作记忆来记一些东西时，可以想象有一只章鱼在掌控着这几个槽，并建立连接，这也是为什么不能一次记住太多的想法。当你多任务同时开工时，相当于把章鱼的触角从仅有的几个槽中拿走一个或多个，这会让你变得笨一点。而发散模式则是有更多的连接。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;octopus.png&quot;
        width=&quot;658&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那如何把短期记忆变成长期记忆呢，最好的方法就是练习，练得越多，神经元就会长得越长，扎得越深。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;neural-die.png&quot;
        width=&quot;552&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你不练习，那么这些「蝙蝠」就会在模式形成长期记忆前把它叼走，这也是为什么有时觉得已经理解了某个概念，然后走开了，过了两天，这些内容都被「蝙蝠」叼走了，然后就记不起什么了。所以最好的方式就是带一定间隙的重复练习(Spaced Repetition)，比如周一、周二、周三、周五、周日练习。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说 Chunk。假设你要拼一副图，如果不明白每一块代表的含义，就会有无从下手的感觉，就像中间的那个圆一样，你能看到它，它也是个 Chunk，但却无法与其他的 Chunk 产生联系，这也是为什么死记硬背的效果会很差的原因。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.png&quot;
        width=&quot;1642&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当你在研究某个课题时，你其实在创建一个 Chunk 群，这些 Chunks 会跟其他的 Chunks 生关联，这也是伟大创意的产生之源。这时往往会得到一些支离破碎的 Chunks，如果都学会了，就会形成一副完整的图片，即使少了其中几片。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.jpg&quot;
        width=&quot;1020&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但如果你不重复练习，并且深刻掌握 Chunks，也能把 Chunks 拼起来，只不过是模糊的，而且很难拼成全图。&lt;&#x2F;p&gt;
&lt;p&gt;不同领域的 Chunks，有可能长得差不多，这样就可以借鉴原有的 Chunk 来学习新的 Chunk。比如你是一个物理学家，再去学经济学会更简单些，因为其中的一些 Chunks 非常相像。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;multi-chunks.png&quot;
        width=&quot;742&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后给大家一些关于学习的建议：&lt;&#x2F;p&gt;
&lt;p&gt;测试是必要且重要的。Test yourself on everything, all the time。同样的时间用来做测试和学习，前者会让你收获更多。使用卡片(Flashcards)，卡片不是专门用来学习语言的，卡片是一个通用的学习手段，诗人们会用它记忆诗句，以此来更强烈地感受诗词带来的震撼。&lt;&#x2F;p&gt;
&lt;p&gt;记得做「家庭作业」，不要只做一次，挑其中的重点多做几次，即使只是在大脑里过一遍，确保自己真的掌握了，这样你就得到了一组 Chunks。&lt;&#x2F;p&gt;
&lt;p&gt;最有效的方法还是「回想」，尤其是当你在解决困难的问题时。当你在阅读文章时，试着离开书本，回想一下能否记起其中的要点，这对于理解内容有很大的帮助，比反复读和思维导图效果都要好。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个简单的技巧是向其他人阐述你所理解的东西，并且假设对方只是一个 10 岁的小孩（费曼学习法）。如果你能找到一个简单清楚的描述，就能更加深入地理解。你甚至可以把自己放到问题发生的场景中。&lt;&#x2F;p&gt;
&lt;p&gt;当你处于专注模式时，会有一种「我已经掌握了」的感觉，这时可以跟其他处于 diffuse 模式的人交流下想法，有时会帮助你纠正错误。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我们都说要追随你的热情，但热情只是让你擅长的东西变得更擅长，而有些东西要花很长的时间才能擅长，所以不仅仅要追随你的热情，还要扩大你的热情，然后生活质量就会有大幅度的提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Advanced NSOperation</title>
            <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/advanced-nsoperation/</link>
            <guid>https://limboy.me/posts/advanced-nsoperation/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;这篇文章是对 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2015&#x2F;?id=226&quot;&gt;WWDC 2015 Session 226: Advanced NSOperations&lt;&#x2F;a&gt; 的一个小结，在那个视频中，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;davedelong&quot;&gt;Dave DeLong&lt;&#x2F;a&gt; 分享了 NSOperation 的高级玩法，WWDC App 就是基于这套玩法做的，还是挺开阔思路的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsoperation-he-nsoperationqueue-jian-jie&quot;&gt;NSOperation 和 NSOperationQueue 简介&lt;&#x2F;h3&gt;
&lt;p&gt;我们知道 NSOperation 可以执行一些后台操作，如 HTTP 请求，在 iOS 4.0 之前是基于 NSThread 来实现的，iOS 4.0 带了 GCD，NSOperation 底层也基于 GCD 重写了底层实现。&lt;&#x2F;p&gt;
&lt;p&gt;所以 NSOperation 是 GCD 的高层封装，同时也带来了一些更加便利的功能，比如取消任务，设置依赖等。在进入高级玩法前，先简单的介绍下 NSOperation 和 NSOperationQueue。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsoperationqueue-maxconcurrentoperationcount&quot;&gt;NSOperationQueue maxConcurrentOperationCount&lt;&#x2F;h4&gt;
&lt;p&gt;这个属性表示的是 NSOperationQueue 最多可以同时处理几个任务，假如我们希望它一次只处理一个，也就是线性 Queue，可以设置 &lt;code&gt;maxConcurrentOperationCount = 1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-1.png&quot;
        width=&quot;674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中间的点表示任务的状态，在上一个任务完成前，下一个任务不会被执行，因为只有一个 worker。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望一次能处理多个，将这个值设置为大于 1 即可，或者直接使用默认值，系统会自动设置一个合理的最大值。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-2.png&quot;
        width=&quot;674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;nsoperation-cancel&quot;&gt;NSOperation cancel&lt;&#x2F;h4&gt;
&lt;p&gt;从上面的图可以看到，正在被执行的任务的状态跟在后面排队的状态是不一样的，有这么几种状态：pending, ready, executing, finished, cancelled。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-3.png&quot;
        width=&quot;297&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之前提到过 NSOperation 一个很重要的特性是可以被取消，但不同状态的取消处理也不一样。比如当 Operation 处于 pending, ready 状态时，系统可以去看一下这个 Operation 是否已经被取消了(判断 self.cancelled)，如果是的话，就不执行任务了。但是当 Operation 处于 executing 状态时，取消的操作就只能自己处理了，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyOperation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSOperation
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelled&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; executing
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsoperation-dependency&quot;&gt;NSOperation dependency&lt;&#x2F;h4&gt;
&lt;p&gt;NSOperation 还有一个很重要的特性是可以设置依赖&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-4.png&quot;
        width=&quot;301&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;任务 A 需要等待 任务 B 和 任务 C 完成，才能被执行，而任务 B 需要等到 任务 D 完成才能被执行。&lt;&#x2F;p&gt;
&lt;p&gt;当然前提是这些 Operation 都需要被放到某个 Queue 里，这样它们的状态才会发生改变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji-wan-fa&quot;&gt;高级玩法&lt;&#x2F;h3&gt;
&lt;p&gt;开发 App 的过程中，有一些逻辑是可以共用的，比如登录、网络状况等，最好可以组装起来，就像超能陆战队里的 megabot 一样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;megabot.jpg&quot;
        width=&quot;480&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于前面提到的 NSOperation &#x2F; NSOperationQueue 的一些特点，苹果的工程师们想到了他们的解决方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;condition&quot;&gt;Condition&lt;&#x2F;h4&gt;
&lt;p&gt;Condition，也就是条件，它可以被附加到 Operation 上，只有当 Condition 被满足时，Operation 才能被执行。比如只有在有网络的情况下才能进行交易，这时「网络状况」就是附加给「交易」的 Condition。&lt;&#x2F;p&gt;
&lt;p&gt;一个 Condition 主要包含了 3 个方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation?
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;func evaluateForOperation(operation: Operation, completion: OperationConditionResult -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这个属性用来表明这个 Condtion 是否是排他的，如果是的话，同一时间只能出现一个该类型的实例，类型的指定是通过设置 &lt;code&gt;name&lt;&#x2F;code&gt; 来实现的。&lt;&#x2F;li&gt;
&lt;li&gt;为传入的 operation 返回一个依赖的 operation，比如「喜欢」这个 Operation 需要用户已处于登录状态，那么「登录」这个 Condition 的这个方法就可以返回一个「登录」的 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;这个方法是查看这个 Condition 的执行结果，比如前面的「登录」Operation 结束后，系统将要执行「喜欢」这个 Operation，然后这个方法就会被触发，如果没有错误发生的话，就执行「喜欢」，如果有错误发生「喜欢」就会自动结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以总结起来 Condition 主要干了这么三件事&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-condition.png&quot;
        width=&quot;412&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;来看一个简单的 Condition (来自 WWDC Sample)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ReachabilityCondition: OperationCondition {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; hostKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Host&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Reachability&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(host: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; host
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;evaluateForOperation(operation: Operation, completion: OperationConditionResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        ReachabilityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;requestReachability(host) { reachable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; reachable {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Satisfied)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSError(code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ConditionFailed, userInfo: [
&lt;&#x2F;span&gt;&lt;span&gt;                    OperationConditionKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hostKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host
&lt;&#x2F;span&gt;&lt;span&gt;                ])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Failed(error))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Condtion 初始化时可以传参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;这个 Condition 没有生成一个 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;，因为生成依赖 Operation 的目的是当这个 Operation 运行完后，可以在 evaluateForOperation 时获取之前的运行结果，而这里直接调用 ReachabilityController 的 requestReachability 方法就可以了，所以就免去了这一步。&lt;&#x2F;li&gt;
&lt;li&gt;当结果符合预期时，调用 &lt;code&gt;completion(.Satisfied)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;当出现异常时，调用 &lt;code&gt;completion(.Failed(error))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;operation&quot;&gt;Operation&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Operation&lt;&#x2F;code&gt; 继承自 &lt;code&gt;NSOperation&lt;&#x2F;code&gt;，同时添加了一些方法，主要可以分为 4 部分&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;li&gt;
&lt;li&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;li&gt;
&lt;li&gt;添加 Observer&lt;&#x2F;li&gt;
&lt;li&gt;添加 Condtion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;she-zhi-zhuang-tai-bian-liang-tong-shi-shou-dong-she-zhi-kvo&quot;&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;h5&gt;
&lt;p&gt;在系统提供的状态的基础上，又添加了一些新的状态，如 &lt;code&gt;EvaluatingConditions&lt;&#x2F;code&gt;, &lt;code&gt;Pending&lt;&#x2F;code&gt; 等，这些状态的改变都需要触发内置状态的 KVO，如 &lt;code&gt;isExecuting&lt;&#x2F;code&gt;, &lt;code&gt;isFinished&lt;&#x2F;code&gt;, &lt;code&gt;isReady&lt;&#x2F;code&gt; 等。通常的做法会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;willChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Executing;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当只有少量的状态改变时，在前后包一层还可以接受，但如果多了的话，就不美观了，这时可以使用 KVO 的一个方法 &lt;code&gt;+ keyPathsForValuesAffectingValueForKey:&lt;&#x2F;code&gt;，它的意思是，哪些 keyPaths 的改变会导致 &lt;code&gt;Key&lt;&#x2F;code&gt; 发生变化。所以可以定义这几个方法，然后正常设置 &lt;code&gt;state&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsReady() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsExecuting() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsFinished() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然，这只是完成了一半，系统知道 state 变了后， &lt;code&gt;isReady&lt;&#x2F;code&gt; 会变，然后就会调用 &lt;code&gt;ready&lt;&#x2F;code&gt; 方法，所以这三个方法我们也要一并覆盖掉。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; executing: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; finished: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Finished
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; ready: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; state {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Pending:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省去不相关的代码
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;                evaluateConditions()
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Until conditions have been evaluated, &amp;quot;isReady&amp;quot; returns false
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Ready:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; cancelled
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;可以看到，当系统在问某个 Operation 是否 ready 时，&lt;code&gt;evaluateConditions&lt;&#x2F;code&gt; 方法会被触发，这里包含了该 Operation 的所有 Conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 的执行结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;zhi-xing-conditions-de-evaluateforoperation-fang-fa&quot;&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;evaluateConditions() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Pending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;evaluateConditions() was called out-of-order&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;EvaluatingConditions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    OperationConditionEvaluator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;evaluate(conditions, operation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) { failures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extend(failures)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Ready
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;遍历当前 Operation 的 conditions，执行它们的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法，然后将错误保存在 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 里，同时将当前的状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;或许你会问，如果出现错误，是不是表示条件不满足，如果条件不满足，为什么还要将状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;？ 这是因为当状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt; 后，就会执行 &lt;code&gt;main&lt;&#x2F;code&gt; 方法，在那里会对 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 做统一判断。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override final func &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Ready, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;This operation must be performed on an operation queue.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; _internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled {
&lt;&#x2F;span&gt;&lt;span&gt;        state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; observers {
&lt;&#x2F;span&gt;&lt;span&gt;            observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationDidStart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        execute()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        finish()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里出现了 observer，当 Operation 处于不同状态时，会调用 observers 的不同方法&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;tian-jia-observers&quot;&gt;添加 Observers&lt;&#x2F;h5&gt;
&lt;p&gt;observer 的实现还是比较简单的，首先定义一个 Protocol，所有的 observer 都需要实现这个 Protocol 里的方法，然后 Operation 内置一个数组作为容器，&lt;code&gt;addObserver&lt;&#x2F;code&gt; 时，将 observer 添加到容器，当处于不同状态时，遍历容器里的 observer，调用相应的方法。&lt;&#x2F;p&gt;
&lt;p&gt;这不免让我们想起了 delegate，跟 delegate 相比，observer 的好处就在于可以指定多个观察者，而 delegate 只能指定一个。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;tian-jia-condtions&quot;&gt;添加 Condtions&lt;&#x2F;h5&gt;
&lt;p&gt;跟 observer 的实现思路基本一致。你或许会问，添加的这些 Conditions 什么时候会被触发呢？没错，就是在将 Operation 添加到 OperationQueue 时。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operationqueue&quot;&gt;OperationQueue&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;OperationQueue&lt;&#x2F;code&gt; 也是继承自系统的 &lt;code&gt;NSOperationQueue&lt;&#x2F;code&gt;，同时重写了 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法，这个方法主要做了 3 件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;给 Operation 添加 observer&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;gei-operation-tian-jia-observer&quot;&gt;给 Operation 添加 observer&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver(
&lt;&#x2F;span&gt;&lt;span&gt;    startHandler: nil,
&lt;&#x2F;span&gt;&lt;span&gt;    produceHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    finishHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationQueue?(q, operationDidFinish: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, withErrors: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(delegate)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;我们前面说过，一个 Operation 可以生成一个新的 Operation，这个 Operation 生成后也需要被放到 Queue 里，这个放置的过程就是在这个 delegate 里实现的。&lt;&#x2F;li&gt;
&lt;li&gt;operationQueue 自己有一个 delegate，当 queue 里的一个 operation 执行完时，会向 delegate 报告。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-dependencyforoperation&quot;&gt;处理 Operation 的 dependencies 的 dependencyForOperation&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Extract any dependencies needed by this operation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dependencies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;    $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(op)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; dependency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; dependencies {
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDependency(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就很简单了，调用 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt; 方法，拿到 operation，然后将当前的 op 依赖该 operation，同时将这个 operation 放到 queue 里，所以在 conditions 的 operations 执行完之前，op 是不会执行的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-pai-ta-xing&quot;&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; concurrencyCategories: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap { condition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isMutuallyExclusive { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;concurrencyCategories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Set up the mutual exclusivity dependencies.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; exclusivityController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ExclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedExclusivityController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(op, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(BlockObserver { operation, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;removeOperation(operation, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这里可能看不出「排他」的实现，因为是在 &lt;code&gt;exclusivityController&lt;&#x2F;code&gt; 里面实现的，调用了它的 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法后，它会去查看这个类型的数组是否为空，如果不为空，就让这个 operation 依赖数组的最后一个。这样在之前的 operation 执行完之前，这个 operation 是不会被执行的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;p&gt;有了 Operation 和 OperationQueue 之后，就可以开始生产 megabot 了，来看一个「查看原网页」的 Operation，这个 Operation 的作用就是展示传入的 URL。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SafariServices
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; An `Operation` to display an `NSURL` in an app-modal `SFSafariViewController`.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: Operation {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; URL: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(URL: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;URL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URL
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;execute() {
&lt;&#x2F;span&gt;&lt;span&gt;        dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UIApplication&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedApplication()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;keyWindow?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rootViewController {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; safari &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; SFSafariViewController(URL: URL, entersReaderIfAvailable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            safari&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;presentViewController(safari, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, completion: nil)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: SFSafariViewControllerDelegate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;safariViewControllerDidFinish(controller: SFSafariViewController) {
&lt;&#x2F;span&gt;&lt;span&gt;        controller&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dismissViewControllerAnimated(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;因为这是一个 &lt;code&gt;ViewController&lt;&#x2F;code&gt; 相关的 Operation，所以其他同类型的 Operation，需要等我完成后才能被执行。&lt;&#x2F;li&gt;
&lt;li&gt;当这个 controller 被关闭时，表示这个 Operation 结束，调用一下 &lt;code&gt;finish&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果需要的话，可以给这个 Operation 再加一个 &lt;code&gt;ReachabilityCondition&lt;&#x2F;code&gt;，当没有网络时就不打开了。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看在 VC 层面的使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockOperation {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;performSegueWithIdentifier(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;showEarthquake&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sender: nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; blockObserver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver { _, errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            If the operation errored (ex: a condition failed) then the segue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            isn&amp;#39;t going to happen. We shouldn&amp;#39;t leave the row selected.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;        *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;            dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;                tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;deselectRowAtIndexPath(indexPath, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(blockObserver)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    operationQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(operation)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;类似 &lt;code&gt;NSBlockOperation&lt;&#x2F;code&gt;， &lt;code&gt;BlockOperation&lt;&#x2F;code&gt; 也可以快速生成一个 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;BlockObserver&lt;&#x2F;code&gt; 也是一个快速生成 observer 的方法，这里描述了当 Operation 完成后的处理。&lt;&#x2F;li&gt;
&lt;li&gt;调用方需要新建一个 queue，然后把 Operation 放到这个 queue 里。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;相比起正常的调用，还是会多了些步骤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;基于 Operation 来架构的思想还是蛮新颖的，可以将复杂的任务拆分成粒度更细的 Operation，然后再组装。但实际使用起来也会有不少问题，比如之前提到的写起来会复杂些，调试时看 backtrace 会很累，不确定是否会带来更好的可维护性等等。不过既然苹果都已经把它用到了线上的 App，至少说明是可行的，至于与已有的架构相比会带来怎样的提升，可能需要实际写起来才知道。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Builder Pattern 在 Objective-C 中的使用</title>
            <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/builder-pattern/</link>
            <guid>https://limboy.me/posts/builder-pattern/</guid>
            <description>&lt;p&gt;在说 Builder Pattern 之前，我们先来看看一个场景。假设我们要预定一个 iPhone 6，要 64G 的，金色的，用代码表述大概是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFX 是一个前缀，因为直接写 iPhone6 不符合类名大写的习惯，写成 IPhone6 更是怪异 ╮(╯▽╰)╭
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以是另一种方式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一种方式可扩展性好些，但无法约束必须设置某些 property。第二种方式修正了这个问题，但扩展性也差了。&lt;&#x2F;p&gt;
&lt;p&gt;假如又有了新需求，要让客户可以选择发售区域，比如港行，国行，美版等等。对于第一种，自然可以新增一个属性，但使用者很可能完全不知道新增了这么个属性。对于第二种，则只能再新建一个初始化方式，如 &lt;code&gt;-[initWithStorage:color:place]&lt;&#x2F;code&gt;。那如果又有新的需求，比如选择是否刻字，以及刻哪些字呢？或者可以选择外壳的种类等等。这两种方式都不能很好地处理需求的变更。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们来说说 Builder Pattern，这个模式可以在各种语言里被很方便地实现，比如 javascript&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6Builder()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;golden&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setPlace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;HK&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当有新的属性时，再加一个 &lt;code&gt;setProperty&lt;&#x2F;code&gt; 即可。如果漏写了某个属性，可以在 &lt;code&gt;build&lt;&#x2F;code&gt; 里检查。&lt;&#x2F;p&gt;
&lt;p&gt;在 Objective-C 里，这样的链式写法不是很流行（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Masonry&#x2F;Masonry&quot;&gt;Masonry&lt;&#x2F;a&gt;里这种写法用的比较多），所以，在 OC 里写起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果少了什么属性，在 &lt;code&gt;build&lt;&#x2F;code&gt; 时检查下即可。这样既解决了不方便扩展的问题，当有新的属性时也可以知道。&lt;&#x2F;p&gt;
&lt;p&gt;不过看起来还是不够优雅，这个 builder 只是一个临时工具，用完了就扔掉了，既然这样，那有没有可能写法上符合 OC 的传统，又让这个 builder 「临时出现」一下？且看下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor goldenColor];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是看起来舒服多了。builder 只是在 block 范围内起作用，不会影响当前 context 的变量。这个 &lt;code&gt;+[createWithBuilder:]&lt;&#x2F;code&gt; 的代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)createWithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(BuilderBlock)block {
&lt;&#x2F;span&gt;&lt;span&gt;	NSParameterAssert(block);
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(builder)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里 &lt;code&gt;build&lt;&#x2F;code&gt; 方法，也有两种实现，第一种&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)builder
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		_storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外一种是把两个过程合并为一个过程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以在这里对 property 做检查
&lt;&#x2F;span&gt;&lt;span&gt;	NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;发行区别忘了填哦&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; iPhone6;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这两种方式的区别在于对参数的处理，前一个是在目标 Class 中处理，后一种是在 Builder 中处理。&lt;&#x2F;p&gt;
&lt;p&gt;在 Facebook 的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;pop&quot;&gt;pop&lt;&#x2F;a&gt; 中也有类似的使用，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;animatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;propertyWithName:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;property&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initializer:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(POPMutableAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;prop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;writeBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;readBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 &lt;code&gt;initializer&lt;&#x2F;code&gt; 其实就是 &lt;code&gt;builder&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我在写蘑菇街的基础框架时，也有用到过几处，觉得还是蛮方便的，尤其对使用者来说。比如这个可以横向或纵向滚动的包含可点击 Items 的 collectionView。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MGJFlowCollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionViewWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(MGJFlowCollectionViewBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollDirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; UICollectionViewScrollDirectionHorizontal;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumInteritemSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumLineSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sectionInset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIEdgeInsetsMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGSizeMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;number){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UIView alloc] initWithFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor mgj_random];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; view;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能通过简单的配置来生成一个水平的或垂直的 collectionView 了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 Builder Pattern 还有一个好处，就是可以将零散的配置统一起来。比如要创建一个 CollectionView，我们需要设置 layout，还要设置 layout 的一些属性，还要设置 DataSource &#x2F; Delegate 等，现在可以在一个地方统一设置，可读性上也会好一些。&lt;&#x2F;p&gt;
&lt;p&gt;所以如果遇到需要多个参数，甚至某个参数自己还包含了各种参数时，可以考虑下 Builder Pattern。&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&quot;&gt;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>自学 iOS 开发的一些经验</title>
            <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learning-ios/</link>
            <guid>https://limboy.me/posts/learning-ios/</guid>
            <description>&lt;p&gt;不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。&lt;&#x2F;p&gt;
&lt;p&gt;现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-chu&quot;&gt;基础&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;yi-ding-de-bian-cheng-jing-yan&quot;&gt;一定的编程经验&lt;&#x2F;h4&gt;
&lt;p&gt;这里说的编程经验是至少熟练一门编程语言，对 OOP 有一定的了解，最好熟悉一些基本的设计模式。遇到过的好多 iOS 开发，大多是从别的语言转过来的，所以有一定的编程基础，学起来会更容易 get the point.&lt;&#x2F;p&gt;
&lt;p&gt;如果是第一次接触编程，当然也是没问题的，只是要做好心理准备，可能会比想象的难。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ying-yu&quot;&gt;英语&lt;&#x2F;h4&gt;
&lt;p&gt;发现不少开发对于英语似乎有点接受不能，通常都是中文优先，除非迫不得已，才硬着头皮看看 StackOverflow，英文文章，文档等。忘了是谁说过「难走的路越走越好走」，通常如此。其实只要稍微 push 一下自己，那些技术文章啃下来应该不会有太大的问题，有过几次成功的体验后，这种恐惧感就会减少很多。优质的文章、视频、书籍，多是英文的，不迈过这个坎，将来要么成为瓶颈，要么花更大的成本去填补。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-men&quot;&gt;入门&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shu-ji&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;要学习 iOS 开发，自然要先学 Objective-C （当然现在也可以直接上 Swift，不过如果多人协作的话，OC 目前还是主流），因为 OC 是 C 语言的超集，所以了解 C 语言对于学习 OC 肯定会有帮助，不过就算不了解，直接学 OC 也没太大问题。&lt;&#x2F;p&gt;
&lt;p&gt;这里推荐 BNR (Big Nerd Ranch) 的这本 &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Objective-C-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;032194206X&quot;&gt;Objective-C Programming The Big Nerd Ranch Guide&lt;&#x2F;a&gt;，讲解地比较细致，能帮助你更好的理解 OC，更重要的是教你遇到问题时，如何去解决问题，以及这个问题对应的一些知识点，如何使用文档等等。&lt;&#x2F;p&gt;
&lt;p&gt;来到一个新的世界，肯定会对这个世界充满好奇，想订阅一大堆博客，买一堆书，看各种教程和视频，然后就变得浮躁，不知该从哪下手，这会导致拖延症。我渴了，给我倒一杯水，这个很直接，马上就可以做，但如果是给我买一瓶饮料，而自己对那些饮料又不怎么熟悉时，就纠结了，不如刷会微博，看看朋友圈，玩个小游戏先。&lt;&#x2F;p&gt;
&lt;p&gt;所以一本好的入门教材很重要，要契合自己当前的水平，且常常会有收获，这种成就感会激励着你继续学下去。&lt;&#x2F;p&gt;
&lt;p&gt;在看书的过程中，往往会有这样的经历：书中提到某个人、观点、知识点、书、文章，然后就顺着它提到的这些东西出去了，可能某个知识点又牵扯到另一些内容，然后就这样越走越远。想起了一个故事&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;三只猎狗追一只土拔鼠,土拔鼠逃跑时钻进了一个树洞。这个树洞只有一个出口,不一会儿,忽然从树洞里跑出一只兔子。兔子飞快地向前跑,并爬上另一棵大树。兔子因为慌乱在树上没站稳,掉了下来,砸晕了正仰头看的三只猎狗,最后,兔子终于逃脱。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;对于这个故事可以从不同的角度去解读，我更愿意以初心去解读。兔子为什么会爬树？为什么能砸晕三只猎狗？这不是重点，重点是，之前追赶的土拨鼠哪去了？看书时难免会有延伸阅读，这个深度我觉得不宜超过 2 层，不然很容易就回不来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是如果有可能，最好每天都看点，这其实是很难的，因为总是会有优先级更高的事，或者之前的某些习惯在干扰。一旦断了几天，就不想再拿起来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有，苹果官方的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;referencelibrary&#x2F;GettingStarted&#x2F;RoadMapiOS&#x2F;&quot;&gt;Start Developing iOS Apps Today&lt;&#x2F;a&gt; 也是很不错的入门材料。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-pin&quot;&gt;视频&lt;&#x2F;h4&gt;
&lt;p&gt;推荐斯坦福老头子(Paul Hegarty)的 &lt;a href=&quot;https:&#x2F;&#x2F;itunes.apple.com&#x2F;us&#x2F;course&#x2F;developing-ios-7-apps-for&#x2F;id733644550&quot;&gt;Developing iOS 7 Apps for iPhone and iPad&lt;&#x2F;a&gt; ，当初也是看的这个（那时还是更老的版本），Paul 是资深的 Mac&#x2F;iOS 开发（前苹果员工？），很多知识点讲得很到位，学生们的提问也大都在点上，同时配有 Demo，总之听下来会对 iOS 开发有比较全面的了解。&lt;&#x2F;p&gt;
&lt;p&gt;同时推荐一本小册子：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;objc-zen&#x2F;objc-zen-book&quot;&gt;objc-zen-book&lt;&#x2F;a&gt;，花不长时间就能看完，里面是一些 Best Practices，对于编写优质代码会很有帮助。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bi-ji&quot;&gt;笔记&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个持久的过程，任何阶段都适用。以前也没太在意这个，觉得概念性的东西，脑子过一遍，就大概知道了，然后就去啃其他的东西了，现在看来，如果有记笔记的话，会更有助于消化概念、知识点，也可以记录自己的思考过程。达芬奇就记录了 10000 多页的笔记。&lt;&#x2F;p&gt;
&lt;p&gt;记笔记可以加深对知识点的理解，而成为编程巨星的唯一秘诀就是：&lt;a href=&quot;http:&#x2F;&#x2F;www.codesimplicity.com&#x2F;post&#x2F;the-singular-secret-of-the-rockstar-programmer&#x2F;&quot;&gt;对所做的事情理解地越深，就会做得越好&lt;&#x2F;a&gt;。同时如果遵循&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;&#x2F;a&gt;去复习的话，效果更佳。对知识点了解地足够透彻后，Debug 时才更有可能知道问题出在哪，解决问题也更容易有思路。&lt;&#x2F;p&gt;
&lt;p&gt;笔记不仅可以记知识点，也可以记录调试过程，比如&lt;a href=&quot;http:&#x2F;&#x2F;borkware.com&#x2F;bnr&#x2F;CampWhereIOS6.html&quot;&gt;这篇笔记&lt;&#x2F;a&gt;，有一种调试方法：&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95&quot;&gt;小黄鸭调试法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多程序员都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题，就在解释的过程中击中了问题的解决方案。一边阐述代码的意图一边观察它实际上的意图并做调试，这两者之间的任何不协调会变得很明显，并且更容易发现自己的错误。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;生活中我们可能不会真的这么去做，这时抽离出另一个自己，记录下跟 ta 的对话，也是个发现问题的好方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;lian-xi&quot;&gt;练习&lt;&#x2F;h4&gt;
&lt;p&gt;这也是一个持续的过程，知道了些概念或原理后，总是会想着去验证下是不是这样，无论结果是否如自己预期，实践的过程会降低对语言的陌生感，慢慢地培养一种驾驭这门语言的自信，如果出了错，正好可以重新梳理一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;如果静下心来看完了 BNR 的这本书，以及斯坦福的 iOS 开发视频，那么对 OC 应该比较了解了，一些常用的 UIKit 用起来也没什么问题了，比如 UIViewController &#x2F; UIView &#x2F; UIScrollView &#x2F; UIImageView &#x2F; UITableView。也熟悉一些概念，如 KVO &#x2F; MVC &#x2F; Delegate &#x2F; DataSource。&lt;&#x2F;p&gt;
&lt;p&gt;这个阶段下来，应该会有：哦，iOS 开发也就这样嘛，多翻翻文档，熟悉 Cocoa Touch 的一些 Class，差不多也能做出一个简单的 App 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-jie&quot;&gt;进阶&lt;&#x2F;h3&gt;
&lt;p&gt;入门之后，接下来可以折腾的东西还会有不少。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-1&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Effective-Objective-C-2-0-Specific-Development&#x2F;dp&#x2F;0321917014&quot;&gt;Effective Objective-C 2.0&lt;&#x2F;a&gt;，里面提到了 52 种提高 iOS App 质量的途径。涉及了 API 设计、protocols &#x2F; category 的使用、写出更模块化的代码等，读下来应该会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;0321942051&quot;&gt;iOS Programming: The Big Nerd Ranch Guide (4th Edition)&lt;&#x2F;a&gt;，又是一本 BNR 的书，这本书的特点是通过 Demo 来引出知识点，然后提一些问题，并且会细说解题思路。看书的过程中，对于元学习能力的提升也会有一定帮助。&lt;&#x2F;p&gt;
&lt;p&gt;--- update ---&lt;&#x2F;p&gt;
&lt;p&gt;发现巧哥的 &lt;a href=&quot;http:&#x2F;&#x2F;item.jd.com&#x2F;11598468.html&quot;&gt;iOS 开发进阶&lt;&#x2F;a&gt; 已经可以在京东买到了，虽然没有细看，但巧哥出品质量肯定有保障。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qi-ta-zi-yuan&quot;&gt;其他资源&lt;&#x2F;h4&gt;
&lt;p&gt;进入这个阶段后，可以去探索更大的世界了，现在的资源已经很丰富了，但还是要遵循「少而精」的原则。以下是我觉得挺不错的源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdevweekly.com&#x2F;&quot;&gt;iOS Dev Weekly&lt;&#x2F;a&gt; 每周一期，内容多为这一星期里值得关注的 Github 项目、文章、工具等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.devtang.com&#x2F;&quot;&gt;iOS 移动开发周报&lt;&#x2F;a&gt; 这是唐巧大大整理的每周不错的 iOS 开发相关的内容，多为中文。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.raywenderlich.com&#x2F;tutorials&quot;&gt;RayWenderlich&lt;&#x2F;a&gt; 很多详细又全面的教程，不容错过。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdev.slack.com&#x2F;home&quot;&gt;iOS Dev Slack&lt;&#x2F;a&gt; 国内不少 iOS 开发（包括大大们）都在这里，不过现在好像不怎么能拿到邀请了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tangqiaoboy&#x2F;iOSBlogCN&quot;&gt;中文 iOS&#x2F;Mac 开发博客列表&lt;&#x2F;a&gt;，打开工具订阅吧。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;还有，如果可能的话，多去分享自己学到的东西，教是最好的学，我试过几次，效果真的很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao-1&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段下来，对于常用的设计模式、内存管理、Blocks 的使用、图像操作、网络请求和管理、多线程应该比较熟悉了。对于 CALayer、Animation、UIScrollView、UITableView、UICollectionView、ViewController Container 则非常熟悉，对「非常熟悉」的定义是：不打开 Xcode，脑子里就能把相应的知识点复述出来 80% ，比如这个类有哪些方法，Delegate &#x2F; DataSource 有哪些方法，怎么使用，如果要实现某个效果，应该怎么做（好吧， UICollectionView 除外）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji&quot;&gt;高级&lt;&#x2F;h3&gt;
&lt;p&gt;其实高级、进阶、入门并没有严格的界限，在入门阶段也可以探究高级阶段的一些东西。我觉得支撑我们不断探索和前进的动力不是兴趣，而是永不满足的好奇心，和对优雅代码的追求。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your standards are low, you&#x27;re going to stop pretty early on in the process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;BNR 的这篇 &lt;a href=&quot;http:&#x2F;&#x2F;www.bignerdranch.com&#x2F;blog&#x2F;leveling-up&#x2F;&quot;&gt;Leveling Up&lt;&#x2F;a&gt; 已经讲得很好了，也更加细致。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-2&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Pushing-Limits-Applications&#x2F;dp&#x2F;1118818342&quot;&gt;iOS 7 Programming Pushing the Limits&lt;&#x2F;a&gt; 这本书对 iOS 7 的一些特性会讲解地比较深入，当然也不仅仅是 iOS 7。只叹 iOS 更新实在太快，书籍往往跟不上，一本好书往往需要很长时间来撰写，等书可以出版了，iOS 又出新版本了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yuan-ma&quot;&gt;源码&lt;&#x2F;h4&gt;
&lt;p&gt;看优秀的源码，可以学到很多东西，使用过程中遇到问题也更容易解决。这些是我觉得值得细看的源码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AFNetworking&#x2F;AFNetworking&quot;&gt;AFNetworking&lt;&#x2F;a&gt;(NSOperation, HTTP, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rs&#x2F;SDWebImage&quot;&gt;SDWebImage&lt;&#x2F;a&gt;(Image Handle, Cache, NSOperation, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samvermette&#x2F;SVPullToRefresh&quot;&gt;SVPullToRefresh&lt;&#x2F;a&gt;(UIScrollView, State Handle), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;icanzilb&#x2F;JSONModel&quot;&gt;JSONModel&lt;&#x2F;a&gt;(runtime)&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，也可以翻翻 &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;CF&#x2F;CF-855.17&#x2F;&quot;&gt;CoreFoundation&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;objc4&#x2F;objc4-646&#x2F;&quot;&gt;OC runtime&lt;&#x2F;a&gt; 的源码。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-yuan&quot;&gt;资源&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;oleb.net&#x2F;blog&#x2F;&quot;&gt;oleb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nshipster.com&#x2F;&quot;&gt;NSHipster&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;objc.io&quot;&gt;objc.io&lt;&#x2F;a&gt; || &lt;a href=&quot;http:&#x2F;&#x2F;objcio.cn&quot;&gt;objcio.cn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;&quot;&gt;WWDC 视频&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gong-ju&quot;&gt;工具&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;chisel&quot;&gt;chisel&lt;&#x2F;a&gt; Facebook 出品的 LLDB 助手，用于调试很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;revealapp.com&#x2F;&quot;&gt;Reveal&lt;&#x2F;a&gt; 每当好奇某个 App 的实现时，都会打开它一窥究竟，用于调试自己的 App 也很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; steipete 大大出品的一款方便使用 method swizzling 的工具，可以在运行时动态添加代码到某个方法&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nygard&#x2F;class-dump&quot;&gt;class-dump&lt;&#x2F;a&gt; 从 Mach-O 文件生成 OC 头文件，有时想看看某个 App 大概是如何组织的会比较方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.hopperapp.com&#x2F;&quot;&gt;Hopper&lt;&#x2F;a&gt; 可以对二进制文件进行反编译，甚至可以生成伪代码！有时想看看 UIViewController 里某个方法大概是怎么实现的，就可以用它。&lt;&#x2F;li&gt;
&lt;li&gt;Instruments 这个内置的工具对于发现 App 的各种问题很有帮助，如内存占用、泄露，渲染问题等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;mu-biao-2&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段，对于底层的实现会有更深入的了解，各种 Core 开头的 Framework 至少可以说出个大概，工具也能熟练使用，「正经的代码」写过数万行，可能天天在翻 &lt;a href=&quot;http:&#x2F;&#x2F;kapeli.com&#x2F;dash&quot;&gt;Dash&lt;&#x2F;a&gt;。如果别人让你实现某个功能，能在较短的时间内给出不错的实现方案，并且足够细致，甚至精细到如何使用 Core Graphic 去画某个图像。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得无论学习什么，「速成」的心态是最要不得的，这只会让自己变得浮躁，一知半解，整个过程也很难让自己的元学习能力得到提升。慢慢来，攻占一个城后，再去打下一个，这时心态也会平和许多。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>阅读源码的乐趣</title>
            <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-pleasure-of-reading-source/</link>
            <guid>https://limboy.me/posts/the-pleasure-of-reading-source/</guid>
            <description>&lt;p&gt;阅读源码尤其是优秀的源码是一件很有乐趣的事情，可以拓宽视野，提高品位，锻炼思维，就像间接地在跟作者沟通一样。Quora 上有一个问题是：&lt;a href=&quot;http:&#x2F;&#x2F;www.quora.com&#x2F;How-did-TJ-Holowaychuk-learn-to-program&quot;&gt;TJ-Holowaychunk 是如何学习编程的&lt;&#x2F;a&gt;，他的回答是&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&#x27;t read books, never went to school, I just read other people&#x27;s code and always wonder how things work&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果有足够的好奇心，并且总想知道「How Things Work」，那么阅读源码就是个不错的途径。&lt;&#x2F;p&gt;
&lt;p&gt;源码的复杂度不同，需要投入的时间、使用的方法也不同，以一个中等复杂度的项目为例，简单分享下我阅读源码的一些经验。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 2014，有一个 Session 是讲&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;#232&quot;&gt;「Advanced User Interfaces with Collection Views」&lt;&#x2F;a&gt;，之所以选择这个，是因为它是我们还算熟悉的对象（Collection View），但苹果用了一些「特殊」的架构来做到代码复用，并且减少 VC 的体积，而且使用了部分 iTunes Connect 的源码，而不是简单的演示代码。所以决定一窥究竟。&lt;&#x2F;p&gt;
&lt;p&gt;为了有一个大概的感受，先看一遍视频，不需要领会每个要点，先记录一些关键信息，方便到时翻源码。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;这套结构可以处理复杂的 DataSource&lt;&#x2F;li&gt;
&lt;li&gt;可以同时适配 iPhone &#x2F; iPad&lt;&#x2F;li&gt;
&lt;li&gt;有一个统一的 loading indicator&lt;&#x2F;li&gt;
&lt;li&gt;可以设置某个 Header 是否置顶&lt;&#x2F;li&gt;
&lt;li&gt;可以有一个全局的 Header&lt;&#x2F;li&gt;
&lt;li&gt;通过聚合 DataSource 的方法来达到代码复用，并且只有一个 VC&lt;&#x2F;li&gt;
&lt;li&gt;可以设置聚合形式为 Segmented &#x2F; Composed&lt;&#x2F;li&gt;
&lt;li&gt;layout 信息可以配置，且可以覆盖&lt;&#x2F;li&gt;
&lt;li&gt;使用了有限状态机&lt;&#x2F;li&gt;
&lt;li&gt;子 DataSource 在数据载入完成后会有一个 block，所需的 DataSource 都载入完成时，这些 block 会被统一执行&lt;&#x2F;li&gt;
&lt;li&gt;Section Metrics 可以设置 Section 的具体表现&lt;&#x2F;li&gt;
&lt;li&gt;layout 的信息会在内部被保存，避免重复计算 (Snapshot Metrics)&lt;&#x2F;li&gt;
&lt;li&gt;Optional Layout Methods 会有意想不到的好效果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;产生了一些疑问，比如&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;多个子 DataSource 被组合成一个 Composed DataSource 时，如何通过 IndexPath 找到对应的 DataSource？&lt;&#x2F;li&gt;
&lt;li&gt;找到之后如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;是否置顶是如何实现的？&lt;&#x2F;li&gt;
&lt;li&gt;如何通过有限状态机来管理 Loading 状态？&lt;&#x2F;li&gt;
&lt;li&gt;如果有按钮，那么按钮的点击事件如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;Collection View 没有 headerView，这又是怎么实现的？&lt;&#x2F;li&gt;
&lt;li&gt;数据是怎么载入的？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;大概有了些概念和疑问之后，就可以打开源码痛快看了，先来看看目录结构 (可以在这里&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zwaldowski&#x2F;AAPLAdvancedCollectionView&quot;&gt;在线浏览&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Framework
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Categories
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; DataSources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Layouts
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; ViewControllers
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Views
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Application
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来关键的信息都在 Framework 里了，那如何切入呢？反其道而行之，先来看看这些 Framework 是怎么用的，最直接的就从 ViewController 入手。那就先来看看 AAPLCatListViewController 这个类吧，如果没猜错的话，应该是展示喵咪列表（直观的名字很重要）。&lt;&#x2F;p&gt;
&lt;p&gt;果然很小，居然只有 140 行，如果不分离的话，1400 行也是可以轻松达到的。看到定义了一个 AAPLSegmentedDataSource，脑海里大概可以想象出是一个可以切换 Tag 的页面，接着又看到了两个 DataSource，那这两个页面的数据源应该就是它们了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;APPLCatListViewController ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLSegmentedDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;segmentedDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;catsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;favoriteCatsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectedIndexPath;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;selectedDataSourceObserver;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后又看到这么一行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)dealloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;segmentedDataSource&lt;&#x2F;span&gt;&lt;span&gt; aapl_removeObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;selectedDataSourceObserver&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是苹果自己实现了一个 KVO Wrapper，果然他们自己也无法忍受原生的 KVO，哈哈。接着到了 ViewDidLoad，新建了两个 DataSource，那新建的时候都干了些什么？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newAllCatsDataSource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title for available cats list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All the big ...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The message to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;No Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The title to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A problem with the network ....&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Unable To Load Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title of message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; dataSource;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以只是初始化，然后设置一些信息，Nothing Special。然后看到了 AAPLLayoutSectionMetrics ，看起来是设置 Layout 的一些显示信息，如 height &#x2F; backgroundColor 之类的。&lt;&#x2F;p&gt;
&lt;p&gt;最后创建了一个 KVO 来监测 selectedDataSource 的变化，界面上做相应的调整。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看看 AAPLCatListDataSource 的实现，一进去发现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLCatListDataSource : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AAPLBasicDataSource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Is this list showing the favorites or all available cats?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来 AAPLBasicDataSource 一定做了很多事，进入到 AAPLBasicDataSource.m 文件，看到这个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setShowingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)showingFavorites
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resetContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNeedsLoadContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observeFavoriteToggledNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;AAPLCatFavoriteToggledNotificationName object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到有一个 &lt;code&gt;setNeedsLoadContent&lt;&#x2F;code&gt; 方法，看起来数据的载入应该是通过这个方法来触发的，进去看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setNeedsLoadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelPreviousPerformRequestsWithTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) object:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) withObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;afterDelay:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一个方法没怎么接触过，查一下文档先，原来是可以取消之前通过 &lt;code&gt;performSelector:withObject:afterDelay:&lt;&#x2F;code&gt; 触发的方法，为了加深印象，顺便 Google 一下这个方法，原来 &lt;code&gt;performSelector:withObject:afterDelay&lt;&#x2F;code&gt; 在方法被执行前，会持有 Object，方法执行后在解除对 Object 的持有，如果不小心多次调用这个方法就有可能导致内存泄露，所以在调用此方法前先 cancel 一下是个好习惯。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看这个 &lt;code&gt;loadContent&lt;&#x2F;code&gt; 都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; To be implemented by subclasses…
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来需要在子类实现这个方法，那就到 AAPLCatListDataSource 里看看这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadContentWithBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Check to make certain a more recent call to load content hasn&amp;#39;t superceded this one…
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading ignore];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading doneWithError:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(cats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; cats;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithNoContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchFavoriteCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用了 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; 方法，进去看看，这个方法做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContentWithBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingBlock)block
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;beginLoading&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    __weak &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; weakself &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadingWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error, AAPLLoadingUpdateBlock update){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Tell previous loading instance it&amp;#39;s no longer current and remember this loading instance
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Call the provided block to actually do the load
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loading)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单说来就是生成了一个 loading，然后把 loading 传给 block，那 &lt;code&gt;loadingWithCompletionHandler:&lt;&#x2F;code&gt; 这个方法又做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)loadingWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update))handler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSParameterAssert(handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; handler;
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以就是生成一个 loading 实例，然后把 handler 存到 block 属性里。既然存了，那将来某个时候一定会用到，从名字上来看，应该是 loading 完成时会被调用，搜索 block 关键字，发现只有在下面这个方法中 block 才会被调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_doneWithNewState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newState error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingUpdateBlock)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#if&lt;&#x2F;span&gt;&lt;span&gt; DEBUG
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;OSAtomicCompareAndSwap32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_complete)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NSAssert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completion method called more than once&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;block)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _block;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newState, error, update);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;既然是 _ 开头，那应该是内部方法，对外封装了几种状态，如 &lt;code&gt;ignore&lt;&#x2F;code&gt;, &lt;code&gt;done&lt;&#x2F;code&gt;, &lt;code&gt;updateWithContent:&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;p&gt;咦，这里为什么要先把 _block 赋给一个临时变量 block，然后再把 _block 设为 nil 呢？看起来像是为了解决某种内存问题。如果直接 &lt;code&gt;_block(newState, error, update)&lt;&#x2F;code&gt; 会怎样？哦，虽然这里没有出现 self，但 _block 是一个 instance 变量，所以在 ^{} 里会对 self 进行强引用。而如果赋给一个临时变量，那么只会对这个临时变量强引用，就不会出现循环引用的情况。&lt;&#x2F;p&gt;
&lt;p&gt;AAPLLoading 看的差不多了，再出来看 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; ，注意到在 CompletionHandler 里，有这么一段&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 self 是 AAPLDataSource （Block 嵌套多了，还真是容易晕啊），来看看 &lt;code&gt;endLoadingWithState:error:update&lt;&#x2F;code&gt; 这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)endLoadingWithState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)state error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(dispatch_block_t)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;shouldDisplayPlaceholder&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(update)
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enqueuePendingUpdateBlock:update&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyBatchUpdate:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Run pending updates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;executePendingUpdates];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingComplete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyContentLoadedWithError:error&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;设置一些状态，然后在恰当的时机调用 update block，咦，这里有个 dispatch_block_t 没怎么见过，查了一下原来是一个内置的空传值和空返回的 block。&lt;&#x2F;p&gt;
&lt;p&gt;看了下 &lt;code&gt;enqueuePendingUpdateBlock&lt;&#x2F;code&gt;，会把现在的这个 update 结合之前的 updateBlock，形成一个新的 updateBlock，应该就是视频里提到的当所有的 DataSource 都载入完时，统一执行之前的 update block&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;notifyBatchUpdate:&lt;&#x2F;code&gt; 所做的是看一下 Delegate 是否响应 &lt;code&gt;dataSource:performBatchUpdate:complete:&lt;&#x2F;code&gt; 如果响应则走你，不然挨个执行 update &#x2F; complete。&lt;&#x2F;p&gt;
&lt;p&gt;看完了 &lt;code&gt;loadContentWithBlock&lt;&#x2F;code&gt; 再来看看这个 Block 里面都做了什么，大意是根据 self.showingFavorites 来切换不同的数据源，这里看到了一个新的类 AAPLDataAccessManager，看起来像是统一的数据层，瞄一眼&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; AAPLCat;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLDataAccessManager : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (AAPLDataAccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;manager&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchFavoriteCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchDetailForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cat, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchSightingsForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sightings, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然如此，将来数据的载入形式有变化，或需要做缓存啥的，都可以在这一层处理，其他部分不会感觉到变化。&lt;&#x2F;p&gt;
&lt;p&gt;这一轮看下来已经有不少信息量了，来简单捋一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[SegmentedDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; setNeedsLoadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[CatListDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[DataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentWithBlock:]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;创建&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loading，设置 loading 完成后要做的事 → 拿到数据后放到 updateQueue 里，等全部拿到再执行 batchUpdate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;执行&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentBlock → 使用 DataAccessManager 去获取数据，拿到后交给 loading
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里，我们还没有运行 Project 看效果，因为我觉得代码包含的信息会更丰富，而且这么看下来后，对于界面会长啥样也有个大概的了解。&lt;&#x2F;p&gt;
&lt;p&gt;这只是开始，继续挖掘下去还会有不少好东西，比如 Favorite 按钮的处理，它是通过 Responder Chain 而不是 Delegate 来实现的，也是一个思路。通过有限状态机来管理 loading 状态也是很有意思的实现。&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，可以看下 ComposedDataSource，先不看实现，如果要自己写大概会是什么思路，比如当调用 &lt;code&gt;[UICollectionView cellForItemAtIndexPath:]&lt;&#x2F;code&gt; 时，如何找到对应的 DataSource，找到之后如何渲染对应的 Cell 等。&lt;&#x2F;p&gt;
&lt;p&gt;所以看源码真的是一件很有意思的事情，像一场冒险，总是会有意外收获，可能在不知不觉中，能力就得到了提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>读 Facebook App 头文件的一些收获</title>
            <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/facebook-app-headers/</link>
            <guid>https://limboy.me/posts/facebook-app-headers/</guid>
            <description>&lt;p&gt;最近在看一些 App 架构相关的文章，也看了 Facebook 分享的两个不同时期的架构（2013 和 2014），于是就想一窥 Facebook App 的头文件，看看会不会有更多的收获，确实有，还不少。由于在选择 ipa 上的失误，下了个 7.0 版的 Facebook（最新的是 18.1），会稍有过时，不过后来又下了个 18.1 的看了下，发现变动其实不大。以下是我从头文件中获取到的一些信息（20 多万行，浏览起来还是挺累的）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rang-shi-tu-zu-jian-ke-yi-fang-bian-di-pei-zhi&quot;&gt;让视图组件可以方便地配置&lt;&#x2F;h3&gt;
&lt;p&gt;这个在 Facebook 的演讲中也提到过，自定义的 UI 组件在初始化时可以传一些数值来表示想要呈现的效果，就像 HTML 和 CSS 一样，Dom 结构表示这是什么，CSS 对该结构进行个性化定制。 Facebook 是通过 Struct 来做这件事的，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FBActionSheetButtonMetrics {
&lt;&#x2F;span&gt;&lt;span&gt;    CDUnknownFunctionPointerType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_vptr$FBMetrics;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;_Bool&lt;&#x2F;span&gt;&lt;span&gt; _initialized;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; leftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; textLeftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorSideMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorHeight;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; detailMaxNumLines;
&lt;&#x2F;span&gt;&lt;span&gt;    UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;titleColor;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好处是减少了代码量，而且直观，方便复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-liang-shi-yong-zu-he-gua-du-shi-yong-ji-cheng&quot;&gt;尽量使用组合，适度使用继承&lt;&#x2F;h3&gt;
&lt;p&gt;如果过度使用继承，尤其是继承层次过深，往往会带来更大的维护成本。有新需求或需求变更时，会花很多时间在「是否需要在基类&#x2F;子类增加一个方法」，「是否需要新建一个子类」等设计相关的问题上。而组合则没有这个问题，大不了换一个组件。&lt;&#x2F;p&gt;
&lt;p&gt;不过 Objective-C 对于组合并没有特别的支持，所以实现起来会略麻烦&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;People {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;People
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithVehicle: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle&lt;&#x2F;span&gt;&lt;span&gt; move];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有很多类似 move 这样需要交给外部的 object 来做的方法，就会显得冗余，尽管如此，比起继承来还是更方便维护的。&lt;&#x2F;p&gt;
&lt;p&gt;使用组合的话，一般会使用「依赖注入」，比如这里的 Vehicle，并不需要特别指出是 Bike 还是 Car，只要有 move 方法就可以，这样就可以很方便地替换，对于 People 来说不需要做任何改动。在 Objective-C 里是通过 protocol 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所以 Facebook 定义了一大堆的接口，包括 Delegate, DataSource 和 Protocol，ViewController 有 Protocol，也有 Delegate(如 FBMediaGalleryViewControllerDelegate)，View &#x2F; Cell 也有 Delegate(如 FBMediaGalleryViewDelegate)，还有各种零零碎碎的 Protocol，如 FBDiscoveryCardProtocol, FBEventProtocol 等。&lt;&#x2F;p&gt;
&lt;p&gt;定义接口的过程也是梳理架构的过程，如果对架构理解不够深刻，是很难将接口恰当地抽象出来的。很多人放弃使用组合，有一部分原因也是架构上的不合理。&lt;&#x2F;p&gt;
&lt;p&gt;组件的粒度也是个问题，过细会导致组件过多，组合的过程就会花去很多时间；过粗又导致组件臃肿，难以复用。&lt;&#x2F;p&gt;
&lt;p&gt;当组件的接口定义完之后，使用起来大概会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBResponseHandler : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBTestable, FBReceivedDataBufferDelegate, FBResponseHandlerProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@interface FBPhotoViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; UIViewController &amp;lt;FBPagingViewDelegate, FBPagingViewDataSource, FBPresentableViewController&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样一眼就大概能看出来这个 Class 大概会有哪些功能，如果某个组件要作调整，只需修改一处，就可以全局通用。&lt;&#x2F;p&gt;
&lt;p&gt;适度使用继承，可以在易维护和便利上达到平衡，比如 FBTableViewController, FBDialog 等，自定义的组件可以在它们的基础上进行开发。继承的层次一般不超过 2 层，比如 UITableViewController &amp;lt;- FBTableViewController &amp;lt;- FBFriendsNearbyTableViewController&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;前面讲过，组合往往和依赖注入搭配使用，Facebook 主要是通过 FBProvider, FBProviderMapData, FBProviderMap 来实现依赖注入的。&lt;&#x2F;p&gt;
&lt;p&gt;Provider 会产生一个 Object，比如 CameraControllerProvider 调用 get 方法后，会生成一个 MNCameraController 的实例。同时 Provider 还有两个子类 SingletonProvider 和 BlockProvider，前者用来生成一个单例，后者用在需要初始化参数的情景。&lt;&#x2F;p&gt;
&lt;p&gt;ProviderMap 跟 ProviderMapData 有些重复，它们之间的关系我也没有捋清，感觉 ProviderMap 像是一个 Manager，注册了一堆 Provider，然后可以通过 Provider 的 ID 来找到之前注册的 Provider。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-hua&quot;&gt;模块化&lt;&#x2F;h3&gt;
&lt;p&gt;不光是在 Cocoa 开发领域，其他的编程领域也一样，模块化是一个理想的状态，高内聚，低耦合。像 shell 命令一样，接受参数或标准输入，生成格式化的标准输出，通过管道传递给其他支持标准输入的命令行工具。&lt;&#x2F;p&gt;
&lt;p&gt;但现实场景要复杂的多，模块化的实现也更加困难。Facebook 有一个 FBAppModule 协议&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBAppModule &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBAppModule&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceForSession:&lt;&#x2F;span&gt;&lt;span&gt;(FBSession &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;providerMap:&lt;&#x2F;span&gt;&lt;span&gt;(FBProviderMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedURLSchemes;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedKeys;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt; activeMenuItem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;defaultIcon;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ID;
&lt;&#x2F;span&gt;&lt;span&gt;- (UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewControllerForMenuItem:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初始化时传入一个 FBSession (后面会讲到) 和 ProviderMap，然后设置支持的 url schemes，keys(具体作用未知)，对应的 menuItem，icon(用于在 menuItem 显示) 和 ID&lt;&#x2F;p&gt;
&lt;p&gt;有了 Module ，自然还有 ModuleManager，它的作用是注册 Module，当一个 url 过来时，可以遍历 Module，看看是不是有模块可以处理这个 url，有的话，就调用该 Module 的 openURL: 方法。当然也可以根据 ModuleID 来获取 Module。&lt;&#x2F;p&gt;
&lt;p&gt;FBAppModule 是一个 Protocol，FBNativeAppModule 是对该协议的实现，所以具体的模块都继承该类。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dao-hang-guan-li&quot;&gt;导航管理&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说系统的 UINavigationController 已经够使用了，如果需要更大的自由度和更高的可定制性，可以自定义一个导航管理器，Facebook 使用了 FBUINavigationController (Protocol) 来实现自定义导航的管理，属性和方法跟系统的差不多。 它有多个实现：FBTariffedNavigationController, FBSwipeNavigationController, FBCustomNavigationController, FBNavigationController。前面讲过继承一般不超过 2 层，这里是一般之外的情况，有 3 层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h3&gt;
&lt;p&gt;MVVM 是解决 Massive View Controller 的一个有效方法，独立出一个 ViewModel 作为 View 的数据源，以及处理 View 的一些交互操作，而 VC 只需要将 ViewModel 和 View 关联起来即可。一般会搭配某种绑定的实现，KVO 或 ReactiveCocoa 都可以，这样 ViewModel 的数据有变化就可以自动映射到 View 上。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 也采用了这种方式，有一个 FBViewModel 基类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBViewModel : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省略了一些相关性不大的属性和方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelManager; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelManager=_viewModelManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelSource; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelSource=_viewModelSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBViewModelConfiguration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelConfiguration; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelConfiguration=_viewModelConfiguration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelVersion; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelVersion=_viewModelVersion;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelUUID; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelUUID=_viewModelUUID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBMemModelObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;memModel; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize memModel=_memModel;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNilValueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithViewModelUUID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setViewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;humanDescription&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadPermanentDataModelObjectIDFromDataModelObjectID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didUpdateWithChangedProperties:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; loadState;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Facebook 自己实现了一套 ViewModel 的更新通知机制，因为 ViewModel 都是 Immutable 的，所以无法改变，那么就需要有一个地方去集中管理这些 ViewModel，有更新时可以及时通知到， FBViewModelController 应该就是干这事的，里面有一个方法 &lt;code&gt;- (void)_notifyViewModel:(id)arg1 didUpdateWithChanges:(id)arg2;&lt;&#x2F;code&gt; 。但 FBViewModelManager 看起来更合适，二者的功能没有太理清楚。&lt;&#x2F;p&gt;
&lt;p&gt;FBViewModelController 还有一个 Delegate，主要有 3 个方法 &lt;code&gt;didUpdate[Delegate][Insert]ViewModel:&lt;&#x2F;code&gt;，可以做一些事后的操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;builder-pattern&quot;&gt;Builder Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;在定义一个 ViewController 时，往往需要接收很多个参数，以 &lt;code&gt;initWith:&lt;&#x2F;code&gt; 这种形式出现不太合适，除非你能容忍一个 10 行的方法声明。通常的做法是把这些参数声明为 property，然后在初始化 VC 后，对这些 property 赋值，然后在 ViewDidLoad 里使用这些 property。这样做有几个问题：1) 不知道哪些是需要在 ViewDidLoad 前设置的，会出现忘了设置的现象。2) 这些属性可以在外部被改动。 3) 代码不够优雅。&lt;&#x2F;p&gt;
&lt;p&gt;Builder Pattern 就是用来解决这个问题的，它跟工厂模式有点像。Facebook 也用到了这个模式，比如有一个 FBMUserFetchStatus 类，该类初始化时需要一些参数，于是就有了 FBMUserFetchStatusBuilder 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBMUserFetchStatusBuilder : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatusFromExistingMUserFetchStatus:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatus&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIdentifiers:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withImageUrls:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasVerifiedPhone:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withCanInstallMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIsFriend:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withNickname:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withPhoneticName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withUserId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后的 build 方法会生成一个 FBMUserFetchStatus 实例，有了这个 Builder 就知道有哪些参数是可以在初始化时进行设置的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-manager&quot;&gt;Data Manager&lt;&#x2F;h3&gt;
&lt;p&gt;这是重头戏，所以看起来略累，东西很多，很可能推断错误。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看实体类，首先是 FBEntityRequest&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntityRequestParse
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;canParse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;syncError;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isSyncing) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; syncing;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以实体都是可以被解析和同步的，还自带了一个 Request。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 FBEntity&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntity &amp;lt;FBEntityRequestParse, NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityURLForFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityURL;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isDataStale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; dataStale;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;lastSyncTime;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fbid;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collection:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionRequest:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBEntityDownloader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityDownloader;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentEdges&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentCollections&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityInitializeWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每个 Entity 都有一个 entityURL，或许可以用来同步？ dataStale 应该是用来表示数据是否 dirty，如果是的话，可能需要同步。 还可以请求 Collection。&lt;&#x2F;p&gt;
&lt;p&gt;FBEntityCollection 跟 FBEntity 类似，不过多了 syncAll &#x2F; memberClass &#x2F; allObjects 这些属性&#x2F;方法。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看数据请求，首先是 FBRequest，不太明白这个 Class 的具体功能，因为没有 URL，一个没有 URL 的 Request 能做什么？ 然后看到了 FBRequester，这个看起来是一个数据请求类，有 URL, responseHandler, connection 状态, delegate 等。但这只是单个的请求，如何对多个请求进行管理呢，这时看到了 FBNetworker，它有 +sharedNetworker, requestQueue, cancelRequests:, addRequest: 所以就是它了。等等，为什么下面还有一个 FBNetworkerRequest ？看起来像是 FBNetworker 的 Delegate，但不确定。&lt;&#x2F;p&gt;
&lt;p&gt;为了避免 URI 散落在各处，Facebook 还专门为 NSURL 写了个 Category 来统一管理 URI。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;NSURL (FBFoundation)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;friendsNearbyURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;codeGeneratorURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURLWithTagId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pokesURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;personExpandedAboutURLWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个 URL 生成类，FBURLRequestGenerator，该类保存了 appSecret 和 appVersion，生成的 URL 会自动带上这些属性。&lt;&#x2F;p&gt;
&lt;p&gt;其实还有很多，实在看不下来了···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smarter-views&quot;&gt;Smarter Views&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道 ViewController 自带了一个 view，可以直接在这个 view 上 addSubview，正是由于这个便利性，很多创建 View 的代码也挤在了 VC 里，实在是不雅观。&lt;&#x2F;p&gt;
&lt;p&gt;更好的方法是替换 VC 的 view 为自定义的 View，然后把这个自定义 View 独立出去。比如在 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 时覆盖 view&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyProfileViewController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadView &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MyProfileView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以同时重定义 view 的类型，如 &lt;code&gt;@property (nonatomic) MyProfileView *view&lt;&#x2F;code&gt;，让编译器明白 view 的类型已经变了。&lt;&#x2F;p&gt;
&lt;p&gt;因为看到了不少 VC 中都有 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 方法，所以推断可能使用了这项技术。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fbsession&quot;&gt;FBSession&lt;&#x2F;h3&gt;
&lt;p&gt;在 Web 开发领域，Session 是用来保存用户相关的信息的，FBSession 自然也不例外，不过它保存的内容还真是多呢。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBSession : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBInvalidating&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setCurrentSession:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_globalSessionForDebugging&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDcurrentSession&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBAPISessionStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiSessionStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize apiSessionStore=_apiSessionStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBSessionDiskStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionDiskStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize sessionDiskStore=_sessionDiskStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;store; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize store=_store;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSecret; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize appSecret=_appSecret;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isValid) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; valid;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; hasUser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userFBID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBViewerContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewerContext;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBUserPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userPreferences;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionPreferences;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateAccessToken:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateActingViewer:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clearPreferences&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invalidate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDvalueForKeyRequiresUser:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithAppSecret:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiSessionStore:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBReactionController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;reactionController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBLocationPingback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;locationPingback;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBAppSectionManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSectionManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBBookmarkManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;bookmarkManager;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and many more...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Session 是可以保存到本地的，有一个状态变量用来标识是否有效(valid)，是否已登录(hasUser)，用户的一些设置(这些设置会保存到本地)，可以更新 AccessToken，还带了各种 Controller 和 Manager，所以东西还是挺多的。&lt;&#x2F;p&gt;
&lt;p&gt;这里有两个特殊方法，使用后会被 Fire···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;services&quot;&gt;Services&lt;&#x2F;h3&gt;
&lt;p&gt;Service 顾名思义，提供某种服务，往往跟界面无关。从目录层级上看，Service 并不在 Module 里面，也就是说这二者是独立的，比如 FBTimelineModule 并不包含 FBTimelineService。&lt;&#x2F;p&gt;
&lt;p&gt;Service 之间可以有依赖，这里是通过 &lt;code&gt;startAppServiceWithDependencies:&lt;&#x2F;code&gt; 来实现的，不过不清楚 Service 自身如何声明依赖哪些其他的 Services。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;style&quot;&gt;Style&lt;&#x2F;h3&gt;
&lt;p&gt;App 的 Style 是一个容易被忽视的地方，开发往往看着设计图就开始写了，这样很容易造成样式不统一，且将来调整起来也不方便。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 是通过 Category 来自定义样式的，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBMediaKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonTypeSystemWithTitle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithNormalImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;highlightedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithTemplateImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithStyle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBUIKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_moreOptionsNavBarButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithText&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithRightPadding:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (MNLoginFormAppearanceHelpers)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;phoneFormHeaderButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;singleSignOnButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;skipButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;formFieldButtonInvertedColors&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样也不用关心 fontColor，margin，backgroundColor 等，直接拿来用即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;从目录结构上来看，Facebook 有 FBUIKit, FBFoundation, FBAppKit, Module。其中 FBUIKit 和 FBFoundation 是业务无关的，可以用在其他 App 上，FBAppKit 和 Module 是业务相关的。&lt;&#x2F;p&gt;
&lt;p&gt;Module 自带资源，可以看成是一个 mini app。&lt;&#x2F;p&gt;
&lt;p&gt;使用了 EGODatabase, SDWebImage, SSZipArchive, CocoaLumberjack 这几个开源类库（可能还有更多）。&lt;&#x2F;p&gt;
&lt;p&gt;时间和能力有限，只能挖掘出这些信息，希望能带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>把手机拿在手里，这样就不会错过细微的风景了</title>
            <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/phone-in-my-hand/</link>
            <guid>https://limboy.me/posts/phone-in-my-hand/</guid>
            <description>&lt;p&gt;「拍照」对于一个手机的意义已经越来越重要了，每次新出一款手机，都会先看下拍照效果怎么样：夜景、强光、人像、阴天、色彩等等。但真正到手后，它的作用真的发挥出来了么？还是只是用来记录生活：美食、自拍、风景、某地的标志物等等。这些当然是相机可以做也应该做的事，但相信我们在买它的时候还会有别的打算吧，比如抓拍容易被忽略，但在你看来又值得记录的场景。&lt;&#x2F;p&gt;
&lt;p&gt;有很长一段时间，走在路上的时候，它只是静静地躺在裤兜了，有时也会用来听听音乐或 podcast。因为每天走的是同一条路，路上的风景早已了然于胸，闭上眼睛都知道前面一个路口左转会有什么，过了天桥又会有什么，进了小区会看见什么。对于这些习惯了的事物会自动关闭「探索」模式，就像老朋友一样，ta 懂你，你也懂 ta。&lt;&#x2F;p&gt;
&lt;p&gt;直到有一天我把手机拿在手里，就像攥着一把锤子一样，到处留意那个钉子。&lt;&#x2F;p&gt;
&lt;p&gt;路边有一家纹身店，我看到一个皮肤白皙，相貌英俊的男生略带羞涩的坐在里面，不知出于什么原因想要给自己纹个身。看到一只老鼠从河的一头游到另一头，钻进了大片铜钱草的深处。看到路边有一家修鞋的店，而店里的一位师傅是聋哑人。看到斑马线有时会在前半部分故意呈现曲折状。看到傍晚的天空居然是火烧云。看到刚下完雨，路边的绿化带上有水珠挂在了蜘蛛网上。看到地上的石板路是参差不齐，错落有致地摆放。看到路边的树上结了一串不知名的果实。&lt;&#x2F;p&gt;
&lt;p&gt;这个之前自以为一览无余的风景，竟有那么多细微之处未曾留意。我们总是希望能去外面的世界看看，看看不一样的人，不一样的事，不一样的景，这当然是好的，只是也别忽略了现在生活的这个小世界，细细品味，或许还会有不少惊喜呢。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Design Details - Camu</title>
            <pubDate>Sat, 20 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/camu/</link>
            <guid>https://limboy.me/posts/camu/</guid>
            <description>&lt;p&gt;Camu 是芬兰的&lt;a href=&quot;http:&#x2F;&#x2F;sumoing.com&#x2F;&quot;&gt;sumoing&lt;&#x2F;a&gt;团队开发的一款拍照 App，这是一个目前只有 6 个人的团队，但都有着不错的功底，个人也比较喜欢&#x2F;向往这样的小团队。&lt;&#x2F;p&gt;
&lt;p&gt;前些日子苹果在 AppStore 的首页推荐了它，足见它肯定有过人之处。使用下来的感受有点像 ToDoList 里的 Clear，手势用得比较多，操作挺方便，页面很干净，有恰当的动画效果，也有自己一些独到的点。简单说来就是「优雅且体贴」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-chang&quot;&gt;开场&lt;&#x2F;h3&gt;
&lt;p&gt;Camu 的开场跟其他 App 略有不同，常规的开场是几个引导图左右滑动，进入到最后一页时，点击某个按钮进入 App。Camu 的开场跟 Paper 一样是一个视频，这就意味着 App 体积的增加，以及更多的成本。好处就是让用户感受到了诚意，带着愉悦的心情开始了探索之旅。不过这个大大的 logo 还是略显挡害。同时用一句话说明有了这个 App 能做什么“Better Photos and Videos”。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-opening.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;正好提一下，很多产品在描述自身时经常会从 feature 入手，能做这个，能做那个，而忘了说有了它之后，用户能得到什么。举个简单的例子就是超级玛丽吃了花之后，能发子弹，应该去着重描述的是「发子弹」这个结果，而不是「花」这个产品本身。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s-media-cache-ec0.pinimg.com&#x2F;originals&#x2F;cd&#x2F;73&#x2F;ac&#x2F;cd73ac84c1a711b71fa7d1b701bc6845.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-qiu-fang-wen-xiang-ji-xiang-ce-he-mai-ke-feng&quot;&gt;请求访问相机、相册和麦克风&lt;&#x2F;h3&gt;
&lt;p&gt;越来越多的 App 开始注重这些小细节了，这样让用户有种被尊重的感觉，也为接下来的几个弹出框有了心理准备。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-ask4permision.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;shi-shi-lu-jing&quot;&gt;实时滤镜&lt;&#x2F;h3&gt;
&lt;p&gt;很多拍照 App 都有这个功能，比如在底下显示一排缩略图，然后给缩略图加上实时滤镜效果，这样做的好处是可以直观地看到各个滤镜的效果，弊端是因为缩略图比较小，所以看得也不是很清楚，需要点击，运用滤镜效果后才能看清，同时还占空间，并且视觉上也容易感觉繁杂。&lt;&#x2F;p&gt;
&lt;p&gt;Camu 采用了另一种方式来处理：左右滑动。这样操作上的成本很低，页面也显得干净，弊端就是无法快速指定某个滤镜效果，在他们看来可能干净、好用的优先级更高些。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-filter-switch.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;滤镜强度的控制是通过上下滑动来实现的，左右会有两根白色的条来指示强度，视觉上和体验上都很舒服。这一排的按钮，第一次点击时都会出现提示，说明是做什么的，有的还会有引导动画。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-guide.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h3 id=&quot;duo-chong-pai-she-mo-shi&quot;&gt;多种拍摄模式&lt;&#x2F;h3&gt;
&lt;p&gt;这也是 Camu 的一个特点，可能其他 App 也有类似的功能，但 Camu 在设计上做的简单又明了。&lt;&#x2F;p&gt;
&lt;p&gt;一共有 4 种模式：方形、长方形、左右各半和上下各半（一开始以为是这样，后来才发现可以旋转）。这里有一个小问题是，如果光看到那个长方形的 icon，很可能不知道它是做什么用的，就不去点它了。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-mode.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;这 4 种模式中有一种是可以在正方形的区域内，任意旋转轴线，从而形成两种不同的图拼一起的效果，它其实是做了一个效果来提示可以转动的，但我在使用过程中没有注意到，在看了官网的&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;98201619&quot;&gt;视频&lt;&#x2F;a&gt;后才发现的。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-split.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;用类似国际象棋棋盘的黑白格子，来表示没有照片的一边，视觉上确实比纯色好不少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-dong-pai-zhao-mo-shi&quot;&gt;自动拍照模式&lt;&#x2F;h3&gt;
&lt;p&gt;不知道其他相机类 App 是如何处理这个问题的，Camu 的处理方式是：如果视线内的图像保持静止，那么就拍照，不然就等到静下来。这样就能保证照片不会是模糊的。用在自拍上应该很合适。&lt;&#x2F;p&gt;
&lt;p&gt;Camu 还有一个特点，能通过图像、icon、动画就表述清楚的事情，决不让文字搀和进来。这样才能让页面保持干净，当然也对设计会有更高的要求。但 Camu 也知道需要把自拍的实现方式告诉用户，然后就出现了这个尴尬的界面。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-oops.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击自拍 icon 后，会出现「1」，再点一下出现「2」，然后是「3」，再点就又回到了「1」。这里的表述其实并不是非常清晰，用户不一定能一下子明白这几个数代表的含义，但稍微想一下就会知道这是拍摄几张的意思。&lt;&#x2F;p&gt;
&lt;p&gt;数字切换的动画看着很舒服。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-auto.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h3 id=&quot;bian-ji-zhao-pian&quot;&gt;编辑照片&lt;&#x2F;h3&gt;
&lt;p&gt;当按下拍照按钮后，就进入了编辑模式，依旧很简洁&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-edit.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这 4 个按钮分别对应「小水印」、「输入文字」、「缩放&#x2F;旋转」、「模糊」&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ru-wen-zi&quot;&gt;输入文字&lt;&#x2F;h3&gt;
&lt;p&gt;在手机上输入文字是很麻烦的事情，不光是输入，想出合适的语句也是挺有考验的，但图配文才能更好地表达，于是 Camu 做了 Slogan 这个功能。点击对应的 icon 后会在图片上自动输入一段鸡汤文，可以拖动，调整字体，调整布局，这一切操作起来都很方便。&lt;&#x2F;p&gt;
&lt;p&gt;文字的出现和消失效果也有新意，就像镜头拉伸一样，而且是逐行操作，实现起来应该也不简单，这也让切换 Slogan 这个行为变得有了趣味。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-slogan.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h3 id=&quot;suo-fang-xuan-zhuan&quot;&gt;缩放、旋转&lt;&#x2F;h3&gt;
&lt;p&gt;看到网格线，就知道可以缩放，使用几次之后也会顺便发现可以旋转，这时右边的弧形操作区域的作用是什么呢？我觉得一个是更加明了它是可以旋转的，还有就是当只想进行旋转操作时，可以单手进行。同时操作这个弧形按钮时图片不光会旋转也会发生缩放，相当于同时把这两件事情做了。&lt;&#x2F;p&gt;
&lt;video playsinline controls&gt;
  &lt;source src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-rotate.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;&lt;h3 id=&quot;fen-xiang&quot;&gt;分享&lt;&#x2F;h3&gt;
&lt;p&gt;Camu 的分享功能藏得比较深，要不是在&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;98201619&quot;&gt;视频&lt;&#x2F;a&gt;里看到，也不会刻意地去使用。&lt;&#x2F;p&gt;
&lt;p&gt;分享分为两部分，上面那部分为社交平台，下面为联系人，不过由于这二者不是一个 scrollView，导致在滑动联系人的时候，会出现比较生硬的效果。&lt;&#x2F;p&gt;
&lt;p&gt;右下角的区域在没有选择目标用户时，是灰色的，作为提示用。当选择了用户后，又作为按钮使用，同一个功能块在不同情况下，用作不同的用处，可以算巧妙，也可以算糟糕，不过在这里倒没怎么困扰我。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-share.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-share-selected.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比较贴心的是，如果你们之间有过交流，那么会带上对方说的最后一句话。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-share-selected1.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;xiao-xi-lie-biao&quot;&gt;消息列表&lt;&#x2F;h3&gt;
&lt;p&gt;Camu 可以自建小组，也可以私聊，支持发图片和文字。界面依旧很简洁。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-message.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-message-keyboard.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;输入这里还有些问题，比如滑动消息时，键盘不会缩回去，只有点击对话区域才行。对话看到一半，此时点击输入框，升起键盘，不会自动 scroll 到底部，而是需要输入文字后，才会滚到底部。&lt;&#x2F;p&gt;
&lt;p&gt;然后就是右上角的「More」按钮，不知道是不是在向 Android 致敬。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-zhi&quot;&gt;通知&lt;&#x2F;h3&gt;
&lt;p&gt;刚打开 Camu 时，觉得左边空空的，略有些难受，原来是用来放通知的，这样看着就舒服些了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;camu&amp;#x2F;camu-notification.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;总体说来 Camu 还是很有诚意的用心之作，简单美观又好用，也有一些独特的点，而且针对不同尺寸的屏幕做了不同的优化。如果要打分的话，我会给 87 分。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>MVP VS MLP</title>
            <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mvp-vs-mlp/</link>
            <guid>https://limboy.me/posts/mvp-vs-mlp/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-mvp&quot;&gt;什么是 MVP？&lt;&#x2F;h3&gt;
&lt;p&gt;MVP(Minimum Viable Product)可以理解为「最小可行产品」，就是一个产品只包含了最精简的，用户最需要的功能。就像古人需要知道大概的时间，戳一根棍在地上，看着棍的影子心里就大概有个数了，这根棍就是 MVP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvp-de-hao-chu-shi-shi-yao&quot;&gt;MVP 的好处是什么？&lt;&#x2F;h3&gt;
&lt;p&gt;我们在构思一款产品时，心里往往会有很多想法，尤其是开启了头脑风暴模式时，更是五花八门，简单罗列起来可能就有几十条，那么如何对这些想法进行取舍呢？&lt;&#x2F;p&gt;
&lt;p&gt;首先需要一个目标：这个产品要解决的用户痛点是什么？围绕这个点去考虑哪些想法是可行的，哪些暂时不可行，但将来会可行，哪些跟目标完全不相干等等。这个目标就像磁铁一样，把最相关的功能点都吸引了过来，这样就会产生一个 MVP。&lt;&#x2F;p&gt;
&lt;p&gt;比如想做一个专门拍猫的 App，要解决的问题是：为猫奴们提供一个专门的互动平台。然后就可以罗列功能点了，比如是否需要按猫的品种分类，是否需要讨论区，是否可以拍视频，是否需要滤镜，是否需要分享到社交网络，是否可以赞，是否可以发表养猫日记，是否可以对照片&#x2F;视频评论等等。&lt;&#x2F;p&gt;
&lt;p&gt;此时会发现，好像这些功能点都跟目标有关系，那是不是需要一下子都做出来呢？不，不要这样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;media-cache-ak0.pinimg.com&#x2F;736x&#x2F;46&#x2F;03&#x2F;43&#x2F;460343019a237709f80afb42647b285a.jpg&quot; alt=&quot;Spotify Product Design&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最开始要验证的一个想法是：用户会不会对这样的平台感兴趣？毕竟可以分享的平台那么多，所以这是最需要验证的。一下子上太多功能，对用户来说是会有压力的。所以最开始可以针对「猫」这个特点去做些文章，比如拍照时，可以选择猫的种类，可以按猫的种类或颜色进行筛选等等。毕竟这是区别其他平台的一个很重要的点，然后可以加上最基本的社交功能，比如「赞」。再结合几个功能点就可以出一版了。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，看用户的反应和使用习惯，再从中找出问题，进行下一版的完善。&lt;&#x2F;p&gt;
&lt;p&gt;所以 MVP 的好处是可以避免花了大把的时间去做一个产品，结果放出来后发现没人用这种尴尬的局面。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvp-de-wen-ti-zai-na-li&quot;&gt;MVP 的问题在那里？&lt;&#x2F;h3&gt;
&lt;p&gt;MVP 的问题在于少了情感，而人偏偏又情感丰富而细腻。想象一下，如果「Her」里面，萨曼莎的声音像机器人那样，其他都不变，西奥多还会对她那么情有独钟么？不会，因为尽管说的话一样，但机器人的声音让我们有「距离感」，而这种「距离感」会时刻提醒别人，我只是一个机器，我跟你们不一样，我只是一堆硬件和软件的产物，这样就不容易让使用者产生愉悦感。&lt;&#x2F;p&gt;
&lt;p&gt;就像在「下厨房」之前，有很多的类似的网站，但当「下厨房」出来之后，很多人都转向了它，除了界面干净整洁，使用方便外，「有爱」也是一个很重要的因素。那句「唯有美食与爱不可辜负」抓住了多少人的心啊。&lt;&#x2F;p&gt;
&lt;p&gt;所以就引出了另一种模式：MLP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-mlp&quot;&gt;什么是 MLP？&lt;&#x2F;h3&gt;
&lt;p&gt;MLP(Minimum Lovable Product)「最小可爱产品」(总觉得怪怪的)，是在 MLP 的基础上注入了情感元素，看下面这张图片。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;media-cache-ec0.pinimg.com&#x2F;736x&#x2F;e6&#x2F;f4&#x2F;9a&#x2F;e6f49a169c6d58731cba50968967c94a.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边的蛋糕只是一个蛋糕，是一个可以充饥的食品，可能味道还不错。右边的也还是蛋糕，但会觉得「萌萌的」，拉近了与客户之间的距离。如果味道差不多，价钱也差不多，你会选择哪个？&lt;&#x2F;p&gt;
&lt;p&gt;其实很多人都想做一款体贴的产品，但最终放弃了，因为它太难了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shang-ceng-de-ya-li&quot;&gt;上层的压力&lt;&#x2F;h4&gt;
&lt;p&gt;Boss 会关注项目的进度，何时能够完工，为什么进度这么慢等等，如果顶不住压力，就容易产生「就这样吧，先把功能实现了再说」这样的念头，而这样的心态是很难做出一个 MLP 的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-ji-dui-chan-pin-qing-zhu-de-qing-gan-bu-gou&quot;&gt;自己对产品倾注的情感不够&lt;&#x2F;h4&gt;
&lt;p&gt;有些产品经理对待产品，会觉得这是上头交代的任务，那么我完成就好了。然后就开始寻找类似的 App 去体验，去找灵感，然后找出几个符合当前产品的表现形式或交互，凑在一起就基本完成任务了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gong-cheng-shi-men-de-ya-li&quot;&gt;工程师们的压力&lt;&#x2F;h4&gt;
&lt;p&gt;有时我们确实倾注了感情，也确实在原型图上有所体现，但到了工程师这里往往会遇到些困难。因为这些「锦上添花」的东西，往往看着挺小，但代码上的改动会比较大，如果工程师内心觉得这是个「没什么用」的功能，就会想出一些理由来说服你，说到最后觉得：哎，那就这样吧。&lt;&#x2F;p&gt;
&lt;p&gt;所以有爱的产品不多，但「有爱」是可以带来很多好处的，为了这些好处，也值得花时间去雕琢。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-shi-fan-liao-cuo-ye-hui-geng-rong-yi-de-dao-liang-jie&quot;&gt;即使犯了错，也会更容易得到谅解&lt;&#x2F;h4&gt;
&lt;p&gt;同样是被踩了一脚，如果是被好朋友踩的，笑笑就过了，如果被陌生人踩了，虽然也没什么，但也会略显不悦。&lt;&#x2F;p&gt;
&lt;p&gt;用户愿意再给一次机会，相信它会改进，会变得更好，毕竟对它有感情。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;geng-rong-yi-xing-cheng-bu-luo&quot;&gt;更容易形成部落&lt;&#x2F;h4&gt;
&lt;p&gt;大多数的产品都是针对某个人群开发的，越有爱，就越容易形成部落。部落就是忠实的用户群。部落的人数越多，产品经理和公司的其他员工的存在感和满足感就越强烈。&lt;&#x2F;p&gt;
&lt;p&gt;所以，要做出更好的产品，向着 MLP 出发吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做产品的态度</title>
            <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-attitude-of-making-products/</link>
            <guid>https://limboy.me/posts/the-attitude-of-making-products/</guid>
            <description>&lt;p&gt;做人要有态度，做产品自然也要有态度。李宗盛在「致匠心」里提到：人不能孤独地活着，之所以有作品是为了沟通，透过作品去告诉人家心里的想法，眼中看世界的样子，所在意的，所珍惜的，所以，作品就是自己。&lt;&#x2F;p&gt;
&lt;p&gt;那该用怎样的态度去做产品呢？以下是我想到的一些&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ba-chan-pin-dang-zuo-yi-jian-yi-zhu-pin&quot;&gt;把产品当做一件艺术品&lt;&#x2F;h3&gt;
&lt;p&gt;了解一个人最好的方式，不是看他说了什么，而是看他做了什么。你可能对产品有特别深刻的理解，能头头是道的讲上两三个小时，但如果没有作品，或者作品很一般，不禁会让人怀疑你到底有没有货？&lt;&#x2F;p&gt;
&lt;p&gt;对产品用心的人，对生活往往也很用心，有独特的魅力。谁不想与这样的人一起合作呢。&lt;&#x2F;p&gt;
&lt;p&gt;艺术品是需要打磨的。光是交互和设计上的细节就足够打磨一阵的。因为刚开始策划产品时，总会有疏忽遗漏的地方，或者效果出来后有不如意的地方。对于这些可以优化的点的态度很重要，有不少做产品的往往会在这一步妥协，理由是：先放上去，然后再迭代。在我看来，这跟把文章放到 Instapaper 里一样，read it later = read it never。就像明知道一碗饭里藏着一只小强的嫩腿，但因为拿出来太麻烦，就直接端给用户吃一样。这是一种不负责任的态度，对用户，更是对自己。&lt;&#x2F;p&gt;
&lt;p&gt;「禅与摩托车维修艺术」里说道：想知道怎样画一张完美的画吗？很简单，你先让自己变得完美，然后再顺其自然地画出来。打磨产品的过程，就是让自己变得完美的过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-shu-ju-min-gan&quot;&gt;对数据敏感&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道，数据是用来做参考的，所以首先要有数据。在开发花瓣 App 的过程中，我们发现「事件」是一个很重要的数据源，所以埋了 60 多个点，尽可能覆盖到所有可测点，同时又不至于太细。&lt;&#x2F;p&gt;
&lt;p&gt;有了数据之后，怎么看数据也是一门小学问。这里牵扯到另一个特质，不仅仅是在做产品上，更应该在生活上 -- 好奇心。在好奇心的驱使下，才会去追问为什么导航栏按钮的点击次数明显大于长按，为什么双击的使用频率那么高，为什么在瀑布流页面很少会有人长按，为什么人们不愿意去点采集所在的画板等等。&lt;&#x2F;p&gt;
&lt;p&gt;要根据数据推测可能的原因，这样才能有优化的方向。数据高了要知道为什么会高，低了是因为这个功能本身就没什么人会用，还是因为没做好导致的，都要去想。&lt;&#x2F;p&gt;
&lt;p&gt;当看到数据背后的问题，然后有针对性地做出调整发布新版后，看到数据变好了，这种快感也只有亲身经历才能体会吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-shi-duo-chong-fang-an-zhao-dao-zui-you-jie&quot;&gt;尝试多种方案，找到最优解&lt;&#x2F;h3&gt;
&lt;p&gt;在原型阶段尤其如此。苹果在 WWDC 2014 上，还搬出了他们内部做 App 的流程：prototyping fake it till you make it. 非常值得一看。里面提到了三点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make fake apps&lt;&#x2F;li&gt;
&lt;li&gt;Show people&lt;&#x2F;li&gt;
&lt;li&gt;Learn from their feedback&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;make-show-learn.png&quot;
        width=&quot;630&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;各个阶段会有不同的问题&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些应该是真实的？&lt;&#x2F;li&gt;
&lt;li&gt;哪些可以是假的？&lt;&#x2F;li&gt;
&lt;li&gt;什么场景下会用它？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;你知道如何使用 X 功能吗？&lt;&#x2F;li&gt;
&lt;li&gt;使用 X 功能是否足够简单？&lt;&#x2F;li&gt;
&lt;li&gt;如何能做得更好？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learn&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些跟预期的一致？&lt;&#x2F;li&gt;
&lt;li&gt;哪些跟预期的不一致？&lt;&#x2F;li&gt;
&lt;li&gt;有什么新的启发？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;记得在做花瓣的新功能「一起」时，遇到了一个很棘手的问题，我们想了好几天也没有合适的解决方案。场景大概是这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;yiqi.png&quot;
        width=&quot;322&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当用户添加了新的帖子时，该如何处理？是否需要跳到顶部？如果跳到顶部，那么如果之前浏览了很多页，这时再要回去就困难了。如果不跳，只是给个提醒，又有点违背用户的心理期待。如果浏览得少就跳，浏览得多就不跳呢？NoNoNo，体验不一致，用户会懵的。给一个按钮，让用户自己选择是否跳到顶部？NoNoNo，首先是没有合适的地方放按钮，其次把选择权交给用户又多了一个步骤，而且让用户思考了。&lt;&#x2F;p&gt;
&lt;p&gt;就这样，一直没有好的办法，因为一直装着这件事，某天回家上床后，忽然有了灵感：不如把看过的帖子都折叠起来，然后跳到顶部，这样就没有「回去困难」的问题了，而且看起来也很优雅。于是起床，忙乎到 3 点，把这个功能实现了，大家体验了下，都觉得不错。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;qiyi-zhedie.png&quot;
        width=&quot;324&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;做产品，有时就想解数学题一样，思路对了的时候是能够感知到的，有种本就该如此的感觉。如果缺少这种感觉，或许是因为尝试得还不够。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ti-yan-ge-lei-you-zhi-app&quot;&gt;体验各类优质 App&lt;&#x2F;h3&gt;
&lt;p&gt;做产品的，往往手机里装了满屏的 App，反正空间闲着也是闲着，似乎这样才有些「安全感」。我倒不这么认为，我们应该去体验优质的 App，从下载下来那一刻就开始，甚至下载之前就可以琢磨：为什么会下这个 App？从哪里得知的？它是做什么用的？其他人对它的评价如何？&lt;&#x2F;p&gt;
&lt;p&gt;然后看着这个 icon，它传达了什么意思？是否简洁？进去之后的启动页是如何的？启动速度是否够快？引导页有什么特点？我看着这些引导页的感受是什么？第一个页面是否吸引我？是否知道该如何操作？有哪些地方觉得特别贴心的？有哪些地方可以改进的？为什么这个按钮要放在这里？为什么信息要这么布局等等。&lt;&#x2F;p&gt;
&lt;p&gt;所以要完整细致地体验一个 App 其实是很费精力的，只有多去使用这样的 App，才能提升自己的品味，找到做一款优质 App 的感觉。我们使用苹果的产品的原因之一是，它能把复杂的电脑技术变得让人容易理解，非常自然，从中也能得到些许启发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-yao-ba-xi-wang-ji-tuo-zai-tui-yan-shang&quot;&gt;不要把希望寄托在推广上&lt;&#x2F;h3&gt;
&lt;p&gt;很多人埋怨自己的产品用的人太少是因为缺少合适的推广渠道，往往抱着只要 XXX 推一下，用户量就会蹭蹭地往上涨，活跃度也会跟着上来的心态。这跟出身贫寒，饱受贫穷之苦的人觉得只要有了钱一切都会好起来的想法如出一辙。但如果仔细想想，事实可能并不是那样。&lt;&#x2F;p&gt;
&lt;p&gt;虽然目前的用户比较少，但他们是否有在用，用的是否舒服，是否解决了他们的某个问题，自己的产品用起来是否足够简单等等，这些都是可以先问问自己的。&lt;&#x2F;p&gt;
&lt;p&gt;宁愿让 50 个忠实用户愉快地使用自己的产品，而不是通过推广让 1000 个人知道了，结果只有 50 个人在用。&lt;&#x2F;p&gt;
&lt;p&gt;因上努力，果上随缘。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-duan-wan-shan-zi-ji-de-zhi-shi-ti-xi&quot;&gt;不断完善自己的知识体系&lt;&#x2F;h3&gt;
&lt;p&gt;张小龙说，产品经理就是站在上帝身边的人，那么这个人必须要懂得足够多，才有资格站在那里。这不是看几本产品相关的书就可以的，那样就真的是「人人都是产品经理」了。虽不需上知天文，下知地理。但有些领域的知识还是最好知道点，比如心理学、设计、统计学、编程、商业等等，在做决策时心里能更有底一些，沟通时也会更流畅。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-ju-ni-yu-bu-gai-jiu-jie-de-xi-jie&quot;&gt;不拘泥于不该纠结的细节&lt;&#x2F;h3&gt;
&lt;p&gt;有不少人会觉得「扣细节」是一个优秀的品质，大部分情况下如此，但有时候也应该适度避免陷入这个误区。比如 Google 设计团队不能决定两种蓝色可以选哪一种，而必须要用 41 种辅助颜色来证明哪个蓝色表现更好。或者把一个边界调整 3~4 个像素，也被要求用数据来证明这种调整的必要性。这些都属于「不该扣的细节」，比这更重要，更有意思的事情还有很多。&lt;&#x2F;p&gt;
&lt;p&gt;以上是做了一段时间产品经理总结的一些小经验，与君共勉。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReactiveCocoa2实战</title>
            <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/deep-into-reactivecocoa2/</link>
            <guid>https://limboy.me/posts/deep-into-reactivecocoa2/</guid>
            <description>&lt;p&gt;之前已经写过两篇关于 ReactiveCocoa(以下简称 RAC)的文章了，但主要也是在阐述基本的概念和使用，这篇文章将会从实战的角度来看看 RAC 到底解决了哪些问题，带来了哪些方便，以及遇到的一些坑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;wei-shi-yao-yao-shi-yong-rac&quot;&gt;为什么要使用 RAC？&lt;&#x2F;h4&gt;
&lt;p&gt;一个怪怪的东西，从 Demo 看也没有让代码变得更好、更短，相反还造成理解上的困难，真的有必要去学它么？相信这是大多数人在接触 RAC 时的想法。RAC 不是单一功能的模块，它是一个 Framework，提供了一整套解决方案。其核心思想是「响应数据的变化」，在这个基础上有了 Signal 的概念，进而可以帮助减少状态变量(可以参考 jspahrsummers 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;enemy-of-the-state&quot;&gt;PPT&lt;&#x2F;a&gt;)，使用 MVVM 架构，统一的异步编程模型等等。&lt;&#x2F;p&gt;
&lt;p&gt;为什么 RAC 更加适合编写 Cocoa App？说这个之前，我们先来看下 Web 前端编程，因为有些相似之处。目前很火的 AngularJS 有一个很重要的特性：数据与视图绑定。就是当数据变化时，视图不需要额外的处理，便可正确地呈现最新的数据。而这也是 RAC 的亮点之一。RAC 与 Cocoa 的编程模式，有点像 AngularJS 和 jQuery。所以要了解 RAC，需要先在观念上做调整。&lt;&#x2F;p&gt;
&lt;p&gt;以下面这个 Cell 为例&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-demo.png&quot;
        width=&quot;321&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;正常的写法可能是这样，很直观。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)configureWithItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(HBItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)item
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarImageView&lt;&#x2F;span&gt;&lt;span&gt; setImageWithURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarURL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其他的一些设置
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但如果用 RAC，可能就是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(HBItemViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModel) {
&lt;&#x2F;span&gt;&lt;span&gt;			@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarImageView&lt;&#x2F;span&gt;&lt;span&gt; setImageWithURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarURL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其他的一些设置
&lt;&#x2F;span&gt;&lt;span&gt;		}];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是先把数据绑定，接下来只要数据有变化，就会自动响应变化。在这里，每次 viewModel 改变时，内容就会自动变成该 viewModel 的内容。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;signal&quot;&gt;Signal&lt;&#x2F;h4&gt;
&lt;p&gt;Signal 是 RAC 的核心，为了帮助理解，画了这张简化图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-signal.png&quot;
        width=&quot;743&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的数据源和 sendXXX，可以理解为函数的参数和返回值。当 Signal 处理完数据后，可以向下一个 Signal 或 Subscriber 传送数据。可以看到上半部分的两个 Signal 是冷的(cold)，相当于实现了某个函数，但该函数没有被调用。同时也说明了 Signal 可以被组合使用，比如&lt;code&gt;RACSignal *signalB = [signalA map:^id(id x){return x}]&lt;&#x2F;code&gt;，或&lt;code&gt;RACSignal *signalB = [signalA take:1]&lt;&#x2F;code&gt;等等。&lt;&#x2F;p&gt;
&lt;p&gt;当 signal 被 subscribe 时，就会处于热(hot)的状态，也就是该函数会被执行。比如上面的第二张图，首先 signalA 可能发了一个网络请求，拿到结果后，把数据通过&lt;code&gt;sendNext&lt;&#x2F;code&gt;方法传递到下一个 signal，signalB 可以根据需要做进一步处理，比如转换成相应的 Model，转换完后再&lt;code&gt;sendNext&lt;&#x2F;code&gt;到 subscriber，subscriber 拿到数据后，再改变 ViewModel，同时因为 View 已经绑定了 ViewModel，所以拿到的数据会自动在 View 里呈现。&lt;&#x2F;p&gt;
&lt;p&gt;还有，一个 signal 可以被多个 subscriber 订阅，这里怕显得太乱就没有画出来，但每次被新的 subscriber 订阅时，都会导致数据源的处理逻辑被触发一次，这很有可能导致意想不到的结果，需要注意一下。&lt;&#x2F;p&gt;
&lt;p&gt;当数据从 signal 传送到 subscriber 时，还可以通过&lt;code&gt;doXXX&lt;&#x2F;code&gt;来做点事情，比如打印数据。&lt;&#x2F;p&gt;
&lt;p&gt;通过这张图可以看到，这非常像中学时学的函数，比如 &lt;code&gt;f(x) = y&lt;&#x2F;code&gt;，某一个函数的输出又可以作为另一个函数的输入，比如 &lt;code&gt;f(f(x)) = z&lt;&#x2F;code&gt;，这也正是「函数响应式编程」(FRP)的核心。&lt;&#x2F;p&gt;
&lt;p&gt;有些地方需要注意下，比如把 signal 作为 local 变量时，如果没有被 subscribe，那么方法执行完后，该变量会被 dealloc。但如果 signal 有被 subscribe，那么 subscriber 会持有该 signal，直到 signal sendCompleted 或 sendError 时，才会解除持有关系，signal 才会被 dealloc。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;raccommand&quot;&gt;RACCommand&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;RACCommand&lt;&#x2F;code&gt;是 RAC 很重要的组成部分，可以节省很多时间并且让你的 App 变得更 Robust，&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;reactivecocoa-essentials-understanding-and-using-raccommand&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;可以帮助你更深入的理解，这里简单做一下介绍。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;RACCommand&lt;&#x2F;code&gt; 通常用来表示某个 Action 的执行，比如点击 Button。它有几个比较重要的属性：executionSignals &#x2F; errors &#x2F; executing。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;executionSignals&lt;&#x2F;code&gt;是 signal of signals，如果直接 subscribe 的话会得到一个 signal，而不是我们想要的 value，所以一般会配合&lt;code&gt;switchToLatest&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;errors&lt;&#x2F;code&gt;。跟正常的 signal 不一样，&lt;code&gt;RACCommand&lt;&#x2F;code&gt;的错误不是通过&lt;code&gt;sendError&lt;&#x2F;code&gt;来实现的，而是通过&lt;code&gt;errors&lt;&#x2F;code&gt;属性传递出来的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;executing&lt;&#x2F;code&gt;表示该 command 当前是否正在执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设有这么个需求：当图片载入完后，分享按钮才可用。那么可以这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;imageAvailableSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, imageView.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;shareButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithEnabled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;imageAvailableSignal signalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do share logic
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了与&lt;code&gt;UIControl&lt;&#x2F;code&gt;绑定之外，也可以手动执行某个 command，比如双击图片点赞，就可以这么实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ViewModel.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;updatePinLikeStatus)() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        _likeCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 先展示效果，再发送请求
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;updatePinLikeStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span&gt;] likePinWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinID&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        [_likeCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发生错误时，回滚
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;updatePinLikeStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x){
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinLikedCountLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likePinImageView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;imageNamed:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pin_liked&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pin_like&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UITapGestureRecognizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tapGesture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UITapGestureRecognizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    tapGesture.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;numberOfTapsRequired &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[tapGesture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_gestureSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likeCommand&lt;&#x2F;span&gt;&lt;span&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再比如某个 App 要通过 Twitter 登录，同时允许取消登录，就可以这么做 (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1326&quot;&gt;source&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;_twitterLoginCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_) {
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;          twitterSignInSignal]
&lt;&#x2F;span&gt;&lt;span&gt;          takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;executionSignals&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;authenticatedUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;twitterLoginCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;executionSignals&lt;&#x2F;span&gt;&lt;span&gt; switchToLatest];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chang-yong-de-mo-shi&quot;&gt;常用的模式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;map-switchtolatest&quot;&gt;map + switchToLatest&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;switchToLatest:&lt;&#x2F;code&gt; 的作用是自动切换 signal of signals 到最后一个，比如之前的 command.executionSignals 就可以使用&lt;code&gt;switchToLatest:&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;map:&lt;&#x2F;code&gt;的作用很简单，对&lt;code&gt;sendNext&lt;&#x2F;code&gt;的 value 做一下处理，返回一个新的值。&lt;&#x2F;p&gt;
&lt;p&gt;如果把这两个结合起来就有意思了，想象这么个场景，当用户在搜索框输入文字时，需要通过网络请求返回相应的 hints，每当文字有变动时，需要取消上一次的请求，就可以使用这个配搭。这里用另一个 Demo，简单演示一下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;pins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @[@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230988&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230947&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230899&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230777&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230707&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;__block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onScheduler:[RACScheduler scheduler]&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;						take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;pins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;						map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;value) {
&lt;&#x2F;span&gt;&lt;span&gt;							&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[HBAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span&gt;] fetchPinWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[pins[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] intValue]] doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;								&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;这里只会执行一次&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;							}];
&lt;&#x2F;span&gt;&lt;span&gt;						}]
&lt;&#x2F;span&gt;&lt;span&gt;						switchToLatest];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(HBPin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pin) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pinID:&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, pin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} completed:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completed&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 这里只会执行一次
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 pinID:172230707
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 completed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;takeuntil&quot;&gt;takeUntil&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;takeUntil:someSignal&lt;&#x2F;code&gt; 的作用是当 someSignal sendNext 时，当前的 signal 就&lt;code&gt;sendCompleted&lt;&#x2F;code&gt;，someSignal 就像一个拳击裁判，哨声响起就意味着比赛终止。&lt;&#x2F;p&gt;
&lt;p&gt;它的常用场景之一是处理 cell 的 button 的点击事件，比如点击 Cell 的详情按钮，需要 push 一个 VC，就可以这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;detailButton
&lt;&#x2F;span&gt;&lt;span&gt;	rac_signalForControlEvents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UIControlEventTouchUpInside]
&lt;&#x2F;span&gt;&lt;span&gt;	takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_prepareForReuseSignal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; generate and push ViewController
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果不加&lt;code&gt;takeUntil:cell.rac_prepareForReuseSignal&lt;&#x2F;code&gt;，那么每次 Cell 被重用时，该 button 都会被&lt;code&gt;addTarget:selector&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ti-huan-delegate&quot;&gt;替换 Delegate&lt;&#x2F;h4&gt;
&lt;p&gt;出现这种需求，通常是因为需要对 Delegate 的多个方法做统一的处理，这时就可以造一个 signal 出来，每次该 Delegate 的某些方法被触发时，该 signal 就会&lt;code&gt;sendNext&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;UISearchDisplayController (RAC)
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_isActiveSignal &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_getAssociatedObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; signal;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Create two signals and merge them *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;didBeginEditing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(searchDisplayControllerDidBeginSearch:)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                        fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UISearchDisplayDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;didEndEditing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(searchDisplayControllerDidEndSearch:)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                      fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UISearchDisplayDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;merge:@[didBeginEditing, didEndEditing]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_setAssociatedObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, signal, OBJC_ASSOCIATION_RETAIN_NONATOMIC)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; signal;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码源于&lt;a href=&quot;http:&#x2F;&#x2F;spin.atomicobject.com&#x2F;2014&#x2F;02&#x2F;03&#x2F;objective-c-delegate-pattern&#x2F;&quot;&gt;此文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-reactiveviewmodel-de-didbecomactivesignal&quot;&gt;使用 ReactiveViewModel 的 didBecomActiveSignal&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveViewModel&quot;&gt;ReactiveViewModel&lt;&#x2F;a&gt;是另一个 project， 后面的 MVVM 中会讲到，通常的做法是在 VC 里设置 VM 的&lt;code&gt;active&lt;&#x2F;code&gt;属性(RVMViewModel 自带该属性)，然后在 VM 里 subscribeNext &lt;code&gt;didBecomActiveSignal&lt;&#x2F;code&gt;，比如当 Active 时，获取 TableView 的最新数据。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;racsubject-de-shi-yong-chang-jing&quot;&gt;RACSubject 的使用场景&lt;&#x2F;h4&gt;
&lt;p&gt;一般不推荐使用&lt;code&gt;RACSubject&lt;&#x2F;code&gt;，因为它过于灵活，滥用的话容易导致复杂度的增加。但有一些场景用一下还是比较方便的，比如 ViewModel 的 errors。&lt;&#x2F;p&gt;
&lt;p&gt;ViewModel 一般会有多个&lt;code&gt;RACCommand&lt;&#x2F;code&gt;，那这些 commands 如果出现 error 了该如何处理呢？比较方便的方法如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; HBCViewModel.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;RVMViewModel.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; RACSubject;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBCViewModel : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;RVMViewModel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;errors;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; HBCViewModel.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBCViewModel.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;ReactiveCocoa.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBCViewModel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        _errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dealloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [_errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendCompleted&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Some Other ViewModel inherit HBCViewModel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_fetchLatestCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input){
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch latest data
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	_fetchMoreCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input){
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch more data
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;didBecomeActiveSignal&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;		[_fetchLatestCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	[[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;		merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@[
&lt;&#x2F;span&gt;&lt;span&gt;				_fetchMoreCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				_fetchLatestCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors
&lt;&#x2F;span&gt;&lt;span&gt;				]] subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;rac-signalforselector&quot;&gt;rac_signalForSelector&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt; 这个方法会返回一个 signal，当 selector 执行完时，会 sendNext，也就是当某个方法调用完后再额外做一些事情。用在 category 会比较方便，因为 Category 重写父类的方法时，不能再通过&lt;code&gt;[super XXX]&lt;&#x2F;code&gt;来调用父类的方法，当然也可以手写 Swizzle 来实现，不过有了&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt;就方便多了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;rac_signalForSelector: fromProtocol:&lt;&#x2F;code&gt; 可以直接实现对 protocol 的某个方法的实现（听着有点别扭呢），比如，我们想实现 UIScrollViewDelegate 的某些方法，可以这么写&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(scrollViewDidEndDecelerating:) fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UIScrollViewDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(RACTuple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tuple) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(scrollViewDidScroll:) fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UIScrollViewDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(RACTuple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tuple) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意，这里的 delegate 需要先设置为 nil，再设置为 self，而不能直接设置为 self，如果 self 已经是该 scrollView 的 Delegate 的话。&lt;&#x2F;p&gt;
&lt;p&gt;有时，我们想对 selector 的返回值做一些处理，但很遗憾 RAC 不支持，如果真的有需要的话，可以使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h3&gt;
&lt;p&gt;这是一个大话题，如果有耐心，且英文还不错的话，可以看一下 Cocoa Samurai 的这&lt;a href=&quot;http:&#x2F;&#x2F;cocoasamurai.blogspot.fr&#x2F;2013&#x2F;03&#x2F;basic-mvvm-with-reactivecocoa.html&quot;&gt;两篇&lt;&#x2F;a&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cocoamanifest.net&#x2F;articles&#x2F;2013&#x2F;10&#x2F;mvc-mvvm-frp-and-building-bridges.html&quot;&gt;文章&lt;&#x2F;a&gt;。PS: Facebook Paper 就是基于 MVVM 构建的。&lt;&#x2F;p&gt;
&lt;p&gt;MVVM 是 Model-View-ViewModel 的简称，它们之间的关系如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;camo.githubusercontent.com&#x2F;3999b9fdff783edb6cee9117a08524f3b2e7c653&#x2F;68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3433323533362f3836373938342f32393165643338302d663736302d313165322d393130362d6433313538333230616633392e706e67&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到 View(其实是 ViewController)持有 ViewModel，这样做的好处是 ViewModel 更加独立且可测试，ViewModel 里不应包含任何 View 相关的元素，哪怕换了一个 View 也能正常工作。而且这样也能让 View&#x2F;ViewController「瘦」下来。&lt;&#x2F;p&gt;
&lt;p&gt;ViewModel 主要做的事情是作为 View 的数据源，所以通常会包含网络请求。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会疑惑，ViewController 哪去了？在 MVVM 的世界里，ViewController 已经成为了 View 的一部分。它的主要职责是将 VM 与 View 绑定、响应 VM 数据的变化、调用 VM 的某个方法、与其他的 VC 打交道。&lt;&#x2F;p&gt;
&lt;p&gt;而 RAC 为 MVVM 带来很大的便利，比如&lt;code&gt;RACCommand&lt;&#x2F;code&gt;, UIKit 的 RAC Extension 等等。使用 MVVM 不一定能减少代码量，但能降低代码的复杂度。&lt;&#x2F;p&gt;
&lt;p&gt;以下面这个需求为例，要求大图滑动结束时，底部的缩略图滚动到对应的位置，并高亮该缩略图；同时底部的缩略图被选中时，大图也要变成该缩略图的大图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-mvvm.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的思路是横向滚动的大图是一个 collectionView，该 collectionView 是当前页面 VC 的一个 property。底部可以滑动的缩略图是一个 childVC 的 collectionView，这两个 collectionView 共用一套 VM，并且各自 RACObserve 感兴趣的 property。&lt;&#x2F;p&gt;
&lt;p&gt;比如大图滑到下一页时，会改变 VM 的 indexPath 属性，而底部的 collectionView 所在的 VC 正好对该 indexPath 感兴趣，只要 indexPath 变化就滚动到相应的 Item&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; childVC
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index) {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;scrollToIndexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)scrollToIndexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subviews&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; scrollToItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath atScrollPosition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UICollectionViewScrollPositionCenteredHorizontally animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subviews&lt;&#x2F;span&gt;&lt;span&gt; enumerateObjectsUsingBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;view, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;stop) {
&lt;&#x2F;span&gt;&lt;span&gt;            view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;        UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; cellForItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath];
&lt;&#x2F;span&gt;&lt;span&gt;        view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;kHBPinsNaviThumbnailPadding;
&lt;&#x2F;span&gt;&lt;span&gt;        view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;whiteColor&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGColor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当点击底部的缩略图时，上面的大图也要做出变化，也同样可以通过 RACObserve indexPath 来实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PinsViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;            @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; scrollToItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath atScrollPosition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UICollectionViewScrollPositionCenteredHorizontally animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有一个小技巧，当 Cell 里的元素比较复杂时，我们可以给 Cell 也准备一个 ViewModel，这个 CellViewModel 可以由上一层的 ViewModel 提供，这样 Cell 如果需要相应的数据，直接跟 CellViewModel 要即可，CellViewModel 也可以包含一些 command，比如 likeCommand。假如点击 Cell 时，要做一些处理，也很方便。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; CellViewModel已经在ViewModel里准备好了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(UICollectionViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView cellForItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    HBPinsCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[collectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dequeueReusableCellWithReuseIdentifier:cellIdentifier forIndexPath:indexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)collectionView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView didSelectItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    HBCellViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cellViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对cellViewModel执行某些操作，因为Cell已经与cellViewModel绑定，所以cellViewModel的改变也会反映到Cell上
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 或拿到cellViewModel的数据来执行某些操作
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;viewmodel-zhong-signal-property-command-de-shi-yong&quot;&gt;ViewModel 中 signal, property, command 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;初次使用 RAC+MVVM 时，往往会疑惑，什么时候用 signal，什么时候用 property，什么时候用 command？&lt;&#x2F;p&gt;
&lt;p&gt;一般来说可以使用 property 的就直接使用，没必要再转换成 signal，外部 RACObserve 即可。使用 signal 的场景一般是涉及到多个 property 或多个 signal 合并为一个 signal。command 往往与 UIControl&#x2F;网络请求挂钩。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-jian-chang-jing-de-chu-li&quot;&gt;常见场景的处理&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;jian-cha-ben-di-huan-cun-ru-guo-shi-xiao-ze-qu-qing-qiu-wang-luo-shu-ju-bing-huan-cun-dao-ben-di&quot;&gt;检查本地缓存，如果失效则去请求网络数据并缓存到本地&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1166&quot;&gt;来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)loadData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;        createSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; If the cache is valid then we can just immediately send the
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; cached data and be done.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacheValid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cachedData&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendCompleted&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendError:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;staleCacheError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do the subscription work on some random scheduler, off the main
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; thread.
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeOn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[RACScheduler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;scheduler&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)update {
&lt;&#x2F;span&gt;&lt;span&gt;    [[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        loadData]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Catch the error from -loadData. It means our cache is stale. Update
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; our cache and save it.
&lt;&#x2F;span&gt;&lt;span&gt;        catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateCachedData&lt;&#x2F;span&gt;&lt;span&gt;] doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data) {
&lt;&#x2F;span&gt;&lt;span&gt;                [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacheData:data&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }];
&lt;&#x2F;span&gt;&lt;span&gt;        }]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Our work up until now has been on a background scheduler. Get our
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; results delivered on the main thread so we can do UI work.
&lt;&#x2F;span&gt;&lt;span&gt;        deliverOn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;RACScheduler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mainThreadScheduler&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Update your UI based on `data`.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Update again after `updateInterval` seconds have passed.
&lt;&#x2F;span&gt;&lt;span&gt;            [[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:updateInterval&lt;&#x2F;span&gt;&lt;span&gt;] take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_) {
&lt;&#x2F;span&gt;&lt;span&gt;                [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }];
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;jian-ce-yong-hu-ming-shi-fou-ke-yong&quot;&gt;检测用户名是否可用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1236&quot;&gt;来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupUsernameAvailabilityChecking {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, availabilityStatus) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;userTemplate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, username)
&lt;&#x2F;span&gt;&lt;span&gt;                                      throttle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;kUsernameCheckThrottleInterval] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;throttle表示interval时间内如果有sendNext，则放弃该nextValue
&lt;&#x2F;span&gt;&lt;span&gt;                                      map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;username) {
&lt;&#x2F;span&gt;&lt;span&gt;                                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return:@(UsernameAvailabilityCheckStatusEmpty)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[[[FIBAPIClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                                                getUsernameAvailabilityFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;username ignoreCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                                              map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result) {
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;existsNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;exists&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;existsNumber) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(UsernameAvailabilityCheckStatusFailed);
&lt;&#x2F;span&gt;&lt;span&gt;                                                  UsernameAvailabilityCheckStatus status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[existsNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;boolValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; UsernameAvailabilityCheckStatusUnavailable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; UsernameAvailabilityCheckStatusAvailable;
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(status);
&lt;&#x2F;span&gt;&lt;span&gt;                                              }]
&lt;&#x2F;span&gt;&lt;span&gt;                                             catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return:@(UsernameAvailabilityCheckStatusFailed)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                              }] startWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@(UsernameAvailabilityCheckStatusChecking)];
&lt;&#x2F;span&gt;&lt;span&gt;                                      }]
&lt;&#x2F;span&gt;&lt;span&gt;                                      switchToLatest];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到这里也使用了&lt;code&gt;map&lt;&#x2F;code&gt; + &lt;code&gt;switchToLatest&lt;&#x2F;code&gt;模式，这样就可以自动取消上一次的网络请求。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;startWith&lt;&#x2F;code&gt;的内部实现是&lt;code&gt;concat&lt;&#x2F;code&gt;，这里表示先将状态置为 checking，然后再根据网络请求的结果设置状态。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-takeuntil-lai-chu-li-cell-de-button-dian-ji&quot;&gt;使用 takeUntil:来处理 Cell 的 button 点击&lt;&#x2F;h4&gt;
&lt;p&gt;这个上面已经提到过了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;token-guo-qi-hou-zi-dong-huo-qu-xin-de&quot;&gt;token 过期后自动获取新的&lt;&#x2F;h4&gt;
&lt;p&gt;开发 APIClient 时，会用到 AccessToken，这个 Token 过一段时间会过期，需要去请求新的 Token。比较好的用户体验是当 token 过期后，自动去获取新的 Token，拿到后继续上一次的请求，这样对用户是透明的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; suppose first time send request, access token is expired or invalid
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and next time it is correct.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the block will be triggered twice.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; isFirstTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isFirstTime) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;http:&#x2F;&#x2F;nonexists.com&#x2F;error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            isFirstTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;url:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, url);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [[AFHTTPRequestOperationManager manager] GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;url parameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;responseObject) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendNext:responseObject];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        } failure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendError:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;sending request...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;catch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oops, invalid access token&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; simulate network request, and we fetch the right access token
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[RACSignal createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            dispatch_time_t popTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(DISPATCH_TIME_NOW, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NSEC_PER_SEC));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(popTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [subscriber sendNext:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }] concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestSignal];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isKindOfClass:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class]&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;result:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;origin&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } completed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completed&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 我自己感觉遇到的几个难点是: 1) 理解 RAC 的理念。 2) 熟悉常用的 API。3) 针对某些特定的场景，想出比较合理的 RAC 处理方式。不过看多了，写多了，想多了就会慢慢适应。下面是我在实践过程中遇到的一些小坑。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reactivecocoalayout&quot;&gt;ReactiveCocoaLayout&lt;&#x2F;h4&gt;
&lt;p&gt;有时 Cell 的内容涉及到动态的高度，就会想到用 Autolayout 来布局，但 RAC 已经为我们准备好了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoaLayout&quot;&gt;ReactiveCocoaLayout&lt;&#x2F;a&gt;，所以我想不妨就拿来用一下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ReactiveCocoaLayout&lt;&#x2F;code&gt;的使用好比「批地」和「盖房」，先通过&lt;code&gt;insetWidth:height:nullRect&lt;&#x2F;code&gt;从某个 View 中划出一小块，拿到之后还可以通过&lt;code&gt;divideWithAmount:padding:fromEdge&lt;&#x2F;code&gt; 再分成两块，或&lt;code&gt;sliceWithAmount:fromEdge&lt;&#x2F;code&gt;再分出一块。这些方法返回的都是 signal，所以可以通过&lt;code&gt;RAC(self.view, frame) = someRectSignal&lt;&#x2F;code&gt; 这样来实现绑定。但在实践中发现性能不是很好，多批了几块地就容易造成主线程卡顿。&lt;&#x2F;p&gt;
&lt;p&gt;所以&lt;code&gt;ReactiveCocoaLayout&lt;&#x2F;code&gt;最好不用或少用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;diao-shi&quot;&gt;调试&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-debug.png&quot;
        width=&quot;276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;刚开始写 RAC 时，往往会遇到这种情况，满屏的调用栈信息都是 RAC 的，要找出真正出现问题的地方不容易。曾经有一次在使用&lt;code&gt;[RACSignal combineLatest: reduce:^id{}]&lt;&#x2F;code&gt;时，忘了在 Block 里返回 value，而 Xcode 也没有提示 warning，然后就是莫名其妙地挂起了，跳到了汇编上，也没有调用栈信息，这时就只能通过最古老的注释代码的方式来找到问题的根源。&lt;&#x2F;p&gt;
&lt;p&gt;不过写多了之后，一般不太会犯这种低级错误。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;strongify-weakify-dance&quot;&gt;strongify &#x2F; weakify dance&lt;&#x2F;h4&gt;
&lt;p&gt;因为 RAC 很多操作都是在 Block 中完成的，这块最常见的问题就是在 block 直接把 self 拿来用，造成 block 和 self 的 retain cycle。所以需要通过&lt;code&gt;@strongify&lt;&#x2F;code&gt;和&lt;code&gt;@weakify&lt;&#x2F;code&gt;来消除循环引用。&lt;&#x2F;p&gt;
&lt;p&gt;有些地方很容易被忽略，比如&lt;code&gt;RACObserve(thing, keypath)&lt;&#x2F;code&gt;，看上去并没有引用 self，所以在&lt;code&gt;subscribeNext&lt;&#x2F;code&gt;时就忘记了 weakify&#x2F;strongify。但事实上&lt;code&gt;RACObserve&lt;&#x2F;code&gt;总是会引用 self，即使 target 不是 self，所以只要有&lt;code&gt;RACObserve&lt;&#x2F;code&gt;的地方都要使用 weakify&#x2F;strongify。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;以上是我在做花瓣客户端和 side project 时总结的一些经验，但愿能带来一些帮助，有误的地方也欢迎指正和探讨。&lt;&#x2F;p&gt;
&lt;p&gt;推荐一下 jspahrsummers 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;GroceryList&quot;&gt;这个 project&lt;&#x2F;a&gt;，虽然是用 RAC3.0 写的，但很多理念也可以用到 RAC2 上面。&lt;&#x2F;p&gt;
&lt;p&gt;最后感谢 Github 的 iOS 工程师们，感谢你们带来了 RAC，以及在 Issues 里的耐心解答。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>使用objection来模块化开发iOS项目</title>
            <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/use-objection-to-decouple-ios-project/</link>
            <guid>https://limboy.me/posts/use-objection-to-decouple-ios-project/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atomicobject&#x2F;objection&quot;&gt;objection&lt;&#x2F;a&gt; 是一个轻量级的依赖注入框架，受&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-guice&#x2F;&quot;&gt;Guice&lt;&#x2F;a&gt;的启发，&lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;wallet&#x2F;&quot;&gt;Google Wallet&lt;&#x2F;a&gt; 也是使用的该项目。「依赖注入」是面向对象编程的一种设计模式，用来减少代码之间的耦合度。通常基于接口来实现，也就是说不需要 new 一个对象，而是通过相关的控制器来获取对象。2013 年最火的 PHP 框架 &lt;a href=&quot;http:&#x2F;&#x2F;laravel.com&quot;&gt;laravel&lt;&#x2F;a&gt; 就是其中的典型。&lt;&#x2F;p&gt;
&lt;p&gt;假设有以下场景：ViewControllerA.view 里有一个 button，点击之后 push 一个 ViewControllerB，最简单的写法类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;buttonWithType:UIButtonTypeSystem&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTitle:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Button&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forState:UIControlStateNormal&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(buttonTapped) forControlEvents:UIControlEventTouchUpInside&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt; addSubview&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;button];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)buttonTapped
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;navigationController&lt;&#x2F;span&gt;&lt;span&gt; pushViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样写的一个问题是，ViewControllerA 需要 import ViewControllerB，也就是对 ViewControllerB 产生了依赖。依赖的东西越多，维护起来就越麻烦，也容易出现循环依赖的问题，而 objection 正好可以处理这些问题。&lt;&#x2F;p&gt;
&lt;p&gt;实现方法是：先定义一个协议(protocol)，然后通过 objection 来注册这个协议对应的 class，需要的时候，可以获取该协议对应的 object。对于使用方无需关心到底使用的是哪个 Class，反正该有的方法、属性都有了(在协议中指定)。这样就去除了对某个特定 Class 的依赖。也就是通常所说的「面向接口编程」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; *&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;vc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lightGrayColor&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;nc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rootViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector，这个 injector 已经注册过&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;了。&lt;&#x2F;li&gt;
&lt;li&gt;[2] 获取&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;对应的 Object。&lt;&#x2F;li&gt;
&lt;li&gt;[3] 拿到 VC 后，设置它的某些属性，比如这里的 backgroundColor，因为在&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;里有定义这个属性，所以不会有 warning。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以看到这里没有引用 ViewControllerA。再来看看这个&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;是如何注册到 injector 中的，这里涉及到了&lt;code&gt;Module&lt;&#x2F;code&gt;，对 Protocol 的注册都是在 Module 中完成的。Module 只要继承&lt;code&gt;JSObjectionModule&lt;&#x2F;code&gt;这个 Class 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;JSObjectionModule
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;configure
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bindClass:[ViewControllerA class] toProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;绑定操作是在&lt;code&gt;configure&lt;&#x2F;code&gt;方法里进行的，这个方法在被添加到 injector 里时会被自动触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? : &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withModule:[[ViewControllerAModule alloc] init]&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setDefaultInjector:injector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [4]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector&lt;&#x2F;li&gt;
&lt;li&gt;[2] 如果默认的 injector 不存在，就新建一个&lt;&#x2F;li&gt;
&lt;li&gt;[3] 往这个 injector 里注册我们的 Module&lt;&#x2F;li&gt;
&lt;li&gt;[4] 设置该 injector 为默认的 injector&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这段代码可以直接放到 &lt;code&gt;+ (void)load&lt;&#x2F;code&gt;里执行，这样就可以避免在 AppDelegate 里 import 各种 Module。&lt;&#x2F;p&gt;
&lt;p&gt;因为我们无法直接获得对应的 Class，所以必须要在协议里定义好对外暴露的方法和属性，然后该 Class 也要实现该协议。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span&gt; currentIndex;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;backgroundColor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerA : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIViewController &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ViewControllerAProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 objection 实现依赖注入后，就能更好地实现 SRP(Single Responsibility Principle)，代码更简洁，心情更舒畅，生活更美好。拿 Pinterest 来说，下面的页面就可以划分为 3 个 Section。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;use-objection-to-decouple-ios-project&amp;#x2F;demo_4_objection.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;各个 Section 可以由不同的人负责，然后串到一起就行，也能一定程度地避免 MVC(Mess View Controller)的出现。&lt;&#x2F;p&gt;
&lt;p&gt;总体来说，这个 lib 还是挺靠谱的，已经维护了两年多，也有一些项目在用，对于提高开发成员的效率也会有不少的帮助，可以考虑尝试下。&lt;&#x2F;p&gt;
&lt;p&gt;---- update (2014-04-30) ----&lt;&#x2F;p&gt;
&lt;p&gt;写了个壁纸的 demo，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>开发新版花瓣iPhone客户端</title>
            <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/huaban-app-redesign/</link>
            <guid>https://limboy.me/posts/huaban-app-redesign/</guid>
            <description>&lt;p&gt;花瓣主客户端已经有些日子没有更新了，这次的新版 iPhone 客户端会带来不少的变动和改进，于是索性重新开个项目，从头开始。虽还没开发完成，但有些东西还是想跟大家分享下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-rang-duo-ren-kai-fa-geng-jia-gao-xiao&quot;&gt;如何让多人开发更加高效&lt;&#x2F;h3&gt;
&lt;p&gt;如果是一个人开发，那怎么折腾都行。不用考虑冲突、不用考虑代码风格的差异、完全按自己的喜好设置目录结构、甚至在接口的设计上也可以自由一些。但参与的人一多这些问题就会暴露出来，如果处理不好，有可能会出现 1+1&amp;lt;2，甚至 1+1&amp;lt;1 的情况。&lt;&#x2F;p&gt;
&lt;p&gt;正好在前些日子看到了这篇「&lt;a href=&quot;http:&#x2F;&#x2F;dev.hubspot.com&#x2F;blog&#x2F;architecting-a-large-ios-app-with-cocoapods&quot;&gt;使用 CocoaPods 来进行模块化开发&lt;&#x2F;a&gt;」文章，细细品了几遍，发现通过这种方式确实可以弥补多人开发带来的一些问题。简单说来就是把一个大项目按照功能模块划分为多个子项目，然后在一个主项目里，通过 CocoaPods 把这些子项目串起来，就变成了一个完整的 Project。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-jia-gou&quot;&gt;基本架构&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-arch.png&quot;
        width=&quot;700&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中最底层是其他项目也会引用的基础类库。&lt;code&gt;HBToolkit&lt;&#x2F;code&gt;包含了一些常用、好用的 Categories，如图片缩放、UIView Layout 等等；&lt;code&gt;HBBussiness&lt;&#x2F;code&gt;是跟业务相关的一些类库，如弹出新版本提示、登录等等；&lt;code&gt;HBAPI&lt;&#x2F;code&gt;是花瓣主站点的 API 接口。这些类库都是私有的 pod 源，可以通过&lt;code&gt;pod install&lt;&#x2F;code&gt;安装。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;AppCommon&lt;&#x2F;code&gt;是一个 xcode project，包含了该项目会用到的一些公共内容，如颜色值、按钮样式、图片、APIKey 等等，同样，也是私有 pod 源。&lt;&#x2F;p&gt;
&lt;p&gt;再上层就是各个 sub app 了。所谓 sub app，就是功能单一，可独立运行的 app。同样，每个 sub app 会提供相应的 podspec 文件，可以在这个 podspec 里指定最后会用到的 Classes。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-subapps.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进去之后会是这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-subapp-index.png&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于使用者来说，可以通过查看 demo，很快地了解接口的使用。对测试人员，也可以在 App 还没有开发完成的情况下，对各个子模块进行测试。&lt;&#x2F;p&gt;
&lt;p&gt;各个 sub app 都完成了的话，就可以组装成最终的 App 了，这里用到了一个 URL Route 类：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joeldev&#x2F;JLRoutes&quot;&gt;JLRoutes&lt;&#x2F;a&gt;，它的作用是让按钮的点击像网页里的链接一样，只是触发了某个 URL，而没有像 pushViewController 这样的行为。这样如果点击 A 模块的某个按钮，会 push 一个 B 模块的 ViewController，也不需要在 A 模块里 import 模块 B 的 ViewController，而只是&lt;code&gt;[JLRoutes routeURL:parameters]&lt;&#x2F;code&gt;即可，也就实现了解耦。&lt;&#x2F;p&gt;
&lt;p&gt;每个 sub app 需要注册自己感兴趣的 URL，这样当某个 URL 被触发时，就能捕获到并做适当的处理。如果注册的行为统一放到最终的 App 里去做，会不够灵活，且显得杂乱。所以最好是在类加载的过程中就完成注册。 而 Class 正好有一个&lt;code&gt;+ (void)load&lt;&#x2F;code&gt;方法，会在该 Class 被加入到运行时触发，且只触发一次。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h4&gt;
&lt;p&gt;每次新建一个 sub project 还蛮麻烦的，比如要新建 podfile，然后执行&lt;code&gt;pod install&lt;&#x2F;code&gt;(真心慢啊)，然后要写&lt;code&gt;XXX.podspec&lt;&#x2F;code&gt;，等等。于是写了一个 template project，并提供了脚本安装，然后每次要新建一个 project 时，只需执行&lt;code&gt;genproj XXX&lt;&#x2F;code&gt;就好了。&lt;&#x2F;p&gt;
&lt;p&gt;开发过程中，经常会出现依赖的 pod 有更新（比如 Common 又添加了一些图片素材），然后就得再执行一次&lt;code&gt;pod update&lt;&#x2F;code&gt;，于是所有依赖的 pod 都得 update 一下，这个过程有点慢，目前还没想到太好的办法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2014-03-25-geng-xin&quot;&gt;2014&#x2F;03&#x2F;25 更新&lt;&#x2F;h4&gt;
&lt;p&gt;用&lt;code&gt;pod update --verbose&lt;&#x2F;code&gt; 看了下，主要的时间都是花在了获取第三方 pod 的 meta 信息上，所以，使用时加上&lt;code&gt; --no-repo-update&lt;&#x2F;code&gt;就很快了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reactivecocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;h3&gt;
&lt;p&gt;这次改版的另一个尝试就是使用 RAC 和 MVVM，还是挺有些挑战的。之前的学习更多的是理论，并没有太多实际的使用，所以也遇到了不少问题。比如何时使用 property，何时使用 signal；多个 Controller 共用一个 VM，但其中一个又有一些独有的 property；潜意识里会使用原有的 cocoa 编程模式；出现问题，调试起来有点麻烦等等。尽管如此，RAC 还是很值得尝试的，就像一匹烈马，很难被驯服，但一旦被驾驭，这种成就感也是无可比拟的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 levelDB 来做持久化，放弃 CoreData。&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;ios&#x2F;2014&#x2F;01&#x2F;04&#x2F;class-cluster.html&quot;&gt;类族(class cluster)&lt;&#x2F;a&gt;来实现结构和功能基本一样，但数据源不同的场景。&lt;&#x2F;li&gt;
&lt;li&gt;无意中发现&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=OJ94KqmsxiI&quot;&gt;Facebook&lt;&#x2F;a&gt;也用了类似的架构，不过是通过 workspace 来实现的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>Github的扁平化管理与创新</title>
            <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/github-lean-management-strategy/</link>
            <guid>https://limboy.me/posts/github-lean-management-strategy/</guid>
            <description>&lt;p&gt;fastcolabs 带来的&lt;a href=&quot;http:&#x2F;&#x2F;www.fastcolabs.com&#x2F;3020181&#x2F;open-company&#x2F;inside-githubs-super-lean-management-strategy-and-how-it-drives-innovation&quot;&gt;Github 专访&lt;&#x2F;a&gt;，里面谈到了很多 Github 内部的管理、沟通、创新，看完之后对这家公司又多了几分了解和敬仰，其中的一些理念对于「传统」的创业公司来说是很难相信和接受的。原文很长，这里简单的摘录几段。&lt;&#x2F;p&gt;
&lt;p&gt;Github 在公司内部实践「开源合作」的精神，员工可以自愿加入自己感兴趣的项目，而不是接受上面的安排。也正是这样的环境和氛围更容易吸引有创造力、有能力、自学能力强的人才。&lt;&#x2F;p&gt;
&lt;p&gt;「开放式安排（Open Allocation）」的关键是沟通，尤其是一个开放的、好用的、高效的沟通工具。既然任何人都可以加入到某个项目中，那么这个项目的素材和文档就得准备好，不然新人进来还要摸索半天，会打消热情。&lt;&#x2F;p&gt;
&lt;p&gt;「任务」来自上头，怎样找到合适的方法去执行就看各个「自组织」Team 自己了。&lt;&#x2F;p&gt;
&lt;p&gt;好的沟通也容易产生新的业务，因为有了良好的沟通平台，所以新项目很容易被上头知道，上头可以根据这些新项目来调整方向，同时再分发到沟通平台，这样大家就到知道了。&lt;&#x2F;p&gt;
&lt;p&gt;有了良好的沟通平台，小组负责人就知道公司前进的方向，其他人也都知道为什么要向那个方向迈进，因为上头会跟你解释，你也可以参与讨论。&lt;&#x2F;p&gt;
&lt;p&gt;让最接近问题的人拍板。而不是上头委派下面的员工完成指定的任务，而是认为最接近问题的人最了解这个问题，因此也最拥有话语权。&lt;&#x2F;p&gt;
&lt;p&gt;上头制定对公司来说最重要的战略，Team 也如此。在知道最重要的事情后，小组成员可以自行选择其中自己最感兴趣的来做。&lt;&#x2F;p&gt;
&lt;p&gt;有些公司有 20%的时间来做自己感兴趣的项目，对于 Github 来说，几乎是 100%的时间。如果没有太感兴趣的，那就找到兴趣点和成就感。&lt;&#x2F;p&gt;
&lt;p&gt;正是因为 Github 如此自由的环境，所以对新员工的要求也会很高，必须是自驱动，对自己所从事的工作充满热情。每个人都在通过某种方式做着对公司有益的事情。&lt;&#x2F;p&gt;
&lt;p&gt;新项目往往都是从「做着玩」开始的，然后看看能不能说服、吸引其他人来一起维护。&lt;&#x2F;p&gt;
&lt;p&gt;让员工一直在做最让他们兴奋的事情，这就是创新之源。&lt;&#x2F;p&gt;
&lt;p&gt;70%的员工都是远程办公，所以聊天室反倒成了真正的办公室。大约有 70-80 个聊天室，对哪个项目感兴趣，进去就行。&lt;&#x2F;p&gt;
&lt;p&gt;还有很多很多，英语水平有限，只能寥寥翻译几句，英语过关的，不妨&lt;a href=&quot;http:&#x2F;&#x2F;www.fastcolabs.com&#x2F;3020181&#x2F;open-company&#x2F;inside-githubs-super-lean-management-strategy-and-how-it-drives-innovation&quot;&gt;看一下全文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>基于AFNetworking2.0和RAC的iOS REST Client</title>
            <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-rest-client-implementation/</link>
            <guid>https://limboy.me/posts/ios-rest-client-implementation/</guid>
            <description>&lt;p&gt;在开发 iOS App 时经常会遇到跟后端 REST API 通信的情况。这就涉及到错误处理，NSDictionary 与 Model 的映射，用户登录与登出，权限验证，Archive&#x2F;UnArchive，Copy，AccessToken 过期处理等等，如果没有很好地处理这些点，就容易出现代码复杂度增大，结构散乱，不方便后期维护的现象。&lt;&#x2F;p&gt;
&lt;p&gt;正好最近在看 AFNetworking2.0 和 ReactiveCocoa2.1，参考了 github 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;octokit&#x2F;octokit.objc&quot;&gt;octokit&lt;&#x2F;a&gt;，重写了花瓣的 iOS REST API，分享些心得。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-jie-gou&quot;&gt;基本结构&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPI.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Classes
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.h
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.m
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Models
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时，直接引用&lt;code&gt;HBPAPI.h&lt;&#x2F;code&gt;即可，里面包含了所有的 Class。因为使用了 AFNetworking2.0，所以不再是 HBPClient，而是 HBPManager。 HBPAPIManager 包含了所有的跟服务端通信的方法，通过 Category 来区分。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 内部统一使用这个方法来向服务端发送请求
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; resultClass - 从服务端获取到JSON数据后，使用哪个Class来将JSON转换为OC的Model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; listKey - 如果不指定，表示返回的是一个object，如user，如果指定表示返回的是一个数组，listKey就表示这个列表的keyname，如{&amp;#39;users&amp;#39;:[]}, 那么listName就为&amp;#39;user&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;relativePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resultClass:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;resultClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;listKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;listKey&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; signal会send user，如果没有user，就会sendError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 必须当前用户已经登录的情况下调用
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Friendship)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Models Group 包含了所有跟服务端 API 对应的 Model，比如&lt;code&gt;HBPComment&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HBPComment.h&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPObject.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; HBPUser;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPComment : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;HBPObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; commentID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;createdAt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;HBPComment.m&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPComment.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPComment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;commentID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;user_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;userID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;created_at&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;createdAt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;archive-unarchive-copy&quot;&gt;Archive &#x2F; UnArchive &#x2F; Copy&lt;&#x2F;h3&gt;
&lt;p&gt;每一个 Object 都要支持 Archive &#x2F; UnArchive &#x2F; Copy，也就是要实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;协议，这两个协议的内容其实就是对 Object 的 Property 做些处理，所以如果可以在基类里把这些事都统一处理，就会方便许多。octokit 使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MantleFramework&#x2F;Mantle&quot;&gt;Mantle&lt;&#x2F;a&gt;来做这些事情，不过我觉得 Mantle 还是有些麻烦，于是写了个通过运行时来获取 property，并实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt; 和 &lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;的基类，只有两个公共方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPObject : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;NSCopying, NSCoding&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 解析API返回的JSON，返回对应的Model
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithDictionary:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; JSON key到property的映射关系
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSON&lt;&#x2F;code&gt;的作用是遍历 Object 的 Property，如果 Property 的 Class 是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;，那么就调用&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSO&lt;&#x2F;code&gt;，不然就通过 KVC 的&lt;code&gt;setValue:forKey:&lt;&#x2F;code&gt;来设定值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;- (NSDictionary *)JSONKeysToPropertyKeys&lt;&#x2F;code&gt;的内容大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;nav_link&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;navLink&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样通过一个&lt;code&gt;HBPObject&lt;&#x2F;code&gt;基类就完成了 Archive &#x2F; UnArchive &#x2F; Copy 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-hu-de-deng-lu-yu-deng-chu&quot;&gt;用户的登录与登出&lt;&#x2F;h3&gt;
&lt;p&gt;先来说说登录，由于使用 RAC，在构造 API 时，就不需要传入 Block 了，随之而来的一个问题就是需要在注释中说明&lt;code&gt;sendNext&lt;&#x2F;code&gt;时会发送什么内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)signInUsingUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)username passowrd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)password
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(API_CLIENT_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; API_CLIENT_SECRET, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;API_CLIENT_ID and API_CLIENT_SECRET must be setted&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;grant_type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; username,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; password,
&lt;&#x2F;span&gt;&lt;span&gt;                                 };
&lt;&#x2F;span&gt;&lt;span&gt;    HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createManager&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchTokenWithParameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            setNameWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;+signInUsingUsername:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; password:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, username, password];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看着还挺简单的吧，因为主要工作都是&lt;code&gt;+fetchMoreData:parameters&lt;&#x2F;code&gt;在做，看看它的实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)fetchTokenWithParameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[[[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_POST:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oauth&#x2F;access_token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; reduceEach的作用是传入多个参数，返回单个参数，是基于`map`的一种实现
&lt;&#x2F;span&gt;&lt;span&gt;             reduceEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;response){
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 拿到token后，就设置token property
&lt;&#x2F;span&gt;&lt;span&gt;				 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setToken:方法会被触发，在那里会设置请求的头信息，如Authorization。
&lt;&#x2F;span&gt;&lt;span&gt;                 HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;response];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; token;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对Error进行处理，方便外部识别
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1001 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorConnectionFailed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorAuthenticatedFailed;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManagerErrorDomain code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;code userInfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:apiError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 一切正常的话，顺便获取用户信息
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doNext相当于一个钩子，是在sendNext时会被执行的一段代码
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; user;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把发送内容换成self
&lt;&#x2F;span&gt;&lt;span&gt;             mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 避免side effect
&lt;&#x2F;span&gt;&lt;span&gt;             replayLazily];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里对 signal 进行了 chain &#x2F; modify &#x2F; hook 等操作，主要作用是获取 access token 和用户信息。&lt;&#x2F;p&gt;
&lt;p&gt;用户的登出就简单了，直接设置&lt;code&gt;user&lt;&#x2F;code&gt;和&lt;code&gt;token&lt;&#x2F;code&gt;为&lt;code&gt;nil&lt;&#x2F;code&gt;就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-chao-shi-shi-jian-he-huan-cun-ce-lue&quot;&gt;设置超时时间和缓存策略&lt;&#x2F;h3&gt;
&lt;p&gt;因为 AF2.0 使用了新的架构，导致要设置 Request 的超时和缓存稍微有些麻烦，需要新建一个继承自&lt;code&gt;AFHTTPRequestSerializer&lt;&#x2F;code&gt;的 Class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AFHTTPRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;URLString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:method URLString:URLString parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;timeoutInterval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cachePolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSURLRequestReloadIgnoringLocalCacheData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; request;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后将这个 class 设置为 manager.requestSerializer&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithBaseURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLWithString:API_SERVER&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;requestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[HBPAPIRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就行了&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-xian-yan-zheng&quot;&gt;权限验证&lt;&#x2F;h3&gt;
&lt;p&gt;这个比较简单些，直接在方法里面加上判断&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)createCommentWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)pinID text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)text
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; authenticatedError]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;POST&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pins&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;comments&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, pinID] parameters:@{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; text} resultClass:[HBPComment class] listKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;accesstoken-guo-qi-de-chu-li&quot;&gt;AccessToken 过期的处理&lt;&#x2F;h3&gt;
&lt;p&gt;AccessToken 过期和获取新的 AccessToken 可以交给使用者来做，但是会比较麻烦，最好的方法是过期后自动去获取新的 AccessToken，拿到 Token 后自动去执行之前失败的请求，这块我是这么处理的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)requestWithMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)method relativePath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)relativePath parameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters resultClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)resultClass listKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)listKey
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;requestSignal;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create requestSignal
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;catch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManagerErrorInvalidAccessToken) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;refreshToken] ignoreValues] concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestSignal];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[RACSignal error:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hbpobject-subclass&quot;&gt;HBPObject SubClass&lt;&#x2F;h3&gt;
&lt;p&gt;那些继承自&lt;code&gt;HBPObject&lt;&#x2F;code&gt;的子类，有些事情是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;无法处理的，比如 NSArray 的 Property，因为 Objective-C 不支持 generic，所以无法知道这个数组包含的究竟是怎样的 Class，这时就需要在子类对这些 property 做处理。&lt;&#x2F;p&gt;
&lt;p&gt;比如画板(HBPBoard)有一个叫&lt;code&gt;pins&lt;&#x2F;code&gt;的 NSArray 属性，因为在&lt;code&gt;HBPObject&lt;&#x2F;code&gt;中使用了 KVC，所以如果子类有类似&lt;code&gt;setXXX:&lt;&#x2F;code&gt;的方法的话，那么该方法就会被调用，利用这一点，就可以处理那些特殊情况。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPBoard
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPins:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pins
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _pins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[pins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_sequence&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;value) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBPPin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;value];
&lt;&#x2F;span&gt;&lt;span&gt;    }] array];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再比如，返回的 JSON 内容中，有一个叫&lt;code&gt;content&lt;&#x2F;code&gt;的 key，其中有 type &#x2F; date &#x2F; color 等 sub key，而你只想要&lt;code&gt;type&lt;&#x2F;code&gt;信息，只需添加一个&lt;code&gt;type&lt;&#x2F;code&gt; property，然后在&lt;code&gt;setContent&lt;&#x2F;code&gt;时，设置一下&lt;code&gt;type&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)content
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; content[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;以上就是我在使用 AFNetworking2.0 和 ReactiveCocoa2.1 构建 iOS REST Client 时的一些小心得，确实能感觉到 RAC 带了不少方便，虽然也同时带来了一些弊端（如返回的内容不明确，学习成本高），但还是利大于弊。&lt;&#x2F;p&gt;
&lt;p&gt;有什么问题和想法，欢迎交流。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>类簇在iOS开发中的应用</title>
            <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/class-cluster/</link>
            <guid>https://limboy.me/posts/class-cluster/</guid>
            <description>&lt;p&gt;类簇(class cluster)是一种设计模式，在 Foundation Framework 中被广泛使用，举个简单的例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;arrayWithObjects:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;arr class:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, [arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output: __NSArrayI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;是一个私有类，来看看这个类的头文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;__NSArrayI : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; _used;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看出&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;继承了&lt;code&gt;NSArray&lt;&#x2F;code&gt;。为什么要这么设计呢？拿 NSNumber 来举个例子，我们都知道 NSNumber 可以存储多种类型的数字，如 Int&#x2F;Float&#x2F;Double 等等，一种方式是把 NSNumber 作为基类，然后分别去实现各自的子类，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;初看起来也没什么问题，但如果子类很多，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster2.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这对使用者来说显然不够方便，得记住这么多类。如果使用类簇，问题就变得简单了，把 Number 作为抽象基类，子类各自实现存取方式，然后在基类中定义多个初始化方式，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster3.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在只需要记住一个类就可以了。&lt;code&gt;NSNumber&lt;&#x2F;code&gt;的初始化伪代码大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithBool
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFBoolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithLong
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-ios-xiang-mu-zhong-de-ying-yong&quot;&gt;在 iOS 项目中的应用&lt;&#x2F;h3&gt;
&lt;p&gt;在开发 app 时经常会遇到表现和行为完全一样，但数据源不一样的情况。以花瓣 app 为例，同样是瀑布流，可能来自我喜欢的图片、某个画板下的图片、某个用户的图片等等。如果为每一种表现方式都新建一个 Controller，并且使用这个 Controller 来初始化，那么就会遇到最开始提到的问题：子类太多，使用不便。这正好可以通过类簇来很方便地搞定。比如这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBWaterfallViewController
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithLiked
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBLikedViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithBoardID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;boardID
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBBoardViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]initWithBoardID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;boardID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 通用的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (PSUICollectionViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionView:&lt;&#x2F;span&gt;&lt;span&gt;(PSUICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;collectionView
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cellForItemAtIndexPath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 每个子类需要实现的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchMoreData
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;子类需要实现此方法&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来类似这样&lt;code&gt;[[HBWaterfallViewController alloc]initWithBoardID:9527]&lt;&#x2F;code&gt; 或 &lt;code&gt;[[HBWaterfallViewController alloc]initWithLiked]&lt;&#x2F;code&gt;。如果有新的 DataSource，新加一个初始化方法即可，对于使用者来说，打开头文件，看下 init 开头的方法就行了。&lt;&#x2F;p&gt;
&lt;p&gt;再举个例子，现在很多应用需要同时兼顾 iOS6 和 iOS7，在表现上需要为不同的系统加载不同的图片资源，最简单粗暴的方法就是各种 if&#x2F;else 判断，像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;]systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 6 and previous versions *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 7 and above *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不够优雅，可以使用类簇的思想来去掉 if&#x2F;else 判断，把跟视图具体元素无关的代码放在基类，跟系统版本相关的代码拆成两个子类，然后在各自的类中加载相应的资源。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.h *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestView: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Common method *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;[TestView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;] systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里&lt;code&gt;alloc&lt;&#x2F;code&gt;时并没有返回&lt;code&gt;TestView&lt;&#x2F;code&gt;类，而是根据系统版本返回&lt;code&gt;TestViewIOS6&lt;&#x2F;code&gt; 或 &lt;code&gt;TestViewIOS7&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS6.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestViewIOS6: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS6 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS7.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@implementation TestViewIOS7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS7 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;类簇的本质其实是&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82&quot;&gt;抽象工厂&lt;&#x2F;a&gt;，类簇也可以有多个基类，如&lt;code&gt;NSArray&lt;&#x2F;code&gt;, &lt;code&gt;NSMutableArray&lt;&#x2F;code&gt;, 后者就是继承的前者。它对一些「大同小异」的问题，往往会有不错的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;mac&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;devpedia-cocoacore&#x2F;ClassCluster.html&quot;&gt;Cocoa Core Competencies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.noxeos.com&#x2F;2013&#x2F;06&#x2F;18&#x2F;strategies-support-ios7-ui&#x2F;&quot;&gt;Strategies to support iOS7 UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;ClassClusters&#x2F;ClassClusters.html&quot;&gt;Class Cluster Concepts in Objective-C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说ReactiveCocoa 2</title>
            <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reactivecocoa-2/</link>
            <guid>https://limboy.me/posts/reactivecocoa-2/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;a&gt;是&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1107-reactivecocoa-for-a-better-world&quot;&gt;Github&lt;&#x2F;a&gt;开源的一款 cocoa FRP 框架，我在&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;ios&#x2F;2013&#x2F;06&#x2F;19&#x2F;frp-reactivecocoa.html&quot;&gt;之前的文章&lt;&#x2F;a&gt;里有过介绍(当时还是 1.x 版本，2.x 版本有了新的变化，API 也有部分不兼容) 这里再简单地提一下。&lt;&#x2F;p&gt;
&lt;p&gt;Native app 有很大一部分的时间是在等待事件发生，然后响应事件，比如等待网络请求完成，等待用户的操作，等待某些状态值的改变等等，等这些事件发生后，再做进一步处理。 但是这些等待和响应，并没有一个统一的处理方式。Delegate, Notification, Block, KVO, 常常会不知道该用哪个最合适。有时需要 chain 或者 compose 某几个事件，就需要多个状态变量，而状态变量一多，复杂度也就上来了。为了解决这些问题，Github 的工程师们开发了 ReactiveCocoa。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-ge-chang-jian-de-gai-nian&quot;&gt;几个常见的概念&lt;&#x2F;h2&gt;
&lt;p&gt;在阅读 ReactiveCocoa(以下简称 RAC)的相关文章或代码时，经常会出现一些名词，理解它们对于理解 RAC 有很大的帮助，下面就简要来说说这些常见的概念。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signal-and-subscriber&quot;&gt;Signal and Subscriber&lt;&#x2F;h3&gt;
&lt;p&gt;这是 RAC 最核心的内容，这里我想用插头和插座来描述，插座是 Signal，插头是 Subscriber。想象某个遥远的星球，他们的电像某种物质一样被集中存储，且很珍贵。插座负责去获取电，插头负责使用电，而且一个插座可以插任意数量的插头。当一个插座(Signal)没有插头(Subscriber)时什么也不干，也就是处于冷(Cold)的状态，只有插了插头时才会去获取，这个时候就处于热(Hot)的状态。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 获取到数据后，会调用 Subscriber 的 sendNext, sendComplete, sendError 方法来传送数据给 Subscriber，Subscriber 自然也有方法来获取传过来的数据，如：[signal subscribeNext:error:completed]。这样只要没有 sendComplete 和 sendError，新的值就会通过 sendNext 源源不断地传送过来，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, username)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;newName:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RACObserve&lt;&#x2F;code&gt;使用了 KVO 来监听 property 的变化，只要 username 被自己或外部改变，block 就会被执行。但不是所有的 property 都可以被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;，该 property 必须支持 KVO，比如 NSURLCache 的 currentDiskUsage 就不能被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 是很灵活的，它可以被修改(map)，过滤(filter)，叠加(combine)，串联(chain)，这有助于应对更加复杂的情况，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;logInButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, enabled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;        combineLatest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@[
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usernameTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;passwordTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(LoginManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggingIn)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggedIn)
&lt;&#x2F;span&gt;&lt;span&gt;        ] reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggingIn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggedIn) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggingIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggedIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码看起来有点复杂，来细细说一下，首先是左边的&lt;code&gt;RAC(...)&lt;&#x2F;code&gt;，它的作用是将&lt;code&gt;self.logInButton.enabled&lt;&#x2F;code&gt;属性与右边的 signal 的 sendNext 值绑定。也就是如果右边的 reduce 的返回值为 NO，那么 enabled 就为 NO。右边的&lt;code&gt;combineLatest&lt;&#x2F;code&gt;是获取这 4 个 signal 的 next 值。其中可以看到&lt;code&gt;self.usernameTextField.rac_textSignal&lt;&#x2F;code&gt;这么个东东，&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是 RAC 为 UITextField 添加的 category，只要 usernameTextField 的值有变化，这个值就会被返回(sendNext)。combineLatest 需要每个 signal 至少都有过一次 sendNext。reduce 的作用是根据接收到的值，再返回一个新的值，这里是@(YES)和@(NO)，必须是 object。&lt;&#x2F;p&gt;
&lt;p&gt;上面这段代码用到了 Signal 的组合，想象一下，如果是传统的方式，写起来还是挺复杂的，而且随着功能的增加，调整起来会更加麻烦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leng-xin-hao-cold-he-re-xin-hao-hot&quot;&gt;冷信号(Cold)和热信号(Hot)&lt;&#x2F;h3&gt;
&lt;p&gt;上面提到过这两个概念，冷信号默认什么也不干，比如下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;triggered&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foobar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们创建了一个 Signal，但因为没有被 subscribe，所以什么也不会发生。加了下面这段代码后，signal 就处于 Hot 的状态了，block 里的代码就会被执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeCompleted:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;subscription &lt;&#x2F;span&gt;&lt;span&gt;%u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, subscriptions);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或许你会问，那如果这时又有一个新的 subscriber 了，signal 的 block 还会被执行吗？这就牵扯到了另一个概念：Side Effect&lt;&#x2F;p&gt;
&lt;h3 id=&quot;side-effect&quot;&gt;Side Effect&lt;&#x2F;h3&gt;
&lt;p&gt;还是上面那段代码，如果有多个 subscriber，那么 signal 就会又一次被触发，控制台里会输出两次&lt;code&gt;triggered&lt;&#x2F;code&gt;。这或许是你想要的，或许不是。如果要避免这种情况的发生，可以使用 &lt;code&gt;replay&lt;&#x2F;code&gt; 方法，它的作用是保证 signal 只被触发一次，然后把 sendNext 的 value 存起来，下次再有新的 subscriber 时，直接发送缓存的数据。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoa-categories&quot;&gt;Cocoa Categories&lt;&#x2F;h2&gt;
&lt;p&gt;为了更加方便地使用 RAC，RAC 给 Cocoa 添加了很多 category，与系统集成地越紧密，使用起来自然也就越方便。下面是我认为比较常用的 categories。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uiview-categories&quot;&gt;UIView Categories&lt;&#x2F;h3&gt;
&lt;p&gt;上面看到的&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是加在 UITextField 上的(UITextField+RACSignalSupport.h)，其他常用的 UIView 也都有添加相应的 category，比如 UIAlertView，就不需要再用 Delegate 了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Alert&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt; cancelButtonTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; otherButtonTitles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_buttonClickedSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexNumber) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([indexNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有了这些 Category，大部分的 Delegate 都可以使用 RAC 来做。或许你会想，可不可以 subscribe NSMutableArray.rac_sequence.signal，这样每次有新的 object 或旧的 object 被移除时都能知道，UITableViewController 就可以根据 dataSource 的变化，来 reloadData。但很可惜这样不行，因为 RAC 是基于 KVO 的，而 NSMutableArray 并不会在调用 addObject 或 removeObject 时发送通知，所以不可行。不过可以使用 NSArray 作为 UITableView 的 dataSource，只要 dataSource 有变动就换成新的 Array，这样就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;说到 UITableView，再说一下 UITableViewCell，RAC 给 UITableViewCell 提供了一个方法：&lt;code&gt;rac_prepareForReuseSignal&lt;&#x2F;code&gt;，它的作用是当 Cell 即将要被重用时，告诉 Cell。想象 Cell 上有多个 button，Cell 在初始化时给每个 button 都&lt;code&gt;addTarget:action:forControlEvents&lt;&#x2F;code&gt;，被重用时需要先移除这些 target，下面这段代码就可以很方便地解决这个问题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelButton
&lt;&#x2F;span&gt;&lt;span&gt;	rac_signalForControlEvents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UIControlEventTouchUpInside]
&lt;&#x2F;span&gt;&lt;span&gt;	takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_prepareForReuseSignal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do other things
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个很常用的 category 就是&lt;code&gt;UIButton+RACCommandSupport.h&lt;&#x2F;code&gt;，它提供了一个 property：&lt;code&gt;rac_command&lt;&#x2F;code&gt;，就是当 button 被按下时会执行的一个命令，命令被执行完后可以返回一个 signal，有了 signal 就有了灵活性。比如点击投票按钮，先判断一下有没有登录，如果有就发 HTTP 请求，没有就弹出登陆框，可以这么实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithEnabled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt; signalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assume that we&amp;#39;re logged in at first. We&amp;#39;ll replace this signal later if not.
&lt;&#x2F;span&gt;&lt;span&gt;	RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[PXRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiHelper&lt;&#x2F;span&gt;&lt;span&gt;] authMode] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; PXAPIHelperModeNoAuth) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Not logged in. Replace signal.
&lt;&#x2F;span&gt;&lt;span&gt;		authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			FRPLoginViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[FRPLoginViewController alloc] initWithNibName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;FRPLoginViewController&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; bundle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;navigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UINavigationController alloc] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;presentViewController:navigationController animated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completion:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;				[subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			}];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		}&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] ignoreValues];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		[SVProgressHUD showErrorWithStatus:[error localizedDescription]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码节选自 AshFurrow 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt;，有删减。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-structure-categories&quot;&gt;Data Structure Categories&lt;&#x2F;h3&gt;
&lt;p&gt;常用的数据结构，如 NSArray, NSDictionary 也都有添加相应的 category，比如&lt;code&gt;NSArray&lt;&#x2F;code&gt;添加了&lt;code&gt;rac_sequence&lt;&#x2F;code&gt;，可以将&lt;code&gt;NSArray&lt;&#x2F;code&gt;转换为&lt;code&gt;RACSequence&lt;&#x2F;code&gt;，顺便说一下&lt;code&gt;RACSequence&lt;&#x2F;code&gt;, &lt;code&gt;RACSequence&lt;&#x2F;code&gt;是一组 immutable 且有序的 values，不过这些 values 是运行时计算的，所以对性能提升有一定的帮助。&lt;code&gt;RACSequence&lt;&#x2F;code&gt;提供了一些方法，如&lt;code&gt;array&lt;&#x2F;code&gt;转换为&lt;code&gt;NSArray&lt;&#x2F;code&gt;，&lt;code&gt;any:&lt;&#x2F;code&gt;检查是否有 Value 符合要求，&lt;code&gt;all:&lt;&#x2F;code&gt;检查是不是所有的 value 都符合要求，这里的符合要求的，block 返回 YES，不符合要求的就返回 NO。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;notificationcenter-category&quot;&gt;NotificationCenter Category&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;, 默认情况下&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;使用&lt;code&gt;Target-Action&lt;&#x2F;code&gt;方式来处理 Notification，这样就需要另外定义一个方法，这就涉及到编程领域的两大难题之一：起名字。有了 RAC，就有 Signal，有了 Signal 就可以 subscribe，于是&lt;code&gt;NotificationCenter&lt;&#x2F;code&gt;就可以这么来处理，还不用担心移除 observer 的问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] rac_addObserverForName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;MyNotification&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;notification) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Notification Received&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nsobject-categories&quot;&gt;NSObject Categories&lt;&#x2F;h3&gt;
&lt;p&gt;NSObject 有不少的 Category，我觉得比较有用的有这么几个&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racdeallocating-h&quot;&gt;NSObject+RACDeallocating.h&lt;&#x2F;h4&gt;
&lt;p&gt;顾名思义就是在一个 object 的 dealloc 被触发时，执行的一段代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_willDeallocSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeCompleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oops, i will be gone&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsobject-raclifting-h&quot;&gt;NSObject+RACLifting.h&lt;&#x2F;h4&gt;
&lt;p&gt;有时我们希望满足一定条件时，自动触发某个方法，有了这个 category 就可以这么办&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)test
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        dispatch_time_t popTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(DISPATCH_TIME_NOW, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NSEC_PER_SEC));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(popTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Another B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_liftSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(doA:withB:) withSignals:signalA, signalB, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)doA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)A withB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)B
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; and B:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, A, B);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;rac_liftSelector:withSignals&lt;&#x2F;code&gt; 就是干这件事的，它的意思是当 signalA 和 signalB 都至少 sendNext 过一次，接下来只要其中任意一个 signal 有了新的内容，&lt;code&gt;doA:withB&lt;&#x2F;code&gt;这个方法就会自动被触发。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有兴趣，可以想想上面这段代码会输出什么。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racselectorsignal-h&quot;&gt;NSObject+RACSelectorSignal.h&lt;&#x2F;h4&gt;
&lt;p&gt;这个 category 有&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt;和&lt;code&gt;rac_signalForSelector:fromProtocol:&lt;&#x2F;code&gt; 这两个方法。先来看前一个，它的意思是当某个 selector 被调用时，再执行一段指定的代码，相当于 hook。比如点击某个按钮后，记个日志。后者表示该 selector 实现了某个协议，所以可以用它来实现 Delegate。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 带来的变化还不仅仅是这些，它还带来了架构层面的变化。我们都知道苹果推荐的是 MVC 架构，那 MVVM 又是什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;f.cloud.github.com&#x2F;assets&#x2F;432536&#x2F;867984&#x2F;291ed380-f760-11e2-9106-d3158320af39.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟 MVC 最大的区别是多了个&lt;code&gt;ViewModel&lt;&#x2F;code&gt;，它直接与 View 绑定，而且对 View 一无所知。拿做菜打比方的话，ViewModel 就是调料，它不关心做的到底是什么菜。这不是跟&lt;code&gt;Model&lt;&#x2F;code&gt;很像吗？是的，它可以扮演 Model 的职责，但其实它是 Model 的中介，这样当 Model 的 API 有变化，或者由本地存储变为远程 API 调用时，ViewModel 的 public API 可以保持不变。&lt;&#x2F;p&gt;
&lt;p&gt;使用 ViewModel 的好处是，可以让 Controller 更加简单和轻便，而且 ViewModel 相对独立，也更加方便测试和重用。那 Controller 这时又该做哪些事呢？在 MVVM 体系中，Controller 可以被看成 View，所以它的主要工作是处理布局、动画、接收系统事件、展示 UI。&lt;&#x2F;p&gt;
&lt;p&gt;MVVM 还有一个很重要的概念是 &lt;code&gt;data binding&lt;&#x2F;code&gt;，view 的呈现需要 data，这个 data 就是由 ViewModel 提供的，将 view 的 data 与 ViewModel 的 data 绑定后，将来双方的数据只要一方有变化，另一方就能收到。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveViewModel&quot;&gt;这里&lt;&#x2F;a&gt;有 Github 开源的一个 ViewModel Base Class。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 在使用时有一些注意事项，可以参考官方的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;DesignGuidelines.md&quot;&gt;DesignGuildLines&lt;&#x2F;a&gt;，这里简单说一下。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 signal 被一个 subscriber subscribe 后，这个 subscriber 何时会被移除？答案是当 subscriber 被 sendComplete 或 sendError 时，或者手动调用[disposable dispose]。&lt;&#x2F;p&gt;
&lt;p&gt;当 subscriber 被 dispose 后，所有该 subscriber 相关的工作都会被停止或取消，如 http 请求，资源也会被释放。&lt;&#x2F;p&gt;
&lt;p&gt;Signal events 是线性的，不会出现并发的情况，除非显示地指定 Scheduler。所以&lt;code&gt;-subscribeNext:error:completed:&lt;&#x2F;code&gt;里的 block 不需要锁定或者 synchronized 等操作，其他的 events 会依次排队，直到 block 处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;Errors 有优先权，如果有多个 signals 被同时监听，只要其中一个 signal sendError，那么 error 就会立刻被传送给 subscriber，并导致 signals 终止执行。相当于 Exception。&lt;&#x2F;p&gt;
&lt;p&gt;生成 Signal 时，最好指定 Name, &lt;code&gt;-setNameWithFormat:&lt;&#x2F;code&gt; 方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;block 代码中不要阻塞。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;尽管洋洋洒洒写了这么多，也只是对 RAC 有了个大概的了解，如果要更深入地了解 RAC 还是需要多读文档、代码和相关项目。&lt;&#x2F;p&gt;
&lt;p&gt;RAC 学习起来稍显吃力，且相关的文章目前还不多，中文的就更少了，希望这篇文章能带给你些帮助。&lt;&#x2F;p&gt;
&lt;p&gt;以下是我觉得还不错的 RAC 相关资源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt; 作者同时还出了一本 FRP 相关的书，个人觉得看源码就足够了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;GroceryList&quot;&gt;GroceryList&lt;&#x2F;a&gt; RAC 的作者之一 jspahrsummers 的一个项目&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;reactivecocoa-essentials-understanding-and-using-raccommand&#x2F;&quot;&gt;ReactiveCocoa Essentilas: Understanding and Using RACCommand&lt;&#x2F;a&gt; 介绍了 RACCommand 的使用，同时也涉及了 RAC 相关的一些点。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;02&#x2F;transparent-oauth-token-refresh-using-reactivecocoa&#x2F;&quot;&gt;Transparent OAuth Token Refresh Using ReactiveCocoa&lt;&#x2F;a&gt; 这篇文章讲了如何使用 RAC 来透明地获取 Access Token，然后继续发送请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;vimeo.com&#x2F;78749139&quot;&gt;BNR: An Introduction to ReactiveCocoa&lt;&#x2F;a&gt;(视频)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>读《程序员的思维修炼》</title>
            <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pragmatic-thinking-and-learning/</link>
            <guid>https://limboy.me/posts/pragmatic-thinking-and-learning/</guid>
            <description>&lt;p&gt;虽然冠以「程序员」的名头，但其实也适用于非程序员。这本书主要围绕「如何提升元学习能力」展开，所谓「元学习」就是学习如何学习。掌握了这种能力后在其他领域也可以如鱼得水。还介绍了 L 型和 R 型双 CPU 模式，阅读的技巧，目标的设定等等。读起来不累，同时又会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;简单摘录了几句：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;培养幽默感，以建立更强大的隐喻。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;两个想法相距越远，越难以通过有效的隐喻联系起来。但我们遇到一个格外具有创造性的隐喻，且两参照系距离适中，我们就不得不几百年来一直歌颂这位作者。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;增加感官体验，以促进大脑的使用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;直觉和模式匹配能力超越了显性知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你的价值取决于你为团队带来的价值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是软件，软件不会老化，不会退化。但是大脑必须刷新，必须使用，否则就会丢失记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型在存储输入方面非常卖力，事实上可能你的每次经历，无论多么平淡乏味，都会被存储。但是它不一定被索引。当你努力解决一个问题时，R 型进程会搜索你的所有记忆以寻找解决方案。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型处理语言、分析、符号、抽象、时间、推理、数字、逻辑、现象思维。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型处理直觉、综合、想象。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;积极的情感对学习和创造性思维非常关键。当你充满了消极情绪时，你的大脑就开始停止提供多余的资源。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择或桌面的整理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你努力解决一个问题时，你的所有记忆都会被扫描——甚至那些你无法主动唤醒的记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;养成一种收集思维鹅卵石的习惯，一旦有了积累，造墙的过程就会很容易。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你是否注意到伟大的想法或者领悟可能会在最出乎意料的时候降临？比如洗澡、刷盘子或其他一些枯燥、琐碎的工作时。这是因为 L 型有点厌倦了这种常规任务，走了神，这才让 R 型得以自由地展示自己地发现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;改变解决问题的角度（角色扮演）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;培养快速的洞察力，寻找不相关事物之间的关系或类比。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是一个用于填充的容器，而是一束需要点燃的火焰。这不是别人可以帮你做的，而是一件你必须自己做的事情。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;建立 SMART 任务实现你的目标。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所有的知识投资都有价值。即使你从来不会在工作中使用某项技术，它也会影响你思考和解决问题的方式。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;考虑投资的回报率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你种菜时，如果菜长的不好，你不会怪责菜，你会寻找其他理由。菜可能需要更多的肥料或者水，或者少晒太阳，你决不会怪责菜。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SQ3R 主动学习法(Survy, Question, Read, Recite, Review)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用思维导图做笔记。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;以教代学（橡皮鸭调试法），向你所在领域之外的人解释。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把事物分成大脑足以容纳的几部分。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型模式的 CPU 有一种「空闲循环」程序，如果没有更紧迫的事情值得你去注意，闲置程序将会停留在一些低等级的困扰或紧急的问题上，而这会干扰 R 型的处理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大部分冥想、瑜伽以及类似的练习都是为了这个相同的目标：缓和大脑里 L 型嘈杂的声音所带来的痛苦，生活在此刻，不要将你的精力不必要的分散，因为内心中喋喋不休的事情会击倒我们。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 wiki 来管理信息和知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;「不作为」是敌人，「错误」不是。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;给新习惯适应的时间。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;制定一段时间计划，然后努力实现。跟踪你的进度，当你感觉做得不够时，重新审视你的成果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;信念是真实的，你必须相信这种改变是可能的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;采取步步为营的细小步骤。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;新手的大脑有很多可能性，但是专家的却很少。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;抓住方向盘，不要自动驾驶。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>The Icarus Deception (伊卡洛斯的骗局)</title>
            <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-icarus-deception/</link>
            <guid>https://limboy.me/posts/the-icarus-deception/</guid>
            <description>&lt;p&gt;「&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;The-Icarus-Deception-High-Will&#x2F;dp&#x2F;B00AECT2XK&quot;&gt;The Icarus Deception&lt;&#x2F;a&gt;」(伊卡洛斯的骗局)是 Seth Godin 在&lt;a href=&quot;http:&#x2F;&#x2F;www.kickstarter.com&#x2F;projects&#x2F;297519465&#x2F;the-icarus-deception-why-make-art-new-from-seth-go&quot;&gt;KickStarter&lt;&#x2F;a&gt;上发起的一个项目。或许大家对伊卡洛斯这个人物不是很熟悉，先简单说一下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;「Fall of Icarus」源自于希腊神话的一个故事，Icarus 的爸爸为他做了蜡的羽毛，但是因为他太自信，太骄傲导致他飞得太靠近太阳，用蜡做成的羽毛融化而坠落。故事警惕人们要“谨守本分，了解自己的局限性”。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;而这本书就是要揭开这个骗局，youtube 上有 Seth Godin 对&lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=TdjBBdaAWqw&quot;&gt;这本书的解释&lt;&#x2F;a&gt;，不到 3 分钟，值得看一下。大意是，工作让人们有了安全感、安于现状，但工作也让人们不断地对自己产生怀疑：我为什么要做这些？社会希望、「帮助」你飞的低一点，但现状是互联网和社交网络，让信息的传播变得非常容易和快捷，你飞得越高，带来的影响就会越大。&lt;&#x2F;p&gt;
&lt;p&gt;摘录其中几个自己比较喜欢的片段。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于文化的原因，大部分人都倾向于规避风险，恐惧失败，没有意愿让世界变得更加美好。相反，他们被数字所束缚，因循守旧。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不经历痛苦就达到目标是不可能的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术家通过勇气、洞察力、创造力来挑战现状。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;信任、关系和惊喜是稀有之物。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你把钱用来创作出类拔萃的产品或服务，那么就不需要打广告。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;现在通过意见领袖来传播杰出产品的成本已经很低且很高效了，把一个平庸的产品通过推广渠道推到早已过载的用户手中这种做法已经收效甚微了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术没有正确答案，我们期望一个有意思的答案。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当前重要的：信任、授权、出色、领导力、易被传播的故事、人文。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Facebook 或 Twitter 上有多少 Follower 不重要，重要的是如果明天你没出现，有多少人会惦记着你。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;正确是好的，但有趣更好。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术家的习惯：静坐；自主学习；激发其他艺术家；用不同的方式去教；发布作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你的作品失败了，做更好的作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;我们夸大了落水的风险，却忽略了游泳的乐趣。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将每一个障碍变成学习的过程，而不是被动地去解决它。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果没有足够多的人质疑你，那么你并没有在做不一样的东西。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你不站出来或说出来，你就不会有羞愧感。工业社会告诉你避免被关注就可以避免羞愧，遵守规则就会获得稳定。但你也可以通过躲藏来避免羞愧，但那样你就会找不到快乐和稳定。「羞愧」是一个选择，它不能强加于你，但你可以选择接受。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;作为一个艺术家，你的作品必须打动观众&#x2F;用户。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;发布小的作品，然后大一点的作品，然后再是影响世界的作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你可以冒风险去做可能错的事情，或者变得无聊。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;弊端在于用别人的尺度来衡量自己的艺术。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术是努力的结果，是向某个特定的方向倾注大量的热情和精力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把尽量多的人带到一个房间里，然后再向其他的地方进发。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;成功的艺术家的习惯：学会销售自己的作品；学会感谢；在公共场合演讲；经常失败；看清世界，作出预判；教授他人；经常写作；联系他人；领导一个部落；把这些作为自己必须要承担的工作和任务。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;痛苦是旅途的一部分，没有痛苦，这趟旅途就不值得继续。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最大的失败源于对失败的恐惧而扼杀了自己的热情。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS项目的目录结构和开发流程</title>
            <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/build-ios-application/</link>
            <guid>https://limboy.me/posts/build-ios-application/</guid>
            <description>&lt;p&gt;网上相关的资源不多，开源的且质量还不错的 iOS 项目也是少之又少，最近正好跟同事合作了一个 iOS 项目，来说说自己的一些想法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;AppDelegate
&lt;&#x2F;span&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;Vendors
&lt;&#x2F;span&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;Resources
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 AppDelegate.h(.m)文件，是整个应用的入口文件，所以单独拿出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;models&quot;&gt;Models&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放一些与数据相关的 Model 文件，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;macro&quot;&gt;Macro&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放了整个应用会用到的宏定义，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;	|- AppMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- NotificationMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- VendorMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- UtilsMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;appmacro-h-li-fang-app-xiang-guan-de-hong-ding-yi-ru&quot;&gt;AppMacro.h 里放 app 相关的宏定义，如:&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 表情相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cachedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_RECENT_USED @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;recentusedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CATEGORIES @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;categoryemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_TOPICS @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;emotiontopics&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 收藏相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;COLLECT_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;collected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 配图相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_HEIGHT_MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;146
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;notificationmacro-h-li-fang-de-shi-tong-zhi-xiang-guan-de-hong-ding-yi&quot;&gt;NotificationMacro.h 里放的是通知相关的宏定义。&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;utilsmacro-h-li-fang-de-shi-yi-xie-fang-bian-shi-yong-de-hong-ding-yi-ru&quot;&gt;UtilsMacro.h 里放的是一些方便使用的宏定义，如：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIColorFromRGB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) [UIColor \
&lt;&#x2F;span&gt;&lt;span&gt;colorWithRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; alpha&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;) [NSString stringWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,intValue]
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### VendorMacro.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt; 里放一些第三方常量，如：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; highlight objc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_KEY @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxxxx&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_CHANNEL_ID @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxx&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有新的类型的宏定义，可以再新建一个相关的 Macro.h。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;general&quot;&gt;General&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放会被重用的 Views&#x2F;Classes 和 Categories。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;	|- Views
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKScollView
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKPullToRefresh
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	|- Classes
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKBaseViewController
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKHorizontalView
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	| - Categories
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIViewController+Sizzle
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIImageView+Downloader
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;TPK&lt;&#x2F;code&gt;是项目的首字母缩写。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;helpers&quot;&gt;Helpers&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放一些助手类，文件名与功能挂钩。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKShareHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPDBHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKEmotionHelper
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;助手类的主要作用是帮助 Controller 瘦身，也可以提供一定程度的复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vendors&quot;&gt;Vendors&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放第三方的类库&#x2F;SDK，如 UMeng、WeiboSDK、WeixinSDK 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sections&quot;&gt;Sections&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下面的文件对应的是 app 的具体单元，如导航、瀑布流等等。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;	|- Menu
&lt;&#x2F;span&gt;&lt;span&gt;	|- Setting
&lt;&#x2F;span&gt;&lt;span&gt;	|- Collection
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 app 会用到的一些资源，主要是图片。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoapods&quot;&gt;Cocoapods&lt;&#x2F;h2&gt;
&lt;p&gt;业务无关的类库可以通过 Cocoapods 来方便地管理，如&lt;code&gt;SDWebImage&lt;&#x2F;code&gt;, &lt;code&gt;Reachability&lt;&#x2F;code&gt;等等。还有一些是多个应用都会用到的基础模块，比如 HBAPI、HBSNS 、HBFoundation（HB 为公司名首字母）等等，可以建一个私有的 git repo，然后加到 podfile 中，这样如果 HBAPI 有更新，只需要&lt;code&gt;pod update&lt;&#x2F;code&gt;一下就行了。&lt;&#x2F;p&gt;
&lt;p&gt;顺便说一下&lt;code&gt;HBFoundation&lt;&#x2F;code&gt;，这个 git 仓库中可以放一些自己写的所有应用基本上都会用到的小模块。如很多 app 都会有隔一段时间跳出一个求好评的 alertView，就可以写一个&lt;code&gt;HBRating&lt;&#x2F;code&gt;类，这样需要使用该功能的 app 只需加上一句：&lt;code&gt;[HBRating checkIfShouldPopupWithAppID:(NSInteger)appID]&lt;&#x2F;code&gt;就行了。又比如 app 都有接受 push notification 的需求，可以写一个&lt;code&gt;HBAPNS&lt;&#x2F;code&gt;类，等等。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kai-fa-liu-cheng&quot;&gt;开发流程&lt;&#x2F;h2&gt;
&lt;p&gt;在拿到设计图后，就可以针对设计图抽离出可复用的 Classes&#x2F;Views&#x2F;Helpers，考虑一下某个效果的具体实现，使用合适的设计模式来避免大量的 if&#x2F;else 嵌套，等等。不要一下子就钻到 Sections 中去实现页面效果和功能，初看起来可能会快一点，但只要有点复杂度的项目，这种做法到后来只会吃尽苦头，代码会变的越来越难维护。所以前期一定要做好充足的准备工作。&lt;&#x2F;p&gt;
&lt;p&gt;经验有限，如果你有更好的想法，欢迎交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The Dip</title>
            <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-dip/</link>
            <guid>https://limboy.me/posts/the-dip/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;the_dip&#x2F;&quot;&gt;The Dip&lt;&#x2F;a&gt; 是营销大师 Seth Godin 在 07 年写的一本小书，其核心的思想是：找到一个自己愿意投身的领域，并成为该领域的 No.1&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-dip&amp;#x2F;the-dip.jpg&quot;
        width=&quot;639&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很多人，无论是主动地还是被动地选择某个领域，无论是从事了 1 年还是 10 年，大部分都是处于「平均水平」，或者「高于平均水平」，但绝没到「该领域最好」的程度。这也是 Seth Godin 希望人们摆脱的状态，因为「赢者通吃」。大部分人是懒得去比较去探究的，它们会问：干这行的谁最 NB，然后直接就去找 TA 了。好比我们一说到巴黎马上就想到了「埃菲尔铁塔」，或者「卢浮宫」、「塞纳河」，又有多少人知道「玛德莱娜教堂」教堂呢。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;1519158.htm&quot;&gt;Zipf 定律&lt;&#x2F;a&gt;跟 80&#x2F;20 原则有点类似。Zipf 这个人做了一个研究，并得出结论：一个词在一个有相当长度的语篇中的等级序号与改词的出现次数乘积几乎是一个常数。比如：「the」出现得最多，为 200 次，那么「the」的 rank _ frequency = 200；「this」出现次数排第 5，为 40 次，那么「this」的 r _ f = 200；「September」的出现次数排第 100，一共出现了 2 次，那么 r * f = 200。如果把出现次数比作客户的话，第二名的客户数比第一名少了一半，第五名比第一名更是少了 80%。有点类似「长尾理论」的这张图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-dip&amp;#x2F;the-long-tail.jpg&quot;
        width=&quot;498&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然成为第一有这么明显的好处，为什么还是绝大多数人都无法做到呢？这里有很多原因，比如：没有看到成为第一能够带来的好处；在一个自己没有热情的领域苦苦挣扎；习惯了「舒适区」，不愿到「学习区」磨练等等。最常见的还是被短期的痛苦打败，因而放慢甚至停止了前进的步伐。&lt;&#x2F;p&gt;
&lt;p&gt;经历痛苦是难免的，它是实实在在的槛，只有真正能跨过去的，才能站在这个行业的顶端，也正是因为稀缺性，他们的价值被大大增加了。生活中的我们，会被各种各样的事物吸引注意力，在经历过一番努力后，开始沉浸于「Comfort Zone」，觉得已经「Good Enough」。按「Zipf 理论」来说，这是不划算的，因为越是处于前列，那么每进步一点带来的回报都是巨大的。&lt;&#x2F;p&gt;
&lt;p&gt;还要注意分辨 Dip 和 cul-de-sac(死胡同)，所谓「死胡同」，就是你明明花了很多时间，但收获却很小，或者 Dip 不够深，没有稀缺性。把过多的精力放在后者，带来的损失是双倍的。一旦发现是死胡同，那就尽快抽身。去找 Dip，找到很多人跨不过去，且已跨过去的人还不多的领域。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)KVO的内部实现</title>
            <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/internal-implementation-of-kvo/</link>
            <guid>https://limboy.me/posts/internal-implementation-of-kvo/</guid>
            <description>&lt;p&gt;09 年的&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;pyblog&#x2F;friday-qa-2009-01-23.html&quot;&gt;一篇文章&lt;&#x2F;a&gt;，比较深入地阐述了 KVO 的内部实现。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是实现 Cocoa Bindings 的基础，它提供了一种方法，当某个属性改变时，相应的 objects 会被通知到。在其他语言中，这种观察者模式通常需要单独实现，而在 Objective-C 中，通常无须增加额外代码即可使用。&lt;&#x2F;p&gt;
&lt;p&gt;###概览
这是怎么实现的呢？其实这都是通过 Objective-C 强大的运行时(runtime)实现的。当你第一次观察某个 object 时，runtime 会创建一个新的继承原先 class 的 subclass。在这个新的 class 中，它重写了所有被观察的 key，然后将 object 的&lt;code&gt;isa&lt;&#x2F;code&gt;指针指向新创建的 class（这个指针告诉 Objective-C 运行时某个 object 到底是哪种类型的 object）。所以 object 神奇地变成了新的子类的实例。&lt;&#x2F;p&gt;
&lt;p&gt;这些被重写的方法实现了如何通知观察者们。当改变一个 key 时，会触发&lt;code&gt;setKey&lt;&#x2F;code&gt;方法，但这个方法被重写了，并且在内部添加了发送通知机制。（当然也可以不走 setXXX 方法，比如直接修改 iVar，但不推荐这么做）。&lt;&#x2F;p&gt;
&lt;p&gt;有意思的是：苹果不希望这个机制暴露在外部。除了 setters，这个动态生成的子类同时也重写了&lt;code&gt;-class&lt;&#x2F;code&gt;方法，依旧返回原先的 class！如果不仔细看的话，被 KVO 过的 object 看起来和原先的 object 没什么两样。&lt;&#x2F;p&gt;
&lt;p&gt;###深入探究
下面来看看这些是如何实现的。我写了个程序来演示隐藏在 KVO 背后的机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; gcc -o kvoexplorer -framework Foundation kvoexplorer.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestClass : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestClass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@synthesize&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; methodCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Method \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;methodList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_copyMethodList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(c, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;methodCount)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; methodCount; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObject: NSStringFromSelector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(methodList[i]))&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free(methodList)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; array;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;libobjc class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;implements methods &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;name,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([obj class]),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa) componentsJoinedByString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, [str UTF8String])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSAutoreleasePool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;control &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:x forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:y forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;control&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, control)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, y)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;xy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, xy)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using NSObject methods, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[control methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[x methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using libobjc functions, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(control),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(x),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们从头到尾细细看来。&lt;&#x2F;p&gt;
&lt;p&gt;首先定义了一个&lt;code&gt;TestClass&lt;&#x2F;code&gt;的类，它有 3 个属性。&lt;&#x2F;p&gt;
&lt;p&gt;然后定义了一些方便调试的方法。&lt;code&gt;ClassMethodNames&lt;&#x2F;code&gt;使用 Objective-C 运行时方法来遍历一个 class，得到方法列表。注意，这些方法不包括父类的方法。&lt;code&gt;PrintDescription&lt;&#x2F;code&gt;打印 object 的所有信息，包括 class 信息（包括&lt;code&gt;-class&lt;&#x2F;code&gt;和通过运行时得到的 class），以及这个 class 实现的方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后创建了 4 个&lt;code&gt;TestClass&lt;&#x2F;code&gt;实例，每一个都使用了不同的观察方式。&lt;code&gt;x&lt;&#x2F;code&gt;实例有一个观察者观察&lt;code&gt;x&lt;&#x2F;code&gt;key，&lt;code&gt;y&lt;&#x2F;code&gt;, &lt;code&gt;xy&lt;&#x2F;code&gt;也类似。为了做比较，&lt;code&gt;z&lt;&#x2F;code&gt;key 没有观察者。最后&lt;code&gt;control&lt;&#x2F;code&gt;实例没有任何观察者。&lt;&#x2F;p&gt;
&lt;p&gt;然后打印出 4 个 objects 的 description。&lt;&#x2F;p&gt;
&lt;p&gt;之后继续打印被重写的 setter 内存地址，以及未被重写的 setter 的内存地址做比较。这里做了两次，是因为&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;没能得到重写的方法。KVO 试图掩盖它实际上创建了一个新的 subclass 这个事实！但是使用运行时的方法就原形毕露了。&lt;&#x2F;p&gt;
&lt;p&gt;###运行代码
看看这段代码的输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;control&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, x, setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, y, setZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x103280&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; methods, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e
&lt;&#x2F;span&gt;&lt;span&gt;Using libobjc functions, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，它输出了&lt;code&gt;control&lt;&#x2F;code&gt;object，没有任何问题，它的 class 是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，并且实现了 6 个 set&#x2F;get 方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后是 3 个被观察的 objects。注意&lt;code&gt;-class&lt;&#x2F;code&gt;仍然显示的是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，使用&lt;code&gt;object_getClass&lt;&#x2F;code&gt;显示了这个 object 的真面目：它是&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;的一个实例。这个&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;就是动态生成的 subclass！&lt;&#x2F;p&gt;
&lt;p&gt;注意，它是如何实现这两个被观察的 setters 的。你会发现，它很聪明，没有重写&lt;code&gt;-setZ:&lt;&#x2F;code&gt;，虽然它也是个 setter，因为它没有被观察。同时注意到，3 个实例对应的是同一个 class，也就是说两个 setters 都被重写了，尽管其中的两个实例只观察了一个属性。这会带来一点效率上的问题，因为即使没有被观察的 property 也会走被重写的 setter，但苹果显然觉得这比分开生成动态的 subclass 更好，我也觉得这是个正确的选择。&lt;&#x2F;p&gt;
&lt;p&gt;你会看到 3 个其他的方法。有之前提到过的被重写的&lt;code&gt;-class&lt;&#x2F;code&gt;方法，假装自己还是原来的 class。还有&lt;code&gt;-dealloc&lt;&#x2F;code&gt;方法处理一些收尾工作。还有一个&lt;code&gt;_isKVOA&lt;&#x2F;code&gt;方法，看起来像是一个私有方法。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，我们输出&lt;code&gt;-setX:&lt;&#x2F;code&gt;的实现。使用&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;返回的是相同的值。因为&lt;code&gt;-setX:&lt;&#x2F;code&gt;已经在子类被重写了，这也就意味着&lt;code&gt;methodForSelector:&lt;&#x2F;code&gt;在内部实现中使用了&lt;code&gt;-class&lt;&#x2F;code&gt;，于是得到了错误的结果。&lt;&#x2F;p&gt;
&lt;p&gt;最后我们通过运行时得到了不同的输出结果。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个优秀的探索者，我们进入 debugger 来看看这第二个方法的实现到底是怎样的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(gdb) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;\_NSSetIntValueAndNotify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是一个内部方法，对&lt;code&gt;Foundation&lt;&#x2F;code&gt;使用&lt;code&gt;nm -a&lt;&#x2F;code&gt;得到一个完整的私有方法列表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;df80&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetBoolValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;a0480&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e120&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetDoubleValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e1&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetFloatValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000e3550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e390&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e2&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;c0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;89df0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetObjectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e6&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetPointValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e7&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;d0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRangeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e8&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;b0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetShortValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;8ab20&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetSizeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e050&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fcd0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e470&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fc00&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e620&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedShortValueAndNotify
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个列表也能发现一些有趣的东西。比如苹果为每一种 primitive type 都写了对应的实现。Objective-C 的 object 会用到的其实只有&lt;code&gt;__NSSetObjectValueAndNotify&lt;&#x2F;code&gt;，但需要一整套来对应剩下的，而且看起来也没有实现完全，比如&lt;code&gt;long dobule&lt;&#x2F;code&gt;或&lt;code&gt;_Bool&lt;&#x2F;code&gt;都没有。甚至没有为通用指针类型(generic pointer type)提供方法。所以，不在这个方法列表里的属性其实是不支持 KVO 的。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是一个很强大的工具，有时候过于强大了，尤其是有了自动触发通知机制。现在你知道它内部是怎么实现的了，这些知识或许能帮助你更好地使用它，或在它出错时更方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;如果你打算使用 KVO，或许可以看一下我的另一篇文章&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;?page=pyblog&#x2F;key-value-observing-done-right.html&quot;&gt;Key-Value Observing Done Right&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)Objective-C的动态特性</title>
            <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/dynamic-tips-and-tricks-with-objective-c/</link>
            <guid>https://limboy.me/posts/dynamic-tips-and-tricks-with-objective-c/</guid>
            <description>&lt;p&gt;这是一篇译文，原文&lt;a href=&quot;http:&#x2F;&#x2F;pilky.me&#x2F;view&#x2F;21&quot;&gt;在此&lt;&#x2F;a&gt;，上一篇文章就是受这篇文章启发，这次干脆都翻译过来。&lt;&#x2F;p&gt;
&lt;p&gt;过去的几年中涌现了大量的 Objective-C 开发者。有些是从动态语言转过来的，比如 Ruby 或 Python，有些是从强类型语言转过来的，如 Java 或 C#，当然也有直接以 Objective-C 作为入门语言的。也就是说有很大一部分开发者都没有使用 Objective-C 太长时间。当你接触一门新语言时，更多地会关注基础知识，如语法和特性等。但通常有一些更高级的，更鲜为人知又有强大功能的特性等待你去开拓。&lt;&#x2F;p&gt;
&lt;p&gt;这篇文章主要是来领略下 Objective-C 的运行时(runtime)，同时解释是什么让 Objective-C 如此动态，然后感受下这些动态化的技术细节。希望这回让你对 Objective-C 和 Cocoa 是如何运行的有更好的了解。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-runtime&quot;&gt;The Runtime&lt;&#x2F;h2&gt;
&lt;p&gt;Objective-C 是一门简单的语言，95%是 C。只是在语言层面上加了些关键字和语法。真正让 Objective-C 如此强大的是它的运行时。它很小但却很强大。它的核心是消息分发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;messages&quot;&gt;Messages&lt;&#x2F;h3&gt;
&lt;p&gt;如果你是从动态语言如 Ruby 或 Python 转过来的，可能知道什么是消息，可以直接跳过进入下一节。那些从其他语言转过来的，继续看。&lt;&#x2F;p&gt;
&lt;p&gt;执行一个方法，有些语言，编译器会执行一些额外的优化和错误检查，因为调用关系很直接也很明显。但对于消息分发来说，就不那么明显了。在发消息前不必知道某个对象是否能够处理消息。你把消息发给它，它可能会处理，也可能转给其他的 Object 来处理。一个消息不必对应一个方法，一个对象可能实现一个方法来处理多条消息。&lt;&#x2F;p&gt;
&lt;p&gt;在 Objective-C 中，消息是通过&lt;code&gt;objc_msgSend()&lt;&#x2F;code&gt;这个 runtime 方法及相近的方法来实现的。这个方法需要一个 target，selector，还有一些参数。理论上来说，编译器只是把消息分发变成&lt;code&gt;objc_msgSend&lt;&#x2F;code&gt;来执行。比如下面这两行代码是等价的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;insertObject:foo atIndex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_msgSend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(insertObject:atIndex:), foo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;objects-classes-metaclasses&quot;&gt;Objects, Classes, MetaClasses&lt;&#x2F;h3&gt;
&lt;p&gt;大多数面向对象的语言里有 classes 和 objects 的概念。Objects 通过 Classes 生成。但是在 Objective-C 中，classes 本身也是 objects(译者注：这点跟 python 很像)，也可以处理消息，这也是为什么会有类方法和实例方法。具体来说，Objective-C 中的 Object 是一个结构体(struct)，第一个成员是&lt;code&gt;isa&lt;&#x2F;code&gt;，指向自己的 class。这是在 objc&#x2F;objc.h 中定义的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; objc_object {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; isa;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;object 的 class 保存了方法列表，还有指向父类的指针。但 classes 也是 objects，也会有&lt;code&gt;isa&lt;&#x2F;code&gt;变量，那么它又指向哪儿呢？这里就引出了第三个类型: &lt;code&gt;metaclasses&lt;&#x2F;code&gt;。一个 metaclass 被指向 class，class 被指向 object。它保存了所有实现的方法列表，以及父类的 metaclass。如果想更清楚地了解 objects,classes 以及 metaclasses 是如何一起工作地，可以阅读&lt;a href=&quot;http:&#x2F;&#x2F;www.sealiesoftware.com&#x2F;blog&#x2F;archive&#x2F;2009&#x2F;04&#x2F;14&#x2F;objc_explain_Classes_and_metaclasses.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;methods-selectors-and-imps&quot;&gt;Methods, Selectors and IMPs&lt;&#x2F;h3&gt;
&lt;p&gt;我们知道了运行时会发消息给对象。我们也知道一个对象的 class 保存了方法列表。那么这些消息是如何映射到方法的，这些方法又是如何被执行的呢？&lt;&#x2F;p&gt;
&lt;p&gt;第一个问题的答案很简单。class 的方法列表其实是一个字典，key 为 selectors，IMPs 为 value。一个 IMP 是指向方法在内存中的实现。很重要的一点是，selector 和 IMP 之间的关系是在运行时才决定的，而不是编译时。这样我们就能玩出些花样。&lt;&#x2F;p&gt;
&lt;p&gt;IMP 通常是指向方法的指针，第一个参数是 self，类型为 id，第二个参数是_cmd，类型为 SEL，余下的是方法的参数。这也是&lt;code&gt;self&lt;&#x2F;code&gt;和&lt;code&gt;_cmd&lt;&#x2F;code&gt;被定义的地方。下面演示了 Method 和 IMP&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)doSomethingWithInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)aInt{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;doSomethingWithInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; aInt)&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta-yun-xing-shi-de-fang-fa&quot;&gt;其他运行时的方法&lt;&#x2F;h3&gt;
&lt;p&gt;现在我们知道了 objects,classes,selectors,IMPs 以及消息分发，那么运行时到底能做什么呢？主要有两个作用：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;创建、修改、自省 classes 和 objects&lt;&#x2F;li&gt;
&lt;li&gt;消息分发&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;之前已经提过消息分发，不过这只是一小部分功能。所有的运行时方法都有特定的前缀。下面是一些有意思的方法：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;class&quot;&gt;class&lt;&#x2F;h4&gt;
&lt;p&gt;class 开头的方法是用来修改和自省 classes。方法如&lt;code&gt;class_addIvar&lt;&#x2F;code&gt;, &lt;code&gt;class_addMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_addProperty&lt;&#x2F;code&gt;和&lt;code&gt;class_addProtocol&lt;&#x2F;code&gt;允许重建 classes。&lt;code&gt;class_copyIvarList&lt;&#x2F;code&gt;, &lt;code&gt;class_copyMethodList&lt;&#x2F;code&gt;, &lt;code&gt;class_copyProtocolList&lt;&#x2F;code&gt;和&lt;code&gt;class_copyPropertyList&lt;&#x2F;code&gt;能拿到一个 class 的所有内容。而&lt;code&gt;class_getClassMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_getClassVariable&lt;&#x2F;code&gt;, &lt;code&gt;class_getInstanceMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_getInstanceVariable&lt;&#x2F;code&gt;, &lt;code&gt;class_getMethodImplementation&lt;&#x2F;code&gt;和&lt;code&gt;class_getProperty&lt;&#x2F;code&gt;返回单个内容。&lt;&#x2F;p&gt;
&lt;p&gt;也有一些通用的自省方法，如&lt;code&gt;class_conformsToProtocol&lt;&#x2F;code&gt;, &lt;code&gt;class_respondsToSelector&lt;&#x2F;code&gt;, &lt;code&gt;class_getSuperclass&lt;&#x2F;code&gt;。最后，你可以使用&lt;code&gt;class_createInstance&lt;&#x2F;code&gt;来创建一个 object。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ivar&quot;&gt;ivar&lt;&#x2F;h4&gt;
&lt;p&gt;这些方法能让你得到名字，内存地址和 Objective-C type encoding。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;method&quot;&gt;method&lt;&#x2F;h4&gt;
&lt;p&gt;这些方法主要用来自省，比如&lt;code&gt;method_getName&lt;&#x2F;code&gt;, &lt;code&gt;method_getImplementation&lt;&#x2F;code&gt;, &lt;code&gt;method_getReturnType&lt;&#x2F;code&gt;等等。也有一些修改的方法，包括&lt;code&gt;method_setImplementation&lt;&#x2F;code&gt;和&lt;code&gt;method_exchangeImplementations&lt;&#x2F;code&gt;，这些我们后面会讲到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;objc&quot;&gt;objc&lt;&#x2F;h4&gt;
&lt;p&gt;一旦拿到了 object，你就可以对它做一些自省和修改。你可以 get&#x2F;set ivar, 使用&lt;code&gt;object_copy&lt;&#x2F;code&gt;和&lt;code&gt;object_dispose&lt;&#x2F;code&gt;来 copy 和 free object 的内存。最 NB 的不仅是拿到一个 class，而是可以使用&lt;code&gt;object_setClass&lt;&#x2F;code&gt;来改变一个 object 的 class。待会就能看到使用场景。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;property&quot;&gt;property&lt;&#x2F;h4&gt;
&lt;p&gt;属性保存了很大一部分信息。除了拿到名字，你还可以使用&lt;code&gt;property_getAttributes&lt;&#x2F;code&gt;来发现 property 的更多信息，如返回值、是否为 atomic、getter&#x2F;setter 名字、是否为 dynamic、背后使用的 ivar 名字、是否为弱引用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;protocol&quot;&gt;protocol&lt;&#x2F;h4&gt;
&lt;p&gt;Protocols 有点像 classes，但是精简版的，运行时的方法是一样的。你可以获取 method, property, protocol 列表, 检查是否实现了其他的 protocol。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sel&quot;&gt;sel&lt;&#x2F;h4&gt;
&lt;p&gt;最后我们有一些方法可以处理 selectors，比如获取名字，注册一个 selector 等等。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们对 Objective-C 的运行时有了大概的了解，来看看它们能做哪些有趣的事情。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classes-and-selectors-from-strings&quot;&gt;Classes And Selectors From Strings&lt;&#x2F;h2&gt;
&lt;p&gt;比较基础的一个动态特性是通过 String 来生成 Classes 和 Selectors。Cocoa 提供了&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt;和&lt;code&gt;NSSelectorFromString&lt;&#x2F;code&gt;方法，使用起来很简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; stringclass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;NSString&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;于是我们就得到了一个 string class。接下来：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;myString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[stringclass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithString:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Hello World&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为什么要这么做呢？直接使用 Class 不是更方便？通常情况下是，但有些场景下这个方法会很有用。首先，可以得知是否存在某个 class，&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt; 会返回 nil，如果运行时不存在该 class 的话。比如可以检查&lt;code&gt;NSClassFromString(@&amp;quot;NSRegularExpression&amp;quot;)&lt;&#x2F;code&gt;是否为 nil 来判断是否为 iOS4.0+。&lt;&#x2F;p&gt;
&lt;p&gt;另一个使用场景是根据不同的输入返回不同的 class 或 method。比如你在解析一些数据，每个数据项都有要解析的字符串以及自身的类型（String，Number，Array）。你可以在一个方法里搞定这些，也可以使用多个方法。其中一个方法是获取 type，然后使用 if 来调用匹配的方法。另一种是根据 type 来生成一个 selector，然后调用之。以下是两种实现方式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)object {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data in object) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;String&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseString:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseNumber:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Array&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseArray:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseObjectDynamic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)object {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data in object) {
&lt;&#x2F;span&gt;&lt;span&gt;    	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;parse&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, [data type]]) withObject:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aString {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aNumber {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aArray {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可一看到，你可以把 7 行带 if 的代码变成 1 行。将来如果有新的类型，只需增加实现方法即可，而不用再去添加新的 else if。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;method-swizzling&quot;&gt;Method Swizzling&lt;&#x2F;h2&gt;
&lt;p&gt;之前我们讲过，方法由两个部分组成。Selector 相当于一个方法的 id；IMP 是方法的实现。这样分开的一个便利之处是 selector 和 IMP 之间的对应关系可以被改变。比如一个 IMP 可以有多个 selectors 指向它。&lt;&#x2F;p&gt;
&lt;p&gt;而 Method Swizzling 可以交换两个方法的实现。或许你会问“什么情况下会需要这个呢？”。我们先来看下 Objective-C 中，两种扩展 class 的途径。首先是 subclassing。你可以重写某个方法，调用父类的实现，这也意味着你必须使用这个 subclass 的实例，但如果继承了某个 Cocoa class，而 Cocoa 又返回了原先的 class(比如 NSArray)。这种情况下，你会想添加一个方法到 NSArray，也就是使用 Category。99%的情况下这是 OK 的，但如果你重写了某个方法，就没有机会再调用原先的实现了。&lt;&#x2F;p&gt;
&lt;p&gt;Method Swizzling 可以搞定这个问题。你可以重写某个方法而不用继承，同时还可以调用原先的实现。通常的做法是在 category 中添加一个方法(当然也可以是一个全新的 class)。可以通过&lt;code&gt;method_exchangeImplementations&lt;&#x2F;code&gt;这个运行时方法来交换实现。来看一个 demo，这个 demo 演示了如何重写&lt;code&gt;addObject:&lt;&#x2F;code&gt;方法来纪录每一个新添加的对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;NSMutableArray (LoggingAddObject)
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;aObject&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;NSMutableArray (LoggingAddObject)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Method addobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(addObject:))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Method logAddobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(logAddObject:))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_exchangeImplementations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(addObject, logAddObject)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;aobject &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:aObject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Added object &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; to array &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, aObject, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们把方法交换放到了&lt;code&gt;load&lt;&#x2F;code&gt;中，这个方法只会被调用一次，而且是运行时载入。如果指向临时用一下，可以放到别的地方。注意到一个很明显的递归调用&lt;code&gt;logAddObject:&lt;&#x2F;code&gt;。这也是 Method Swizzling 容易把我们搞混的地方，因为我们已经交换了方法的实现，所以其实调用的是&lt;code&gt;addObject:&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;pilky.me&#x2F;static&#x2F;blogmedia&#x2F;objcdynamictips_methodswizzling.png&quot; alt=&quot;Method Swizzling&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dong-tai-ji-cheng-jiao-huan&quot;&gt;动态继承、交换&lt;&#x2F;h2&gt;
&lt;p&gt;我们可以在运行时创建新的 class，这个特性用得不多，但其实它还是很强大的。你能通过它创建新的子类，并添加新的方法。&lt;&#x2F;p&gt;
&lt;p&gt;但这样的一个子类有什么用呢？别忘了 Objective-C 的一个关键点：object 内部有一个叫做&lt;code&gt;isa&lt;&#x2F;code&gt;的变量指向它的 class。这个变量可以被改变，而不需要重新创建。然后就可以添加新的 ivar 和方法了。可以通过以下命令来修改一个 object 的 class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_setClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(myObject, [MySubclass class])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这可以用在 Key Value Observing。当你开始 observing an object 时，Cocoa 会创建这个 object 的 class 的 subclass，然后将这个 object 的 isa 指向新创建的 subclass。点击&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;pyblog&#x2F;friday-qa-2009-01-23.html&quot;&gt;这里&lt;&#x2F;a&gt;查看更详细的解释。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dong-tai-fang-fa-chu-li&quot;&gt;动态方法处理&lt;&#x2F;h2&gt;
&lt;p&gt;目前为止，我们讨论了方法交换，以及已有方法的处理。那么当你发送了一个 object 无法处理的消息时会发生什么呢？很明显，&amp;quot;it breaks&amp;quot;。大多数情况下确实如此，但 Cocoa 和 runtime 也提供了一些应对方法。&lt;&#x2F;p&gt;
&lt;p&gt;首先是&lt;strong&gt;动态方法处理&lt;&#x2F;strong&gt;。通常来说，处理一个方法，运行时寻找匹配的 selector 然后执行之。有时，你只想在运行时才创建某个方法，比如有些信息只有在运行时才能得到。要实现这个效果，你需要重写&lt;code&gt;+resolveInstanceMethod:&lt;&#x2F;code&gt; 和&#x2F;或 &lt;code&gt;+resolveClassMethod:&lt;&#x2F;code&gt;。如果确实增加了一个方法，记得返回 YES。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)resolveInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)aSelector {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(aSelector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myDynamicMethod&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_addMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aSelector, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)myDynamicIMP, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;v@:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resolveInstanceMethod:aSelector&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那 Cocoa 在什么场景下会使用这些方法呢？Core Data 用得很多。NSManagedObjects 有许多在运行时添加的属性用来处理 get&#x2F;set 属性和关系。那如果 Model 在运行时被改变了呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-xi-zhuan-fa&quot;&gt;消息转发&lt;&#x2F;h2&gt;
&lt;p&gt;如果 resolve method 返回 NO，运行时就进入下一步骤：消息转发。有两种常见用例。1) 将消息转发到另一个可以处理该消息的 object。2) 将多个消息转发到同一个方法。&lt;&#x2F;p&gt;
&lt;p&gt;消息转发分两步。首先，运行时调用&lt;code&gt;-forwardingTargetForSelector:&lt;&#x2F;code&gt;，如果只是想把消息发送到另一个 object，那么就使用这个方法，因为更高效。如果想要修改消息，那么就要使用&lt;code&gt;-forwardInvocation:&lt;&#x2F;code&gt;，运行时将消息打包成 NSInvocation，然后返回给你处理。处理完之后，调用&lt;code&gt;invokeWithTarget:&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Cocoa 有几处地方用到了消息转发，主要的两个地方是代理(Proxies)和响应链(Responder Chain)。NSProxy 是一个轻量级的 class，它的作用就是转发消息到另一个 object。如果想要惰性加载 object 的某个属性会很有用。NSUndoManager 也有用到，不过是截取消息，之后再执行，而不是转发到其他的地方。&lt;&#x2F;p&gt;
&lt;p&gt;响应链是关于 Cocoa 如何处理与发送事件与行为到对应的对象。比如说，使用 Cmd+C 执行了 copy 命令，会发送&lt;code&gt;-copy:&lt;&#x2F;code&gt;到响应链。首先是 First Responder，通常是当前的 UI。如果没有处理该消息，则转发到下一个&lt;code&gt;-nextResponder&lt;&#x2F;code&gt;。这么一直下去直到找到能够处理该消息的 object，或者没有找到，报错。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-block-zuo-wei-method-imp&quot;&gt;使用 Block 作为 Method IMP&lt;&#x2F;h2&gt;
&lt;p&gt;iOS 4.3 带来了很多新的 runtime 方法。除了对 properties 和 protocols 的加强，还带来一组新的以 imp 开头的方法。通常一个 IMP 是一个指向方法实现的指针，头两个参数为 object(self)和 selector(_cmd)。iOS 4.0 和 Mac OS X 10.6 带来了 block，&lt;code&gt;imp_implementationWithBlock()&lt;&#x2F;code&gt; 能让我们使用 block 作为 IMP，下面这个代码片段展示了如何使用 block 来添加新的方法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span&gt; myIMP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;imp_implementationWithBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_self, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;string) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, string);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_addMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([MYclass class], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(sayHello:), myIMP, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;v@:@&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果想知道这是如何实现的，可以查看&lt;a href=&quot;http:&#x2F;&#x2F;www.friday.com&#x2F;bbum&#x2F;2011&#x2F;03&#x2F;17&#x2F;ios-4-3-imp_implementationwithblock&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，Objective-C 表面看起来挺简单，但还是很灵活的，可以带来很多可能性。动态语言的优势在于在不扩展语言本身的情况下做很多很灵巧的事情。比如 Key Value Observing，提供了优雅的 API 可以与已有的代码无缝结合，而不需要新增语言级别的特性。&lt;&#x2F;p&gt;
&lt;p&gt;希望这篇文章能让你更深入地了解 Objective-C，在开发 app 时也能开阔思路，考虑更多的可能性。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReactiveCocoa与Functional Reactive Programming</title>
            <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/frp-reactivecocoa/</link>
            <guid>https://limboy.me/posts/frp-reactivecocoa/</guid>
            <description>&lt;h2 id=&quot;shi-yao-shi-functional-reactive-programming&quot;&gt;什么是 Functional Reactive Programming&lt;&#x2F;h2&gt;
&lt;p&gt;Functional Reactive Programming(以下简称 FRP)是一种响应变化的编程范式。先来看一小段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; c is 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; now what is the value of c?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果使用 FRP，&lt;code&gt;c&lt;&#x2F;code&gt;的值将会随着&lt;code&gt;b&lt;&#x2F;code&gt;的值改变而改变，所以叫做「响应式编程」。比较直观的例子就是 Excel，当改变某一个单元格的内容时，该单元格相关的计算结果也会随之改变。&lt;&#x2F;p&gt;
&lt;p&gt;FRP 提供了一种信号机制来实现这样的效果，通过信号来记录值的变化。信号可以被叠加、分割或合并。通过对信号的组合，就不需要去监听某个值或事件。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_demo.png&quot;
        width=&quot;706&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这在重交互的应用里是非常有用的。以注册为例：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_register_demo.png&quot;
        width=&quot;396&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;提交按钮的状态要跟输入框的状态绑定，比如必选的输入框没有填完时，提交按钮是灰色的，也就是不可点；如果提交按钮不可点，那么文字变成灰色，不然变成蓝色；如果正在提交，那么输入框的文字颜色变成灰色，且不可点，不然变成默认色且可点；如果注册成功就在状态栏显示成功信息，不然显示错误信息，等等。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到光是注册页就有这么多的联动，在 javascript 中可以采用事件监听来处理，iOS 中更多的是 delegate 模式，本质上都是事件的分发和响应。这种做法的缺点是不够直观，尤其在逻辑比较复杂的情况下。这也是为什么尽管 nodejs 很高效，但由于 javascript 的 callback style 和异步模式不符合正常的编程习惯，让很多人望而却步。&lt;&#x2F;p&gt;
&lt;p&gt;使用 FRP 主要有两个好处：直观和灵活。直观的代码容易编写、阅读和维护，灵活的特性便于应对变态的需求。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reactivecocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;a&gt;是 github 去年开源的一个项目，是在 iOS 平台上对 FRP 的实现。FRP 的核心是信号，信号在 ReactiveCocoa(以下简称 RAC)中是通过&lt;code&gt;RACSignal&lt;&#x2F;code&gt;来表示的，信号是数据流，可以被绑定和传递。&lt;&#x2F;p&gt;
&lt;p&gt;可以把信号想象成水龙头，只不过里面不是水，而是玻璃球(value)，直径跟水管的内径一样，这样就能保证玻璃球是依次排列，不会出现并排的情况(数据都是线性处理的，不会出现并发情况)。水龙头的开关默认是关的，除非有了接收方(subscriber)，才会打开。这样只要有新的玻璃球进来，就会自动传送给接收方。可以在水龙头上加一个过滤嘴(filter)，不符合的不让通过，也可以加一个改动装置，把球改变成符合自己的需求(map)。也可以把多个水龙头合并成一个新的水龙头(combineLatest:reduce:)，这样只要其中的一个水龙头有玻璃球出来，这个新合并的水龙头就会得到这个球。&lt;&#x2F;p&gt;
&lt;p&gt;下面通过一个简单的 demo 来演示这个模型。&lt;&#x2F;p&gt;
&lt;p&gt;假如对象的某个属性想绑定某个消息，可以使用&lt;code&gt;RAC&lt;&#x2F;code&gt;这个宏，相当于给玻璃球套了一个水龙头。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;submitButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, enabled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;combineLatest:@[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usernameField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;passwordField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] reduce:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;userName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;password) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @(userName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，如果用户名和密码框的长度都超过 6，提交按钮就 enable 了。反之，如果没符合要求，就会处于非开启状态。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到&lt;code&gt;usernameField&lt;&#x2F;code&gt;有了一个新的属性&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;，这是 RAC 在&lt;code&gt;UITextField&lt;&#x2F;code&gt;category 中添加的，直接用即可。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_combine.png&quot;
        width=&quot;407&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;rac-de-da-tong-yi&quot;&gt;RAC 的大统一&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 统一了对 KVO、UI Event、Network request、Async work 的处理，因为它们本质上都是值的变化(Values over time)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kvo&quot;&gt;KVO&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 可以用来监测属性的改变，这点跟 KVO 很像，不过使用了 block，而不是&lt;code&gt;-observeValueForKeyPath:ofObject:change:context:&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACAble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来是不是比 KVO 舒服多了。比 KVO 更加强大的是信号可以被链起来(chain)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 只有当名字以&amp;#39;j&amp;#39;开头，才会被记录
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACAble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[newName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hasPrefix:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;j&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;   }]
&lt;&#x2F;span&gt;&lt;span&gt;   subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;   }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ui-event&quot;&gt;UI Event&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 还为系统 UI 提供了很多 category，来方便消息的创建和传递，比如按钮被点击或文本框有改动等等，上面的例子中&lt;code&gt;self.firstNameField.rac_textSignal&lt;&#x2F;code&gt;，在对应的文本框有改动时，会自动向数据流中添加新的数据，绑定该消息的其他消息就会收到新的数据，如果有 subscriber 的话，会自动触发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;network-request-async-work&quot;&gt;Network Request &amp;amp;&amp;amp; Async work&lt;&#x2F;h3&gt;
&lt;p&gt;这些可以通过自定义信号，也就是&lt;code&gt;RACSubject&lt;&#x2F;code&gt;(继承自&lt;code&gt;RACSignal&lt;&#x2F;code&gt;，可以理解为自由度更高的 signal)来搞定。比如一个异步网络操作，可以返回一个 subject，然后将这个 subject 绑定到一个 subscriber 或另一个信号。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)doTest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;doRequest&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;value){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;value:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)doRequest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 模拟2秒后得到请求内容
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 只触发1次
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 尽管subscribeNext什么也没做，但如果没有的话map是不会执行的
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; subscribeNext就是定义了一个接收体
&lt;&#x2F;span&gt;&lt;span&gt;    [[[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the value is from url request
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;content fetched from web&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendNext:value&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_){}];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; subject;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;简单画了下关系图，罗列了些要点&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_ReactiveCocoa_large.png&quot;
        width=&quot;1632&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面只是大概说了一下 RAC 的使用情景和用法，更多的例子可以到&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;项目主页&lt;&#x2F;a&gt;中查看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.teehanlax.com&#x2F;blog&#x2F;getting-started-with-reactivecocoa&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.teehanlax.com&#x2F;blog&#x2F;getting-started-with-reactivecocoa&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;andrewsardone&#x2F;reactivecocoa-at-mobidevday-2013&quot;&gt;https:&#x2F;&#x2F;speakerdeck.com&#x2F;andrewsardone&#x2F;reactivecocoa-at-mobidevday-2013&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说iOS的多线程Core Data</title>
            <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-multi-thread-core-data/</link>
            <guid>https://limboy.me/posts/ios-multi-thread-core-data/</guid>
            <description>&lt;p&gt;Core Data 是 iOS 中很重要的一个部分，可以理解为基于 SQLite(当然也可以是其他的 Storage，如 In-memory，只是 SQLite 比较常见)的一个 ORM 实现，所以有关系数据库的特性，又不用写 SQL。顺便吐一下槽，官方说法是使用 Core Data 能减少 50%-70%的代码量，但相信用过的人应该都心里明白，Core Data 使用起来还是比较麻烦的，这也是为什么有不少的第三方类库来代替&#x2F;二次包装 Core Data。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂的应用就有可能出现同时处理多份数据的情况，这就需要用到多线程 Core Data。在 iOS 5 之前，官方推荐的是使用「Thread Confinement」，就是每个线程使用独立的 MOC(managed object context)，然后共享一个 PSC(persistent store coordinator)。同时在线程之间传递数据时，要传递 objectID，而不是 object，因为前者是线程安全的，后者不是。&lt;&#x2F;p&gt;
&lt;p&gt;如果 A 线程里，对 PSC 执行了 CUD(create, update, delete)操作，其他线程如何感知呢？这就需要通过监听事件来实现。比如在线程 A 中监听「NSManagedObjectContextDidSaveNotification」事件，如果线程 B 中执行了 CUD 操作，线程 A 就能感知到，并触发响应的 action，虽然可以通过 noti userinfo 来获取 managed objects，但因为它们是关联到另一个 MOC，所以无法直接操作它们，解决方法就是调用「mergeChangesFromContextDidSaveNotification:」方法。&lt;&#x2F;p&gt;
&lt;p&gt;用一张图来形容的话，大体就是这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data.png&quot;
        width=&quot;510&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_setupCoreDataStack
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup managed object model
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] URLForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; withExtension&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;momd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithContentsOfURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;modelURL];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup persistent store coordinator
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;storeURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fileURLWithPath:[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cachesPath] stringByAppendingPathComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database.db&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     _persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSPersistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithManagedObjectModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;_managedObjectModel];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[_persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addPersistentStoreWithType:NSSQLiteStoreType configuration:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URL:storeURL options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;amp;error&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;   	     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; handle error
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create MOC
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;     [_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPersistentStoreCoordinator:_persistentStoreCoordinator&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; subscribe to change notifications
&lt;&#x2F;span&gt;&lt;span&gt;     [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_mocDidSaveNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSManagedObjectContextDidSaveNotification object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来看看 Notification Handler，主要作用就是合并新的变化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_mocDidSaveNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)notification
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;savedContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[notification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ignore change notifications for the main MOC
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; savedContext) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      [_managedObjectContext mergeChangesFromContextDidSaveNotification:notification];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式实现起来和维护起来都有点麻烦，所以 iOS 5 中就出现了更加方便和灵活的实现，也就是「Nested MOC」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConcurrencyType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSMainQueueConcurrencyType];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在初始化时可以选择 ConcurrencyType，可选的有 3 个：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsconfinementconcurrencytype&quot;&gt;NSConfinementConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;这个是默认项，每个线程一个独立的 Context，主要是为了兼容之前的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsprivatequeueconcurrencytype&quot;&gt;NSPrivateQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 private queue(使用 GCD)，这样就不会阻塞主线程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsmainqueueconcurrencytype&quot;&gt;NSMainQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 main queue，使用主线程，会阻塞。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个重要的变化是 MOC 可以指定 parent。有了 parent 后，CUD 操作会冒泡到 parent。一个 parent 可以有多个 child。parent 还可以有 parent。&lt;&#x2F;p&gt;
&lt;p&gt;因为 UI 相关的数据必须在主线程获取，同时又要避免数据库的 I&#x2F;O 操作阻塞主线程，所以就有了下面这个模型：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data_nested.png&quot;
        width=&quot;511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我对这种实现方式的一个困惑是：child 无法得知 parent 的变化，也就是说，如果 NSFetchedResultsController 绑定了 Main MOC，当 Background Write MOC save 时，NSFetchedResultsController 为何能知晓？求指点。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式比「Thread Confinement」稍微简单了点，也更明了。不过个人还是推荐使用 MagicalRecord，因为实现起来更加简单，等有空再写一篇。&lt;&#x2F;p&gt;
&lt;p&gt;写了一个使用了这个模型的 demo，配合 TableView 和 NSFetchedResultsController，有兴趣的可以看下：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2013-06-17-geng-xin&quot;&gt;2013&#x2F;06&#x2F;17 更新&lt;&#x2F;h3&gt;
&lt;p&gt;之前的困惑已消除，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;跟 PSC 无关，只要绑定的 MOC 有了&lt;code&gt;save&lt;&#x2F;code&gt;动作，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;就会收到通知，无论这个&lt;code&gt;save&lt;&#x2F;code&gt;操作有没有写入到持久层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&quot;&gt;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>简单说说iOS的图形和动画</title>
            <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-graphic-animation/</link>
            <guid>https://limboy.me/posts/ios-graphic-animation/</guid>
            <description>&lt;h3 id=&quot;core-graphics&quot;&gt;Core Graphics&lt;&#x2F;h3&gt;
&lt;p&gt;Core Graphics 是一组用来绘制 2D 图形的 API，使用 CPU 进行计算。 新建一个项目时，模板已经自动载入了 CoreGraphics.framwork。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-animation&quot;&gt;Core Animation&lt;&#x2F;h3&gt;
&lt;p&gt;Core Animation 包含于 QuartzCore.framwork 中，是一组自由度更大的图形绘制和动画 API，但实现起来也会比 Core Graphics 麻烦一点。iOS 上的 UIKit 和动画效果大部分都是通过 Core Animation 实现的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-image&quot;&gt;Core Image&lt;&#x2F;h3&gt;
&lt;p&gt;Core Image 是一组用于图像、视频处理的 API，如添加滤镜之类的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;opengl-opengl-es&quot;&gt;OpenGL &#x2F; OpenGL ES&lt;&#x2F;h3&gt;
&lt;p&gt;底层的图形绘制 API，自由度最大，但学习成本也很高。如果不是做大型游戏，推荐使用更高层的 API。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-jian-jia-su&quot;&gt;硬件加速&lt;&#x2F;h3&gt;
&lt;p&gt;硬件加速是指用到了 GPU 的 API，以下这些情况不会用到硬件加速&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有在 drawRect 中完成的图形绘制。&lt;&#x2F;li&gt;
&lt;li&gt;shouldRasterize 属性为 YES 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;用到了 mask 或 drop shadow 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;Text (包括 UILabels, CATextLayers, Core Text, 等等)。&lt;&#x2F;li&gt;
&lt;li&gt;使用 CGContexts 绘制的图形&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;core-animation-1&quot;&gt;Core Animation&lt;&#x2F;h2&gt;
&lt;p&gt;虽然是 Animation，但实际上它也干 Drawing 的活，这就需要 CALayer 的帮助。iOS 中，所有的 UIView 都自带了一个 CALayer（可以通过 UIView.layer 访问），UIView 的渲染和动画最终也是通过 layer 来实现的。从这个意义上说，UIView 就是简单的一层壳，把图形绘制需要的信息传递给 layer。当然 UIView 还有一个重要的功能就是处理事件，如点击按钮，滑动等等。&lt;&#x2F;p&gt;
&lt;p&gt;事实上 layer 也是一层壳(Model Tree)，背后还有呈现树(Presenting Tree)和渲染树(Render Tree)，渲染树对呈现树的数据进行渲染。&lt;&#x2F;p&gt;
&lt;p&gt;跟 view 一样，layer 也存在着一个树状结构。可以直接创建，或通过 view.layer 获取。&lt;&#x2F;p&gt;
&lt;p&gt;layer 有很多的动画属性，如 anchorPoint(view 没有这个属性)、frame、transform 等等，详细的属性列表&lt;a href=&quot;http:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;#documentation&#x2F;Cocoa&#x2F;Conceptual&#x2F;CoreAnimation_guide&#x2F;AnimatableProperties&#x2F;AnimatableProperties.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40004514-CH11-SW1&quot;&gt;见此&lt;&#x2F;a&gt;。配合 Core Animation 的 API 可以实现很多 UIView Animation 无法实现的效果，比如 3D 动画。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uiview-animation&quot;&gt;UIView Animation&lt;&#x2F;h2&gt;
&lt;p&gt;这个是我们经常会用到的，它对 Core Animation 做了更高层的封装，方便使用，当然自由度也降低了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)animateWithDuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)duration delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)delay options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIViewAnimationOptions)options animations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;))animations completion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; finished))completion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;animation block 里可以设置 view 的动画属性的终止值，如 frame, rotation 等。options 可以设置动画的相关选项，如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionLayoutSubviews            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowUserInteraction      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionBeginFromCurrentState     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionRepeat                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAutoreverse               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedCurve    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowAnimatedContent      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionShowHideTransitionViews   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseInOut            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseIn               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseOut              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveLinear               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionNone            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromLeft    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromRight   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlUp          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlDown        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCrossDissolve   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromTop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromBottom  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger &lt;&#x2F;span&gt;&lt;span&gt;UIViewAnimationOptions;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以一般的动画 view animation 都可以应付。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tableview-you-hua&quot;&gt;TableView 优化&lt;&#x2F;h2&gt;
&lt;p&gt;TableView 是 iOS 中非常重要的组成部分，如果处理不当，就很容易出现不流畅的现象。比如一个 TableViewCell 中有多个 subview。上面说过一个 view 对应了一个 layer，多个 view 自然也就对应多个 layer，好比 photoshop 的图层。滑动时 GPU 需要分别对每一个 layer 进行处理，如果不能在短时间内完成，就容易掉帧。&lt;&#x2F;p&gt;
&lt;p&gt;要保证 TableView 的流畅，首先 TableViewCell 的生成时间要短（少于 1&#x2F;60 秒），其次移动时帧频尽量保持在 60（也就是每秒 60 帧）。前者取决于 CPU，后者取决于 GPU。&lt;&#x2F;p&gt;
&lt;p&gt;以 twitter 为例，可以通过 subviews 来实现，不过性能会有点影响，但实现起来简单。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_subviews.jpg&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为 cell 在形态上不会经常改变，所以也可以通过 drawRect 直接绘制，只要这个时间足够短就可以。好处是 layer 不用处理多个子 layer 的组合和叠加，就像一张 jpg 图片一样，滑动会更流畅。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_drawrect.png&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&quot;&gt;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&quot;&gt;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&quot;&gt;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&quot;&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&quot;&gt;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&quot;&gt;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;floriankugler.com&#x2F;blog&#x2F;2013&#x2F;5&#x2F;24&#x2F;layer-trees-vs-flat-drawing-graphics-performance-across-ios-device-generations&quot;&gt;layer trees vs flat drawing graphics performance across ios device generations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说Core Foundation</title>
            <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/core-foundation/</link>
            <guid>https://limboy.me/posts/core-foundation/</guid>
            <description>&lt;p&gt;先来说说「Core Foundation」（以下简称 CF）的历史吧。当年乔布斯被自己创办的公司驱逐后，成立了「NeXT Computer」,其实做的还是老本行：卖电脑，但依旧不景气。好在 NeXTSTEP 系统表现还不错，亏损不至于太严重。正好此时苹果的市场份额大跌，急需一个新的操作系统，结果大家都知道了，乔布斯借此收购，重新回到了苹果。&lt;&#x2F;p&gt;
&lt;p&gt;这里就牵扯到了一个问题，如何让旧有的系统（Mac OS 9）和 NeXTSTEP 合成为一个新系统？这就需要一个更为底层的核心库可以供 Mac Toolbox 和 OPENSTEP 双方调用。CF 就这么诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;CF 是由 C 语言实现的，而不是 Objective-C，所以如果用到了 CF，就需要手动管理内存，ARC 是无能为力的。当然因为 CF 和 Foundation 之间的友好关系，它们之间的管理权也是可以移交的，这个后面再说。&lt;&#x2F;p&gt;
&lt;p&gt;CF 提供了基础功能，如 CFString,CFDate,CFNumber 等等，以 CFString 为例，CFString 和 NSString 之间是什么关系？NSString 其实是一个「类簇」，也就是抽象接口，所以 String Objects 并不是 NSString 实例，而是实现了 NSString 方法的私有类的实例，也就是 CFString。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromClass&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Some Class&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; class]));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# output __NSCFConstantString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时 NSStrings 和 CFStrings 之间可以自由转换，也就是「toll free bridging」。比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(CFStringRef)aNSString;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为编译器无法自动管理 CF 的内存，所以 CF 对象在使用完后，需要手动释放（CFRelease）。如果使用 ARC 来管理内存，苹果提供了 3 种方法来处理：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge&quot;&gt;__bridge&lt;&#x2F;h3&gt;
&lt;p&gt;__bridge 只是在 CF 和 OC 之间传递指针，其他的事啥也没干，所以转换成 CF 时，还是要手动释放内存。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFStringCreateWithCString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kCFStringEncodingASCII&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(__bridge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)aNSString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFRelease&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aCFString)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bridge-retained&quot;&gt;__bridge_retained&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_retained&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRetain()&lt;&#x2F;code&gt;，将 Objective-C 对象转换为 Core Foundation 对象，把对象所有权桥接给 Core Foundation 对象，同时剥夺 ARC 的管理权，后续需要开发者使用 CFRelease 或者相关方法手动来释放对象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge-transfer&quot;&gt;__bridge_transfer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_transfer&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRelease()&lt;&#x2F;code&gt; 将非 Objective-C 对象转换为 Objective-C 对象，同时将对象的管理权交给 ARC，开发者无需手动管理内存。&lt;&#x2F;p&gt;
&lt;p&gt;最后，因为 CF 是用 C 实现的，且处于下层，所以执行速度上会比 Foundation 稍微快一点，不过也就是一点点，几乎察觉不到。相比 Foundation 带来的 ARC 内存管理和更多的 API，开发上的效率会大幅提升，所以还是尽量多的使用 OC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&quot;&gt;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&quot;&gt;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>生活的乐趣</title>
            <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/enjoy-life/</link>
            <guid>https://limboy.me/posts/enjoy-life/</guid>
            <description>&lt;p&gt;对生活的乐趣，每个人都有自己不同的理解。有些人觉得隔三差五能吃上好吃的就很满足了；有些人觉得年薪能上 40 万就好了；有些人觉得有钱之后能去各个国家逛一逛会是很幸福的事。&lt;&#x2F;p&gt;
&lt;p&gt;这很好，不管这个目标能不能实现，至少还有希望。但是很多情况下这些目标并不会给生活带来多大的快乐，相反还因为无法在短时间内达成，而产生落差，渐渐地被生活的琐事包围，也就自然淡忘了。&lt;&#x2F;p&gt;
&lt;p&gt;生活有自己的轨道，如果你不知道往哪儿走，就会被生活推着前进。而生活替你选择的这条路，往往不是你最想走的路。于是各种各样的矛盾就开始出现，你总觉得这不是自己想要的生活，但自己想要的生活是什么却并不清楚，或者太过遥远。于是抱怨、嫉妒等等负面情绪就开始出现了。&lt;&#x2F;p&gt;
&lt;p&gt;无论是喜是悲，自己的生活只能由自己负责。路边的皮球，路人爱踢上两脚。但没有人会对行驶中的汽车下脚。&lt;&#x2F;p&gt;
&lt;p&gt;有一句话叫「找到你所爱」，相信都听过。那一瞬间可能有种被击中的感觉，过了几天，该干啥还是干啥。事实上，我觉得这句话还有一定的副作用。在进入某个领域后，如果要继续深入下去，就会遇到更多更难以应付的问题，这时兴趣已经完全失去了作用，我们需要一个支撑下去的信念。如果没有这么一个信念，是很容易中途放弃的。理由也很简单：我在这个领域没有天赋，或者天赋不够，这不是我所爱的，要不去其他的领域试试？或者，我的能力也只能到这了，很难再深入下去了。在舒适区待的时间一长，生活就会开始变腻。&lt;&#x2F;p&gt;
&lt;p&gt;那如何才能让生活变得更加美好呢？我想从游戏的角度来看待这个问题。一些好的游戏能让我们玩上好几天甚至好几个月，其中必定有些东西抓住了我们，或者说很好的利用了我们作为人的特性。小时候经常听大人说，如果你能把玩游戏的心思放一半到学习上就好了。为什么那时候我们不爱学习？因为学习太枯燥了，老师也不会因为我们学会了某个公式或某个字而表扬我们。而游戏不一样，如果在游戏中，通过自己的努力解决了一些问题，马上就会有奖励，可能是一句话、或者金币、或者加命、或者可以进入下一关等等。我们享受这个过程。游戏的形式多种多样，小的如「扫雷」，大的如「魔兽世界」，其本质都是「解决问题」。那为什么我们享受解决游戏中的问题，而对生活中的问题却没有那么大的热情呢？&lt;&#x2F;p&gt;
&lt;p&gt;生活中的问题，往往是隐式的，不仔细观察，甚至都意识不到它的存在。等到意识到时，也有的选择。除非是那种特别重要和紧急的，需要我们无论如何都得解决。其他无足轻重的，不去解决也不会有什么问题。人的本性是懒的，如果一件事情，做也可以不做也可以，那何必让自己操那份心，受那份罪呢？&lt;&#x2F;p&gt;
&lt;p&gt;那如果真的把生活当作游戏呢？没有可解决的问题？仔细找，肯定会有不少，先从自己比较有信心搞定的入手，慢慢地积累这种自信和能力。比如想让自己养成经常看书的习惯，不要一开始就拿出又厚又难啃的专业书，先从轻松一点的小说入手，克服对书的恐惧感。然后再找薄一点的，比较容易理解的专业书。再慢慢地从深度和广度去扩展。千万不要操之过急。好比在过了第 1 关后，直接就跳到第 10 关。把它当成一生的习惯，就不会嫌这个过程太长了。&lt;&#x2F;p&gt;
&lt;p&gt;所以「享受解决问题的乐趣」可能比「找到你所爱」对生活更有帮助。女朋友生气了，会很自然地想办法让她高兴起来，因为意识到这是个问题，必须要解决。那有没有意识到自己的专业能力不够是个问题？人缘不好也是个问题？可以用 50 行代码搞定的，写了 100 行也是个问题？如果找到了一个自己经常遇到但又被忽略的问题，把它解决了，其实也就解决了一群人的问题。如果这群人的基数够大的话，把心思都放在这个问题上，创业就自然形成了。&lt;&#x2F;p&gt;
&lt;p&gt;黑客有一句名言：这个世界充满了迷人的问题。好比进入某个房间里，看到沙发上有一张 5 块钱的纸币，你走过去，拿到了，很开心。然后大概看了一圈，没有了， 就不知道该干什么了。但其实很多的钱藏在柜子后、地板下、缝隙里，如果不仔细找，就不会发现这些宝藏。这个房间就好比某个领域，隐藏的钱，就好比没有被发现，或者没有被很好解决的问题。最好的情况是这个房间够大，藏的钱够多，且进来的人不多。这样的房间毕竟不多，更常见的是房间很大，人也很多，只要能做得比这些人好，就能挣到更多的钱。如果这个房间人不多，但钱也不多，但竞争压力小，只要用心找，把隐藏的钱都搜刮出来也足够让你的生活变得非常美好。&lt;&#x2F;p&gt;
&lt;p&gt;不要让「我的天赋不在这」，成为平庸的借口。想想你有没有什么游戏玩得特别好，是如何做到的？是不断解决问题带来的乐趣和信心，将我们带领到了更远的前方。那些天赋好点的，一次过，不那么好的，多玩几次也就过了。&lt;&#x2F;p&gt;
&lt;p&gt;观察、勤思、探索，这些都能帮助你更好地发现问题、解决问题。费曼说过：一切事情都可以很有意思。这跟佛语所说的：一花一世界、一沙一天堂有异曲同工之妙。背出 32 种月季的名称没有任何意义，去探索为什么会有这么多种月季、是什么原因导致了它会长成这样不是更有意思吗？这种刨根问底的精神对于解决其他问题也是很有帮助的。&lt;&#x2F;p&gt;
&lt;p&gt;要解决的问题并不局限于自己所处的领域，生活中的各种问题也在此列。如果你有很强的解决问题的能力，就会被更多的人需要，而人的本性里很重要的一条是：渴望具有重要性。很好的匹配上了。&lt;&#x2F;p&gt;
&lt;p&gt;老天不会给你你处理不了的问题。所以如果真的享受问题，享受解决问题，那还有什么可操心的呢？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>职业规划是不靠谱的</title>
            <pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/career-planning/</link>
            <guid>https://limboy.me/posts/career-planning/</guid>
            <description>&lt;p&gt;经常会在各种场合听到人们问起：你的职业规划是什么？有些人很快就能给出答案，有些人临时想了一个，有些人则坦然没有想好。&lt;&#x2F;p&gt;
&lt;p&gt;职业规划到底是个什么东西？以程序员来说，架构师、技术总监、CTO 等等看起来很风光的 Title 都会是不错的候选，让自己看起来很有抱负的样子。&lt;&#x2F;p&gt;
&lt;p&gt;可这一点用都没有！甚至还有负作用！假如每天怀揣着成为架构师的目标去工作去学习，我敢保证，不出一个礼拜就会被这个目标拖垮，因为这实在是没有什么激励作用，是扎扎实实的负反馈。感觉今天学到了不少东西，可是一看架构师要懂那么多，那么深，就会觉得自己的这些收获好渺小。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会说，这是大目标，会拆分成很多的小目标。这个理论没有错，但实现上会有不少问题。因为这是一个探索的过程，就好像一个从来没出过远门的南方人，在没有地图的情况下要走到北方的某个城市去。只是知道大概的方向，这种情况下如何设置小目标呢？即使有了地图，能不能把小目标设置地合理也是很大地挑战。这也是为什么有专门的「关卡设计师」这个职位。如果小目标设置得不合理，要么产生挫败感，要么觉得没挑战，这两种情绪对于长远地目标来说都是很不利的。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要的是「浸入式」的体验，这个词对于游戏设计师是很重要的。为什么有些游戏我们能玩上上百关，还乐此不疲？不是因为在最开始的时候，告诉自己「我一定要玩到 100 关！」，而是渐进的难度设置让你在每一关完成后都有成就感。在玩第 19 关时，你断然不会想「真好，离 100 关又进了 1 步」。&lt;&#x2F;p&gt;
&lt;p&gt;游戏和生活很多地方是相通的。为什么有些人从事了某项职业 10 年还不如别人 3 年成就更高，道理也一样。因为在玩到某一关后，他停止了向难度更大的下一关迈进，反复玩着同一关，自然不会有进步。所以用「工龄」去判断一个人的能力是很容易失误的。&lt;&#x2F;p&gt;
&lt;p&gt;我们希望自己变得强大，这没有问题。希望自己变得像 XXX 一样，这也没有问题，有希望总是好的嘛。但如果把 XXX（高级 Title）作为自己的职业目标，就有些问题了。你不一定知道怎样才能成为 XXX，也就是说没有一条明确的道路，即使有，也未必适合你，即使你已做好了充分的准备，也难保在行进的过程中不受其他事物的诱惑，或者发现自己并不喜欢这条路。很可能你只是看到了 XXX 光鲜的一面，然后天真地以为自己只要努力也一定能做到，直到被现实虐得体无完肤。&lt;&#x2F;p&gt;
&lt;p&gt;每一行都不容易，这是很简单就可以推导出来的，假设确实有那么几个行业很容易，也很挣钱，除非正好被你赶上了，不然人一多，门槛自然也就上去了。&lt;&#x2F;p&gt;
&lt;p&gt;费曼老师说过：每一件事情都可以很有意思。认清自己的现状，发现自己的不足，享受解决问题的乐趣，在不断的正反馈下慢慢地去拓宽自己的知识圈，增强解决问题的能力。如果有了这种元能力，在每一行都能做得很好，很快乐。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career-planning&amp;#x2F;light.jpg&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>你的袜子还干着吗？</title>
            <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/sock/</link>
            <guid>https://limboy.me/posts/sock/</guid>
            <description>&lt;p&gt;「袜子」这东西，细细想来，跟「梦想」还真有几分相像。你不能时不时地就跟人谈起你的梦想，就像你不会经常撂起裤腿，让人看一下你的袜子一样。但又不能不穿袜子，我们也不能没有梦想。&lt;&#x2F;p&gt;
&lt;p&gt;以前我一直不太明白，那些工作得并不开心的人，为什么不辞职呢？后来想想，大概有这么几个原因： 1) 人有很强的适应性。再好吃的巧克力，天天吃，早晚会腻。同理，第一次吃苦瓜，可能会受不了，吃多了也就那么回事，跟吃黄瓜似的。2）没有更好的机会。可能是猎头提供的职位不够吸引人，或者投了几份简历后没有下文，又因为自己的工作也挺习惯的，也就没有太大的动力去寻觅新的目标，或者为下一份工作做好充足的准备。3）生活上的压力。养车、养房、养家、养孩子，所有这些都需要钱，需要源源不断的现金流。除非已经储备了足够的资金，容许自己歇一歇。&lt;&#x2F;p&gt;
&lt;p&gt;我们免不了在河边走，鞋也已沾上水珠，但是你的袜子还干着吗？我们每天所做的事，跟内心那个小小的梦想有关吗？有一部电视剧叫「中国式离婚」，或许也应该有个名词叫「中国式创业」：瞄准国外那些有苗头的新兴网站&#x2F;app，用最快的速度复制一个出来，然后拉投资，做推广。就像关在动物园里的猩猩一样，管理员扔过来几个香蕉，判断最好最快的，体能也不错的猩猩先抢到，剩余的就在那哀声叹气，等着下次管理员的到来。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会说，国情如此，你又何必大惊小怪。我奇怪的是为什么这么不好意思放到台面上的事情，会有那么多人内心毫无愧疚地争先恐后地投入其中。这其中我相信「榜样」的力量是很重要的。你看那「XXX」不就是直接拷贝国外的那个「XXX」嘛，现在多火，活得多好。这样的例子多了，内心的那道槛也就很自然地跨过去了，你的袜子也就湿了。&lt;&#x2F;p&gt;
&lt;p&gt;如果以这样的方式「创业」成功，就会带着其中的快感和经验，向下一个目标迈进，而绝不会来一个华丽转身说：我有钱了，我要去实现我当初的梦想。因为既然选择了「中国式创业」，基本上说明对金钱有强烈的欲望，而有了钱之后，又会勾出心中更大的欲望。这个时候也就不会关心袜子到底湿没湿，换一双更贵的鞋才是首先要考虑的。&lt;&#x2F;p&gt;
&lt;p&gt;有些人一直想年轻时拼命工作，多挣点钱，然后 35 岁退休，带着家人环游世界，在某个漂亮的城市定居。这是一个美好的愿望，但是基本上此路不通。一旦适应了高强度的生活节奏和呼风唤雨的那种优越感，一下子转变到在自家后院天天晒晒太阳、听听音乐，这种落差是难以调和的。就像一辆法拉利，它享受在路上的那种风驰电掣，让它在车库里慢慢地老化，自己都会觉得残忍。&lt;&#x2F;p&gt;
&lt;p&gt;坚持心中的梦想，即使放在国外也是很难能可贵，在国内更加有种行为艺术的感觉。湿地越来越多，当你看到别人淡定地穿着皮鞋走在水滩上时，为了不弄湿袜子，跳个奇怪的舞步又何妨，如果能带把扫帚把积水扫了就更好了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>开发Once Touch的一些感想和经验小结</title>
            <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/once-touch-conclude/</link>
            <guid>https://limboy.me/posts/once-touch-conclude/</guid>
            <description>&lt;p&gt;Once Touch 是我开发的第一款 iOS 应用，这也延续了我每换一家公司就换一门语言的「优良」传统：ActionScript(时光网)-&amp;gt;PHP(凤凰网)-&amp;gt;Python(知乎)-&amp;gt;Objective-C(Legend33)。希望这次是最后的转型。&lt;&#x2F;p&gt;
&lt;p&gt;简单说说为什么选择 iOS 平台。主要有以下几个原因：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-hu-ji-shu&quot;&gt;用户基数&lt;&#x2F;h3&gt;
&lt;p&gt;iPhone 和 iPad 的总销量都是上亿的规模，所以不用担心会是个小众平台，但你会说 Android 的占有量比 iOS 要高得多，这就引出下一个原因：消费体验和消费习惯&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-fei-ti-yan&quot;&gt;消费体验&lt;&#x2F;h3&gt;
&lt;p&gt;关联信用卡，点击两下按钮，输入密码就能完成了一次购买，简单几步，钱就流到了你的卡里，只要你的 app 足够优秀，足够吸引人。当然了，还要交给老大 30%的地摊费。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-fei-xi-guan&quot;&gt;消费习惯&lt;&#x2F;h3&gt;
&lt;p&gt;虽然在国内越狱的 iPhone 还是呈现一统江湖状，但还是有那么一部分人愿意为优秀的 app 买单，而且随着支持国内的银行卡、系统升级、Gift Card 等原因，会有越来越多的人加入支付队伍。如果把眼光放在全球，就更不用纠结国内的悲惨现状。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chan-pin-pin-zhi&quot;&gt;产品品质&lt;&#x2F;h3&gt;
&lt;p&gt;尽管随着乔老爷的离去，苹果的产品开始被更多的人所诟病（当然我也在其中），但不可否认，它依旧是最好的产品，至少在我看来如此。给她一点时间去适应，去试错、去磨合，去找到自己的节奏，相信在 Android 的鞭策下，她还会带给我们更多的惊喜。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-ti-yan&quot;&gt;开发体验&lt;&#x2F;h3&gt;
&lt;p&gt;第一次打开 Xcode 时，就喜欢上了这个界面，心想，以后如果能用它开发 app 会是件多么愉快的事情啊。Objective-C 虽然需要花点时间去适应它那有点别扭的语法，但过了适应期后，这种障碍就不存在了。Xcode 虽然偶尔会崩溃、出现莫名的错误、查文档很慢，基本上还是很称职的，在 2010 Air 上能有这样的表现我已经很满足了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-ru-men-jian&quot;&gt;进入门槛&lt;&#x2F;h3&gt;
&lt;p&gt;相比 web 开发，iOS 的进入门槛明显要高不少：中文资料偏少、需要一套苹果的开发设备、有一定的编程经验。所以搞 iOS 开发的不少都是从其他语言转过来的。如果一项技能不好学，但学会了又很有用，你愿不愿意花时间去攻克它？&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;我的 iOS 学习之路，主要是这几个工具：&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Programming-Objective-C-Edition-Developers-Library&#x2F;dp&#x2F;0321811909&quot;&gt;Programming in Objective-C&lt;&#x2F;a&gt;、&lt;a href=&quot;https:&#x2F;&#x2F;itunes.apple.com&#x2F;itunes-u&#x2F;ipad-iphone-application-development&#x2F;id473757255?mt=10&quot;&gt;Stanford iPad and iPhone Application Development&lt;&#x2F;a&gt;、&lt;a href=&quot;http:&#x2F;&#x2F;www.stackoverflow.com&quot;&gt;StackOverflow&lt;&#x2F;a&gt;。接下来就是不断地练习了。Once Touch 的开发用到了 Cocos2d 框架，所以还看了&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Learn-cocos2d-Game-Development-Apress&#x2F;dp&#x2F;1430238135&#x2F;&quot;&gt;learn cocos2d game development with ios 5&lt;&#x2F;a&gt;这本书，了解基本的概念和使用。&lt;&#x2F;p&gt;
&lt;p&gt;开发 Once Touch 第一版的时候，架构想得不多，主要是以实现为主。但是跟所有项目一样，唯一不变的就是变化。在那个体系下要增加点变化会比较麻烦，常常是牵一发而动全身。即使这样，只要时间足够，这些变化还是可以被搞定的，所以国内的互联网公司常常需要很多人，因为低质量的代码需要更多的人去维护，而且周期也会变长，自然也就不敏捷了。&lt;&#x2F;p&gt;
&lt;p&gt;后来要开发 universal 版了，iPad、iPhone5 自然也都要支持，如果再在现有的代码上进行调整，我觉得对自己太残忍，以后也不好意思开源，索性就重新再写一遍吧。&lt;&#x2F;p&gt;
&lt;p&gt;这次重写的指导方针就是模块化编程，也就是多用组合，少用继承。比如 Once Touch 里的小球，可以移动、缩放，就可以把移动和缩放单独提出来作为两个模块，小球再通过 addChild 的方式把这两个模块添加进来，这样小球就可以移动和缩放了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-duo-yong-zu-he-shao-yong-ji-cheng&quot;&gt;为什么要多用组合，少用继承&lt;&#x2F;h3&gt;
&lt;p&gt;先来看两张图片，第一张是国际空间站&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;once-touch-conclude&amp;#x2F;space-station.jpg&quot;
        width=&quot;728&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再来看看拆解图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;once-touch-conclude&amp;#x2F;space-station-parts.jpg&quot;
        width=&quot;728&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看出模块的好处了吧，只要接口是对的，且功能也正常，这个模块是非洲产的，还是美国造的，都不 care。也就是说空间站完全不关心每个模块的内部实现。每个模块只要完成自己的功能就行了，出了问题，也只需要调整某一个模块，而不用担心会引发其他模块功能的异常。这其实就是 OO 设计里的 SOLID 原则。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xcode-de-wen-jian-guan-li&quot;&gt;Xcode 的文件管理&lt;&#x2F;h3&gt;
&lt;p&gt;之前的习惯是把文件都交给 Xcode 来管理，在 Xcode 里新建 Group，因为 Xcode 并不会在新建 Group 时在文件系统也新建文件夹，所以在 Project 在 Xcode 看起来挺整洁，到了文件系统就又是另一回事了。那能不能两全其美呢，当然是可以的，稍微改变下流程就行。不要在 Xcode 里新建 Group，先在文件系统中建立好文件夹，然后把文件夹拖到 Xcode 的目录中就可以了，以后在该 Group 下新建的文件都会出现在文件系统中对应的文件夹内。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;once-touch-conclude&amp;#x2F;xcode-finder.png&quot;
        width=&quot;444&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h3&gt;
&lt;p&gt;从上面的图中可以看到我的目录结果，简单说明一下：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;utils&quot;&gt;Utils&lt;&#x2F;h4&gt;
&lt;p&gt;这里放一些与应用无关的帮助类文件，如 Global.h &#x2F; Helper.h &#x2F; Macro.h 等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;components&quot;&gt;Components&lt;&#x2F;h4&gt;
&lt;p&gt;这是重头戏，所有的模块都会被放到这里。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;vendors&quot;&gt;Vendors&lt;&#x2F;h4&gt;
&lt;p&gt;这里放一些第三方的类库，如 MagicalRecord &#x2F; CCUIViewWrapper 等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;models&quot;&gt;Models&lt;&#x2F;h4&gt;
&lt;p&gt;与数据打交道的 Model 都会放到这里&lt;&#x2F;p&gt;
&lt;h4 id=&quot;config&quot;&gt;Config&lt;&#x2F;h4&gt;
&lt;p&gt;应用的默认设置，主要是一个 plist 文件&lt;&#x2F;p&gt;
&lt;h4 id=&quot;textures&quot;&gt;Textures&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个比较特殊的文件夹，不是 Group，而是 Folder，也就是走的文件系统。这么做的原因是，把 iPad 和 iPhone 需要用到的资源分开存储（分别放到 iPad 和 iPhone 文件夹里），按需载入。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-de-li-du&quot;&gt;模块的粒度&lt;&#x2F;h3&gt;
&lt;p&gt;以这个画面为例&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;once-touch-conclude&amp;#x2F;once-touch-popup.jpg&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;应该把星星作为一个模块，还是把 3 个星星作为一个模块？分数有没有必要作为一个模块？左边黄色的那个圈呢？&lt;&#x2F;p&gt;
&lt;p&gt;如果模块的粒度划分过细，那么组装的过程就会很痛苦。想像一下某个 MM 拎着一堆电脑零件来找你组装台电脑，你信心满满地告诉她：几分钟搞定。等你打开箱子后发现，风扇、硬盘神马的都是以最小单位存在，还得先把这些附件先组装起来，看你崩不崩溃。&lt;&#x2F;p&gt;
&lt;p&gt;如果粒度划分过粗，就失去了模块的意义，基本上也无法复用了。一辆雪佛莱，如果说还能作为某个更大实体的零部件的话，估计也就只有擎天柱了。&lt;&#x2F;p&gt;
&lt;p&gt;所以恰当的粒度划分才会带来生产力的提升。还是以上面这张图为例，星星、钻石、分数和左边的圆，如果其他地方很少会单独使用到这些实体，就可以整体作为一个模块。当然如果将来其他模块会用到其中的某一部分，就需要重新拆分了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-yu-mu-ti-zhi-jian-de-tong-xin&quot;&gt;模块与母体之间的通信&lt;&#x2F;h3&gt;
&lt;p&gt;首先，模块之间是互盲的，A 模块不需要知道 B 模块的存在，更不能依赖 B 模块，这样才能解耦(话虽如此，实际上经常会自然不自然地与某个模块发生耦合)。模块只需要提供接口供母体使用就行了。当然在特定事件发生时，还需要通知母体，这就需要用到 delegate。有 delegate，自然也少不了 protocol。以小球为例，小球本身是一个模块，该模块又有移动和缩放两个子模块。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;movementcomponent&quot;&gt;MovementComponent&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MovementComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseComponent &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; _radian; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 小球的半径
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; _delay; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 小球是否需要延迟运动
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; _isOutSide; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 小球是否在外面，Challenge&#x2F;Endless模式会用到
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; speed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 小球的移动速度
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property float&lt;&#x2F;span&gt;&lt;span&gt; delay; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 延迟时间
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; isOutSide; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是否在外面
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 开始运动
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stopMove&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 停止运动
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;zoomcomponent&quot;&gt;ZoomComponent&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; ZoomComponent;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;ZoomComponentProtocol &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 当小球是最后一个球时，也就是得到perfect后，会有一个覆盖全屏的缩放
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 等到缩放完成后需要通知delegate
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;zoomComponentDidGiantZoomOut:&lt;&#x2F;span&gt;&lt;span&gt;(ZoomComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;zoomComponent&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 小球从最大缩放到最小后，需要通知delegate
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;zoomComponentDidZoomOut:&lt;&#x2F;span&gt;&lt;span&gt;(ZoomComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;zoomComponent&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ZoomComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseComponent &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; _pauseZoomOut; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 在Endless模式，最后一个球是不消失的，所以需要停止缩小
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;reInit&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 重新初始化，对已有小球的重复利用，用于Challenge&#x2F;Endless模式
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;zoomIn&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放大
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pauseZoomOut&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 停止缩小
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resumeZoomOut&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以缩小
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;giantZoomIn&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 全屏放大
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; isSmall; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 当前是否为小球状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; isBig; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 当前是否为大球状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; isZoomIn; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是否开始放大
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; isZoomOut; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是否开始缩小
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; finishedZoom; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是否已经完成了缩放整个流程
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; zoomDuration; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放大的时间
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bigDuration; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 大球状态停留的时间
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bigScale; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放大到多少倍
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ZoomComponentProtocol&amp;gt; delegate; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 母体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ZoomComponent 里有一个 protocol 和一个 delegate，如果某个 object 想要添加 ZoomComponent，则必须实现 ZoomComponentProtocol 协议，并且把自己设置为 ZoomComponent 的 delegate，这样在相应的事件发生时，会自动触发协议里的几个方法。因为是小球添加了 MovementComponent 和 ZoomComponent，所以 BallComponent 需要实现 ZoomComponentProtocol&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ballcomponent&quot;&gt;BallComponent&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ZoomComponent.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;BallComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseComponent&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ZoomComponentProtocal&amp;gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; _index;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; _isMasterBall;
&lt;&#x2F;span&gt;&lt;span&gt;	ZoomComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_zoomComponent;
&lt;&#x2F;span&gt;&lt;span&gt;	MovementComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_movementComponent;
&lt;&#x2F;span&gt;&lt;span&gt;	CCSprite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_ballSprite;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里又有问题了，Layer 添加了 BallComponent 后，需要调用 Ball 的一些方法和属性，如 isBig &#x2F; move 等等，对于 Ball 来说，其实就是调用 Zoom 和 Movement 对应的方法，如 ballComponent.isBig 其实就是 zoomComponent.isBig。那能不能对外暴露 zoomComponent 和 movementComponent 呢，如 ball.zoomComponent.isBig 或 [ball.movementComponent move]。这样不好，前面说过了，调用方不应该知道模块的内部实现，因为模块的内部是有可能变动的。所以，就只能进行二次封装，类似下面：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setBigDuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)bigDuration
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_zoomComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bigDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bigDuration;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setBigScale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)bigScale
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_zoomComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bigScale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bigScale;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setSpeed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)speed
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_movementComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;speed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; speed;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setDelay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)delay
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_movementComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delay &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; delay;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初看起来会觉得挺累赘，但是从长远考虑这么做是值得的。显性好于隐性，这样能一下知道 ball 模块对外暴露了哪些方法。&lt;&#x2F;p&gt;
&lt;p&gt;添加模块和设置 delegate 的过程大体如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;_zoomComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ZoomComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;_zoomComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bigDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bigDuration;
&lt;&#x2F;span&gt;&lt;span&gt;_zoomComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bigScale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bigScale;
&lt;&#x2F;span&gt;&lt;span&gt;_zoomComponent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addChild:_zoomComponent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;使用继承会使架构变得复杂，为了保证每个类都只有自己需要的方法，需要很小心地定义 public &#x2F; protected &#x2F; private 方法，尤其是对父类地改动更需小心，这种架构很难应对多变的环境。&lt;&#x2F;p&gt;
&lt;p&gt;使用组合可以让每一个模块专注于自己地功能，按需使用，模块的调整只要不影响接口，爱怎么折腾就怎么折腾，提升了自由度。&lt;&#x2F;p&gt;
&lt;p&gt;不过组合也是有副作用的，尤其是涉及到子模块，比如上面的 BallComponent，需要重新定义一遍接口，而继承的话就没有这个问题。有一些公共的属性和方法也可以通过继承来实现，比如所有的 Component 都继承自 BaseComponent。&lt;&#x2F;p&gt;
&lt;p&gt;所以尽量多用组合，少用继承。&lt;&#x2F;p&gt;
&lt;p&gt;一些我觉得还不错的资源：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;nzakas&#x2F;scalable-javascript-application-architecture&quot;&gt;Scalable JavaScript Application Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;49002&#x2F;prefer-composition-over-inheritance&quot;&gt;Prefer composition over inheritance?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;programmers.stackexchange.com&#x2F;q&#x2F;65179&quot;&gt;Where does this concept of “favor composition over inheritance” come from?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>我已经不在知乎了</title>
            <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/im-not-at-zhihu/</link>
            <guid>https://limboy.me/posts/im-not-at-zhihu/</guid>
            <description>&lt;p&gt;忽然间来了心绪，加上&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;gxxx&quot; target=&quot;_blank&quot;&gt;@gxxx&lt;&#x2F;a&gt;同学在推上日复一日的邀文，和抱着对广大关心我的同学们负责的心情，我觉得有必要阐述一个事实：我已经不在知乎了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-gu&quot;&gt;回顾&lt;&#x2F;h3&gt;
&lt;p&gt;在 7 月的某一天下午，李申申同学邀请我到知乎参观下，我纯净地答应了。大概参观了下工场和知乎，跟申申聊了会，然后申申说：来知乎吧。这让我有点措手不及，前面说过了，我是抱着很纯净的心态过去的，而且凤凰网那边还有 RSU 和年中技术部 A+员工奖金在那牵制着。但是看到了知乎的环境、氛围还有一堆优秀的人才，我觉得这是一个很好的学习机会，稍微做了会思想斗争后，就妥协了。&lt;&#x2F;p&gt;
&lt;p&gt;知乎有很浓厚的苹果底蕴：第一个问题的编号为 19550225; MBP&#x2F;MBA 人手一台，唯一一台 windows 是财务在使用; iPhone 的普及率很高。这跟知乎的 apple4us 血统有很大关系。知乎其实还推崇海盗文化，这个我个人的感触倒不是很深。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很重视员工的快乐指数，努力营造家庭文化：桌球(god, i love it, though i suck)、免费的午餐、充足的零食和水果、DSP 人体工程学椅子等等。这一切都体现了一个字：诚意。我真的关心你们，关心你们的生活。作为员工自然也能领会这种诚意，那么还有什么好犹豫的，努力干活吧。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很乐意尝试并使用新兴技术：使用 Git 进行版本控制，Github 来管理代码，Basecamp 管理项目，python 作为开发语言，等等。其实这些都不是什么新东西，也都是经过了时间的验证，但很多公司由于技术主管自身的限制，和员工的技术能力，最终都选择了走最安稳的道路。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很重视工程师的质量，宁缺勿滥。也会给予他们很大的自由，比如可以随意选择上班时间，甚至不来公司都可以（由于工程师任务量的加大，现在的自由度也有所减少）；可以访问大部分的代码。每周会有一次技术分享活动，总是会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;关于加班。在知乎上班的感觉不那么强烈，不像很多公司，9 点之前要刷卡，不然算迟到，然后终于等到 6 点，刷卡下班挤地铁。因为在知乎不需要刷卡，上班和下班点都由你自己来控制。但很重要的一点是，不要让其他人因为你而拖延了进度。任务比较紧急时，连续熬个一两个通宵也正常（现在我还挺怀念那种感觉的）。&lt;&#x2F;p&gt;
&lt;p&gt;知乎几乎没有等级制度，如 A 管 B，B 负责 C 等等。如果要实现一个新特性，比如图片上传，会有几个工程师和一个产品设计来负责这块，想出一个解决方案后，再和申申细细地碰一下，申申经常会提到一些比较容易遗漏或出错的地方。方案有了，大家就可以分头行动了，所以知乎也没有架构师这么一个职位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-kai&quot;&gt;离开&lt;&#x2F;h3&gt;
&lt;p&gt;回过头来再说说我为什么离开知乎吧。原因大概有这么几个：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-jing-zao-gao-de-tian-qi&quot;&gt;北京糟糕的天气&lt;&#x2F;h4&gt;
&lt;p&gt;是的，天气是一个很大的原因。记得有一阵每天晚上坐车回家，都得吐出好些分泌物。为了自己和 MM 的健康着想，打算换一个既适宜居住，又有点互联网氛围的城市，于是就选择了杭州。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-ji-de-chuang-ye-xiang-mu&quot;&gt;自己的创业项目&lt;&#x2F;h4&gt;
&lt;p&gt;嗯，当时比较迷摄影，于是很想做一个网站来提高下国内的摄影网站品位。也是在暗地里筹划了好久，最后决定应该认真地去尝试下。但是由于对现状分析地不够透彻，和过高地估计了自己的能力，此项目在推出不久后便搁浅，也正因如此，才有了后来的「Once Touch」&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xiang-she-xi-ios-kai-fa&quot;&gt;想涉猎 iOS 开发&lt;&#x2F;h4&gt;
&lt;p&gt;因为对苹果的喜爱，加上 app store 广大的用户群和方便的付费系统，加上相信苹果会持续改进产品，于是就动了这个念头。如果留在知乎，会推迟学习 iOS 的脚步。&lt;&#x2F;p&gt;
&lt;p&gt;基于上述 3 点，我决定离开知乎，离开那群可爱的人们。可能要让&lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;gxxx&quot; target=&quot;_blank&quot;&gt;@gxxx&lt;&#x2F;a&gt;君失望了，不过这些就是我离开知乎的原因。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huai-nian&quot;&gt;怀念&lt;&#x2F;h3&gt;
&lt;p&gt;虽已时隔 4 个多月，回想起在知乎那段时光，依旧心有戚戚焉。&lt;&#x2F;p&gt;
&lt;p&gt;感谢带给我们那么多欢乐的桌球&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_football.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;感谢曾经共同奋战的队友&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_team.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;感谢知乎&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_pai.jpg&quot;
        width=&quot;600&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>程序员，你还酷吗？</title>
            <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/hey-programmers-are-you-cool/</link>
            <guid>https://limboy.me/posts/hey-programmers-are-you-cool/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;当别人问起你的职业，是否会有一丝卑微感，是不是更希望自己的头衔是经理、总监、主管之类的？&lt;&#x2F;p&gt;
&lt;p&gt;面对琳琅满目且不断调整的需求，是否会以完成需求为目的，而不顾程序本身的优雅？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得程序员就是吃青春饭的，迟早得转型到管理，不如趁早转，积累点经验？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得自己做的事情很重要，但做成后被褒奖的却不是你，或者只是顺带一提？&lt;&#x2F;p&gt;
&lt;p&gt;看到满屏的英文文档，或遇到搞不定的 Bug 时，开始怀疑人生？&lt;&#x2F;p&gt;
&lt;p&gt;与女孩子接触的机会太少，真希望调到 XX 组？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得与其他人交流起来会有点困难？&lt;&#x2F;p&gt;
&lt;p&gt;是否讨厌办公室政治，又不得不在其中涡旋？&lt;&#x2F;p&gt;
&lt;p&gt;面对不断更新的技术，是否有种无力感？&lt;&#x2F;p&gt;
&lt;p&gt;是否也希望某天能做出一个 NB 的应用，改变世界？&lt;&#x2F;p&gt;
&lt;p&gt;是否会有扁项目经理的冲动？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果你对上面提到的这些深有同感，那么作为一个程序员，你可能真的不够酷。程序(app)能够以其独有的方式改善人们的生活，而程序员是触发这一切的根本。他们坐在电脑前，噼里啪啦敲一些外人根本看不懂的符号，熟练地使用快捷键，变魔术般的做好了一个网站&#x2F;应用，然后你打开电脑&#x2F;手机就能看到并使用他们，这难道还不够酷吗？&lt;&#x2F;p&gt;
&lt;p&gt;要让人们对某一行业的态度发生转变，最好的方式就是从事该行业的人自己去证明。如果越来越多的程序员创造出了能够改善人们生活方方面面的应用，而且程序员不是简单地去实现，而是以主导者的身份出现，那时候人们对程序员的认识一定会比现在好不少。这就需要程序员不光要会写程序，还要具备创业家的心态，这并没有想像中的那么难，连那么复杂的程序都能搞定，还有什么是自己搞不定的？&lt;&#x2F;p&gt;
&lt;p&gt;在使用一个应用时，如果界面很漂亮，我们会感叹：设计师真 NB；如果体验很好，我们会感叹：产品经理真 NB；如果程序出了点 Bug，我们会抱怨：程序员弱爆了。一个应用正常运行，是程序员应该做的；如果出了问题，自觉修 Bug 去吧。一个应用，如果真有用户对程序本身赞叹不绝，很可能是 UI&#x2F;UE 很不咋地，但程序运行地还挺符合预期。&lt;&#x2F;p&gt;
&lt;p&gt;程序员要得到外界的认可是比较难的，虽然他们在做着很重要的事情。但如果我们真的享受编程带来的乐趣，坚信程序可以让人们的生活变得更加方便和美好，又何必在意外人的看法呢？在属于自己的世界里，静静地绽放，就像深海的水母一样。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;hey-programmers-are-you-cool&amp;#x2F;jellyfish.jpg&quot;
        width=&quot;597&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后，千万别惹程序员，因为他们会顺手拿起封面是犀牛的 O&#x27;Reilly 书砸你。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>这些年我的不足</title>
            <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-shortages/</link>
            <guid>https://limboy.me/posts/my-shortages/</guid>
            <description>&lt;p&gt;如果把人生比作跑步的话，我们都在用自己的节奏和姿势在完成比赛。这些跑步的技巧可能是小时候从老师，朋友，家人那得来的。随着时间的流逝，我们习惯了这种跑步的技能，看见那些跑得快的，会羡慕；跑得慢的，会不屑；跑得别扭的，会当作笑料。但是自己跑得怎么样，却很少关心。为什么要跑这条道？为什么这么慢？为什么这么累？&lt;&#x2F;p&gt;
&lt;p&gt;我们很难做到客观，尤其是面对自己的时候，那些缺点、曾经犯的错会自动进入盲区，躲避意识的雷达。尽管如此，我还是找到了数量可观的不足，才发现，原来这么些年，我一直在以这么别扭、丑陋的姿势在跑步。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-gou-zhuan-zhu&quot;&gt;不够专注&lt;&#x2F;h3&gt;
&lt;p&gt;乔希·维茨金在《学习的艺术》里曾这么描述他当时的专注程度：『我太过于专注，以至于她觉得如果把手放在我眼前的话都会燃烧起来。』&lt;&#x2F;p&gt;
&lt;p&gt;如果足够专注的话，就会进入一种『流状态』，忘了时间，忘了身边的世界，只有自己当前所做的事。遗憾的是，我进入这种状态的机会不多，也没有有意识地去培养。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-shan-yu-tui-chi-man-zu-gan&quot;&gt;不善于推迟满足感&lt;&#x2F;h3&gt;
&lt;p&gt;假设有两个任务，一个比较简单、有趣，另一个比较困难，但如果完成的话对自己的提升会比前一个任务高。这时你会选择先做哪一个？如果那个困难的任务并不强迫你必须完成，还会去做吗？&lt;&#x2F;p&gt;
&lt;p&gt;推迟满足感可以让我们享受解决问题带来的乐趣，更重要的是锻炼了自律能力。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-shan-yu-zhi-ding-ji-hua&quot;&gt;不善于制定计划&lt;&#x2F;h3&gt;
&lt;p&gt;做事往往是凭着一股热情，热度过了，事情也基本到尾声了，而事实上，没有人的热情可以持续很长一段时间。&lt;&#x2F;p&gt;
&lt;p&gt;把一个大目标，切分成多个合适的小目标，这是我不擅长的。如果是从 A 到 D，那 D 就是我的目标，而不会加入 B,C 这两个里程碑，结果就是把自己弄的很累，作品也不够精致。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-shao-da-ju-guan&quot;&gt;缺少大局观&lt;&#x2F;h3&gt;
&lt;p&gt;我很在乎界面和用户体验，那些我看着或用着不舒服的，一概不去碰，比如新浪微博。在凤凰网的时候，我对旅行有点兴趣，但当时那些旅行方面的网站让我没有一点参与欲望，于是就花了三个月自己做了一个旅行社区，当时真没想好该怎么去运营这个网站，网站做完了，接下来该怎么办，就束手无策了。如果能够克制一下自己的偏执，能够细致地去了解这个行业，这些时间还能花在更有意义的事情上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-shao-dong-xi-shi-wu-ben-zhi-de-neng-li&quot;&gt;缺少洞悉事物本质的能力&lt;&#x2F;h3&gt;
&lt;p&gt;这个能力不是天生就有的，需要后期不断地磨练。大前研一之前是核能博士，最后却在麦肯锡搞出了一番名堂。他总是能在很短的时间内就帮企业找到问题的原因，这得归功于他从小锻炼的逻辑思维能力和平日对每一个细小的事物都当作案例去对待的心态。&lt;&#x2F;p&gt;
&lt;p&gt;不找出真正的原因，就别期望能够解决问题。所以最重要的是思考“在各种现象之间，如何找出真正的原因”，绝不能在列举了各种现象之后就停止了思考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-fa-xiang-xiang-li&quot;&gt;缺乏想象力&lt;&#x2F;h3&gt;
&lt;p&gt;爱因斯坦说过『想象力比知识重要』。由于从小反应就比较迟钝，加上缺少敏锐的观察力，当然还有老师们的辛勤扼杀，想象力已经生锈。&lt;&#x2F;p&gt;
&lt;p&gt;想象力是各种创造的源泉，想象力的缺失必然也导致创造力的低下，而如果不能去创造一些又酷又有创意的东西，那生活就太乏味了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-qi-xin-bu-gou&quot;&gt;好奇心不够&lt;&#x2F;h3&gt;
&lt;p&gt;大前研一在《思考的技术》里说：『一定要保持好奇心，因为好奇心可以转化为思考的养分』。好奇心可以促使我们思考，让我们始终保持学习的动力和乐趣，让我们更深刻地去理解周围的事物。&lt;&#x2F;p&gt;
&lt;p&gt;好奇心不够的人，更容易被『专家』蛊惑，他们喜欢『海绵式学习』而不是『淘金式学习』。The world is trying to keep you stupid，擦亮眼睛，在接纳一个观点前，先质疑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ke-yong-de-mo-xing-bu-duo&quot;&gt;可用的模型不多&lt;&#x2F;h3&gt;
&lt;p&gt;每一个行业都有它的特殊性，同时又具有普遍性。从自己从事的行业中提取出可用于其他行业的模型是一个不小的考验。比如缓存，可以让用户能更快地获取数据，用在京东这样的 B2C 商城上，缓存可以是在多个地区设立货仓(其实更像 cdn)，这样不同地区的顾客可以从离他们最近的货仓出货，加快货物到达时间。&lt;&#x2F;p&gt;
&lt;p&gt;把具体问题抽象化，找到问题的本质，然后套用掌握的一个或多个模型来解决问题。模型越多，了解得越透彻，解决问题的能力也就越强。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yue-du-liang-bu-gou&quot;&gt;阅读量不够&lt;&#x2F;h3&gt;
&lt;p&gt;查理·芒格在《穷查理宝典》里说：『我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的——没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我，觉得我是一本长了两条腿的书』。&lt;&#x2F;p&gt;
&lt;p&gt;阅读能够拓宽我们的视野，吸收他人的精华，指导我们的生活，愉悦我们的心灵。也曾经列了一些必读书目，由于重视程度不够，加上这些书比较厚，读起来颇费力，且没有一定要读的理由，就一拖再拖，结果就不了了之。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mei-neng-ba-yi-jian-shi-qing-zuo-dao-ji-zhi&quot;&gt;没能把一件事情做到极致&lt;&#x2F;h3&gt;
&lt;p&gt;我喜欢做一些有意思或者自认为有价值的项目，如前面所说，很多都是憋足一股劲，凭着热情，直到做到自己还算满意，然后，就没有然后了。&lt;&#x2F;p&gt;
&lt;p&gt;这世界平庸的项目有很多，不要再去凑热闹了，把精力集中在少数几个最有兴趣和意义的项目上，让它们发挥出最大的价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-gou-kai-fang-de-xin-tai&quot;&gt;不够开放的心态&lt;&#x2F;h3&gt;
&lt;p&gt;想到一个解决方案时，不要急着实现，跟过来人探讨一下，看看这个实现有没有问题，有没有更好的方案。我总是怕打扰别人，有了想法就去实现，经常会走了不少弯路。&lt;&#x2F;p&gt;
&lt;p&gt;多去看看外面的世界，接触各行各业的人，分享各自的经历。北京 open party 曾经去过一次，给我的感觉很好，大家分享自己在某一领域的经验，或旅行心得，能学到不少东西。&lt;&#x2F;p&gt;
&lt;p&gt;所谓开放的心态，就是愿意去听听别人的看法，即使自己已经有了想法。自己看到的，想到的很可能不够全面，别人尤其是过来人的想法往往能够弥补这些思维漏洞。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-nian-bu-gou-jian-ding&quot;&gt;信念不够坚定&lt;&#x2F;h3&gt;
&lt;p&gt;坚定的信念是战胜困难的强有力武器。我在遇到一些感觉超出了自己能力范围的问题时，会有退缩心理。搞不定这个问题时，就会犹豫：我一定要从事这个行业吗？我在其他行业会不会更有天赋？这种心态越严重，越不利于问题的解决，到最后搞得自己心神不宁。&lt;&#x2F;p&gt;
&lt;p&gt;结婚前要睁大双眼看清楚，结婚后要睁一只眼闭一只眼。在选择行业时也一样，一定要谨慎，同时结合自己的兴趣和能力。一旦决定了，就不要再给自己留退路。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>《穷查理宝典》小记</title>
            <pubDate>Wed, 30 May 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/charles-thomas-munger/</link>
            <guid>https://limboy.me/posts/charles-thomas-munger/</guid>
            <description>&lt;p&gt;查理·芒格比较低调，可能很多人并不是太了解他。他是美国投资家，沃伦·巴菲特的黄金搭档，伯克希尔·哈撒韦公司的副主席。想要了解更多的话，&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;1733776.htm&quot;&gt;请点这里&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;4208757&#x2F;&quot;&gt;《穷查理宝典》&lt;&#x2F;a&gt;收录了查理过去 20 年来主要的公开演讲，书中十一篇讲稿全面展现了这个传奇人物的聪明才智。&lt;&#x2F;p&gt;
&lt;p&gt;查理的一个很重要的观点是：融合各个重要学科的重要理论，并经常使用它们。我自己就有这感觉，看待一个问题时，往往凭着直觉，和在该领域的知识，孤立地去看。头脑里没有框架和多种模型，所以往往挖掘不到事物之间的深层联系。&lt;&#x2F;p&gt;
&lt;p&gt;基本上，无论从事哪种职业，这些重要学科的重要理论都会起到不少帮助。比如数学，心理学，统计学。不需要钻研得太深入，但对于那些重要的理论一定要了然于心，并经常运用。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是我觉得最重要的，可能被很多人忽略的一个东西：好奇心。这是在各个领域辗转腾挪，又乐此不疲的关键因素。有了好奇心，才会有持续学习的动力，而持续学习的能力在很大程度上决定了一个人可以取得的成就。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qiong-cha-li-bao-dian-zhai-lu&quot;&gt;《穷查理宝典》摘录&lt;&#x2F;h3&gt;
&lt;p&gt;查理在他漫长的一生中，持续不断地收集并研究各种各样的人物，各行各业的企业以及政府管制、学术研究等各领域的著名失败案例。并把那些失败的原因排列成做出正确决策前的检查清单，这使他在人生，事业的决策上几乎从不犯重大错误。&lt;&#x2F;p&gt;
&lt;p&gt;他有儿童般的好奇心，又有第一流科学家所具备的研究素质和科学研究方法，一生都有强烈的求知欲，几乎对所有问题都感兴趣。任何一个问题在他看来都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上进行创新。&lt;&#x2F;p&gt;
&lt;p&gt;在他看来，世间宇宙万物都是一个相互作用的整体，人类的所有知识都是对这一整体研究的部分尝试，只有把这些思想结合起来，并贯穿在一个思想框架中，才能对正确的认知和决策起到帮助作用。所以他提倡要学习在所有学科中，真正重要的理论，并在此基础上形成所谓的“普世智慧”。&lt;&#x2F;p&gt;
&lt;p&gt;查理的兴趣不仅限于思考，凡事也喜欢亲力亲为，并注重细节。他有一艘世界上最大的私人双体游艇，而这艘游艇就是他自己设计的。他还是个出色的建筑师，他按自己的喜好建造房子，从最初的图纸设计到之后的每一个细节，他都全程参与。&lt;&#x2F;p&gt;
&lt;p&gt;手里只要有一本书，我就不会觉得浪费时间。&lt;&#x2F;p&gt;
&lt;p&gt;我一辈子想要的就是融入生活，我不希望自己被孤立。&lt;&#x2F;p&gt;
&lt;p&gt;他认为人应该对自己要严格要求，一生不断提高修养，以克服人性本身的弱点。&lt;&#x2F;p&gt;
&lt;p&gt;我的剑留给能挥舞它的人。&lt;&#x2F;p&gt;
&lt;p&gt;你必须知道重要学科的重要理论，并经常使用它们——要全部用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如经济学，试图用一种方法来解决所有问题。好比在手里拿着铁锤的人看来，世界就像一个钉子。这是处理问题的一种笨方法。&lt;&#x2F;p&gt;
&lt;p&gt;几乎每个系统都受到多种因素的影响，所以要理解这种系统，就必须熟练地运用来自不同学科的多元思维模式。&lt;&#x2F;p&gt;
&lt;p&gt;只要得到正确的收集和组织，他的多元思维模型便能提供一个背景或框架，使他具有看清生活本质和目标的非凡洞察力。&lt;&#x2F;p&gt;
&lt;p&gt;迅速地歼灭不该做的事情，接着对该做的事情发起熟练的，跨学科的攻击，然后当合适的机会来临——只有当合适的机会来临——就采取果断的行动。&lt;&#x2F;p&gt;
&lt;p&gt;一个企业的竞争优势是该企业的“护城河”，是保护企业免遭入侵的无形壕沟。优秀的公司拥有很深的护城河，这些护城河不断加宽，为公司提供长久的保护。&lt;&#x2F;p&gt;
&lt;p&gt;股价公道的伟大企业，比股价超低的普通企业好。&lt;&#x2F;p&gt;
&lt;p&gt;大多数玩家从被群体接受或者从对群体的归属感中得到快乐。然而好的玩家从他应付游戏里各种局面的能力中得到快乐。&lt;&#x2F;p&gt;
&lt;p&gt;他的投资行为结合了极度的耐心和极度的决心，一旦查理决定要投资，那么他很可能会决心下很大的赌注。他绝对不会小打小闹，或者进行小额的投机性投资。这类行为包含着不确定性，然而查理为数极少的投资行为却绝对不是不确定的。&lt;&#x2F;p&gt;
&lt;p&gt;随大流只能让你往平均值靠近。&lt;&#x2F;p&gt;
&lt;p&gt;如果你要变得更聪明，必须不停追问的问题是：为什么？为什么？为什么？&lt;&#x2F;p&gt;
&lt;p&gt;正视现实，即使你并不喜欢它——尤其当你不喜欢它的时候。&lt;&#x2F;p&gt;
&lt;p&gt;我是对的，你很聪明，迟早你会明白我是对的。&lt;&#x2F;p&gt;
&lt;p&gt;伯克希尔历史上最严重的错误是坐失良机的错误。我们看到了许多好机会，却没有采取行动。&lt;&#x2F;p&gt;
&lt;p&gt;如果你没有不停地学习，其他人将会超过你。&lt;&#x2F;p&gt;
&lt;p&gt;避免邪恶之人，尤其是那些性感诱惑人的异性。&lt;&#x2F;p&gt;
&lt;p&gt;我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的——没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我，觉得我是一本长了两条腿的书。&lt;&#x2F;p&gt;
&lt;p&gt;我觉得你要是想让人们认识有用的伟大概念，最好是将这些概念和提出它们的伟人的生活和个性联系在起来。&lt;&#x2F;p&gt;
&lt;p&gt;如果你担心通货膨胀，最好的预防手段之一就是在你的生活中别拥有大量愚蠢的需求——你不需要很多物质的商品。&lt;&#x2F;p&gt;
&lt;p&gt;反过来想，总是反过来想。许多难题只有在逆向思考的时候才能得到解决。例如，当年所有人都在试图修正麦克斯韦的电磁定律，以便它能符合牛顿的三大运动定律，然而爱因斯坦却转了 180 度的大弯，修正了牛顿定律，让其符合麦克斯韦的定律，结果他发明了相对论。&lt;&#x2F;p&gt;
&lt;p&gt;爱因斯坦说他那些成功的理论来自“好奇，专注，毅力和自省”。他所说的自省就是不停地实验和推翻他自己深爱的想法。&lt;&#x2F;p&gt;
&lt;p&gt;承担工作的责任，做可靠的人。&lt;&#x2F;p&gt;
&lt;p&gt;做出客观的评价很难，但却很重要。&lt;&#x2F;p&gt;
&lt;p&gt;如果只是记得一些孤立的事物，试图把他们硬凑起来，那么将无法真正理解任何东西。如果这些事物不在一个理论框架中相互联系，就无法把它们派上用场。&lt;&#x2F;p&gt;
&lt;p&gt;你必须拥有多元思维模型——因为如果你只能使用一两个，研究人性的心理学表明，你将会扭曲现实，直到它符合你的思维模型。&lt;&#x2F;p&gt;
&lt;p&gt;这么多年来，我一直跟巴菲特同事，他拥有许多优势，其中之一就是他能够自动地根据决策树理论和基本的排列组合原理来思考。&lt;&#x2F;p&gt;
&lt;p&gt;他要求布劳恩公司所有的交流必须遵守“5H1W”原则——你必须说明何人因何故需要在何时何地做何事。如果你写一封信或指示某人去做某事，但没有告诉他原因，那么你很可能会被解雇。如果你能将一堆模式的知识组合起来，回答一个又一个的为什么，就能更好地思考；同样道理，如果你告诉人们事情的时候，总是告诉他们原因，他们就能更深刻地理解你说的话，也会更重视你说的话。&lt;&#x2F;p&gt;
&lt;p&gt;那些来自硬科学和工程学的思维模型是地球上最可靠的思维模型。&lt;&#x2F;p&gt;
&lt;p&gt;人的头脑既是宇宙的光荣也是宇宙的耻辱。因为它的认知功能容易受误导，而且比感知功能更容易受误导。&lt;&#x2F;p&gt;
&lt;p&gt;你的规模优势可能是一种信息优势。我知道绿箭是一种另人满意的产品，可是对格罗滋毫不了解。如果绿箭卖 40 美分，格罗滋卖 35 美分，你们觉得我会为了区区 5 分钱而把某样我不了解的东西放到嘴巴里吗？——这毕竟是非常私人的地方。&lt;&#x2F;p&gt;
&lt;p&gt;规模大的缺陷是，这使竞争变得更有趣，因为大公司并非总是赢家——企业变大后，就会出现官僚机构的作风，而这种作风会造成敷衍塞责的情况——这也是人之本性。&lt;&#x2F;p&gt;
&lt;p&gt;在官僚机构里，当工作从你手上转到别人手上时，你会认为工作已经完成。当然了，实际上他并未完成。&lt;&#x2F;p&gt;
&lt;p&gt;巴甫洛夫联想：如果人们说了你确实不想听到的话——也就是让你不高兴的话——你会自然而然地生出抵触情绪。你必须训练自己摆脱这种反应。&lt;&#x2F;p&gt;
&lt;p&gt;当新的行业出现时，先行者会获得巨大的优势。如果你是先行者，你会遇到一种我称之为『冲浪』的模型——当冲浪者顺利冲上浪尖，并停留在那里，他能够冲很长一段时间。但如果他没冲上去，就会被海浪吞没。&lt;&#x2F;p&gt;
&lt;p&gt;成为赢家的方法是工作，工作，工作，再工作，并期待能够看准几次机会。&lt;&#x2F;p&gt;
&lt;p&gt;当沃伦在商学院讲课时，他说：我用一张考勤卡就能改善你最终的财务状况；这张卡片上有 20 格，所以你只能由 20 次打卡的机会——这代表你一生中所能拥有的投资次数。当你把卡打完之后就再也不能进行投资了。在这样的规则之下，你才会真正慎重地考虑你做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;正确的激励机制是非常重要的。联邦快递以前的派送系统总是出问题，那些职员从来没有及时完成工作，公司的管理层想尽办法，但没有一个生效。最后有人想到了好主意：不再以小时记薪，而是按班次记——而且职员只要工作完就可以回家。&lt;&#x2F;p&gt;
&lt;p&gt;年轻人应该在工作中追求：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;别兜售你自己不会购买的东西&lt;&#x2F;li&gt;
&lt;li&gt;别为你不尊敬和钦佩的人工作&lt;&#x2F;li&gt;
&lt;li&gt;只跟你喜欢的人同事&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;你们不需要了解所有知识，只要吸取各个学科最杰出的思想就行了，那并不难做到。&lt;&#x2F;p&gt;
&lt;p&gt;在当年，英国水手是十分粗鲁、古怪和危险的，他们讨厌“泡菜”，他们吃惯了英国的食物和饮料。所以怎么才能让英国水手吃泡菜呢？他是这么做的：所有官员聚集起来，并让普通水手都能看到他们。他让那些官员吃酸泡菜，但不让普通水手吃。经过一段时间后，库克说：嗯，普通水手每周也可以有一天吃酸泡菜。&lt;&#x2F;p&gt;
&lt;p&gt;优秀的文学作品需要读者略加思索才能理解。如果你动脑筋才懂得某个道理，你就会更好地记住它。&lt;&#x2F;p&gt;
&lt;p&gt;有一种蚂蚁，当它在巢穴里嗅到蚂蚁尸体散发出的外激素时，它就会和其他蚂蚁合作，把尸体运出巢穴。如果把这些激素涂在一只活蚂蚁身上，很自然，其他蚂蚁把这只活蚂蚁拖出了巢穴，尽管它在整个过程中不断地踢腿和挣扎。&lt;&#x2F;p&gt;
&lt;p&gt;如果你要说服别人，要诉诸利益而非理性。&lt;&#x2F;p&gt;
&lt;p&gt;即时的回报在改变和延续行为方面远远比延后的回报更有效。&lt;&#x2F;p&gt;
&lt;p&gt;新思想之所以很难被接受，并不是因为它们本身太过复杂，而是因为它们与原有的思想不一致。&lt;&#x2F;p&gt;
&lt;p&gt;当一个精子进入卵子，卵子就会自动开启一种封闭机制，阻止其他精子进入。人类头脑强烈地趋向于与此相同的结果。&lt;&#x2F;p&gt;
&lt;p&gt;和猿类，猴类和狗类等其他几类认知能力较低的动物相同，人类身上也有以德报德，以牙还牙的极端倾向。&lt;&#x2F;p&gt;
&lt;p&gt;化解过激敌意的标准方法是延迟自己的反应。“如果你觉得骂人是很好的反应，你可以留到明天再骂”&lt;&#x2F;p&gt;
&lt;p&gt;回馈倾向很大程度上是在潜意识层面发挥作用的。&lt;&#x2F;p&gt;
&lt;p&gt;即使是微不足道的联想，只要加以仔细地利用，也能对产品购买者产生极大的影响。鞋油的目标购买者或许很喜欢漂亮女孩，所以选择了那种包装上印着漂亮女孩的鞋油，或者他最近看到有漂亮女孩做广告的那种鞋油。&lt;&#x2F;p&gt;
&lt;p&gt;避免因为过去的成功而做蠢事的正确对策是：（1）谨慎地审视以往的每次成功，找出这些成功里面的偶然因素，以免受这些因素误导，从而夸大了计划中的新行动取得成功的概率。（2）看看新的行动将会遇到哪些在以往的成功经验中没有出现的危险因素。&lt;&#x2F;p&gt;
&lt;p&gt;结婚前要睁大双眼看清楚，结婚后要睁一只眼闭一只眼。&lt;&#x2F;p&gt;
&lt;p&gt;受简单联想影响的倾向在消除以德报德的自然倾向方面有惊人的效果。&lt;&#x2F;p&gt;
&lt;p&gt;被剥夺超级反应倾向：一个人得到 10 美元的快乐的分量，并不正好等于失去 10 美元给他带来的痛苦的分量。也就是说失去造成的伤害比得到带来的快乐多得多。&lt;&#x2F;p&gt;
&lt;p&gt;人们在失去或者可能失去财产、爱情、友谊、势力范围、身份、机会或其他任何有价值的东西时，通常会做出不理性的激烈反应。&lt;&#x2F;p&gt;
&lt;p&gt;人的本性：渴望具有重要性、渴望公平、渴望做出正确的选择、渴望吸引异性、害怕失去、渴望安全感、渴望被认同&lt;&#x2F;p&gt;
&lt;p&gt;社会认同什么时候最容易被激发？许多经验给出了下面这个明显的答案：人们在感到困惑或者有压力时，尤其是在既困惑又有压力时。&lt;&#x2F;p&gt;
&lt;p&gt;对比错误反映倾向：为了让正常的价格显得很低，商家通常会瞎编一个比正常价格高很多的虚假价格。人们即使对这种操纵消费者的伎俩心知肚明，也往往会忍不住上当。&lt;&#x2F;p&gt;
&lt;p&gt;施加压力可能是治疗最糟糕的疾病——丧失心智——的唯一方法（基于巴甫洛夫的狗的实验）&lt;&#x2F;p&gt;
&lt;p&gt;不用就忘&lt;&#x2F;p&gt;
&lt;p&gt;把一个人的技能编排成一张检查清单，并常常将这张清单派上用场，也是很重要的。&lt;&#x2F;p&gt;
&lt;p&gt;权威——错误影响倾向。美国有个医生给护士留了手写的字条，吩咐她如何治疗病人的耳痛。纸条上写着：Two drops, twice a day, r.ear。护士把 r.ear（右耳）看成了 rear（屁股），于是让病人翻过身，把滴耳液滴进了病人的肛门。&lt;&#x2F;p&gt;
&lt;p&gt;当几个模型联合起来，你就能得到 lollapalooza 效应（好几种力量共同作用于同一个方向）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>写了个基于SQLAlchemy的ORM</title>
            <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/introduce-thing-an-sqlalchemy-based-orm/</link>
            <guid>https://limboy.me/posts/introduce-thing-an-sqlalchemy-based-orm/</guid>
            <description>&lt;p&gt;看 Rails 时，觉得 Rails 的 ORM 用起来好方便，就想找找 python 有没有类似的，没发现太尽如人意的，就按照自己的意愿，基于 SQLAlchemy Core 重新写了个，取名为 Thing，项目主页: &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;thing&amp;quot;:https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;thing&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-yao-te-xing&quot;&gt;主要特性&lt;&#x2F;h3&gt;
&lt;h1 id=&quot;shi-yong-fang-bian-ling-huo&quot;&gt;使用方便，灵活&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-yan-zheng&quot;&gt;支持验证&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-shi-jian-hong-fa&quot;&gt;支持事件触发&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-duo-shu-ju-ku-lian-jie&quot;&gt;支持多数据库连接&lt;&#x2F;h1&gt;
&lt;p&gt;不想把 ORM 做得太 magic，将来优化起来会不太方便，所以只是简单地封装了下，既保证了使用起来比较方便，将来涉及到分库分表或缓存时也可以从容应付。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h3&gt;
&lt;p&gt;推荐使用 virtualenvwrapper&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;mkvirtualenv thing
&lt;&#x2F;span&gt;&lt;span&gt;cdvirtualenv
&lt;&#x2F;span&gt;&lt;span&gt;pip install &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;git+git:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;thing.git&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chuang-jian-mo-xing&quot;&gt;创建模型&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个继承 Thing 的基类，主要是设置数据库连接&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sqlalchemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;create_engine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;thing
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;master_engine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;create_engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:&#x2F;&#x2F;root:123456@localhost:3306&#x2F;test&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;slave_engine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;create_engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:&#x2F;&#x2F;root:123456@localhost:3307&#x2F;test&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;thing.Thing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;thing.Thing.__init__(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;master&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: master_engine,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;slave&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: slave_engine})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;h5. 注意事项：&lt;&#x2F;p&gt;
&lt;h1 id=&quot;suo-you-de-mo-xing-lei-du-yao-ji-cheng-basething&quot;&gt;所有的模型类都要继承 BaseThing&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;ru-guo-mei-you-zai-zi-lei-li-ding-yi-tablename-ze-mo-ren-shi-yong-xiao-xie-de-zi-lei-ming-zuo-wei-biao-ming&quot;&gt;如果没有在子类里定义_tablename，则默认使用小写的子类名作为表名&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;biao-zi-duan-hui-bei-zi-dong-huo-qu&quot;&gt;表字段会被自动获取&lt;&#x2F;h1&gt;
&lt;p&gt;假设有这么个场景：一个用户有多个答案，每个答案可以被多人投票。我们可以新建 3 个 Model&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;thing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sqlalchemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;create_engine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;formencode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;validators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;blinker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;signal
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vote_before_insert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;vote.before_insert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 验证email字段
&lt;&#x2F;span&gt;&lt;span&gt;    email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validators.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;noAt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;invalid email&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;answers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;member_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;votes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Vote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;answer_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @vote_before_insert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_vote_before_insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;vote&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;vote.answer.title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            vote.errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;answer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;signal test&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vote&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.member_id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;answer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.answer_id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用户与答案是一对多的关系，这里通过@property 装饰器来实现，在 answers 方法内，可以很灵活地实现答案获取的方法。&lt;&#x2F;p&gt;
&lt;p&gt;在 Answer 模型里有一个 vote_before_insert 装饰器，在 vote 执行 insert 操作前_vote_before_insert 方法会被触发，可以在这里做很多事，如缓存的处理，数据的验证等等。如果验证不通过，可以设置 sender 的 errors 属性，该属性一旦被设置，后续的操作将被中断，在这里 vote 就不会执行 insert 操作。&lt;&#x2F;p&gt;
&lt;p&gt;h5. 注意事项：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;# 验证使用的是formencode，这个库支持很多的验证操作，&amp;quot;http:&#x2F;&#x2F;www.formencode.org&#x2F;en&#x2F;latest&#x2F;Validator.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 一共有6类事件：model.before_validation &#x2F; after_validation &#x2F; before_insert &#x2F; after_insert &#x2F; before_update &#x2F; after_update
&lt;&#x2F;span&gt;&lt;span&gt;# 事件触发时第一个参数为model本身，第二个参数为数据，如果在某个事件响应函数处，设置了model.errors属性，则此次事件之后的代码都不会执行。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;lie-chu-yi-ge-yong-hu-de-id-10-de-suo-you-hui-da-mei-ci-qu-10-ge&quot;&gt;列出一个用户的 id&amp;gt;10 的所有回答，每次取 10 个&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;answer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.answers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;answer.title
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;chuang-jian-xin-yong-hu&quot;&gt;创建新用户&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo@bar.com&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;member.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.saved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# foo@bar.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;geng-xin-yong-hu-xin-xi&quot;&gt;更新用户信息&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo@bar.com&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.saved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# foo@bar.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;yan-zheng-xin-xi&quot;&gt;验证信息&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;member.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.errors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;email&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# invalid email
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;duo-shu-ju-ku-lian-jie&quot;&gt;多数据库连接&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;slave&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在执行 find &#x2F; findall &#x2F; save 操作时，有一个 db_section 选项，如果忽略，则默认使用初始化时传入的 engide dict 的第一项，在这里就是 master，如果想选择其他的数据库，传入该数据库对应的 key 就行，比如 slave&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;# 查看某次插入或更新是否成功，可以检查errors属性，如果为空表示执行成功
&lt;&#x2F;span&gt;&lt;span&gt;# 如果model的key中包含主键，如id，则执行save时是一个更新操作，否则为插入
&lt;&#x2F;span&gt;&lt;span&gt;# 欢迎fork &#x2F; test &#x2F; feedback
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>小谈摄影</title>
            <pubDate>Sun, 25 Dec 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-photograph/</link>
            <guid>https://limboy.me/posts/about-photograph/</guid>
            <description>&lt;p&gt;这个标题我纠结了好久，因为『谈论』一般是牛人们的用词，本人摄影小菜鸟一枚，不敢随便用，但一时又找不到合适的词，就先借用一下了。&lt;&#x2F;p&gt;
&lt;p&gt;注：以下内容，纯属个人观点，如有同感，深感荣幸 :)&lt;&#x2F;p&gt;
&lt;p&gt;摄影的时间不长，拍照倒是有些年头了，很多人会把拍照和摄影混为一谈，就好像会写代码的都是程序员，会入侵电脑的都是黑客一样。在我看来，摄影最重要的是一颗敏感的心和善于发现的眼睛(器材当然也重要，但重要性不如前者），而拍照只需要一个还过得去的相机就行。拍照的一个很重要作用是留念，如和李开复合影，或者在故宫门前摆个 POSE，或者看到某个美景，忍不住按下了快门。而摄影不一样，摄影要累多了，同样是面对某个美景，一个优秀的摄手会尝试各种拍摄手法、构图、用光、光圈大小、快门时间等等，比如面对瀑布，增加快门时间，可以营造水幕的感觉，缩短快门时间又可以抓住飞溅而起的水花。但如果只是拍照，那么拿相机对着瀑布，咔嚓一下就可以了，算是对自己去过某地的证明。&lt;&#x2F;p&gt;
&lt;p&gt;一个优秀的摄影作品至少要满足『美』和『故事』两者中的一个。美不用说了，故事的意思是，看到一张照片，你会被照片中的主体所吸引，进而去猜测作者拍此照片的意图，甚至去想像作者当时的心情，姿态，等等。照片本身不一定惊艳，但背后的故事却值得细细回味。比如&lt;a href=&quot;http:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;zhou_mengjie&#x2F;6318039145&quot;&gt;这张&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  照片找不到了···
&lt;&#x2F;aside&gt;
&lt;p&gt;第一眼可能觉得并不是很漂亮，但马上会被主体所吸引：dancing in the rain。可以从这张照片中看到一种生活态度：大多数人在雨天的路上，多半是行色匆匆，而照片中的主角却可以享受这场雨，雨仿佛成为了一个道具。如果喜欢的话还可以进一步把雨抽象为各种挫折，然后你会看到一种与困境共舞的心态。此时，作者真正想要表达的是什么已经不重要了，重要的是你从这张照片中看到了什么。&lt;&#x2F;p&gt;
&lt;p&gt;摄影的难度还在于抓住瞬间。当你去参加婚礼，整个场面让你感到很喜庆，但当你认认真真地想找到几个喜庆的镜头时，就会卡住。大家看上去都很 happy，那么是来张全景的，还是抓拍某个特别 happy 的人；婚礼布置的很漂亮，但是从哪个角度去拍效果最好；怎么才能表现出新郎新娘很恩爱，等等。首先脑海中要先有这些意识，然后再从现场找到能够凸显这些特点的画面，这些画面很可能稍纵即逝，或者你没有注意到，或者拍摄角度不对，等等。所以你需要不断调整，不断发现，不断按下快门。这么做的结果就是你无法融入到整个婚礼的过程，只是纯粹以一个摄影师的身份在记录。引用豆友&lt;a href=&quot;http:&#x2F;&#x2F;www.douban.com&#x2F;people&#x2F;shinewewe&#x2F;&quot;&gt;想念的树&lt;&#x2F;a&gt;的一段话：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我越来越意识到，好多时候我并不愿意拿出相机来截断那些美妙的时刻。&lt;br &#x2F;&gt;
我不是说拍下来那就不美妙了，只是你必须意识到并且接受那种变化，一旦发生，即产生了一个时间节点。&lt;br &#x2F;&gt;
气氛，记忆发生或多或少的改变。&lt;br &#x2F;&gt;
于是我更愿意就那样放弃拍摄的想法，让那些瞬间在记忆中延续下去，流动成诗篇。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;再来说说器材。经常会看到对是否应该配备高端器材的争论，主要争论点是：硬件上去了，那么出来的照片主要是你的功劳还是相机的功劳？你是否沦为了高端器材的奴隶？DigitalRev 曾经做过一个实验，让一个专业的摄影师使用低端的卡片机，然后让一个基本不会摄影的人使用高端相机，结果卡片机的效果并不差，而高端相机的效果也没有好到哪去。所以一张好照片肯定是人与相机完美合作的结果。最悲惨的一个场景是，一个高端相机被一个不懂摄影的人当作炫耀的资本，那个相机一定很郁闷，空有一身好武艺，奈何主人无色心。但我还是不太喜欢一味地追求高配（因为我很穷 XDD），这会让你偏离摄影的主旨(除非是工作原因)，少了那颗发现的心，照片即使看上去很漂亮，也经不起细细品味。&lt;&#x2F;p&gt;
&lt;p&gt;摄影很难，也很累，但很有乐趣，也很有意义。送上我很喜欢的一首小诗（&lt;a href=&quot;http:&#x2F;&#x2F;www.douban.com&#x2F;group&#x2F;topic&#x2F;3764247&#x2F;&quot;&gt;青铮：迦陵频伽——我们所追寻的&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我伸手想要握住光，&lt;br &#x2F;&gt;
光却消失掉；&lt;br &#x2F;&gt;
我用镜头对准风，&lt;br &#x2F;&gt;
风不知去了哪里。&lt;br &#x2F;&gt;
然而我从不曾气馁，&lt;br &#x2F;&gt;
也从来不曾放弃希望；&lt;br &#x2F;&gt;
我总是背着我的相机，&lt;br &#x2F;&gt;
走过每一天，走遍这个城市。&lt;&#x2F;p&gt;
&lt;p&gt;我曾经寻找一个女孩子的身影，&lt;br &#x2F;&gt;
不肯相信我不能找到，&lt;br &#x2F;&gt;
因为我寻找的不是她的身份或名字，&lt;br &#x2F;&gt;
也不是发生在她生命中的我所不知道的故事。&lt;br &#x2F;&gt;
我寻找的是她留在我画面上的东西，&lt;br &#x2F;&gt;
还有我的画面不曾清晰表达的东西；&lt;br &#x2F;&gt;
光一样会消失，却又永远在那里的东西，&lt;br &#x2F;&gt;
风一样不可捉摸，但总是会回来的东西。&lt;&#x2F;p&gt;
&lt;p&gt;你别问我那是什么，&lt;br &#x2F;&gt;
我将不知如何回答。&lt;br &#x2F;&gt;
正如我不知为何我要背着相机，&lt;br &#x2F;&gt;
走遍这个城市，走遍这个世界，&lt;br &#x2F;&gt;
年复一年，直到我生命的最后一天，&lt;br &#x2F;&gt;
直到我还能为一个画面感动不已。&lt;&#x2F;p&gt;
&lt;p&gt;是的，我不知道为什么，&lt;br &#x2F;&gt;
一如这个世界上的每一种追寻，&lt;br &#x2F;&gt;
我只能说，它使我的人生完整，&lt;br &#x2F;&gt;
它使我的生命具有意义。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最后小小的宣传下自己的小站：&lt;a href=&quot;http:&#x2F;&#x2F;wuditoo.com&quot;&gt;无敌兔&lt;&#x2F;a&gt;，如果你有不错的照片，不妨去分享下:)&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  网站也找不到了···
&lt;&#x2F;aside&gt;</description>
        </item>
        
        
        <item>
            <title>一次失败的上线</title>
            <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learned-from-an-unsuccessful-project/</link>
            <guid>https://limboy.me/posts/learned-from-an-unsuccessful-project/</guid>
            <description>&lt;p&gt;由于上一次通知的上线引来用户的一些不满，所以产品马不停蹄，在一轮又一轮的需求讨论中设计了下一版通知，希望尽快上线，我负责通知的后端实现，当时看到图后，有点小小的崩溃：时间太紧，难度很大，很多地方不属于通知。但是既然定下来了，就只能咬咬牙，拼一拼了。&lt;&#x2F;p&gt;
&lt;p&gt;于是接下来的 9 天，变成了一段难忘的回忆，基本上都是 3 点以后回家，第二天赶上免费的午餐后，继续 coding。最后一天还剩了些 bug，索性就不回家了，就这样勉强完成了新版的通知，但随后又被推翻，当时确实很愤怒，但细细想想确实有不少地方还不够到位，尤其是新通知的架构，作为责任人之一，以下是我的一些感悟和反思。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mei-you-bu-ke-neng&quot;&gt;没有不可能&lt;&#x2F;h3&gt;
&lt;p&gt;阿迪同学让这句话在全世界流行，但越是常见的东西，越容易熟视无睹。我们相信没有不可能，因为有太多的案例可以证明这句话，但要身体的每一个细胞都坚信这句话就很难了。只有在自己做了一些让后来的自己都不得不佩服的事情时，才会把这句话刻在心里。这样的事对我来说还太少了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-dui-you-hen-guan-jian&quot;&gt;好的队友很关键&lt;&#x2F;h3&gt;
&lt;p&gt;产品同学(ecvip)会把每个设计和交互讲解地很清楚，会陪着我们熬到很晚。前端同学(Dang &amp;amp; 骁哥)总是能高效地完成页面，思路很清晰，我总是觉得自己在拖他们的后腿。后端同学也就是我，估计是这个木桶最短的那块。还有就是 CTO 申申同学并没有过于责备这次的失败，而是要请我们撮一顿，那个感动啊。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xu-qiu-shi-hui-bian-hua-de&quot;&gt;需求是会变化的&lt;&#x2F;h3&gt;
&lt;p&gt;我这次就是栽倒这上了，为了满足当前的需求而设计了对应的架构，导致后来需求发生变化时很难应对。在设计时就应该考虑到将来的可变性，尽量灵活。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-xiang-bie-ren-qing-jiao&quot;&gt;多向别人请教&lt;&#x2F;h3&gt;
&lt;p&gt;由于时间比较紧，加上自己理解上的偏差，在设计后端架构时没有与其他同学进行沟通，就直接进行代码实现。写着写着就觉得有点奇怪，但已经这样了，就只能继续按着现在的架构走。等到后来杨昆同学 review 代码时才发现：我靠，怎么成了这样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-ji-zi-ji-de-ji-neng&quot;&gt;升级自己的技能&lt;&#x2F;h3&gt;
&lt;p&gt;海贼王里，每一次战斗，大家的技能都会有提升，越是大的战斗，敌人越强劲，技能升级地越高。在现实中，应该是在大的战役前做好充足的技能储备，打完战役后，总结哪些地方还需要继续提升和完善，接下来再有目的地去改进，避免在下次的战役中出现同样的问题。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine1.jpg&quot;
        width=&quot;700&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine2.jpg&quot;
        width=&quot;700&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>使用python和redis实现实时聊天室</title>
            <pubDate>Wed, 26 Oct 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/python-comet/</link>
            <guid>https://limboy.me/posts/python-comet/</guid>
            <description>&lt;p&gt;实时的实现一般有 ajax long poll &#x2F; iframe stream &#x2F; websocket 这三种。websocket 有浏览器的限制;iframe 会使页面一直处于 loading 状态(如果没有这个限制，iframe stream 相比 long poll 还是比较有优势的); ajax long poll 因为它的跨浏览器特性，加上实现比较简单，所以不少的实时应用都选择了 long poll, 这里也选择 ajax long poll 来实现&lt;&#x2F;p&gt;
&lt;p&gt;放个截图先：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;python-comet&amp;#x2F;comet_chat.png&quot;
        width=&quot;606&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;主要工具：python (flask &#x2F; gevent &#x2F; apscheduler) + redis&lt;&#x2F;p&gt;
&lt;p&gt;目前这个聊天室的功能还比较简单，可以实时更新全局在线用户，当前聊天室在线用户和聊天内容，都是通过一个 ajax 长连接实现的。在这个连接里定义了需要实时的内容，相应的内容一旦在服务端更新，可以马上推送到各个客户端。&lt;&#x2F;p&gt;
&lt;p&gt;实时最大的挑战在于如何能在服务端尽量简单，灵活地实现。因为越是简单，就越不容易滋生 bug，即使出现问题，查找起来也很方便;越是灵活，就越容易应付多变的需求。以聊天室为例，当新用户加入后需要更新所有客户端的当前成员列表;有成员退出后也要更新该列表。每个聊天室有了新内容后都要实时推到所有客户端;给某个用户发私信，对方也可以实时收到。这些如果处理地不好，很容易与当前的逻辑发生耦合，为将来的调整和 bug 的查找带来困难。&lt;&#x2F;p&gt;
&lt;p&gt;依靠强大的 redis，设计了这个简易的实时聊天室，基本架构如下:&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;python-comet&amp;#x2F;comet_arch.png&quot;
        width=&quot;487&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;匆忙完成了初步的代码，还有不少需要优化的地方，有些功能也还没加上（如私信的实时通知）。接下来的一段时间内会逐步完善，如果有更好的 idea，欢迎沟通 :)&lt;&#x2F;p&gt;
&lt;p&gt;代码地址：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;chat&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;chat&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果使用过程中遇到什么问题，或有好的建议可以在&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;chat&#x2F;issues&quot;&gt;这里&lt;&#x2F;a&gt;反馈&lt;&#x2F;p&gt;
&lt;h3 id=&quot;version-0-2&quot;&gt;version 0.2&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;调整了实时的策略，抛弃 pubsub 模式，使用 zset+timestamp。同时修正了在聊天内容频繁发送时会丢部分信息的 bug&lt;&#x2F;li&gt;
&lt;li&gt;添加了管理员角色（目前只能用于删除聊天室）&lt;&#x2F;li&gt;
&lt;li&gt;修正重复名的 bug（无法完全避免，只能在登录时验证）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;version-0-1-1&quot;&gt;version 0.1.1&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;调整了添加聊天室的体验&lt;&#x2F;li&gt;
&lt;li&gt;更快的聊天内容显示速度&lt;&#x2F;li&gt;
&lt;li&gt;可以删除自己创建的聊天室&lt;&#x2F;li&gt;
&lt;li&gt;bugfixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;version-0-1&quot;&gt;version 0.1&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;intro&quot;&gt;intro&lt;&#x2F;h4&gt;
&lt;p&gt;某天晚上打球回来，到家已将近 11 点，洗完澡，代码敲到 2 点左右倒下，天还没亮就被猫叫醒，醒来后就一直想如何改进这个聊天室，觉得能在一个页面实时看到每个聊天室的内容，还是很酷的，于是就按着这个想法实现了。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 如果不是全新安装，需要执行 bin&#x2F;python scripts&#x2F;clear_key.py 来清除 redis cache&lt;&#x2F;p&gt;
&lt;h4 id=&quot;changelog&quot;&gt;changelog&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;可以自定义昵称&lt;&#x2F;li&gt;
&lt;li&gt;调整了聊天页的内容和样式&lt;&#x2F;li&gt;
&lt;li&gt;添加了 home 页（显示所有的聊天室，并实时更新每个聊天室的内容）&lt;&#x2F;li&gt;
&lt;li&gt;使用 coffee-script 重写了 js 部分&lt;&#x2F;li&gt;
&lt;li&gt;bugfixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;screenshot&quot;&gt;screenshot&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;python-comet&amp;#x2F;comet_home_0.1.png&quot;
        width=&quot;614&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;python-comet&amp;#x2F;comet_room_0.1.gif&quot;
        width=&quot;614&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>python的简单MapReduce实现：计算π</title>
            <pubDate>Sat, 10 Sep 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/python-mapreduce-pi/</link>
            <guid>https://limboy.me/posts/python-mapreduce-pi/</guid>
            <description>&lt;p&gt;MapReduce 是 Google 提出的一个软件架构，一般用于大规模数据集的并行运算。核心概念就是&amp;quot;Map（映射）&amp;quot;和&amp;quot;Reduce（化简）&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;简单说来就是把一个任务分割成多个独立的子任务，子任务的分发由 map 实现，子任务计算结果的合并由 reduce 实现。&lt;&#x2F;p&gt;
&lt;p&gt;mapreduce 的应用场景多是那种互不依赖，上下文无关的任务。所以类似 Fibonacci 数列这种对输入有依赖的就不适合使用 mapreduce。&lt;&#x2F;p&gt;
&lt;p&gt;回到正题，要计算圆周率，我们先构建这么个模型&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;img&#x2F;inscribe.png&quot; &#x2F;&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 外面的正方形面积
&lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(2r)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(2r) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; 4r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 里面的圆的面积
&lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r)
&lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 4r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;As
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是说只要算出圆的面积与正方形面积的比，就可以求出圆周率。&lt;&#x2F;p&gt;
&lt;p&gt;可以通过以下步骤计算 Ac &#x2F; As：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;随机在正方形里生成许多点&lt;&#x2F;li&gt;
&lt;li&gt;计算点在圆内与在正方形内的比例&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;测试的随机点越多，结果越精确&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#coding=utf-8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Process
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MapReduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;map_func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;reduce_func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;workers_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.map_func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;map_func
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.reduce_func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reduce_func
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.workers_num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;workers_num
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;workers_num:
&lt;&#x2F;span&gt;&lt;span&gt;            workers_num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cpu_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Pool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(workers_num)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__call__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        map_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.pool.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.map_func, inputs)
&lt;&#x2F;span&gt;&lt;span&gt;        reduce_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;reduce_func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(map_result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;reduce_result
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.name,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; processing&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    points, circle_round &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(points)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 这里其实只取了1&#x2F;4圆
&lt;&#x2F;span&gt;&lt;span&gt;        x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;circle_round
&lt;&#x2F;span&gt;&lt;span&gt;        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;circle_round
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;circle_round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;points_in_circle
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count_circle_points&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;points_list&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sum(points_list)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;__main__&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 半径
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CIRCLE_ROUND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 总点数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10000000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 总进程数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    map_reduce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;MapReduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(calculator, count_circle_points, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    inputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CIRCLE_ROUND&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM
&lt;&#x2F;span&gt;&lt;span&gt;    all_points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map_reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(inputs)
&lt;&#x2F;span&gt;&lt;span&gt;    ac_as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(all_points_in_circle)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;pi approach to:&lt;&#x2F;span&gt;&lt;span&gt;%7f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ac_as)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是比较简单的单机 mapreduce，用多进程就可以实现。如果是多机运算的话，就麻烦多了，类似这张图：&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;img&#x2F;mrfigure.png&quot; width=&#x27;700px&#x27;&#x2F;&gt;
&lt;p&gt;参考链接[2]有对这张图的解释&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;http:&#x2F;&#x2F;blog.doughellmann.com&#x2F;2009&#x2F;04&#x2F;implementing-mapreduce-with.html&quot;&gt;http:&#x2F;&#x2F;blog.doughellmann.com&#x2F;2009&#x2F;04&#x2F;implementing-mapreduce-with.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[2] &lt;a href=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;mapreduce-tutorial.html&quot;&gt;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;mapreduce-tutorial.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)How To Find What You Love To Do</title>
            <pubDate>Sun, 04 Sep 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-find-what-you-love-to-do/</link>
            <guid>https://limboy.me/posts/how-to-find-what-you-love-to-do/</guid>
            <description>&lt;p&gt;我们都知道要做自己喜欢的，但自己真正喜欢什么，却未必清楚。也很少有时间问问自己：这辈子究竟要做些什么？怎么做才无愧此生？生活就像一个没有设置 break 的 while True 循环，一旦开始就停不下来了。上班要忙上班的事，周末要聚会，看电影，玩游戏，逛街，把上班时的痛苦补回来，然后在不情愿中迎接下一个周一。这是自己想要的生活吗？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;briankim.net&#x2F;blog&#x2F;2006&#x2F;07&#x2F;how-to-find-what-you-love-to-do&#x2F;&quot;&gt;原文链接&lt;&#x2F;a&gt;(gfwed)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;这篇文章是受乔布斯在斯坦福大学的演讲的启发，在那次演讲中，他说了我们听了不下千次的建议：&lt;&#x2F;p&gt;
&lt;p&gt;bq. 你必须找到你所爱的。无论是工作还是爱人。工作将占据你生命中大部分时间，你只有相信自己所做的是伟大的工作, 才能怡然自得。而有伟大成就的唯一途径就是爱你所做的。-- Steve Jobs&lt;&#x2F;p&gt;
&lt;p&gt;这也自然而然地牵扯出另一个问题：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-zhao-dao-zi-ji-suo-ai-de&quot;&gt;如何找到自己所爱的？&lt;&#x2F;h3&gt;
&lt;p&gt;这是一个大问题。&lt;&#x2F;p&gt;
&lt;p&gt;真正让自己热血沸腾的是我们可以一直做自己最爱的事，但却没有循序渐进的教程可以帮助我们找到自己所爱的。以往的经验能起一点作用，但无法形成一套体系。&lt;&#x2F;p&gt;
&lt;p&gt;为了找到自己的热情，可以问自己：如果有一百万美元，你想做什么？&lt;&#x2F;p&gt;
&lt;p&gt;典型的回答是：会把这些钱存入银行，然后每年光利息就可以生活了。然后会搬到夏威夷，买一个别墅，品尝所有的美味，看看书，搞点体育运动，等等。&lt;&#x2F;p&gt;
&lt;p&gt;这样的回答有帮助吗？可能吧。比如，你知道了自己原来是个大懒鬼，但这并没有回答背后的问题：如何能做自己喜欢的事，还能挣到钱？&lt;&#x2F;p&gt;
&lt;p&gt;人们从事着自己讨厌的工作，感觉像掉入了陷阱，因为他们无法离开，他们靠着这唯一的收入来维持目前的生活状态，以此来逃避现实，漂流在严酷、漫无目的的生活中，简而言之：活在平静的绝望中。&lt;&#x2F;p&gt;
&lt;p&gt;你或许会问：他们为什么不辞职，追求自己喜欢的呢？&lt;&#x2F;p&gt;
&lt;p&gt;两个原因：&lt;&#x2F;p&gt;
&lt;p&gt;原因 1：他们不知道自己最喜欢的事
原因 2：恐惧。他们要维持目前的生活，有账单要付，家人要照顾，怕没有稳定的收入来源，怕别人异样的目光或说三道四，等等。搞定原因 1，接下来的就会迎刃而解。&lt;&#x2F;p&gt;
&lt;p&gt;无论你信不信，想要找到自己的激情所在已经是一个很大的进步了。很多人，他们一生都在回避或者根本没想过这个问题。当他们听到这个问题时，会很熟练地忽视之。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-zhao-dao-zi-ji-suo-ai-de-zhe-shi-yi-ge-hen-zhong-yao-de-wen-ti-er-ni-bi-xu-zhao-dao-da-an&quot;&gt;如何找到自己所爱的？这是一个很重要的问题，而你必须找到答案&lt;&#x2F;h4&gt;
&lt;p&gt;你必须自己决定目的地，不然生活就会替你做决定。如果知道了目的地，剩下的就很简单了。&lt;&#x2F;p&gt;
&lt;p&gt;你会发现，一旦你找到了自己所爱的，所有的不确定、负担都会从你的肩上滑落，你会很清楚地看到自己的旅程，一趟充满欢喜的旅程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在你看完这篇文章时，我真心地希望你能够实践之。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-zhao-dao-zi-ji-suo-ai-de-na-yao-nan&quot;&gt;为什么找到自己所爱的那么难？&lt;&#x2F;h3&gt;
&lt;p&gt;答案是：&lt;&#x2F;p&gt;
&lt;p&gt;这一点都不难。是的，你没看错，一点都不难&lt;&#x2F;p&gt;
&lt;p&gt;那为什么这么多人都被这个问题所困扰呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;因为他们从未真正地问过自己&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我觉得很有意思的一件事是，人们好像总是要让自己做点什么，停不下来。比如：出去玩、聚会、逛街等等。不要误解，做这些事没有任何问题。但我怀疑大部分人都有这样的心态：我必须每时每分都做点什么，因为我做不了自己。只是想让自己在别人面前看起来风光一点。但事实上，要让自己充实起来，应该多花一点时间在自己身上。&lt;&#x2F;p&gt;
&lt;p&gt;人们以为必须环游世界，尝试新事物等等才能找到自己的所爱。不，你只要坐下来，然后决定。答案已经在你心里。你只要把它挖出来，别耽搁。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Just let it out.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;说实话，你有没有曾经独自一人坐下来，抛开手机，离开电脑，关上电视、聊天工具，关上自己最爱听的歌，关闭游戏，停止检查邮件、回复电话、浏览杂志等等其他一切分心的事，扪心自问：自己到底喜欢什么？&lt;&#x2F;p&gt;
&lt;p&gt;你害怕问题的答案，因为答案是：我不知道。&lt;&#x2F;p&gt;
&lt;p&gt;这也是为什么你必须找到答案的原因。承认自己不知道，这是 ok 的，比那些自动跳过的好多了。&lt;&#x2F;p&gt;
&lt;p&gt;下面让我们一步一步地来找到答案。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-hao-wu-yi-wen-ni-yi-ding-hui-zhao-dao-da-an&quot;&gt;Step 1: 毫无疑问，你一定会找到答案&lt;&#x2F;h4&gt;
&lt;p&gt;你一定会找到，无庸置疑。&lt;&#x2F;p&gt;
&lt;p&gt;带着这样的心态，你就一定会找到。会花多长时间？不重要。你终将会找到。&lt;&#x2F;p&gt;
&lt;p&gt;这样做，你会自动开启反放弃机制，因为你知道你一定会找到答案。&lt;&#x2F;p&gt;
&lt;p&gt;比如，如果你知道你要去纽约，你就会找到去那里的方法，你会搭车、火车或飞机，然后到达。&lt;&#x2F;p&gt;
&lt;p&gt;如果没有钱，你可以借，或者找份工作省钱，或者找一份空姐&#x2F;空哥的工作，这样就可以免费去那。花多长时间不重要，要做些什么也不重要，因为你知道你要去纽约。&lt;&#x2F;p&gt;
&lt;p&gt;你这个决定之后所有的行动都会围绕着『去纽约』而展开。&lt;&#x2F;p&gt;
&lt;p&gt;再读一遍最后这句&lt;&#x2F;p&gt;
&lt;p&gt;你这个决定之后所有的行动都会围绕着『去纽约』而展开。&lt;&#x2F;p&gt;
&lt;p&gt;找到你所爱的 ＝ 决定去纽约&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-fen-liang-lie-lie-yi-ge-ji-neng-qing-dan-he-xing-qu-lie-biao-bing-qie-xie-xia-lai&quot;&gt;Step 2: 分两列，列一个技能清单和兴趣列表，并且写下来&lt;&#x2F;h4&gt;
&lt;p&gt;再强调一遍：写下来。不要以为你可以在头脑中完成。&lt;&#x2F;p&gt;
&lt;p&gt;我这说的技能是任何技能。可以是无形的。比如编程，网页制作，聊天，倾听，说服别人，打字，调情，分析，演讲，让事情易于理解，吹口哨等等。不要害羞，列出所有自己的技能。&lt;&#x2F;p&gt;
&lt;p&gt;在另一列，列出自己的兴趣，同样，也不要害羞。列出所有你能想到的兴趣。蜘蛛、鞋子、头发、化妆品、篮球、网球、幻想、保姆、散步、ps、fireworks、帮助别人、搞笑、钓鱼、空手道、瓶起子等等，什么都行。是的，我提到了瓶起子。你的兴趣也可以包含自己擅长的方面。计算机、经济学、生物学、篮球、足球、魔术等等。&lt;&#x2F;p&gt;
&lt;p&gt;为了帮助你写下更多的兴趣爱好，想想之前的那份工作你最感兴趣的是什么，不感兴趣的又是什么。&lt;&#x2F;p&gt;
&lt;p&gt;问自己以下这些问题有助于发现自己追求的技能和兴趣&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你去一个书店，那个书架上的书对你的引力最大？问问朋友他们眼中你的技能和兴趣。你会惊叹于他们的洞察力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你把大多数的时间都花在了哪些事上？做这些事你期望得到怎样的结果？像小孩子一样想像自己的成就。都有哪些技能和兴趣对你的成就有帮助？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你做了什么别人会感谢你？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你的老师或家人有没有说过你有什么诀窍？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;为什么我一再强调技能和兴趣？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;技能：你必须依赖你的强项。不要告诉我你什么也没有。每个人都有技能。你只是没有坐下来细想，并且写下来。&lt;&#x2F;p&gt;
&lt;p&gt;兴趣：很简单，你必须爱你所做的。&lt;&#x2F;p&gt;
&lt;p&gt;专注于你能想到的兴趣和技能，并且写下来&lt;&#x2F;p&gt;
&lt;p&gt;你会发现你的技能好像受了引力作用一样偏向一种或两种技能，兴趣也一样。好，下面让我们进入步骤 3&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-3-wen-zheng-que-de-wen-ti-lai-zhao-dao-zi-ji-de-zui-ai&quot;&gt;Step 3：问正确的问题来找到自己的最爱&lt;&#x2F;h4&gt;
&lt;p&gt;找一个真正属于自己的时间和空间，没有任何分心的东西，通过问正确的问题来找到自己的最爱&lt;&#x2F;p&gt;
&lt;p&gt;我发现一个很有趣的现象，人们总是为税务、烹饪、电影、阅读留出时间，但是涉及到自己的将来时，却从来不会腾出时间。&lt;&#x2F;p&gt;
&lt;p&gt;现在，假如你已经安排了私人时间，没有杂事干扰，然后呢？&lt;&#x2F;p&gt;
&lt;p&gt;你必须问自己一个清晰的问题，清晰是关键，问题越清晰，回答越简单。&lt;&#x2F;p&gt;
&lt;p&gt;比如，我问，12x12 等于多少？答案很明了：144&lt;&#x2F;p&gt;
&lt;p&gt;如果我问两个偶数和另外两个偶数的乘积？这就很难回答了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;清晰的问题引出清晰的答案&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;另外一个关键点是：写下来。我知道你听过一万次了，不过这是有原因的。把东西写下来有助于你在各项之间建立联系，这在脑海里是很难完成的。&lt;&#x2F;p&gt;
&lt;p&gt;如果你在之前的阶段没有写下技能和兴趣，那么停下，马上写下来。放在大脑里是不会有帮助的。&lt;&#x2F;p&gt;
&lt;p&gt;现在利用独处的时间问自己一个清晰的问题，这个问题会是：“我最喜欢做什么？”吗？&lt;&#x2F;p&gt;
&lt;p&gt;这个问题有点广泛了，再缩小一点，问自己：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在每天的生活中，我最喜欢做什么，可以同时结合我的技能和兴趣，并给人们的生活带来重大价值？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看到区别了吗？问题越具体，越清晰，回答起来就越方便。我为什么加了价值这一项，？因为这会帮助你找到挣钱的方法。&lt;&#x2F;p&gt;
&lt;p&gt;“通过技能和兴趣带来重大价值”，可以自动过滤那些普遍的答案，如：“看电视”，或“玩游戏”，这些答案往往会带来消极因素，因为看不到挣钱的方法。&lt;&#x2F;p&gt;
&lt;p&gt;顺带一句，很多人会误解这句话的核心，把重点放在了挣钱上。钱只是通过产品或服务为人们的生活带去方便的一个副产品&lt;&#x2F;p&gt;
&lt;p&gt;当你知道你可以为别人的生活带来方便时，你就会知道如何挣钱。&lt;&#x2F;p&gt;
&lt;p&gt;打开 Word 或纸张，在最前面写下这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;在每天的生活中，我最喜欢做什么，可以同时结合我的技能和兴趣，并给人们的生活带来重大价值？&lt;&#x2F;p&gt;
&lt;p&gt;再强调一遍，重点是写下你自己的答案&lt;&#x2F;p&gt;
&lt;p&gt;看看之前列的两列清单，写下答案，有多少，写多少。不必完美，也不一定要有什么意义。因为迟早你会把这些关连起来。下面这个故事可以帮助阐述我的意思。&lt;&#x2F;p&gt;
&lt;p&gt;有一个小镇，以滑雪而出名，吸引了一大批游客前来，这对于促进经济有很大的作用。但是，下雪时，雪会沉积在电缆上，直到把电缆压跨，导致部分能源过载。慢慢的游客们都不来了，于是小镇举行了一个会议，讨论如何解决雪压跨电缆的问题。很久都没有好的解决方案。&lt;&#x2F;p&gt;
&lt;p&gt;突然有人在会议室的后面大声喊道“我们可以在电缆上放几盆蜂蜜，让熊爬上电缆，拿到蜂蜜，熊的这一系列动作会把电缆上的雪抖落”&lt;&#x2F;p&gt;
&lt;p&gt;在座的都笑了，有人接这个话茬“那我们怎么再在这些盆里放蜂蜜呢？”“可以用直升飞机”，另一个人说。&lt;&#x2F;p&gt;
&lt;p&gt;于是答案就出来了，让直升飞机在电缆上飞，通过螺旋桨的风力把雪吹落。&lt;&#x2F;p&gt;
&lt;p&gt;我想说的是，无论答案有多可笑，都不用害怕，因为它们常常能帮你找到最终的结果。这是过程的一部分。&lt;&#x2F;p&gt;
&lt;p&gt;所以无论多滑稽，写下来。写下所有的答案。直到你有了 20 个答案，然后回顾它们。你会发现，你写下的答案会帮助你找到新的答案。&lt;&#x2F;p&gt;
&lt;p&gt;你会惊叹写下的所有东西，以及各个富有创意的想法。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;现在又要集中注意力了&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你肯定听过通过放大镜来聚焦阳光的事。但我还是想说，如果你打算一次处理多件事，那么哪件事都完不成。即使在最热的天，如果你不停移动放大镜，并不会聚焦多大的能量，什么也烧不着。只是无端地浪费自己的精力。&lt;&#x2F;p&gt;
&lt;p&gt;通过管理你的精力，时间，思考等等，在攻克一个目标时，你会惊叹目标完成的深度和效率。就像你在一个东西上放了一个放大镜，而你的欲望，精力，时间，思考，想像就是太阳光。&lt;&#x2F;p&gt;
&lt;p&gt;专注很重要，这里我想再举个例子。想像自己是一只猎豹，正在追逐两只羚羊。如果想同时追逐两个的话，那么什么也抓不到，只能饿死。先拿下一只，这可能需要时间去追击去撕咬，但当你真的吃掉了它，你又充满电了。你可以收集信息：羚羊都往哪个方向跑了，可能在哪块停留，等等。这有助于你今后捕获更多的羚羊，这就形成了良性循环。简而言之：专注于一个目标。&lt;&#x2F;p&gt;
&lt;p&gt;所以检查你刚刚的列表，选择一个最感兴趣的。你可能会发现，你可以把多个想法集中到一个。最好选择一个不仅能给自己带来极大的满足感，还能够帮助别人的想法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-zhi-dao-zi-ji-yi-jing-zhao-dao-liao-zui-ai&quot;&gt;如何知道自己已经找到了最爱？&lt;&#x2F;h4&gt;
&lt;p&gt;做这件事让你觉得爽吗？如果发自肺腑地觉得很爽，那就对了。&lt;&#x2F;p&gt;
&lt;p&gt;如果你的朋友跟你谈论这个话题，你愿意跟他没完没了地谈论吗？&lt;&#x2F;p&gt;
&lt;p&gt;你必须毫无保留地喜欢这件事。如果你感到一丁点的怀疑，那这就不是你的激情所在。你必须急切地渴望克服任何困难来追逐你的激情。&lt;&#x2F;p&gt;
&lt;p&gt;一旦你找到了这件事，你的任务就完成了。&lt;&#x2F;p&gt;
&lt;p&gt;至于如何通过它来挣钱，在你写下答案时，可能已经找到方法了。如果想找到更多挣钱的方法，只需重复之前的步骤。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: 毫无疑问，你一定会找到答案&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: 分两列，列一个技能清单和兴趣列表，并且写下来，你会发现其实有很多挣钱的方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;挣钱的方法只能靠你自己了，不过对你来说应该不难。&lt;&#x2F;p&gt;
&lt;p&gt;现在你知道了自己的最爱以及如何挣钱，该是行动的时候了。&lt;&#x2F;p&gt;
&lt;p&gt;很多人看到这里，没有任何行动，所以他们的生活也没有发生任何变化。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>知乎的困境</title>
            <pubDate>Tue, 19 Jul 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/zhihu/</link>
            <guid>https://limboy.me/posts/zhihu/</guid>
            <description>&lt;p&gt;个人观点，欢迎指正:)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-hu-yao-jie-jue-yi-ge-shi-yao-wen-ti&quot;&gt;知乎要解决一个什么问题？&lt;&#x2F;h3&gt;
&lt;p&gt;如果我遇到以下问题：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;为什么有的照片拍出来建筑物是倾斜的？&lt;&#x2F;li&gt;
&lt;li&gt;陈奕迅的『爱情转移』到底想要表达什么？&lt;&#x2F;li&gt;
&lt;li&gt;iphone4 升级到 ios5 beta3 后，可不可以降到 4.3.3？&lt;&#x2F;li&gt;
&lt;li&gt;如何训练台球的基本功？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;第一反应是到知乎提问，且能在较短时间内得到满意的答复，那么知乎就成了。其实从产品上是完全可以应付的，最难的是用户为什么要来这里提问？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果我有 iphone4，第一反应肯定是去 weiphone。&lt;&#x2F;li&gt;
&lt;li&gt;如果我想更了解电影，豆瓣或 mtime 都是不错的选择。&lt;&#x2F;li&gt;
&lt;li&gt;如果我想精通摄影，会选择蜂鸟或无忌。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;什么时候会想到去知乎？&lt;&#x2F;p&gt;
&lt;p&gt;知乎就好比是宾馆，如果要讨论某个领域的问题，先到前台领门牌号，然后到一个房间讨论。而垂直社区直接就是一个房间，打开门后就可以看到一大堆人在那讨论。&lt;&#x2F;p&gt;
&lt;p&gt;用一段程序来表述大致如下&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dang-qian-zhuang-tai&quot;&gt;当前状态&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;蜂鸟&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;无忌&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;mtime&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;douban&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;咖啡厅&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# when will you think of zhihu
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;li-xiang-zhuang-tai&quot;&gt;理想状态&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;whatever &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;知乎&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;answers found:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;蜂鸟&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;无忌&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;mtime&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;douban&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;咖啡厅&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要让用户产生这种观念上的改变，那时的知乎在某个领域(如摄影)一定已经积累的相当的人气和问答。以摄影为例，摄影的初始问答从何而来？我觉得只可能是知乎重度用户打算学摄影，或者在学习过程中遇到问题，然后抱着试试看的心情发了个问题。为什么是知乎重度用户？因为如果只是偶尔过来逛逛的用户，在他眼里，这只是一个有点意思的网站，并没有太深的感情，就算遇到了摄影方面的问题，一看相关问题很少，直接就放弃了发问题的念头，因为对他来说浏览是一种习惯，而我们的行为都受习惯的支配。这也好解释为什么知乎重度用户明知可能得不到比较理想的答案，也可能会发问题，因为他习惯了参与，习惯了回答或提问。&lt;&#x2F;p&gt;
&lt;p&gt;所以知乎如果要向各个领域扩展，至少要具备这几个条件：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;足够数量的重度用户&lt;&#x2F;li&gt;
&lt;li&gt;重度用户的爱好最好广泛些&lt;&#x2F;li&gt;
&lt;li&gt;各个领域都有些活跃的达人&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;第三个条件很难。假如一个摄影相关的问题被提出后没有很快地得到好的答案，会很打击用户的积极性，下次如果再有类似问题，可能会选择其他的专业论坛。这时就需要该领域的达人出现了，这里又有一些问题：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;达人一般都很忙，很难抽出时间静下心来回答问题&lt;&#x2F;li&gt;
&lt;li&gt;有那么几天，达人关注的领域都没有什么新问题或有意思的问题，以后索性就不来了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;达人很少制造问题，所以把某些领域的达人作为种子用户，问答的氛围也很难建立。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-rong-wei-wang-zhu-bu-kai-fang&quot;&gt;内容为王，逐步开放&lt;&#x2F;h3&gt;
&lt;p&gt;国内不乏人气很旺的大站，但普遍有一种很水的感觉，简单说来就是，社交氛围多于思维碰撞。这往往是站长们追求 pv&#x2F;用户数&#x2F;发贴数的结果。这也是知乎的吸引力所在，在知乎能感觉到一种宁静，如果让我给知乎写一个 slogan 的话，应该会是：正经提问和回答的地方。如果不是这样，那就没理由来知乎了，水区多的是。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-wei-chi-gao-zhi-liang-de-hui-da&quot;&gt;如何维持高质量的回答&lt;&#x2F;h3&gt;
&lt;p&gt;业界达人不是回答的主力军，因为已经有足够的影响力了，也很少有时间来回答。但他们的回答能带来极好的效果。所以氛围的维系主要落在准达人身上，他们愿意回答是因为帮助别人是一种很自然的事，同时也可以向其他人展示自己的阅历、知识和才华。但是这些准达人是很挑剔的，如果问题的质量明显下降了，或者另一层次的用户大量入驻，或者感觉整个氛围不对，很可能就 say goodbye 了，所以如何让这些准达人持续贡献高质量的回答也是个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-ju-xian-yu-wen-da&quot;&gt;不局限于问答&lt;&#x2F;h3&gt;
&lt;p&gt;单纯的问答很难持久，用户很难养成每天习惯性地上来看看这种行为。要让用户泡起来，还需要具备&amp;quot;信息&amp;quot;输出。我们习惯上 hacker news，因为那里总是能发现很酷的东西，或者行业新闻；上 weifeng 也是因为大量的信息和资源。所以 Quora 支持&amp;quot;Write Post&amp;quot;，支持 blog feed import。&lt;&#x2F;p&gt;
&lt;p&gt;前面的路很难，但创业从来都是要披荆斩棘的，带着一颗不安份的心，奋斗吧&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>time to leave</title>
            <pubDate>Tue, 12 Jul 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/time-to-leave/</link>
            <guid>https://limboy.me/posts/time-to-leave/</guid>
            <description>&lt;p&gt;五个月前，去豆瓣面试，结果由于自己的薪资要求偏高，与豆瓣失之交臂。&lt;&#x2F;p&gt;
&lt;p&gt;两个月前，杭州一家我挺中意的公司对我抛出了橄榄枝，由于公司股票的原因，我放弃了那次机会。&lt;&#x2F;p&gt;
&lt;p&gt;这次又是类似的一幕：北京一家我挺喜欢的公司对我有兴趣，但由于中期考核拿到了 AA(最高等级，研发部一共两个人)，所以如果现在提出离职的话，奖金就没戏了。除非等到月底拿完钱，然后再提出离职。于是又开始小小的纠结了。&lt;&#x2F;p&gt;
&lt;p&gt;几番思量，加上总结之前的教训，提出了辞职，不想再因为钱而耽误了这次机会。而且如果等着这笔钱，人格上实在是不怎么光辉，也是对自己能力的不自信。还有一个原因是: 新公司那边的座位紧张，不想站着 coding。XD&lt;&#x2F;p&gt;
&lt;p&gt;其实，如果不去新公司，也想歇歇了。调整一下心情，明确一下目标，问问自己究竟想要什么。跟新东家接触后发现，非常接近我之前说的理想中的公司，于是我心动了。&lt;&#x2F;p&gt;
&lt;p&gt;在那里上下班不用刷卡，有免费的午餐，发 mbp，用 git 管理源码，不在 windows 下写程序，工程师主导。最重要的是我认可那里的人，以及他们正在做的事。忽然有种找到组织的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;知乎，我来了&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>纪念L君</title>
            <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/disillusion/</link>
            <guid>https://limboy.me/posts/disillusion/</guid>
            <description>&lt;p&gt;套用《纪念刘和珍君》的一段话：&lt;&#x2F;p&gt;
&lt;p&gt;bq. 我也早觉得有写一点东西的必要了，这虽然于离者毫不相干，但在职者，却大抵只能如此而已&lt;&#x2F;p&gt;
&lt;p&gt;一个我抬头就能看到他开着四个小窗口进行调试的人，一个当初把我带到公司的人，一个前两天还在地铁跟我说他开发的 nginx 模块已经基本可用的人，一个可以让我们安心搞研发的人，一个刚搬到新办公地点就因为有地方可以放那么多技术书籍而高兴的人，一个因为带着书度蜜月而被 MM 抱怨的人，忽然就这么离开了。&lt;&#x2F;p&gt;
&lt;p&gt;如果把公司比作在前线战斗的军队，L 的职责是为前线的战士提供好用，高效的作战武器，从手枪到导弹，还有自己的一部分军队。但是忽然某一天指挥官说：L，你可以走了。就像死神宣布某个人的生命结束那样直接，残酷。&lt;&#x2F;p&gt;
&lt;p&gt;L 离开的原因有很多的版本：研发成果没有被项目使用；搞小团体；底下的部门投诉太多；权利太大，上层被架空等等。但是无论哪种或几种理由都至少可以坐下来谈谈吧。三四天的时间，几乎没有什么交接，就让技术部的三位核心走人，简单粗暴。即使理在你那一边，这种做法实在是我不敢苟同的。为公司效力了三年多的技术部管理层，在没有犯明显错误的情况下，居然是像瘟神一样被&amp;quot;请出&amp;quot;公司，作为一个普通员工，我实在不能没有想法。&lt;&#x2F;p&gt;
&lt;p&gt;我不知道上层是怎么想的，貌似他们觉得也没有必要让我们知道他们是怎么想的，真正的原因是什么。在这种信息不对称的情况下，我只能通过平时的接触，有限的信息来得出自己的判断。L 是一个比较典型的技术牛人，由于职责所在，也会负责管理。但是 L 以这种方式离开，加上公司重心的转移，以及与上层的交谈，我只能得出这么个结论：业务为主，技术为辅，业务搞好，则赢；反之则输。技术，技术人才的储备，技术团队的磨合都不重要，至少优先级比较低。我的脑海中忽然想起去年年终会时，一位高层说：明年我们的目标是打造业界第一的 PHP 团队。有那么一瞬间我几乎信了，因为他说得那么真诚。&lt;&#x2F;p&gt;
&lt;p&gt;L 的离去还有一个影响就是带走了部分技术氛围。对于技术人员来说，这种技术氛围是很珍贵的。平时即使不常跟 L 沟通，但只要看到人在那，心里就多少会觉得踏实。&lt;&#x2F;p&gt;
&lt;p&gt;L 走好，不知道何时还能再见到你那天真无邪的小眼睛 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>小心PHP的类定义顺序与继承的问题</title>
            <pubDate>Wed, 15 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/be-careful-with-php-extends/</link>
            <guid>https://limboy.me/posts/be-careful-with-php-extends/</guid>
            <description>&lt;p&gt;以下代码的运行环境均为 PHP5.3.4&lt;&#x2F;p&gt;
&lt;p&gt;先来看一段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码很简单，也可以正常运行。看起来 PHP 的类定义与顺序无关。&lt;&#x2F;p&gt;
&lt;p&gt;再来看下面一段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;猜猜结果会怎样？有点出乎意料，代码报 Fatal Error。&lt;&#x2F;p&gt;
&lt;p&gt;这就奇怪了，上一段代码也是在后面声明的类 B，正常。多了一层继承关系后，就报错了，错误信息是&amp;quot;Fatal Error: class &#x27;B&#x27; not found &amp;quot;。 这又不能理解了，为什么会说找不到类 B 呢。&lt;&#x2F;p&gt;
&lt;p&gt;再来尝试一下新的组合&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好了，又正常了。&lt;&#x2F;p&gt;
&lt;p&gt;再来尝试一下 namespace&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\B\B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;B {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\C\C&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;C {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果跟不是用 ns 是一样的。&lt;&#x2F;p&gt;
&lt;p&gt;这种时候，只能看看官方是怎么说的了 &lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;keyword.extends.php&quot;&gt;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;keyword.extends.php&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;bq. Classes must be defined before they are used! If you want the class Named_Cart to extend the class Cart, you will have to define the class Cart first. If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart first. To make it short: the order in which the classes are defined is important.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;说得很明确，类必须先定义后使用，哪怕是在一个文件里。但这又无法解释第一段代码为什么可以正常运行。所以基本可以认为这是一个 php 的 bug。&lt;&#x2F;p&gt;
&lt;p&gt;好在有 autoload 机制，这种情况完全可以避免。不过对那些想通过把许多类文件合并成一个来提高 PHP 运行效率的童鞋们来说，这就有点麻烦咯。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>缩进输出目录结构并计算文件&#x2F;文件夹大小</title>
            <pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/calc-tree/</link>
            <guid>https://limboy.me/posts/calc-tree/</guid>
            <description>&lt;p&gt;如果把这个命题分开来实现会方便点，比如缩进输出目录结构可以通过先序遍历实现，计算文件夹大小可以通过后续遍历实现，但结合到一块就稍微有点麻烦了。比如我们要得到如下的输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;LICENSE (1.040K)
&lt;&#x2F;span&gt;&lt;span&gt;README.md (0.951K)
&lt;&#x2F;span&gt;&lt;span&gt;UPDATE.ja.md (23.951K)
&lt;&#x2F;span&gt;&lt;span&gt;UPDATE.md (19.390K)
&lt;&#x2F;span&gt;&lt;span&gt;autoload.php.dist (0.875K)
&lt;&#x2F;span&gt;&lt;span&gt;check_cs (3.312K)
&lt;&#x2F;span&gt;&lt;span&gt;phpunit.xml.dist (1.160K)
&lt;&#x2F;span&gt;&lt;span&gt;src (8302.127K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;    Symfony (8302.127K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;        Bridge (84.567K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我首先想到的方法是把文件&#x2F;文件夹的计算和输出分开来实现，不过这样效率不高，因为有些文件会被多次使用 filesize 方法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;glob(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$prefix&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 每次输出都计算一次，如果是文件夹的话，文件夹下的文件会被多次计算，浪费也就在此
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pad_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;opendir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pad_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;readdir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;..&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				{
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;				}
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，假如 a&#x2F;b&#x2F;c.txt 这个文件，在获取 c.txt 文件大小时会计算 c.txt 一次，获取 b 文件夹大小时还会计算一次，获取 a 文件夹时仍然会计算一次。也就是说文件的重复计算次数跟目录深度成正比。&lt;&#x2F;p&gt;
&lt;p&gt;后来又想了一个方法可以避免重复计算，且占用不多的内存，自认为效率还算高。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$padding&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strrpos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;glob(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个只用了一个函数，更短，更快。引用数组负责数据的存储，递归返回值负责文件的大小，为了减少内存的使用，在文件夹的 size 后面加了&amp;quot;&lt;em&gt;&amp;quot;来表示这是一个文件夹，输出时去掉&amp;quot;&lt;&#x2F;em&gt;&amp;quot;就行了。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有更好的想法，欢迎交流 :)&lt;&#x2F;p&gt;
&lt;p&gt;github 地址：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;cacl_tree&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;cacl_tree&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一道面试题的思考</title>
            <pubDate>Fri, 03 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-xor-find-num/</link>
            <guid>https://limboy.me/posts/php-xor-find-num/</guid>
            <description>&lt;p&gt;前几天下班途中跟同事聊到了一道面试题，大意是，给你 1-1000 个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。&lt;&#x2F;p&gt;
&lt;p&gt;这题其实挺为面试者的，因为要求 1 分钟内说出解法，且不能使用计算机、纸和笔。如果之前没有遇到过类似的题目，加上面试时的紧张心情，很难能在那么短的时间里想到解决方案，至少我做不到。&lt;&#x2F;p&gt;
&lt;p&gt;好在我有时间，上网看了一下，比较常见的有两种方法&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qiu-fang-cheng-zu-de-jie&quot;&gt;求方程组的解&lt;&#x2F;h3&gt;
&lt;p&gt;遍历被打乱的数组时，计算 value 的累加值和 value 平方的累加值。结合未打乱之前的数组，这样就能得出 x+y = m 与 x&lt;em&gt;x+y&lt;&#x2F;em&gt;y = n 两个方程，解这组方程即可算出被去掉的两个数。这种方法比较容易理解，实现起来也比较简单&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-yi-huo&quot;&gt;使用异或&lt;&#x2F;h3&gt;
&lt;p&gt;这个就麻烦点了。先来说说异或的定义：两个二进制位不同的取 1。再来说说异或的两个特性：顺序无关 &#x2F; 对一个数异或两次等于没有异或。顺序无关就是说异或的元素可以随意交换顺序，而不会影响结果。异或两次可以理解为+x 和-x。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-suan-chu-x-y-de-zhi&quot;&gt;计算出 x^y 的值&lt;&#x2F;h4&gt;
&lt;p&gt;首先，这两个数组(打乱前和打乱后)各自异或，也就是 1^2^...^1000，得到两个异或值。再对这两个异或值进行一次异或，这样就得到了 x^y 的指(重复部分互相抵消了)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 其实就是把数组的所有元素进行异或，重复部分互相抵消
&lt;&#x2F;span&gt;&lt;span&gt;result = 1^2^...^1000^1^2...^1000;
&lt;&#x2F;span&gt;&lt;span&gt;result = 1^1^2^2...^x...^y...^1000^1000;
&lt;&#x2F;span&gt;&lt;span&gt;result = x^y;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;huo-qu-ji-suan-chu-de-yi-huo-zhi-de-1-suo-zai-de-wei-zhi-bing-ji-xu-yi-huo&quot;&gt;获取计算出的异或值的 1 所在的位置，并继续异或&lt;&#x2F;h4&gt;
&lt;p&gt;因为 x 和 y 是两个不同的整数，所以这两个数的异或结果，转化为二进制的话，一定在某位是 1，假设在第 3 位。也就是说如果把原始数组按第 3 位是否为 0 进行划分，就可以分成两个数组，每个数组各包含一个被抽取的数。如果打乱后的数组也按这个规则划分为两个数组，这样就得到了 4 个数组，其中两组是第 3 位为 0，另外两组是第 3 位为 1。把第 3 位为 0 的两个数组所有元素进行异或就能得到被抽取的一个数，同理也就能获得另外一个被抽取的数，于是问题解决。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;php-de-shi-xian&quot;&gt;PHP 的实现&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 起始长度
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 将要被移除的两个数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 两个数组异或再互相异或的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 存放被pos分割的数字
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取一个数字转化为二进制后1所在的位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_pos&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$num&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pow(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 进行异或计算
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;do_xor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mt_rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mt_rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取两个随机数，然后去掉从数组中去掉它们
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacl_num1_num2_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;divide_by_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取两个数组各自异或再互相异或的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacl_num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 根据pos将两个数组再各自细分成两个数组
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其中$arr_copy_0和$arr_copy_1各自包含了一个被抽取的数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divide_by_pos&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pow(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对这4个数组进行对应的异或操作，就出结果了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_num&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &#x2F; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;PHP_EOL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &#x2F; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>做完猜电影的一点感想</title>
            <pubDate>Mon, 30 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/iguess-feeling/</link>
            <guid>https://limboy.me/posts/iguess-feeling/</guid>
            <description>&lt;p&gt;如果你认真，持续地去做了一件事，几乎不可能没有收获。&lt;a href=&quot;http:&#x2F;&#x2F;iguess.me&quot;&gt;猜电影&lt;&#x2F;a&gt;这个业余项目也断断续续进行了将近 20 天，从 GAE 到 VPS，从 python 到 PHP，反正就是各种折腾，现在成品基本上出来了，当然还有很多需要完善和改进的，&lt;a href=&quot;http:&#x2F;&#x2F;iguess.me&quot;&gt;欢迎访问&lt;&#x2F;a&gt; :)。以下是一些我的小感想&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ni-neng-zai-ling-chen-4-dian-ban-qi-lai-ma&quot;&gt;你能在凌晨 4 点半起来吗？&lt;&#x2F;h3&gt;
&lt;p&gt;早起其实不难，如果你对这一天充满了期待，或者急不可耐地想要去做一件事。做这个项目的时候，经常会有一些有意思的想法，然后就恨不得马上去实现，但是太晚了，而且工作了一天后，晚上的效率也不高。于是只能放到凌晨，我清楚地记得那天给自己定了 4 点半的闹钟，结果 3 点醒来后，就再也睡不着了，于是从 3 点一直开发到早上 7 点多，再睡一个小回笼觉到 8 点多，就屁颠屁颠地上班去了。上班时的感觉也很好，因为一块大石头已经放到杯子里，有底了。&lt;&#x2F;p&gt;
&lt;p&gt;记得当年从时光网辞职后，在家帮朋友开发一个手机社区，也有过一阵类似的感觉，当然那时自由多了，想几点起就几点起，起床后可以痛快地做自己的项目，现在还真有点怀念。&lt;&#x2F;p&gt;
&lt;p&gt;37signals 的招聘中写到：认同一个伟大的工作并驱动自己，这非常重要。不知道大家对自己的工作还有没有激情，有没有憧憬，有没有感觉到挑战，如果没有或者比较少，又是如何释放自己的激情，为什么不到一个更广阔的空间？&lt;&#x2F;p&gt;
&lt;p&gt;国内有梦想的公司不少，或者说，每个公司都应该有自己的梦想吧，或大或小，或远或近而已。但你真的能够认同吗？你发自肺腑地希望公司能够蒸蒸日上吗？在公司最困难的时候，你愿意留下来吗？答案很可能是否定的。公司不是我们的归宿，她只是与我们进行着一笔交易，她出钱，我们出时间和技能。最危险的是我们会渐渐地习惯这个交易，以为人生本应如此，梦想这玩意不现实。呵呵，有点扯远了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;biao-mian-kan-qi-lai-jian-dan-de-shi-zuo-qi-lai-zhen-bu-jian-dan&quot;&gt;表面看起来简单的事，做起来真不简单&lt;&#x2F;h3&gt;
&lt;p&gt;这也是我喜欢苹果的一个原因，她可以让一个操作尽量简单，易懂，一用就会，但是易用的背后往往包含着很复杂的处理过程。这才是用户至上。写猜电影的时候，我常常会想: 这个功能应该怎样在页面上体现，应该怎样交互用户才不会迷茫，是否有必要加一个提交按钮，loading 效果怎样做才看着比较舒服等等。当然，如果只是想实现这个功能就没必要费这个周折了。&lt;&#x2F;p&gt;
&lt;p&gt;前期只需要完成最核心的功能，让用户可以无障碍地使用，功能尽量少，但每个功能都要做到看着舒服，用着流畅。功能越少，用户越不容易迷茫，后期再推出新功能时，也更加能接受。好比税收一样，一下子扣去一年的税和分月扣，虽然结果是一样的，但哪个更能接受？&lt;&#x2F;p&gt;
&lt;p&gt;要有追求完美的心态。就拿那个投票来说吧，看上去很简单的上下箭头加上中间的数字，其实要考虑的因素有不少：是否已登入？是否之前投过票？投过票的话是否要高亮显示？是否是自己发的帖子？如何防止多次投票？等等。要做到完美并不容易。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-de-zhong-gou&quot;&gt;记得重构&lt;&#x2F;h3&gt;
&lt;p&gt;一开始为了能尽快出第一个版本，往往对代码的质量就不那么讲究，这很正常，说正确也无妨。敏捷嘛，就是要讲究快速发布版本，但庞大的函数，一段又一段又一段的 if else 判断，臃肿的类，无意义的数字、变量，重复的代码等等，这些虽然成功地帮助你实现了最基本的功能，但如果放任不管，将来开发新功能，或修改 bug 时就够你受的了，这也严重影响了下一版本的发布。&lt;&#x2F;p&gt;
&lt;p&gt;如果代码量已经挺大了，且可重构部分还不少，那就有点不妙了，不过好在自己写的代码最熟悉，多费点时间还是可以重构地差不多的。不过更好的方法是持续重构，也就是隔三差五地让自己的代码变得更优雅。软件开发就是与熵的战斗，如果不用心，熵就会很大，结果嘛，你懂的:)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-yao-gei-zi-ji-tie-biao-qian&quot;&gt;不要给自己贴标签&lt;&#x2F;h3&gt;
&lt;p&gt;我是个 PHP 程序员，不会设计，不会 js，不会前端交互，无法独立完成一个网站。
我是个编辑，要我使用 SQL 语句，天哪，杀了我吧(我从朋友的口中得知，他们公司有如此 BT 的编辑存在)。
我是个产品经理，我不需要动那些具体的技术细节，我只要把我的想法表达清楚就好了。&lt;&#x2F;p&gt;
&lt;p&gt;老罗当年招了好几茬设计都没有一个合适的，到最后不也是自己上嘛，那可是老罗啊，一个相声表演艺术家，自学设计，貌似效果还不错。&lt;&#x2F;p&gt;
&lt;p&gt;爱给自己贴标签的人，往往在他自己的领域也难有太大的建树，因为如果你是一个 PHP 程序员，你可以拒绝学习 linux，mysql，nginx，设计模式，等等，也可以拒绝了解 PHP 内部的运行机制，因为你可以告诉自己：我是一个普通的 php 程序员，不需要了解这些。其实说白了，还是对自己学习能力的不自信，没有刨根问底的精神，没有探索未知领域的意愿。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-de-shao-wei-chang-yuan-yi-dian&quot;&gt;想得稍微长远一点&lt;&#x2F;h3&gt;
&lt;p&gt;比如，花了很长的时间，终于把你的作品熬出来了，然后呢？怎么让目标用户知道并且喜欢上你的作品？哎，我是个天真的程序员，总是幻想着，我把一个 idea 实现了，慢慢地就会有人来用，然后慢慢地他们会口口相传。我的目标不是有多少用户数，我只在乎我的这个应用能为多少人带来便利，能为多少人解决问题。虽然如此，看着自己消耗了那么多的 ATP，做出来的东西没人用，难免会有点伤感。&lt;&#x2F;p&gt;
&lt;p&gt;所以除非只是想练练手，不然最好想一下如何去推广，除非你在该领域有足够的影响力或资源。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;鉴于我懒得推广，又想做点能够影响一批人的东东，所以我打算以后多花点时间在正事上，把基本功练好，加入一个靠谱的团队。十个巴掌怎么也比一个巴掌拍得响。&lt;&#x2F;p&gt;
&lt;p&gt;有不少人担心程序员是吃青春饭的，过了 30，就会力不从心，到时要么做管理要么转行。有了这个想法后，就更不可能用心地去写程序，去思考。恶性循环就这么产生了。我倒愿意相信，各行各业之间是相通的。计算机系统是如此地神奇，算法是如此地考验脑力，linux 是如此地优雅。如果真的把程序搞得很明白透彻了，其间你所收获的知识，经验一定可以运用到(至少是部分)其他领域，这也是达芬奇老人家能够精通多门领域的一个原因吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>have you lost yourself?</title>
            <pubDate>Mon, 23 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/have-you-lost-your-self/</link>
            <guid>https://limboy.me/posts/have-you-lost-your-self/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;期待周五，讨厌周一吗？&lt;&#x2F;li&gt;
&lt;li&gt;期待发薪水的那天吗？&lt;&#x2F;li&gt;
&lt;li&gt;下班后急着回家吗？&lt;&#x2F;li&gt;
&lt;li&gt;上班时盼望领导今天不在吗？&lt;&#x2F;li&gt;
&lt;li&gt;有花一半以上的时间在工作或工作相关的事情上吗？&lt;&#x2F;li&gt;
&lt;li&gt;是否不太情愿地打开工作相关的文件？&lt;&#x2F;li&gt;
&lt;li&gt;有没有分析过自己的优势和劣势，及如何提高和弥补？&lt;&#x2F;li&gt;
&lt;li&gt;回到家后还会从事工作相关的事情吗？&lt;&#x2F;li&gt;
&lt;li&gt;第二天醒来不知道今天要干什么？&lt;&#x2F;li&gt;
&lt;li&gt;不知道这周&#x2F;月都做了什么？&lt;&#x2F;li&gt;
&lt;li&gt;盼望有一天能通过彩票&#x2F;抽奖改变自己的命运？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;有一份稳定的工作，领着满意的薪水，跟同事相处融洽，也有和睦的家庭。看上去一切都是那么美好，但这真是自己想要的吗？还是只是想让别人看上去很好？从小我们就生活在别人的眼里，但凡有一点出格的表现，就会马上被家人纠正，被朋友取笑。渐渐地，我们妥协了，放弃了追求自己想成为的那个人。&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;一个人如果遵照他的内心去活着，他要么成为一个疯子，要么成为一个传奇&amp;quot;。如果在别人眼里，你是一个正常的人，很可能，你已经有那么点不正常了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做了个猜电影的小应用</title>
            <pubDate>Thu, 12 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/iguess/</link>
            <guid>https://limboy.me/posts/iguess/</guid>
            <description>&lt;p&gt;话说前一阵子和朋友出去聚餐，闲着没事，就想来猜电影，但是各种搜索，都没找到一个比较靠谱的地方，于是俺就打算做一个猜电影的小应用&lt;&#x2F;p&gt;
&lt;p&gt;目前该应用的功能还很简单，就是你给出一段台词，让用户猜这段台词是哪部电影的。更多的后续功能正在悄悄开发中，欢迎使用和反馈 :)&lt;&#x2F;p&gt;
&lt;p&gt;应用地址：&lt;a href=&quot;http:&#x2F;&#x2F;iguess.leezhong.com&quot;&gt;iguess.leezhong.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;-PS: Mobile Friendly-&lt;&#x2F;p&gt;
&lt;h3 id=&quot;11-05-14&quot;&gt;11&#x2F;05&#x2F;14&lt;&#x2F;h3&gt;
&lt;p&gt;绑定新域名：&lt;a href=&quot;http:&#x2F;&#x2F;www.iguess.me&quot;&gt;www.iguess.me&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;11-05-17&quot;&gt;11&#x2F;05&#x2F;17&lt;&#x2F;h3&gt;
&lt;p&gt;开源: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;iguess&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;iguess&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;11-05-29&quot;&gt;11&#x2F;05&#x2F;29&lt;&#x2F;h3&gt;
&lt;p&gt;用 PHP 重写了整个应用，放在自己的 VPS 上&lt;&#x2F;p&gt;
&lt;h3 id=&quot;11-05-30&quot;&gt;11&#x2F;05&#x2F;30&lt;&#x2F;h3&gt;
&lt;p&gt;添加了一组默认头像&lt;&#x2F;p&gt;
&lt;h3 id=&quot;11-06-04&quot;&gt;11&#x2F;06&#x2F;04&lt;&#x2F;h3&gt;
&lt;p&gt;添加了独立 URL 页面
添加了评论功能&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>漫谈互联网产品开发</title>
            <pubDate>Sun, 08 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-product-develop/</link>
            <guid>https://limboy.me/posts/web-product-develop/</guid>
            <description>&lt;p&gt;每个公司都有自己的产品开发规范，我自己也大概想了下，比较适合小团队。&lt;&#x2F;p&gt;
&lt;p&gt;借鉴 Unix 的设计哲学：一个工具只做好一件事，并提供接口。放到产品开发就是：产品可以被划分成多个模块，每个模块都有相应的 API。这样就能做到分工明确和解耦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;san-ceng-jia-gou&quot;&gt;三层架构&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;biao-xian-ceng&quot;&gt;表现层&lt;&#x2F;h4&gt;
&lt;p&gt;web &#x2F; mobile &#x2F; app ...&lt;&#x2F;p&gt;
&lt;h4 id=&quot;api-ceng&quot;&gt;API 层&lt;&#x2F;h4&gt;
&lt;p&gt;user &#x2F; article &#x2F; comment &#x2F; ...&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-chu-fu-wu-ceng&quot;&gt;基础服务层&lt;&#x2F;h4&gt;
&lt;p&gt;db &#x2F; queue &#x2F; memcache &#x2F; ...&lt;&#x2F;p&gt;
&lt;p&gt;如果使用 GAE 的话，就不用花心思去构建基础服务层了。这样就只剩下表现层和 API 层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-gong&quot;&gt;分工&lt;&#x2F;h3&gt;
&lt;p&gt;每个人都要负责产品的一部分，有两种构建方式：水平构建和垂直构建&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chui-zhi-gou-jian&quot;&gt;垂直构建&lt;&#x2F;h4&gt;
&lt;p&gt;假如我负责用户系统，则所有与用户相关的事情都由我来完成，从前端到后端，包括 API，页面展示，互动等等。这样做的话，对开发人员的要求比较高，需要同时对前后台都比较熟悉。但能减少沟通成本，提高开发效率。假如用户系统出现了一个 bug，我就能很快地修复，因为我最熟悉，且所有与用户相关的都由我负责。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shui-ping-gou-jian&quot;&gt;水平构建&lt;&#x2F;h4&gt;
&lt;p&gt;这也是大部分公司采用的方法，把开发人员分为前端&#x2F;后端等等。前端的任务就是负责页面的展示和交互，后端开发人员负责 API 的构建，可能还会有专门的 DBA。这样做的好处是可以发挥每个人的特长。但也有不少问题，比如用户系统出现了一个 bug，前端相信自己的程序没有问题，就会把问题推给后端，后端查看了一遍也觉得没问题，可能又会把问题推回去。这样一来二去，不仅浪费时间，影响效率，还会破坏团队的氛围。&lt;&#x2F;p&gt;
&lt;p&gt;假如又有了一项新任务，是开发一个评论系统，前端可能 1 天就把页面做完了，然后就干别的事去了，结果后端花了 4 天才把 API 搞定。然后前端又要从别的地方把心收回来，阅读 API 文档，再整合，又耽搁了不少时间。这就有点不够敏捷了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-mu-guan-li&quot;&gt;项目管理&lt;&#x2F;h3&gt;
&lt;p&gt;我推荐使用 Basecamp+Campfire+github。Basecamp 用来管理项目；Campfire 是团队讨论的地方(已与 Basecamp 集成)，可以开设多个版块；github 用来管理源码。&lt;&#x2F;p&gt;
&lt;p&gt;一个高效的开发者最不能接受的就是被打断，我好不容易进入了状态，结果被迫去跟你讨论一个不太重要的问题，这简直是谋杀，所以开发项目时最好把 IM 关掉，或者设置成离开状态。&lt;&#x2F;p&gt;
&lt;p&gt;dropbox 可以作为辅助工具，用来在团队内部共享资料。&lt;&#x2F;p&gt;
&lt;p&gt;github 的开发流程，可以参考&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;translate&#x2F;2010&#x2F;10&#x2F;30&#x2F;a-successful-git-branch.html&quot;&gt;此文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;frontController 要尽可能的薄，通常只需负责渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;techportal.ibuildings.com&#x2F;2010&#x2F;02&#x2F;22&#x2F;scaling-web-applications-with-hmvc&#x2F;&quot;&gt;hmvc&lt;&#x2F;a&gt;将各个页面模块组合成一个页面&lt;&#x2F;li&gt;
&lt;li&gt;可以使用内部 REST 的方式来合并多个 REST 请求&lt;&#x2F;li&gt;
&lt;li&gt;API 层可以模拟 http 的 403 状态码来减少数据传输&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;暂时就想到这些了，实际情况肯定要复杂地多。有哪些地方可以改进，或者根本就不现实，欢迎指出 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>iframe无刷新跨域上传文件并获取返回值</title>
            <pubDate>Fri, 06 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/crossdomain-upload/</link>
            <guid>https://limboy.me/posts/crossdomain-upload/</guid>
            <description>&lt;p&gt;通常我们会有一个统一的上传接口，这个接口会被其他的服务调用。如果出现不同域，还需要无刷新上传文件，并且获取返回值，这就有点麻烦了。比如，新浪微博启用了新域名www.weibo.com，但接口还是使用原来的域：picupload.t.sina.com.cn。&lt;&#x2F;p&gt;
&lt;p&gt;研究了一下新浪微博的处理方法，这里大概演示一下。&lt;&#x2F;p&gt;
&lt;p&gt;首先是一个正常的上传页面 upload.html&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个函数将来会被iframe用到
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getIframeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 我把upload.com指向了127.0.0.1 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  method=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  target=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  enctype=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;multipart&#x2F;form-data&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  action=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;upload.com&#x2F;playground&#x2F;js&#x2F;deal.php?cb=http:&#x2F;&#x2F;localhost&#x2F;playground&#x2F;js&#x2F;deal_cd.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;input type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;input type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;SUBMIT&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;value=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;upload&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;about:blank&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;frameborder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有一个关键点是 form 的 target 要指向 iframe，同时把 iframe 隐藏起来，这样上传的处理结果就会显示在该 iframe 里。action 里的 cb(callback)参数表示处理完成后要跳转的 url，因为我们的目标是 iframe，所以只会把跳转的页面输出到 iframe，而不会让当前页面跳转。&lt;&#x2F;p&gt;
&lt;p&gt;还有一点，callback url 要和当前页面同域。跨域的 iframe 无法调用父页面的内容。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 deal.php，也就是 form 的 action&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; deal upload file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and get file id, you can pass other params either
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;location:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;cb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?file_id=123&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里可以处理文件，然后入库。操作完成后，把文件的 id 及其他信息都放在 url 里，最后跳转到这个 url。&lt;&#x2F;p&gt;
&lt;p&gt;最后来看看 deal_cd.html，也就是刚刚 deal.php 跳转到的 url，这个文件的内容会填充到页面的 iframe 里。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.location.search.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.parent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getIframeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.toString().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里调用了父窗口的 getIframeVal 方法，这样父页面就获得了文件的 id。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>API的返回值形式</title>
            <pubDate>Wed, 04 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/api-return-format/</link>
            <guid>https://limboy.me/posts/api-return-format/</guid>
            <description>&lt;p&gt;假设我们有一个 rest 服务，该 rest 服务会返回 json 格式的信息，以 twitter 为例：访问&lt;code&gt;http:&#x2F;&#x2F;api.twitter.com&#x2F;1&#x2F;users&#x2F;show.json?user_id=12345&lt;&#x2F;code&gt;会得到如下结果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	id_str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;12345&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	is_translator: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;	following: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;	profile_text_color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;333333&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ID 12345&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	status: {
&lt;&#x2F;span&gt;&lt;span&gt;		coordinates: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;		text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Follow @h&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是一个正常用户的信息，如果访问一个不存在用户，会返回类似下面的结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;1&#x2F;users&#x2F;show.json?user_id=12345111&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Not found&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有没有发现，两次请求只是 userid 不一样，但返回形式却截然不同，这其实也不是什么大问题，客户端只要先检查一下是否有 error 这个 key，就能知道这次请求是否出错。不过我想了个另一个方法，能让返回形式有相同的结构。&lt;&#x2F;p&gt;
&lt;p&gt;借鉴了一下 http 协议，把返回结果分为 header 和 body 两部分，一个正常的请求会返回如下的信息&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;status&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ok&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;status 相当于 http 的 status 头信息，通过检查该信息可以知道请求是否正常，如果是&#x27;ok&#x27;则为正常，如为&#x27;error&#x27;则不正常，如果返回出错，则会在 content 字段里包含足够的错误信息&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;status&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;...&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;code&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;message&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file not found&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里只包含了最基本的 3 项信息，request 指代的是本次请求的 url，code 类似 http 状态码，message 指代出错信息。&lt;&#x2F;p&gt;
&lt;p&gt;这样是不是更优雅些？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于选择</title>
            <pubDate>Sun, 10 Apr 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-choice/</link>
            <guid>https://limboy.me/posts/about-choice/</guid>
            <description>&lt;p&gt;选择少的时候，痛苦，因为这说明你还不够强大。选择多的时候也痛苦，因为你要仔细考量每一个选择带来的成本。所以我们苦恼，我们总是想找到一个最好的选择，为了这个最好的选择，我们可以在候选者之间徘徊很长时间，但每每一想到这些选择，都会重复着上一次的过程，只是依然没有结果。&lt;&#x2F;p&gt;
&lt;p&gt;想起了一个故事，大意是一只驴很渴，这时它遇到了两桶水，但最后它还是渴死了，因为它不知道到底该先喝哪桶水。&lt;&#x2F;p&gt;
&lt;p&gt;选择确实重要，但没那么重要，你的人生不可能因为一次选择而彻底改变。做选择时最重要的是知道自己想要的是什么，再做决定就容易了，如果还是很纠结，那就随便选一个。也可以扔一枚硬币，两个面分别对应两个选择，但不是看它最后显示的是哪个面，而是在抛起的过程中，你最希望它是哪个面。follow your heart&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;about-choice&amp;#x2F;choice-coin.jpg&quot;
        width=&quot;391&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;小时候，我们不怕做选择，因为没什么太大的后果，顶多就是被老师训一顿，被父母打打屁股，说两句。但随着年龄的增长，肩上的担子越来越重，压力也越来越大。你可能跟自己斗争了很久，做了个决定，但女友不同意，家里人反对，朋友劝说。有了孩子&#x2F;房子&#x2F;车子之后更麻烦。牵绊的事越多，越不利于做决定，于是我们妥协了，对生活说：生活你赢了，再见理想。&lt;&#x2F;p&gt;
&lt;p&gt;可是我们的人生只有一次啊。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我理想中的公司</title>
            <pubDate>Thu, 07 Apr 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-ideal-company/</link>
            <guid>https://limboy.me/posts/my-ideal-company/</guid>
            <description>&lt;p&gt;我特别喜欢那种少而精的团队，大家齐心协力为了共同的目标而努力。人一多，心就容易散，这也增加了管理成本和沟通成本，而这两个因素往往是造成低效的重要原因。而且员工的质量很难得到控制，你不知道他们是来混日子的，还是冲着舒适来的，或是其他的目的，这就很难做到公平，除非每个入职员工都严格把关。不过这里也有个悖论，如果员工们个个都是精英，在公司规模不是很大的情况下，不会需要更多的外援；如果老是发现任务完成不了，或者效率低下，想通过扩招来弥补这些问题，那说明现在的员工很可能不够优秀。&lt;&#x2F;p&gt;
&lt;p&gt;人一多，互相熟悉也会是问题。我的理念是，我要么跟你很熟，或愿意跟你很熟，要么一点不熟。如果路上看到一个同事，知道他叫什么名字，做什么的，然后点个头示意一下，这是多么冷淡的一种表现啊，我不喜欢这样。&lt;&#x2F;p&gt;
&lt;p&gt;优秀的人才设计出来的产品，写出来的代码，是 10 个平庸的人加一起也无法超越的。但如团队中老是有那么一个或几个很嗝应的 B 类员工在掺和，而且上级对此些人还比较信任，这时事情就会向不好的方向开始发展了。因为 A 类人是很难或者无法与 B 类人共处的: 理念不一样，学习能力不一样，目标不一样。所以如果对新员工的质量降低了要求，必然会对 A 类员工带来不小的影响，所以要少招人，招对人。&lt;&#x2F;p&gt;
&lt;p&gt;公司是员工的家，员工是公司的家人。虽然很多公司挂出了类似的口号，但也只是口号，这甚至比没有这个口号更糟：这个公司只会说说而已。公司首先要对员工表现出家的感觉：环境舒适，水果自便，iMac，福利，不用刷卡，等等。最重要一点，把员工当人看，这是很基本的一点，但很多公司就是做不到，他们把员工当成资源，不去或者很少考虑他们的需求，他们的反馈，他们的任务量。&lt;&#x2F;p&gt;
&lt;p&gt;想想是谁决定了公司的未来，是员工啊。他们是人，他们需要被尊重，被认可，被关爱，而这些又能促使员工进一步去提升自己，去为公司创造更多的价值。这才是良性循环。领导们问都不问员工的意见，一拍板就把事情给定了，然后让他们什么时间之前完成，这不是扯淡嘛。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个技术人员，当然希望到一个技术主导的公司。这样的公司国内有，且数量也还不算太少。但有自己理念的，有家的感觉的，技术主导的公司，就太少了。豆瓣算一个，除此之外还真想不出第二个。如果真找不到合适的，就只能自己创建一个了。&lt;&#x2F;p&gt;
&lt;p&gt;我比较喜欢 yy, 这个场景在我的脑海里出现了好多次了：在大城市的周边，租一个大别墅，员工们如果租的房子离得比较远，或者交通不太方便，可以在那住着。选择大城市是因为大城市的人才相对较多，选择郊区是因为清静，空气好，风景好，房租便宜。别墅的前面是一片草坪，搞点什么活动都可以。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;the-whole-team.jpg&quot;
        width=&quot;445&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;公司内部的氛围一定要轻松，环境要舒适，工作区就算达不到每个人单独一间房间，至少空间要足够大，尽量少的干扰。可以配一块白板，但最好在一个独立的房间，以免打扰到其他人。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;team.jpg&quot;
        width=&quot;800&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要有休闲区，如电影放映厅、游戏室、乒乓球、K 歌厅等等，总之，就是要让员工感觉到公司为了员工的生活做了很多努力。那如果员工花很多的时间在休闲上怎么办？没有问题，只要你高质量地完成了自己的任务。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;game-room.jpg&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;员工把生命中的一部分时间给了公司，公司当然要给予相应的回报。对于那些对公司做出很多贡献的更应该奖励，这些人不光是公司觉得他们付出了很多，员工也会觉得他们获此待遇是应该的，并会以他们为榜样。这样就建立起了良性循环。&lt;&#x2F;p&gt;
&lt;p&gt;有点幼稚，有点过于理想，随着时间的流逝，阅历的增长，肯定会有部分变化，真希望在不远的将来多看到那样的公司，那里是理想主义者的天堂。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>简单说说StackOverflow和Quora</title>
            <pubDate>Wed, 30 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/so-quora/</link>
            <guid>https://limboy.me/posts/so-quora/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;robbin.javaeye.com&#x2F;blog&#x2F;978077&quot;&gt;robbin&lt;&#x2F;a&gt;说: SO 和 Quora 成功的基因是用户身份的真实性和唯一性。不敢苟同，StackOverflow 使用 OpenId 主要是从用户体验上考虑，而 Quora 则完全可以不绑定 Social Account&lt;&#x2F;p&gt;
&lt;p&gt;在 StackOverflow 出来前，编程类的问答网站也是有的，比如&lt;a href=&quot;http:&#x2F;&#x2F;www.experts-exchange.com&#x2F;&quot;&gt;experts-exchange&lt;&#x2F;a&gt;，论坛如&lt;a
href=&quot;http:&#x2F;&#x2F;www.codingforums.com&#x2F;&quot;&gt;codingforums&lt;&#x2F;a&gt;。而且用户活跃度也不低，但也明显存在几个问题，而 StackOverflow&#x2F;Quora 看到了这些问题，并给出了自己的解决方案。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhong-fu-wen-ti&quot;&gt;重复问题&lt;&#x2F;h3&gt;
&lt;p&gt;假设用户发了一个求助贴，然后下面有 10 条回复，而正好是第 10 条回复解决了发贴者的问题，于是 problem solved，但只是相对该发贴者，如果另一个用户也碰到了类似问题，首先他不知道这个问题是否已经被解决，所以嫌麻烦，在发贴前没有搜索，又发了一个类似的问题。对于这个现象，也有不同的看法，如多回答几遍问题，你的技能也会在一次次的重复中得到巩固和提升，所以重复问题是可以接受的。但也有一部分人的观点是尽量不要问重复的问题，从编程角度来说不够 DRY，而且一个问题不应该被解决多次，同时还浪费了别人的时间。&lt;&#x2F;p&gt;
&lt;p&gt;对于持第二种观点的人，他们往往建议发贴前先搜索，但用户是懒的，而且发贴求助已经成了下意识的行为，所以效果并不理想，而 StackOverflow 的做法是，在你输入完标题后，自动提示可能类似的问题，这样就把搜索的过程融入到了发贴中，如果正好看见有人发过类似的，直接点击链接即可。Quora 也类似，Add Question 前，自动搜索问题，重复问题的现象由此得到了部分缓解。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zui-jia-da-an&quot;&gt;最佳答案&lt;&#x2F;h3&gt;
&lt;p&gt;再来说说最佳答案，以前的编程论坛或网站都不太重视这块，所以没有投票机制，这对于搜索过来的，希望尽快找到该问题答案的用户是不太友好的，可能前 9 个回复都不是最佳答案，或者有一个看似最佳答案，但确是错的，不过这么做倒是能让用户把回答都看完了，然后自己去判断应该参考哪个答案。这对于用户来说太累了，所以 StackOverflow 和 Quora 都有投票机制，默认的都是票数最多的放在最前面，用户一下就能找到最佳答案，而且这样做也能鼓励用户做高质量的回复。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-da-zhi-liang&quot;&gt;回答质量&lt;&#x2F;h3&gt;
&lt;p&gt;说到回答质量，就必须牵扯到网站的用户群。之前的编程问答论坛，往往对回答质量不够重视，而对 PV，注册用户数，发贴量等数据比较关心，也就是人气一定要旺。而 StackOverflow 是由业界两位大牛 Jeff 和 Joel 创建，而且内测也是在其博客订阅者内展开，根据吸引力法则，这些订阅用户中肯定不乏编程达人。所以网站的第一批用户就是这些相对靠谱的程序员。网站开发者努力打造简洁，易用，为用户提供便捷的网站。用户感受到开发者的良苦用心，用自己的文字维护高质量的回答。&lt;&#x2F;p&gt;
&lt;p&gt;Quora 也类似，开发者是前 Facebook CTO，你能明显感觉到网站为高质量内容所做的努力：发表问题前自动搜索；还要进行一系列的测试题，让你知道怎样的问题和答案才是受欢迎的，最后还是简洁的设计和用户体验让你不忍破坏这良好的氛围。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;其实 SO 和 Quora 的成功，总结起来很简单：时刻知道自己想要做什么，并且让用户感受到。&lt;&#x2F;p&gt;
&lt;p&gt;SO 想做的是好用的社会化编程问答网站，所以你能看到他们为此付出的努力：勋章激励机制，投票机制，文章内容预览功能，不同等级有不同权限(编辑别人的内容，关闭问题等等)，等等。&lt;&#x2F;p&gt;
&lt;p&gt;Quora 要做的是高质量的社会化问答社区，所以他们花了大量的心思在引导用户如何创建受欢迎的问题和答案，以及投票机制。个人觉得比较创新的是&amp;quot;Describe your xxx experience&amp;quot;，这样在不同的领域回答问题时，你的身份都是不一样的。当然还有其他一些独到之处，所有的这些都与 Quora 要做的相吻合，并且用户感受得到。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>用php5.3的namespace实现类的无痛继承</title>
            <pubDate>Thu, 24 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-namespace-class-extend/</link>
            <guid>https://limboy.me/posts/php-namespace-class-extend/</guid>
            <description>&lt;p&gt;标题有点怪异，先来说说正常的继承会有什么问题。假设你一个应用的 Controller 多次用到了 View 类，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Hello
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_index&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;index.tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_edit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;edit.tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个 View 是框架提供的，假如某一天发现 View 类需要新添加一个方法，最常用的就是新建一个自定义的 View 类继承框架的 View 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;My_View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newMethod&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时以前使用 View 类的地方就要全部变成 My_View，这是比较恐怖的。很多框架也都提供了解决方法，大体有三种&lt;&#x2F;p&gt;
&lt;h3 id=&quot;eval&quot;&gt;eval&lt;&#x2F;h3&gt;
&lt;p&gt;这是 Kohana2 采用的方法，就是系统类命名为 XXX_Core，然后调用的时候在 autoload 处，动态 eval 出一个 XXX class，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View_Core
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; autoload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;autoload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; first look into app dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; then look into modules dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; last look into system dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;class &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; extends &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_Core&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果用户需要对该类添加新的方法，可以在 app&#x2F;classes 里定义新的 View 类，同时继承 View_Core 类，这样使用时，因为优先级的原因，View 类名可以保持不变&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;View_Core
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newMethod&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为使用了 eval，所以不够优雅，而且有安全隐患&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kong-ke-fa&quot;&gt;空壳法&lt;&#x2F;h3&gt;
&lt;p&gt;这是 Kohana3 的做法，具体如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system&#x2F;classes&#x2F;view.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是的，就这么一句话
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Kohana_View &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system&#x2F;classes&#x2F;kohana&#x2F;view.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Kohana_View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据优先级，最后会找到 system&#x2F;classes&#x2F;view.php 定义的 View 类。如果需要自己扩展 Kohana_View 类，可以在 app&#x2F;classes 目录里新建一个 view.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Kohana_View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; add your method
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样框架就会先找到 app&#x2F;classes&#x2F;view.php 而不是 system&#x2F;classes&#x2F;view.php，自定义 View 类生效，同时原先使用的 View 类也不需要做调整&lt;&#x2F;p&gt;
&lt;p&gt;这么做的缺点就是 system&#x2F;classes 目录下会有大量的空壳类，有点累赘&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attach-behavior&quot;&gt;attach behavior&lt;&#x2F;h3&gt;
&lt;p&gt;这是 yii 采用的方法，简单说来就是通过 attachBehavior 方法，动态地给某个类添加新的功能&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Component
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeBehavior &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;CBehavior
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addWidth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Owner&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeComponent&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;attachBehavior&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SomeBehavior&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;addWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;需要实例化后动态调用 attachBehavior 方法，有点麻烦。而且不能使用父类的 protected 属性和方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-namespace-shi-xian-wu-tong-ji-cheng&quot;&gt;用 namespace 实现无痛继承&lt;&#x2F;h3&gt;
&lt;p&gt;所谓的无痛继承就是不用修改原先的类名，没有多余的空壳类，没有 eval，不用 attachBehavior，只要修改&#x27;use&#x27;就行了。代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; app&#x2F;lib1.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Lib1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;s before&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;定义了一个 Controller 类，使用时：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib1.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Lib1\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output: lib1&amp;#39;s before
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在要有一个新的 controller 继承 lib1.php 的 Controller，如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Lib2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Lib1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Lib1\Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;s before&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时，只要将 use App\Lib1\Controller 改为 use App\Lib2\Controller 就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以通过设置autoload来解决require的问题
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib1.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib2.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Lib2\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很方便&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php实现实时通信</title>
            <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-comet/</link>
            <guid>https://limboy.me/posts/php-comet/</guid>
            <description>&lt;p&gt;如果英文 ok 的话，可以直接看&lt;a href=&quot;http:&#x2F;&#x2F;gonzalo123.wordpress.com&#x2F;2011&#x2F;03&#x2F;14&#x2F;real-time-notifications-with-php&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;实现实时通信一般有两种方式:
socket 或 comet。socket 是比较好的解决方案，问题在于不是所有的浏览器都兼容，服务器端实现起来也稍微有点麻烦。相比之下，comet(基于 HTTP 长连接的&amp;quot;服务器推&amp;quot;)实现起来更加方便，而且兼容所有的浏览器。所以这次就来说说 comet 的 php 实现。&lt;&#x2F;p&gt;
&lt;p&gt;comet 也有好几种实现方式，如 iframe, http long request，二者的区别可以参考&lt;a href=&quot;http:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;cn&#x2F;web&#x2F;wa-lo-comet&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;。本文主要探讨 http long request 实现实时通信。&lt;&#x2F;p&gt;
&lt;p&gt;先说说 http 长链接是怎么回事，通俗点讲就是服务器不是一收到请求就直接吐数据，而是在那憋啊憋，一直憋到憋不住了，才告诉你执行结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$count&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something ...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;憋死我了&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;至于憋多长时间，就看具体应用了，如果憋太久的话，服务器资源的占用也会是个问题。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们就要通过这种方法来实现实时通信(其实是准实时)，先说一下原理：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起一个 ajax 长链接查询，然后服务端就开始执行代码，主要是检查某个文件是否被更新，如果没有，睡一会(sleep)，醒来接着检查&lt;&#x2F;li&gt;
&lt;li&gt;如果客户端又发起了一个查询链接(正常请求)，服务端收到后，处理请求，处理完毕后更新某个特定文件的 modify time&lt;&#x2F;li&gt;
&lt;li&gt;这时第一次 ajax 查询的后台代码还在执行，发现某个文件被更新，说明来了新请求，输出对应的结果&lt;&#x2F;li&gt;
&lt;li&gt;第一次 ajax 查询的 callback 被触发，更新页面，然后再发起一个新的 ajax 长链接&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ke-hu-duan&quot;&gt;客户端&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;meta http-equiv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Type&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;html; charset=utf-8&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Comet Test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;customAlert&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;publish customAlert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;customAlert2&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;publish customAlert2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;      src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1.5&#x2F;jquery.min.js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;      type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;NovComet.js&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;console.log(data);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;console.log(data);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a.customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a.customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码说的是，有个 NovComet 的 Object，注册了 customAlert 和 customAlert2 事件，当页面载入完成时，对两个按钮又加了监听事件，当点击时 NovComet 会发布 customAlert 或 customAlert2 事件，然后 NovComet 执行了 run 方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;novcomet&quot;&gt;NovComet&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;NovComet.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  sleepTime: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _subscribed: {},
&lt;&#x2F;span&gt;&lt;span&gt;  _timeout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _baseurl: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comet.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _urlParam: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;subscribed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      cbk: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      timestamp: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_refresh&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_timeout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sleepTime&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;baseurl&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;baseurl&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.round&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Date()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getTime&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_args&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;currentTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timestamp&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_urlParam &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;[&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;]=&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;currentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; sin cambios
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._refresh&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; trigger
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timestamp&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.cbk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._refresh&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_args&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;publish=&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NovComet 的 run 方法首先把之前注册的几个事件串成一个 url，并且很狡猾地使用了&amp;quot;[]&amp;quot;，类似:
?subscribed[customAlert]=1300016814&amp;amp;subscribed[customAlert2]=1300016814&amp;amp;1300016825，这样 php 收到后，就会得到$_GET[subscribed]数组，最后那个时间戳是为了避免请求被缓存。如果收到后台传过来的数据 data 的 s 值为 0，说明什么也没发生，隔 1 秒后继续执行；如果 data.s 的值为 1，说明 NovComet 的 publish 事件被触发，则调用对应的 callback。&lt;&#x2F;p&gt;
&lt;p&gt;publish 方法执行后，会构造一个类似: ?publish=customAlert 这样一个 url 发送到后台。后台检测到 pubish 参数，则获取该参数的值，并更新对应文件的 mtime。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-wu-duan&quot;&gt;服务端&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; comet.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;NovComet.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter_input(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;INPUT_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;publish&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FILTER_SANITIZE_STRING&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter_var_array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;subscribed&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FILTER_SANITIZE_NUMBER_INT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;setVar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果收到 publish 参数，直接输出，否则执行 run 方法，至于 run 是怎么回事，且看下码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NovComet.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;COMET_OK &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;COMET_CHANGED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_var&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setVar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_vars&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTries&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setSleepTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setCallbackCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$callback&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;DEFAULT_COMET_PATH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;dev&#x2F;shm&#x2F;%s.comet&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_null(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$defaultCometPAth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;::DEFAULT_COMET_PATH;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$defaultCometPAth&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$defaultCometPAth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filemtime(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_vars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clearstatcache()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;s&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;COMET_CHANGED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;s&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;COMET_OK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(touch(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;DEFAULT_COMET_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 publish 时，创建了一个以$id命名的文件。run时，如果发现该$id 文件存在，且时间戳大于之前保存的该$id对应的时间戳(通过setVar设置的)，说明$id 事件被触发，处理完后把$id放到$out 数组中，然后判断一下$out 数组是否为空，如果不为空，则输出一段 json。&lt;&#x2F;p&gt;
&lt;p&gt;如果一段时间内都没有触发事件(for 循环执行完毕)，也输出一段 json，告诉前端执行完了，但是没有任何新情况。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shuo-ming&quot;&gt;说明&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;可以在客户端监听&#x2F;发布多个事件&lt;&#x2F;li&gt;
&lt;li&gt;监听事件时，可以传一个 callback，这样收到数据时就会出发该 callback&lt;&#x2F;li&gt;
&lt;li&gt;当监听事件时，会传一个时间戳&lt;&#x2F;li&gt;
&lt;li&gt;当事件被 publish 时，会向后台发一个请求，并传递一个新的时间戳&lt;&#x2F;li&gt;
&lt;li&gt;服务端不会一直执行，如果指定时间内，没有任何请求被触发，则结束运行&lt;&#x2F;li&gt;
&lt;li&gt;客户端会重复上述过程(setTimeout &amp;amp; NovComet.run())&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最后来一张图说明一下&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;php-comet&amp;#x2F;comet-firebug.png&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;运行一段时间后，没有收到任何 publish 事件，服务端结束执行&lt;&#x2F;li&gt;
&lt;li&gt;服务端返回一段 json&lt;&#x2F;li&gt;
&lt;li&gt;客户端触发了一个事件，服务端收到事件，返回一段新的 json&lt;&#x2F;li&gt;
&lt;li&gt;callback 被触发&lt;&#x2F;li&gt;
&lt;li&gt;客户端进入下一次的 ajax 长链接查询&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
        
        
        <item>
            <title>javascript大杂烩</title>
            <pubDate>Fri, 04 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/javascript/</link>
            <guid>https://limboy.me/posts/javascript/</guid>
            <description>&lt;p&gt;花了点时间学习了下 js 基础，跟大家分享一下，有不到之处，欢迎指出 :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-yu-dui-xiang&quot;&gt;关于对象&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dui-xiang-de-chuang-jian&quot;&gt;对象的创建&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Object();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; var newObj = {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newObj&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;someValue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;val&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;yi-qie-jie-dui-xiang&quot;&gt;一切皆对象&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但也有些特殊的对象，如 3, &#x27;str&#x27;, true 等等，但如果用 instanceof 测试的话，会发现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但它们真的也是对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;3.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个理由&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.times&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 5 .times(print); &#x2F;&#x2F;also works
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 加上括号是为了避免出现解析错误(js引擎会以为是小数点)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就连函数也是一个对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dui-xiang-de-chu-shi-hua&quot;&gt;对象的初始化&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;John&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; var user = User(&amp;#39;John&amp;#39;, &amp;#39;Resig&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个 function，可以看成是一个 Class，也可以看成是一个正常的函数，这就麻烦了，因为无论加不加上 new 这个关键字，function 都能正常运行，虽然结果会不一样。&lt;&#x2F;p&gt;
&lt;p&gt;如果看成 Class，使用 new 关键字初始化，那么 function 里的 this 指向当前的 function。如果不使用 new 关键字，则 function 里的 this 默认指向 Window&lt;&#x2F;p&gt;
&lt;p&gt;有两种解决方法，一个是将 Class function 的首字母大写，如 User，这样就能清楚地知道哪些 function 是 Class。但这样还是避免不了写程序时粗心，忘了加 new 关键字。&lt;&#x2F;p&gt;
&lt;p&gt;另一种方法就是不是用 new 关键字，在 function 里自动判断，保证返回的一定是当前对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;User) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更通用的方法是创建一个 makeClass 方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; makeClass - By John Resig (MIT Licensed)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;makeClass&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;arguments.callee) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;function&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.callee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;arguments.callee(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为函数名未知，所以使用了 arguments.callee 来实现。&lt;&#x2F;p&gt;
&lt;p&gt;makeClass 的使用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;makeClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;John&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; =&amp;gt; &amp;quot;John Resig&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dui-xiang-de-ji-cheng&quot;&gt;对象的继承&lt;&#x2F;h4&gt;
&lt;p&gt;每个 function 都有一个特殊的变量&amp;quot;prototype&amp;quot;，当实例化对象时，这个变量上的各个属性也会被附加到对象上&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;.prototype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Car(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Benz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.info&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果不使用 new 关键字，prototype 就失效了&lt;&#x2F;p&gt;
&lt;p&gt;prototype 属性也有一个特殊的属性&amp;quot;constructor&amp;quot;，通过它我们就能实现继承了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inAProto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;A(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Hook up A into B&amp;#39;s prototype chain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inBProto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;B();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bi-bao-yu-mo-kuai-hua&quot;&gt;闭包与模块化&lt;&#x2F;h3&gt;
&lt;p&gt;闭包是一种现象，通常是因为一个 function 返回了一个内部的 function，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2011&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2011
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到内部 function f2 成功地得到了 f1 的 local 变量，又因为 n 被 f2 使用，所以变量 n 就常驻内存了
从这个角度上说，如果把 f1 看成一个 class，n 就变成了私有变量，而 f2 成为了公共方法，所以就有了模块化的概念&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myNamespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myPrivateVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPrivateMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;someText&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;someText&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    myPublicVar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPublicFunction&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myPrivateVar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPrivateMethod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;})();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bi-mian-ming-ming-wu-ran-de-fang-fa&quot;&gt;避免命名污染的方法&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; self executing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; if you want some var global accessable, put &amp;quot;window.&amp;quot; ahead
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myVar&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;globalVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;qiang-da-de-prototype&quot;&gt;强大的 prototype&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;contains &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.length; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;stringArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foobar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;stringArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foobar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;fang-bian-de&quot;&gt;方便的&amp;quot;+&amp;quot;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Quick hex to dec conversion:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;0xFF&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 255
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Get a timestamp for now, the equivalent of `new Date().getTime()`:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+new &lt;&#x2F;span&gt;&lt;span&gt;Date();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Safer parsing than parseFloat()&#x2F;parseInt()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1,000&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 1, not 1000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1,000&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; NaN, much better for testing user input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;010&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 8, because of the octal literal prefix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;010&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 10, `Number()` doesn&amp;#39;t parse octal literals
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; A use case for this would be rare, but still useful in cases
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; for shortening something like if (someVar === null) someVar = 0;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Boolean to integer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Other useful tidbits:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1e10&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 10000000000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1e-4&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0.0001
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-12&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; -12
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意：如果是字符串与数字相加的话，结果还是字符串，如&amp;quot;hello&amp;quot; + 3，结果为&amp;quot;hello3&amp;quot;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-guo-lai-huo-qu-she-zhi-object-de-shu-xing&quot;&gt;通过[]来获取&#x2F;设置 Object 的属性&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;class&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; access reversed property
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;have space&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; has space
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.class .subclass&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;value&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; can have .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;string-de-split-he-replace-ke-yi-bao-han-zheng-ze&quot;&gt;String 的 split 和 replace 可以包含正则&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world   with  spaces&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;returns an array: [&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;with&amp;quot;, &amp;quot;spaces&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo bar baz &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;returns &amp;quot;foo1bar2baz3&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;han-shu-ding-yi-shi-yu-han-shu-biao-da-shi&quot;&gt;函数定义式与函数表达式&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;walle&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:undefined
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;函数定义式
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;I am Laruence&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;walle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;函数表达式
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;walle&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:function
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于函数定义式，会将函数定义提前，而对于函数表达式，只有在执行过程中才会计算&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-yong-yu&quot;&gt;作用域&lt;&#x2F;h4&gt;
&lt;p&gt;对于下面的 demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;laruence&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;eve&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出结果为&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ReferenceError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;原因是 js 在执行函数之前，会有一个预编译的过程，这个过程中会把局部变量提取出来，放到 scope chain 中，value 都为 undefined(不包括传递过来的参数)，所以在执行 echo 函数时，name 的值在设置为&amp;quot;eve&amp;quot;前，为 undefined&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ejohn.org&#x2F;blog&#x2F;simple-class-instantiation&#x2F;&quot;&gt;simple class instantiation&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;61088&#x2F;94962&quot;&gt;hidden features of javascript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mckoss.com&#x2F;jscript&#x2F;object.htm&quot;&gt;Object Oriented Programming in JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;yuiblog.com&#x2F;blog&#x2F;2007&#x2F;06&#x2F;12&#x2F;module-pattern&#x2F;&quot;&gt;module pattern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.laruence.com&#x2F;2009&#x2F;05&#x2F;28&#x2F;863.html&quot;&gt;javascript 的作用域原理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>git多人协作开发流程(以blog为例)</title>
            <pubDate>Fri, 25 Feb 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/git-workflow-with-blog-demo/</link>
            <guid>https://limboy.me/posts/git-workflow-with-blog-demo/</guid>
            <description>&lt;p&gt;时间仓促，能力有限，错误难免(代码没有经过实际验证，所以可能会有问题)，欢迎指正 :)&lt;&#x2F;p&gt;
&lt;p&gt;这个开发流程就是基于&lt;a href=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;posts&#x2F;a-successful-git-branching-model&#x2F;&quot;&gt;a successful git model&lt;&#x2F;a&gt;这篇文章而来的，如果对英文不感冒的话，我这有&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;translate&#x2F;2010&#x2F;10&#x2F;30&#x2F;a-successful-git-branch.html&quot;&gt;翻译版&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;项目背景：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;张三 &#x2F; 李四 &#x2F; 王五 打算共同协作，开发一套博客系统
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;项目分工：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;张三 &#x2F; 李四 负责文章系统
&lt;&#x2F;span&gt;&lt;span&gt;王五负责评论系统
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jian-li-fu-wu-duan-cang-ku&quot;&gt;建立服务端仓库&lt;&#x2F;h3&gt;
&lt;p&gt;git 虽然是分布式版本管理工具，但为了方便管理，我们需要建立一个中心仓库，先在服务端建立两条分支&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;master 保存稳定版(production ready)，开发人员平时的代码都提交到 develop 分支上&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-zhe-de-git-fen-zhi&quot;&gt;开发者的 Git 分支&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhang-san-de-git-fen-zhi&quot;&gt;张三的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;因为张三和李四同时开发文章系统，所以就有了下面的分支&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 张三的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lisi&#x2F;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add lisi http:&#x2F;&#x2F;lisi-server&#x2F;lisi.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;li-si-de-git-fen-zhi&quot;&gt;李四的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;跟张三类似，不过 article server 变成了张三的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 李四的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;zhangsan&#x2F;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add zhangsan http:&#x2F;&#x2F;zhangsan-server&#x2F;zhangsan.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;wang-wu-de-git-fen-zhi&quot;&gt;王五的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;因为只有王五一个人开发评论系统，所以只要一条远程分支就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 王五的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;comment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kai-fa-guo-cheng&quot;&gt;开发过程&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhang-san-he-li-si&quot;&gt;张三和李四&lt;&#x2F;h4&gt;
&lt;p&gt;假设张三负责文章的管理，及前端显示。李四负责文章的分类和标签系统。&lt;&#x2F;p&gt;
&lt;p&gt;张三开发完一部分后(n 次本地 commit)，提交到本地的 git server(也就是李四添加的 http:&#x2F;&#x2F;zhangsan-server&#x2F;zhangsan.git)。&lt;&#x2F;p&gt;
&lt;p&gt;李四开发完一部分后，因为要与张三开发的部分合并，所以需要执行一下 rebase 或 merge&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 当前在article分支中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase zhangsan&#x2F;article
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 提交到本地的git server (也就是张三添加的http:&#x2F;&#x2F;lisi-server&#x2F;lisi.git)。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push local&#x2F;article master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时张三又开发完了一部分，他也会走跟李四一样的流程，rebase &amp;amp; push (如果有冲突，解决之)。&lt;&#x2F;p&gt;
&lt;p&gt;假设由张三统一负责将每日的开发进度提交到 remote develop 分支上，张三在执行了上面所说的流程后，提交到服务端的 develop 分支。但这时很可能王五已经把他写的代码提交了，所以要先执行一下 rebase&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样张三和李四的代码就都提交到了服务端的 develop 分支上。王五那边的流程也一样，只是少了本地同步的过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-wan-bi-jin-ru-ce-shi-jie-duan&quot;&gt;开发完毕，进入测试阶段&lt;&#x2F;h3&gt;
&lt;p&gt;经过几天的开发，各个功能都已基本完成，下面就要进入测试阶段。具体做法是在服务端新添加一个分支，命名为 release，所以这时服务端就有 3 个分支了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;三位同学都在本地新建一个 branch，对应服务端的 release 分支&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release origin&#x2F;release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;分别进行测试，如果发现问题，则执行 pull &amp;amp; push&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 当前在release分支下
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pull origin release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;经过几天的测试后，发现没什么问题了，就可以发布稳定版了，假设为 0.1&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tag 0.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时别忘了把 release 分支上的代码与 develop 分支合并，保证 develop 分支上不会有遗留的 bug。(没有找到如何直接 merge 两个服务端 branch 的方法)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 删除服务端的release分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin :release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就可以继续在 develop 分支上进行开发了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-jia-xin-te-xing&quot;&gt;添加新特性&lt;&#x2F;h3&gt;
&lt;p&gt;博客系统需要添加 archives 功能，这个功能的开发就交给了新来的赵六。此时，在服务端新开一个分支，命名为 feature，这时服务端的分支就变成了这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;赵六也在本地建立一个 archive 分支，每天提交到服务端的 feature&#x2F;archive，赵六的 Git 分支是这样的(不相关的服务端 Git 已省去)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等到这个 feature 开发完了，与服务端的 develop 分支执行一下 rebase，然后再提交到服务端的 develop，这样博客的 archive 功能就有了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 如果要删除服务端的feature&#x2F;archive分支的话
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin :feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来的流程跟上面的一样：开发完毕后，新建 release 分支，在那上面进行 bug 修复，修复完毕后，merge 到服务端的 master 和 develop&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-ji-xiu-fu-lou-dong&quot;&gt;紧急修复漏洞&lt;&#x2F;h3&gt;
&lt;p&gt;博客出现了一个 xss 漏洞，需要尽快修复，这时新建一个 hotfix 分支(现在本地建，然后提交到服务端)，然后对漏洞进行修复，修复完后，提交到服务端的 master 和 develop&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pull origin master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 漏洞修复...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 修复完后
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>图解HTTPS</title>
            <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/https-workflow/</link>
            <guid>https://limboy.me/posts/https-workflow/</guid>
            <description>&lt;p&gt;我们都知道 HTTPS 能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用 HTTPS 协议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;https-jian-jie&quot;&gt;HTTPS 简介&lt;&#x2F;h3&gt;
&lt;p&gt;HTTPS 其实是有两部分组成：HTTP + SSL &#x2F; TLS，也就是在 HTTP 上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;https-workflow&amp;#x2F;https.png&quot;
        width=&quot;648&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;1-ke-hu-duan-fa-qi-https-qing-qiu&quot;&gt;1. 客户端发起 HTTPS 请求&lt;&#x2F;h3&gt;
&lt;p&gt;这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-fu-wu-duan-de-pei-zhi&quot;&gt;2. 服务端的配置&lt;&#x2F;h3&gt;
&lt;p&gt;采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-chuan-song-zheng-shu&quot;&gt;3. 传送证书&lt;&#x2F;h3&gt;
&lt;p&gt;这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-ke-hu-duan-jie-xi-zheng-shu&quot;&gt;4. 客户端解析证书&lt;&#x2F;h3&gt;
&lt;p&gt;这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-chuan-song-jia-mi-xin-xi&quot;&gt;5. 传送加密信息&lt;&#x2F;h3&gt;
&lt;p&gt;这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-fu-wu-duan-jie-mi-xin-xi&quot;&gt;6. 服务端解密信息&lt;&#x2F;h3&gt;
&lt;p&gt;服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-chuan-shu-jia-mi-hou-de-xin-xi&quot;&gt;7. 传输加密后的信息&lt;&#x2F;h3&gt;
&lt;p&gt;这部分信息是服务段用私钥加密后的信息，可以在客户端被还原&lt;&#x2F;p&gt;
&lt;h3 id=&quot;8-ke-hu-duan-jie-mi-xin-xi&quot;&gt;8. 客户端解密信息&lt;&#x2F;h3&gt;
&lt;p&gt;客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>《软件随想录》小记</title>
            <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/more-joel-on-software/</link>
            <guid>https://limboy.me/posts/more-joel-on-software/</guid>
            <description>&lt;p&gt;非常感谢&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2009&#x2F;12&#x2F;chinese_version_of_mjos_is_on_sale.html&quot;&gt;阮一峰老师&lt;&#x2F;a&gt;用心的翻译。读起来完全没有生硬感，专有名词翻译地也很到位，还有很多贴心的脚注。&lt;&#x2F;p&gt;
&lt;p&gt;读完此书，对 Joel 的文章最大的感触是：观点鲜明，语言风趣，见解独到，(虽然有点拖泥带水的感觉，XDD)。简单摘录几段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果要让程序员高效地工作，你就必须要给予他们安静和宽敞的工作环境，比如私人办公室&lt;&#x2F;li&gt;
&lt;li&gt;让程序员干有趣的活是吸引优秀程序员最好的方法之一&lt;&#x2F;li&gt;
&lt;li&gt;让一流的新员工挑选自己的喜欢的项目&lt;&#x2F;li&gt;
&lt;li&gt;思考你得公司代表了怎样的追求，这种追求是怎样形成的，又是怎样被别人感受到的&lt;&#x2F;li&gt;
&lt;li&gt;程序员其实不在乎钱，除非你在其他事情上搞杂了。如果有人在抱怨薪水，而以前并没有出现这种情况，这经常是一种信号，表明人们并不真正喜欢他们的工作&lt;&#x2F;li&gt;
&lt;li&gt;大家坐在一起吃饭，感觉像个大家庭。创造一个有凝聚力的像胶水粘在一起的团队&lt;&#x2F;li&gt;
&lt;li&gt;指针和递归的真正价值在于那种你在学习它们的过程中所得到的思维深度&lt;&#x2F;li&gt;
&lt;li&gt;公司之所以需要管理，就是为了不影响聪明人的工作，让他们把事情做完&lt;&#x2F;li&gt;
&lt;li&gt;能不能清晰地写出技术文章，决定了你是一个口齿不清的程序员还是一个领袖。如果不是 Linus Torvalds 不断地散步福音，请问 Linux 操作系统会成功吗？虽然他是一个非常聪明的计算机天才。但是 Linux 吸引来全世界一大批志愿者的真正原因是 Linus Torvalds 的表达能力&lt;&#x2F;li&gt;
&lt;li&gt;当你改正了一个又一个小细节后，当你磨光，定型，擦亮，修饰你的产品的每一个小边角后，就会有神奇的事发生。你最后拿出来的是一件真正优秀的作品。它第一眼就让人觉得震撼，出类拔萃，工作起来完全符合直觉&lt;&#x2F;li&gt;
&lt;li&gt;世界上只有一件事比你自己设计软件更困难，那就是一个团队一起设计软件&lt;&#x2F;li&gt;
&lt;li&gt;最让我抓狂的就是有些开发团队养成了一个坏习惯，每次需要做决定时就开会&lt;&#x2F;li&gt;
&lt;li&gt;太多的选择最终限制了我们的自由，而不是解放了我们&lt;&#x2F;li&gt;
&lt;li&gt;避开攻击的最好方法之一，是让它看上去好像获得了成功&lt;&#x2F;li&gt;
&lt;li&gt;良好的社会化界面设计会创造更多的价值&lt;&#x2F;li&gt;
&lt;li&gt;如果你让某个功能很容易操作，人们就愿意使用它。通过这种方式，你能够暗中鼓励人们按预想的方式使用&lt;&#x2F;li&gt;
&lt;li&gt;空酒馆效应&lt;&#x2F;li&gt;
&lt;li&gt;解决轻而易举的事情是拿不到钱的，要挣钱，就别怕脏&lt;&#x2F;li&gt;
&lt;li&gt;如果你想保持增长，不管是个人，还是公司。唯一的方法就是扩张自己擅长处理的业务边界，除非故意要保持公司的小型化&lt;&#x2F;li&gt;
&lt;li&gt;如果日程规划是以&amp;quot;天&amp;quot;为单位，甚至以&amp;quot;周&amp;quot;为单位，我就认定它是没用的，你必须将日程规划分解成一些非常小的任务，这些任务能够在以&amp;quot;小时&amp;quot;为单位的时间段中完成，不能有任何任务所需的时间超过 16 小时&lt;&#x2F;li&gt;
&lt;li&gt;最好的工作条件 -&amp;gt; 最好的程序员 -&amp;gt; 最好的软件 -&amp;gt; 利润&lt;&#x2F;li&gt;
&lt;li&gt;如果你想压低程序员的工资，那你就会得到质量很垃圾的软件，而这实际上也不会为你省下很多钱&lt;&#x2F;li&gt;
&lt;li&gt;布鲁克斯法则：向一个已经延误的软件项目中增加人手，只会使他更加延误&lt;&#x2F;li&gt;
&lt;li&gt;一个优秀的程序员独自完成一项任务，就不需要额外的沟通和协调。如果同样的任务让 5 个程序员一起完成，他们之间就必须沟通和协调，这会花掉大量时间&lt;&#x2F;li&gt;
&lt;li&gt;用许多平庸的程序员取代少数优秀的程序员，这种做法的真正问题在于不管平庸的程序员工作多长时间，他们做出来的东西无法像优秀程序员做得那样好&lt;&#x2F;li&gt;
&lt;li&gt;你的公司的成功，依赖于程序员真正以办公室为家的程度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)facebook是如何管理代码的</title>
            <pubDate>Tue, 18 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-facebook-ships-code/</link>
            <guid>https://limboy.me/posts/how-facebook-ships-code/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;framethink.wordpress.com&#x2F;2011&#x2F;01&#x2F;17&#x2F;how-facebook-ships-code&#x2F;&quot;&gt;原文在此&lt;&#x2F;a&gt;，看完之后，终于明白为什么优秀的工程师都去了&#x2F;想去 facebook，因为那里是工程师们的天堂。&lt;&#x2F;p&gt;
&lt;p&gt;译文:&lt;&#x2F;p&gt;
&lt;p&gt;我对 facebook 的运转着迷。这是一个很独特的环境，不容易被复制（他们的体系并不适合所有的公司，即使他们努力尝试过）。下面是我和 facebook 的朋友们关于他们如何开发和管理项目的记录。&lt;&#x2F;p&gt;
&lt;p&gt;现在距离我收集的这些信息又过去 6 个月了，我相信 facebook 肯定又对他们的项目开发实践进行了改进。所以这些记录可能会有点过时。同时 facebook 的工程师驱动文化也越来越为大众所知。非常感谢那些帮助我整理这篇文章的 facebook 的朋友们。&lt;&#x2F;p&gt;
&lt;p&gt;记录：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;截止到 2010 年 6 月，facebook 有将近 2000 名员工，10 个月前只有 1100 名，一年之间差不多翻了一番。&lt;&#x2F;li&gt;
&lt;li&gt;两个最大的部门是工程师和运维，每个部门大概都是 400-500 人。这两个部门人数大约占了公司的一半。&lt;&#x2F;li&gt;
&lt;li&gt;产品经理与工程师的比例大约为 1-7 到 1-10。&lt;&#x2F;li&gt;
&lt;li&gt;每个工程师入职时，都要接收 4-6 周的培训，通过修补 bugs 和听高级开发工程师的课程来熟悉 facebook。&lt;&#x2F;li&gt;
&lt;li&gt;培训结束后，每个工程师都可以接触线上的数据库(更大的权力意味着更大的责任，也有一份&amp;quot;勿做清单&amp;quot;，不然可能会被开，比如共享用户的隐私数据)。&lt;&#x2F;li&gt;
&lt;li&gt;有非常牢靠的安全体系，以免有人不小心&#x2F;故意做了些不好的事。&lt;&#x2F;li&gt;
&lt;li&gt;每个工程师可以修改 facebook 的任何代码，随时可以迁入。&lt;&#x2F;li&gt;
&lt;li&gt;浓厚的工程师驱动文化。&amp;quot;产品经理基本可以被忽略&amp;quot;，这是 facebook 一名员工的话。工程师可以修改流程的细节，重新安排工作任务，随时植入自己的想法。&lt;&#x2F;li&gt;
&lt;li&gt;在每月的跨部门会议上，由工程师来汇报工作进度，市场部和产品经理会出席会议，也可以做些简短的发言，但如果说得太多，很可能就会被打小报告。他们确实想让工程师来主导产品的开发，对自己的产品负责。&lt;&#x2F;li&gt;
&lt;li&gt;项目需要的资源都是自愿的
** 一个产品经理把工程师们召集到一起，让他们对他的想法产生兴趣。
** 工程师们决定开发那些让他们感兴趣的特性。
** 工程师跟他们的经理说：&amp;quot;我下周想开发这 5 个新特性&amp;quot;。
** 经理会让工程师独立开发，可能有时会让他优先完成一些特性。
** 工程师独立完成所有的特性——前端&#x2F;后端&#x2F;数据库，等等所有相关的部分。如果需要得到设计人员的帮助，需要先让设计人员对你的想法产生兴趣。其他如架构之类的也一样。但总体来说，工程师要独立完成所有的任务。&lt;&#x2F;li&gt;
&lt;li&gt;对于某个特性是否值得开发的争论，通常是这么解决的：花一个星期的时间完成他，并在小部分人群中(如 1%)进行测试。&lt;&#x2F;li&gt;
&lt;li&gt;工程师常常希望解决难题，这能获得声望和尊敬。他们很难对前端项目或 UI 设计产生太大的兴趣。这跟其他公司可能正好相反。在 facebook，后端任务，比如新的 feed 算法，广告投放算法，memcache 优化等等，是工程师真正感兴趣的。&lt;&#x2F;li&gt;
&lt;li&gt;所有的代码修改都要进行审核(通过一个或多个工程师)，但 News Feed 是个例外，因为太重要了，Zuckerberg 会亲自 review。&lt;&#x2F;li&gt;
&lt;li&gt;所有的修改至少要被一个人审核，而且这个系统可以让任何人很方便地审核其他人的代码，即使你没有邀请他&lt;&#x2F;li&gt;
&lt;li&gt;工程师负责测试，代码修复，和维护自己的项目。&lt;&#x2F;li&gt;
&lt;li&gt;每个办公室或通过 VPN 连接的员工会使用下一版的 facebook，这个版本的 facebook 会经常更新，通常比公开的早 1-12 小时。所有的员工被强烈建议提交 bugs，而且通常会很快被修复。&lt;&#x2F;li&gt;
&lt;li&gt;很奇怪只有很少的 QA 或自动测试——&amp;quot;大部分工程师都能写出基本没有 bug 的代码，只是在其他公司他们不需要这么做。如果有 QA 部门，他们只要把代码写完，扔给他们就行了&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;[针对上一条]我们有自动测试，代码发布前必须要通过测试。我们不相信&amp;quot;所有的工程师都能写出没有 bug 的代码&amp;quot;，毕竟这是一个商业公司。&lt;&#x2F;li&gt;
&lt;li&gt;很奇怪，缺少产品经理的影响和控制——产品经理是很独立的和自由的。产生影响力的关键是与工程师和工程师的领导们们搞好关系。需要大致了解技术，不要提一些愚蠢的想法。&lt;&#x2F;li&gt;
&lt;li&gt;所有提交的代码每周二打包一次。&lt;&#x2F;li&gt;
&lt;li&gt;只要多一分努力，终于一天会发生改变。&lt;&#x2F;li&gt;
&lt;li&gt;星期二的代码发布，需要所有的提交过代码的工程师在场。&lt;&#x2F;li&gt;
&lt;li&gt;代码打包前，工程师必须在一个特殊的 IRC channel 上。&lt;&#x2F;li&gt;
&lt;li&gt;运维执行打包过程
** facebook 有大约 60000 台服务器
** 有 9 个代码发布级别
** 最小的级别只有 6 台服务器
** 星期二的代码发布会先发布到 6 台服务器上，运维组会检测这 6 台服务器的反应，保证代码正常工作，然后再提交到下一级
** 如果发布出现了一些问题（如报错等等），那么就停止下一级的部署，提交出错代码的工程师负责修复问题，然后从头继续发布。
** 所以一次发布可能会经历几次重复：1-2-3-fix. 回到 1. 1-2-3-4-5-fix. 回到 1. 1-2-3-4-5-6-7-8-9&lt;&#x2F;li&gt;
&lt;li&gt;运维组是受过严格训练，倍受尊敬，而且有商业意识的。他们的工作包括分析错误日志，负载和内存状态等等。还包括用户行为。&lt;&#x2F;li&gt;
&lt;li&gt;代码发布期间，运维组使用 IRC-based 页面系统，可以通过 facebook&#x2F;email&#x2F;irc&#x2F;im&#x2F;sms ping 每一个工程师，如果需要他们注意的话。对运维组不做回应是一件很羞愧的事。&lt;&#x2F;li&gt;
&lt;li&gt;代码一旦发布到第 9 级，并且稳定运行，就算发布成功了。&lt;&#x2F;li&gt;
&lt;li&gt;如果一个特性没有按时完成，也没什么大不了的，下次完成时一并发布即可。&lt;&#x2F;li&gt;
&lt;li&gt;如果被 svn-blamed,public shamed 或工作经常疏忽就很可能被开除。&amp;quot;这是一个高效的文化&amp;quot;。不够高效或者不够聪明的员工会被剔除。管理层会在 6 个月的时间里观察你表现，如果不合格，只能说再见。每一级都是这个待遇，即使是 C 级别和 VP 级别，如果不够高效，也会被开除。&lt;&#x2F;li&gt;
&lt;li&gt;被责骂不会导致解雇。我们特别尊重别人，原谅别人。大部分高级工程师都或多或少犯过一些严重的错误，包括我。但没有人因此被解雇。&lt;&#x2F;li&gt;
&lt;li&gt;我也没有遇到过因为上面提到过的犯错误而被解雇。有些人犯了错，他们会非常努力地去修复，也让其他人得到了学习。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说数据库架构，ORM缓存和路由</title>
            <pubDate>Tue, 18 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/orm-cache/</link>
            <guid>https://limboy.me/posts/orm-cache/</guid>
            <description>&lt;h3 id=&quot;wei-shi-yao-zai-orm-ceng-zuo-huan-cun-er-bu-shi-db-ceng&quot;&gt;为什么在 ORM 层做缓存，而不是 DB 层&lt;&#x2F;h3&gt;
&lt;p&gt;ORM 能有效地提高程序员的开发效率，程序员更喜欢操作对象而不是数据库，他们不关心也不想手写一堆 SQL 语句，毕竟一个公司里普通程序员要占多数，他们并不是非常熟悉数据库，写出来的 SQL 执行效率也肯定会有这样那样的问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果让程序员去操作对象，这就是他们的强项了：定义关系、使用 ORM 的方法和属性、获取&#x2F;遍历结果等等。同时 ORM 又可以在内部对 SQL 语句及对象之间的关系进行优化，尽量保证 SQL 高效地执行，甚至可以透明地加个缓存。这样一个双赢的结果，何乐而不为呢。&lt;&#x2F;p&gt;
&lt;p&gt;如果是一些比较复杂的查询语句，只能通过写 SQL 语句来实现，这样的话，可以在语句的执行段外面套一层缓存判断，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;isobamapresident&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some database heavy stuff
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$votes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; VOTES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; vote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;OBAMA&amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$votes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(USA_CITIZEN_COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Sure is!&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Nope.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; well, ideally
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;isobamapresident&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tou-ming-di-cha-ru-huan-cun&quot;&gt;透明地插入缓存&lt;&#x2F;h3&gt;
&lt;p&gt;所谓透明缓存，就是用户正常使用 ORM，获取 ORM 的查询结果。而事实上 ORM 的结果集很可能是来自缓存而不是数据库。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;获取1小时前发布的文章
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;正常的结果是通过执行以下SQL语句返回的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;SELECT * FROM article WHERE created &amp;gt; $time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;但实际上可能是从Memcache中读取的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Memcache&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;memcache_host&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;some_key&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样一来，php 代码不用改变，但因为是从缓存中读取，所以数据的获取速度有保障，同时也减轻了数据库的压力，又是一个双赢的局面。&lt;&#x2F;p&gt;
&lt;p&gt;当然愿望是美好的，现实是残酷的，如果要达到上面所说的效果，需要费不少周折。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-ku-jia-gou&quot;&gt;数据库架构&lt;&#x2F;h3&gt;
&lt;p&gt;在设计 ORM 的缓存前，先了解以下数据库的大致架构。以 netlog 的数据库架构变迁为例：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;单数据库&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache1.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;主库+从库&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache2.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;保持主库+从库的架构，把读写最频繁的几个表分到单独的数据库服务器&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache3.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;把那几个读写最频繁的表也分成主从&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache4.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;出现了 1040 too many connections&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache5.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Sharding(水平分区)&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache6.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;数据库服务器&#x2F;数据库&#x2F;分区&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache7.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样基本上就可以应付正常的访问了，如果哪个表数据量过大或连接过多，就 Sharding 一下。但随之而来的问题也很明显，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;没有分区之前，可以通过下面几段代码来获取数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; title, message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; BLOG_MESSAGES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; userid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; {userID}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;assignInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;userID&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$userID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getResults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;假设将BLOG_MESSAGES按照用户id分配到了不同的分区上，上面的代码就需要做一些改动
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;最简单的就是在getInstance时把用户的id传过去，让ORM内部去找分区，相当于路由
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$userID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ru-he-dui-shu-ju-jin-xing-fen-pian&quot;&gt;如何对数据进行分片&lt;&#x2F;h3&gt;
&lt;p&gt;当要对数据进行分片时，应该考虑这两个问题：使用表的哪一列(sharding key)作为分割的依据；使用怎样的分割算法(sharding scheme)。使用哪个 key 要看具体的应用。以博客为例，如果想要现实每个用户的博客，那么 userID 就可以作为 sharding key。如何根据 sharding key 来找到对应的分区一般有三种方法：取模(求余)、数据量、映射表。假设采用映射表的方法，如果要获取用户的博客，先要到映射表里找到该 userID 对应的分区，再从分区中找到 userID 对应的博客列表。随之而来的问题是：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-neng-zhi-xing-kua-fen-qu-cha-xun&quot;&gt;不能执行跨分区查询&lt;&#x2F;h4&gt;
&lt;p&gt;如果要从不同的分区获取数据，就不能通过 JOIN&#x2F;GROUP BY&#x2F;ORDER BY&#x2F;LIMIT 来实现了。比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F;获取最新的10条博客
&lt;&#x2F;span&gt;&lt;span&gt;SELECT * FROM BLOG_MESSAGES ORDER BY created DESC LIMIT 0, 10;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;如果数据在多个分区中，上面这条查询就失效了
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要解决这个问题，最好从设计上就避免这些查询语句。也可以通过冗余来实现。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-yi-zhi-xing-de-bu-dao-bao-zhang&quot;&gt;数据一致性得不到保障&lt;&#x2F;h4&gt;
&lt;p&gt;因为会在多个数据库之间更新数据，如果要保证数据一致性，就要实现分布式事务。&lt;&#x2F;p&gt;
&lt;p&gt;也可以通过一个小技巧来模拟分布式事务，比如有两台数据库服务器，这时可以先开启一个事务，但只在保证两台服务器都正常的情况下才一一提交事务。当然两次事务的提交也会有延迟，但相对来说更加靠谱。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bao-chi-fen-qu-ping-heng&quot;&gt;保持分区平衡&lt;&#x2F;h4&gt;
&lt;p&gt;如果基于用户 ID 进行分区，可能会出现分区之间的不平衡，比如一些活跃的用户都被分到了同一分区，而沉默用户被分到了另一个分区，这时量贩额分区的压力明显不一样。所以分区的算法很重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-fen-ce-lue&quot;&gt;备份策略&lt;&#x2F;h4&gt;
&lt;p&gt;因为数据在不同的分区中，备份策略就不想以前那么简单了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;orm-de-huan-cun-shi-xian&quot;&gt;ORM 的缓存实现&lt;&#x2F;h3&gt;
&lt;p&gt;先声明一下，ORM 的缓存不能解决 JOIN 或者复杂的 SQL 查询，其实如果考虑到将来会有分区的可能，就应该在设计表时避免 JOIN 语句。因为复杂的 SQL 相对来说占的少数，甚至可以对这些 SQL 单独制定缓存策略。&lt;&#x2F;p&gt;
&lt;p&gt;先不考虑分区，假设有一个用户表和博客表，要达到以下目标：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存每一条博客记录，更新博客时，更新缓存&lt;&#x2F;li&gt;
&lt;li&gt;缓存每个用户的博客列表，用户更新博客时，更新该列表&lt;&#x2F;li&gt;
&lt;li&gt;程序员使用 ORM 时不需要考虑缓存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;huan-cun-xing-shi-xian&quot;&gt;缓存行实现&lt;&#x2F;h4&gt;
&lt;p&gt;缓存行还是比较简单的，用户查询某个 id 时，缓存该行内容，下次就可以直接读取缓存了。&lt;&#x2F;p&gt;
&lt;p&gt;如果内容被更新&#x2F;删除了，缓存也同时更新&#x2F;删除。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huan-cun-lie-shi-xian&quot;&gt;缓存列实现&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果在find&#x2F;findAll里传入了参数，则该参数即为key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;and_where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, time() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;上面的代码会在Model内部生成一个结构化的字符串，该字符串及对应的值将被放入缓存中
&lt;&#x2F;span&gt;&lt;span&gt;{table_name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{key}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span&gt;sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;类似这样
&lt;&#x2F;span&gt;&lt;span&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c81e728d9d4c2f636f067f89cc14862c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果没有传参数，{key}就不会被替代
&lt;&#x2F;span&gt;&lt;span&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{key}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c81e728d9d4c2f636f067f89cc14862c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;首次执行此代码时，ORM内部会先去缓存中找上面的结构化字符串，没有找到，就会执行SQL语句，然后把返回的结果的id放到缓存中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这就是要放到缓存中的数据，下次如果再执行此SQL，直接从缓存中获取id(1,43,50)，然后再从缓存中获取这些id对应的行内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;注意到这里有个revision，这是将来要判断该缓存是否已过期的关键。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476790&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;data&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;同时还会生成另一组数据，就是revision
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476777&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果作者又更新了一篇博客，则上面的查询语句结果就发生了变化。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;ORM会找到缓存中的一组revision数据，同时更新它
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476888&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果没有提供key，那就是
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-{key}-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476888&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;下次再执行上面的ORM查询代码时，会先去查找&amp;#39;article-2-revision&amp;#39;的版本，然后跟&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39;的版本号比较，如果前一个版本号&amp;gt;后一个版本号，表示数据有改变，缓存已过期，这时就需要重新执行SQL语句，并更新&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39;这个字符串的版本号。如果比较结果是前一个版本号&amp;lt;=后一个版本号，那就直接从缓存中读取。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;orm-de-lu-you&quot;&gt;ORM 的路由&lt;&#x2F;h3&gt;
&lt;p&gt;上面说的是数据没有分区的情况，如果数据被分区了的话，还要在 ORM 内部实现路由功能。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;articles&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, time()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;假设文章通过某种算法，被分在了不同的分区上，上面这个 ORM 编译出来的 SQL 是无法运行的。但又不能让程序员来关心分库分表的事，这时就可以在 ORM 内部实现路由机制，在具体的 Model 层实现路由算法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Model_Article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;ORM
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里可以实现具体算法，改变ORM的一些属性，从而影响SQL的编译
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.netlog.com&#x2F;developers&#x2F;blog&#x2F;blogid=3071854&quot;&gt;Database Sharding at Netlog, with MySQL and PHP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;cn&#x2F;articles&#x2F;yupoo-partition-database&quot;&gt;又拍网架构中的分库设计&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>发布一款PHP模块系统——Witty</title>
            <pubDate>Mon, 17 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/witty/</link>
            <guid>https://limboy.me/posts/witty/</guid>
            <description>&lt;p&gt;关于&lt;a href=&quot;http:&#x2F;&#x2F;witty.leezhong.com&quot;&gt;Witty&lt;&#x2F;a&gt;，有太多想说的了。&lt;&#x2F;p&gt;
&lt;p&gt;先来说说名字。本来一直想往 KISS 上靠，但是 KISSPHP 已经有了，Kissy 也被淘宝前端团队用了，绞尽脑汁也想不出优雅的跟 KISS 相关的名字，于是先作罢。后来在看书时，无意中看到了&amp;quot;Witty&amp;quot;，看着，念着都很舒服，意思也挺靠谱(风趣的；巧妙的；机智的)，就决定用她了。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说开发 Witty 的初衷。这个是受 python 启发，python 可以把自己开发的类库上传到&lt;a href=&quot;http:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&quot;&gt;pypi&lt;&#x2F;a&gt;，这样就可以通过 easy_install 或 pip 安装了，甚是方便。而且这些库都可以独立使用(即使有依赖关系，easy_install&#x2F;pip 也会自动处理)。本来这件事应该是 pear 来做的，但 pear 的开发规范太复杂，安装也比较麻烦，略显重量级。很多框架其实自带了很多好用的类库，但一般都需要依赖框架本身。Zend Framework 可以把类库单独拿出来，但也有不少问题，比如配置不统一、没有统一的初始化方法、每个模块没有放到单独的文件夹里、没有命令行安装功能等等。于是创建 Witty 的想法就这么诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;Witty 官网架在 GAE 上，这也是我第一次使用 GAE，python+gae 的组合开发一些小项目真是太方便了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-witty&quot;&gt;什么是 Witty&lt;&#x2F;h3&gt;
&lt;p&gt;Witty 想做的事很简单：方便模块开发，方便上传，方便安装，方便使用。&lt;&#x2F;p&gt;
&lt;p&gt;Witty 提供了一些简单的模块开发标准，程序员可以按照这些标准写自己的模块，然后上传到网站，这样其他用户就可以通过简单的命令下载，使用该模块了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;witty-de-an-zhuang-he-shi-yong&quot;&gt;Witty 的安装和使用&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;# install
&lt;&#x2F;span&gt;&lt;span&gt;wget http:&#x2F;&#x2F;witty.leezhong.com&#x2F;static&#x2F;witty
&lt;&#x2F;span&gt;&lt;span&gt;chmod +x witty
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;witty install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# install module
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;witty install http
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# usage
&lt;&#x2F;span&gt;&lt;span&gt;require_once &amp;#39;&#x2F;path&#x2F;to&#x2F;witty.php&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Witty::init();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$http = Witty::instance(&amp;#39;Http&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$http-&amp;gt;execute(&amp;#39;http:&#x2F;&#x2F;www.douban.com&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Witty 类提供了两个初始化方法 instance 和 factory，所以模块不需要自己实现单例和工厂。&lt;&#x2F;p&gt;
&lt;p&gt;如果模块有一些配置参数，可以在 instance 或 factory 时传入，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;redirect&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Http&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;只要 Http 类继承了 Config 类就行了。&lt;&#x2F;p&gt;
&lt;p&gt;也可以指定文件夹，让 Witty 自己去找 config 文件，然后传入参数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require_once &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;witty.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_config_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;config&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &#x2F;path&#x2F;to&#x2F;config&#x2F;http.PHP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; return array(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 	&amp;#39;Http&amp;#39; =&amp;gt; array( &#x2F;&#x2F;Http为类名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 		&amp;#39;redirect&amp;#39; =&amp;gt; false,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 	),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 虽然没有传参数，但因为设置了config文件夹，Witty会先找到config&#x2F;http.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 然后找到Http key，传入该key对应的value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Http&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更多详情，请浏览&lt;a href=&quot;http:&#x2F;&#x2F;witty.leezhong.com&#x2F;doc&quot;&gt;Witty 官网&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;PS: E 文水平有限，欢迎指出有语病的语句，如果太多的话，可以 Email(healdream#gmail.com)我。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的2010总结和2011展望</title>
            <pubDate>Mon, 10 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-2010-and-2011/</link>
            <guid>https://limboy.me/posts/my-2010-and-2011/</guid>
            <description>&lt;p&gt;本来是不想写的，最主要原因是懒，懒得从脑海中费劲地寻找去年的踪迹，做了不少，但多零碎。也不能算失败的一年，因为并没有给自己订目标。为了避免来年总结时没有数据可参考，我打算认真地使用 Google Calendar 来记录每天的活动。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-shi&quot;&gt;尝试&lt;&#x2F;h3&gt;
&lt;p&gt;09 年时，跟&lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;ryansigma&quot;&gt;ryansigma 同学&lt;&#x2F;a&gt;一起创办了&lt;a href=&quot;http:&#x2F;&#x2F;3gvg.leezhong.com&quot;&gt;3gvg&lt;&#x2F;a&gt;，算是对创业的初步尝试，大概花费了半年左右的时间，产品基本完成，但是发现没有人用(跟早期的 groupon 有点像)，后来也就不了了之了。这次试水，对创业有了进一步的理解：最开始时，一定要从小做起，哪怕是一个博客。重要的是价值的输出，或者真正解决了用户的&lt;strong&gt;某一个&lt;&#x2F;strong&gt;问题。把台子搭的很大，然后 YY 用户在舞台上舞的热火朝天，实在是太一厢情愿了。&lt;&#x2F;p&gt;
&lt;p&gt;不幸的是，悲剧再次发生了。不甘寂寞的我，又开始了第二次试水。这次尝试多少带有点任务感，因为这个点子在我的&amp;quot;someday&amp;quot;清单里，待的太久了，又不忍心把它删了，于是狠一狠心就把它做了。做的过程很快乐，好几次都进入了&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flow_(psychology)&quot;&gt;流状态&lt;&#x2F;a&gt;。经过三个月的努力，终于把&lt;a href=&quot;http:&#x2F;&#x2F;xingzher.com&quot;&gt;行者&lt;&#x2F;a&gt;折腾出来了，期间页面整体改版一次，代码重写一次。项目完成后，感觉整个人都轻松了，期间 ryansigma 问我，打算怎么推广这个网站，我很天真地告诉他，船到桥头自然直。问题是，船还没到桥头，就靠岸了。&lt;&#x2F;p&gt;
&lt;p&gt;这次其实说来也不能算失败，因为初衷就是要做这么一个项目，最后也算高质量完成了，只是结果跟我预期的不一样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gong-zuo&quot;&gt;工作&lt;&#x2F;h3&gt;
&lt;p&gt;找到了一份挺符合期望的工作，压力不大，牛人不少。进公司时，部门只有我一个人，负责公司内部框架的开发，上头也给了我不少的研发时间和空间。刚开始时确实很努力地想把框架做得完美，但做着做着，有不少的因素，让我对这个项目失去了信心，可能是我不太熟悉大公司的做事方法，于是就抽出部分时间都用来做自己的项目(年终 KPI 考核时，还是发现自己做了很多，我实在是太高效了，哈哈)。有不少时间我都在想，要不要把框架做好，思来想去，还是算了，不如认认真真地提高自己的整体技术水平。所以下半年的时间，我基本都在研究具体的技术。&lt;&#x2F;p&gt;
&lt;p&gt;其实有想过要离开公司，因为安逸的生活，吞噬我的激情，让我看不到未来的方向。我在公司与其他人交流得不多，这跟我交友的原则有关，宁缺勿滥，少而精。要么是生人，要么是熟人。半生不熟，我只能用低劣的社交技巧来应付，这是我不喜欢做的事。有时我会把公司想象成一个咖啡厅，我只是在这里喝咖啡(确实，我每天基本要两杯)，做我的工作，做公司安排我的工作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bo-ke&quot;&gt;博客&lt;&#x2F;h3&gt;
&lt;p&gt;很高兴，把博客坚持了下来。之前的博客要么被荒废了，要么被主动删除了。删除的原因是，我不能接受几个月前自己写的博文，要么风格不对，要么深度不够，要么皮肤不耐看，不够雅致。我希望每次开博都是一个新的开始。为了不让将来的自己荒废现在的博客，我只能尽量把皮肤做得符合自己的审美，文章尽量多花点时间。现在看来效果还不错。2011 年继续好好维护这来之不易的博客。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-chang&quot;&gt;成长&lt;&#x2F;h3&gt;
&lt;p&gt;技术方面成长了不少，但离自己的期望还是有不少的差距。也看到了一点发展的方向，今年要深度尝试一下。&lt;&#x2F;p&gt;
&lt;p&gt;交际方面基本没有什么成长，这也是今年重点要解决的问题&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuang-bei&quot;&gt;装备&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LX3&lt;&#x2F;li&gt;
&lt;li&gt;HTC Hero&lt;&#x2F;li&gt;
&lt;li&gt;ipod touch4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2011-zhan-wang&quot;&gt;2011 展望&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhuang-bei-1&quot;&gt;装备&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Air&lt;&#x2F;li&gt;
&lt;li&gt;ipad2&lt;&#x2F;li&gt;
&lt;li&gt;iphone4&lt;&#x2F;li&gt;
&lt;li&gt;Nikon D90&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;选择了多款苹果的产品，确实是太喜欢苹果的设计了。我对设计的要求是: 如果做不到顶级的设计，那就放弃设计，一切从简，这样至少不会招致反感(比如 facebook)。所以我是忠实的 G 粉。同时我又被苹果那偏执的设计所征服，所以我也是果粉。苹果和 Google 确实省下了我不少的选择时间：如果有一件产品 Google 或苹果有，那就用他们的，除非其他产品确实够优秀(如 dropbox)。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhuan-ye-neng-li&quot;&gt;专业能力&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;python&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原因很简单: 2010 年度编程语言、GAE、语言本身的魅力、容易招到优秀的程序员(&lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;pypar.html&quot;&gt;python paradox&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;nodejs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于 V8 引擎的服务端异步 js 编程，听着就很有诱惑。更高效，更少的学习成本，从 09 年 2 月到现在，一直备受关注，也有越来越多的插件支持。&lt;a href=&quot;http:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;nodejs&lt;&#x2F;a&gt;也希望能&lt;a href=&quot;http:&#x2F;&#x2F;www.itjoblog.co.uk&#x2F;2010&#x2F;12&#x2F;nginx-new-apache-nodejs.html&quot;&gt;成为下一个 PHP&lt;&#x2F;a&gt;，这样的潜力股可不能错过了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;nosql&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;主要选中了 mongodb 和 redis。简单，高效，即使不能替代 MySQL，用来做缓存，队列都不错。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;iOS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个不能再拖了，原因也很简单：我喜欢苹果，能在这么漂亮的平台上运行自己参与制作的 app，同时还能有收入，这是一件多么愉悦的事情啊。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ren-ji-guan-xi&quot;&gt;人际关系&lt;&#x2F;h4&gt;
&lt;p&gt;我相信吸引力法则，周围的人和事都是自己吸引过来的，如果对现实不满，那就改变自己。&lt;&#x2F;p&gt;
&lt;p&gt;这也是我用心维护博客的一个原因，博客能够更加全面的展现自己，让别人了解自己，从而找到臭味相投的人。&lt;&#x2F;p&gt;
&lt;p&gt;之前看到那些浮于世事，心里的水很满的人，我是有点鄙视他们的。但是细细一想，每个人都在成长的路上，既然大家的情况相同，那我又有什么鄙视的资本呢？而且这个有色眼镜一旦带上后，也会忽略了别人的优点，这同样也影响了自己的成长。所以调整好心态，摘掉有色眼镜，发现对方的优点，真诚地关心他人，对于自己感兴趣的人更要主动。这就是 2011 年我的心理成长目标。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chuang-ye&quot;&gt;创业&lt;&#x2F;h4&gt;
&lt;p&gt;年轻时如果不去做一些自己喜欢的够疯狂的事，那就意味着提前进入了老年期。不想等我老时，后悔自己年轻时这也没做，那也没做，在悔恨中告别此生。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shen-du-si-kao&quot;&gt;深度思考&lt;&#x2F;h4&gt;
&lt;p&gt;社会是浮躁的，现实是残酷的，压力是明显的，但这些都不能作为拒绝深度思考的理由。我们最终是要对自己的人生负责，钱固然重要，但我更看重自己的成长。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>高性能MySQL小结</title>
            <pubDate>Wed, 05 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mysql-high-performance-tips/</link>
            <guid>https://limboy.me/posts/mysql-high-performance-tips/</guid>
            <description>&lt;p&gt;其实只看到了 1&#x2F;3，先记录一下，等以后有空了再补上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiang-cha-xun-jie-guo-dao-chu-dao-wen-jian&quot;&gt;将查询结果导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL QUERY INTO OUTFILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;sql&#x2F;file&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jiang-mei-ci-cao-zuo-du-dao-chu-dao-wen-jian&quot;&gt;将每次操作都导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... &#x2F;&#x2F;这些操作，及操作的结果都会输出到对应的文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;文件内容大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(none)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; use noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table information for completion of table and column names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; can turn off this feature to get a quicker startup with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; changed
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show tables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Tables_in_noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_category  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_comment   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_post      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_res       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_res  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_tag       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_user      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.00 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; from test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bar  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.02 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-zhuang-tai-ji-qi-ta-xin-xi&quot;&gt;显示 MySQL 当前状态及其他信息&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL当前状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL的变量信息，如version&#x2F;data_dir等等
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES LIKE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%home%&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取包含home的变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;&#x2F;显示当前表的状态，注意后面的&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;，垂直显示结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DESCRIBE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取表结构
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FULL COLUMNS FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;类似上面
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-de-lian-jie-zhuang-kuang&quot;&gt;显示 MySQL 当前的连接状况&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 使用mysqladmin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysqladmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 或进入到mysql cli后执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show processlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 结果大概是这样
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Id  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Host      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;db   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Info             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;409 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;localhost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NULL  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-timestamp&quot;&gt;关于 TIMESTAMP&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个 TIMESTAMP 字段会随着表其他字段的更新而自动更新，之后的 TIMESTAMP 字段则不会。&lt;&#x2F;li&gt;
&lt;li&gt;TIMESTAMP 的范围是：1970-2037；而 DATETIME 的范围是：1000-9999&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yi-chu-zhong-fu-de-xing&quot;&gt;移除重复的行&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 注意这个IGNORE参数，如果没加的话会报错，且执行失败
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 假设要去除a,b项重复的行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ALTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; IGNORE TABLE tbl ADD UNIQUE INDEX(a,b&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-kan-dang-qian-zai-cao-zuo-de-shu-ju-ku&quot;&gt;查看当前在操作的数据库&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; DATABASE(&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在 mysql 的提示符上动点手脚&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# edit &#x2F;etc&#x2F;mysql&#x2F;my.cnf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[mysql]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#no-auto-rehash	# faster start of mysql but no tab completition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;u@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;d]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fu-zhi-yi-ge-biao&quot;&gt;复制一个表&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CREATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE tbl1 LIKE tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INSERT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; INTO tbl1 SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 也可以先用mysqladmin导出数据，再导入
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ding-chang-biao-yu-bian-chang-biao&quot;&gt;定长表与变长表&lt;&#x2F;h3&gt;
&lt;p&gt;包含任何 varchar、text 等变长字段的数据表，即为变长表，反之则为定长表。所以 CHAR 和 VARCHAR 不共存&lt;&#x2F;p&gt;
&lt;p&gt;CHAR(30)，最多可以容纳 30 个字符，但如果字符数不到 30 个的话，也会占用这些空间，只不过会在后面补上空格，但我们查询时又会发现尾部没有空格，这是因为空格已经被 CHAR 处理掉了。&lt;&#x2F;p&gt;
&lt;p&gt;VARCHAR(30)，也是最多可以容纳 30 个字符，但如果不足 30 个的话，有多少字符占多少空间，不会浪费。&lt;&#x2F;p&gt;
&lt;p&gt;变长表的优势在于有效利用空间，但由于记录大小不同，在其上进行许多删除或更新操作会使表中的碎片增多，需要定期 OPTIMIZE TABLE 以保持性能。&lt;&#x2F;p&gt;
&lt;p&gt;定长表的查询，检索和更新速度都比变长表快，但占用的空间也大。&lt;&#x2F;p&gt;
&lt;p&gt;PS:MySQL 5.0.3 之后 VARCHAR 的最大字符数为 65535&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-huan-bian-ma&quot;&gt;转换编码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NAMES utf8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# CHARSET utf8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ju-he-han-shu&quot;&gt;聚合函数&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; + HAVING + GROUP BY (HAVING可以看作后置WHERE语句&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;MIN&#x2F;MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SUM&#x2F;AVG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DISTINCT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;所有的这些聚合函数加上GROUP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; BY之后，都只对GROUP BY部分有效。(不好理解，忽略&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bing-fa-kong-zhi&quot;&gt;并发控制&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;du-suo-gong-xiang-suo-xie-suo-pai-ta-suo&quot;&gt;读锁(共享锁)&#x2F;写锁(排他锁)&lt;&#x2F;h4&gt;
&lt;p&gt;当某一用户修改一部分数据时，MySQL 会禁止其他用户读取同一数据。大多数时，MySQL 都是以透明的方式实现锁的内部管理&lt;&#x2F;p&gt;
&lt;h4 id=&quot;suo-li-du&quot;&gt;锁粒度&lt;&#x2F;h4&gt;
&lt;p&gt;只锁定部分修改的数据，而不是所有的资源，或者只对要修改的数据片精确加锁。任何时间，在给定的资源上，被加锁的数据量越小，就可以允许更多的并发修改，只要相互之间互不冲突即可&lt;&#x2F;p&gt;
&lt;p&gt;这么做的问题是加锁也会消耗系统资源。如获得锁，检查锁是否已解除，以及释放锁等，都会增加系统开销。如果系统花费大量时间来管理锁，而不是读&#x2F;写数据，那么系统整体性能都可能会受到影响&lt;&#x2F;p&gt;
&lt;p&gt;所谓的锁策略，就是在锁开销和数据安全之间寻求一种平衡。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;biao-suo-myisam&quot;&gt;表锁(MyISAM)&lt;&#x2F;h4&gt;
&lt;p&gt;开销最小，但不适合频繁写操作&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-suo-innodb&quot;&gt;行锁(InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;可以支持最大的并发处理，但同时也会增加开销（InnoDb），由存储引擎实现，而不是 MySQL 服务器&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-wu&quot;&gt;事务&lt;&#x2F;h4&gt;
&lt;p&gt;一组原子性的 SQL 语句。要么全部执行(commit)，要么全部不执行(rollback)&lt;&#x2F;p&gt;
&lt;p&gt;正像锁粒度的增加会导致锁开销的增加一样，这种事务处理中的额外安全措施，也会导致数据库服务器要完成更多的额外工作&lt;&#x2F;p&gt;
&lt;p&gt;MySQL 默认操作是 AutoCommit，这意味着除非显示地开始一个事务，否则将把每个 SQL 操作视为一个单独事务自动执行&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-suo&quot;&gt;死锁&lt;&#x2F;h4&gt;
&lt;p&gt;两个或多个事务在同一资源上相互占用，并请求加锁时，导致的恶性循环现象&lt;&#x2F;p&gt;
&lt;p&gt;解决办法：死锁检测&#x2F;死锁超时机制。InnoDb 处理死锁的方法是，回滚拥有最少排他行级锁的事务。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yin-shi-he-xian-shi-suo-ding&quot;&gt;隐式和显式锁定&lt;&#x2F;h4&gt;
&lt;p&gt;InnoDb: 一个事务在执行过程中的任何时候，都可以获得锁，但只有在执行 COMMIT 或 ROLLBACK 语句后，才可以释放这些锁。&lt;&#x2F;p&gt;
&lt;p&gt;InnoDb 也支持显式锁定，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... LOCK IN SHARE MODE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... FOR UPDATE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;duo-ban-ben-bing-fa-kong-zhi&quot;&gt;多版本并发控制&lt;&#x2F;h4&gt;
&lt;p&gt;MySQL 事务性存储引擎，如 InnoDb，不是简单使用行加锁机制，而是 MVCC 和行加锁机制关联使用。&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 不是 MySQL 独有的技术，其他如 Oracle, Postgresql 等都在使用&lt;&#x2F;p&gt;
&lt;p&gt;可以将 MVCC 设想成一种行级加锁的变形，它避免了很多情况下的锁操作，大大降低了系统的开销&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 是通过及时保存在某些时刻的数据快照，而得以实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所谓&amp;quot;版本号&amp;quot;，其实是 InnoDb 维护的一个计数器，每启动一个事务，计数器随着递增，并将该号作为事务的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[INSERT]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为新增行的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[DELETE]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为被删除行的删除号，该行并未立即被物理删除&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE]&lt;&#x2F;strong&gt;
INSERT+DELETE&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[SELECT]&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;行版本号不大于事务版本号。这确保了该行在事务开始时已存在，或者由当前事务创建、更新&lt;&#x2F;li&gt;
&lt;li&gt;行删除号不存在，或者删除号大于事务版本号。这确保事务开始前行未被删除&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于被标记为删除的行，InnoDb 有专门的线程负责物理删除，当行满足如下条件时认为可以将其物理删除：当前不存在版本号小于该行删除号的事务，这样可以确保不会有事务再引用到该行&lt;&#x2F;p&gt;
&lt;p&gt;保存这些额外记录的好处，是使大多数读操作都不必申请加锁&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-yu-myisam&quot;&gt;关于 MyISAM&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;表加锁。并发低&#x2F;开销少&lt;&#x2F;li&gt;
&lt;li&gt;将每个表存储成两个文件：数据文件(.MYD)和索引文件(.MYI)&lt;&#x2F;li&gt;
&lt;li&gt;使用 CHECK TABLE mytable 和 REPAIR TABLE mytable 来修复表，也可以使用 myisamchk 命令&lt;&#x2F;li&gt;
&lt;li&gt;索引长度不能超过 1000(注意，如果是 utf8 的话，长度 x3)，InnoDb 没有此限制&lt;&#x2F;li&gt;
&lt;li&gt;可以延迟索引。使用表创建选项 DELAY_KEY_WRITE 创建的 MyISAM 表，在 SQL 结束之后，不会将索引的改变数据写入磁盘，而是在内存的键缓冲区中缓存索引改变数据，只有在清理缓冲区或关闭表时才将索引块转到磁盘。对于数据经常改变，并且频繁使用的表，这种模式大大提高了表的处理性能。不过，如果服务器或系统崩溃，索引将肯定损坏，并需要修复&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;guan-yu-innodb&quot;&gt;关于 InnoDb&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;行级锁。并发高&#x2F;开销相对高&lt;&#x2F;li&gt;
&lt;li&gt;高性能&lt;&#x2F;li&gt;
&lt;li&gt;崩溃后自动恢复&lt;&#x2F;li&gt;
&lt;li&gt;主键聚簇索引，辅助索引非聚簇索引(单独索引树)，辅助索引也会包含主键列，所以如果主键列较大，则它的辅助索引也会较大&lt;&#x2F;li&gt;
&lt;li&gt;任何改变 InnoDb 表结构的操作会导致整个表的重建，包括重建所有索引&lt;&#x2F;li&gt;
&lt;li&gt;外键约束&lt;&#x2F;li&gt;
&lt;li&gt;自动提交性能差？&lt;&#x2F;li&gt;
&lt;li&gt;可以显示锁定&lt;&#x2F;li&gt;
&lt;li&gt;不要对 InnoDb 使用不带 WHERE 语句的 count(*)，这会导致 InnoDb 执行全表扫描或索引扫描，而 MyISAM 只需要从相关记录中读取该值即可。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xing-neng-jian-ce&quot;&gt;性能检测&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SET PROFILING = 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;会把执行的语句和执行时间都打印出来，如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Duration   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00011700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00033500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.59868300 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.51746400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00846700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table status like &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还可以针对某个 query 进行更细致的分析&lt;&#x2F;p&gt;
&lt;p&gt;也可以使用 FLUSH STATUS + SHOW SESSION STATUS&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILE FOR QUERY 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-xun-huan-cun&quot;&gt;查询缓存&lt;&#x2F;h3&gt;
&lt;p&gt;MySQL 在第二次执行相同的 SQL 查询语句时，默认会使用查询缓存。加上&amp;quot;SQL_NO_CACHE&amp;quot;不使用查询缓存&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL_NO_CACHE username, ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-null&quot;&gt;关于 NULL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免 NULL&lt;&#x2F;li&gt;
&lt;li&gt;MySQL 难以优化引用了可空列的查询，它会使索引，索引统计和值更加复杂&lt;&#x2F;li&gt;
&lt;li&gt;即使要在表中存储&amp;quot;没有值&amp;quot;的字段，还是有可能不使用 NULL 的，考虑使用 0 或空字符来代替它。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;suo-yin&quot;&gt;索引&lt;&#x2F;h3&gt;
&lt;p&gt;索引是性能问题的首要原因，先搞定索引，再去搞查询优化&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b-tree-suo-yin&quot;&gt;B-Tree 索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;根节点保存了指向子节点的指针，存储引擎根据指针寻找数据&lt;&#x2F;li&gt;
&lt;li&gt;当一个数据块不能放下所有索引字段数据时，就会形成树形的根节点或分支节点，所以树的深度和广度是由数据量决定的&lt;&#x2F;li&gt;
&lt;li&gt;每个节点包含了下层节点的链接，(没有相邻节点链接，上层链接可有可没有)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设建立了一个(last_name, first_name, birth)的索引，此索引对于以下类型可用&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;匹配全名 (例如可以找到一个叫Cuba Allen，并且出生于1960-01-01的人)
&lt;&#x2F;span&gt;&lt;span&gt;匹配最左前缀 (例如可以找到姓为Allen的人，仅适用于索引中的第一列)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于树的节点是排好序的，它们可以用于查找和 ORDER BY 查询&lt;&#x2F;p&gt;
&lt;p&gt;B-Tree 的局限在于如果查询不是从索引列的最左边开始，就无法使用索引。所以索引列的顺序至关重要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-xing-neng-suo-yin-ce-lue&quot;&gt;高性能索引策略&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ge-chi-lie&quot;&gt;隔离列&lt;&#x2F;h4&gt;
&lt;p&gt;如果在查询中没有隔离索引的列，MySQL 通常不会是使用索引。&amp;quot;隔离&amp;quot;列意味着它不是表达式的一部分，也没有位于函数中。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-zhui-suo-yin&quot;&gt;前缀索引&lt;&#x2F;h4&gt;
&lt;p&gt;找到合适的前缀长度(计算全列的选择性，并使前缀的选择性接近于它)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCT city&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCE LEFT(city, 4&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也要注意如果数据分布非常不均匀，可能就会有问题&lt;&#x2F;p&gt;
&lt;p&gt;前缀索引能很好的减少索引的大小及提高速度，但 MySQL 不能在 ORDER BY 和 GROUP BY 中使用索引&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ju-ji-suo-yin-innodb&quot;&gt;聚集索引 (InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;当表有聚集索引时，它的数据行实际保存在索引的叶子页(而不是指针)，所谓&amp;quot;聚集&amp;quot;就是指实际的数据行和相关的键值都保存在一起，每个表只能由一个聚集索引(主索引)，因为不能以此把行保存在两个地方&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以把相关数据保存在一起。如果没有使用聚集，读取每个邮件都会访问磁盘&lt;&#x2F;li&gt;
&lt;li&gt;数据访问快。聚集索引把索引和数据都保存到了同一棵 B-Tree 中，因此从聚集索引中取得的数据通常比在非聚集索引进行查找要快&lt;&#x2F;li&gt;
&lt;li&gt;聚集索引能最大限度地提升 I&#x2F;O 密集负载的性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;更新索引列代价是庞大的，因为它强制 InnoDb 把每个更新的行移到新位置&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引会比较大，因为它们的叶子包含了被引用行的主键列&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引访问需要两次索引查找&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;fu-gai-suo-yin&quot;&gt;覆盖索引&lt;&#x2F;h4&gt;
&lt;p&gt;所有满足查询需要的数据的索引(只需要读取索引，不需要再读取行数据)，比如这条 SQL 语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; state_id, city, address FROM userinfo WHERE state_id = 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果只在 state_id 上建索引，则 city,address 都要从表里读取行数据&lt;&#x2F;p&gt;
&lt;p&gt;如果建立 index (state_id, city, address)，既能使用 state_id 索引，同时又可以使用覆盖索引，速度就快多了&lt;&#x2F;p&gt;
&lt;h4 id=&quot;duo-yu-he-zhong-fu-suo-yin&quot;&gt;多余和重复索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 允许你在统一列上创建多个索引，所以 MySQL 不得不单独维护每一个索引&lt;&#x2F;li&gt;
&lt;li&gt;如果列(A,B)上有索引，那么另外一个列(A)上的索引就是多余的(B-Tree)&lt;&#x2F;li&gt;
&lt;li&gt;大多数情况下，多余索引都是不好的，为了避免它，应该扩展已有索引，而不是添加新索引&lt;&#x2F;li&gt;
&lt;li&gt;索引越多，更新索引的开销越大，尤其是在数据很多的情况下&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>Unix编程艺术——Unix哲学</title>
            <pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-art-of-unix-programming/</link>
            <guid>https://limboy.me/posts/the-art-of-unix-programming/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1467587&#x2F;&quot;&gt;Unix 编程艺术&lt;&#x2F;a&gt;主要介绍了 Unix 系统领域中的设计和开发哲学、思想文化体系、原则与经验。此文大致摘录了 Unix 的哲学。&lt;&#x2F;p&gt;
&lt;p&gt;web 程序员也应该看看此书，软件开发和 web 开发很多地方都是相通的。看完之后，我甚至觉得 Unix 哲学对于做人也有很大的参考价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-yuan-ze-shi-yong-jian-ji-de-jie-kou-pin-he-jian-dan-de-bu-jian&quot;&gt;模块原则 (使用简洁的接口拼合简单的部件)&lt;&#x2F;h3&gt;
&lt;p&gt;计算机编程的本质就是控制复杂度&lt;&#x2F;p&gt;
&lt;p&gt;要编写复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂的软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-xi-yuan-ze-qing-xi-sheng-yu-ji-qiao&quot;&gt;清晰原则 (清晰胜于技巧)&lt;&#x2F;h3&gt;
&lt;p&gt;维护成本是高昂的，在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己看的。&lt;&#x2F;p&gt;
&lt;p&gt;在 Unix 传统中，这个建议不仅意味着代码注释。良好的 Unix 实践同样信奉在选择算法和实现时就应该考虑到将来的可扩展性。为了取得程序一丁点性能的提升就大幅增加技术的复杂性和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zu-he-yuan-ze-she-ji-shi-kao-lu-pin-jie-zu-he&quot;&gt;组合原则 (设计时考虑拼接组合)&lt;&#x2F;h3&gt;
&lt;p&gt;如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。&lt;&#x2F;p&gt;
&lt;p&gt;在输入方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。在经典的 Unix 下，多数程序都尽可能采用简单过滤器的形式，即将一个简单的文本输入流处理为一个简单的文本流输出。&lt;&#x2F;p&gt;
&lt;p&gt;Unix 程序员偏爱这种做法并不是因为它们仇视视图界面，而是因为如果程序不采用简单的文本输入输出流，它们就极难衔接。&lt;&#x2F;p&gt;
&lt;p&gt;要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑到文本流另一端的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-chi-yuan-ze-ce-lue-tong-ji-zhi-fen-chi-jie-kou-tong-yin-qing-fen-chi&quot;&gt;分离原则 (策略同机制分离，接口同引擎分离)&lt;&#x2F;h3&gt;
&lt;p&gt;把策略同机制揉成一团有两个负面影响：一来会使策略变得死板，难以适应用户需求的改变，二来也意味着任何策略的改变都可能会动摇机制。&lt;&#x2F;p&gt;
&lt;p&gt;可以将应用程序分成可以协作的前端和后端进程，通过 socket 专用应用协议进行通讯。这种双端设计方法大大降低了整体复杂度，bug 有望减少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-ji-yuan-ze-she-ji-yao-jian-ji-fu-za-du-neng-di-jiu-di&quot;&gt;简洁原则 (设计要简洁，复杂度能低就低)&lt;&#x2F;h3&gt;
&lt;p&gt;来自多方面的压力常常会让程序变得复杂(bug 更多)，其中一种压力就是来自技术上的虚荣心理。Unix 程序员相互比的是谁能够做到&amp;quot;简洁而漂亮&amp;quot;并以此为荣。&lt;&#x2F;p&gt;
&lt;p&gt;更为常见的是，过度的复杂性往往来自于项目的需求，要避免这种状况，就需要鼓励一种软件文化，以简洁为美，人人对庞大复杂的东西群起而攻之。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lin-se-yuan-ze-chu-fei-que-wu-ta-fa-bu-yao-bian-xie-pang-da-de-cheng-xu&quot;&gt;吝啬原则 (除非确无它法，不要编写庞大的程序)&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;大&amp;quot;有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。由于人们对花费了大量精力才做出来的东西难以割舍，结果导致在庞大的程序中把投资浪费的注定要失败或者并非最佳的方案上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tou-ming-yuan-ze-she-ji-yao-ke-jian-yi-bian-shen-cha-he-diao-shi&quot;&gt;透明原则 (设计要可见，以便审查和调试)&lt;&#x2F;h3&gt;
&lt;p&gt;软件系统的透明性是指你一眼就能够看出软件是在做什么以及怎样做的。显示性是指程序带有监视和显示内部状态的功能。&lt;&#x2F;p&gt;
&lt;p&gt;设计时如果充分考虑到这些要求会给整个项目全过程都带来好处。至少，调试选项的设置应该尽量不要在事后，而应该在设计之初便考虑进去。这是考虑到程序不但应该能够展示其正确性，也应该能够把原开发者解决问题的思维模型告诉后来者。&lt;&#x2F;p&gt;
&lt;p&gt;程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。&lt;&#x2F;p&gt;
&lt;p&gt;出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对它进行操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-zhuang-yuan-ze-jian-zhuang-yuan-yu-tou-ming-yu-jian-ji&quot;&gt;健壮原则 (健壮源于透明与简洁)&lt;&#x2F;h3&gt;
&lt;p&gt;软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。&lt;&#x2F;p&gt;
&lt;p&gt;大多数软件禁不起磕碰，毛病很多，就是因为过于复杂，很难通盘考虑。如果不能够正确理解一个程序的逻辑，就不能确信其是否正确，也就不能在出错时修复它。&lt;&#x2F;p&gt;
&lt;p&gt;这也就带来了让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要有两种方法：透明化和简洁化。&lt;&#x2F;p&gt;
&lt;p&gt;上面曾说过，软件的透明性就是指一眼就能够看出是怎么回事，即人们不需要绞尽脑汁就能够推断出所有可能的情况，那么这个程序就是简洁的。程序越简洁，越透明，也就越健壮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;biao-shi-yuan-ze-ba-zhi-shi-dai-ru-shu-ju-yi-qiu-luo-ji-zhi-po-er-jian-zhuang&quot;&gt;表示原则 (把知识代入数据以求逻辑质朴而健壮)&lt;&#x2F;h3&gt;
&lt;p&gt;数据要比程序逻辑更容易驾驭。所以如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，应该主动将代码的复杂度转移到数据中去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-su-yuan-ze-jie-kou-bi-mian-biao-xin-li-yi&quot;&gt;通俗原则 (接口避免标新立异)&lt;&#x2F;h3&gt;
&lt;p&gt;最易用的程序就是用户需要学习新东西最少的程序，换句话说最易用的程序就是最切合用户已有知识的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-mo-yuan-ze-wu-hua-ke-shuo-na-jiu-chen-mo&quot;&gt;缄默原则 (无话可说？那就沉默)&lt;&#x2F;h3&gt;
&lt;p&gt;行为良好的程序应该默默工作，绝不唠唠叨叨，碍手碍脚。沉默是金。&lt;&#x2F;p&gt;
&lt;p&gt;简洁是 Unix 程序的核心风格。一旦程序的输出成为另一个程序的输入，就要很容易把需要的数据挑出来。站在人的角度上来说，重要的信息不应该混杂在冗长的程序内部行为信息中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-jiu-yuan-ze-chu-xian-yi-chang-shi-ma-shang-tui-chu-bing-gei-chu-zu-gou-cuo-wu-xin-xi&quot;&gt;补救原则 (出现异常时，马上退出并给出足够错误信息)&lt;&#x2F;h3&gt;
&lt;p&gt;软件在发生错误时也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，这就是最坏的情况了。&lt;&#x2F;p&gt;
&lt;p&gt;宽容地收，谨慎地发。就算输入的数据很不规范，一个设计良好的程序也会尽量领会其中的意义，以尽量与别的程序协作。然后要么抛出异常，要么为工作链的下一环程序输出一个严谨干净正确的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-ji-yuan-ze-zhu-hua-ji-qi-yi-fen-bu-hua-cheng-xu-yuan-yi-miao&quot;&gt;经济原则 (宁花机器一分，不花程序员一秒)&lt;&#x2F;h3&gt;
&lt;p&gt;随着技术的发展，开发公司和大多数用户都能得到廉价的机器，所以这一准则的合理性就显然不用多说了。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们在软件开发中严格遵循这条原则的话，大多数的应用场合应该使用高级语言，如 Perl,Python,Java,Php,甚至 Shell——这些语言可以将程序员从自行管理内存的负担中释放出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-cheng-yuan-ze-bi-mian-shou-gong-hack-jin-liang-bian-xie-cheng-xu-qu-sheng-cheng-cheng-xu&quot;&gt;生成原则 (避免手工 hack,尽量编写程序去生成程序)&lt;&#x2F;h3&gt;
&lt;p&gt;人类很不善于干辛苦的细节工作。因此程序中任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单越抽象，设计者就越容易做对。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-hua-yuan-ze-guo-zao-you-hua-shi-mo-e-zhi-yuan&quot;&gt;优化原则 (过早优化是万恶之源)&lt;&#x2F;h3&gt;
&lt;p&gt;还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更加损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。&lt;&#x2F;p&gt;
&lt;p&gt;先制作原型，再精雕细琢。优化之前先确保能用。&amp;quot;极限编程&amp;quot;宗师 Kent Beck 从另一种不同的文化将这点有效地扩展为：先求运行，再求正确，最后求快。&lt;&#x2F;p&gt;
&lt;p&gt;借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无须优化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-yang-yuan-ze-jue-bu-xiang-xin-suo-wei-bu-er-fa-men-de-duan-yan&quot;&gt;多样原则 (绝不相信所谓&amp;quot;不二法门&amp;quot;的断言)&lt;&#x2F;h3&gt;
&lt;p&gt;Unix 传统有一点很好，即从不相信任何所谓的&amp;quot;不二法门&amp;quot;。Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kuo-zhan-yuan-ze-she-ji-zhao-yan-wei-lai-wei-lai-zong-bi-yu-xiang-lai-de-kuai&quot;&gt;扩展原则 (设计着眼未来，未来总比预想来得快)&lt;&#x2F;h3&gt;
&lt;p&gt;要为数据格式和代码留下扩展的空间，否则就会发现自己常常被原先不明智选择捆住了手脚，因为你无法既要改变它们又要维持对原来的兼容性。&lt;&#x2F;p&gt;
&lt;p&gt;设计协议或是文本格式时，应使其具有充分的自描述性以便可以扩展。要么包含进一个版本号，要么采用独立、自描述的语句、按照可以随时插入新的而不会搞乱格式读取代码的方法组织格式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unix-zhe-xue-yi-yan-yi-bi-zhi&quot;&gt;Unix 哲学一言以蔽之&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-art-of-unix-programming&amp;#x2F;kiss.png&quot;
        width=&quot;468&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>web开发从小工到大家</title>
            <pubDate>Sat, 18 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-development-journeyman-master/</link>
            <guid>https://limboy.me/posts/web-development-journeyman-master/</guid>
            <description>&lt;p&gt;大致总结了一下 web 程序员从小工到大家所需的基础知识，语言，工具，及应该阅读的书籍。&lt;&#x2F;p&gt;
&lt;p&gt;路漫漫其修远兮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fundamental-books&quot;&gt;fundamental (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;code complete 2&lt;&#x2F;li&gt;
&lt;li&gt;the programic programmer&lt;&#x2F;li&gt;
&lt;li&gt;the c programming language 2&lt;&#x2F;li&gt;
&lt;li&gt;linux kernel development&lt;&#x2F;li&gt;
&lt;li&gt;introduction to algorithms 3&lt;&#x2F;li&gt;
&lt;li&gt;head first design patterns&lt;&#x2F;li&gt;
&lt;li&gt;the art of unix programming&lt;&#x2F;li&gt;
&lt;li&gt;http: the definitive guide&lt;&#x2F;li&gt;
&lt;li&gt;refactoring improving the design of existing code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language&quot;&gt;language&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;C&lt;&#x2F;li&gt;
&lt;li&gt;javascript&#x2F;nodejs&lt;&#x2F;li&gt;
&lt;li&gt;php&lt;&#x2F;li&gt;
&lt;li&gt;python&lt;&#x2F;li&gt;
&lt;li&gt;ruby&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tool&quot;&gt;tool&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;version control: git&lt;&#x2F;li&gt;
&lt;li&gt;web server: nginx apache&lt;&#x2F;li&gt;
&lt;li&gt;proxy: haproxy nginx&lt;&#x2F;li&gt;
&lt;li&gt;database: mysql&lt;&#x2F;li&gt;
&lt;li&gt;nosql: mongodb redis&lt;&#x2F;li&gt;
&lt;li&gt;project managment: redmine&lt;&#x2F;li&gt;
&lt;li&gt;bash: rsync iptables curl sed awk&lt;&#x2F;li&gt;
&lt;li&gt;test: ab siege http_load&lt;&#x2F;li&gt;
&lt;li&gt;fulltext search: sphinx lucene xapian coreseek&lt;&#x2F;li&gt;
&lt;li&gt;misc: gearman, jQuery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;master-books&quot;&gt;master (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;rapid development&lt;&#x2F;li&gt;
&lt;li&gt;Agile Software Development, Principles, Patterns, and Practices&lt;&#x2F;li&gt;
&lt;li&gt;peopleware 2&lt;&#x2F;li&gt;
&lt;li&gt;the mythical man-month&lt;&#x2F;li&gt;
&lt;li&gt;getting real&lt;&#x2F;li&gt;
&lt;li&gt;rework&lt;&#x2F;li&gt;
&lt;li&gt;building scalable web sites&lt;&#x2F;li&gt;
&lt;li&gt;high performance mysql&lt;&#x2F;li&gt;
&lt;li&gt;high performance web sites&lt;&#x2F;li&gt;
&lt;li&gt;97 Things Every Programmer Should Know&lt;&#x2F;li&gt;
&lt;li&gt;构建高性能 web 站点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>我对web系统架构的一些思考</title>
            <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-system-architecture/</link>
            <guid>https://limboy.me/posts/web-system-architecture/</guid>
            <description>&lt;p&gt;能力&#x2F;经验有限，不足之处还请指点 :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-zai-jun-heng&quot;&gt;负载均衡&lt;&#x2F;h3&gt;
&lt;p&gt;这里把多台 nginx 反向代理服务器顶在最前面，可以通过 DNS 简单轮循或绑定虚拟 IP 的方法来实现分流。之所以用 nginx 是因为它的稳定、强大、高性能、低开销、以及对高并发的支持。也可以换成 LVS，从效率上来说肯定会比 nginx 高，因为工作在 OSI 的第四层(传输层)，可以修改目标 IP。甚至可以在第二层(数据链路层)修改 MAC 地址(DR 模式，相当于路由器)，让数据包直接到达目标服务器。不过工作在下层虽然效率提高了，但相应的控制能力也少了，比如无法根据 http url 来进行负载均衡，缓存页面执行结果等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-ceng&quot;&gt;应用层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层是 web 服务器，主要任务是从服务层获取需要的数据，然后渲染到模板，返回给前端服务器。可以理解为 Controller-View，没有 Model，因为 Model 被移到了一下层，用来单独提供服务。这么做的原因是方便分布式部署，单元测试，避免单点故障。所以这层是相对较轻松的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-wu-ceng&quot;&gt;服务层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层的任务是提供模块的接口，供上层调用。如相册模块，需要有创建相册&#x2F;显示相册图片&#x2F;删除图片等等功能。至于服务的形式就很灵活了，如 REST&#x2F;RPC&#x2F;SOAP 等等。&lt;&#x2F;p&gt;
&lt;p&gt;这一层的任务就比较艰巨了，要保证接口的稳定性，要处理复杂的逻辑，实现算法，与存储层交互等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cun-chu-ceng&quot;&gt;存储层&lt;&#x2F;h3&gt;
&lt;p&gt;存储层是整个系统的核心，一旦数据丢失，网站就成了空架子了，所以一定要及时备份。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huan-cun-ceng&quot;&gt;缓存层&lt;&#x2F;h4&gt;
&lt;p&gt;在网站流量不大时，缓存是可选层。随着流量的增大，缓存的重要性也越来越突出，甚至可以把内存当硬盘来用，以保证快速响应。如何提高缓存命中率，设置缓存失效时间等等缓存的处理就变得尤为重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-ku-ceng&quot;&gt;数据库层&lt;&#x2F;h4&gt;
&lt;p&gt;这个可以讲的就太多了，多数系统的瓶颈也在这。总体说来会经历主从服务器，垂直分区和水平分区这三个过程。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fen-bu-shi-cun-chu&quot;&gt;分布式存储&lt;&#x2F;h4&gt;
&lt;p&gt;这里会遇到的问题是文件的同步，如何分配给用户最合适的服务器，磁盘 I&#x2F;O 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dui-lie-fu-wu-qi&quot;&gt;队列服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这也是大型网站的标配，处理日志&#x2F;分析用户行为&#x2F;发送邮件等等都会用到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-kong-fu-wu-qi&quot;&gt;监控服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这么多的服务器，我们需要知道各个服务器当前的运行状况，如磁盘 I&#x2F;O，CPU 使用率，内存使用率，负载等等，一旦发现异常可以及时处理。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ri-zhi-fu-wu-qi&quot;&gt;日志服务器&lt;&#x2F;h4&gt;
&lt;p&gt;排查故障就靠它了，比如有骇客入侵，某个页面访问很慢，出现 500 错误，慢查询等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-fen-fu-wu-qi&quot;&gt;备份服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这个重要性不言而喻，比如数据库宕机，某张表损坏，数据库磁盘错误等等。没有了它，辛辛苦苦积攒下来的数据就这么一去不复返了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>浅谈分布式存储的路由设置</title>
            <pubDate>Tue, 14 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/distributed-storage-route/</link>
            <guid>https://limboy.me/posts/distributed-storage-route/</guid>
            <description>&lt;p&gt;程序设计中很重要的一个思想是：隔离变化的部分。在开发之前就应该想到哪些部分在不远的将来是可能会变的或一定会变的，开发时，就应该将这些部分隔离出来，同时可以优雅地进行控制。&lt;&#x2F;p&gt;
&lt;p&gt;对于大数据量高并发的网站，存储经常会有变动：添加&#x2F;移除数据库服务器、分表分库、添加&#x2F;移除缓存服务器、添加&#x2F;移除文件存储服务器等等。怎样才能在这些存储设施调整后，代码上只要进行局部的修改就行了，这就是本文要探讨的主题：分布式存储的路由设置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-jian-cun-chu-lu-you&quot;&gt;文件存储路由&lt;&#x2F;h3&gt;
&lt;p&gt;平时我们操作文件时，一般都会用 file_put_contents&#x2F;file_get_contents&#x2F;fopen 之类的文件操作函数，这就需要给出文件的路径，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_get_contents(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;destfile.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_put_contents(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;destfile.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确实挺方便，但随着文件数的增多，需要对文件重新规划，如原来是&#x27;dir&#x2F;abcd.txt&#x27;，要调整为&#x27;dir&#x2F;ab&#x2F;abcd.txt&#x27;。这时就只能去手动修改代码，结果很有可能改了这，忘了那。比如有些是通过 file_put_contents 方法；有些是通过 fopen 方法；有些不需要调整，有些需要调整等等。&lt;&#x2F;p&gt;
&lt;p&gt;如果有文件路由机制，事情就好办了，看看下面的使用代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;basepath&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;DATA_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;实例化 File 类后，只需传入文件名，加上要执行的操作，最后 execute()一下就行了，不必关心文件的存储状态。如果要重新调整文件的存储结构，对客户端是透明的，也就是说不用对代码进行任何调整。&lt;&#x2F;p&gt;
&lt;p&gt;调整的规则写在 File 类里&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_File
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 自定义文件存储规则，对使用者是透明的。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 将abcd.txt保存为ab&#x2F;cd&#x2F;abcd.txt
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pathinfo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$extension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;extension&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt; ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;filename&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;basepath&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mkdir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0777&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$extension&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果要改规则，只要修改_route 方法就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huan-cun-lu-you&quot;&gt;缓存路由&lt;&#x2F;h3&gt;
&lt;p&gt;以 memcached 为例，可能会有多个 memcached 服务器，每个 memcached 服务器的职责可能还不一样，还可能经常变动。如果在代码里强行指定连接某台 memcached 服务器，一旦变动，事情就麻烦了。这时可以做个 memcached 路由，如果业务逻辑或 memcached 服务器有变，就在这个路由里做文章。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Cache_Adapter_Memcache&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;servers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;persistent&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;array (&amp;#39;server2&amp;#39; =&amp;gt; array(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.1.100&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;port&amp;#39; =&amp;gt; 11211,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;persistent&amp;#39; =&amp;gt; false,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;自定义路由&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Cache_Adapter_Memcache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_Cache_Adapter_Memcache
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 自定义规则，根据key来指定memcache服务器，如果不指定的话，memcache会自动从连接池中取一个连接。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; demo
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sess&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timeout&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将来只要调整_route 方法即可，调用代码不变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-ku-lu-you&quot;&gt;数据库路由&lt;&#x2F;h3&gt;
&lt;p&gt;数据库是应用的核心，随着数据量和并发的增大，分表分库是早晚的事，通过路由机制可以实现只修改路由方法，而保持调用的代码不变。为了方便演示，简单封装了一下 PDO。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Database&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;servers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;dsn&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:dbname=test;host=127.0.0.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;root&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;password&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123456&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&amp;#39;server2&amp;#39; =&amp;gt; array(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;dsn&amp;#39; =&amp;gt; &amp;#39;mysql:dbname=test;host=192.168.1.100&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;user&amp;#39; =&amp;gt; &amp;#39;root&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;password&amp;#39; =&amp;gt; &amp;#39;123456&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 实际情况中，SQL都是通过Query Builder或ORM在内部拼接而成的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$row&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$row&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;username&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看上去我们好像执行了 query 里的 SQL 语句，但经过_route 方法转换后就不一定了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;自定义路由&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_Database
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 根据SQL的内容，选择不同的数据库服务器，不同的数据库，不同的表
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strtolower(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strpos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;preg_match(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;`id` = (&lt;&#x2F;span&gt;&lt;span&gt;[0-9]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				{
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tbl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;				}
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 如果需要连接到其他的数据库服务器，重写_conn方法
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_conn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里直接解析 SQL 确实暴力了点，实际使用中应该是解析 Query Builder 或 ORM，不过能够说明问题就行了。这样，业务逻辑改变或者数据库服务器变动都可以在_route 方法里修改，使用时，代码无须任何改动。&lt;&#x2F;p&gt;
&lt;p&gt;如果规则很复杂，可以单独写一个 route 类，在_route 方法里调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ma-xia-zai&quot;&gt;源码下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;storage-route&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;storage-route&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>inotify-rsync实时同步脚本</title>
            <pubDate>Mon, 13 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/inotify-rsync/</link>
            <guid>https://limboy.me/posts/inotify-rsync/</guid>
            <description>&lt;h3 id=&quot;wei-shi-yao-yao-xie-zhe-ge-jiao-ben&quot;&gt;为什么要写这个脚本&lt;&#x2F;h3&gt;
&lt;p&gt;rsync 是 linux 下一款非常强大的同步工具，采用差异同步的方法，只上传文件&#x2F;文件夹的不同部分，同时可以对上传部分先进行压缩，所以 rsync 的传输效率是很高的。&lt;&#x2F;p&gt;
&lt;p&gt;但 rsync 也有缺点，最大的问题就是每次执行 rsync 命令都会遍历目标目录，当文件不多时，这没什么问题，一旦文件数到了一定规模，那么每次遍历都会消耗很多资源。但事实上改动的文件并不多，如果可以只 sync 改动的文件，问题就迎刃而解了。&lt;&#x2F;p&gt;
&lt;p&gt;这时就得请出本文的另一个主角：inotify。inotify 是一种文件系统的变化通知机制，如文件增加、删除等事件可以立刻让用户态得知。要使用 inotify，linux 的内核版本不能低于 2.6.13&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lzyy-laptop 2.6.32-26-generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#48-Ubuntu SMP Wed Nov 24 09:00:03 UTC 2010 i686 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但 inotify 只提供了 C 语言接口，不方便调用，所以我们需要先安装&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rvoicilas&#x2F;inotify-tools&#x2F;wiki&#x2F;&quot;&gt;inotify-tools&lt;&#x2F;a&gt;，大多数的 linux 发行版应该都可以直接通过 apt-get 或 yum 来安装。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiao-ben-shuo-ming-yu-shi-yong&quot;&gt;脚本说明与使用&lt;&#x2F;h3&gt;
&lt;p&gt;其实&lt;a href=&quot;http:&#x2F;&#x2F;blog.chinaunix.net&#x2F;u&#x2F;32831&#x2F;showart_1289758.html&quot;&gt;前人&lt;&#x2F;a&gt;已经做了类似的工作，不过有些地方尚未完善(如删除文件的同步)，于是我改进和简化了一下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-wu-duan&quot;&gt;服务端&lt;&#x2F;h3&gt;
&lt;p&gt;以下是服务端脚本，运行这段脚本后，这个机器上对应的文件夹将会同步到其他机器上&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;###########################
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 在这里配置本地文件夹,目标host,目标的rsync_module。rsync_module在同步机器的&#x2F;etc&#x2F;rsyncd.conf文件中配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 逗号前后不要有空格
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sync[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;local&#x2F;dir,1.2.3.4,test&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# localdir,host,rsync_module
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# sync[1]=&amp;#39;&#x2F;path&#x2F;to&#x2F;local&#x2F;dir,host,rsync_module&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;###########################
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sync[@]&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $2}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $3}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inotifywait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -mrq --timefmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%d&#x2F;%m&#x2F;%y %H:%M&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --format  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%T %w%f %e&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; CLOSE_WRITE,create,move,delete  $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read  date time file event
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;			MODIFY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;CREATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MOVE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MODIFY,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;CREATE,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MODIFY,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;4913&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;~&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;rsync -avz --exclude=&amp;#39;*&amp;#39; --include=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;::$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# echo $cmd
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;				;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			MOVED_FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MOVED_FROM,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;DELETE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;DELETE,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;4913&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;~&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;rsync -avz --delete-excluded --exclude=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;::$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# echo $cmd
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;				;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;esac
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行脚本&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cd &#x2F;path&#x2F;to&#x2F;inotify-rsync
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; +x inotify-rsync.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.&#x2F;inotify-rsync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以把这个脚本设置为开机启动，这样就可以自动同步了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-bu-duan&quot;&gt;同步端&lt;&#x2F;h3&gt;
&lt;p&gt;同步机器上要做两件事&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. 设置&#x2F;etc&#x2F;rsyncd.conf 文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# vim &#x2F;etc&#x2F;rsyncd.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 这个test就是上面脚本中用到的rsync_module名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# path指定同步过来的文件存放的路径
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 如果只允许部分ip的机器进行同步的话，设置allow为 192.168.1.1&#x2F;100 类似的格式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[test]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;path&#x2F;to&#x2F;your&#x2F;dir
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F; highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;**2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 启动rsync daemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; highlight console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --daemon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;金山的周洋同学用 C++写了个&lt;a href=&quot;http:&#x2F;&#x2F;hi.baidu.com&#x2F;johntech&#x2F;blog&#x2F;item&#x2F;f8bdaec8fb3c268dc81768c0.html&quot;&gt;Sersync&lt;&#x2F;a&gt;，也是利用的 inotify+rsync 来实现实时同步，有兴趣的可以关注一下&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>看了Solar框架的几点感触</title>
            <pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/solar/</link>
            <guid>https://limboy.me/posts/solar/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;solarphp.com&#x2F;&quot;&gt;Solar 框架&lt;&#x2F;a&gt;，大家可能不是很熟悉，我也是看了这篇文章:&lt;a href=&quot;http:&#x2F;&#x2F;paul-m-jones.com&#x2F;archives&#x2F;1113&quot;&gt;The Future of Zend Framework is Solar&lt;&#x2F;a&gt;后，眼前一亮，就花了点时间了解了一下。标题很吸引眼球，不过确实也把 Solar 的一些特性通过对比的方式很好地展现出来了，下面是我总结的几点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-gou-jian-fang-fa&quot;&gt;全局构建方法&lt;&#x2F;h3&gt;
&lt;p&gt;很多框架都没有做到这点，或者说没有意识到这点，要实例化一个类时，可以 new，可以 getInstance()，可以 factory，参数的传递也没有统一的规范。Solar 这点做得很好&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Solar_Base &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; note that the config property is named for the class
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; with an underscore prefix.  this lets us collect the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; parent config defaults as well.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;one&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;two&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;three&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 Solar 在实例化一个类时是通过一个全局的 factory 方法来实现的，同时参数的传递也很讲究，只能传递一个 config 数组，当然这个 config 可以从配置中读取。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-yi-de-config-diao-yong&quot;&gt;统一的 config 调用&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 在运行时只调用一个 config 文件，这个跟 yii 有点类似，Kohana 则是把配置文件打得很散。这样做的好处是可以避免在运行时多次读取配置文件，影响效率，而且配置文件一多的话也容易乱。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 的 config 配置里有几项是特殊项，如 ini_set,registry_set。还有一个很重要的特性是将类名作为 key，然后将该类的属性作为值，运行时这些值将自动覆盖类的默认值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * ini_set values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ini_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error_reporting&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_ALL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_STRICT&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;display_errors&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;html_errors&amp;#39;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;session.save_path&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;tmp&#x2F;session&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;date.timezone&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;UTC&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * auto-register some default objects for common use. note that these are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * lazy-loaded and only get created when called for the first time.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;registry_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sql&amp;#39;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_User&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;model_catalog&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Model_Catalog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mail_transport&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Mail_Transport&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;controller_front&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * sql adapter to use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Adapter_Sqlite&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * front controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;classes&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_App&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;disable&amp;#39;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;base&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;default&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;routing&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有一点我觉得 Solar 做得不太好，就是把类的属性的默认值放在了类里，而不是配置文件里。将来如果因为某个属性导致系统出问题，调试起来将会很困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-zhu-ce-qi-xiao-mie-dan-li&quot;&gt;全局注册器(消灭单例)&lt;&#x2F;h3&gt;
&lt;p&gt;通过全局注册器就可以在整个应用程序中共享内容，这个内容可以是字符串&#x2F;数组&#x2F;对象等等。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就是最简单的存取，也可以设置为 lazy-loading，就是不直接存对象，而是类名和 config，这样只有到真正需要时才实例化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过这种方法，其实就实现了单例。现在很多框架都在大力打压单例，Zend Framework 更是在 2.0 的 roadmap 里提出要尽可能地消灭单例，不在类的内部实现单例方法，因为这样的话子类就很难扩展，尤其是在单例里又加入了一些特有的逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-chang-ji-zhi&quot;&gt;异常机制&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 的异常机制也有自己的特点，做得很细致。自带了 16 个常用异常，如 DirNotFound&#x2F;FileNotReadable 等等，不过感觉这块有点过设计了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;My_Example_Class&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错的类名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ERR_SOMETHING_WRONG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;Exception类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Something is wrong.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;附加信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;所谓依赖注入(dependency injection)，就是某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 一般是把要注入的类定义在 config 里，比如 Auth 类要用到 Cache，但不确定具体使用时会用到哪个 Cache，此时可以通过配置 config 文件来实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Auth_Adapter&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;cache&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timeout&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样 Auth 类就会使用 Memcache 作为缓存引擎。可以在类内部定义多个注入点，这样就可以使用不同的类来完成同样的目的，只要该类有特定的方法。Zend Framework 在 2.0 的 roadmap 中也提到&amp;quot;All components &lt;strong&gt;MUST&lt;&#x2F;strong&gt; allow for dependency injection&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;依赖注入可以让模块之间更加松耦合，比如之前用的是 XCache 缓存殷勤，后来由于业务变动要使用 Memcache 引擎，这时只需在配置文件里修改一下缓存类型就行了，多省事啊。&lt;&#x2F;p&gt;
&lt;p&gt;我们学习各种设计模式，最终都是为了一个目的：应对变化。而依赖注入可以让我们更加从容地应对变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gua-pei-qi&quot;&gt;适配器&lt;&#x2F;h3&gt;
&lt;p&gt;使用适配器是依赖注入的基础，适配器其实就是一个抽象基类，所有的子类都必须继承该抽象基类。这样才能保证在使用依赖注入时，一定存在某个特定方法。比如上面说到的 Auth 引用缓存问题，因为所有的缓存都是继承 Solar_Cache_Adapter 而来，所以一定会有 save 方法，Auth 在调用缓存时就可以放心地 save 了。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 内部使用了大量的 Adapter，目的就是为了方便依赖注入。可能系统提供的几个类都不适合具体应用，这时只要继承 Adapter，自己写一个类，然后加到配置文件里就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 框架还是值得看一看的，即使不打算拿他来做应用。也可以关注一下 Zend Framework 2.0，如果真的实现了&lt;a href=&quot;http:&#x2F;&#x2F;framework.zend.com&#x2F;wiki&#x2F;display&#x2F;ZFDEV2&#x2F;Zend+Framework+2.0+Requirements&quot;&gt;roadmap&lt;&#x2F;a&gt;里所说的种种，相信一定会给其他的 php 框架带来巨大的冲击。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>同步twitter到新浪微博的php脚本(不需要twitter密码)</title>
            <pubDate>Wed, 08 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/twitter2weibo/</link>
            <guid>https://limboy.me/posts/twitter2weibo/</guid>
            <description>&lt;p&gt;我不用新浪微博，有好友想要此功能，于是就上网看了下有没有现成的，果然有一个&lt;a href=&quot;http:&#x2F;&#x2F;iamsure.org&#x2F;archives&#x2F;169&quot;&gt;twitter2weibo 的 php 脚本&lt;&#x2F;a&gt;，但打开一看还是基于 Basic Auth 的，自然不能用，只能自己写一个了。(发布新浪微博部分，借鉴了原先的 twitter2weibo)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-shuo-ming&quot;&gt;使用说明&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;打开 config.php，在里面填入一组或多组信息(twitter_username&#x2F;sina_email&#x2F;sina_pwd)&lt;&#x2F;li&gt;
&lt;li&gt;在当前目录下新建一个 data 文件夹，并设置为可写入&lt;&#x2F;li&gt;
&lt;li&gt;设置 cron 为每 3 分钟执行一次脚本&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;crontab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;*&#x2F;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* * * *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; php &#x2F;path&#x2F;to&#x2F;twitter2weibo.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以先试运行一下看看是否正常&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-jia-de-te-xing&quot;&gt;新加的特性&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;支持多用户(在 config.php 里配置)&lt;&#x2F;li&gt;
&lt;li&gt;多线程同步(只支持 linux)。如果是 windows 主机，可以去掉 pcntl_fork 方法，直接调用 sync 方法&lt;&#x2F;li&gt;
&lt;li&gt;保存用户 cookie，避免多次读取&lt;&#x2F;li&gt;
&lt;li&gt;用户删除某条&#x2F;某些 tweet 后，不会出现异常同步&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xia-zai&quot;&gt;下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;twitter2weibo&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;twitter2weibo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>写了一款php日志系统——plog</title>
            <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/plog/</link>
            <guid>https://limboy.me/posts/plog/</guid>
            <description>&lt;p&gt;日志是一个应用程序的重要组成部分，今天在看 pylons 对日志的处理时，受到启发，于是 plog 就诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;很多 php 框架都忽略了日志的重要性(如 kohana)，往往只是能用，自定义和可扩展性不够，等到程序出了问题，再想找原因时就比较麻烦了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plog-jian-jie&quot;&gt;plog 简介&lt;&#x2F;h3&gt;
&lt;p&gt;plog 是一款轻量级，易定制，易使用，易扩展的 php 日志系统。可以很方便地添加日志处理工具、自定义输出格式、自定义日志类型等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plog-shi-yong&quot;&gt;plog 使用&lt;&#x2F;h3&gt;
&lt;p&gt;使用 plog 很简单，在每个要加日志的文件里，输入以下代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 载入plog类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;..&#x2F;..&#x2F;plog&#x2F;classes&#x2F;plog.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 设置config，config文件位置可以自定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对于单入口文件，这两段代码可以放在入口文件处
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Plog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;path&#x2F;to&#x2F;config.php&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把下面这段代码放到对应的文件里
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Plog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;this is debug message&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;this is info message&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &#x2F; &lt;&#x2F;span&gt;&lt;span&gt;highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;### plog的配置
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;plog的配置很灵活，下面是个demo config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;highlight php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 设置日志的类型，如有些是系统日志，有些是应用日志
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;loggers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; base是个特殊变量，会自动添加到其他配置的前面
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;base&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dirname(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;demo&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;system&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;system&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; key为日志类型，value为文件夹路径，base路径会被自动添加
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;app&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;app&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 同上
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 日志的等级
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;levels&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;DEBUG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;INFO&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ERROR&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;WARN&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;FATAL&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 日志处理工具，可以添加多个，设置enabled为true表示已启用
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;handlers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 处理引擎
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;driver&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 记录哪种类型的日志
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;level&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;DEBUG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 日志格式，可以在formatters处添加
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;formatter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;generic&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是否启用该引擎
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;enabled&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 针对该handler的特处配置
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;config&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;dir&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dirname(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;demo&#x2F;var&#x2F;log&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 日志格式
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;formatters&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;generic&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;{time} {level} [{logger}] {uri} &amp;quot;&amp;quot;&amp;quot;{message}&amp;quot;&amp;quot;&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ji-dian-shuo-ming&quot;&gt;几点说明&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;levels 项，每一个值都是一个方法，不过是小写的，如$log-&amp;gt;debug(&#x27;message&#x27;)。如果某个方法不在这些 levels 里会触发异常。&lt;&#x2F;li&gt;
&lt;li&gt;日志格式的可选变量在 plog&#x2F;formatter.php 里，每一个 get 开头的方法就是，如果觉得不够用，可以自己添加。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ri-zhi-nei-rong&quot;&gt;日志内容&lt;&#x2F;h3&gt;
&lt;p&gt;日志内容取决于日志格式，下面是 demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2010&#x2F;12&#x2F;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 16:00:26 DEBUG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;app.test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;projects&#x2F;os&#x2F;plog&#x2F;demo&#x2F;app&#x2F;test.php&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;id=1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;hello world&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2010&#x2F;12&#x2F;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 16:00:26 INFO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;app.test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;projects&#x2F;os&#x2F;plog&#x2F;demo&#x2F;app&#x2F;test.php&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;id=1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;今晚打老虎&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2010&#x2F;12&#x2F;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 16:01:17 DEBUG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;system.core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;projects&#x2F;os&#x2F;plog&#x2F;demo&#x2F;system&#x2F;core.php&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_profiler=1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;heal the world&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2010&#x2F;12&#x2F;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 16:37:29 DEBUG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;system.core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;projects&#x2F;os&#x2F;plog&#x2F;demo&#x2F;system&#x2F;core.php&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_profiler=1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;heal the world&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xia-zai&quot;&gt;下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;plog&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;plog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说 pubnub</title>
            <pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-pubnub/</link>
            <guid>https://limboy.me/posts/about-pubnub/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.pubnub.com&#x2F;&quot;&gt;pubnub&lt;&#x2F;a&gt;是一个云端即时消息服务，通过它我们可以很方便地创建自己的即时应用。&lt;&#x2F;p&gt;
&lt;p&gt;我们只需在客户端&#x2F;服务端调用 subscribe 和 publish 方法即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; LISTEN FOR MESSAGES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PUBNUB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.subscribe&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  channel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello_world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SEND MESSAGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PUBNUB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  channel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello_world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;pubnub 有以下几大特点&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-yu-yan-kua-ping-tai&quot;&gt;多语言，跨平台&lt;&#x2F;h3&gt;
&lt;p&gt;pubnub 支持多种语言：&lt;code&gt;php&#x2F;ruby&#x2F;python&#x2F;perl&#x2F;erlang&#x2F;js&lt;&#x2F;code&gt;。支持多种客户端：Mobile&#x2F;Browser&#x2F;XBOX 等等。你在本地运行一段 js publish 脚本，服务器端如果正在监听这个 channel，就会收到 js 传送的信息，然后作进一步处理。也可以在本地命令行运行一段 python subscribe 程序，等服务器端有更新时，publish 一下，python 程序就会收到结果，而且是即时的。可以是多个程序&#x2F;多种语言向同一个 channel 发送&#x2F;接收信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-quan&quot;&gt;安全&lt;&#x2F;h3&gt;
&lt;p&gt;前面说了，每个应用程序都可以向特定的 channel 发送消息，那如何才能保证 channel 的私密性呢？&lt;&#x2F;p&gt;
&lt;p&gt;如果要使用 pubnub 服务，就需要先注册，注册完后会有 pub key&#x2F;sub key&#x2F;secret key，如果要使用相应的服务，则需使用相应的 key。比如要发送消息，要使用 pub key，此时的 channel 只对该 pub key 有效。如果有其他的应用也使用了该 channel 名称，但因为 pub key 不同，所以不会互相干扰。&lt;&#x2F;p&gt;
&lt;p&gt;此外，pubnub 也支持 SSL，保证数据的安全性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-lu&quot;&gt;效率&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;pubnub 是用 C 写的，运行在 Amazon EC2 和 Rackspace 上，通过 GAE 来远程监控。&lt;&#x2F;li&gt;
&lt;li&gt;pubnub 的消息传送速度是纳妙级的，当断网重连后，消息会重新传递&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;可惜的是这么好的服务是收费的，庆幸的是有免费版，每天可以免费发送 5000 条消息，对于个人的应用来说应该够用了。如果不够用，也可以买消息，5$可以买 100,000 条消息。&lt;&#x2F;p&gt;
&lt;p&gt;PS:pubnub 规定每条消息不能超过 1800 字节，所以不要指望传送大量数据。&lt;&#x2F;p&gt;
&lt;p&gt;因为有被 Qiáng 的风险，所以国内的企业可以自己实现一套类似的即时消息系统，对于应用之间的解耦也大有帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说php的异步请求</title>
            <pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-async/</link>
            <guid>https://limboy.me/posts/php-async/</guid>
            <description>&lt;p&gt;很多情况下我们需要让 php 在后台执行某个程序，同时又不影响页面的输出，以下是我总结的几种实现方式&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exec&quot;&gt;exec&lt;&#x2F;h3&gt;
&lt;p&gt;这是最简单的方式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;%s &amp;gt; %s 2&amp;gt;&amp;amp;1 &amp;amp; echo $! &amp;gt; %s&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$outputfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pidfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调用$cmd命令，将输出重定向到$outputfile，不显示错误信息，同时将进程 id 输出到$pidfile。&lt;&#x2F;p&gt;
&lt;p&gt;这样也方便监控，比如判断该进程是否还在运行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isRunning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;shell_exec(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ps %d&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count(preg_split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$e&lt;&#x2F;span&gt;&lt;span&gt;){}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意：如果直接调用 exec 来运行某个命令，或者在该命令后面加个&amp;quot;&amp;amp;&amp;quot;，php 还是会等待该命令运行完成再执行下面的操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proc-open-proc-close&quot;&gt;proc_open&#x2F;proc_close&lt;&#x2F;h3&gt;
&lt;p&gt;这个方法很有意思，先用 proc_open 运行一段后台程序，然后用 proc_close 来关闭 proc_open，结果程序就在后台运行了，同时 php 也会继续执行下去&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;proc_close(proc_open (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ping www.baidu.com -c 10 &amp;gt; &#x2F;path&#x2F;to&#x2F;output &amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pcntl-fork&quot;&gt;pcntl_fork&lt;&#x2F;h3&gt;
&lt;p&gt;使用 php 的多线程来达到目的，原理就是复制一个子线程，同时杀死父线程(不支持 windows)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_fork()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;();     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Parent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;posix_kill(posix_getpid(), &lt;&#x2F;span&gt;&lt;span&gt;SIGHUP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_level()&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_clean()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Discard the output buffer and close
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Close all of the standard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; file descriptors as we
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDERR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; are running as a daemon.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register_shutdown_function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;shutdown&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;posix_setsid() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &amp;lt;- This is an error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do your stuff here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;bash&#x2F;command &amp;gt; &#x2F;path&#x2F;to&#x2F;output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;header&quot;&gt;header&lt;&#x2F;h3&gt;
&lt;p&gt;使用这个方法的前提是使用 http 协议，同时目标文件可控，最好在一个域下。因为必须要建立 http 连接才行，所以稍微有点费时。原理是通过 header 输出&#x27;Connection:close&#x27;头，中断 http 连接，同时后面的代码继续执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_level()&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_clean()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Connection: close&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ignore_user_abort()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_start()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Connection Closed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_length()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Length: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-shu-ju-ku-zuo-zhong-zhuan&quot;&gt;使用数据库作中转&lt;&#x2F;h3&gt;
&lt;p&gt;把要执行的命令和参数先存到缓存或数据库，接下来的事就不用 php 操心了。&lt;&#x2F;p&gt;
&lt;p&gt;如果还有其他的方法，欢迎交流 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>写了一款REST框架——RESTY</title>
            <pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/resty/</link>
            <guid>https://limboy.me/posts/resty/</guid>
            <description>&lt;p&gt;关于 REST 的介绍可以参考&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;tech&#x2F;2010&#x2F;11&#x2F;14&#x2F;rest.html&quot;&gt;我之前的文章&lt;&#x2F;a&gt;，总体说来，REST 是 web 发展的趋势，而 PHP 是 web 开发的利器，但我找了一遍，只找到了两个 PHP REST 框架(不包括那些以 MVC 为核心，同时又支持 REST 的框架)，一个是&lt;a href=&quot;http:&#x2F;&#x2F;peej.github.com&#x2F;tonic&#x2F;&quot;&gt;Tonic&lt;&#x2F;a&gt;，架构理念我比较认同，但代码质量实在不敢恭维。还有一个是&lt;a href=&quot;http:&#x2F;&#x2F;www.recessframework.org&#x2F;&quot;&gt;Recess&lt;&#x2F;a&gt;，在我看来，它有点复杂化了，把不该 rest 做的事也做了。在这种情况下，我只能自己动手，丰衣足食了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resty-jian-jie&quot;&gt;RESTY 简介&lt;&#x2F;h3&gt;
&lt;p&gt;RESTY 的流程很简单，获取 Request 单例，然后执行 exec 方法，该方法里会调用 Route 来解析 URI 获取相应的 Resource，然后实例化 Resource，触发相应的 HTTP 方法，最后返回一个 Response 对象，Response 执行 output 方法就输出了结果。听起来好像一点都不简单，哈哈，还是来大概看一下代码吧&lt;&#x2F;p&gt;
&lt;p&gt;index.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Route_Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resource Not Found&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;REQUEST_URI&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		))
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;request.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resource_&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ReflectionClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class_name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;before&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;request_method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;after&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;response.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_content_encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Content-type:application&#x2F;json;charset=utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Status:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_messages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Content-Length: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strlen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_header &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;resty-te-xing&quot;&gt;RESTY 特性&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;qing-liang-ji&quot;&gt;轻量级&lt;&#x2F;h3&gt;
&lt;p&gt;RESTY 包含了核心的 Request&#x2F;Resource&#x2F;Response&#x2F;Route&#x2F;Config&#x2F;Validation 功能，没有其他多余的部件，如 Controller&#x2F;View 等等，很纯粹。一个工具应该把一件事做好，同时提供接口，这也是 RESTY 的哲学。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-fang-bian&quot;&gt;使用方便&lt;&#x2F;h3&gt;
&lt;p&gt;使用时，只需定义好 uri 对应的 Resource，然后编写 Resource 就行了，其他的事 RESTY 会帮你搞定。&lt;&#x2F;p&gt;
&lt;p&gt;config&#x2F;resource.php demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;example&#x2F;(?&amp;lt;id&amp;gt;[0-9]+)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;example&#x2F;foo&#x2F;(?&amp;lt;name&amp;gt;[a-zA-Z_0-9]+)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&#x2F;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 uri 支持正则，没错，原生的 php 正则。resource 部分对应 resource 文件的路径(不包括后缀)&lt;&#x2F;p&gt;
&lt;p&gt;resource&#x2F;example.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Resource_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Resource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* set etag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;		Response::instance()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			-&amp;gt;if_none_match(md5(&amp;#39;hello&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			-&amp;gt;add_etag(md5(&amp;#39;hello&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;		&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;implode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;REQUEST_URI&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_merge(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;type&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每一个资源对应 4 个 http 方法。RESTY 还很贴心地提供了 Validation 部件(基本上是直接从 Kohana 中 K 过来的)，方便对数据进行校验。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-kuo-zhan&quot;&gt;易扩展&lt;&#x2F;h3&gt;
&lt;p&gt;system&#x2F;classes 文件夹下的类文件，都可以在 app&#x2F;classes 文件夹下扩展，而且使用时不用做任何修改。假设你之前已经写了不少 Resource，忽然想到要扩展系统的 Resource 类，正常的做法是定义一个 MY_Resource 之类的类文件来扩展系统的 Resource 类，然后使用时使用 MY_Resource 而不是 Resource。但这样就会有个问题，之前使用的 Resource 类都要做修改了，可谓牵一发而动全身。RESTY 就方便了，同样要扩展 Resource 类，只要在 app&#x2F;classes 下新建一个 resource.php 文件，然后扩展 Resty_Resource 类即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Resty_Resource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样使用时还是一样的 Resource 类，但却多了 foo 方法。这也是从 Kohana 学到的无缝扩展大法（题外话：Kohana 真是个不错的框架，各位不妨一试）。原理就是在类自动加载时会先去 app&#x2F;classes 文件夹下去找，如果没找到的话再去 system&#x2F;classes 下找。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yan-zheng-gong-neng&quot;&gt;验证功能&lt;&#x2F;h3&gt;
&lt;p&gt;作为一个比较完整的 REST 框架，Validation 还是不能少的，为了不重复制造轮子，直接把 Kohana 的验证类搬了过来，稍作修改。&lt;&#x2F;p&gt;
&lt;p&gt;配置：config&#x2F;validation.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;get&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;filters&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;trim&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				),
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;rules&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not_empty&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;min_length&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;digit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				),
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;错误提示：config&#x2F;message.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;digit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id必须是数字&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not_empty&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id不能为空&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;min_length&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id长度至少为:value&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;config-gong-neng&quot;&gt;Config 功能&lt;&#x2F;h3&gt;
&lt;p&gt;config 文件如上面所示，就是返回一个数组。使用也很简单:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 获取config&#x2F;message.php文件的example key对应的内容
&lt;&#x2F;span&gt;&lt;span&gt;Config::get(&amp;#39;message.example&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 设置config(不会写入到文件，只在一个http request有效)
&lt;&#x2F;span&gt;&lt;span&gt;Config::set(&amp;#39;message.example.id.digit&amp;#39;, &amp;#39;id can be anything&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xia-zai&quot;&gt;下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;resty&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;resty&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;欢迎使用，并反馈:)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>成为技术领导者</title>
            <pubDate>Thu, 02 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/becoming-a-technical-leader/</link>
            <guid>https://limboy.me/posts/becoming-a-technical-leader/</guid>
            <description>&lt;p&gt;久闻温伯格大名，此书对于想从技术路线转型到管理路线的童鞋会有不少收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;我们设定大大小小的目标，面对形形色色的挑战，最终都是让自己坚信可以克服达成目标道路上的所有困难。(我自己加的)&lt;&#x2F;li&gt;
&lt;li&gt;应该为任何想领导别人的欲望感到羞耻。&lt;&#x2F;li&gt;
&lt;li&gt;不会有人愿意追随不关心人的领导，除非他们别无选择。&lt;&#x2F;li&gt;
&lt;li&gt;领导就是营造一个使人们工作更有意义且效率更高的环境的过程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我能做到既成为一名领导者，同时又保持我的技术技能？&lt;&#x2F;li&gt;
&lt;li&gt;我不得不牺牲掉多少技术专长？&lt;&#x2F;li&gt;
&lt;li&gt;我能得到什么回报？&lt;&#x2F;li&gt;
&lt;li&gt;如果我是领导者，我必须指挥身边的人吗？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xian-xing-mo-xing-he-you-ji-mo-xing&quot;&gt;线性模型和有机模型&lt;&#x2F;h3&gt;
&lt;p&gt;要成为一名有效的领导者，你必须根据自己的需要用到许多模型，并且能够根据实际情况的需要适当地从一个模型切换到另一个模型。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-jian-de-jie-shi&quot;&gt;事件的解释&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：一种结果源自一种原因&lt;&#x2F;li&gt;
&lt;li&gt;有机模型(系统性思考)：事件 X 是数以百计的其他因素作用的结果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;事实上大多数有人参与的重要事件，都是比较复杂的事件。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ding-yi-ge-ren&quot;&gt;定义个人&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：将个人分门别类&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：考虑人们的唯一性（个性+共性）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;有机模型不把人们与某种标准相比较，因此也不企图将人塑造成某种标准样本。&lt;&#x2F;p&gt;
&lt;p&gt;当我们的行为基于威胁&#x2F;奖赏模型时，我们往往认为领导者的工作就是散步威胁和施舍奖赏&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-xi-de-ding-yi&quot;&gt;关系的定义&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：按照角色而不是个人，施加影响的是老板而不是这个人。(适合大规模的规划)&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：一个独特的个体与另一个独特的个体间的联系。从生命的意义上来讲，两人是平等的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;利用有机模型解决问题，每个人都能受益。当我们采用这种方法对待其他人时，我们常常感到的是一种新发现的喜悦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mian-dui-gai-bian-de-tai-du&quot;&gt;面对改变的态度&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：每次只改变一件事&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：每次只改变一件事是不可能的&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;认同有机模型的人们也需要安全感，但他们通过冒险和容忍不确定性来获得安全感。&lt;&#x2F;p&gt;
&lt;p&gt;在威胁&#x2F;奖赏模型下，我们可能通过努力保持所有的人和关系不变来获得安全感&lt;&#x2F;p&gt;
&lt;p&gt;有机模型期待和接受改变，将改变视为宇宙中的普通一部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ling-dao-de-moi-mo-xing&quot;&gt;领导的 MOI 模型&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;M:Motivation&lt;&#x2F;li&gt;
&lt;li&gt;O:Organization&lt;&#x2F;li&gt;
&lt;li&gt;I:ideas&#x2F;innovation&lt;&#x2F;li&gt;
&lt;li&gt;D:Determination(我自己加的)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;只要使这三者平衡，每个人都能成为优秀的领导者&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ling-dao-zhe-zuo-shi-yao&quot;&gt;领导者做什么&lt;&#x2F;h3&gt;
&lt;p&gt;所有那些一直非常成功的领导者通过鼓励人们重视创意或用更好的工作方式来提高工作效率&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-jue-wen-ti-xing-ling-dao-feng-ge-de-te-dian-zui-hao-de-ji-zhu-ling-dao-zhe-de-feng-ge&quot;&gt;解决问题型领导风格的特点(最好的技术领导者的风格)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;理解问题&lt;&#x2F;li&gt;
&lt;li&gt;管理想法的交流
&lt;ul&gt;
&lt;li&gt;为了保持想法的交流，不要轻易否定团队成员的想法&lt;&#x2F;li&gt;
&lt;li&gt;如果不得不否定，那么一定要明确，你所否定的只是这个想法，而不是提出这个想法的人&lt;&#x2F;li&gt;
&lt;li&gt;在给出你的想法之前要先对它进行检验&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;保证质量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;各个领导者有各自不同的方式完成这三种功能，这取决于他们在激励、组织和创意上的个人技巧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-xin-cun-zai-geng-hao-de-fang-fa&quot;&gt;相信存在更好的方法&lt;&#x2F;h3&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对于 MOI 现状，愿意改变多少？&lt;&#x2F;li&gt;
&lt;li&gt;下一个五年计划&#x2F;明年&#x2F;下月&#x2F;今天？&lt;&#x2F;li&gt;
&lt;li&gt;你现在的领导风格使你快乐吗？使你周围的人快乐吗？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ling-dao-zhe-shi-ru-he-cheng-chang-qi-lai-de&quot;&gt;领导者是如何成长起来的&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;shou-neng-sheng-qiao&quot;&gt;熟能生巧&lt;&#x2F;h3&gt;
&lt;p&gt;每天坚持练习，奇迹就会发生&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qian-fei-yue&quot;&gt;向前飞跃&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;真正明显的进步来自于少数的几次突破，但突破依赖于扎实的基本功。&lt;&#x2F;li&gt;
&lt;li&gt;当你感到自己真正在进步时，就要开始寻找某种观念上的突破。&lt;&#x2F;li&gt;
&lt;li&gt;每当试图有所提高时，都要先经历一次小的退步，然后才能有大的提高。&lt;&#x2F;li&gt;
&lt;li&gt;高原阶段是存在的，但你不是在跳跃，而是在攀登。为了攀登到新的高度，必须离开原有的立足点，舍弃你擅长的东西，还有可能滑落低谷。如果你不舍得放弃你擅长的东西，那么你会继续缓慢地前进，但永远达不到新的高度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zai-xian-shi-she-hui-zhong-cheng-chang&quot;&gt;在现实社会中成长&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;becoming-a-technical-leader&amp;#x2F;grow.png&quot;
        width=&quot;526&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不论你取得的成就有多大，多辉煌，你永远不会忘记深处低谷体会到的痛苦。没有对美好事物的向往，这些痛苦会在你开始攀登之前就把你拉回原地。所以在你下次攀登之前，要想到站在顶峰的感觉。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-xun-huan&quot;&gt;元循环&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;每当我战胜了一个低谷，不仅跃升到一个新的高原，而且在向&amp;quot;元高原&amp;quot;前进的路上又迈进了几步，也就是说把握住了成长过程本身。在学新的计算机语言同时，更多的是在&lt;em&gt;学如何学&lt;&#x2F;em&gt;新的计算机语言。&lt;&#x2F;li&gt;
&lt;li&gt;要获得这种&amp;quot;元学习&amp;quot;的能力，你必须成功渡过第一个低谷。不是每个人都有足够的动力，或能够承受感情上的打击。&lt;&#x2F;li&gt;
&lt;li&gt;尽管如此，在我们努力成为一名领导者的过程中，我们在技术方面的&amp;quot;元学习&amp;quot;能力对我们的帮助是有限的。&lt;&#x2F;li&gt;
&lt;li&gt;可以尝试一条循序渐进的道路：用教育、领导一些小团体的方式向领导者方向成长。尽管如此，还是会时常忍受痛苦的煎熬。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;你有某种自己在相当长的时间里都一直在改善、提高的技能吗？你能描述你的进步吗？能将你的学习方法运用到成为一名更优秀的解决问题型领导者的学习中去吗？&lt;&#x2F;li&gt;
&lt;li&gt;你能描述你目前所处的高原阶段吗？有迹象标明你将面临低谷吗？&lt;&#x2F;li&gt;
&lt;li&gt;从你前一次攀登新高原到现在有多长时间了？你仍沉浸于停留在平坦高原时的感觉吗？你为攀登另一个高原做了什么准备？&lt;&#x2F;li&gt;
&lt;li&gt;在你生命的过程中，你学到了多少有关学习的知识？&lt;&#x2F;li&gt;
&lt;li&gt;为自己确立一个个人目标，每天保证练习至少 15 分钟，持续一周的时间。记录下进展，下一周，设立另一个目标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chuang-xin-de-zhang-ai&quot;&gt;创新的障碍&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;无法客观地监督自己(自蔽)&lt;&#x2F;li&gt;
&lt;li&gt;没问题综合症：不能准确理解问题的症结就草率提出先入为主的解决方案（自负）&lt;&#x2F;li&gt;
&lt;li&gt;坚信任何问题都只有唯一解答(教条)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;自我激励的一个方法：每天花 5 分钟写日记：事实-感受-发现（也可参考《晨间日记的奇迹》一书）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>尝试多项睡眠</title>
            <pubDate>Thu, 02 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/polyphasic-sleep/</link>
            <guid>https://limboy.me/posts/polyphasic-sleep/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-duo-xiang-shui-mian&quot;&gt;什么是多项睡眠&lt;&#x2F;h3&gt;
&lt;p&gt;说多项睡眠前，先说说单项睡眠。单项睡眠就是大部分人采用的睡眠方法：白天干活，晚上睡觉，一天 24 小时中，只有一段时间是用来睡觉的。多项睡眠则是把这一大段睡眠时间又分成了好几部分，分散到一天中。&lt;&#x2F;p&gt;
&lt;p&gt;多项睡眠又称为达芬奇睡眠法，传闻达·芬奇就是采用多相睡眠，他每隔 4 个小时就睡 15 分钟。他活了 68 岁，不仅会画画、雕塑，还是个未来学家、科学巨匠、文艺理论家、建筑师、数学家、音乐家、戏剧家、发明家、医学家、物理学家和机械工程师，歌也唱得很好。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个非典型例子，就是&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;966246.htm&quot;&gt;尼古拉·特斯拉&lt;&#x2F;a&gt;，这位同学舍不得睡觉，每天只睡 2 个多小时，但无法考证是否采用了多项睡眠。&lt;&#x2F;p&gt;
&lt;p&gt;我第一次接触这个概念，是通过&lt;a href=&quot;http:&#x2F;&#x2F;dustincurtis.com&#x2F;sleep.html&quot;&gt;这个页面&lt;&#x2F;a&gt;，当时被它的设计和排版深深打动，但也只是大概了解了一下概念。直到最近又有意无意地看到了多项睡眠方面的文章，于是我这颗不安份的心，就开始蠢蠢欲动了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-xiang-shui-mian-de-hao-chu&quot;&gt;多项睡眠的好处&lt;&#x2F;h3&gt;
&lt;p&gt;多相睡眠的好处是，你最多可以在一星期内节约 20-30 个小时，并且精力更加充沛。想像一下每天只睡 4 个小时，还跟正常人一样，甚至更加清醒，更富有创造力，这样不就是延长了生命吗？&lt;&#x2F;p&gt;
&lt;p&gt;我们都知道早上醒来的那段时间是最好的，因为那时大脑最清醒，没有乱七八糟的琐事。而采用多项睡眠后，每次醒来你的大脑都会处于这种状态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wo-de-duo-xiang-shui-mian-shi-shi-ji-lu&quot;&gt;我的多项睡眠实施记录&lt;&#x2F;h3&gt;
&lt;p&gt;其实做这个决定还是挺容易的，而且很兴奋。我给自己定的睡眠时间是：中午 12:40-13:00&#x2F;晚上 19:30-21:00&#x2F;凌晨 1:00-6:00。这个属于入门级的多项睡眠，打算先从简单的开始，逐步深入。目前已经实施了两个星期，把遇到的问题大概说一下：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shuo-fu-ling-yi-ban&quot;&gt;说服另一半&lt;&#x2F;h3&gt;
&lt;p&gt;当然单身的童鞋们就不用考虑这个问题了。我在这方面倒是没有遇到什么障碍，因为只要我不做太败家的事，gf 都挺顺着我的，这点我也比较庆幸。其实刚开始，是我自己实施这种睡法的，后来由于干扰到了她的正常睡眠，于是也被我拉下水了 XD&lt;&#x2F;p&gt;
&lt;h3 id=&quot;diao-zheng-zuo-xi-shi-jian&quot;&gt;调整作息时间&lt;&#x2F;h3&gt;
&lt;p&gt;这是比较难的，因为身体已经习惯了之前的睡眠，太根深蒂固了。你安排的那段睡眠时间，可能根本就没有睡意。试了几天之后，发现精神状态没有任何提升，工作时也有点迷迷糊糊，于是就放弃了。&lt;&#x2F;p&gt;
&lt;p&gt;这时就需要支撑下去的动力，比如以下几个&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;告诉自己刚开始几天是适应期，出现紊乱现象是正常的，一旦适应期过后，就会质的提升，我的人生将会焕发新的生机&lt;&#x2F;li&gt;
&lt;li&gt;相信自己不是一个轻易放弃的人&lt;&#x2F;li&gt;
&lt;li&gt;每次完成一阶段的睡眠后给自己一些奖励&lt;&#x2F;li&gt;
&lt;li&gt;睡不着时适当地催眠一下自己&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;就我个人的经验来说，我很少遇到过这种状态，每次醒来都感觉特清醒，尝到甜头之后，再坚持下去就容易了。其中也有几天确实睡不着，原因是我在想问题，这样大脑始终处于运转状态，自然就很难睡着了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-zhi-li&quot;&gt;自制力&lt;&#x2F;h3&gt;
&lt;p&gt;这是最难的，没有自制力的人终将一事无成，所以如果你自认为没有自制力还是不要尝试了。比如 19:30-21:00，可能以前这段时间正在网上泡着，或者玩游戏，或者干些其他的事，如果没有自制力，第一天可能会对自己说：玩一会儿再去睡，结果多玩了 10 分钟，睡的时候脑子里还在想着刚刚的画面，也没什么睡意。第二天：又多玩了半小时，然后也没怎么睡好。第三天：啊？21 点啦，得，今天不睡了。总之睡觉的优先级被降得很低，随便一件事都可以称为不睡的理由，过几天这种睡眠尝试就自动取消了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-shui&quot;&gt;小睡&lt;&#x2F;h3&gt;
&lt;p&gt;小睡一般是指 20-90 分钟内的睡眠，不要小瞧小睡的力量，一个小睡能减少 100 分钟的睡眠呢。也就是说，如果你之前睡 8 个小时，现在中午午睡 20 分钟，则晚上只需睡 6 个小时即可。当然小睡的质量要有保证。多项睡眠的终极形态就是小睡。小睡还有好多好处，如&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;更加清醒&lt;&#x2F;li&gt;
&lt;li&gt;做更睿智的选择&lt;&#x2F;li&gt;
&lt;li&gt;改善心情&lt;&#x2F;li&gt;
&lt;li&gt;提高记忆力&lt;&#x2F;li&gt;
&lt;li&gt;减压&lt;&#x2F;li&gt;
&lt;li&gt;提高睡眠质量&lt;&#x2F;li&gt;
&lt;li&gt;提高创造力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;diao-zheng-yin-shi&quot;&gt;调整饮食&lt;&#x2F;h3&gt;
&lt;p&gt;饮食也是个大问题，最好贯彻&amp;quot;早上要吃好，中午要吃饱，晚上要吃少&amp;quot;这个方针。因为我每天晚上回家，gf 都已经把饭菜准备好了，而且还很好吃，有时难免会吃多了点，结果晚上 19:30-21:00 这段时间肚子就比较难受，因为睡着后本来为消化食物而血流变丰富的消化系统（正是因为消化系统需要的血液多了，大脑的血液少了，人才会觉得困）血流量减少，并且神经不再兴奋，容易导致消化不良、积食等不良反应。所以晚上可以少吃一点，多吃蔬菜(容易消化)，宁可睡醒后再加个餐。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-lai-de-wen-ti&quot;&gt;带来的问题&lt;&#x2F;h3&gt;
&lt;p&gt;有得必有失，多项睡眠也会有负面效应，最明显的就是：影响正常的社交活动。&lt;a href=&quot;http:&#x2F;&#x2F;www.stevepavlina.com&quot;&gt;stevepavlina&lt;&#x2F;a&gt;曾经&amp;lt;a href=http:&#x2F;&#x2F;www.stevepavlina.com&#x2F;blog&#x2F;2005&#x2F;10&#x2F;polyphasic-sleep&#x2F;&amp;quot;&amp;quot;&amp;gt;尝试了3个月&lt;&#x2F;a&gt;，并且感觉非常好，如果再继续下去基本没有问题，但他最终还是选择了正常的作息时间，最大的原因就是与别人的作息时间冲突。如果晚上要与朋友出去，或者有朋友来串门，或者周末出去逛个街等等都会受到影响。如果我最终放弃了这种睡眠方法，也是因为这个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yan-shen&quot;&gt;延伸&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.stevepavlina.com&#x2F;blog&#x2F;2005&#x2F;10&#x2F;polyphasic-sleep&#x2F;&quot;&gt;stevepavlina:polyphasic sleep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.stevepavlina.com&#x2F;forums&#x2F;health-fitness&#x2F;1638-switching-biphasic-sleeping-start-here.html&quot;&gt;switching biphasic sleeping&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;download.cnet.com&#x2F;40-Sleep-Hacks-Geek-s-Guide-to-Optimizing-Sleep&#x2F;3000-2129_4-10864038.html&quot;&gt;40 Sleep Hacks: Geek&#x27;s Guide to Optimizing Sleep (强烈推荐) &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dustincurtis.com&#x2F;sleep.html&quot;&gt;how to hack your brain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lucidipedia.com&#x2F;&quot;&gt;lucid dream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;多项睡眠基本不会对身体造成什么影响，也确实能带来比较显著的效果，尝试一下是没有问题的&lt;&#x2F;li&gt;
&lt;li&gt;如果你对时间和精神状态没有更高的要求还是别折腾了&lt;&#x2F;li&gt;
&lt;li&gt;如果对自己的自制力不够自信，也别浪费时间了&lt;&#x2F;li&gt;
&lt;li&gt;会影响正常的社交活动&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>大型应用的javascript架构</title>
            <pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/javascript-arch/</link>
            <guid>https://limboy.me/posts/javascript-arch/</guid>
            <description>&lt;p&gt;目前很多网站基本没有明确的前端架构，大多是服务端渲染视图页，输出到浏览器，再配合一些 js，来进行交互。如果只是实现一些简单的效果，没有较复杂的逻辑，那么这种处理是合理的，尤其是有了 jQuery 之类的利器，js 代码写起来甚至有种随心所欲的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;但一旦网站要改版，或者随着网站的发展，逻辑变得越来越复杂，或者为了更好的用户体验，js 要承担更多的任务，这时如果维持现状不变，那 js 就会变得越来越臃肿，越来越难维护。&lt;&#x2F;p&gt;
&lt;p&gt;解决之道就是采用模块化编程，将页面分成多个模块，模块之间互相独立，通过发布&#x2F;订阅方式来进行模块间交互，从而使模块与模块解耦，也就是说移除一个模块不会对当前页面造成影响。&lt;&#x2F;p&gt;
&lt;p&gt;配合模板的话，可以让前端和后端程序员更高效地配合。前端只负责数据的显示与页面的交互，开发时，可以拟造数据，而不需要服务端程序。后端程序员也可以专注于提供更易用，稳定的接口，而不需要关心数据的展示。&lt;&#x2F;p&gt;
&lt;p&gt;yahoo 的&lt;a href=&quot;http:&#x2F;&#x2F;developer.yahoo.com&#x2F;yui&#x2F;theater&#x2F;video.php?v=zakas-architecture&quot;&gt;这个视频&lt;&#x2F;a&gt;详细地阐述了前端模块化编程，大致摘录如下：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;js-jia-gou-de-4-ge-zu-cheng-bu-fen&quot;&gt;js 架构的 4 个组成部分&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;模块(Modules)&lt;&#x2F;li&gt;
&lt;li&gt;沙箱(Sandbox)&lt;&#x2F;li&gt;
&lt;li&gt;应用(App Core)&lt;&#x2F;li&gt;
&lt;li&gt;类库(Base Lib)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mo-kuai-yi-qie-jie-mo-kuai&quot;&gt;模块(一切皆模块)&lt;&#x2F;h3&gt;
&lt;p&gt;模块就像孩子一样，他们需要遵守一些规则才能保证不会到处惹麻烦&lt;&#x2F;p&gt;
&lt;p&gt;模块必须在沙箱里，无论条件多么苛刻&lt;&#x2F;p&gt;
&lt;p&gt;模块不知道页面到底是怎样的，他们只知道沙箱&lt;&#x2F;p&gt;
&lt;p&gt;模块之间要解耦&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-de-gui-ze&quot;&gt;模块的规则&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;管好自己
** 只能调用自己的或沙箱的方法
** 不要访问不属于自己的 DOM 节点
** 不要访问非内置全局变量&lt;&#x2F;li&gt;
&lt;li&gt;先申请，再使用
** 你需要的任何东西，要向沙箱提出申请&lt;&#x2F;li&gt;
&lt;li&gt;不要把玩具放得到处都是
** 不要创建全局变量&lt;&#x2F;li&gt;
&lt;li&gt;不要和陌生人说话
** 不要直接引用其他模块&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;an-quan-sha-xiang&quot;&gt;安全沙箱&lt;&#x2F;h3&gt;
&lt;p&gt;沙箱要保证接口的一致性，模块调用时一定要有&lt;&#x2F;p&gt;
&lt;p&gt;模块只知道沙箱，其他的架构对模块而言是不存在的&lt;&#x2F;p&gt;
&lt;p&gt;沙箱就像一个安保员，知道哪些是模块可以调用的&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sha-xiang-de-zhi-ze&quot;&gt;沙箱的职责&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;一致性
** 接口一定要可靠&lt;&#x2F;li&gt;
&lt;li&gt;安全性
** 检测哪一部分是模块可以访问的&lt;&#x2F;li&gt;
&lt;li&gt;交互
** 将模块的请求发送到系统&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;多花些时间来设计沙箱接口，可以添加新方法，但不能移除，也不能修改已有方法&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-he-xin&quot;&gt;应用核心&lt;&#x2F;h3&gt;
&lt;p&gt;应用核心负责模块间的交互&lt;&#x2F;p&gt;
&lt;p&gt;应用核心通知一个模块何时该初始化，何时该注销&lt;&#x2F;p&gt;
&lt;p&gt;应用核心处理错误&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-he-xin-de-ren-wu&quot;&gt;应用核心的任务&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;管理模块的生存周期
** 通知一个模块何时该初始化，何时该注销&lt;&#x2F;li&gt;
&lt;li&gt;内部模块间的交互
** 让模块尽可能解耦&lt;&#x2F;li&gt;
&lt;li&gt;错误处理
** 检测，报告错误&lt;&#x2F;li&gt;
&lt;li&gt;可扩展
** 任何可扩展的东西都不会过时&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ji-ben-lei-ku&quot;&gt;基本类库&lt;&#x2F;h3&gt;
&lt;p&gt;理想状态下，只有应用核心知道使用了哪个类库&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-lei-ku-de-ren-wu&quot;&gt;基本类库的任务&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器兼容性&lt;&#x2F;li&gt;
&lt;li&gt;常用的工具
** 解析&#x2F;序列化 XML，JSON 等等
** 对象操作
** DOM 操作
** Ajax 操作&lt;&#x2F;li&gt;
&lt;li&gt;提供底层的可扩展性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shi-jian&quot;&gt;实践&lt;&#x2F;h3&gt;
&lt;p&gt;我没有全部按照上面说的来实现，而是借鉴了部分&lt;a href=&quot;http:&#x2F;&#x2F;dothanhlam.files.wordpress.com&#x2F;2009&#x2F;02&#x2F;puremvc-conceptual-diagram.jpg&quot;&gt;pureMVC 的思想&lt;&#x2F;a&gt;，这样似乎更简单些。&lt;&#x2F;p&gt;
&lt;p&gt;概述&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个模块对应页面的某一部分&lt;&#x2F;li&gt;
&lt;li&gt;模块提供了所有 Mediator 可以调用的方法&lt;&#x2F;li&gt;
&lt;li&gt;一个 Mediator 管理一个特定的模块&lt;&#x2F;li&gt;
&lt;li&gt;模块只被 Mediator 调用，模块甚至不知道 Mediator 的存在&lt;&#x2F;li&gt;
&lt;li&gt;Mediator 之间通过发布&#x2F;订阅的方式进行交互&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;js-arch&#x2F;&quot;&gt;demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-ji-lei-zhe-li-shi-yong-liao-john-resig-de-simple-javascript-inheritance&quot;&gt;模块基类(这里使用了 John Resig 的&lt;a href=&quot;http:&#x2F;&#x2F;ejohn.org&#x2F;blog&#x2F;simple-javascript-inheritance&#x2F;&quot;&gt;simple javascript inheritance&lt;&#x2F;a&gt;)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;el &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;el&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getTplData&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tplData&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;renderTpl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tplData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;使用了Mustache模板引擎
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Mustache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.to_html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lie-biao-mo-kuai&quot;&gt;列表模块&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Module 提供方法供Mediator调用
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$lis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$lis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.each&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.removeClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.addClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.addClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unhl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.removeClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前面说了模块就是准备好方法，让 Mediator 调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lie-biao-mediator&quot;&gt;列表 Mediator&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ListMediator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Mediator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 初始化Module
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;List({
&lt;&#x2F;span&gt;&lt;span&gt;      name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;list&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 绑定事件
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;click&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.preventDefault&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 调用Module方法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.hl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发布消息，所有监听该事件的方法将被触发
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 参数为object，方便以后添加键值对
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:click&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;          content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getTplData&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;].content,
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mouseover&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.hl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mouseout&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.unhl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取源数据，使用了$.proxy，创建特定的context
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;data.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.proxy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 调用Module的方法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.renderTpl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发布数据已载入消息
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:loaded&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以把模块想像成 Model，Mediator 想像成 Controller，这样就实现了高内聚，低耦合。每一个单元(模块+Mediator)都可以单独使用，也可以被移除，而不影响现有架构。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;js-arch&#x2F;&quot;&gt;demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;js-arch&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>软件构建设计</title>
            <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design/</link>
            <guid>https://limboy.me/posts/software-design/</guid>
            <description>&lt;p&gt;这是《代码大全 2》的软件设计篇章，花了两天时间啃下来的，不得不感慨讲得很细致很到位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-design-concepts&quot;&gt;Key Design Concepts&lt;&#x2F;h3&gt;
&lt;p&gt;Managing complexity is the most important technical topic in software development.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of all software-design techniques is to break acomplicated problem into simple pieces. The more independent the subsystems are, the more you make it safe to focus on one bit of complexity at a time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-characteristics&quot;&gt;design characteristics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimal complexity
&lt;ul&gt;
&lt;li&gt;Avoid making &amp;quot;clever&amp;quot; designs. clever designs are usually hard to understand. Instead make &amp;quot;simple&amp;quot; and &amp;quot;easy-to-understand&amp;quot; designs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ease of maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Loose coupling&lt;&#x2F;li&gt;
&lt;li&gt;Extensibility&lt;&#x2F;li&gt;
&lt;li&gt;Reusability&lt;&#x2F;li&gt;
&lt;li&gt;High fan-in
&lt;ul&gt;
&lt;li&gt;having a high number of classes that use a given class. High fan-in implies that a system has been designed to make good use of utility classes at the lower levels in the system.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Low-to-medium fan-outside
&lt;ul&gt;
&lt;li&gt;having a given class use a low-to-medium number of other classes (&amp;lt;7)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Portability&lt;&#x2F;li&gt;
&lt;li&gt;Leanness
&lt;ul&gt;
&lt;li&gt;designing the system so that it has no extra parts. a book is finished not when nothing more can be added but when nothing more can be taken away.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stratification
&lt;ul&gt;
&lt;li&gt;trying to keep the levels of decomposition stratified so that you can view the system at any single level and get a consistent view.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Standard techniques&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-steps-in-designing-with-objects&quot;&gt;The steps in designing with objects&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Identify the objects and their attributes (methods and data)&lt;&#x2F;li&gt;
&lt;li&gt;Determine what can be done to each object&lt;&#x2F;li&gt;
&lt;li&gt;Determine what each object is allowed to do to other objects&lt;&#x2F;li&gt;
&lt;li&gt;Determine the parts of each object that will be visible to other objects-which parts will be public and which will be private.&lt;&#x2F;li&gt;
&lt;li&gt;Define each object&#x27;s public interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;form-consistent-abstractions&quot;&gt;Form Consistent Abstractions&lt;&#x2F;h3&gt;
&lt;p&gt;Abstraction is the ability to engage with a concept while safely ignoring some of its details - handling different details at different levels.&lt;&#x2F;p&gt;
&lt;p&gt;A good class interface is an abstraction that allows you to focus on the interface without needing to worry about the internal workings of the class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-building-blocks-heuristics&quot;&gt;Design Building Blocks: Heuristics&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;encapsulate-implementation-details&quot;&gt;Encapsulate Implementation Details&lt;&#x2F;h3&gt;
&lt;p&gt;Encapsulate picks up where abstraction leaves off. you aren&#x27;t allowed to look at an object at any level of detail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inherit-when-inheritance-simplifies-the-design&quot;&gt;Inherit - When Inheritance Simplifies the Design&lt;&#x2F;h3&gt;
&lt;p&gt;Inheritance simplifies programming because you write a general routine to handle anything that depends on a door&#x27;s general properties and then write specific routines to handle specific operations on specific kinds of doors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hide-secrets-information-hiding&quot;&gt;Hide Secrets (Information Hiding)&lt;&#x2F;h3&gt;
&lt;p&gt;Information hiding is part of the foundation of both structured design and object-oriented design. In structured design, the notion of &amp;quot;black boxes&amp;quot; comes from information hiding. In object-oriented design, it gives rise to the concepts of encapsulation and modularity and it is associated with the concept of abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;One key task in designing a class is deciding which features should be known outside the class and which should remain secret.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identify-areas-likey-to-change&quot;&gt;Identify Areas Likey to Change&lt;&#x2F;h3&gt;
&lt;p&gt;Accommodating changes is one of the most chanllenging aspects of good program design. The goal is to isolate unstable areas so that the effect of a change will be limited to one routine, class, or package.&lt;&#x2F;p&gt;
&lt;p&gt;areas that are likely to change:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Business rules&lt;&#x2F;li&gt;
&lt;li&gt;Hardware dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Input and output&lt;&#x2F;li&gt;
&lt;li&gt;Nonstandard language features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keep-coupling-loose&quot;&gt;Keep Coupling Loose&lt;&#x2F;h3&gt;
&lt;p&gt;Coupling describes how tightly a class or routing is related to other classes or routines. The goal is to create classes and routines with small, direct, visible and flexible relations to other classes and routines.&lt;&#x2F;p&gt;
&lt;p&gt;Classes and routines are first and foremost intellectual tools for reducing complexity. If they&#x27;re not making your job simpler, they&#x27;re not doing thier jobs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;look-for-common-design-patterns&quot;&gt;Look for Common Design Patterns&lt;&#x2F;h3&gt;
&lt;p&gt;Popular Design Patterns&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract Factory&lt;&#x2F;li&gt;
&lt;li&gt;Adapter&lt;&#x2F;li&gt;
&lt;li&gt;Bridge&lt;&#x2F;li&gt;
&lt;li&gt;Composite&lt;&#x2F;li&gt;
&lt;li&gt;Decorator&lt;&#x2F;li&gt;
&lt;li&gt;Facade&lt;&#x2F;li&gt;
&lt;li&gt;Factory Method&lt;&#x2F;li&gt;
&lt;li&gt;Iterator&lt;&#x2F;li&gt;
&lt;li&gt;Observer&lt;&#x2F;li&gt;
&lt;li&gt;Singleton&lt;&#x2F;li&gt;
&lt;li&gt;Strategy&lt;&#x2F;li&gt;
&lt;li&gt;Template Method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-practices&quot;&gt;Design Practices&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;iterate&quot;&gt;Iterate&lt;&#x2F;h3&gt;
&lt;p&gt;Design is an iterative process. You don&#x27;t usually go from point A only to point B; you go from point A to point B and back to point A.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;divide-and-conquer&quot;&gt;Divide and Conquer&lt;&#x2F;h3&gt;
&lt;p&gt;no one&#x27;s skill is big enough to contain all the details of a complex program, and that applies just as well to design. Divide the program into different areas of concern, and then tackle each of those area individually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;top-down-and-bottom-up-design-approaches&quot;&gt;Top-Down and Bottom-Up Design Approaches&lt;&#x2F;h3&gt;
&lt;p&gt;Top-down design begins at a high level of abstraction. You define base classes or other nonspecific design elements. As you develop the design, you increase the level of detail, identifying derived classes, collaborating classes, and other detailed design elements.&lt;&#x2F;p&gt;
&lt;p&gt;Bottom-up design starts with specifics and works toward genealities. It typically begins by identifying concrete objects and then generalizes aggregations of objects and base classes from those specifics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;experimental-prototyping&quot;&gt;Experimental Prototyping&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;collaborative-design&quot;&gt;Collaborative Design&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;capturing-your-design-work&quot;&gt;Capturing Your Design Work&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Insert design documentation into the code itself&lt;&#x2F;li&gt;
&lt;li&gt;Capture design discussions and decisions on a wiki&lt;&#x2F;li&gt;
&lt;li&gt;Write e-mail summaries&lt;&#x2F;li&gt;
&lt;li&gt;Use a digital camera&lt;&#x2F;li&gt;
&lt;li&gt;Save design flip charts&lt;&#x2F;li&gt;
&lt;li&gt;Use CRC(Class, Responsibility, Collaborator) cards&lt;&#x2F;li&gt;
&lt;li&gt;Create UML diagrams at appropriate levels of detail&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>写了一款个人知识管理(PKM)工具</title>
            <pubDate>Sun, 14 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pkm/</link>
            <guid>https://limboy.me/posts/pkm/</guid>
            <description>&lt;p&gt;看了不少知识管理方面的文章，如&amp;quot;&lt;a href=&#x27;http:&#x2F;&#x2F;www.williamlong.info&#x2F;archives&#x2F;2176.html&#x27;&gt;月光博客——我的个人知识管理工具软件&lt;&#x2F;a&gt;&amp;quot;，&amp;quot;&lt;a href=&#x27;http:&#x2F;&#x2F;www.zreading.cn&#x2F;archives&#x2F;1861.html&#x27;&gt;左岸读书——个人知识管理&lt;&#x2F;a&gt;&amp;quot;，里面提到了一些工具，如思维导图、OneNote、Vimwiki 等等，都有各自的特点。但都不能做到：举一反三，将知识通过标签串联起来。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;标签就好像网的结点。&lt;&#x2F;b&gt;知识点之间不是独立的，它们的连接方式就是标签。如《追风筝的人》这本书和《盗梦空间》这部电影看起来没有什么交集，很难联系到一块，其实不然，有一个标签就可以：盗窃。而《盗梦空间》又和&amp;quot;梦&amp;quot;有关，所以又与《穆赫兰道》联系到了一起。这样就很少会有散落的知识点，而知识点一旦被孤立，就很难再被想起来，时间一长就很自然地把它忘了。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;左边的标签云是所有知识点的标签，按数量从多到少排列。&lt;&#x2F;li&gt;
&lt;li&gt;点击一个标签会列出该标签关联的所有知识点。&lt;&#x2F;li&gt;
&lt;li&gt;点击标题会显示文章内容，同时会列出该文章的所有标签，并且列出这些标签关联的文章。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;源码下载：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;pkm&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;pkm&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说REST</title>
            <pubDate>Sun, 14 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/rest/</link>
            <guid>https://limboy.me/posts/rest/</guid>
            <description>&lt;h3 id=&quot;rest-jiu-jing-shi-shi-yao-dong-dong&quot;&gt;REST 究竟是什么东东&lt;&#x2F;h3&gt;
&lt;p&gt;REST(Representational State Transfer)是 Roy Fielding 在他的博士论文中提出来的。他也是 HTTP 协议的制定者之一。REST 是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-de-te-xing&quot;&gt;REST 的特性&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;c-s-jia-gou&quot;&gt;C&#x2F;S 架构&lt;&#x2F;h3&gt;
&lt;p&gt;客户端主动向服务端发起请求，服务端收到请求后，返回格式化的结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-zhuang-tai&quot;&gt;无状态&lt;&#x2F;h3&gt;
&lt;p&gt;每个请求必须包含服务端所需的所有信息，不要指望从服务端&amp;quot;借&amp;quot;点数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-kuo-zhan&quot;&gt;易扩展&lt;&#x2F;h3&gt;
&lt;p&gt;如果因为业务需要，要新添加几个资源，可以横向扩展，而不需要改变原来的结构。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-yi-qing-qiu-lei-xing&quot;&gt;统一请求类型&lt;&#x2F;h3&gt;
&lt;p&gt;GET&#x2F;POST&#x2F;PUT&#x2F;DELETE，实际中以 GET 和 POST 用的最多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-yuan&quot;&gt;资源&lt;&#x2F;h3&gt;
&lt;p&gt;服务端要提供资源供客户端调用，每个资源都有独立的 URL。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-liang-ji&quot;&gt;轻量级&lt;&#x2F;h3&gt;
&lt;p&gt;使用标准的 http 请求，各个语言几乎都支持，所以由丰富的客户端。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fang-bian-tian-jia-zhong-jian-ceng&quot;&gt;方便添加中间层&lt;&#x2F;h3&gt;
&lt;p&gt;如代理&#x2F;集群&#x2F;缓存等等，对客户端而言它们是透明的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fang-bian-ce-shi&quot;&gt;方便测试&lt;&#x2F;h3&gt;
&lt;p&gt;不牵扯具体的业务逻辑，而且格式化的数据很容易解析&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;DEMO&lt;&#x2F;h3&gt;
&lt;p&gt;以 twitter 为例(请自动切换到翻|墙模式)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huo-qu-xin-xi-get&quot;&gt;获取信息(GET)&lt;&#x2F;h3&gt;
&lt;p&gt;如果要获得某条 tweet 的信息，直接访问 api 即可，如 http:&#x2F;&#x2F;api.twitter.com&#x2F;1&#x2F;statuses&#x2F;show&#x2F;3657615682838528.json，将会返回如下结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;geo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;created_at&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Sun Nov 14 03:56:58 +0000 2010&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;in_reply_to_status_id_str&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;profile_image_url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;a2.twimg.com&#x2F;profile_images&#x2F;259632038&#x2F;DuanziLogoBig_normal.jpg
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;官网：www.JokeCook.com | When that happens.当下那些事儿 | 欢迎回复@duanzi 投稿。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;truncated&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3657615682838528
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;in_reply_to_user_id_str&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Via @ruoxiaosu: 有时候吧，取消对一个人的关注，...via琦殿&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;省略了部分结果，可以看到是一个包含了很多信息的 json，想怎样展现那就是客户端的事情了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ti-jiao-xin-xi-post&quot;&gt;提交信息(POST)&lt;&#x2F;h3&gt;
&lt;p&gt;这个就要复杂一点了，因为涉及到用户验证，前面说过了，REST 是无状态的。也就是说，服务端不知道你到底有没有登录，除非出示证件。是的，每次请求都得出示。服务端验证通过后，查询到用户 id，保存 POST 数据，返回提交结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;1&#x2F;statuses&#x2F;update.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; api.twitter.com
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;blahblah...&amp;amp;oauth_consumer_key=GDdmIQH6jhtm...&amp;amp;oauth_nonce=oElnnMTQIZvqvlfXM56aB...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到除了 status，还有 oauth_consumer_key 和 oauth_nonce(还有其他 oauth 相关的参数)，这些就是用来进行身份验证的，如果验证通过了，tweet 就会被正常发布，同时返回该 tweet 的相关信息。&lt;&#x2F;p&gt;
&lt;p&gt;顺便说说用户验证，一般有三种验证方式：Basic Auth&#x2F;Digest Auth&#x2F;OAuth(XAuth)，就安全性来说 OAuth 是最高的，用户无须输入密码，但部署起来难度也最大。Basic Auth 安全性最低，部署起来也最方便，用户只需提供用户名和密码即可，但如果第三方记录了这些信息，那就... Digest Auth 的安全性和部署成本介于两者之间。&lt;&#x2F;p&gt;
&lt;p&gt;其他更新内容和删除内容也类似，都是先进行用户验证，再进行权限验证，最后返回执行结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-de-yuan-ze&quot;&gt;REST 的原则&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;chou-xiang-chu-suo-you-ke-gong-diao-yong-de-zi-yuan-yue-jing-que-yue-hao&quot;&gt;抽象出所有可供调用的资源，越精确越好&lt;&#x2F;h3&gt;
&lt;p&gt;如果一个事物可以抽象成资源，那它就是 RESTful，可以通过 URL 进行调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-mei-ge-zi-yuan-ti-gong-yi-ge-url-qie-zi-yuan-ying-gai-shi-ming-ci-er-bu-shi-dong-ci&quot;&gt;为每个资源提供一个 URL，且资源应该是名词而不是动词&lt;&#x2F;h3&gt;
&lt;p&gt;如，下面这个 url 是不建议采用的&lt;&#x2F;p&gt;
&lt;p&gt;bq. http:&#x2F;&#x2F;www.twitter.com&#x2F;getUser&#x2F;10&lt;&#x2F;p&gt;
&lt;p&gt;应该改为这样&lt;&#x2F;p&gt;
&lt;p&gt;bq. http:&#x2F;&#x2F;www.twitter.com&#x2F;user&#x2F;10&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiang-zi-yuan-fen-lei&quot;&gt;将资源分类&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Tweets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;show&#x2F;:id
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;update
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;destroy&#x2F;:id
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Timeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;public_timeline
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;suo-you-get-qing-qiu-du-bu-ying-gai-ying-xiang-shu-ju-ku-nei-rong&quot;&gt;所有 GET 请求都不应该影响数据库内容&lt;&#x2F;h3&gt;
&lt;p&gt;GET 顾名思义，就是用来获取某个资源，如果要修改，则应该执行 POST&#x2F;PUT&#x2F;DELETE。千万不要因为偷懒，而给 GET 留下后门。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fan-hui-jie-guo-bu-yi-ding-shi-dan-du-de-nei-rong-ke-yi-bao-han-xiang-guan-lian-jie&quot;&gt;返回结果不一定是单独的内容，可以包含相关链接&lt;&#x2F;h3&gt;
&lt;p&gt;有时候，这是一种双输的局面：用户不想要那么多的数据，服务端又多了不必要的运算。只要包含可以获取信息的链接即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-que-fan-hui-ge-shi&quot;&gt;明确返回格式&lt;&#x2F;h3&gt;
&lt;p&gt;如 json&#x2F;xml&#x2F;html 等等，不过目前来看 json 基本是主流。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-shi-yong-rest&quot;&gt;如何使用 REST&lt;&#x2F;h3&gt;
&lt;p&gt;REST 不仅仅是一种崭新的架构，它带来的更是一种全新的 Web 开发过程中的思维方式：通过 URL 来设计系统结构。在 REST 中，所有的 URL 都对应着资源，只要 URL 的设计是良好的，那么其呈现的系统结构也就是良好的。这点和 TDD (Test Driven Development)很相似，他是通过测试用例来设计系统的接口，每一个测试用例都表示一系列用户的需求。开发人员不应该一开始就编写功能，而是先细分资源。对资源抽象地越精确，对 REST 的应用来说就更好，这个和传统的 MVC 中基于 Action 的思想差别很大。设计良好的 URL， 不但对于开发人员来说可以更明确的认识系统结构，对使用者来说也方便记忆和识别资源，因为 URL 足够简单和有意义。&lt;&#x2F;p&gt;
&lt;p&gt;REST 对开发者友好。Amazon 和 Ebay 的 service 结果显示：60%的用户使用 REST。提供 REST 服务，开发者可以很容易通过各种语言各种平台来开发一个 app，手机&#x2F;ipad&#x2F;网站&#x2F;cli 等等，这也是 web2.0 的一大特征，想想如果 flickr&#x2F;twitter&#x2F;delicious 没有开放简洁易用的 api，其火爆程度肯定大打折扣。&lt;&#x2F;p&gt;
&lt;p&gt;使用 REST 还有一个好处是，可以避免 Controller 直接操作数据。假如是 MVC 模式，Controller 很可能途省事，直接把 ORM 拿过来就开始进行数据操作了，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;actionAdd&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;title&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有一天保存的操作改了，如加了一个 status 字段，那就很糟糕了。&lt;&#x2F;p&gt;
&lt;p&gt;实际使用中，可能会发现不是所有的需求都可以抽象为资源，这时可以混用 MVC&#x2F;MVVM。尽可能地抽象成资源，对其他需求使用 MVC&#x2F;MVVM 开发。&lt;&#x2F;p&gt;
&lt;p&gt;目前已经有&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_State_Transfer&quot;&gt;不少&lt;&#x2F;a&gt;基于&#x2F;支持 REST 的框架，有兴趣的话不妨尝试一下。也可以看一下&lt;a href=&quot;http:&#x2F;&#x2F;www.peej.co.uk&#x2F;articles&#x2F;rmr-architecture.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;REST 和 MVC 的关系就好像 Div 和 Table 的关系。在 web 标准没推广前，都是使用 Table 布局，Table 原本是用来做数据展示的，不知是哪一位天才发现对 Table 进行各种改造后，可以用作前端展示，于是就这么流传开了。&lt;&#x2F;li&gt;
&lt;li&gt;REST 是一种架构风格，不是标准。但使用了很多标准：http&#x2F;url&#x2F;mime 等等。&lt;&#x2F;li&gt;
&lt;li&gt;REST 概念从提出到现在已经有 10 年了，越来越趋于成熟。它是为 http 而生的，而 MVC 最开始是用来开发桌面软件的。&lt;&#x2F;li&gt;
&lt;li&gt;如果你的网站有提供 API 的打算，推荐使用 REST 架构，开始可能会麻烦一点，但将来会发现这些付出是值得的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>What I Wish I Knew When I Was 20</title>
            <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/what-i-wish-i-knew-when-i-was-20/</link>
            <guid>https://limboy.me/posts/what-i-wish-i-knew-when-i-was-20/</guid>
            <description>&lt;p&gt;周末抽空把&amp;quot;What I Wish I Knew When I Was 20&amp;quot;大致看了一遍。因为是英文模糊版，所以稍微有点吃力。&lt;&#x2F;p&gt;
&lt;p&gt;bq. 《真希望我 20 几岁就知道的事》讲述蒂娜教授 17 岁的儿子即将进入大学，她意识到自己没能教给儿子足够的知识和技巧融入这个社会，取得成功，所以她回忆了自己 20 岁时想了解的事情——那些可以避免弯路和失败的宝贵经验。她从念神经科学的学生，到管理咨询行业的先锋，到斯坦福管理风险投资和创业项目的主管，职业经历丰富，有非常多可以分享和教授的精彩内容。 她写出了自己半生的职业实践和开战励志课程积累的经验，列出清单，举出大量的“创造性思维”的实例，给了自己的孩子一堂含金量最高的课：创意决定人生，突破规则，才能在千万人中脱颖而出！现在她举出为斯坦福大学、西点军校的学生讲解这门课程，帮助他们更顺利开展职场之路，掘得人生第一桶金。&lt;&#x2F;p&gt;
&lt;p&gt;本书的核心思想：突破传统框架的限制，细心发现，另辟蹊径，总能找到一条出路。对于各行各业想要有所作为的人多少都会有帮助，简单摘录了几段。翻译不到位还请见谅:)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;look at the world around them with fresh eyes, identifying opportunities in their own backyard, challenge tradition assumptions, in doing so generate enormous value from practilly nothing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;细心观察周围的世界，找出潜在的机会，挑战传统的方法，通过这种方式可以让你获得宝贵的财富，即使之前身无分文。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;opportunities are aboundant. at any place and time you can look around and identify problems that need solving&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;机会是很多的，任何时间和地点，只要细心观察，总会找到需要解决的问题。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;regardless of the size of the problem, there are usually creative ways to use the resources already at your disposal to solve them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;无论问题的大小，总是可以利用有限的资源，通过创新的方法来解决。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;an entrepreneur is someone who is always on the lookout for problems that can be turned into opportunities and finds creative ways to leverage limited resources to reach their goals.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;一个企业家总是尽最大努力将问题转变成机会，并且通过创新的途径和有限的资源去达成目标。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we often frame problems too tightly, and don&#x27;t step back and look at the problem more broadly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们总是会被问题本身框住，而不会后退一步，从更远的角度去看待问题。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we strive to create &amp;quot;T-Shaped people&amp;quot;, those with a depth of knowledge in at least one discipline and a breadth of knowledge about innovation and entrepreneurship that allows them to work effectively with professionals in other disciplines to bring their ideas to life. No matter what their role, having an entrepreneurial mind-set is key to solving problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们致力于培养&amp;quot;T 型&amp;quot;人才，那些至少精通一门领域，并且对其他领域也有独到的理解，有企业家精神，可以与其他领域的专家高效合作，然后把想法付诸实践。无论他们是什么职位，什么角色，企业家思想是解决问题的关键。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the key to success is the ability to extract the lessons out of each of these experiences and to move on with that new knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;成功的关键是从失败中吸取教训的能力，同时把这宝贵的经验运用到下一次的实践中。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we aren&#x27;t taught to embrace problems. we are taught that problems are to be avoided, or something to complain about.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;没有人教我们享受问题。我们总是被教导要避免问题，或者时不时地抱怨一下。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we can challenge ourselves every single day. that is, we can choose to view the world through different lenses - lenses that allow us to see problems in a new light. the more we take on problems, the more confident and proficient we become at solving them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们每天都可以挑战自己。我们可以换一个角度看待这个世界，看到这个世界的问题。越是频繁地与问题打交道，就越有搞定问题的信心。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;if we clearly define a problem, the solution will logically present itself.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;如果我们能很清晰地定义一个问题，解决方法往往也会一跃而出。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;interstingly, in many cases those who are on the front lines are so used to the problems they experience every day that they don&#x27;t even seen them, or can&#x27;t imagine radical approaches to solving them. (problem blindness)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;有趣的是，很多情况下，那些天天与问题打交道的人，会对问题熟视无睹，或者没有一个有效的解决方法。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;assumptions are sometimes so integrated into our view of the world that it&#x27;s hard to see them. however, with a little practice, it becomes a useful to look at your options in fresh light.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;有时&amp;quot;下意识&amp;quot;会深入到生活的每个角落，以致我们完全对其忽视。但是，只要稍加练习，就会从新的角度去看待它们。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;problems are aboundant, just waiting for those willing to find inventive solutions. this takes acute observation, coordinated teamwork, the ability to execute a plan, a willingness to learn from failure, and creative problem solving. but the first requirement is having the attitude that problems can be solved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;问题是无穷无尽的，只是在等待那些愿意找到解决方法的人。这需要细致的观察，团队配合，计划的执行能力，愿意从失败中吸取教训的心态，和创新的问题解决方式。但首先要具备的心态是：问题总是会被解决的。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we define ourselves by our professions, our income, where we live, the car we drive, our education, and even by our horoscope. each definition locks us into specific assumptions about who we are and what we can do. we always make our own prisons, with rules that we wach create for ourselves, locking us into specific roles and out of an endless array of possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们通过职业、收入、住所、汽车、受教育程度、甚至星座来定义自己。每种定义都限制了自己所能做的事。我们总是把自己关在自己建造的监狱里，遵守着自己给自己制定的规则，把自己限制为某个角色，于是我们失去了更多的可能性。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;if others think your ideas are crazy, then you must on the right track.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;如果别人认为你的想法很疯狂，那你基本上就在正确的路上了。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;one of the biggest obstacles to taking on &amp;quot;impossible tasks&amp;quot; is that others are often quick to tell you they can&#x27;t be accomplished. once you decide to take it on, it is equally hard to break out of traditional approaches to solving it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;完成那些&amp;quot;不可能的任务&amp;quot;最大的障碍之一是，别人往往很快就告诉你，你做不来的。一旦你决定去做，要不按常理出牌也一样困难。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;one of the most important rules to brainstorming is to expend upon the ideas of others. with this approache, at the end of good brainstorming session, multiple people feel that they created or contributed to the best ideas to come out of the session.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;头脑风暴最重要的一点是，扩展别人的想法。这样，一个有效的头脑风暴，大部分人都会觉得最终的想法多多少少和自己有关系。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;rules are often meant to be broken: don&#x27;t ask for permission, but beg for forgiveness.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;规则常常是用来打破的：不要请求授权，但求事后原谅。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;there are often creative ways to work around the rules, to jump over the traditional hurdles, and to get to your goal by taking a side route.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;总是会有创新的方法来搞定规则，放弃那拥挤的主路，通过路边小道来达到你的目标。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the world is divided into people who wait for others to give them permission to do the things they want to do and people who grant themselves permission. some look inside themselves for motivation and others wait to be pushed forward by outside forces.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;这世界上有这么几拨人：一拨等待别人授权去做事想做的事，另一拨给自己授权。有些人挖掘自身的激情，有些人寻求外部的压力。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)Git开发管理之道</title>
            <pubDate>Sat, 30 Oct 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/a-successful-git-branch/</link>
            <guid>https://limboy.me/posts/a-successful-git-branch/</guid>
            <description>&lt;p&gt;Git 的强大是众所周知的，本文要分享的是关于&amp;quot;使用 Git 的分支和合并功能来进行版本管理的开发模型&amp;quot;。以下是译文，&lt;a href=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;posts&#x2F;a-successful-git-branching-model&#x2F;&quot;&gt;原文地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这篇文章我想介绍一下一年前就提到过的我所有项目(工作&#x2F;私有)都在使用的开发模式，经过事实验证，确实非常可行。很早就想写了，一直没腾出时间。我不会涉及项目的细节，只是谈谈分支的使用策略和发布管理。&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;git-model@2x.png&quot; &#x2F;&gt;
&lt;p&gt;上图是使用 Git 这个版本控制工具来管理所有源码的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-shi-yong-git&quot;&gt;为什么使用 Git&lt;&#x2F;h3&gt;
&lt;p&gt;如果要看详细的 Git 与集中式源码管理工具的优势与劣势，可以参见&lt;a href=&quot;http:&#x2F;&#x2F;git.or.cz&#x2F;gitwiki&#x2F;GitSvnComparsion&quot;&gt;这篇文章&lt;&#x2F;a&gt;，那里有很多口水仗。作为一个开发人员，所有的源码管理工具中，我最喜欢 Git。Git 从根本上改变了开发人员对分支和合并的使用，传统的 CVS&#x2F;SVN，分支和合并都是高级话题，而且使用起来稍显麻烦，隔一段时间才会用一次。但是有了 Git，这些操作就成了家常便饭。&lt;&#x2F;p&gt;
&lt;p&gt;由于使用简单，方便重复操作，分支和合并不再是让人望而生畏的操作，版本管理工具应该尽可能地对分支&#x2F;合并提供最好的支持。&lt;&#x2F;p&gt;
&lt;p&gt;工具谈得差不多了，回到开发上。我待会要讲到的模型其实是一些每个开发人员都应该遵守的步骤，如果想管理好软件的开发流程的话。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-bu-shi-dan-ji-zhong-hua&quot;&gt;分布式但集中化&lt;&#x2F;h3&gt;
&lt;p&gt;我们要使用的仓库是一个&amp;quot;中心库&amp;quot;，当然这个中心库只是被认为是这样(因为 Git 是分布式的，从技术层面上来说是没有中心库的)，我们将把这个仓库叫做&amp;quot;origin&amp;quot;，因为 Git 用户都熟悉这个名字。&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;centr-decentr@2x.png&quot; &#x2F;&gt;
&lt;p&gt;每个开发者 pull 和 push 到 origin，但除了中心化的 push-pull 关系外，每个开发者还可以从其他开发者那 pull changes。比如说，对于一个比较大的新特性，在把代码提交到 origin 之前，很可能会安排 2 个或多个开发者。上图中有几个小团队：Alice 和 Bob，Alice 和 David，Clair 和 David。&lt;&#x2F;p&gt;
&lt;p&gt;从技术角度来说，其实就是 Alice 定义了一个叫 Bob 的 Git remote，指向到 Bob 的仓库。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;main-fen-zhi&quot;&gt;main 分支&lt;&#x2F;h3&gt;
&lt;p&gt;中心仓库有两个分支：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;master&lt;&#x2F;li&gt;
&lt;li&gt;develop&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;origin 上的 master 分支，Git 用户应该很熟悉，跟 master 并行的有一个 develop 分支&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;main-branches@2x.png&quot; &#x2F;&gt;
&lt;p&gt;我们把 origin&#x2F;master 作为主要分支，源码的 HEAD 总是表示 production-ready(可随时部署)状态。而 origin&#x2F;develop 上的代码是为下一次的代码发布准备的。每日构建也是基于此分支。&lt;&#x2F;p&gt;
&lt;p&gt;当 develop 分支达到了一个稳定状态并准备发布时，所有的改变都要合并到 master 分支，并标上版本号。如何实现的下面细说。&lt;&#x2F;p&gt;
&lt;p&gt;这样每次与 master 合并都会有新的部署发布。这点可以自动化，如使用 Git hook 脚本来实现自动部署代码到线上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-chi-supporting-fen-zhi&quot;&gt;支持(supporting)分支&lt;&#x2F;h3&gt;
&lt;p&gt;我们的开发模型使用了一些支持分支放在 master 和 develop 分支的旁边，方便开发小组之间的并行开发。不像 main 分支，这些分支是有时间限制的，因为他们最终都会被移除。&lt;&#x2F;p&gt;
&lt;p&gt;我们会使用到的不同的分支&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Feature branches&lt;&#x2F;li&gt;
&lt;li&gt;Release branches&lt;&#x2F;li&gt;
&lt;li&gt;Hotfix branches&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;每个分支都有各自的作用，并且有严格的规定，如：只能从哪个分支上去新开分支，只能合并到那个分支。这个待会细说。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feature-branches&quot;&gt;Feature branches&lt;&#x2F;h3&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;fb@2x.png&quot; &#x2F;&gt;
&lt;p&gt;继承分支: develop
合并分支：develop
命名规范：除了 master,develop,release-&lt;em&gt;,hotfix-&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Feature branches 是用来开发新特性的(短期，远期都可以)。当开始开发新特性时，很可能不知道这个特性会出现在哪个目标版本。一旦开发完成就可以合并到 develop，当然如果开发失败，就可以抛弃。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuang-jian-yi-ge-feature-branch&quot;&gt;创建一个 Feature branch&lt;&#x2F;h3&gt;
&lt;p&gt;当要创建一个新特性时，从 develop 分支上再进行分支&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; myfeature develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to a new branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;myfeature&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新特性完成时，可以合并到 develop&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;develop&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --no-ff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; myfeature
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Updating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ea1b82a..05e9557
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; of changes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; myfeature
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Deleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; branch myfeature (was 05e9557&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside class=&quot;info&quot; &gt;
  --no-ff (译者注：no fast foward)标签，使得每一次的合并都创建一个新的 commit 记录。即使这个 commit 只是 fast-foward，这样可以避免丢失信息
&lt;&#x2F;aside&gt;&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;merge-without-ff@2x.png&quot; &#x2F;&gt;
&lt;p&gt;不幸的是，我没有找到让--no-ff 成为 commit 默认参数的方法(译者注：修改.consolerc?)，但确实应该提供一个方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;release-branch&quot;&gt;Release branch&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;继承分支: develop
&lt;&#x2F;span&gt;&lt;span&gt;合并分支：develop 和 master
&lt;&#x2F;span&gt;&lt;span&gt;命名规范：release-\*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Release branch 是为新的 production release 准备的(译者注：相当于 RC 版)，可以有一些小的 bug，并为发布准备一些元数据(版本号，构建日期等等)。把所有的这些工作都放到 Release branch，develop branch 就能更清晰地知道下一个版本要开发哪些特性。&lt;&#x2F;p&gt;
&lt;p&gt;从 develop 分支合并到 release 分支的关键因素是:develop 分支达到了 release 分支所要求的状态。至少所有针对该 release 的特性要被合并。至于那些将来会有的特性可以先放一放。然后就是为接下来即将要发布的版本分配一个版本号。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuang-jian-yi-ge-release-branch&quot;&gt;创建一个 Release branch&lt;&#x2F;h3&gt;
&lt;p&gt;Release branch 是通过 develop 分支而创建。举个例子，假如 1.1.5 是当前的 production release，然后会有一个比较大的版本发布。develop 的状态已经可以发布版本了，经过商榷后，决定发布为 1.2 版本(而不是 1.1.6 或 2.0)，所以我们创建一个 release 分支，并给这个分支一个新的版本号&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release-1.2 develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to a new branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;release-1.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; .&#x2F;bump-version.sh 1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; modified successfully, version bumped to 1.2.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Bumped version number to 1.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[release-1.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 74d9424] Bumped version number to 1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; files changed, 1 insertions(+&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1 deletions(-&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个新分支可能会存在一定的时间，直到可以被合并到 production branch。这段时间内，bug 修补可以在这个分支上进行(而不是 develop 分支)。添加新特性(尤其比较大的)是不允许的。最后还是要被合并到 develop，然后继续在 develop 分支上开发，直到下一个版本。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wan-cheng-yi-ge-release-branch&quot;&gt;完成一个 release branch&lt;&#x2F;h3&gt;
&lt;p&gt;当 release branch 已经准备就绪，需要做几件事。首先，release 分支被合并到 master 分支上(每一个提交到 master 上的 commit 都是一个新版本，切记)。然后 master 上的 commit 都要添加 tag，方便将来查看和回滚。最后 release 上所做的修改必须合并到 develop 分支上，保证 bug 已被修补。&lt;&#x2F;p&gt;
&lt;p&gt;前两个步骤：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;master&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --no-ff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release-1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; made by recursive.
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; of changes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了把 release 上的改变保存到 develop，我们需要合并到 develop&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;develop&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --no-ff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release-1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; made by recursive.
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; of changes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个步骤可能会导致冲突，如果这样的话，解决冲突，然后再提交。&lt;&#x2F;p&gt;
&lt;p&gt;现在一切都完成了，可以把 release branch 干掉了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release-1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Deleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; branch release-1.2 (was ff452fe&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hotfix-branch&quot;&gt;Hotfix branch&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;继承分支: master
&lt;&#x2F;span&gt;&lt;span&gt;合并分支：develop 和 master
&lt;&#x2F;span&gt;&lt;span&gt;命名规范：hotfix-\*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hotfix branch 和 Release branch 有几分相似，都是为了新的 production release 而准备的。比如运行过程中发现了 bug，就必须快速解决，这时就可以创建一个 Hotfix branch，解决完后合并到 master 分支上。好处是开发人员可以继续工作，有专人来负责搞定这个 bug。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuang-jian-hotfix-branch&quot;&gt;创建 Hotfix branch&lt;&#x2F;h3&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;img&#x2F;hotfix-branches@2x.png&quot; &#x2F;&gt;
&lt;p&gt;Hotfix 是从 master 分支上创建的。假如当前运行版本是 1.2，然后发现有 bug，但是 develop 还在开发中，不太稳定，这时就可以新开一个 Hotfix branch，然后开始解决问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix-1.2.1 master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to a new branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;hotfix-1.2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; .&#x2F;bump-version.sh 1.2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; modified successfully, version bumped to 1.2.1.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Bumped version number to 1.2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[hotfix-1.2.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 41e61bb] Bumped version number to 1.2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; files changed, 1 insertions(+&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1 deletions(-&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;解决问题，一次或几次 commit&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Fixed severe production problem&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[hotfix-1.2.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; abbe5d6] Fixed severe production problem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; files changed, 32 insertions(+&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 17 deletions(-&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wan-cheng-hotfix-branch&quot;&gt;完成 Hotfix branch&lt;&#x2F;h3&gt;
&lt;p&gt;当结束时，bugfix 要被合并到 master，同时也要合并到 develop，保证下个版本发布时该 bug 已被修复。这跟 release branch 完成时一样。&lt;&#x2F;p&gt;
&lt;p&gt;首先更新 master 和 tag release&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;master&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --no-ff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix-1.2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; made by recursive.
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; of changes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1.2.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来与 develop 合并&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git checkout develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;develop&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --no-ff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix-1.2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; made by recursive.
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; of changes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有一个例外，就是当一个 release branch 存在时，bugfix 要被合并到 release 而不是 develop，因为 release 最终会被合并到 develop。&lt;&#x2F;p&gt;
&lt;p&gt;最后移除 branch&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix-1.2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Deleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; branch hotfix-1.2.1 (was abbe5d6&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;这个开发模型其实没有什么新颖的，一开始提到的&amp;quot;大图&amp;quot;确实在我们的项目起到了非常大的作用。这是很优雅的一个模型，很容易实现，也容易在团队成员之间达成一致。&lt;&#x2F;p&gt;
&lt;p&gt;PS:需要这个模型大图的，可以去&lt;a href=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;posts&#x2F;a-successful-git-branching-model&#x2F;&quot;&gt;原文地址&lt;&#x2F;a&gt;下载&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于代码的注释</title>
            <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/code-comments/</link>
            <guid>https://limboy.me/posts/code-comments/</guid>
            <description>&lt;p&gt;怎样的注释才是合理的？关于这个问题，首先要回答的问题是：为什么要注释？&lt;&#x2F;p&gt;
&lt;p&gt;注释通常是为了方便其他程序员阅读源码，让他能够明白这个变量是做什么用的，这段代码是为了完成什么任务等等，不至于三更半夜系统出现了 bug，结果在程序里翻山越岭，跋山涉水，还没有找到出问题的代码，好不容易找到了，又不知道如何修改。&lt;&#x2F;p&gt;
&lt;p&gt;那是不是注释越多越详细越好呢？也不是。因为程序是会经常变动的，这加个参数，那改个变量是很正常的，稍不注意就会忘了更新注释。而且从程序员的角度来说，也不愿去更新注释，一个是因为懒，另一个是因为知道将来还可能会变，索性等将来再说。以后维护该程序的人，看着注释和程序就会很纠结。&lt;&#x2F;p&gt;
&lt;p&gt;所以不愿写注释是程序员的天性，行云流水地写完一段代码，这种感觉多爽啊。时时刻刻想着要写注释，就不能全身心地投入到代码的实现上。不过倒是可以等爽完之后，再把注释加上，这就牵扯到一个问题: 应该在哪些地方加注释？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;先来看这段代码&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; a, b, c; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码很简洁，但就是不知道 a,b,c 代表什么，将来如果要维护这样的程序，会抑郁的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;再来看看这段代码&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;gravitational force
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;time in seconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;multiply the time and gravity together to get displacement.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是好一点，至少知道这些变量代表着什么。但如果下面还会用到这些代码，依旧会崩溃。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;再改进一下&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这就好多了，每个变量名都是自解释类型，看着名就知道什么意思，阅读起来也不会有障碍。但最后的公式还是有点不知所云。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;加上合理的注释&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* compute displacement with Newton&amp;#39;s equation x = vₒt + ½at² *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;当然也可以再从命名上作文章，避免注释，同时又不影响阅读&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; accelerationDueToGravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewtonianPhysics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CalculateDisplacement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(accelerationDueToGravity, timeInSeconds)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以合格的代码应该是自解释的，再加上合理的注释。所谓合理的注释就是在可能会引起混淆或不太好理解的地方加上说明。如果你的程序太依赖注释，那就该重构了。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 如果你对 comment 文化有兴趣的话，可以看看 stackoverflow 上的&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;184618&#x2F;94962&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于创业的一点感悟</title>
            <pubDate>Sat, 23 Oct 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/think-about-startup/</link>
            <guid>https://limboy.me/posts/think-about-startup/</guid>
            <description>&lt;p&gt;在&lt;a href=&quot;http:&#x2F;&#x2F;news.ycombinator.com&quot;&gt;HN&lt;&#x2F;a&gt;看到了&lt;a href=&quot;http:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=1817883&quot;&gt;这篇文章&lt;&#x2F;a&gt;，该文的作者辞掉了一份收入颇丰的工作，用了 8 个月的时间，开发完成了他的网站。但是在推广的时候却遇到了一些问题。他想到的第一个方法是给&lt;a href=&quot;www.techcrunch.com&quot;&gt;TC&lt;&#x2F;a&gt;写信，非常认真地写信，希望 TC 能给报道一下，无果。给另一家规模稍小的类似网站投稿依旧没有回音，也没有可能在 HN 和 Reddit 被报道，于是他的项目就搁浅了。只能眼睁睁看着其他类似的网站脱颖而出。最后他得出的结论是：需要一个绝好的想法，然后可以病毒式传播。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说我的故事：我是一个不太闲得住的人，在一个地方时间待长了，总想到别处逛逛，但我身边又没有这样的朋友，可以告诉我哪里值得去，哪里不该去。于是我就上网找旅游社区，我要的很简单，就是一个点评景点的地方，哪个景点的分高，口碑好，我就去哪。结果转了半天也没有发现一个合我心意的，不是套一个 discuz 论坛，就是有一堆乱七八糟的功能，或者界面实在太粗糙，等等。万般无奈之下，只能自己操刀，按着自己的想法来做这么一个社区——&lt;a href=&quot;http:&#x2F;&#x2F;xingzher.com&quot;&gt;行者&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因为白天还要上班，所以只有晚上那么点时间来做项目。遇到的最大的困难是，坚持不下去，因为随着时间的推移，热情也下降地很快，一旦有两三天没有碰它，以后再要捡起来就很难了。这时只能不断地给自己打气：不能就这么放弃了啊，不然之前那么多的付出就浪费了；这么好的一个产品，不做完真是太可惜了；等做完后，大家一定会喜欢的......等等。所以一个人做项目，尤其是业余时间，规模还不小的项目，真的很难。就像长跑一样，跑累了，一休息就不想起来了，反正也没有人逼着你非跑到终点。&lt;&#x2F;p&gt;
&lt;p&gt;很庆幸我坚持了下来(因为告诉过好几个朋友我在做这么个网站，不能言而无信，这也是我坚持下来很重要的一个原因)，大概花了 100 多天，自己看着还比较满意。于是我也遇到了跟上文的作者同样的问题: 如何推广？期间有好友跟我说过: 这个网站将来推广会是个问题。我还比较有信心地告诉他: 一步一步来，车到山前必有路，先做出来，将来的事将来再说。现在要找路了，却不知道路在哪？&lt;&#x2F;p&gt;
&lt;p&gt;曾经也想过大概要怎么推广，比如找几个有名的博客宣传一下或者挂个广告，或者想一个很好的 idea，把旅友们都聚集过来，实在不行就到旅友论坛里去发帖，拉人。但这些不是我的兴趣所在，也不是我的强项，遇到问题不知道怎么解决，也没有太大的热情去做这件事，于是慢慢就搁浅了。&lt;&#x2F;p&gt;
&lt;p&gt;其实细细分析起来还有很多原因&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我做的是社区。不像服务性网站，社区是需要用户创造内容的，但对于新用户来说，能不能接受你这个网站还是个问题，更别提创造内容了。就算看着还顺眼，用着也还行，没有人互动，这也很打击士气。所以积累第一批忠实用户真的很困难。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不是我熟悉的领域。做这个社区，纯粹是一厢情愿，觉得自己好好做，别人就会来用。但事实上我跟本就不知道作为一个驴友对我的网站有怎样的期待值；最希望提供怎样的功能；用了之后，有什么样的感想。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;热情没了。前两个都不是最根本的问题，这个才是最致命的。我为什么要花那么多精力&#x2F;时间&#x2F;财力去推广这个网站？旅行对我来说又不是必须的，我还不如多花点时间去研究算法，新技术......等等。之前还能找到继续下去的动力，这次我想了想，如果要继续下去，那么最大的动力就是: 都已经把孩子生出来了，总不能不管吧。但是我又有了新的目标...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过这件事，想到了以下几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创业不是你把一个产品做好了就行了，营销也很重要，除非你本身就有了足够的影响力。不然看着自己辛辛苦苦做出来的产品没人用，这种感觉很打击信心的。所以如果你是一个程序员，最好找一个擅长营销的朋友来帮你的产品打开出路，发挥各自所长，才有可能成功。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果想在互联网创业的话，最好认清现实。除非你不想盈利，只是作为业余项目，练练手。国内的互联网创业门槛其实是很高的，尽量往小处着手，就目前来看电子商务和移动互联网是两个可以考虑的方向。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;避免单干，除非你够 NB。创业阶段，需要考虑的事情非常多，如设计&#x2F;体验&#x2F;程序&#x2F;前端&#x2F;推广&#x2F;持续改进等等。就算你是全能型的人才，如果都亲力亲为的话，也会很累。不如找 1-2 个志趣相投，特长互补的人来一起做，享受团队合作带来的快感。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;创业是很辛苦的: 找到靠谱的团队成员很难，成员之间如何合作，如何有效沟通，如何提高成员的士气，如何让成员更高效地工作，如何营造轻松的氛围，如何应付突变，核心成员离开了怎么办...等等。所以如果真想创业的话，先了解一下作为 founder，需要具备哪些能力和资源，然后在实践中慢慢积累，等到觉得时机差不多了，再去尝试，这样成功的可能性会大得多。当然如果只想安稳地挣钱的话，还是办公室最靠谱。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;李想说：反对一切创业。凭着一股热情，就想开创一片天地，这样的行为并不能让你学到什么，只会让你感觉很受伤。而真正具备了创业的条件和创业的心的人，是不会在乎他人的看法的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php程序员是否该学习python</title>
            <pubDate>Wed, 08 Sep 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-vs-python/</link>
            <guid>https://limboy.me/posts/php-vs-python/</guid>
            <description>&lt;p&gt;其实标题可以变为&amp;quot;xx 程序员是否该学习 yy&amp;quot;，xx 和 yy 可以是任何编程语言，而答案总是&amp;quot;应该&amp;quot;。因为我本身跟 php 打了不少年的交道，同时 python 也学习了一段时间，所以就把这两种语言串起来了。&lt;&#x2F;p&gt;
&lt;p&gt;php 和 python 上手都很容易，php 基本上是&amp;quot;大把函数任你抓，抓来就能做项目&amp;quot;，python 是&amp;quot;大把模块任你选，事半功倍全靠它&amp;quot;。双方都有强大的第三方扩展，很少需要自己费力去写一个，除非进行二次封装。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看 PHP 比较爽的几个特性&lt;&#x2F;p&gt;
&lt;h3 id=&quot;array&quot;&gt;array&lt;&#x2F;h3&gt;
&lt;p&gt;php 的&lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;language.types.array.php&quot;&gt;数组&lt;&#x2F;a&gt;几乎是所有语言中最强大的，同时扮演了 list, dictionary, stack, queue 甚至更多(相信这也是许多人喜欢 PHP 的一个重要原因)。而且使用还挺方便，提供了&lt;a href=&quot;http:&#x2F;&#x2F;cn2.php.net&#x2F;manual&#x2F;en&#x2F;ref.array.php&quot;&gt;77 个数组相关方法&lt;&#x2F;a&gt;(这也不可避免地产生了另一个问题，下面会提到)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-html-de-qin-mi-jie-he&quot;&gt;与 html 的亲密结合&lt;&#x2F;h3&gt;
&lt;p&gt;这也是其他语言少有的特性，php 本身就是一个模板引擎，可以与 html 天然融合。不过也有弊端，如 html 不应该包含复杂的业务逻辑，而且 php 与 html 混杂实在不够美观。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-quan-de-han-shu-he-feng-fu-de-di-san-fang-lei-ku&quot;&gt;齐全的函数和丰富的第三方类库&lt;&#x2F;h3&gt;
&lt;p&gt;函数是 php 的核心，这也是 php 容易上手的一个重要原因。要完成什么功能，只要找到该函数即可，从这个方面来说，php 更适合脚本化编程(貌似这也是 php 的初衷)。随着 php 的流行，第三方类库也开始丰富起来，甚至可以为 php 写插件来增强 php 的功能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-oop-de-wan-mei-zhi-chi&quot;&gt;对 OOP 的完美支持&lt;&#x2F;h3&gt;
&lt;p&gt;php4 虽然也可以进行 oop 编程，但语言本身不给力，只能努力往 OOP 方向去靠。到了 php5，情况就有了很大的好转，支持 PPP(private, protected, public) method 和 property，以及 static&#x2F;final 等语法。php5.3 还支持 LSB(late static bindings)，虽然我觉得支持得很不到位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-zhu-fang-fa&quot;&gt;魔术方法&lt;&#x2F;h3&gt;
&lt;pre&gt;__get&#x2F;__set&#x2F;__call&#x2F;__toString&lt;&#x2F;pre&gt;等等，这些魔术方法给类带来了很大的便利，随便找个流行的框架，查看源码都会发现这些魔术方法的影踪，仿佛一下子变得无所不能。
&lt;p&gt;再来看看 PHP 几个让人不爽的地方&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-liang-bei-fu-zhi-dan-que-bu-shi-yong&quot;&gt;变量被赋值，但却不使用&lt;&#x2F;h3&gt;
&lt;p&gt;不太好理解，写段代码就知道了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error_reporting(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下面这段代码会报NOTICE ERROR，但事实上$str_arr已经被赋值，只是current方法没有使用这个变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这段代码的运行过程是执行explode方法，然后将结果赋给$str_arr，然后将结果作为参数传递给current方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 也就是说整个过程没$str_arr什么事，$str_arr收到结果后就被踢走了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 但有时候，只能使用变量而不能使用函数的返回值，如empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;current(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str_arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;explode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bu-neng-zai-han-shu-fang-fa-hou-gen&quot;&gt;不能在函数&#x2F;方法后跟[]&lt;&#x2F;h3&gt;
&lt;p&gt;还是不太好理解，继续上代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 会报错，于是只能先把结果赋给变量，再从这个变量去获取相应值，用完之后再unset该变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hun-luan-de-ming-ming&quot;&gt;混乱的命名&lt;&#x2F;h3&gt;
&lt;p&gt;上面说的几点只是小问题，这个就严重了。php 的命名几乎没有规律可循，随便举几个例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其中一个单词缩写，中间没有分割符
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strpos()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tempnam()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 两个单词没有缩写，其中有一个分割符
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_repeat()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_exists()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 驼峰命名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;__toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下划线连接
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;__set_state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个太恐怖了，强烈怀疑是酒后编程
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mysql_real_escape_string()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nan-ji-de-can-shu&quot;&gt;难记的参数&lt;&#x2F;h3&gt;
&lt;p&gt;这个是很要命的，有些方法，我是用一次，看一次手册，比如 strpos&#x2F;in_array&#x2F;basename&#x2F;...，完全没有套路可循。有些把$needle放到前面，$haystack 放到后面(如 explode)，有些正好倒过来(如 strpos)，太影响写程序的效率了。怪不得写 PHP 的基本都需要一个强大的 IDE(如 Zend&#x2F;NetBeans)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-ming-kong-jian-de-que-shi&quot;&gt;命名空间的缺失&lt;&#x2F;h3&gt;
&lt;p&gt;就好像一大堆能人异士挤在一个房子里，要用到什么功能了，就抓一个出来，如果要往这个房间加人的话，还得保证不能跟已有的重名。如果有命名空间的话，就方便了，新建一个屋子，只要这个屋子不跟别的屋子重名就行，屋子里的人爱起什么名起什么名，完全不用担心冲突。好在 php5.3 加入了命名空间，虽然用起来还是挺别扭。&lt;&#x2F;p&gt;
&lt;p&gt;下面来说说 python 吧，其实 python 的职能是跨平台软件开发，但也可以用做 web 开发，而且出现了不少优秀的 web 框架，所以就不可避免地与 php 正面交锋(php 虽然也可以用来开发 gui 软件，但多少有点旁门左道的感觉)。&lt;&#x2F;p&gt;
&lt;p&gt;python 给我的感觉是简洁，强大且优雅。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-ji&quot;&gt;简洁&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;半个单词能搞定的就不用整个单词，如 def&#x2F;elif&#x2F;iter&lt;&#x2F;li&gt;
&lt;li&gt;一行能搞定的就不用多行&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#generator expressions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sum(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;同时对多个变量赋值&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;a, b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qiang-da&quot;&gt;强大&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;内置了 3 种常用数据结构：tuple&#x2F;list&#x2F;dictionary&lt;&#x2F;li&gt;
&lt;li&gt;支持匿名函数&lt;&#x2F;li&gt;
&lt;li&gt;多线程&lt;&#x2F;li&gt;
&lt;li&gt;函数的参数(可以不按顺序传参，这是个亮点)&lt;&#x2F;li&gt;
&lt;li&gt;...(php 有的，python 基本也少不了)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;you-ya&quot;&gt;优雅&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;一切皆对象&lt;&#x2F;li&gt;
&lt;li&gt;一切皆引用&lt;&#x2F;li&gt;
&lt;li&gt;模块机制&lt;&#x2F;li&gt;
&lt;li&gt;独特的书写风格(这个因人而异吧，觉得换行+tab 很别扭的也大有人在)&lt;&#x2F;li&gt;
&lt;li&gt;自我说明(docstring+pydoc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然 python 也非完美，不爽的地方也挺多的，如参数的默认值如果是 mutable(可变的)，只会在第一次调用时初始化；class 的方法至少要传一个 self 参数等等。但瑕不掩瑜，php 程序员还是应该了解一下 python，即使不是全面转向 python。&lt;&#x2F;p&gt;
&lt;p&gt;对了，使用 python 还有一个很重要的原因是：GAE(我知道有 SAE，但~~~)&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;ioreader.com&#x2F;2007&#x2F;08&#x2F;19&#x2F;12-things-you-should-dislike-about-php&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;ioreader.com&#x2F;2007&#x2F;08&#x2F;17&#x2F;11-cool-things-about-php-that-most-people-overlook&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;PythonVsPhp&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1486608&#x2F;is-switching-from-php-to-python-worth-the-trouble&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;3319261&#x2F;php-devs-that-moved-to-python-is-the-experience-better&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>数据分离并快速显示网页</title>
            <pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/rest-flush-template/</link>
            <guid>https://limboy.me/posts/rest-flush-template/</guid>
            <description>&lt;p&gt;传统网站一般都是用户发出一个 http 请求，服务端接收到请求后开始业务逻辑的处理，然后把处理后的数据渲染到模板页，最后把内容输出到用户的浏览器。&lt;&#x2F;p&gt;
&lt;p&gt;这个过程有个问题: 如果服务端处理的时间过长(比如某个费时的 SQL 语句)，那么用户将看不到任何内容，即使有些数据已经处理完毕。&lt;&#x2F;p&gt;
&lt;p&gt;解决办法很简单，就是使用 php 的&lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;flush&quot;&gt;flush&lt;&#x2F;a&gt;方法，它可以将内容立刻输出到用户的浏览器。也就是处理完哪些就输出哪些，这样即使卡在了某个操作，用户也能看到已经处理完的结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flush-de-shi-xian-yuan-li&quot;&gt;flush 的实现原理&lt;&#x2F;h3&gt;
&lt;p&gt;正常的 http 返回头信息里会包含&amp;quot;Content-Length&amp;quot;一项，标明本次传输的字节数。http 1.1 新增了&amp;quot;Transfer-Encoding&amp;quot;选项，可以指定为&amp;quot;chunked&amp;quot;，这样就不用理会&amp;quot;Content-Length&amp;quot;选项了(因为不知道到底会传输多少字节)。服务端按照 chunked 标准输出内容，客户端收到&amp;quot;Transfer-Encoding:chunked&amp;quot;头信息后，也会按照 chunked 标准去解析内容。&lt;&#x2F;p&gt;
&lt;p&gt;举个例子，有一条河，河的一边着火了，需要到河的另一边找人救火，然后你迅速架了一座桥(TCP&#x2F;IP)，然后跑到对岸(发送 http 请求)，跟那里的村长说明了情况(服务器收到 http 请求)，以前的做法是村长到各家各户召集劳动力(服务器集群)，等把劳动力都召集完了，统一过河去救火(发送处理完的结果)。但在召集的过程中，某家正在干架，这时村长得先苦口婆心地做思想工作，等工作做完了，再把男人召集出来，但这段时间里，河对岸的火依旧在着(用户漫长的等待，可能真的要火了)，所以很可能由于某家或某几家的特殊情况导致延误了救火的最佳时机。现在的做法是只要召集到人了，马上过河去救火，把平常最容易出状况的几户人家留到最后去召集(负担比较重的几台服务器)，这样火被扑灭的可能性就大大增加了。&lt;&#x2F;p&gt;
&lt;p&gt;flush 就好比是服务端推(push)，ajax 是客户端拉(pull)。推的话可以利用已经建立的 http 连接，如果是拉的话，每拉一次就要建立一次 http 连接，代价还是比较大的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-rest-he-client-template&quot;&gt;使用 REST 和 Client Template&lt;&#x2F;h3&gt;
&lt;p&gt;flush 解决了内容的即时显示问题，如果要做到数据与结构分离，可以使用 REST(当然其他的 web service 也没有问题，REST 只是个人喜好)。REST 作为数据源，Controller 收到请求后，先通过 REST 去取数据，取到数据后，封装到一段 js 里，然后 flush 给客户端，循环此过程，直到客户端需要的所有数据都传输完毕。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 显示某篇具体的文章
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 输出页面模板
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post_index&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 开始获取REST数据，并flush
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;REST_Post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, json_encode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取该文章的评论
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;REST_Comment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comments&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, json_encode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;js_render方法，定义在其他文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; string $id 页面的dom id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; array $data 使用到的数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 模板页已经定义了js的render方法
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;lt;script&amp;gt;render(&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;)&amp;lt;&#x2F;script&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来看看模板页&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1&#x2F;jquery.min.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 模板引擎 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;trimpath.googlecode.com&#x2F;files&#x2F;trimpath-template-1.0.38.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个就是在js_render方法里用到的render方法
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TrimPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;processDOMTemplate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;replaceWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;${title}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;${content}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个模板页没有&lt;code&gt;&amp;lt;&#x2F;body&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;code&gt;，因为我们之后还要往这个页面里输入内容，最后渲染完的页面大概是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- &#x2F;&#x2F;... --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; template here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- more textarea template --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 这些是flush出来的 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;what a wonderful life&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comments&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {[&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah blah&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2010-09-20&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], [&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah blah&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2010-09-30&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样服务端只提供数据，客户端负责解析这些数据，并显示到页面。将来如果开放 API，或者要针对手机开发，也很方便了，因为网站本身用的就是 API，而手机的话，只要换个显示的模板就行了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>SSH小技巧</title>
            <pubDate>Sat, 28 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ssh-tips/</link>
            <guid>https://limboy.me/posts/ssh-tips/</guid>
            <description>&lt;p&gt;参考：
&lt;a href=&quot;http:&#x2F;&#x2F;blog.ksplice.com&#x2F;2010&#x2F;08&#x2F;six-things-i-wish-mom-told-me-about-ssh&#x2F;&quot;&gt;Six Things I wish Mom told me(about ssh)&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;troy.jdmz.net&#x2F;rsync&#x2F;index.html&quot;&gt;Using Rsync and Ssh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;用过 linux 的，对 SSH 应该就比较熟悉了，但有些技巧可能你未必知道。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lian-jie-cheng-gong-hou-yun-xing-ming-ling&quot;&gt;连接成功后运行命令&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道可以通过 SSH 获取远程 shell，然后运行命令。如果只想运行单个命令的话，直接把命令附加在 SSH 命令之后即可，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; bebop 2.6.32-24-generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#39-Ubuntu SMP Wed Jul 28 05:14:15 UTC 2010 x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个最好结合无须输入密码的 SSH 登录。如果想获取 python 版本，直接&amp;quot;ssh hostname python -V&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;但有些命令可能会报错，如&amp;quot;top&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop top
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TERM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; environment variable not set.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时只需加上&amp;quot;-t&amp;quot;参数就行了。&lt;&#x2F;p&gt;
&lt;p&gt;这里我们执行 ssh 连接时并没有指定具体的主机名(ip)和用户，而只是&amp;quot;bebop&amp;quot;，这是如何做到的呢？且看下文&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-bie-ming&quot;&gt;使用别名&lt;&#x2F;h3&gt;
&lt;p&gt;假如在一个主机上为不同用户分别开通了不同的 ssh 账号，连接时就得这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 2222 bob.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8183 waseem@alice.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 31337&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; waseemio wsd.example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很麻烦，而且端口或者其他参数有变动的话，不一定记得住。其实只要配置一下.ssh&#x2F;config 文件就可以了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Host bob
&lt;&#x2F;span&gt;&lt;span&gt;    HostName bob.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 2222
&lt;&#x2F;span&gt;&lt;span&gt;    User wdaher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host alice
&lt;&#x2F;span&gt;&lt;span&gt;    HostName alice.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 8183
&lt;&#x2F;span&gt;&lt;span&gt;    User waseem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host self
&lt;&#x2F;span&gt;&lt;span&gt;    HostName wsd.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 31337
&lt;&#x2F;span&gt;&lt;span&gt;    User waseemio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;连接时，就变成这样了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh alice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh self
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很方便，如果 SSH 的参数改变的话，修改配置文件就行了，命令不变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duan-kou-zhuan-fa&quot;&gt;端口转发&lt;&#x2F;h3&gt;
&lt;p&gt;假设有这么个情况：你已下班回家，这时想要查看公司内网(analytics)的某个 web 页，但只能 SSH 到自己在公司的电脑(desktop)，desktop 和 analytics 在一个局域网。&lt;&#x2F;p&gt;
&lt;p&gt;先来看一段命令&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080:desktop:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段命令表示的是 ssh 连到 desktop 后，转发本地 8080 端口到 desktop 的 80 端口，这时，如果访问&amp;quot;http:&#x2F;&#x2F;localhost:8080&amp;quot;，就会转发到 desktop 的 80 端口。这样的话，把 desktop:80 换成 analytics:80 不就大功告成了吗&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080:analytics:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样访问本地的 8080 端口，就会转到 analytics 的 80 端口，通过 desktop 这个跳板。&lt;&#x2F;p&gt;
&lt;p&gt;更加一劳永逸的方法是使用-D 参数，将 desktop 变成一个&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;490489.htm?fr=ala0_1&quot;&gt;socks5&lt;&#x2F;a&gt;代理服务器(对这个-D 命令，大家应该都很熟悉了吧)，然后在浏览器中配置代理为&amp;quot;localhost:8080&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080 desktop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样所有的浏览器访问都会通过 desktop 进行转发，也就是说直接访问 http:&#x2F;&#x2F;analytics 就可以了。(analytics 地址在 hosts 里配置，如 192.168.1.110 analytics)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&amp;quot;~&amp;quot;&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;~&amp;quot;(不包括引号)是 ssh 保留字符，在新行输入&amp;quot;~&amp;quot;后，可以配合很多键，其中最常用的就是&amp;quot;~.&amp;quot;和&amp;quot;~^Z&amp;quot;(Ctrl+Z)&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;~.&amp;quot;会终止 ssh 连接，如果中断了连接，又不想等 ssh session 过期，就可以使用这个快捷键。&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;~^Z&amp;quot;会把当前的 ssh 连接放到后台，等完成了其他工作后，再把这个连接取出来。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@bebop:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; sleep 10000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@bebop:~$ ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;^Z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;suspend ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[1]+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  Stopped                 ssh bebop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Do something else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; fg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# and you&amp;#39;re back!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tong-guo-authorized-keys-zhi-ding-deng-lu-hou-yao-zhi-xing-de-ming-ling&quot;&gt;通过 authorized_keys 指定登录后要执行的命令&lt;&#x2F;h3&gt;
&lt;p&gt;这个跟前面提到的&amp;quot;连接成功后运行命令&amp;quot;不一样，这个命令是定义在 authorized_keys 里的，ssh 连上后，只能执行该命令，并且执行完后立即退出。&lt;&#x2F;p&gt;
&lt;p&gt;先看看正常的 authorized_keys&lt;&#x2F;p&gt;
&lt;pre&gt;
ssh-dss AAAAB3NzaC1kc3MAAAEBAKYJenaYvMG3nHwWxKwlWLjHb77CT2hXwmC8Ap+fG8wjlaY&#x2F;9t4u
A+2qx9JNorgdrWKhHSKHokFFlWRj+qk3q+lGHS+hsXuvta44W0yD0y0sW62wrEVegz+JVmntxeYc0nDz
5tVGfZe6ydlgomzj1bhfdpYe+BAwop8L+EMqKLS4iSacNjoPlHsmqHMnbibn3tBqJEq2QJjEPaiYj1iP
5IaCuYBhuTKQGa+oyH3mXEif5CKdsIKBj46B0tCy0&#x2F;GC7oWcUN92QdLrUyTeRJZsTWsxKpRbMliD2pBh
4oyX&#x2F;aXEf8+HZBrO5vQjDBCfTFQA+35Xrd3eTVEjkGkncI0SAeUAAAAVAMZSASmQ9Pi38mdm6oiVXD55
Kk2rAAABAE&#x2F;bA402VuCsOLg9YS0NKxugT+o4UuIjyl6b2&#x2F;cMmBVWO39lWAjcsKK&#x2F;zEdJbrOdt&#x2F;sKsxIK
1&#x2F;ZIvtl92DLlMhci5c4tBjCODey4yjLhApjWgvX9D5OPp89qhah4zu509uNX7uH58Zw&#x2F;+m6ZOLHN28mV
5KLUl7FTL2KZ583KrcWkUA0Id4ptUa9CAkcqn&#x2F;gWkHMptgVwaZKlqZ+QtEa0V2IwUDWS097p3SlLvozw
46+ucWxwTJttCHLzUmNN7w1cIv0w&#x2F;OHh5IGh+wWjV9pbO0VT3&#x2F;r2jxkzqksKOYAb5CYzSNRyEwp+NIKr
Y+aJz7myu4Unn9de4cYsuXoAB6FQ5I8AAAEBAJSmDndXJCm7G66qdu3ElsLT0Jlz&#x2F;es9F27r+xrg5pZ5
GjfBCRvHNo2DF4YW9MKdUQiv+ILMY8OISduTeu32nyA7dwx7z5M8b+DtasRAa1U03EfpvRQps6ovu79m
bt1OE8LS9ql8trx8qyIpYmJxmzIdBQ+kzkY+9ZlaXsaU0Ssuda7xPrX4405CbnKcpvM6q6okMP86Ejjn
75Cfzhv65hJkCjbiF7FZxosCRIuYbhEEKu2Z9Dgh+ZbsZ+9FETZVzKBs4fySA6dIw6zmGINd+KY6umMW
yJNej2Sia70fu3XLHj2yBgN5cy8arlZ80q1Mcy763RjYGkR&#x2F;FkLJ611HWIA= thisuser@thishost
&lt;&#x2F;pre&gt;
&lt;p&gt;修改之后，就是这样&lt;&#x2F;p&gt;
&lt;pre&gt;
from=&quot;10.1.1.1&quot;,command=&quot;&#x2F;home&#x2F;remoteuser&#x2F;command&quot; ssh-dss AAAA...
&lt;&#x2F;pre&gt;
&lt;p&gt;其实就是在最前面加了 from 和 command，from 表明从哪个 ip 连过来的，如果是用 adsl 拨号上网，ip 会经常变动，可以把这个参数去掉。command 表明连接成功后要执行的命令，可以在 command 里限制该用户可以执行的命令(别忘了加上可执行权限)，假设限制该用户只能执行 rsync 命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SSH_ORIGINAL_COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span&gt;rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span&gt;--server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$SSH_ORIGINAL_COMMAND
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;esac
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$SSH_ORIGINAL_COMMAND 表示的是用户实际执行的命令&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-ji-qiao&quot;&gt;其他技巧&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;jin-zhi-root-yong-hu-deng-lu&quot;&gt;禁止 Root 用户登录&lt;&#x2F;h3&gt;
&lt;p&gt;允许 root 用户登录太危险了(虽然很方便)，因为可以删除任何文件，可以在&#x27;&#x2F;etc&#x2F;ssh&#x2F;sshd_config&#x27;里配置一下。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PermitRootLogin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; no
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#或者只允许执行有限的命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PermitRootLogin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; forced-commands-only
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mian-mi-ma-deng-lu&quot;&gt;免密码登录&lt;&#x2F;h3&gt;
&lt;p&gt;先用 ssh-keygen 生成一对私钥和公钥，然后把公钥添加到远程主机的 authorized_keys 里就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#生成私钥和公钥，默认放在~&#x2F;.ssh&#x2F;文件夹下，也可以自定义，提示输入passphare时，直接回车
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#顺利的话就会在~&#x2F;.ssh&#x2F;文件夹下生成id_rsa.pub和id_rsa两个文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-keygen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rsa
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#把id_rsa.pub上传到远程主机，方法很多，ssh-copy-id只是其中一种
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-copy-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; username@hostname
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#如果id_rsa.pub在其他文件夹下
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-copy-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;id_rsa.pub username@hostname
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样下次就可以直接登录了&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>PHP特性小结</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/hidden-php-features/</link>
            <guid>https://limboy.me/posts/hidden-php-features/</guid>
            <description>&lt;p&gt;其实就是总结了一下&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;61401&#x2F;hidden-features-of-php&quot;&gt;这个帖子&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-dang&quot;&gt;文档&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 文档的特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;浏览方便&lt;&#x2F;li&gt;
&lt;li&gt;用户评论是一大亮点&lt;&#x2F;li&gt;
&lt;li&gt;要查询某个函数，输入：www.php.net&#x2F;function 就会跳转到该函数的具体页&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shu-zu&quot;&gt;数组&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 的数组是我用过的语言中最强大的，其实就是个有序映射表(ordered map)，并为各种使用作了优化。可以看作列表、哈希表、字典、集合、栈、队列。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liu-chu-li&quot;&gt;流处理&lt;&#x2F;h3&gt;
&lt;p&gt;可以扩展文件流，比如&lt;a href=&quot;http:&#x2F;&#x2F;www.phpclasses.org&#x2F;browse&#x2F;package&#x2F;1919.html&quot;&gt;excel 流处理&lt;&#x2F;a&gt;，可以通过下面的语句来创建一个 excel 文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fopen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xlsfile:&#x2F;&#x2F;tmp&#x2F;test.xls&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;wb&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_resource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cannot open excel file&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Bob Loblaw&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Popo Jijo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Tiny Tim&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fwrite(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, serialize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mo-zhu-fang-fa&quot;&gt;魔术方法&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__toString&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;or-and&quot;&gt;or&#x2F;and&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;OR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;$foo is not defined&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;spl-autoload-register&quot;&gt;spl_autoload_register&lt;&#x2F;h3&gt;
&lt;p&gt;使用 spl_autoload_register，而不是__autoload，因为 spl_autoload_register 允许设置多个实例，而不会覆盖。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spl_autoload_register(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;autoloader&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;autoloader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里可以对$class进行处理
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;set-include-path&quot;&gt;set_include_path&lt;&#x2F;h3&gt;
&lt;p&gt;设置引用路径，比如引用 zend 的 libraries 时。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;set_include_path(get_include_path() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;PATH_SEPARATOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;..&#x2F;libs&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chu-li-yuan-cheng-wen-jian-url&quot;&gt;处理远程文件&#x2F;url&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fopen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;example.com&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_get_contents(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;example.com&#x2F;file&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$imageInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getimagesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ftp:&#x2F;&#x2F;user:password@ftp.example.com&#x2F;image&#x2F;name.jpg&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然这些函数的健壮性和稳定性不如 curl，但毕竟使用方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strtr&quot;&gt;strtr&lt;&#x2F;h3&gt;
&lt;p&gt;使用方便，效率高，用来替换字符串内的特定值。有点类似 str_replace，但更灵活。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo strtr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hell&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;extract&quot;&gt;extract&lt;&#x2F;h3&gt;
&lt;p&gt;顾名思义，释放一个数组内的元素，构造模板引擎的时候尤为有用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;extract(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output &amp;#39;bar&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;func-get-args&quot;&gt;func_get_args&lt;&#x2F;h3&gt;
&lt;p&gt;获取传递过来的参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func_get_args()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; will print &amp;#39;d&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; will print 3
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;d&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cli&quot;&gt;cli&lt;&#x2F;h3&gt;
&lt;p&gt;command line interface，可以在命令行里运行 php 脚本，用来处理日常任务也非常方便。对了别忘了一个非常有用的参数 -a，进入交互模式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Interactive shell
&lt;&#x2F;span&gt;&lt;span&gt;php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-ru-de-wen-jian-ke-yi-you-fan-hui-zhi&quot;&gt;载入的文件可以有返回值&lt;&#x2F;h3&gt;
&lt;p&gt;这个比.ini 文件更加灵活，你可以在文件里运行一段程序后，返回运行结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; config.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;db&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;HTTP_HOST&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example.org&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;usr&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; index.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;config.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;db&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; example.org
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-han-shu-nei-ding-yi-jing-tai-bian-liang&quot;&gt;在函数内定义静态变量&lt;&#x2F;h3&gt;
&lt;p&gt;把类的特性移植到函数里了，比如有一些运算量较大的函数，可以把运算结果放到这个静态变量，下次调用时检查一下该变量是否已经被赋值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do the work here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$results&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;heredoc&quot;&gt;heredoc&lt;&#x2F;h3&gt;
&lt;p&gt;不用再为引号发愁了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;EOM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  &amp;lt;div id=&amp;quot;someblock&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    &amp;lt;img src=&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;EOM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ba-zi-fu-chuan-dang-zuo-shu-zu&quot;&gt;把字符串&amp;quot;当作&amp;quot;数组&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hell o World&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;hell o World&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;H&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;Hell o World&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;Hello World&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kuai-su-zhu-shi-fan-zhu-shi-yi-duan-dai-ma&quot;&gt;快速注释&#x2F;反注释一段代码&lt;&#x2F;h3&gt;
&lt;p&gt;这个确实很有意思&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not commented&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	echo &amp;#39;blah&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	die(&amp;#39;commented&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;han-shu-can-shu-lei-xing-ti-shi&quot;&gt;函数参数类型提示&lt;&#x2F;h3&gt;
&lt;p&gt;相对于其他编程语言(java&#x2F;c#)，php 这块比较弱，只能判断数组和对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$param0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;stdClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$param1 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shu-zu-he-bing&quot;&gt;数组合并&lt;&#x2F;h3&gt;
&lt;p&gt;不用 array_merge，而是使用&#x27;+&#x27;，使用更方便，也更易理解。在处理默认值和用户定义值时尤为方便。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Set the normal defaults.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control_defaults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;type&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;text&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;size&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control_defaults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;name&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;surname&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;size&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;40 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shu-chu-huan-chong&quot;&gt;输出缓冲&lt;&#x2F;h3&gt;
&lt;p&gt;使用 ob_start，关键是 ob_start 还支持 callback，真是太贴心了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;censor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strtr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;胡萝卜&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;***&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_start(&lt;&#x2F;span&gt;&lt;span&gt;censor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;小白兔最爱吃胡萝卜&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;输出：小白兔最爱吃***
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fan-she&quot;&gt;反射&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ca.php.net&#x2F;manual&#x2F;en&#x2F;book.reflection.php&quot;&gt;reflection&lt;&#x2F;a&gt;，很强大，基本上能还原一个类的实际面貌。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ctype-function&quot;&gt;ctype function&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;ctype_alnum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为字母和数字的组合
&lt;&#x2F;span&gt;&lt;span&gt;ctype_digit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为数字
&lt;&#x2F;span&gt;&lt;span&gt;ctype_alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为字母
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kuai-su-xiang-shu-zu-tian-jia-yuan-su&quot;&gt;快速向数组添加元素&lt;&#x2F;h3&gt;
&lt;p&gt;如果是追加一个元素的话，推荐使用这种方法，而不是 array_push&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;xu-lie-hua-fan-xu-lie-hua&quot;&gt;序列化&#x2F;反序列化&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;serialize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;unserialize
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;json-zhi-chi&quot;&gt;json 支持&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;json_encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;json_decode
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;huo-qu-dui-xiang-de-lei&quot;&gt;获取对象的类&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_class(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dong-tai-diao-yong-han-shu-fang-fa&quot;&gt;动态调用函数&#x2F;方法&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;call_user_func_array
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cuo-wu-yi-chang-chu-li&quot;&gt;错误&#x2F;异常处理&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;set_error_handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;set_exception_handler
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br &#x2F;&gt;
&lt;h3 id=&quot;wang-you-ti-gong&quot;&gt;网友提供&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;array-walk-via-cloudchen&quot;&gt;array_walk (via cloudchen)&lt;&#x2F;h3&gt;
&lt;p&gt;array_walk() 能让结构化数据的处理逻辑更清晰.
实现接近 js 的传入函数 as 参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;create_sth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$walked_value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;delete_sth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$walked_value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fetch_directory_contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_walk(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;create_sth&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_walk(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;delete_sth&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)如何辨别优秀的程序员</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-recognize-good-programmers/</link>
            <guid>https://limboy.me/posts/how-to-recognize-good-programmers/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.inter-sections.net&#x2F;2007&#x2F;11&#x2F;13&#x2F;how-to-recognise-a-good-programmer&#x2F;&quot;&gt;原文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这并不是想象的那么容易。工作经历并不能说明什么问题，因为优秀的程序员并非总是有“正式”的工作经验来说明他们有多优秀。事实上工作经历往往会误导。&lt;&#x2F;p&gt;
&lt;p&gt;我觉得自己是一个非常优秀的程序员。同时，我也花费了大量的时间在商业圈，找技术人员做项目，面试别人等等。正是如此，我觉得自己有足够的经验去识别一个优秀的程序员，我会在下文中分享，希望能够帮助那些 “商业人士”更好地找到人才。那些有可能成为优秀程序员但还没有摸到门道的，也可以阅读这篇文章，从而发现自己需要改进的地方。&lt;&#x2F;p&gt;
&lt;p&gt;在 Paul Graham 的这篇“18 个错误导致创业失败”文章里提到：&lt;&#x2F;p&gt;
&lt;p&gt;bq. 在 90 年代，导致绝大多数创业失败的是那些劣质的程序员，很多这样的公司是几个商人共同创立的，他们有聪明的想法，然后让程序员来实现这些想法。但事实上要困难地多——因为那些企业家他们无法分辨一个程序员是否优秀。他们甚至都没有机会见到那些顶极的程序员。&lt;&#x2F;p&gt;
&lt;p&gt;事实上，那些商人选择自己认为优秀的程序员(比如简历上提到自己曾是微软的工程师)，但事实上不是。然后会发现创业之路就像二次大战一样艰难。&lt;&#x2F;p&gt;
&lt;p&gt;如果你不是程序员，如何来挑选优秀的程序员呢？我觉得没有最佳答案。我想说你最好找一个优秀的程序员来帮你筛选。但你如何找到这个人？&lt;&#x2F;p&gt;
&lt;p&gt;这点上，我不太同意 Graham。我觉得优秀的程序员有很多特质。即使一个商人也能识别。我下面来一一列举。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-ji-qing&quot;&gt;#1 激情&lt;&#x2F;h3&gt;
&lt;p&gt;在我与别人合作的经历中，遇到过很多技术员：他们写程序，因为他们觉得这是份不错的工作。业余时间从来不会去编程。当他们知道我家里有一个局域网和 3 台电脑时，显得很震惊。他们只是在工作，不会主动学习新事物，除非工作中需要，或者为了找份工作。当一天的工作结束时就再也不想谈论它了。有些人觉得工作之余谈工作不适合社交。但如果你想结识一个优秀的程序员，体现出自己的激情是很重要的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-zi-xue&quot;&gt;#2 自学&lt;&#x2F;h3&gt;
&lt;p&gt;时过境迁，编程语言也在不断进步和完善，新的技术会出现，新的标准也会到来。当然不是说，所有优秀的程序员都对那些事物有浓厚的兴趣，但有很多程序员他们从来不会主动学习新事物，除非迫不得已，因为他们不喜欢学习新东西。这些人往往是在大学时学的计算机专业，然后渴望毕业后找到份好工作。&lt;&#x2F;p&gt;
&lt;p&gt;如果你打算雇佣某个程序员，只要提到“我能掌握那个，只要把我送到培训中心一个星期”。不要雇佣那样的人。优秀的程序员不需要培训中心。事实上，优秀的程序员会提到你从未听过的信技术，然后向你解释为什么必须用它，即使他都不知道如何使用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-cong-hui&quot;&gt;#3 聪慧&lt;&#x2F;h3&gt;
&lt;p&gt;有些商人觉得缺乏情商就是不够聪慧。事实上聪慧包括很多因素，情商只是其中之一。优秀的程序员不是不会说话，事实上，优秀的程序员通常是你认识的人中最聪明的。他们中的很多人有很好的社交能力。我参加过几次 London Ruby User 聚会，除了少数几个特例，大多数人都很聪明，善谈，兴趣广泛等等。但你不会在公众场合看到他们谈论，然后会想“这是怎样的一帮 geek 啊”。&lt;&#x2F;p&gt;
&lt;p&gt;不要认为那些话不多的人就是好的程序员。他们不是，如果在完全放松的环境下都不能很好地交流，他们不是优秀程序员的概率会很大。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-yin-cang-ji-neng&quot;&gt;#4 隐藏技能&lt;&#x2F;h3&gt;
&lt;p&gt;这跟激情有关，也是优秀程序员的一个特征。&lt;&#x2F;p&gt;
&lt;p&gt;我在 9 岁时就开始编程，那时还不是在 PC 上，后来迁移到了 PC，学了 Pascal。当我 14 岁时，用 C 和 Assembler 写了一个 raycasting 引擎。花费了大量的时间与显卡打交道，终于可以看到很酷的图形效果。在这之前，我只是个二流的程序员，没有信心做任何复杂的事情。当我完成它时，我收获了自信。我知道只要我想，再难的事情我都能搞定。&lt;&#x2F;p&gt;
&lt;p&gt;这会在我的简历上出现吗？不会&lt;&#x2F;p&gt;
&lt;p&gt;我深信大多数优秀的程序员都有类似的冰山不会出现在简历上。他们觉得这不是“合适的经历”。可以对那些潜在的优秀程序员问一个这样的问题“你能告诉我一个自己独立完成的项目吗？即使是不完整的，在业余时间开发的，没有出现在简历上？”如果他们不能，他们很可能不是优秀的程序员。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-duo-chong-ji-neng&quot;&gt;#5 多种技能&lt;&#x2F;h3&gt;
&lt;p&gt;这个很简单，由于对新鲜事物的热情和强烈的求知欲，那些 22 岁以上的程序员通常掌握好几门语言。这不可避免，学习一个新技术是最有意思的事情之一。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-zheng-shu&quot;&gt;#6 证书&lt;&#x2F;h3&gt;
&lt;p&gt;这其实不是一个优秀程序员的特征，很多有计算机相关证书，很多没有。年龄也一样，有些 18 岁就展露头角，有些 40 岁才有所成就。我的经历告诉我，大多数平凡或者差的程序员大学时才开始编程，为了他们的计算机课程。而优秀的程序员编程的历史可以追溯到更远。如果你的准程序员在大学前没有接触过变成，他所有的经历都是从第一份工作开始的，他很可能不是一个优秀的程序员。
声明&lt;&#x2F;p&gt;
&lt;p&gt;上面或者下面所说的特征不是必备的。你很可能会发现 NB 的程序员不符合这些特征。我的观点是，你不太可能找到一个优秀的程序员不符合这些特征中的任意一条。当然，你也会发现差的程序员也符合这些特征中的某几个。但我深信，一个程序员，这些特征符合地越多，那么他是优秀程序员的概率就越大，作为一个商人，你可以信赖这些人。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;以下几个特征能够帮助你找到优秀的程序员&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对技术充满热情&lt;&#x2F;li&gt;
&lt;li&gt;编程是生活的一部分&lt;&#x2F;li&gt;
&lt;li&gt;会在你的耳边谈论技术相关的话题，如果你有兴趣的话&lt;&#x2F;li&gt;
&lt;li&gt;主动学习新技术&lt;&#x2F;li&gt;
&lt;li&gt;对自己不能认同的技术，感到不适应，无法全身心投入&lt;&#x2F;li&gt;
&lt;li&gt;聪明，对很多话题都感兴趣&lt;&#x2F;li&gt;
&lt;li&gt;在大学之前就开始接触编程了&lt;&#x2F;li&gt;
&lt;li&gt;有隐藏的冰山，自己完成的大项目&lt;&#x2F;li&gt;
&lt;li&gt;对许多不相关的技术有了解&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>嵌套评论的一个数据库设计技巧</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/nested-comments/</link>
            <guid>https://limboy.me/posts/nested-comments/</guid>
            <description>&lt;p&gt;前些日子看 drupal 源码时学到的。要实现嵌套评论，只要在表里加一个 parent_id 字段即可，添加评论的时候很方便，不过显示起来就会慢&#x2F;麻烦一点。其实只要在表里再添加一个字段，就可以高效&#x2F;快速的显示评论了，这个字段就是 thread。看一下 SQL 构造语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT EXISTS `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;comments&lt;&#x2F;span&gt;&lt;span&gt;` (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt; AUTO_INCREMENT,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`parent_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`topic_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`user_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`username` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`created` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`changed` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`status` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`content` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`thread` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id`&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;) ENGINE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;MyISAM  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DEFAULT&lt;&#x2F;span&gt;&lt;span&gt; CHARSET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;utf8;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;thread 类似这样&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;存储在thread字段中的数据类似下面
&lt;&#x2F;span&gt;&lt;span&gt;1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.2&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.a&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;2&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;加上&amp;quot;&#x2F;&amp;quot;是因为&amp;quot;&#x2F;&amp;quot;的 ascii 值小于任何数字，但大于&amp;quot;.&amp;quot;，这样如果把主回复按时间倒序排序的话，直接&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`comments` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; topic_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ORDER BY&lt;&#x2F;span&gt;&lt;span&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DESC
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果把主回复按时间正序排序(从小到大)的话，就有问题了，因为&amp;quot;1&#x2F;&amp;quot; &amp;gt; &amp;quot;1.1&#x2F;&amp;quot;，结果就是&amp;quot;1.1&#x2F;&amp;quot;在&amp;quot;1&#x2F;&amp;quot;前面，这当然是不合理的，只要把最后的&amp;quot;&#x2F;&amp;quot;去掉就行了，这样&amp;quot;1&amp;quot;就小于&amp;quot;1.1&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`comments` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; topic_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ORDER BY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;SUBSTRING&lt;&#x2F;span&gt;&lt;span&gt;(c.thread, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, (LENGTH(c.thread) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ASC
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显示时，可以根据 thread 里&amp;quot;.&amp;quot;的数量处理缩进(回复的回复)&lt;&#x2F;p&gt;
&lt;p&gt;如果你还有更好的方法，欢迎交流&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)不再查看简历</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/never-read-another-resume/</link>
            <guid>https://limboy.me/posts/never-read-another-resume/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.inc.com&#x2F;magazine&#x2F;20100601&#x2F;never-read-another-resume_Printer_Friendly.html&quot;&gt;原文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;雇佣员工就像交朋友。好朋友能让你的生活丰富多彩。交友不慎会让你焦头烂额。跟谁一起工作比约谁一起出去重要得多，因为你跟同事相处的时间比跟朋友相处的时间要多。&lt;&#x2F;p&gt;
&lt;p&gt;等等，我为什么会谈到招人？解雇率不是很高吗？不是有很多人找不到工作吗？这在其他行业是很平常的事，但我们不是。事实上，我们公司的招聘版(为程序员和设计师提供职位)有大量的职位。我们最近还招了两个员工。&lt;&#x2F;p&gt;
&lt;p&gt;我想分享一下 37signals 是如何招聘的。我们很少会去招人，我们只有 20 个成员，但总结了一套方法，非常好用。11 年里，只有两位员工离开了 37signals，其中一个在七年后又重新回归。&lt;&#x2F;p&gt;
&lt;p&gt;我们是怎么做的呢？首先，我们不着急聘用，除非迫不得已。招人是为了减轻目前的负担，而不是作为人才储备。我们绝不允许自己有这样的举动。&lt;&#x2F;p&gt;
&lt;p&gt;如果遇上了合适的人，但没有合适的职位，我们会非常坦然地放弃。我认识好几个优秀的程序员和设计师，也愿意让他们加入我们的团队，但是很不巧，没有空位。&lt;&#x2F;p&gt;
&lt;p&gt;我见过好多公司为了那些优秀的人才而开辟职位，只是为了确保他们不会离开。但是招了人，却不让他们做正事，这是对他们的不尊重，对公司也没有好处。优秀的人总是希望能做一些确实有用的东西，这样的结果只能是走人(译者注：除非他想在薪资有保障的情况下，暗地里做自己的事，哈哈)&lt;&#x2F;p&gt;
&lt;p&gt;小团队逼迫着你专注，只做那些必须要做的，而不是想做的。必须学会安排优先级，专注下一件最重要的事。而不是”如果…，那多帅啊”，这样的事太多了。&lt;&#x2F;p&gt;
&lt;p&gt;如何知道你确实需要招人了？大概如下：你试着亲身去做这项工作吗？如果没有，那么你并没有真正理解该职位。在没有吃透的情况下，很难判断谁才是你想要的人。&lt;&#x2F;p&gt;
&lt;p&gt;几年前，我们想招一个业务拓展人员，他能解答合作伙伴的一些咨询以及发掘新的合作机会。因为我们总是忙着别的事情，很可能忽略了这类邮件。&lt;&#x2F;p&gt;
&lt;p&gt;于是我们开始一轮轮的面试，有些人有非常好的条件和经历。但是我们以前没有招过这样的人，本身也没有经验，所以很难继续跟候选人探讨下去，也无法确切地评定面试者的实际水平。&lt;&#x2F;p&gt;
&lt;p&gt;所以面了一堆人后，我们停止了脚步，开始自己来处里客户的咨询。很快发现，并没有想像的那么困难。如果没有做出这样的决定，很可能招了我们并不需要的人，这是我们不想看到的，这对该员工也不好。&lt;&#x2F;p&gt;
&lt;p&gt;我们也从别的职位中获取了这样的经验。在聘用第一个客服人员前，我处理所有的客户服务。大概花了两年的时间回复用户的电子邮件。在聘用第一个系统维护人员前，我的合作伙伴 David 和程序员 Jamis 负责处理所有的系统管理。最后我们找到了非常中意的人，因为我们太了解这个职位了。&lt;&#x2F;p&gt;
&lt;p&gt;在考察候选者时，我们也有一些小技巧。比如我们不看简历。就我个人的经验，它们无不夸大其词，半真半假，甚至一派胡言。即使他们不是有意要欺骗你，也会夸大事实。”5 年的经验”到底是什么意思？&lt;&#x2F;p&gt;
&lt;p&gt;我们真正看重的是自荐信。它说明了一切。它能告诉你这个人是想要这个职位还是其他任何职位。而且自荐信能让有些事情异常清晰：它能反映你的写作能力。拼写检查工具能检查拼写，但它们不能帮助你写作。还有一点：如果有几个差不多的，选择那个写得更好的。&lt;&#x2F;p&gt;
&lt;p&gt;我们也看他的努力程度，他到底有多想得到该职位？我们招了一个设计师 Jason Zimdars，因为 1) 他很优秀。 2) 他比其它人更想得到该职位。他专门为我们建了一个网站，列举了他的能力，很少有人能像他这么用心(jasonzimdars.com&#x2F;svn)。&lt;&#x2F;p&gt;
&lt;p&gt;面试期间，我们希望他能多提问题，但问题和问题还不一样。以”怎样”开头的问题，会在我们的心里亮红灯。我们更希望他问”为什么”，这是对某个领域感兴趣的表现。”怎样”是一个标志，说明他解决困难的能力不够，会更依赖他人。所以尽量少问”怎样才能”之类的问题。&lt;&#x2F;p&gt;
&lt;p&gt;在正式聘用前，我们会测试该候选人。我们给设计师一个礼拜的时间来完成某个任务，无论是否录用都会支付$1500 作为补偿。如果他还在工作，那就用一个月作为测试周期，给他一个实际的项目，考验他的压力承受能力，实际水平和沟通能力。用真实的项目作为测试帮助我们过滤了一些候选人，同时也把人才留了下来。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我们不会让地理位置成为拦路虎。我们雇佣最优秀的人，无论他在哪里。我们的总部在芝加哥，但我们的程序员在 Idaho,California，系统管理员在 North Carolina 和 downstate Illinois，设计师在 Oklahoma 和 Colorado，一个写手在 New York City，其他人在欧洲。这明显不适合需要面对面交谈的，但对大多数人来说，这是可行的，人才到处都是，就看你能不能找到了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php 的多进程</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-process-control/</link>
            <guid>https://limboy.me/posts/php-process-control/</guid>
            <description>&lt;p&gt;一般有两种方法，一种是使用 PHP 自带的 pcntl_*函数(仅限 linux)，另一种就是使用 popen&#x2F;proc_open，然后在 php 内部控制进程数量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-pcntl-han-shu&quot;&gt;使用 pcntl_*函数&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 提供了一系列的 pcntl_*函数，顾名思义就是 process control functions，专门用来管理进程的。最常用的就是 pcntl_fork 和 pcntl_wait。&lt;&#x2F;p&gt;
&lt;p&gt;pcntl_fork 的作用就是从当前的进程再派生出一个子进程。pcntl_wait 的作用是挂起当前进程，直到一个子进程中止。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;配合pcntl_signal使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(ticks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;最大的子进程数量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;当前的子进程数量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;当子进程退出时，会触发该函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sig_handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sig&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sig&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;SIGCHLD:
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SIGCHLD received&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;注册子进程退出时调用的函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_signal(&lt;&#x2F;span&gt;&lt;span&gt;SIGCHLD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;sig_handler&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 这个函数会返回两个值，一个为0，表示子进程；一个为正整数表示子进程的id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 所以if和else里的两段代码都会执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * if里的代码是父进程执行的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * else里的代码是子进程执行的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_fork()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里是父进程执行的代码
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果子进程数超过了最大值，则挂起父进程
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;也就是说while语句不会继续执行
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$max&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_wait(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里是子进程执行的代码
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果要执行其他命令的话，使用pcntl_exec
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;starting new child | now we have &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; child process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面这段代码就是保证有 5 个子进程一直在干活，如果$child数量大于$max，就等子进程结束后再继续运行。子进程结束后会调用 sig_handler 函数，sig_handler 会将$child 数量减 1，那边 while 继续执行。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-popen-proc-open&quot;&gt;使用 popen&#x2F;proc_open&lt;&#x2F;h3&gt;
&lt;p&gt;popen 会创建一个管道来连接该进程，然后使用 fread&#x2F;fgets&#x2F;stream_get_contents 来读取该进程返回的结果。跟 exec 或 system 之类的函数不同的是，exec 会等待命令执行完成，再运行下面的代码，但 popen 不会。proc_open 又更加强大一些，支持 stdin 和 stdout，路径设置等等。&lt;&#x2F;p&gt;
&lt;p&gt;因为这些函数只负责创建，没有相应的管理方法，所以只能在 PHP 文件内部自己来实现。
demo(引用自张宴——&lt;a href=&quot;http:&#x2F;&#x2F;blog.s135.com&#x2F;post&#x2F;311&#x2F;&quot;&gt;PHP 多进程并发控制的测试用例&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;worker_processes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;popen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;bin&#x2F;sh &#x2F;opt&#x2F;zhangyan.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; &amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;worker_processes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$limit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;允许推到后台的最大进程数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;popen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ps -ef | grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;opt&#x2F;zhangyan.sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; | grep -v grep | wc -l&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fread(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;512&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$limit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$line&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;暂停1秒钟
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;blog.s135.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;模拟从队列文件中读取到的数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Idle process number: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cheng-xu-de-luo-ji&quot;&gt;程序的逻辑：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置&#x2F;opt&#x2F;zhangyan.php 最多允许生成 500 个子进程；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当&#x2F;opt&#x2F;zhangyan.php 读取到一条数据后，将允许生成的子进程数减 1（空闲进程数$p_number=500-1=499），然后将数据交给&#x2F;opt&#x2F;zhangyan.sh 去后台处理，不等待&#x2F;opt&#x2F;zhangyan.sh 处理结束，继续读取下一条数据；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当允许生成的子进程数减至 0 时（空闲进程数$p_number=0），&#x2F;opt&#x2F;zhangyan.php 会等待 1 秒钟，然后检查后台还有多少个&#x2F;opt &#x2F;zhangyan.sh 子进程尚未处理结束；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果 1 秒钟之后&#x2F;opt&#x2F;zhangyan.php 发现后台的&#x2F;opt &#x2F;zhangyan.sh 子进程数还是 500（空闲进程数$p_number=0），会继续等待 1 秒钟，如此反复；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果&#x2F;opt &#x2F;zhangyan.php 发现后台尚未处理结束的&#x2F;opt&#x2F;zhangyan.sh 子进程数减少到 300 个了（空闲进程数$p_number=500-300=200），那么&#x2F;opt&#x2F;zhangyan.php 会再往后台推送 200 个&#x2F;opt&#x2F;zhangyan.sh 子进程；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;总体来说还是使用 pcntl_*系函数更方便一些，逻辑也更清楚。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>使用github作为博客引擎</title>
            <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/make-github-as-blog-engine/</link>
            <guid>https://limboy.me/posts/make-github-as-blog-engine/</guid>
            <description>&lt;p&gt;在介绍之前，先普及一下基础知识，大鸟们直接跳过。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-git&quot;&gt;什么是 git&lt;&#x2F;h3&gt;
&lt;p&gt;git 是一个分布式版本控制工具(DVCS)，不需要服务端软件支持(即使在地铁里也可以正常 commit)，Linux 内核开发用的版本控制工具就是它。&lt;&#x2F;p&gt;
&lt;p&gt;常用的 SVN 属于集中式版本控制工具(CVCS)，需要在服务端开启 SVN 服务，然后客户端 checkout,commit,update。&lt;&#x2F;p&gt;
&lt;p&gt;更详细的介绍请参考&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Git_(software)&quot;&gt;维基百科&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-github&quot;&gt;什么是 github&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;github&amp;quot;:http:&#x2F;&#x2F;github.com&#x2F; 的标语是：&amp;quot;secure source code hosting and collaborative development&amp;quot;。一个基于 git 的类似 google code 的代码仓库，付费版的用户可以创建私有仓库，支持多人开发。很多项目都选择了 github 来保存代码，如&amp;quot;jQuery&#x2F;reddit&#x2F;RoR&#x2F;CakePHP&#x2F;Redis&amp;quot;等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-pages&quot;&gt;github pages&lt;&#x2F;h3&gt;
&lt;p&gt;先说说 pages 功能，blog 就是在 pages 的基础上搭建的。如果英文不错的话，可以直接&lt;a href=&quot;http:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;浏览此页&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建一个用户的页面很简单，假设你的用户名为 foo&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个仓库(repository)，名称填&amp;quot;foo.github.com&amp;quot;，创建&lt;&#x2F;li&gt;
&lt;li&gt;在本地新建一个文件夹，假如为 foo,在 foo 里面新建一个 index.html 页面，随便输入点内容&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;&#x2F;code&gt; 初始化，&lt;code&gt;git add .&lt;&#x2F;code&gt; 把 index.html 加入到仓库中，&lt;code&gt;git commit&lt;&#x2F;code&gt; 提交修改&lt;&#x2F;li&gt;
&lt;li&gt;添加 github 的分支 &lt;code&gt;git remote add origin git@github.com:foo&#x2F;foo.github.com.git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;提交到 github 分支 &lt;code&gt;git push origin master&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;过 1 分钟左右，浏览 foo.github.com，就可以看到刚刚创建的 index.html 文件了。&lt;&#x2F;p&gt;
&lt;p&gt;除了创建用户页面，还可以针对每个项目单独创建项目的主页，这不是本文的重点，有兴趣的可以&lt;a href=&quot;http:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;浏览此页&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuang-jian-blog&quot;&gt;创建 blog&lt;&#x2F;h3&gt;
&lt;p&gt;终于扯到正题上了(-,-)，前面已经说过如何创建 html 页面，其实已经可以写博客了，创建一个 index.html 页面，在里面列出写过的文章，点击标题进去后又是一个手动创建的 html 页。就是太麻烦了，一点都不酷，说不定还会被 MM 鄙视。&lt;&#x2F;p&gt;
&lt;p&gt;github 当然知道这个问题，所以他们创建了&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;jekyll&quot;&gt;jekyll 模板引擎&lt;&#x2F;a&gt; 。简单来说，就是你可以用&lt;a href=&quot;http:&#x2F;&#x2F;www.textism.com&#x2F;tools&#x2F;textile&#x2F;?sample=2&quot;&gt;textile&lt;&#x2F;a&gt; 或者&lt;a href=&quot;http:&#x2F;&#x2F;daringfireball.net&#x2F;projects&#x2F;markdown&#x2F;syntax&quot;&gt;markdown&lt;&#x2F;a&gt;语法来写博客，提交到 github 后，会自动转换成 html。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;sites&quot;&gt;这里&lt;&#x2F;a&gt;有很多网站&#x2F;博客，都是基于 github 的 jekyll 模板开发的，如果觉得哪个不错，可以查看 source。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;mojombo.github.com&quot;&gt;这个仓库&lt;&#x2F;a&gt;，里面有一些特殊的文件&#x2F;文件夹：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;config-yml&quot;&gt;_config.yml&lt;&#x2F;h3&gt;
&lt;p&gt;存储了一些设置，大部分的设置都可以通过命令行指定，但放到配置文件里更方便些&lt;&#x2F;p&gt;
&lt;h4 id=&quot;layouts&quot;&gt;_layouts&lt;&#x2F;h4&gt;
&lt;p&gt;_layouts 文件夹存放的是模板文件，文章会被渲染到这些模板里，{{ content }}变量指代的是文章内容&lt;&#x2F;p&gt;
&lt;h4 id=&quot;posts&quot;&gt;_posts&lt;&#x2F;h4&gt;
&lt;p&gt;这里就是真正存放博客文章的地方了，文件命名要遵守这种格式:year-month-day-title.markup&lt;&#x2F;p&gt;
&lt;h4 id=&quot;site&quot;&gt;_site&lt;&#x2F;h4&gt;
&lt;p&gt;这个文件夹是程序生成的，如果本地没有安装 jekyll 的话，是不会有这个文件夹的，如果想要先本地预览一下，再提交到 github，最好通过.gitignore 把这个文件夹排除。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;index-html&quot;&gt;index.html&lt;&#x2F;h4&gt;
&lt;p&gt;这个文件也有一个&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;yaml-front-matter&quot;&gt;yaml 前缀&lt;&#x2F;a&gt; ，可以指定使用哪个模板，标题等等，所有根文件夹下的.html&#x2F;.htm&#x2F;.textile&#x2F;.markdown 都会被解析。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;other-files-folders&quot;&gt;other files&#x2F;folders&lt;&#x2F;h4&gt;
&lt;p&gt;上面没有列出的文件&#x2F;文件夹都会被 jekyll 放到_site 文件夹下，如 css&#x2F;image&#x2F;script 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jekyll-de-an-zhuang&quot;&gt;jekyll 的安装&lt;&#x2F;h3&gt;
&lt;p&gt;参考&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;install&quot;&gt;安装页&lt;&#x2F;a&gt; ，如果使用时提示&amp;quot;liquid requires RubyGems version &amp;gt;= 1.3.7&amp;quot;，可以在&lt;a href=&quot;http:&#x2F;&#x2F;rubyforge.org&#x2F;frs&#x2F;?group_id=126&quot;&gt;这里&lt;&#x2F;a&gt; 下载对应的文件，安装即可。&lt;&#x2F;p&gt;
&lt;p&gt;安装完之后，为了避免路径调用问题，可以在 apache&#x2F;nginx 里给对应的文件夹(&#x2F;path&#x2F;to&#x2F;_site)绑定一个本地域名，如&amp;quot;lc.foo.github.com&amp;quot;，在终端里输入&amp;quot;jekyll --pygments&amp;quot;，然后就可以用该域名访问本地博客了，如果一切正常，再提交到 github&lt;&#x2F;p&gt;
&lt;p&gt;PS:如果你之前的博客是基于 wordpress&#x2F;movable type&#x2F;typo 4+，可以参考这篇&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;blog-migrations&quot;&gt;迁移指南&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bang-ding-yu-ming&quot;&gt;绑定域名&lt;&#x2F;h3&gt;
&lt;p&gt;这个就更简单了，新建一个 CNAME 文本文件，在里面输入域名，如&amp;quot;blog.leezhong.com&amp;quot;，然后在域名提供商里，指定该域名的 CNAME 为&amp;quot;foo.github.com&amp;quot;，搞定&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-jia-ping-lun-gong-neng&quot;&gt;添加评论功能&lt;&#x2F;h3&gt;
&lt;p&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;disqus.com&quot;&gt;disqus&lt;&#x2F;a&gt; ，整个注册和使用流程还是挺清晰易懂的，这里就不多说了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao-wen-zhang&quot;&gt;参考文章&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;jekyll wiki&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;&quot;&gt;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;github blog&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;272-github-pages&quot;&gt;http:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;272-github-pages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;publishing a blog with github and jekyll&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;blog.envylabs.com&#x2F;2009&#x2F;08&#x2F;publishing-a-blog-with-github-pages-and-jekyll&quot;&gt;http:&#x2F;&#x2F;blog.envylabs.com&#x2F;2009&#x2F;08&#x2F;publishing-a-blog-with-github-pages-and-jekyll&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h3&gt;
&lt;p&gt;之前一直用的 wordpress，但是太臃肿了，而且有安全隐患，还得有一个 PHP 空间，访问速度也得不到保证。平时 github 用得比较多，正好他们提供&amp;quot;博客&amp;quot;服务，正合我意，初步使用下来，没有什么问题，能在本地用 vim 写 textile 语法的博客是一件多么爽的事情啊，还可以本地预览最终效果，数据也不会轻易丢失。&lt;&#x2F;p&gt;
&lt;p&gt;最后再次感谢 github 提供了这么好的服务，如果对 github 的创业历程感兴趣，可以参考&lt;a href=&quot;http:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2008&#x2F;10&#x2F;18&#x2F;how-i-turned-down-300k.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
    </channel>
</rss>