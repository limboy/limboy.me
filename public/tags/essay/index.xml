<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Limboy - essay</title>
        <link>https://limboy.me</link>
        <description></description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://limboy.me/tags/essay/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 22 Mar 2022 00:00:00 +0000</lastBuildDate>
        
        <item>
            <title>拼音猜成语</title>
            <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/idiom/</link>
            <guid>https://limboy.me/posts/idiom/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pinyincaichengyu.com&#x2F;&quot;&gt;拼音猜成语&lt;&#x2F;a&gt; 是我第一款 PV 超过百万的产品，这里就来聊聊它背后的故事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;data.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;data.jpg 1128.5w,&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;data.jpg 1128.5w&quot;
    sizes=&quot;(max-width: 1128.5px) 100vw, 1128.5px&quot; width=&quot;1128.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h3&gt;
&lt;p&gt;有一段时间在 Twitter 上经常能看到有推友在发各种颜色的方块，原来是一个叫 &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;games&#x2F;wordle&#x2F;index.html&quot;&gt;Wordle&lt;&#x2F;a&gt; 的英文猜词小游戏，试玩了后发现还挺不错的，轻量、节制还益智。就拉妹子一起来玩，有时还会在零点一起挑战。但非母语也影响了游戏体验，遇到一些生僻的词就只能束手就擒了。某天走在路上就在想，是不是可以做一个成语版的 Wordle，用拼音？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa&quot;&gt;开发&lt;&#x2F;h3&gt;
&lt;p&gt;有了方向之后，就开始细化具体的游戏机制，发现只要把成语拆解为拼音组合，就可以像 Wordle 那样猜了。较快地搭了一个原型后，让妹子体验了下，发现可以玩，好像还挺好玩，这也给了我一些信心。之后大概花了 1 个星期的时间完善这个小游戏，从琢磨游戏机制到设计界面和交互，到实现功能、填充词库。这段时间在学习前端，正好可以通过这个项目来练手。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-ce&quot;&gt;内测&lt;&#x2F;h3&gt;
&lt;p&gt;其实就是拉人来玩。在常去的咖啡馆也邀请了店员来感受下这个游戏，有表示拼音不太友好的，但也有顺利玩下来并猜到答案的，看起来玩法上应该还 OK，拼音字母可能会是个障碍，但了解了玩法之后应该问题不大。也在小群里让小伙伴们体验了下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shang-xian&quot;&gt;上线&lt;&#x2F;h3&gt;
&lt;p&gt;开发完上线后，在 &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;_limboy&#x2F;status&#x2F;1483622557782003712?s=20&quot;&gt;Twitter&lt;&#x2F;a&gt; 上发了一下，反响还不错，也收到了不少反馈。比如没有对输入做限制可以「作弊」，对字母判定上有一些疑惑，有的同学表示太难了，也有觉得简单的。结合这些反馈做了些调整，比如只能输入有效的拼音组合，对键盘做了字母高亮等，自己玩下来感觉难度正好。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuan-bo&quot;&gt;传播&lt;&#x2F;h3&gt;
&lt;p&gt;经过几天的自然传播后，一天有几千 UV，Twitter 上搜索「pinyincaichengyu.com」也能看到有不少人在玩这个游戏。查看访问统计，一开始 Twitter 的来源最多，几天后从 Facebook、Google 和 Instagram 来的越来越多。有一段时间新加坡的玩家占了大多数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fan-kui&quot;&gt;反馈&lt;&#x2F;h3&gt;
&lt;p&gt;Side Project 的成就感除了完成作品之外，还有很大一部分是用户的反馈。从来信才知道有不少国外的朋友在通过这个小游戏学习中文，也有教汉语的老师会在课后跟同学们一起玩这个游戏，有在新加坡的电台听到介绍这个游戏的。当然也有反馈游戏 Bug 和 Feature 的，比如词库里「厚积薄发」的「薄」声调被标记成了「bao」，然后那个时间段就收到了不少反馈该问题的来信。&lt;&#x2F;p&gt;
&lt;p&gt;因为游戏反响还不错，有国外的媒体来信希望了解这个游戏更多的信息，如澎湃新闻英文频道、卫报，也有国内媒体，这个确实是意料之外。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-jin&quot;&gt;改进&lt;&#x2F;h3&gt;
&lt;p&gt;第一版上线后，代码质量感觉还是不够好，于是从头开始又写了一遍，这次代码设计上更加合理，流程上也更加规范，加入了测试集和 Storybook，顺便把觉得不错的 Feature 如声调提示、统计信息、成语解释等给加上了，对 UI 也做了些优化。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;popup.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;popup.jpg 672w,&amp;#x2F;posts&amp;#x2F;idiom&amp;#x2F;popup.jpg 672w&quot;
    sizes=&quot;(max-width: 672px) 100vw, 672px&quot; width=&quot;672&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  加入「游戏统计」这块还有点小挑战，因为没有用户系统，只能通过设备来判断，而发给服务器的请求又很容易伪造，所以需要一套防护措施。采用的是客户端加密的方式，&lt;code&gt;import&lt;&#x2F;code&gt; 一段加密后的 js，然后生成一个全局变量（用来验证和避免重放攻击），因为这段 js 用到了很多浏览器相关的 API，所以不太好通过 cli 的方式直接引用（当然可以用 headless 工具，不过这也增加了成本）
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;kai-yuan&quot;&gt;开源&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;idiom&quot;&gt;开源&lt;&#x2F;a&gt;就像是个节点，让这个小游戏的源码出现在了公共区域，虽然不一定会有多少人关注。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-huo&quot;&gt;收获&lt;&#x2F;h3&gt;
&lt;p&gt;通过这个项目更加熟悉了前端，包括工程化、React、CSS、JS、Browser API 等等，也感受到了 Side Project 的乐趣，更重要的是对自己的长处和短板有了更清晰的认识，为之后的发展方向选择提供了样本。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于 Bytetalk</title>
            <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bytetalk/</link>
            <guid>https://limboy.me/posts/bytetalk/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;podcast&#x2F;6177bab6b69226ed16a3ed41&quot;&gt;Bytetalk&lt;&#x2F;a&gt; 是去年的一个尝试性项目，以访谈的形式与不同领域的程序员聊聊他们的故事。一方面可以拓展自己的视野，另一方面也能给听众一些启发。第一季 7 期录制下来，结果还不错，感谢各位嘉宾朋友和听众们。等接下来有了更明确的规划后，再来开始第二季。这里简单回顾下 Bytetalk 背后的一些故事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;data.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;data.jpg 1086w,&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;data.jpg 1086w&quot;
    sizes=&quot;(max-width: 1086px) 100vw, 1086px&quot; width=&quot;1086&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之所以选择播客，而不是更常见的视频，主要是因为自己在镜头前会变得不自然，访谈嘉宾可能也会有这方面的困扰，另一方面视频的录制和剪辑成本也会更高。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;6177bab6b69226ed16a3ed42&quot;&gt;第一期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;第一期节目尤为重要，因为在录制播客方面的经验几乎为零，所以需要容忍度高、能聊又互相熟悉的嘉宾。为此借着聚餐的名义，将字节的几个小伙伴「诱骗」到家里，期间还玩了会桥牌。因为是第一次录多人聊天，在设备调试这块就花了近半小时，好在最后的效果还能接受。&lt;&#x2F;p&gt;
&lt;p&gt;第一期节目没有特定的主题，主要围绕一些常见的话题展开讨论，如：如何保持对工作的热情，提升竞争力，度过 35 岁危机等等。因为相互之间比较熟悉，所以聊天的氛围还不错。在推上发了之后，也收到了些正面反馈。&lt;&#x2F;p&gt;
&lt;p&gt;通过这一期节目，基本把播客的整个制作流程摸熟了，但作为主持人还有很大的成长空间，同时录音质量把控和后期剪辑这两块还有待改善。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-er-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;618208328a9c9c36e9977e44&quot;&gt;第二期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;有了第一次的经验，接下来找访谈对象时，会更有意识地去找有「聊点」的嘉宾，然后就想到了之前在凤凰网的同事，他现在已经在经营自己的潜水事业了，我很好奇他是如何进行这么大的跨行业转行。虽然好久没有联系，勾搭了之后，还是接受了邀请，这也给了我不小的信心。这一次是远程，访谈大纲和线上录制都通过飞书来完成，还挺顺利的（PS：那时还没有意识到录多轨音频的重要性 😂）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-san-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;618c9897fad86a854205b2a0&quot;&gt;第三期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;第三期我想邀请的嘉宾是&lt;a href=&quot;https:&#x2F;&#x2F;imtx.me&#x2F;&quot;&gt;图拉鼎&lt;&#x2F;a&gt;，我觉得应该会有很多人对独立开发者感兴趣，另一方面也好久没聊了，正好可以借录制播客聚聚。还会担心他档期比较紧或者对播客录制不太感冒，结果比我想的顺利。于是就找了一个茶馆，开始了第三期节目的录制&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;teahouse.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;teahouse.jpg 1000w,&amp;#x2F;posts&amp;#x2F;bytetalk&amp;#x2F;teahouse.jpg 1000w&quot;
    sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; width=&quot;1000&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;一个小插曲:&lt;&#x2F;strong&gt; 由于收听次数较多，VPS 流量已经顶不住了，听众也反馈有卡顿的现象。图拉鼎建议可以试下 Cloudflare，果然非常有效，而且还是免费，一下就让我成了 Cloudflare 的粉丝，并以股票支持。（虽然买了之后就一路降降降···）
&lt;&#x2F;aside&gt;&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;另一个小插曲:&lt;&#x2F;strong&gt; 我妈也会听这个节目，她说这一期她最喜欢。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;di-si-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61948a3ee2550ba6b3fa8f2b&quot;&gt;第四期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;前三期节目播出后，收到了 &lt;a href=&quot;https:&#x2F;&#x2F;lutaonan.com&#x2F;&quot;&gt;Randy&lt;&#x2F;a&gt; 的来信，让我觉得特别惊喜，因为自己之前也有关注过他，正好可以做一期播客。这个过程中我也感受到了 Randy 的认真和专业。为了这次播客，他准备了非常详细的文稿，针对访谈大纲基本都有详细的回应文字，音频录制设备也很完善。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-wu-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;619c9a7515e2f7df2eca996e&quot;&gt;第五期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在寻找下一个嘉宾时，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;yihong0618&quot;&gt;yihong&lt;&#x2F;a&gt; 出现在了我的视野，他的 running page、对跑步的坚持、对开源的热情、那股爱折腾的劲儿给我留了下了很深的印象，就想邀请他来聊一期，他也愉快地答应了。&lt;&#x2F;p&gt;
&lt;p&gt;这次的录制过程还有一些小插曲，我拉小蕊作为 co-host 来共同录制，结果我带上了收音设备，却忘了带上对应的连接线。然后就用了 AirPods 结合 iPhone 的录音。跟 yihong 一开始用的飞书视频，结果由于飞书对 VPN 的支持不好，导致通话效果不佳（后来才发现是 VPN 的原因），最后用的微信语音，双方各自录制自己的音轨，由于两边都缺少专业的录音设备，导致这次的音频效果不够理想（试了 GarageBand 的各种奇技淫巧，还是无法弥补音源质量上的不足）。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  &lt;strong&gt;PS:&lt;&#x2F;strong&gt; yihong 的东北话实在太有喜感了，哈哈。
&lt;&#x2F;aside&gt;&lt;h3 id=&quot;di-liu-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61b43114f7b64dfb09f2524c&quot;&gt;第六期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;因为自己开始逐渐关注前端，然后就发现 &lt;a href=&quot;https:&#x2F;&#x2F;antfu.me&#x2F;&quot;&gt;Anthony Fu&lt;&#x2F;a&gt; 在我的 Timeline 上出镜率很高，内容也都很棒。去了解了下之后，发现这位同学很不一样：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antfu&quot;&gt;Github&lt;&#x2F;a&gt; 上有很多的 Sponsor，参与&#x2F;主导了一些很有影响力的开源项目，也会有一些很奇特的 Idea，用英文交流，习惯在国外的开源社区活动，Github Contribution 几乎全是绿的。这完全勾起了我的好奇心，很想了解这位神人背后的一些故事，于是就试探性地在推上发了邀请，没想到很快答应了。&lt;&#x2F;p&gt;
&lt;p&gt;Anthony 同学的语言表达和组织能力确实很强，全程我基本只要把问题抛过去，就能有较完整和流畅的回复。后期剪辑时还重新录制了下自己的那一轨音频（因为原先的那一轨有些瑕疵，加上我说的内容也较少 😂），导致听起来不像一个完整的访谈···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-qi-qi&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xiaoyuzhoufm.com&#x2F;episode&#x2F;61c6cccac525309a443b5b36&quot;&gt;第七期&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在跟 Randy 聊时，他有提到过 &lt;a href=&quot;https:&#x2F;&#x2F;logseq.com&#x2F;&quot;&gt;Logseq&lt;&#x2F;a&gt; 这款笔记利器，就去体验了下，然后就被惊到了。极低的输入成本，强大的双链和 Query，方便的 Journal，Privacy First，Local Data 等等。然后就想着要是能邀请 Logseq 的作者来聊聊就太好了，按照惯例，先在推上勾搭，没想到我跟作者&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tiensonqin&quot;&gt;天生&lt;&#x2F;a&gt;竟还有交集（同在花瓣工作过），他也答应了这次邀请。在推上发了这个消息后，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;laike9m&quot;&gt;laike9m&lt;&#x2F;a&gt; 也有兴趣一起来聊聊，于是就有了这期的访谈，播出后反响也不错。天生的谦逊、对 logseq 的热情和 laike9m 的专业性都给我留下了很深的印象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-wei&quot;&gt;结尾&lt;&#x2F;h3&gt;
&lt;p&gt;制作 Bytetalk 的过程让我对播客有了更多的了解，也明白了其中的艰辛（寻找嘉宾，准备大纲，后期剪辑等等）。但看到大家的反馈就觉得这事值得，等我把这事思考地成熟些，就可以开始第二季了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>2021 Review</title>
            <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/2021-review/</link>
            <guid>https://limboy.me/posts/2021-review/</guid>
            <description>&lt;p&gt;2021 这一年如果要有个分界点的话，那就是年中离开字节跳动。在飞书工作了两年之后，自觉还是无法适应和胜任相关的工作。一方面自己对移动端开发的热情越来越低，其他方面也没有太强烈的意愿，另一方面飞书的强度对我这个「老人」挑战也挺大的，加上 ToB 业务属性，处理多方问题和反馈也对精力撕扯得厉害。不过确实也学到了很多，尤其是身边的小伙伴们，他们真的很棒。&lt;&#x2F;p&gt;
&lt;p&gt;辞职之后给了自己一段缓冲期，逐步去探索能够持续有热情地做十年的事情。不得不说，可以自由支配的时间是一件奢侈品，一旦适应就很难再回去了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>是否要买 M1 Pro</title>
            <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/buy-m1-pro-or-not/</link>
            <guid>https://limboy.me/posts/buy-m1-pro-or-not/</guid>
            <description>&lt;p&gt;熬夜看完了苹果 &lt;code&gt;Unleashed&lt;&#x2F;code&gt; 发布会，很心动。Touch Bar 没有了，MagSafe、各个方便的接口也都回来了。性能、显示效果等各方面都有了较明显的提升，在 M1 Pro 面前，我这台 2014 Macbook Pro 几乎是被全方位无死角碾压，于是就有了更新设备的念头。&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;首先看价格，粗配下来，大约在 2 万左右，信用卡分 24 期，每月 1000，也还可以接受，手头这台 MBP 已服役 7 年，换一台新设备非常合理。但它平时用着也没太大问题，除了电池续航和 GPU 差了一点。那是买还是不买呢？&lt;&#x2F;p&gt;
&lt;p&gt;已经明显能感觉到脑海里的两个小人开始搏斗了，感性的那个说：这么惊艳的笔记本，早买早享受啊；理性的那个说：现在这个用着也还可以，为什么要买呢？最后我决定跟随理性的声音，主要是从投资的角度考虑。&lt;&#x2F;p&gt;
&lt;p&gt;如果这台新笔记本产生的价值能超过两万（当然这个只能粗略估计），就值得买。简单看下这台设备可以带来的改变：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;效率：更流畅的 App 体验、节省编译时间、提高视频编辑效率、连接多台显示器提高工作效率&lt;&#x2F;li&gt;
&lt;li&gt;体验：键盘的手感、没有 Touch Bar 的愉悦感、显示效果的提升、空间音频、前置摄像头&lt;&#x2F;li&gt;
&lt;li&gt;便利：长续航、全接口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;效率方面，没有较耗时的编译任务，不需要视频编辑，一台外界显示器基本够用，系统也没有卡顿到影响使用；体验方面：显示效果看着也没什么问，空间音频、前置摄像头属于 Plus；便利方面，长续航确实弱项，但平时也都会插电，所以也还好。&lt;&#x2F;p&gt;
&lt;p&gt;如此看来，虽然是一台真香设备，虽然当前设备已经 7 岁高龄，但从投资角度看，目前带来的回报还是少了点，等真有需求时再下单吧。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;aside class=&quot;info&quot; &gt;
  Update: 已入 16 寸 M1 Pro，还是挺香的，接下来就让它产生更多的价值吧。
&lt;&#x2F;aside&gt;</description>
        </item>
        
        
        <item>
            <title>对自己说的一些话</title>
            <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/words-to-myself/</link>
            <guid>https://limboy.me/posts/words-to-myself/</guid>
            <description>&lt;h2 id=&quot;tou-zi-si-wei&quot;&gt;投资思维&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;怎么过一天，就怎么过一生，如果认为明天或一年之后会有所改变，那么今天的自己是一年前希望看到的自己么&lt;&#x2F;li&gt;
&lt;li&gt;随着时间的推移，资产（你认为有价值的一切）变得更有价值还是更廉价&lt;&#x2F;li&gt;
&lt;li&gt;把每一个场景都看成投资场景，每一个行为当作投资行为，重视它对现在及将来的影响&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;you-xi-hua-si-wei&quot;&gt;游戏化思维&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;不要玩别人的游戏，玩自己的游戏，立足现实，不抱怨，总能找到&#x2F;设计适合自己的游戏&lt;&#x2F;li&gt;
&lt;li&gt;玩游戏最重要的是理解规则，每一个小点都不放过，同时开放思维，一把尺子不只能用来测量，也能用来敲门&lt;&#x2F;li&gt;
&lt;li&gt;找到最合理的游戏策略，然后在实践过程中不断总结和调整&lt;&#x2F;li&gt;
&lt;li&gt;不要相信毅力，重视反馈，当没有反馈或者负反馈时，及时调整阶段性目标和策略&lt;&#x2F;li&gt;
&lt;li&gt;尽全力去赢得游戏&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qie-huan-shi-jiao&quot;&gt;切换视角&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;在被负面情绪笼罩时，思维容易闭塞，行动容易变形，先把这朵负面情绪的乌云摘出来，让自己在理性的状态下去思考&lt;&#x2F;li&gt;
&lt;li&gt;多从别人的视角来看问题，考虑他们的想法和诉求&lt;&#x2F;li&gt;
&lt;li&gt;一个知识点想不明白时，把自己代入到构建的场景中，或者反过来想&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bao-chi-hao-qi&quot;&gt;保持好奇&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;好奇能让思维保持活跃，而思维的乐趣是不可替代的&lt;&#x2F;li&gt;
&lt;li&gt;好奇能让一本书变成起点而不是终点&lt;&#x2F;li&gt;
&lt;li&gt;好奇能发现更大的世界&lt;&#x2F;li&gt;
&lt;li&gt;追根溯源，对问题有更深的理解，找到更合适的解决方案&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zhu-zhong-shu-chu&quot;&gt;注重输出&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;只是看书或者视频，容易造成已经理解了某个知识点的错觉，短期记忆未经加固，很快就会「挥发」&lt;&#x2F;li&gt;
&lt;li&gt;无输出不输入，输出的方式可以是文章或者视频或者闲聊，经过强化后的内容更容易进入长期记忆&lt;&#x2F;li&gt;
&lt;li&gt;输出的过程会联结之前的积累，让知识更扎实，输出过程也会更流畅，输入和输出的比例可以控制在 3:7&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peaceful-mindful&quot;&gt;Peaceful &amp;amp; Mindful&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;平和的心境和敏捷的思维是值得追求的，每天尽可能地在这两点上都有所提升&lt;&#x2F;li&gt;
&lt;li&gt;冥想的奥义是专注当下，觉察并审视情绪和想法，每天可以花点时间在这上面&lt;&#x2F;li&gt;
&lt;li&gt;友谊能带来更深层的快乐，找到合适的人去努力经营&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;get-your-hands-dirty&quot;&gt;Get Your Hands Dirty&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;不要只停留在理论上，去实践，会发现更多的问题和挑战，也更有趣味，&amp;quot;What I cannot create, I do not understand&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Make it Artsy，在追求更好的过程中，精练技能，活用知识，享受最终的结果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>不再钟情于移动端开发</title>
            <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bye-mobile-dev/</link>
            <guid>https://limboy.me/posts/bye-mobile-dev/</guid>
            <description>&lt;p&gt;投身于移动端开发（iOS 为主）也有些年头了，但这几年它带来的乐趣却越来越少，曾经可以为了实现一个效果凌晨三点起床 Coding，现在能让我三点起床的估计只有 Deadline 和失眠了。为啥会这样呢，大概有这么几个原因：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-ji-de-yin-an-mian&quot;&gt;手机的阴暗面&lt;&#x2F;h3&gt;
&lt;p&gt;正如把宇航员送上天的火箭，也可以把导弹「送」到其他国家，科技往往有两面性，App 也不例外，抖音上可以学到新的知识，也能偷走一下午的时间。&lt;&#x2F;p&gt;
&lt;p&gt;很羡慕那些能与手机和谐相处的人，不受蛊惑又物尽其用，我做不到，最近在尝试把它放在看不见的地方，出门就放包里，让 Apple Watch 扮演传呼机的角色。Cal Newport 的 &lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;30374975&#x2F;&quot;&gt;Digital Minimalism&lt;&#x2F;a&gt; 里描述的内容比较符合我对手机的使用理念，简单来说就是把智能手机当作非智能手机来使用。非智能手机有个很好的特点是有明确的使用场景，且不具有成瘾性。&lt;&#x2F;p&gt;
&lt;p&gt;App 开发商们在意的是 DAU（每日活跃用户数）、停留时间、用户粘度，他们会充分利用人的心理来定制化开发功能，用极低的成本来让你获得正反馈，这种正反馈的感觉驻留在大脑后，就很容易被再次触发，进而影响专心工作的时间和质量。在各个 App 的合力助攻下，手机就越来越像个黑洞，把本可以用来休息、独处、自省、思考、锻炼、社交、阅读、创作的时间都吸了进去。&lt;&#x2F;p&gt;
&lt;p&gt;严歌苓说「人间极乐之事，无不是苦中作乐。生命一天不达到那个浓度和烈度，没有到达那个敏感度、兴奋点，瘾就没过去，那一天就活得窝囊」。这个「瘾」和手机的「瘾」有一个关键的区别：思考在其中占的比例。App 为了达到 Hook 的效果，会尽可能地降低认知负担，也就是「思考」的参与，同时提供源源不断的内容供消费，或者让你时不时地想回访。就像「象与骑象人」，要去某个地方，可以是象（非理性）说了算，也可以是骑象人（理性）说了算，前者明显更好说服。时间一长，象的话语权就会越来越大，有时骑象人明显感觉到有问题，却发现很难干预，比如抖音刷的时候很过瘾，过后又会觉得有愧疚感，因为当象终于累了的时候，骑象人才能说得上话。&lt;&#x2F;p&gt;
&lt;p&gt;所以我更喜欢工具类 App，在特定的场景帮用户解决特定的问题，但自己去做这类 App 又是另一回事了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xing-ye-xian-zhuang&quot;&gt;行业现状&lt;&#x2F;h3&gt;
&lt;p&gt;对于移动端开发来说，大概有业务开发、研发支撑、基础架构这几个方向。对业务开发来说，要找到乐趣其实不容易，一方面是产品会催着上线，另一方面产品设计也较难产生「wow，cool，好想把它做出来」的感觉，如果有 Code Review 兜底的话还会好一点，不然很容易产生技术债。一个功能一旦上线就不能轻易下线，这些技术债也会随着时间的累积慢慢发挥它的威力。而新 Feature 不能停，也要不断地还债，光是要理清这些债务就很费功夫，改动起来就更难了。而这些改动很难描述成漂亮的数字和业绩，对晋升帮助不大，所以大家都愿意做新业务，然后产生新的债务，如此循环。&lt;&#x2F;p&gt;
&lt;p&gt;基础架构主要围绕性能优化、组件化、动态化、基础类库展开，研发支撑主要是 CI &#x2F; CD，辅以一些提高效率的工具，虽然业内相关的文章不少，但落实到每个公司内部都会有自己独特的问题和技术挑战。不过我在这些方面的意愿不强烈。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-ye-fa-zhan&quot;&gt;职业发展&lt;&#x2F;h3&gt;
&lt;p&gt;如果只是从事移动端开发，那么这个职业的生命周期还是挺短的，一方面移动端开发的门槛并不是很高，新人更有冲劲，也更愿意学。另一方面，随着年龄的增长，即使你也还能拼，对薪资也没有太高的要求，团队融入和管理成本都会是问题。所以不要被还不错的待遇迷惑，尽早想好 pivot 的方向，当机会出现时可以及时把握住。比如：技术管理，技术专家，独立开发者。&lt;&#x2F;p&gt;
&lt;p&gt;「技术管理」是一个有高杠杆率的岗位，考验综合能力，要能够且愿意处理各种杂事，有技术判断力，制定团队规划，考虑团队成员成长等等。&lt;&#x2F;p&gt;
&lt;p&gt;「技术专家」则需要在某一领域持续耕耘和深挖，要有扎实的技术功底和耐心，但如果这个领域本身的生命周期就不长，那这个方向就有待商榷了。&lt;&#x2F;p&gt;
&lt;p&gt;「独立开发者」是一条很难走的路，能坚持下来的不多，获得可观回报的就更少了。它独特的魅力在于可以享受更纯粹的创作乐趣，也能被用户的正反馈所激励。但要有至少一款还不错的产品，同时需要有一定的门槛，不然很容易被竟品赶上或超越，还要时刻留意新的产品机会，开发之外的事情也不少，都要 hold 住。&lt;&#x2F;p&gt;
&lt;p&gt;这几条路线对我来说，要么能力上有欠缺，要么意愿上不强烈。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so-what-s-your-plan&quot;&gt;So What&#x27;s Your Plan?&lt;&#x2F;h3&gt;
&lt;p&gt;我对自己的认知是更喜欢探索和创作，脱离移动端可以更好地释放这些热情，当然这也可能是一个错觉。巴菲特在 1998 年的佛罗里达演讲里说：「财务自由之后想做什么工作，现在就该做什么工作，是那种期待第二天到来的工作，这样的工作才是理想的工作，能学到东西，充满激情」。探索和创作是我目前最想做的事，那就先把它做了吧。&lt;&#x2F;p&gt;
&lt;p&gt;如果不 Work 怎么办，发现自己对这两件事只是浅浅的喜欢，无法形成可持续发展怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s OK，但这个过程必须要帮自己弄清楚一件事：我的长处是什么？要有所作为，就要发挥自己的长处，可以采用的方式是「回馈分析法」：事先记录下自己对结果的预期，9 到 12 月后，再将结果与自己的预期比较。（该方法来源于彼得·德鲁克的「如何实现自我管理」）&lt;&#x2F;p&gt;
&lt;p&gt;如果结果符合预期，那很好，可以继续走下去，如果不符合预期，至少断了这个念想，避免在从事其他工作时，老是记挂着「要是我能去做 xx 就好了」。&lt;&#x2F;p&gt;
&lt;p&gt;为什么是现在呢？因为「找到自己喜欢的事」越早越好，随着年龄的增加，身体的维护成本会越来越高，羁绊也会越来越多，热情会慢慢降低，大脑的运算能力也会下滑。虽然稳妥的方式可能带来更高的收入，但这都是有代价的。&lt;&#x2F;p&gt;
&lt;p&gt;Ironically，当我有了较充足的时间可以去探索自己喜欢的事时，手机成了一个不小的阻碍，因为太容易拿起来，然后可以玩很久。Deep Work 并不容易，稍微 Deep 一会，就想浮出水面，这方面还需要不断地训练。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的音乐播放器可能跟你的不太一样</title>
            <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-music-player/</link>
            <guid>https://limboy.me/posts/my-music-player/</guid>
            <description>&lt;p&gt;听音乐是很正常的需求，市面上也有很多解决此类诉求的工具，比如 Apple Music 或者 Spotify，我之前用的比较多的是 Spotify，后来由于付款方式（不习惯将自己的账号密码让淘宝上的商家操作）不便，就切换到了 Apple Music，但实在用得不舒服（尤其是「喜欢的歌」这么简单的一个诉求，都要通过极其复杂的方式（在 Mac 端的 Music 中新建 Smart List，filter 设为 loved is true，这还不够，还要将歌曲加入到 Library 才行）才能实现），每次一进首页都要推荐给我各种新歌&#x2F;可能喜欢的歌，可是大部分场景我只是想听特定的歌，就需要各种操作找到入口。&lt;&#x2F;p&gt;
&lt;p&gt;为什么音乐播放器会变成现在这样？在 iPod 时代，我们消费音乐的习惯是将买&#x2F;下载下来的音乐放到 iPod 里，然后听就行了。比如 C 罗现在还在用 iPod Shuffle 听歌&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125544155-4519700d-50b9-4953-ac47-f1f2557ec9e4.jpeg&quot; alt=&quot;5e13a5ac855cc278f2770de6 jpeg!720&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;或者用 Winamp&#x2F;千千静听 将从各个地方捣鼓过来的音乐细心地管理起来，修改它的 MetaData，按专辑&#x2F;歌手分类，那个时代的音乐好像多了一点仪式感。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125544179-b8c8213c-d9f2-4673-9bbe-f5eec0859c4d.jpg&quot; alt=&quot;2021020219415270&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但流媒体出来之后，一切都变了，它让我们变得更懒，不用再去到处下载，不用再去编辑 id3 tag，在一个 App 里全部搞定。确实方便了，但我们也不再「拥有」一首歌，无论是实体还是数字形式的，我们拥有的只是一段时间的使用权。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，我更在意的是其中的商业模式，为了能让用户更高频更长久地使用 App，会结合很多推荐算法来猜你喜欢（有时确实还挺准的，当然我是指 Spotify），但这会带来两个问题：1. 歌曲的「厚重感」下降了。2. 主体变了，听歌的我好像在被算法投喂。以前的音乐就像书一样，可以买回来放在书架上，分门别类地整理好，想看的时候挑一本就行。现在书还是那本书，但是要坐交通工具（网络）去某个地方（App）看，会有各种不同的新书&#x2F;可能喜欢的书来吸引我。如果同一首歌听了超过 5 遍，感觉都对不起算法。现在一打开流媒体播放器，就有种 overwhelmed 的感觉，就像是算法在指导我，你应该听哪些歌。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，音乐有很强的「场景唤醒」能力。如果某一段时间经常在听一类歌，当几年后（甚至更久），再听到这些歌时，当时的场景，周围的人，发生的事都会浮现出来，这感觉很好。流媒体出来之后，这个能力也被大大削弱了，每次打开流媒体 App，首屏的内容都是新的（至少是新旧混杂的），即使我们再想听某几首歌，也很容易钻到其他歌曲里，这样音乐就凿不出时间的坑。&lt;&#x2F;p&gt;
&lt;p&gt;流媒体背后的逻辑其实是现在很多 App 的共性，通过「直达人心」的算法来攫取你的注意力，用便捷的操作来形成 hook，从而达到「停不下来」的效果。这类工具我想称为「热工具」，与之相对的是「冷工具」，就像冷兵器一样，容易操作，可控，不 Magic，能否耍得 6，完全取决于操作者。我喜欢冷工具，就像 Winamp 或 千千静听那样。&lt;&#x2F;p&gt;
&lt;p&gt;于是我就开始寻找合适的播放媒介，前一阵子买过 iPod Shuffle，但后来怎么也找不到了（这可能就是做得太 mini 的一个弊端吧），想想还是从 App 入手吧，需要跨平台，最好能同步，同时属于「冷工具」，交互和 UI 尽量简单些，找了一些 MP3 播放器都不太满意，最后的解决方案是：Telegram。&lt;&#x2F;p&gt;
&lt;p&gt;Telegram 支持上传歌曲，如果同时上传多首歌曲，就可以形成 Playlist（只要上传时选择「Group」就行）。比如我最近特别想听 Bob Dylan 的 Tempest，就可以以 Playlist 形式出现&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;125545341-a58bc3af-392b-4aa0-b784-c770faa88507.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;后台播放也没问题，同步的话，自然不在话下。有一个小问题是，默认点击一首歌后，当前 Chat 里的所有歌都会加到 Queue 里，无法只播放某个 Playlist，解决办法也很简单（也是官方推荐的做法），新建一个 Private Channel，然后把 Playlist forward 过去就行了。&lt;&#x2F;p&gt;
&lt;p&gt;最后就是歌曲的来源，我会优先考虑从 Youtube 下载，如果没有，再看有没有方便的渠道可以购买，还是没有的话，fallback 到其他下载渠道。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>近日随想</title>
            <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/random-thoughts/</link>
            <guid>https://limboy.me/posts/random-thoughts/</guid>
            <description>&lt;h3 id=&quot;can-yu-gan&quot;&gt;参与感&lt;&#x2F;h3&gt;
&lt;p&gt;「参与感」能很大程度上增强体验，获得额外的收获，而这是可以自主完成的。比如看史书时，想想如果那个角色是自己，会怎么做？看电视剧时，如果我是编剧，我会让这两个人怎么发展？看真人秀时想我能从中看到自己的影子么？我会处理得更好么？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shuang-ceng-gong-yu-du-hui-nan-nu&quot;&gt;双层公寓：都会男女&lt;&#x2F;h3&gt;
&lt;p&gt;打开 Netflix 看看有什么可以填充闲暇时光的，偶然看到了这部恋爱真人秀，觉得挺新奇就看了下，结果居然停不下来了。故事的背景是六个人（三男三女）在一间别墅（带泳池）里度过 18 周（不是每天都在里面，不打乱正常的工作&#x2F;学习节奏，但会住在这里），然后还有一辆车。&lt;&#x2F;p&gt;
&lt;p&gt;「双层公寓」之前是富士电台的真人秀节目，2015 年开始，Netflix 与富士电视台联合制作，并在 Netflix 首播。「都会男女」整体看下来像是一部日剧：精良的拍摄，「演员」细腻的情感和东京的实景。&lt;&#x2F;p&gt;
&lt;p&gt;让我看完第一集的是养眼的小哥哥和小姐姐，但吸引我看下去的却是其他部分：无剧本，日本文化中的内敛和细腻，搞笑的场外八卦，从陌生到熟悉过程中真实性格的逐渐呈现，成员之间的化学反应和冲突等等，会想知道之后的剧情，甚至能从中学到一些人与人之间的相处之道。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-chu-bu-zai-de-shou-ji-hui-dai-lai-shi-yao-fu-zuo-yong&quot;&gt;无处不在的手机会带来什么副作用&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The most dangerous thing about carrying a cell phone everywhere is that you&#x27;re never bored. Boredom, like pain, is a signal.&lt;&#x2F;p&gt;
&lt;p&gt;-- Paul Graham&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;think-small&quot;&gt;Think Small&lt;&#x2F;h3&gt;
&lt;p&gt;不要老想着你能为世界带来什么，世界会因你而产生怎样的变化。踏踏实实地找到自己的强项，找到&#x2F;创造一个能发挥该强项的场景，That&#x27;s it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rick-and-morty-s05e02&quot;&gt;Rick and Morty S05E02&lt;&#x2F;h3&gt;
&lt;p&gt;最不明白的是，为什么 Decoy 知道自己[可能]是 Decoy 后会想着消灭其他的 Decoy？消灭其他 Decoy 后，自己不是更容易被敌人消灭，进而违背了当初创建 Decoy 的初衷？（后来想了下，应该是担心事情失控）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-wan-de-qian-shui-ting&quot;&gt;夜晚的潜水艇&lt;&#x2F;h3&gt;
&lt;p&gt;近日读陈春成的「夜晚的潜水艇」，惊叹作者居然是 90 后。吸引我读下去的是第一篇「夜晚的潜水艇」，最 wow 的是最后一篇「音乐家」。精美的文字，无边的想象力，在现实与虚幻之间穿梭，一点点去解开谜团。里面有匠人精神，有安放，有丢失最重要的东西，还有点不许联想。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;na-xie-chen-zhong-de-hua-ti-gai-zhao-shui-liao-ni&quot;&gt;那些「沉重」的话题该找谁聊呢？&lt;&#x2F;h3&gt;
&lt;p&gt;可以找朋友聊，可是他们都在为了生活而马不停蹄，或者回了一个表情包；可以在网上聊，可是谁会在网上聊这些呢？最后这些问题也识趣地消失了，就像不曾有过一样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-yu-he-xin-nian&quot;&gt;信誉和信念&lt;&#x2F;h3&gt;
&lt;p&gt;最重要的好像就只有这两个东西，信誉让你可以有更多的机会，信念可以帮你挺过最艰难的时光。就像八卦和故事，前者让我们知道谁干活靠谱，谁吊儿郎当，后者让我们知道为什么要干这些事。&lt;&#x2F;p&gt;
&lt;p&gt;至于选择，那只是一个根据信念推导出来的一个 Derived Result，不本质。比如我在早期持有过一定数量的特斯拉股票，但在看到增长不符合自己的预期后就很快出了。我们经常会将某个人的成功归因于 ta 的选择，却看不到这个选择之后的坚持。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stp-shi-yi-ge-hen-hao-de-mo-xing&quot;&gt;STP 是一个很好的模型&lt;&#x2F;h3&gt;
&lt;p&gt;STP 分别是：市场细分（Segmentation） 目标市场选择（Targeting）和市场定位（Positioning）&lt;&#x2F;p&gt;
&lt;p&gt;简单来说，就是选取一个不同的坐标系，然后看这个坐标系的市场组成是怎样的，你在这个坐标系下你的竞争力是什么。&lt;&#x2F;p&gt;
&lt;p&gt;比如常见的笛卡尔坐标系，一个点是通过距离中心点的距离来描述的，（5,10）表示 x 方向距离为 5，y 方向距离为 10。这样确实可以描述一个平面上所有的点。但也可以有另外的描述方式，比如极坐标系，可以用「距离中点的距离和角度」来表示。&lt;&#x2F;p&gt;
&lt;p&gt;第一步 Segmentation，根据不同要素将客户群体进行细分，比如星巴克的 Segmentation 可能是收入、闲暇时间、聊天诉求、步行距离等，这样就有了一个一个的小块：比如收入低、闲暇时间多、聊天诉求强，步行距离要求不高的人（如小镇青年）。&lt;&#x2F;p&gt;
&lt;p&gt;第二步 Targeting，按照上面的画出来的一个个小块，看看哪些是自己的目标用户。对于星巴克来说收入中高、聊天诉求强、步行距离要求高的那一批人就可以是自己的目标用户。然后就大概知道了这部分人群的市场空间大概有多大。&lt;&#x2F;p&gt;
&lt;p&gt;第三步 Positioning，有了 Targeting 之后，不一定一开始就直接瞄准这些人，因为可能这个市场还是有点大（如果较小的话，增长空间也小了），这时可以找一个更小的切入点，给自己一个合适的定位，先把这一部分人服务好，之后再逐步扩大。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zui-gao-xue-yi-zhi-yong-fa&quot;&gt;最高学以致用法&lt;&#x2F;h3&gt;
&lt;p&gt;这是日本的一位精神科医生出的一本书，他本人也是该方法的忠实践行者（在 Youtube 已经输出了 3000 多个视频）。核心理念是：无输出，不输入（比较极端，但记起来比较方便）。只是做大量输入，不重视对所学知识的反复提取、记忆背诵、检索分类及实践结合，那么脑神经，就是「走到哪儿路径消失到哪儿」。细想，是不是这样呢？这也是为什么推崇每日写作，不管写作质量如何，它能帮你反刍获取到的信息，让它的印痕更深刻些。书中提到了很多高效输出的方式（如通过 facts 和 thoughts 的方式写读后感，写得越多，大脑越活；多用图来表示，记忆更深刻）可以尝试。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-shi-jian&quot;&gt;暗时间&lt;&#x2F;h3&gt;
&lt;p&gt;暗时间做什么，差不多能预见到一个人几年之后的状态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-guo-nei-shao-you-you-xiu-de-chan-pin&quot;&gt;为什么国内少有优秀的产品&lt;&#x2F;h3&gt;
&lt;p&gt;整体来说，国内优秀作品的数量会比国外的少不少（所以对于那些愿意沉下心来打磨产品的团队，我会尤其心生敬意）。为什么呢？我觉得不是技能上的缺失，而是环境、用户群和心态的多重作用。大环境上商业化氛围过重，大家都在往钱的方向靠，一些蠢蠢欲动的团队也在伺机 Copy 出现苗头的产品；人群方面，对产品设计有较高 Bar 的人群数量还不是很多，「能用就行」的不在少数；创作者的心态方面，更希望借助各种商业模式够短期套现，而不是通过优质产品培养忠诚的用户群。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>工程师的成长</title>
            <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/eng-growth/</link>
            <guid>https://limboy.me/posts/eng-growth/</guid>
            <description>&lt;p&gt;我们都需要成长，工程师也不例外。以下是我感觉对工程师的成长比较有帮助的点，供参考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yao-dian&quot;&gt;要点&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;积累信用货币（先把手头的事情做好，再聊你想做什么）&lt;&#x2F;li&gt;
&lt;li&gt;提升影响力（注重输出；做能够影响更多部门&#x2F;使用方的事，并把它做好）&lt;&#x2F;li&gt;
&lt;li&gt;把工作当成内部创业（多研究手头&#x2F;部门的事情，寻找问题&#x2F;机会，把其他部门当作潜在合作伙伴）&lt;&#x2F;li&gt;
&lt;li&gt;清楚自己的强项（将自己的强项和正确的事情结合起来，才能发挥最大的作用）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;huan-jing&quot;&gt;环境&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;与优秀的人共事（学习他们的技能和做事方式，不要成为最聪明的那个）&lt;&#x2F;li&gt;
&lt;li&gt;做符合大趋势的事（ Focus 在某个领域可能是把双刃剑，多结合一些通用技能）&lt;&#x2F;li&gt;
&lt;li&gt;做事情有足够的空间（可以发挥自己的创造力，而不是偏流程化、对着操作手册就能做的事）&lt;&#x2F;li&gt;
&lt;li&gt;一个好的 Mentor（用旁观者视角给你反馈，指出问题和改进方案，帮助成长）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-ge-ti-de-ji-ben-su-zhi&quot;&gt;作为个体的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;自驱力（想在前头，不需要别人来 Push）&lt;&#x2F;li&gt;
&lt;li&gt;好奇心（不局限于自己的 Scope，多了解同事、Lead、行业的事情）&lt;&#x2F;li&gt;
&lt;li&gt;高标准（仅仅做完是不够的，一个问题往往有很多可以挖掘的点）&lt;&#x2F;li&gt;
&lt;li&gt;时间管理（不会疲于应付各种需求和问题，有优先级和 Plan）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-gong-cheng-shi-de-ji-ben-su-zhi&quot;&gt;作为工程师的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;良好的编码能力（1 个月后的自己依然可以维护，出问题可以快速定位）&lt;&#x2F;li&gt;
&lt;li&gt;享受解决问题的乐趣，具备化繁为简的能力（抽象，分解，分层，分模块）&lt;&#x2F;li&gt;
&lt;li&gt;抗压能力（压力下，不变形）&lt;&#x2F;li&gt;
&lt;li&gt;数据意识（好了，坏了，用数据说话）&lt;&#x2F;li&gt;
&lt;li&gt;注重效率（不吝啬在工具上的投入）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kan-wen-ti-de-jiao-du&quot;&gt;看问题的角度&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;如果现状让我不舒服，我可以做什么来改变，而不是逃避和埋冤&lt;&#x2F;li&gt;
&lt;li&gt;如果觉得当前没什么问题，一定是了解得还不够深入&lt;&#x2F;li&gt;
&lt;li&gt;如果是 Ta（某个你欣赏的人）来做你手头的事，Ta 会怎么做&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-shi-qing-de-fang-fa&quot;&gt;做事情的方法&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;设计方案时要考虑周到：竞品调研、上线策略、降级方案、回滚方案、出问题时如何排查等&lt;&#x2F;li&gt;
&lt;li&gt;事情推不动就上升，但要提供充足的上下文以便 Lead 做决策，Context not Control&lt;&#x2F;li&gt;
&lt;li&gt;汇报时要切换视角，有条理，把要点说清楚，同时提供了解细节的入口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么 2021 年加入飞书是不错的选择</title>
            <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/join-lark-2021/</link>
            <guid>https://limboy.me/posts/join-lark-2021/</guid>
            <description>&lt;p&gt;这是一篇招聘文章，相信从标题也能看得出来，为了让它显得比较合理，我假模假样地分析了下原因，您看看是不是这么回事。要是想直接看招聘链接，可以跳到文章末尾处。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分同学可能不太清楚飞书（https:&#x2F;&#x2F;www.feishu.cn）是什么，简单说下，飞书是字节跳动出品，整合即时沟通、日历、视频会议、云文档、云盘、工作台等功能于一体的办公协同工具。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-qu-shi&quot;&gt;1. 趋势&lt;&#x2F;h2&gt;
&lt;p&gt;ToC 市场的人口红利持续疲软，ToB 市场自然成为了增长的突破点，疫情带来的远程办公理念和习惯，已经让更多的企业开始使用并依赖协同办公软件。以头部玩家钉钉为例，根据官方数据，目前（2021 年 1 月）使用钉钉的企业已经超过了 1700 万，这是什么概念？根据&lt;a href=&quot;https:&#x2F;&#x2F;www.ceicdata.com&#x2F;zh-hans&#x2F;china&#x2F;number-of-business-entity-and-company&quot;&gt;这篇文章&lt;&#x2F;a&gt;的数据，截止到 2020 年 5 月，中国的企业数大概在 4000 万左右，新企业的增速大概在 13% 那样，因此即使是目前有最大市场占有量的钉钉也还没到过半的程度。&lt;&#x2F;p&gt;
&lt;p&gt;To C 领域常见的网络效应，在 To B 端也会有么？To C 场景下，身边的人如果都在用微信，那么我也「不得不」使用微信。To B 场景则不一样，A 公司和 B 公司的办公软件完全不需要保持一致，只要能够满足需求，提供可靠的服务，合作顺畅就行，市场占有量并不是最大的考虑因素。但也不是完全没有网络效应，比如 A 和 B 都是互联网公司，且高层之间比较熟悉，如果某款协同工具赢得了 A 的口碑，就有可能让 B 公司也使用该工具。&lt;&#x2F;p&gt;
&lt;p&gt;有没有可能随着疫情得到控制，大家回归到正常工作状态后，就不再需要临时满足远程办公的协同工具？有可能，但应该不是主流，且那些选择放弃的企业还是会慢慢再用回来，因为真的很方便。现在一些传统行业的头部企业也开始往数字化办公迁移，比如三一重工，华润，物美等等。&lt;&#x2F;p&gt;
&lt;p&gt;有没有可能出现马太效应，也就是赢家通吃的情况？不太会。跟 To C 场景不同，企业之间的差异往往比较大，尤其是跨行业的企业，有些注重协同，有些注重管理，有些注重流程，有些注重专业能力（如电商，建筑）等等，不过这些注重点也并非是完全互斥，因此理论上是存在一个工具可以同时满足这些需求，但太难了，即使有，也定会经历长时间的打磨。要解决行业的定制化问题，最好的方式就是做开放，提供能力给 ISV，在协同工具的基础上开发企业定制产品，做这件事的就是开放平台。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-you-shi&quot;&gt;2. 优势&lt;&#x2F;h2&gt;
&lt;p&gt;再来看看飞书，为什么目前市场占有量并不高的飞书有可能在协同办公的 To B 领域取得不错的成绩？我觉得主要有以下这么几点：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gong-ju-shi-zhen-hao-yong&quot;&gt;工具是真好用&lt;&#x2F;h3&gt;
&lt;p&gt;平时国外的工具用得比较多，经常会被他们的设计和细节所打动，飞书这一年多使用下来，感觉不输那些国外的工具，有不少功能甚至更胜一筹，比如文档、表格、聊天的 Reaction、聊天的 Context 等等。这也跟字节对工具的重视有很大关系，经常能看到谢欣，张楠在反馈区反馈各种体验问题，身边使用飞书的朋友也是不啬赞美之词（当然也会有槽点）。&lt;&#x2F;p&gt;
&lt;p&gt;飞书在字节内部已经经历了 4 年多的使用和迭代，能够支持字节这样体量的互联网公司，在使用层面肯定是经得起考验的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xie-tong-shi-zhen-fang-bian&quot;&gt;协同是真方便&lt;&#x2F;h3&gt;
&lt;p&gt;在飞书工作的这段时间里，我没有写过一封邮件，这在其他公司是很难想象的，主要得益于强大的文档系统和超方便的协同。比如在文档里可以@人，发起投票，插入群组以及各种富媒体，可以对文档实时划词评论，文档在聊天消息中也是以标题+预览图的方式展示，日历、开放平台等也都可以方便地串联起来，简单来说就是一体感很强，而不是单独的几个产品放在一起。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fang-shi-zhen-yong-li&quot;&gt;开放是真用力&lt;&#x2F;h3&gt;
&lt;p&gt;比如 OKR 系统，就是基于开放平台搭建的，People，审批，汇报等高频应用也都是构建在开放平台之上，前面也说过，开放平台对于满足不同企业的定制化需求至关重要，因此对开放平台的持续投入也是在预期之内。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-zeng-shi&quot;&gt;3. 增势&lt;&#x2F;h2&gt;
&lt;p&gt;先来说说我身边观察到的自发使用飞书的例子吧。朋友 A 经营一家康复相关的小公司，使用飞书作为协同工具，整体感受还比较满意；朋友 B 参与一家前知乎员工创建的互联网公司，内部协作也是使用飞书。这两个例子都是我正好知道，没有主动向他们 Sell 过。飞书前一段时间刚开了「2020 飞书未来无限大会」，在这个会上宣布了与三一重工、物美、小米、南开、华润等大型企业的合作。&lt;&#x2F;p&gt;
&lt;p&gt;这两件事单独看可能没有什么，但放到一起看就很有意思了，这就意味着飞书既可以让小团队高效协作，也能满足超大型公司的协同。而且即使是超大型公司，也并非集中在某一领域，这也说明了飞书的普适性和定制化能力，有了这样的能力，增长就不会是太大的问题。数据层面也一定程度上体现了这一点。&lt;&#x2F;p&gt;
&lt;p&gt;最后如前面所说，企业协同办公是发展趋势，钉钉虽然有先发优势，也积累了不少的客户，但 To B 市场很大，且网络效应不如 To C 那么严重，同时飞书经历了 4 年多的打磨，积累了较好的口碑，且有很好的普适性和定制化能力，因此在协同办公市场服务好一部分客户，且持续发展问题应该不大。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>应该成为专才还是通才</title>
            <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/specialize-or-generalist/</link>
            <guid>https://limboy.me/posts/specialize-or-generalist/</guid>
            <description>&lt;p&gt;Tim Ferriss 的&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=wCPbPMRNnvk&quot;&gt;一个视频&lt;&#x2F;a&gt;探讨过这个问题，简单总结下他的观点：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Combine a handful of skills that are rarely combined and can be effectively combined.&lt;&#x2F;p&gt;
&lt;p&gt;将多个技能以少见又有效的方式进行组合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如计算机科学 + 律师，或者财务管理 + 公共演讲等，其中演讲、写作、谈判是普适能力，对于技能的有效叠加大有裨益。要在某个特定领域做到 Top 非常困难，掌握大量不同技能不是解决之道，多考虑如何将技能进行有效组合。&lt;&#x2F;p&gt;
&lt;p&gt;做项目时注重积累可以复用的 Skills（能力） 和 Relationship（人际关系），这样即使项目的结果不如预期也不算「失败」，这些积累对于下一个项目的展开和推进会很有帮助。 &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;How-Fail-Almost-Everything-Still-ebook&#x2F;dp&#x2F;B00COOFBA4&quot;&gt;How To Fail at Almost Everything And Still Win Big&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;聊技能组合之前，有一点我觉得很重要：尽最大可能做好一件事的心态。它可以让你走出舒适区、不断尝试和反思、深度学习，只有在这个前提下，技能组合才能发挥最大的价值。技能组合后的产品通常会跟其他同类产品直接竞争（除非正好是蓝海，即使如此，也不能保证每次都会这么好运），只有竭尽所能，才有可能在市场中占据一席之地。&lt;&#x2F;p&gt;
&lt;p&gt;技能组合对技能的深度和组合的有效度都有要求，缺少深度较难形成长期壁垒，不够有效很难适应市场需求。美食 Up 主大姨（绵羊料理）是个很好的例子，她的视频特点是：超强的文案和用科研的精神做菜（据说是博士学位）。当然除此之外甜美的声音、可爱的外表、良好的画质都是加分项，但这些不是区分绵羊料理与其他美食 Up 主的点。她之前在电视台上班，对灯光、摄像、片头、包装都比较了解，然后就做了一次技能组合，只是这次组合失败了，因为成本太高，投入产出不成正比，甚至会让粉丝觉得「恰饭」味儿有点重。&lt;&#x2F;p&gt;
&lt;p&gt;再比如「樊登读书」，作者樊登之前的身份是央视主持人、辩论赛冠军队成员、MBA 资深讲师。辞去工作之后，他将表达能力和泛阅读进行有效结合，出了「樊登读书」这个产品，同时跟「得到」形成了差异化竞争（关于这个产品的解读可以听下疯投圈的&lt;a href=&quot;https:&#x2F;&#x2F;crazy.capital&#x2F;45&quot;&gt;这期播客&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;为什么被组合的技能一定要有深度，简单来说就是别人想抄也不好抄。可以想象这么一个场景：有那么一些人，他们时刻关注新冒出来的产品，只要有点苗头，他们就 Copy 一份来跟你直接竞争。技能的深度可以让这个 Copy 成本变高。&lt;&#x2F;p&gt;
&lt;p&gt;那如何才能有效组合呢，这个涉及到对市场的洞察力、对自身能力的高精度认知和不断尝试。最终的产品面向的是怎样的用户，他们会怎么使用，什么场景下使用，带来怎样的帮助，跟竞争对手的差异等，这是市场洞察力；自己擅长什么，有多擅长，缺少什么，缺的部分自己可以搞定还是需要请人协助等等，这是对自身能力的高精度认知，虽然看起来不难，但如果平时没有经常反思，很容易出现误判；不断尝试更是不可或缺，这其实也算是转型，一次就转型成功的，少之又少，常见的是几次失败的尝试后，又重新依赖原先某个特定的技能。&lt;&#x2F;p&gt;
&lt;p&gt;Tim Ferriss 提到的做每个项目应该有 Skills 的提升和 Relationship 的沉淀，就像写 App 时的基建：网络库、数据存储、图片库等，当新写一个 App 时，可以复用这些基建，大大提高开发效率。比如做谈话节目，可能最终失败了，但至少可以积累视频制作能力，与谈话对象建立联系。这些积累对于下个项目很可能会有帮助。&lt;&#x2F;p&gt;
&lt;p&gt;关于应该培养怎样的 Skills，这个自然看每个人的兴趣，但这个 Skills 应该不只是经验。比如一个神经生物学博士，如果去当公司的 CEO，也可以复用专业知识：​ 是不是可以从神经元之间的通信机制来类比公司内的信息传递，或者从细胞的组成来看待公司的结构等等。跟 Good People 建立 Relationship 也很重要，甚至作为目标都未尝不可。&lt;&#x2F;p&gt;
&lt;p&gt;最后引用一下乔布斯的一段话：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&#x27;t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;你无法预先串联那些点，只有当你回顾时才会发现这些点的价值和意义。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>日本印象</title>
            <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/japan-impression/</link>
            <guid>https://limboy.me/posts/japan-impression/</guid>
            <description>&lt;p&gt;时常会从各种途径听到对日本的评价，有好的，有坏的。这次趁着十一假期，去大阪转了转，也来说一下自己的感受。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-zhong-she-ji&quot;&gt;注重设计&lt;&#x2F;h3&gt;
&lt;p&gt;设计是形式与功能的结合，尤其体现在一些细节上。到了大阪后，被带到了酒店，这可能是我见过的最不像酒店的酒店了：没有大堂，没有前台，没有帮你拎行李的小哥，不需要 check in。简单来说，通过合理的设计来避免人力成本。它的设计是这样的：在网上订好日期和房间，到了之后会有一个专门取钥匙的地方，没有锁，直接打开拿到钥匙就可以进房间了，退房的话只需把钥匙放回原处即可。这样的设计，导致除了同行人员，只在「酒店」遇见过一个人。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0003-1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0003-1.jpg 384w,&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0003-1.jpg 384w&quot;
    sizes=&quot;(max-width: 384px) 100vw, 384px&quot; width=&quot;384&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;右侧就是取钥匙的箱子，找到对应的房间号打开，钥匙就在里面。然后我就在想一个问题：这种不加密传输关键信息的方式很容易被其他人破坏，更好的方式至少可以先在网上生成一个密码，然后根据密码来打开箱子。（后来又考证了下，钥匙应该是比预定时间不久放进去的，而且有摄像头，被偷的可能性不高，钥匙归还后箱子会被锁住）&lt;&#x2F;p&gt;
&lt;p&gt;房间的空间比较小，大概也就 20 平米左右，但在合理的布局和设计下，竟然也容得下两个人，而且该有的都有，甚至可以做饭和泡澡。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0006-1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0006-1.jpg 288w,&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0006-1.jpg 288w&quot;
    sizes=&quot;(max-width: 288px) 100vw, 288px&quot; width=&quot;288&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0009.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0009.jpg 384w,&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0009.jpg 384w&quot;
    sizes=&quot;(max-width: 384px) 100vw, 384px&quot; width=&quot;384&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一些很贴心的设计，比如：地铁站出来之后会有指南路标，方便那些没有方向感的人；对着路面的空调会把排风扇的方向往下调避免直接吹到人；地铁除了标志出地名，还会标志出序号，如 Y18，Y19，报站名时也会报序号，这样不认识字的只要记住序号就行了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;14757607584718.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;14757607584718.jpg 225w,&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;14757607584718.jpg 225w&quot;
    sizes=&quot;(max-width: 225px) 100vw, 225px&quot; width=&quot;225&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;zhu-zhong-ta-ren-de-gan-shou&quot;&gt;注重他人的感受&lt;&#x2F;h3&gt;
&lt;p&gt;这点从上面的一些设计细节就能感受出来，其他的还有：晚上车会打近光灯，这样看着不那么刺眼；轻易不鸣喇叭，在奈良公园时，有个人在拐弯处没有注意到后面的车，还是按自己的节奏在走，虽然挡到了车，后来同伴发现后，喊了她让一下，车才开了过去；地铁也一样，大家一般都比较安静，不会大声说话，当然也有例外，从环球影城回来的那趟列车大家就畅快地聊开了；「车让人」也比较常见。&lt;&#x2F;p&gt;
&lt;p&gt;对弱势群体也很注重他们的体验，比如：洗脸的出水口处会有盲文；地铁的投币口会有盲文；连啤酒的掀盖处都有盲文；马路的红绿灯变成绿色时，还会有叫声，当时还在琢磨这是出于怎样的考虑，后来才想到这样可以更方便那些盲人或色盲过马路。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-shi-gan-jing-zheng-ji&quot;&gt;城市干净整洁&lt;&#x2F;h3&gt;
&lt;p&gt;不光是在日本，去的其他几个地方如台湾、清迈等也类似。更奇怪的是一路上连垃圾箱都很少。后来送我们去机场的司机有提到，他们自己会携带垃圾回收工具，如塑料袋。所以有时喝完水之后，不知该把空水瓶扔哪，就还是放回包里，回到住处再扔到垃圾箱。在这种情况下，还能有意识地不随地扔垃圾，确实不容易，放在国内不知道会是怎样的状况。&lt;&#x2F;p&gt;
&lt;p&gt;后来查阅了下资料，发现这是日本为了治理垃圾而想出的一个办法：减少公共场所的垃圾桶。并且减少垃圾工到居民区收垃圾的次数（然后垃圾就有可能会在家里堆积）。而且他们从小就开始定时扔垃圾、垃圾区分的教育，甚至有日历标明哪天可以扔，哪天不可以，我的天哪···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;man-hua-wen-hua&quot;&gt;漫画文化&lt;&#x2F;h3&gt;
&lt;p&gt;在去大阪的飞机上时就发现，坐我前排的日本的中年大叔，打开了 iPad 上的读书软件，当时就想日本人果然是爱读书啊，因为我身边的日本大爷就在看实体书。然后点击其中一项后，出来了动漫···&lt;&#x2F;p&gt;
&lt;p&gt;到了大阪之后发现，便利店里也有动漫书在卖，也能见到中学生模样的人在那蹭书看（当然，便利店里还有一些喜闻乐见的杂志）；地铁上也有不同年龄阶段的人在看漫画，包括广告都会有动漫的表现形式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-ye-de-fu-wu-xing-ye&quot;&gt;专业的服务行业&lt;&#x2F;h3&gt;
&lt;p&gt;这个从上飞机的那一刻就感受到了，由于是日本航空，所以空姐也都是日本的，面对每个乘客时都是微笑服务，然后表示感谢。飞机餐也比国内的好一个 level，用完餐后，还会递上糖果。&lt;&#x2F;p&gt;
&lt;p&gt;下了飞机之后，机场的入境协调人员和办理手续的都很有礼貌，笑脸相迎。然后就发现了一个现象（这个之后在其他场景也有发现，比如餐厅、停车场等），有不少「高龄工作人员」。查阅了一些资料，提到高龄工作人口比例上升是由于青年劳动者减少，加上快速高龄化人口挤压社会福利体系。这么看来日本的生活压力还是蛮大的。&lt;&#x2F;p&gt;
&lt;p&gt;再回来讲服务行业，第一天「导游」带我们到京都后，找了家餐厅，餐厅的服务员有几位是上了年纪的大妈，上来就表演了空手抓小强的绝技，然后不停地向我们道歉，服务的整个过程也都是很舒服，虽然菜很一般，而且贵！除了餐厅，像便利店这种级别的，店员的服务也丝毫不差。所以即使是当个服务员也不容易呢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;在大阪时，做了一件国内很少做的事：看了一个多小时的电视节目。期间几乎没有拿起手机，一个节目完了就换一个，而且是在语言不通的情况下。其中一个大概是讲当下热门关键字的，有点娱乐节目+新闻的形式，一看里面有个人很眼熟，细一看原来是北野武。还有一个看了挺长时间的节目是「电视购物」，跟国内「只要 998，快来购买吧」的氛围不同，没有夸张的语调，没有突出价格，在介绍了产品背景和功能后，还会把原理以通俗易懂的方式呈现出来，最后还有街头和演播厅的现场演示。看完之后就一个感觉：产品做的真细致，如果我是家庭主妇的话，很可能会买一个／一些。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是乌鸦真的不少。乌鸦在日本的地位还是挺高的，有「立国神兽」之称，走在路上时不时地能见到乌鸦飞过，而且体型是真大，发出的叫声自然也会大一些。不过这些乌鸦还是给日常生活带来了些麻烦，因为他们会把垃圾翻得到处都是（这可能也是减少公共垃圾桶的一个考虑点吧），据说比较好的方法是把黑色的垃圾袋换成黄色的（同学的毕业论文···）。&lt;&#x2F;p&gt;
&lt;p&gt;交通状况好，这可能跟城市有关，不过看了下大阪的人口密度：12,096&#x2F;km²，相比之下，杭州的人口密度为 1,479&#x2F;km²。在大阪没有遇到过堵车，就正常的红绿灯，而杭州则是另一种场景，再要下点雨就更崩溃了。&lt;&#x2F;p&gt;
&lt;p&gt;空气比国内的好不少，出发那天，杭州雾蒙蒙的，能见度不高，尤其是江上，一片朦胧。到了大阪，虽然也有重工业，但空气却还 OK，至少住的这几天都是如此。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0295.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0295.jpg 384w,&amp;#x2F;posts&amp;#x2F;japan-impression&amp;#x2F;IMG_0295.jpg 384w&quot;
    sizes=&quot;(max-width: 384px) 100vw, 384px&quot; width=&quot;384&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到房屋的间距比较小，应该跟面积小有关，楼层不是很高，我们住 10 楼，视野就很开阔了，可能跟地震频发有点关系。&lt;&#x2F;p&gt;
&lt;p&gt;女生普遍比较会化妆，这个在台湾也有感受到，就是无论浓、淡，都会打扮一番再出门，所以很容易见到美女（当然也跟底子好有关），对于男生来说这自然是一件幸福的事啦。&lt;&#x2F;p&gt;
&lt;p&gt;最后要抱怨的一点是英文普及率偏低，很多人都不太会讲英语，包括一些年轻人，会的话，也往往是那种日式英语（想起了那个 supplies 的笑话）。有在需要帮助的时候真是会比较累，往往要比划和猜测结合才能大概让对方明白以及明白对方的意思。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;总体来说，日本还是挺有自己的一套哲学的，虽然有时会有比较死板的感觉，比如一条比较窄的道，会有红绿灯，日本人往往要等到绿灯时才会过去，即使路面上明明没有车。在「照顾他人感受」这点上做得比较极致，包括日常的一些设计、行为举止等，甚至盖个楼都要用布围起来，避免噪音和灰尘，这也是让我印象颇深的一点。&lt;&#x2F;p&gt;
&lt;p&gt;对这个国家的印象还不错，希望有机会还可以再去体验下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>了不起的盖茨</title>
            <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-great-gates/</link>
            <guid>https://limboy.me/posts/the-great-gates/</guid>
            <description>&lt;p&gt;新购买了 Netflix 的付费会员，看到有推荐「Inside Bill’s Brain」就点开看了下，制作非常精良。分了三集来讲，主要描述了离开微软后盖茨在做的事，同时穿插了他的亲情、友情和爱情。&lt;&#x2F;p&gt;
&lt;p&gt;可能是受乔布斯影响，盖茨给我的感觉是不酷但挺能挣钱的，也知道盖茨现在主要在经营着他和妻子梅琳达的基金会，具体在做什么，怎么做非常模糊。借助这部纪录片，让我对盖茨有了更多的了解。结尾提到，他和妻子梅琳达都喜欢一本书：了不起的盖茨比，谈恋爱时，梅琳达的办公室有一盏绿灯，当她办公室没人了，就会点亮，盖茨就知道可以过去了。后来还把书里最喜欢的一句话刻到了自己家的图书馆上：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;His dream must have seemed so close that he could hardly fail to grasp it. He did not know that it was already behind him.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0004.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0004.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0004.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;影片中主要提到了盖茨在做的三件事：给非洲国家造厕所、消灭脊髓灰质炎（小儿麻痹症）、新能源（核能），每一件都困难重重，但对他来说又非常重要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gei-fei-zhou-guo-jia-zao-ce-suo&quot;&gt;给非洲国家造厕所&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-1-0001.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-1-0001.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-1-0001.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;众所周知，盖茨喜欢看书，有一天他看到一篇文章里提到「在第三世界，水依旧是致命的」，这些水会让很多孩子死去。因为污水被混进了生活用水里（他们无法忍受使用坑式厕所因为气味难闻，经常溢出，没有下水系统，于是选择随地排便），而孩子们可能在这些水里玩耍，部分水甚至会被用来饮用。于是他就开始思考全球健康问题，以及能做些什么。最直接的方式就是铺设一套下水系统，但这个成本太大，而且需要很多能源和水源，可行性较低。他就开始思索重新设计厕所和污水处理系统，而解决方案也很简单：提出一项竞赛，发明一种厕所，可以在没有水、电力或化粪池的情况下让厕所能够运转。这个周期会比较长，他又请人帮他发明一种新的处理厂，不会浪费水，也不会消耗很多能源。18 个月后这个机器被造出来了，但要在非洲国家正常运行难度不小，需要规模化生产以及维护人员等。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-13-0007.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-13-0007.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-13-0007.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0002.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0002.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0002.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0003.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0003.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-2-0003.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0004.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0004.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0004.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0005.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0005.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0005.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0006.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0006.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-1-12-0006.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有一段主持人问他：你最难过的是哪一天？盖茨说：妈妈去世的那天。他从小就喜欢看书，又极其聪明，父母也提供了非常好的成长环境，跟巴菲特的第一次会面也是母亲促成的，虽然盖茨声称 90 分钟后要回来写软件，但跟巴菲特一聊就是好几个小时。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人一开始都要先给成功下一个你自己的定义，有了这些对我们自身的具体期待，我们就更有可能成功。说到底，那不在于你得到了什么，甚至也不在于你给予了什么，而在于你成为了一个怎样的人。 — Mary Gates&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xiao-mie-ji-sui-hui-zhi-yan&quot;&gt;消灭脊髓灰质炎&lt;&#x2F;h3&gt;
&lt;p&gt;在微软的时候，盖茨会在每年抽一周的时间，把自己关在运河边的小屋里阅读和思考，吸收大量书籍和科技论文，帮助他理解未来的东西。现在他似乎把自己全部的生活都变成了一个漫长而持续的「思考周」。&lt;&#x2F;p&gt;
&lt;p&gt;基于「每个孩子都应该被平等地对待」的理念，他和妻子梅琳达向「消灭脊髓灰质炎」发起来冲击，但几年过去了，效果却不怎么好。这件事其实非常简单，只要给孩子注射疫苗就可以了，但又非常难，即使花了几十亿美元，还是无法完全消灭：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;尼日利亚的官方地图是 1945 年绘制的，志愿者根据这个地图无法有效地找到目标人群&lt;&#x2F;li&gt;
&lt;li&gt;一些宗教势力会对这种行为归结为「西方邪恶势力」，让行动难以展开&lt;&#x2F;li&gt;
&lt;li&gt;一些动乱地区的武装分子会以各种手段来阻挠这件事，比如杀害相关人员&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了绘制更精确的地图需要动用卫星和各种计算机技术；志愿者有限，为了更高效地覆盖目标群体，需要借助机器学习来预测；为了破除宗教势力的障碍，需要跟他们面对面沟通等等，真的是太难了。好在数据上确实变好了，但依然没有达到「零」目标，为什么要非零不可，盖茨是这么说的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了消灭一种疾病，如果你做到了零，那是很神奇的成就，因为，之后多少年，你都不用再花钱预防，不用去就救治，不会再有悲剧发生。但如果你试图消灭但失败了，那就很糟糕，因为你损害了全球医疗卫生事业的整体声誉和可信度&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于会涉及到大量的经费，他向老朋友巴菲特求助，而后者更是慷慨，拿出自己财产的一大部分给盖茨和梅琳达基金会，这也让他倍感压力和责任。「如果这是你要做的事，那就去做吧」，巴菲特对盖茨说。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的一个关键优势是我的狂热，我会全力以赴，不分昼夜，完全专注于如何写出好的软件。我喜欢狂热，我很享受，我不相信什么周末，我不相信度假。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0008.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0008.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0008.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0009.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0009.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-1-0009.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0011.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0011.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0011.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0012.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0012.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0012.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0013.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0013.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0013.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0014.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0014.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0014.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0015.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0015.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-2-2-0015.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这一集里也提到了盖茨的小伙伴们，上学时玩得最好的，到现在还能记得他家电话号码的小伙伴肯特，在一次登山中意外身亡；跟保罗一起经历微软的初创阶段，没日没夜地编程。可惜后来跟保罗之间出现了矛盾，直到保罗生命的尽头才算解开。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-neng-yuan&quot;&gt;新能源&lt;&#x2F;h3&gt;
&lt;p&gt;能源跟我们的生活息息相关，是现代生活方式的核心，目前这些传统能源（石油、煤矿、天然气）当被燃烧时，会向空气中释放二氧化碳，进而导致温室效应。而太阳能或风能之类的技术无法直接替代任何传统能耗，因为有巨大的存储成本，加上较低的转化率以及不受控。如今排向空气中的二氧化碳，会在大气中停留上百年，所以这需要在不同领域进行技术革新。常规创新可能会奏效，但周期较长（可能 50 年左右），于是盖茨开始寻找现在就能奏效的方式，他开始考虑那些被认为特别困难，风险又高的可能性：核能。核能最大的优势是能量密度极高，可以持续使用很多年，且不会有二氧化碳的排放。这里的难点有很多：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;化解人们心中对核能的恐惧&lt;&#x2F;li&gt;
&lt;li&gt;被设计地极其安全，即使是最差情况也不会导致核泄漏&lt;&#x2F;li&gt;
&lt;li&gt;搞定理论和实践层面上的难点&lt;&#x2F;li&gt;
&lt;li&gt;规模化生产&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;他找到了收购一家公司时认识的一位同学（此人也是个奇才，14 岁上大学，发表了 5 本关于面包的书，还研究了下小行星）来一起搞这件事。在科学家和工程师的努力下，这个足够安全的核能被研发了出来，而且经过了艰难的谈判后，终于可以在中国进行规模化生产，结果赶上了中美贸易战，这个计划被迫取消。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我觉得，比尔有种感觉，觉得自己不年轻了，今后的时间不多了，也许是子女去上学了，也许是朋友病倒了，越来越意识到来日无多了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0001.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0001.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0001.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0002.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0002.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0002.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0003.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0003.jpg 640w,&amp;#x2F;posts&amp;#x2F;the-great-gates&amp;#x2F;bill-3-13-0003.jpg 640w&quot;
    sizes=&quot;(max-width: 640px) 100vw, 640px&quot; width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这一集里还提到，他被垄断案搞得焦头烂额，好在最终被证明是清白的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当遇到任何问题，我都会考虑，能否用技术创新来解决，我就知道这个，我就擅长这个，所以，那就是我应对一切问题的方式&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;盖茨的这几个项目都极其困难，进展地也不顺利，他说他需要更加努力。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你遇到一个想要改变世界的人，一个永不放弃的人，一个有着比尔这样头脑的人，你很难不被感动，但也很难不产生疑问，他是不是陷的太深？他能解决这些问题吗？或许永远渴望不可及？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>对职业发展的一些想法</title>
            <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/career/</link>
            <guid>https://limboy.me/posts/career/</guid>
            <description>&lt;p&gt;在职业发展这条路上我们会发现有些人走得很顺畅，节节高升，而另一些人则原地踏步或爬得很累，感觉自己已经很努力了，却总是与机会擦肩而过。就像搭错墙的梯子，可能辛辛苦苦地爬了上去，结果却不是自己想要的。因此如果总是在错误的方向上使劲，就不要指望会出现正确的结果。&lt;&#x2F;p&gt;
&lt;p&gt;在我看来，跟职业发展最相关的两个因素是：&lt;strong&gt;稀缺度&lt;&#x2F;strong&gt;和&lt;strong&gt;剩余市场空间&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xi-que-du&quot;&gt;稀缺度&lt;&#x2F;h2&gt;
&lt;p&gt;稀缺度也就是你的优势，比如专业能力突出，或者综合能力很强等等，通常来说需要一定时间的积累。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;1.jpg 139.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;1.jpg 139.5w&quot;
    sizes=&quot;(max-width: 139.5px) 100vw, 139.5px&quot; width=&quot;139.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;理想状态下，稀缺度的增长是一条斜率固定的斜线，比如一些日企对工龄和职位很讲究，在公司待的时间越长，就越有优势。不过也有可能在某一行做了很久，但只是在重复昨天的故事，稀缺度的增长非常有限，斜率会比较小。同样的稀缺度，新人可以在更短的时间内达到。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;2.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;2.jpg 139.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;2.jpg 139.5w&quot;
    sizes=&quot;(max-width: 139.5px) 100vw, 139.5px&quot; width=&quot;139.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过现实生活中很少有事物的发展是线性的，比如在入行的前一段时间增幅很慢，甚至做了好几年也没见得有什么起色，但好像慢慢地事情开始有了变化，增幅越来越快，就像下面这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;3.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;3.jpg 139.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;3.jpg 139.5w&quot;
    sizes=&quot;(max-width: 139.5px) 100vw, 139.5px&quot; width=&quot;139.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;房产中介就是一个例子，一开始没什么客户资源，想买房或卖房都不会主动来找他。做的时间长了，口碑慢慢有了，客户资源多了，这些因素叠加在一起，就会出现稀缺性的陡增，好像之前播的种都开始开花结果了。&lt;&#x2F;p&gt;
&lt;p&gt;也有不少情况是后期的稀缺度会逐渐降低，因为年龄本身就是一个减分项，尤其是那些对年龄较敏感的行业，比如程序员、服务员。如果没有做出过什么成绩、也没什么影响力、对行业又缺少热情，那么很容易被新人取代。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;4.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;4.jpg 139.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;4.jpg 139.5w&quot;
    sizes=&quot;(max-width: 139.5px) 100vw, 139.5px&quot; width=&quot;139.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;也有些人初期很拼，具备足够高的稀缺度，后来节奏放了下来，斜率也越变越小。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;5.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;5.jpg 139.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;5.jpg 139.5w&quot;
    sizes=&quot;(max-width: 139.5px) 100vw, 139.5px&quot; width=&quot;139.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以，职业发展的一个重要因素就是培养自己的有效稀缺度。&lt;&#x2F;strong&gt;「有效稀缺」和「无效稀缺」的区别在于是否为市场所认可。比如一个程序员如果对产品也有不少心得和经验，这就是有效稀缺；同样是一个程序员，如果相声说得很好，可能加分就不那么多了（但可以给团队带来欢乐，还是加分的）；如果可以单手做 50 个俯卧撑，这样的配搭虽然也很稀缺，但这两个放一起无法形成合力，属于无效稀缺。&lt;&#x2F;p&gt;
&lt;p&gt;当我们面临一些选择时，选对了和选错了，结果往往会大不相同，从稀缺度的角度来看，可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;6.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;6.jpg 134w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;6.jpg 134w&quot;
    sizes=&quot;(max-width: 134px) 100vw, 134px&quot; width=&quot;134&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个往往是选了一条容易的路。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;7.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;7.jpg 116.5w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;7.jpg 116.5w&quot;
    sizes=&quot;(max-width: 116.5px) 100vw, 116.5px&quot; width=&quot;116.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个通常是选了个 hard 模式。&lt;&#x2F;p&gt;
&lt;p&gt;所以跳槽如果不能增加有效稀缺度，即使短期来看收益不错，从长远来看可能是弊大于利。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-ti-sheng-xi-que-du&quot;&gt;如何提升稀缺度&lt;&#x2F;h3&gt;
&lt;p&gt;最简单的方式是把自己投放到合适的环境中，如何才算是合适的环境呢？我觉得是「平级同事平均比你厉害 20%」。20% 自然是大概值，想表达的意思是可以从他们身上学到不少，同时又不会由于差距过大而出现沟通障碍。&lt;&#x2F;p&gt;
&lt;p&gt;除了「稀缺度」外，决定职业发展的另外一个重要因素是「剩余市场空间」。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sheng-yu-shi-chang-kong-jian&quot;&gt;剩余市场空间&lt;&#x2F;h2&gt;
&lt;p&gt;剩余市场空间就是市场对该稀缺度的需求程度，这里涉及到市场本身的大小和当前的饱和状况。比如 10 年前一个能修诺基亚全系列的人具有很高的稀缺度，也有不错的市场空间，但 10 年后，这个市场几乎已经没有了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;8.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;8.jpg 211w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;8.jpg 211w&quot;
    sizes=&quot;(max-width: 211px) 100vw, 211px&quot; width=&quot;211&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图上右边的那部分表示该稀缺度对应的市场空间，灰色表示该空间已被满足的部分，空白部分就是剩余市场空间，像上面这张图就表示这个市场还远未饱和，此时该稀缺度的人才会很受欢迎。&lt;&#x2F;p&gt;
&lt;p&gt;最理想的模式就是，市场空间足够大，同时满足需求的人才又不多，就像这样（比如当年的移动互联网初期），不过这样的时机并不多。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;9.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;9.jpg 295w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;9.jpg 295w&quot;
    sizes=&quot;(max-width: 295px) 100vw, 295px&quot; width=&quot;295&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一段时间过后，可能就会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;10.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;10.jpg 211w,&amp;#x2F;posts&amp;#x2F;career&amp;#x2F;10.jpg 211w&quot;
    sizes=&quot;(max-width: 211px) 100vw, 211px&quot; width=&quot;211&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这时会发现可选的机会越来越少，解决之道要么继续提升稀缺度，要么找一个足够大的剩余市场空间。不过不太建议选后者，因为你看到的跟实际的剩余市场空间往往不匹配，甚至很不匹配。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;职业发展是大事，建议每个季度在完成公司的 KPI 之外，也 Review 下自己的稀缺度和当前的剩余市场空间，发现苗头不对，可以早做准备。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么我觉得 Flutter 短期内不会流行但依然选择学习它</title>
            <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/is-flutter-the-future/</link>
            <guid>https://limboy.me/posts/is-flutter-the-future/</guid>
            <description>&lt;p&gt;Flutter 在去年小火了一把：连续两年在 Google IO 上亮相；1.0 正式版 Release；在闲鱼的大规模使用；各种教程文章的释出等等。我在去年 5 月份那样体验过一阵，觉得还挺不错的，但也没有进一步挖掘，感觉还尚早。我对跨平台框架有种抵触心理，因为它们通常打着提升开发效率的幌子，结果却是降低了效率，除了学习成本外，还有以下几个原因:&lt;&#x2F;p&gt;
&lt;p&gt;首先要抹平平台之间的差异这就不是一件小事，很容易出现各种吊诡的 bug，然后就要投入不少精力去找原因，还不一定能找到。而如果采用 Native 开发，相关的资料会多一些，出了问题找到解决方案的可能性也会大一些。&lt;&#x2F;p&gt;
&lt;p&gt;其次 Native 的沉淀会多很多，当你想要实现某个效果时，通常会有一些现成的（虽然不一定成熟）library 可供选择，即使不完全满足需求，也能从代码中找到思路，而跨平台框架的积累一定没有 Native 的多，因此这块也是个较大的劣势。&lt;&#x2F;p&gt;
&lt;p&gt;最后一定有一些场景是跨平台框架解决不了的，这时就需要求助于 Native。如果是多人，就涉及到了协作效率，如果是单人，那为什么不直接用 Native 开发呢？&lt;&#x2F;p&gt;
&lt;p&gt;因此当时虽然觉得 Flutter 不错，还是没有入坑。Flutter 除了要面对这三个问题外，它的学习成本还不低，使用 dart 语言开发，这本身就是一道足够高的槛; 使用声明式写法来表达 UI 也不一定能被接受; 那一大坨的 API 也着实让人发怵；再加上还有很多 issues 待解决。因此我认为短期内它不会流行。&lt;&#x2F;p&gt;
&lt;p&gt;那为什么我依然选择学习它呢，最重要的几个原因是：开发体验超预期；带来的副作用较小；插件机制弥补了局限性；活跃的社区。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-ti-yan&quot;&gt;开发体验&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ide&quot;&gt;IDE&lt;&#x2F;h4&gt;
&lt;p&gt;能够使用 VSCode 作为主力 IDE 这本身就有足够的吸引力，Debug、Widget Inspector、Hot Reload、Automatically get packages 等等一应俱全，就连被诟病的嵌套过深，VSCode 也提供了一些便利：在每个括号后面以注释形式标注（但不是真的注释）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-nested.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-nested.jpg 278w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-nested.jpg 278w&quot;
    sizes=&quot;(max-width: 278px) 100vw, 278px&quot; width=&quot;278&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对某个类的参数不太清楚，光标移上去即可，想看下实现，Cmd+Click。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-hover.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-hover.jpg 264.5w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-hover.jpg 264.5w&quot;
    sizes=&quot;(max-width: 264.5px) 100vw, 264.5px&quot; width=&quot;264.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;想快速看下 Framework 里某个类的实现，Cmd+T&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-cmd-t.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-cmd-t.jpg 306.5w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-cmd-t.jpg 306.5w&quot;
    sizes=&quot;(max-width: 306.5px) 100vw, 306.5px&quot; width=&quot;306.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一些贴心的小功能&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-widget.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-widget.jpg 112w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-vscode-widget.jpg 112w&quot;
    sizes=&quot;(max-width: 112px) 100vw, 112px&quot; width=&quot;112&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当然也有改进空间，比如特别想要 auto import 功能。如果想要更完善的支持，可以使用 Android Studio，后者还提供了 Widget Tree、Performance Chart 等功能。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kai-fa-yu-yan&quot;&gt;开发语言&lt;&#x2F;h4&gt;
&lt;p&gt;Dart 这门语言本身并不复杂，看着挺舒服的，没有新发明一些概念，尽量简单（有些地方感觉过于简单了，比如 class 可以同时表示 interface），对异步编程有着很好的支持，自带的标准库基本够用。如果真静下心来看的话，不出三天，语言方面应该不会有太大的障碍了。&lt;&#x2F;p&gt;
&lt;p&gt;Dart 是一门类型安全的语言，跟多数静态语言一样，也支持类型推导，写起来比较舒服。泛型、匿名函数等常见的语言特性都有，甚至支持 mixins。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bian-xie-ti-yan&quot;&gt;编写体验&lt;&#x2F;h4&gt;
&lt;p&gt;得益于 Flutter 的设计，大多数情况下 UI 展示通过 Widget 的组合就基本搞定了，Widget 就是 Description 或者 Config，告诉框架这个 Widget 的一些信息，框架拿到后再构建一个真实的 View 出来。&lt;&#x2F;p&gt;
&lt;p&gt;状态管理和信息流处理也都有很好的支持，基本上可以用 GUI 编程的最佳体验来写。由于 Flutter 是基于最底层的 VSync 信号结合 Skia &#x2F; Text 等引擎来构建视图，有时会遇到 Native 很方便地支持但 Flutter 不支持或者需要额外开发的场景，比如 TextFiled 的 Context Menu，Native 什么都不用做，这个 menu 就有了，而 Flutter 并没有，需要自己实现。&lt;&#x2F;p&gt;
&lt;p&gt;举一个点击事件的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GestureDetector&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      onTap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; () {
&lt;&#x2F;span&gt;&lt;span&gt;        bloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;deleteHabit&lt;&#x2F;span&gt;&lt;span&gt;(habit, context);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Navigator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;delete&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TextStyle&lt;&#x2F;span&gt;&lt;span&gt;(color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.red),
&lt;&#x2F;span&gt;&lt;span&gt;      )),
&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很直观：给 Text Widget 添加一个手势，当点击时，执行 &lt;code&gt;onTap&lt;&#x2F;code&gt; 里面的逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-zuo-yong&quot;&gt;副作用&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说，引入了跨平台框架后会带来一些性能上的损失，App 的 Size 也会大一些，可能还会增加 Crash 率。那 Flutter 在这几块的表现如何呢？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-neng-biao-xian&quot;&gt;性能表现&lt;&#x2F;h4&gt;
&lt;p&gt;我自己试过一个有点复杂的 Demo，Release 模式在 iOS 上跑起来很流畅，效果如下，在 Nexus 6P 上也大致如此&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;camo.githubusercontent.com&#x2F;be369abc92c87ee76810c33719c35161c02b885d&#x2F;68747470733a2f2f692e6c6f6c692e6e65742f323031382f31322f30362f356330393432383237653436332e676966&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过网上有说官方的 Demo 在部分 Android 设备上(系统主要为 4.4)出现了卡顿（iOS 正常），可能在 Android 低端机上表现还不够理想。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bao-da-xiao&quot;&gt;包大小&lt;&#x2F;h4&gt;
&lt;p&gt;我的一个比较简单的 App，上架了之后，在 Google Play 的大小为 7.8M，在 AppStore 上是 15 M，所以大致是 Android 的比原生大 5 M，iOS 的比原生大 10 M 那样。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-android-size.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-android-size.jpg 153.5w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-android-size.jpg 153.5w&quot;
    sizes=&quot;(max-width: 153.5px) 100vw, 153.5px&quot; width=&quot;153.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-ios-size.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-ios-size.jpg 377w,&amp;#x2F;posts&amp;#x2F;is-flutter-the-future&amp;#x2F;flutter-ios-size.jpg 377w&quot;
    sizes=&quot;(max-width: 377px) 100vw, 377px&quot; width=&quot;377&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;crash&quot;&gt;Crash&lt;&#x2F;h4&gt;
&lt;p&gt;目前还没有这方面的数据，因为量不大，不好下结论。从个人体验来说，遇到的概率比较少，在 Develop 模式下倒是遇到过开机 Crash，Release 模式下还没有遇到过。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cha-jian-ji-zhi&quot;&gt;插件机制&lt;&#x2F;h3&gt;
&lt;p&gt;Flutter 提供了一套完善的插件机制方便与 Native 端进行数据传送、方法调用、流式处理。大致的实现是定义好两端都认识的基础类型，然后对消息进行编码和解码，再根据不同的消息使用目的（数据传送还是方法调用还是事件订阅）来执行不同的操作，这就给了 Flutter 很大的扩展空间。&lt;&#x2F;p&gt;
&lt;p&gt;有了这套插件机制，Native 和 Flutter 就可以各司其职。Flutter 负责展示相关的，Native 负责提供需要的数据，以及暴露 Native 的能力供调用。比如 App 需要实现跟服务端实时通信的功能，可以在 Native 端开发好功能，然后通过 EventChannel 把数据同步过去即可。&lt;&#x2F;p&gt;
&lt;p&gt;在性能这块，我记得看过闲鱼的一份报告，大概是 10K 以下的数据耗时不到 1ms，因此小数据的互传问题不大。&lt;&#x2F;p&gt;
&lt;p&gt;在 pub.dartlang.org 上，Flutter 相关的插件数量有 2k 多，评分在 90 及以上的差不多有 1k。不多，但也不算少了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huo-yue-de-she-qu&quot;&gt;活跃的社区&lt;&#x2F;h3&gt;
&lt;p&gt;Flutter 项目在 Github 上有近 5 万个关注； 在掘金上，Flutter 标签下有 800 多篇文章；闲鱼团队也在主推 Flutter；Reddit 上 FlutterDev 有近 1 万个关注者；StackOverflow 上也有近万个 Flutter 相关的提问。关注社区的活跃度其实就是想知道会不会在短期内挂掉，从目前的状况看，我觉得可能性比较小，而它被另一个同类产品 PK 掉的可能性则更小，因此值得投入时间去了解它。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;目前 Fluter 比较适合 Side Project 或探索性的项目，就我有限的开发经验来讲，还是挺舒服的，毕竟用优雅的姿势同时搞定两端还是有吸引力的，这也是我选择学习 Flutter 的主要原因。而公司的主打 App 引入 Flutter 则需要冒一定的风险，遇到问题不一定能够 hold 住，短时间内也不一定能带来多少效率上的提升，还要对支持体系进行改造，可能也就大厂玩得起吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>「不就是」与「不仅仅是」</title>
            <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/just-not-only/</link>
            <guid>https://limboy.me/posts/just-not-only/</guid>
            <description>&lt;p&gt;假设我们用笔在纸上画一条线，就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-1x.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-1x.png 295.5w,&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-1x.png 295.5w&quot;
    sizes=&quot;(max-width: 295.5px) 100vw, 295.5px&quot; width=&quot;295.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来很丝滑。但如果有一个放大镜，放大到 4 倍再来看看，这时可能就会发现一些断点了：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-4x.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-4x.png 295.5w,&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-4x.png 295.5w&quot;
    sizes=&quot;(max-width: 295.5px) 100vw, 295.5px&quot; width=&quot;295.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果再放大到 8 倍，这些断点就会更加明显：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-8x.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-8x.png 295.5w,&amp;#x2F;posts&amp;#x2F;just-not-only&amp;#x2F;scale-8x.png 295.5w&quot;
    sizes=&quot;(max-width: 295.5px) 100vw, 295.5px&quot; width=&quot;295.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但其实它们是同一个事物，变化的只是观察的方式。远看和近看，近看和细看，会有不同的风景。&lt;&#x2F;p&gt;
&lt;p&gt;So What?&lt;&#x2F;p&gt;
&lt;p&gt;我想起这几次去日本让我印象深刻的一点：把一些小事做到极致。比如只做乌冬面的「山元面蔵」，很小的店面，营业时间也很短，可选的也非常有限，但面就是好吃，就是要排队才能吃的上；又比如腌菜，一听名字就 low low 的，但居然大老远带了几包回来，因为路过一家叫「大安」的腌菜店，试吃了下，居然被征服了。&lt;&#x2F;p&gt;
&lt;p&gt;不就是乌冬面么，不就是腌菜么？这就好比切换到了 1x 视角，乍看之下那条线确实是连续的，你的判断没有错。但有心的人会拿起 4 倍镜甚至 8 倍镜去看，真的没有瑕疵么，没有改进的空间了么？这就进入到了「不仅仅是」模式了。&lt;&#x2F;p&gt;
&lt;p&gt;客户端编程有什么难的么？不就是 MVC 架构加一些常用库再调调系统 API 么？差不多还真就是这些，怪不得 iOS 开发没人要了，不如换一个朝阳产业吧，听说 AI 比较火？&lt;&#x2F;p&gt;
&lt;p&gt;这就是 1x 视角带来的问题，他会影响你的判断，让你放弃一些本来有机会做出一番成就的领域。其实开一下 4x 视角就会发现并没有那么简单：如何优雅地实现动画效果；如何让布局代码更加直观；如何让写出来的页面更容易维护；如何提高多人协作的效率等等，如果发现类似这些问题都已经有成熟的解决方案，也就是这条线在 4x 放大镜下，依旧保持着很好的连续性，或许可以考虑换一条线试试。&lt;&#x2F;p&gt;
&lt;p&gt;如果还不甘心，那就开一下 8x 视角。高性能图片处理、图片滤镜系统有不错的方案么？高频的本地数据读写及服务端同步有好的实现么？网络通信安全及二进制包加密有没有新的玩法？等等，通常会有那么几个有挑战的，看看自己有没有兴趣和能力搞定。&lt;&#x2F;p&gt;
&lt;p&gt;所以，客户端编程不仅仅是「MVC 架构加一些常用库再调调系统 API」，自然后端开发也不仅仅是「CRUD 工程师」。只要调整下放大倍数，就会发现那些「断点」，这些都可以作为切入点。&lt;&#x2F;p&gt;
&lt;p&gt;内心产生的浮躁感，往往是倍数调得不够高，放眼看去就是一条完美的线。「我的天才女友」里，埃莱娜问莉拉：为什么要学习拉丁文？莉拉回答：因为她美。如果这是你在乎的领域，如果你觉得她还不够美，那就让她变得更美吧。在别人眼中她可能「不就是 xx 么」，但在你的眼中，她「不仅仅是 xx」。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的 2018</title>
            <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-2018/</link>
            <guid>https://limboy.me/posts/my-2018/</guid>
            <description>&lt;p&gt;今年最大的事情应该就是从公司离职了，到现在也有半年多的时间，期间基本处于摸索阶段，倒也还小有收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gan-wu&quot;&gt;感悟&lt;&#x2F;h3&gt;
&lt;p&gt;如何判断一个人的状态呢？我觉得如果能够清楚的回答：为什么这个时间要做这件事？那就是好的状态。因为这背后会涉及到一些深层次的原因，没有想清楚是很难回答上来的。&lt;&#x2F;p&gt;
&lt;p&gt;为了回答这个问题，首先要知道「做什么」？如何知道呢？不妨以终为始，来看看想要的结果是什么，我希望在我离开这个世界前能够&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;给特定领域（们）带来一些积极的影响。&lt;&#x2F;li&gt;
&lt;li&gt;对世界有更深的了解。&lt;&#x2F;li&gt;
&lt;li&gt;有一小撮聊得来的人。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 1 点，需要先选择一个「领域」。这个领域要跟自己的特点有较大的契合度，同时在短期内不太会被颠覆。这里就涉及到认识自己的问题，我觉得最好的方法就是多尝试。这半年时间里我啃过机器学习，还是从数学层面开始啃的，程度大概是可以理解反向传播涉及到的公式，同时对各类神经网络的实现方式和适用场景有了解；刷过 LeetCode，感觉还是挺吃力的，虽然到后来能找到点窍门，但也没有坚持下去；看完了一本英文的操作系统书；做了一个匿名 App，小范围传播了下，还挺受欢迎的。这些事情尝试下来，同时回顾自己之前感觉比较爽的时刻，就大概知道什么事情是有吸引力的，哪些事情是能力范围外的。在这个前提下再去找匹配的领域就会方便许多。&lt;&#x2F;p&gt;
&lt;p&gt;选定的领域往往会比较大，这时就要进行细分，看看哪块是自己感兴趣的，哪块是比较重要的，哪块是自己不懂的，哪块是最有可能产生高杠杆率的。然后着重突破这一小块细分的领域，先成为这一小块的专家，再去找下一块合适的小领域。&lt;&#x2F;p&gt;
&lt;p&gt;知道了做什么之后，就要选择怎么做，我的经验是「创作和分享」。创作能够将知识点联结起来，达到巩固和完善的效果，同时还能感受到灵感和创意，以及克服种种困难最终完成作品的成就感。分享（通常是文章）考验的是对原理的理解程度，往往写着写着就发现自己并没有真的掌握，同时还可以给其他人带来帮助。&lt;&#x2F;p&gt;
&lt;p&gt;第 2 点对应的是「兴趣」。比如看「基因传」可以了解基因是怎么回事，它是怎么被发现的。「汽车是怎样跑起来的」可以对汽车有更深的了解。电影、小说也一样。&lt;&#x2F;p&gt;
&lt;p&gt;第 3 点是领域+兴趣。除了血缘、地缘和业缘外，如果要在更大范畴里找到那些人，就要进行广播。作品是最好的广播媒介，无论是一个 app、一本书或一篇文章。&lt;&#x2F;p&gt;
&lt;p&gt;知道了领域和兴趣后，接下来就是时间的分配。我非常喜欢 2、3、5 这 3 个数，不仅是前三个质数，还是斐波那契数列，而且加起来正好是 10。如果一天有 10 小时可自由支配时间的话，理想状态下，5 小时分给领域，3 小时分给兴趣。分给领域的时间要么有助于加深理解，要么有助于扩大圈子，而不仅仅是重复技能。&lt;&#x2F;p&gt;
&lt;p&gt;我的大领域是「表现端」，细分一下可以先啃客户端，再细分就是 iOS 端，再细分到 Swift，iOS 特性等等，也可以细分到跨平台层如 Flutter 开始啃，当然相关领域如后端&#x2F;设计也需要一并了解。是不是很像一棵树，从根节点开始，一步步找到子节点，然后再回溯。我希望在交出满意作品的同时，可以为这个领域做出点贡献。&lt;&#x2F;p&gt;
&lt;p&gt;经过以上的分析后，回答这个问题就会更加有底了。但这还只是完成了一半，甚至是一小半，因为知道和做到之间还有一条很大的鸿沟。如果不知为 0，知道为 1，做到至少是 10。也就是做到的难度比知道要大上 10 倍，因为这里有一个拦路虎：旧习惯。不要指望能够一下子做出改变，合适的方法应该是从很微小的地方着手，进而对后续的行为带来一系列的影响。比如手机放得离床远 1 米，或者把电脑放床边，临睡前翻开感兴趣的电子书，这样第二天醒来之后可以接着看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-fa&quot;&gt;启发&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;de-zhou-bu-ke-tou-zi&quot;&gt;德州扑克(投资)&lt;&#x2F;h4&gt;
&lt;p&gt;这个游戏可以很简单地玩，也可以高难度地玩。输了几次之后发现只要控制入池率，也就是只玩好牌，然后选择有跟牌价值的牌玩，一般不会输得太惨（冤家牌除外），尽管看起来少了很多乐趣。&lt;&#x2F;p&gt;
&lt;p&gt;每天的精力就像筹码，如何用好这些筹码来换取最大的回报，值得想一想。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huang-shi-zhan-zheng-ce-lue&quot;&gt;皇室战争(策略)&lt;&#x2F;h4&gt;
&lt;p&gt;这也是玩了很久的一款游戏，到了 4000 的坎之后发现很难再往上爬了，即使偶尔升了上去，也会很快掉下来。以为是卡牌的等级原因，看过几次解说之后发现思维方式很不一样。我通常会按固定的套路出牌，等对方出牌后再想应该怎么应付；但他们会记对方出过什么牌，将要出什么牌，自己的哪些牌要藏着，应该集中精力攻哪边，等等。总体来说是被动应付和主动选择的区别。&lt;&#x2F;p&gt;
&lt;p&gt;这款游戏让我了解到自己在策略方面的不足。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ri-ben-zhi-ye&quot;&gt;日本(职业)&lt;&#x2F;h4&gt;
&lt;p&gt;今年去了两次日本，一次是东京，另一次是京都，印象较深的一点是他们的职业精神。公交司机会挨个对下车的乘客行礼，一家店可以只做乌冬面（配一些辅菜），就连去漂流，划船的小哥也会给游客们讲笑话（尤其是在语言不通的情况下），做一些表演，活跃气氛。有种既然选择了这份职业，就值得把它做好的心态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lie-biao&quot;&gt;列表&lt;&#x2F;h3&gt;
&lt;p&gt;以下是我的 Best 列表：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dian-shi-ju&quot;&gt;电视剧&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The Newsroom (嗯，看哭了)&lt;&#x2F;li&gt;
&lt;li&gt;Rick and Morty&lt;&#x2F;li&gt;
&lt;li&gt;Breaking Bad&lt;&#x2F;li&gt;
&lt;li&gt;Better Call Saul (前三季)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;books&quot;&gt;Books&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Operating Systems: Three Easy Pieces (深入浅出不枯燥，会讲演化过程)&lt;&#x2F;li&gt;
&lt;li&gt;上帝掷骰子吗？（作者非常会讲故事，能学到不少知识）&lt;&#x2F;li&gt;
&lt;li&gt;原则（立足于现实、第三选项、有效决策、避免杏仁核劫持、有意义的人际关系）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;apps&quot;&gt;Apps&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Bear (iPhone + Mac)&lt;&#x2F;li&gt;
&lt;li&gt;Tweetbot (iPhone + Mac)&lt;&#x2F;li&gt;
&lt;li&gt;Things 3 (iPhone + iPad + Mac，用的不多，收藏价值更大)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;quotes&quot;&gt;Quotes&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming, as in many fields, the hard part isn’t solving problems, but deciding what problems to solve. Imagination is hard to measure, but in practice it dominates the kind of productivity that’s measured in lines of code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是欣赏艺术，还是领悟科学，我们最终得到的将是美的享受和看待世界的全新角度。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplicity is complicated but the clarity is worth the fight.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;个体唯一能做的，就是保有自己的一份自由，就是这个世界怎么变，我自己有我自己的世界，这个你不能侵犯。&lt;&#x2F;p&gt;
&lt;p&gt;陈佩斯·事了拂衣去&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The noblest pleasure is the joy of understanding.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;wei-sheng&quot;&gt;尾声&lt;&#x2F;h3&gt;
&lt;p&gt;今年最大的收获大概是更加明确了自己想要什么，之前有小伙伴问我，在名校（CMU）一般专业和一般学校好专业之间如何选择，我说这是在考验你是否真的喜欢那个专业。后来自己也遇到了类似的场景，因为时不时会有猎头推荐不错的职位。坚持自己所爱确实挺难的，尤其是在收入有明显差距的情况下，但从长远来看，我相信这份坚持是值得的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>时而不见</title>
            <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/12hour/</link>
            <guid>https://limboy.me/posts/12hour/</guid>
            <description>&lt;p&gt;某天深夜，独自在床上辗转，忽然被深深的孤独感笼罩，那一刻，我想找到一个出口，一个不用担心身份，不用纠结于措辞，不用担心其他人看法的地方，最好第二天起来就不见了。就像深夜食堂一样，只在晚上营业，早上关门休息。&lt;&#x2F;p&gt;
&lt;p&gt;但是我找不到，所有的社交网络都需要一个账号，而 Note 显然也无法满足我的需求。&lt;&#x2F;p&gt;
&lt;p&gt;我喜欢泡咖啡馆，这个 app 应该像一个关了灯的咖啡馆，你说话会有人听到，可能会有回应，但不知道你是谁。&lt;&#x2F;p&gt;
&lt;p&gt;既然没有满足需求的产品，那就动手做一个吧。&lt;&#x2F;p&gt;
&lt;p&gt;一开始的想法是只在晚上 22 点开放，早上 7 点关门，因此最开始这个 app 的名字叫「2207」。做完后，发给几个朋友内测，感觉还蛮新奇的，会猜某个帖子是不是 xx 发的，也会对晚上 10 点多了份期待。后来更新 app 之后，他们要到晚上才能使用，就不够方便了。于是一个 idea 涌了上来：不如任何时段都可以，然后发完 12 个小时后，自动消失。&lt;&#x2F;p&gt;
&lt;p&gt;于是就有了「时而不见」这个 app。&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-1.jpg 310.5w,&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-1.jpg 310.5w&quot;
    sizes=&quot;(max-width: 310.5px) 100vw, 310.5px&quot; width=&quot;310.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-2.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-2.jpg 310.5w,&amp;#x2F;posts&amp;#x2F;12hour&amp;#x2F;2207-2.jpg 310.5w&quot;
    sizes=&quot;(max-width: 310.5px) 100vw, 310.5px&quot; width=&quot;310.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再来说说技术层面，一直想用 Swift 正经开发一个 App，这次终于如愿以偿。Swift 是我使用过的语言中最优雅的，就是 Xcode 后腿拖的比较严重，比如两个 block 一嵌套，自动提示就 gg 了，再加上不支持 Vim，开发效率上也是打了点折扣。后端语言选择了 Go，因为使用简单，性能也足够好，口碑和社区也都不错，服务托管在了 Google Cloud 上。&lt;&#x2F;p&gt;
&lt;p&gt;我希望这个 App 能够保持较小的体量，然后服务好这一小撮人，控制好内容。&lt;del&gt;为了避免麻烦，会选择不在国内上架。就不上 app store 了，不定期在&lt;a href=&quot;https:&#x2F;&#x2F;testflight.top&#x2F;t&#x2F;2eIzAb&quot;&gt;这里&lt;&#x2F;a&gt;放出可用名额。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>离开舒适区</title>
            <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/leave-the-comfort-zone/</link>
            <guid>https://limboy.me/posts/leave-the-comfort-zone/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-shu-gua-qu&quot;&gt;什么是舒适区&lt;&#x2F;h3&gt;
&lt;p&gt;简单来说就是待着很舒服的一个区域。不会有太大的压力，做的事情也没什么挑战，从大脑层面来说就是不太需要前额叶皮层的参与，通过基底核(自动处理系统)就能搞定大部分事情。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_1.jpg 300w,&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_1.jpg 300w&quot;
    sizes=&quot;(max-width: 300px) 100vw, 300px&quot; width=&quot;300&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这些还是偏感性层面，后来看到王兴的一句话，觉得可以比较好的形容这种状态：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我一整天都没看到、想到、或做过什么值得在饭否上说的事，那这一天就太浑浑噩噩了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;yi-zhi-dai-zai-shu-gua-qu-you-shi-yao-wen-ti-yao&quot;&gt;一直待在舒适区有什么问题么？&lt;&#x2F;h3&gt;
&lt;p&gt;停留在舒适区并没有什么问题，甚至是一件必要的事。就像爬山爬累了，需要找个地方歇一歇，看看风景，聊聊天，恢复精力，但不宜长时间停留。&lt;&#x2F;p&gt;
&lt;p&gt;这是知乎上的一个&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20618648&#x2F;answer&#x2F;15686746&quot;&gt;回答&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一种类人猿，他们比我们的人类祖先有更多的先天优势，比如有很结实的牙齿足以去消化一些纤维很粗的球茎植物，所以他们可以不用去到处进行一些危险的觅食活动，满足于一直靠啃食球状食物为生，而我们的祖先没有这些先天的优势，只能不断进行一些危险的冒险尝试，比如偷袭食肉性猛兽，和它们搏斗，常常因此而丢掉自己的性命，但是我们的祖先从未停止过这些冒险探索，从一次又一次的成功和失败中积累知识和经验，而那些相对于人类有更多先天优势的旁系类人猿一直未作其他尝试都是以球茎植物为生，地球上的环境变化了，球状植物大量减少，所以最后这种类人猿物种由于找不到充足的食物而逐渐消失，最后走到今天的是本来先天条件并不占优势的人类，并且发展壮大了起来。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一直待在舒适区其实就是处于一个不变性系统，这个系统可能就当前来看运行地还不错，但它不具有「反脆弱性」。所谓反脆弱性系统是指那些能够在波动性、随机性、混乱、压力状态下生存下来并且成长的系统。蜡烛的反脆弱性就较低，一股风或几滴水就可能把它浇灭，而火则能够抵抗更大强度的水，甚至能借风成长。&lt;&#x2F;p&gt;
&lt;p&gt;现实世界充满了变数，尤其是科技的参与，加速了进化的脚步。由于骨针的发明，兽皮可以被缝制为衣服，体毛就被「进化」掉了。在集装箱出现之前，码头的工人可以通过贩卖劳动力来换取相应的报酬，集装箱出现之后，这些劳动力就不需要了，尽管他们也抗争过，但毕竟改变不了趋势。科技跟人类的进化一直交织在一起，随着互联网、手机、AI、机器人的出现，它越来越成为了那个「看不见的手」。&lt;&#x2F;p&gt;
&lt;p&gt;同时，科技还有另一种玩法，通过满足短期快感，来形成上瘾性依赖。Rick and Morty 里有一个场景，不断给 Rick 播放一些温馨的画面，然后通过这个过程中产生的物质作为添加剂来制作威化饼干，是不是某些 App 有点像。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_2.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_2.jpg 540w,&amp;#x2F;posts&amp;#x2F;leave-the-comfort-zone&amp;#x2F;comfort_2.jpg 540w&quot;
    sizes=&quot;(max-width: 540px) 100vw, 540px&quot; width=&quot;540&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「物竞天择，适者生存」的基本规律一直在运行着，而科技大大地加速了这个过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-hui-chang-shi-jian-ting-liu-zai-shu-gua-qu&quot;&gt;为什么会长时间停留在舒适区？&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得主要有 3 个原因：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;惯性。&lt;&#x2F;li&gt;
&lt;li&gt;对未知的恐惧。&lt;&#x2F;li&gt;
&lt;li&gt;不知道去哪里。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;guan-xing&quot;&gt;惯性&lt;&#x2F;h4&gt;
&lt;p&gt;惯性是很强大的力量，用得最顺手的东西就有更高的使用可能，比如思考或做事方式，甚至对于外人看来不理想的生活也能非常适应。这是一把双刃剑，提高效率的同时，也容易形成定势，「自省」可以帮助意识到这点。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dui-wei-zhi-de-kong-ju&quot;&gt;对未知的恐惧&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;人类最古老而强烈的情绪，便是恐惧；而最古老最强烈的恐惧，便是对未知的恐惧。&lt;&#x2F;p&gt;
&lt;p&gt;— Howard Phillips Lovecraft&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;未知就意味着风险，而大多数人对于风险总是采取回避的策略。可是细想一下，如果生活中充满了确定性，那乐趣何在？&lt;&#x2F;p&gt;
&lt;p&gt;其实可以考虑下 EV，也就是期望值。有 20% 做成的可能性，因此带来的价值是 100，和 100% 的成功率，但价值是 5，哪个更可取？&lt;&#x2F;p&gt;
&lt;p&gt;陌生度越高，风险也就越大，借一笔钱给陌生人和给朋友，承受的风险是不一样的。这里貌似陷入了一个悖论：只有真正地去做某件事才能加深对它的了解，但如果对它不够了解，就有可能选择不做了。互联网出现后，这种尝试成本其实已经很低了，需要的资料网上一搜便有，有了一定的了解，这种恐惧感就会慢慢降低。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-zhi-dao-qu-na-li&quot;&gt;不知道去哪里&lt;&#x2F;h4&gt;
&lt;p&gt;可能是有限的信息源导致的狭窄的可选项，或者是心理偏见排除了不少潜在的可选项。合适的选项应该是自己的特点和跟这些特点匹配的行业的交集。这里难的是客观地认识自己。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-kai-shu-gua-qu-ke-neng-shou-huo-shi-yao&quot;&gt;离开舒适区可能收获什么&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;tong-ku&quot;&gt;痛苦&lt;&#x2F;h4&gt;
&lt;p&gt;第一个收获很可能是痛苦。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two kinds of pain. The sort of pain that makes you strong, or useless pain. The sort of pain that’s only suffering.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这是纸牌屋里的一段台词，哪种痛苦属于「only suffering」呢，我觉得是「未经反思的痛苦」。就像我们会 review 线上故障，找到系统中存在的问题，来避免下次再犯。不反思，就很有可能同样的痛苦一再出现。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sheng-cun-lu&quot;&gt;生存率&lt;&#x2F;h4&gt;
&lt;p&gt;其次是提升生存率，在自然选择这个游戏中的生存率。在打怪升级过程中积累的技能对于应对变化的环境大有裨益。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bi-mian-wu-liao&quot;&gt;避免无聊&lt;&#x2F;h4&gt;
&lt;p&gt;还有一些人，他们已经拥有了足够的自由度和应变能力，那么跳出舒适圈最大的收获可能是「避免无聊」。毕竟物质匮乏和精神无聊是人类的两大痛苦根源。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-chi-kai-shu-gua-qu&quot;&gt;如何离开舒适区&lt;&#x2F;h3&gt;
&lt;p&gt;以「做自我介绍」为例，我相信不少人是不太习惯在众人面前做自我介绍的，对于他们来说这就是一个离开舒适区的行为。我觉得可以从三个层面进行分解。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-chu-dong-li-ya-li&quot;&gt;基础（动力+压力）&lt;&#x2F;h4&gt;
&lt;p&gt;这个是回答为什么要离开舒适区，比如为什么要做好自我介绍。需要有合适的动力和压力。&lt;&#x2F;p&gt;
&lt;p&gt;通常我们不愿做好某件事，往往是缺少了压力或动力。从动力角度来讲，可能是台下坐着你喜欢的小姐姐，从压力角度，可以是领导正看着呢。&lt;&#x2F;p&gt;
&lt;p&gt;这两种力的力度要合适，压力过大容易焦虑，动力过大容易翻车。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xin-nian-zong-neng-zhao-dao-yi-tiao-lu-shou-neng-sheng-qiao&quot;&gt;信念（总能找到一条路+熟能生巧）&lt;&#x2F;h4&gt;
&lt;p&gt;信念可以帮助我们迈出那一步，比如创业，有时动力和压力都有了，但还是不敢。这时总得信一点什么，最好是经过自己验证同时对于离开舒适圈有帮助的。我相信的两条是：总能找到一条路以及熟能生巧。&lt;&#x2F;p&gt;
&lt;p&gt;对于陌生的事情，只要勤加练习，找到诀窍，至少不会做得太差，顶多比别人多花点时间。&lt;&#x2F;p&gt;
&lt;p&gt;有一个大概的创业想法，但不确定合不合适，一些细节也不知道该如何处理，那就继续想，找人聊，总能找到突破口。上天不会给一个你解决不了的问题的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-shi-fan-kui-xun-huan-jin-hua&quot;&gt;做事（反馈循环 + 进化）&lt;&#x2F;h4&gt;
&lt;p&gt;在反馈循环中不断地进化，最核心的是快速进化的能力。Airbnb 的创始人最开始只是因为付不起房租，决定出租房间里的 3 张气垫床。有客户上门之后，发现将房间出租这个 idea 有搞头，接下来不断进化，就成了现在的这个巨头了。&lt;&#x2F;p&gt;
&lt;p&gt;这种反馈可以是来自自己，比如掌握了某个知识点，也可以是来自外部。很少有想法一开始就完美，也很难一开始就把某件事做到满意，这并不重要。上线运行起来，收集用户的反馈，然后做出调整，可能就找到了一条之前根本没想过的路子。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-guo-jian-yan&quot;&gt;成果检验&lt;&#x2F;h3&gt;
&lt;p&gt;通常自己能感受到那种成长，如果要客观来看的话，「特定领域的不可替代性」或许是个不错的衡量方式。要么拓宽了特定领域（更多的可选项），或者提升了不可替代性。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>You and Your Career</title>
            <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/you-and-your-career/</link>
            <guid>https://limboy.me/posts/you-and-your-career/</guid>
            <description>&lt;p&gt;我们通常会遇到职业相关的问题，该选择哪个职业，如何进入某个领域，遇到瓶颈怎么办，是不是要换一份职业等等。这些问题很难通过灵机一动或者顿悟来找到答案。于是我就想，有没有一个合适的模型可以帮助我们思考，至少找到一些思路。还真有，而且这个模型我们每天都能接触到，就是「手机」。&lt;&#x2F;p&gt;
&lt;p&gt;手机如果要正常运行 App，需要满足一些特定的条件：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;硬件系统&lt;&#x2F;li&gt;
&lt;li&gt;操作系统&lt;&#x2F;li&gt;
&lt;li&gt;App Framework&lt;&#x2F;li&gt;
&lt;li&gt;App&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这些组成部分，上层依赖于下层，比如操作系统如果脱离了硬件系统，就没有了操作对象，也就失去了意义。通过这个模型可以帮助我们思考什么是最重要、值得去做的事情。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;硬件系统
&lt;ul&gt;
&lt;li&gt;身体&lt;&#x2F;li&gt;
&lt;li&gt;家人&lt;&#x2F;li&gt;
&lt;li&gt;朋友&lt;&#x2F;li&gt;
&lt;li&gt;财富&lt;&#x2F;li&gt;
&lt;li&gt;环境&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;操作系统
&lt;ul&gt;
&lt;li&gt;元能力（自律、开放、好奇、尝试）&lt;&#x2F;li&gt;
&lt;li&gt;通用能力（写作、沟通、学习）&lt;&#x2F;li&gt;
&lt;li&gt;重要领域的核心知识点&lt;&#x2F;li&gt;
&lt;li&gt;思维框架、方法论、原则&lt;&#x2F;li&gt;
&lt;li&gt;好的习惯&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;App Framework (职业)
&lt;ul&gt;
&lt;li&gt;编程&lt;&#x2F;li&gt;
&lt;li&gt;设计&lt;&#x2F;li&gt;
&lt;li&gt;影视&lt;&#x2F;li&gt;
&lt;li&gt;写作&lt;&#x2F;li&gt;
&lt;li&gt;管理&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;App (作品&#x2F;事迹)
&lt;ul&gt;
&lt;li&gt;iOS App&lt;&#x2F;li&gt;
&lt;li&gt;write a book&lt;&#x2F;li&gt;
&lt;li&gt;lead a team&lt;&#x2F;li&gt;
&lt;li&gt;start a company&lt;&#x2F;li&gt;
&lt;li&gt;direct a movie&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ying-jian-xi-tong&quot;&gt;硬件系统&lt;&#x2F;h3&gt;
&lt;p&gt;一部手机如果没有电，App 再好也无法运行；屏幕如果有亮点看着就会难受；网络连接模块出了问题，就会影响 App 的使用体验。&lt;&#x2F;p&gt;
&lt;p&gt;「身体」就像电池，年轻时电力充沛，连续熬两个通宵都没问题。等过了巅峰期，如果不注意维护，性能就会下降，不光运行时间短了，可能连 CPU 都会降频。&lt;&#x2F;p&gt;
&lt;p&gt;「家人」也容易被忽视，因为他们通常一直都在那里，而我们对经常出现的会习以为常。「以后有的是时间」，但如果优先级比较低，这些时间总是会被其他的事情消耗掉。&lt;&#x2F;p&gt;
&lt;p&gt;「朋友」，我觉得可以定义为有意义的人际关系，引用瑞·达里欧的话来说：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有意义的人际关系意味着人与人之间相互关心，但凡需要帮助就能得到帮助，无论工作内外大家彼此相伴，十分享受在一起的时光。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我们都有社交的需求，会想跟朋友分享、讨论些什么，一起经历些什么，在增进友谊的同时，感到不那么孤单，毕竟不想 die alone。&lt;&#x2F;p&gt;
&lt;p&gt;「财富」也是很重要的一个基础，一定程度上，它等价于自由度。因此不知道做什么时，积累财富至少不会错。但也不要上瘾或迷恋，16 核的 CPU 如果只是运行个计算器还是挺可惜的。&lt;&#x2F;p&gt;
&lt;p&gt;「环境」，比如低温状态下，手机可能会出现异常关机，身边的环境（包括工作环境&#x2F;公司环境&#x2F;大环境等）如果跟想要做的事不匹配，就换一个环境，如果没能力改变，就在这两者之间找到一种平衡。&lt;&#x2F;p&gt;
&lt;p&gt;硬件系统是基础中的基础，可以进行长期投资，一定会有合适的回报。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-xi-tong&quot;&gt;操作系统&lt;&#x2F;h3&gt;
&lt;p&gt;操作系统可以管理和控制计算机硬件和软件资源，对应到这个模型里，就是那些基础项，如果这些基础项足够强大，就能给 App 提供一个稳定、可靠、高效的运行环境，以下是我觉得比较重要的一些基础项：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yuan-neng-li&quot;&gt;元能力&lt;&#x2F;h4&gt;
&lt;p&gt;元能力是其他能力的基础，就像野外生存中会用到的胶带（参考「流言终结者」），或者无敌破坏王里阿修的神奇铁锤（坏了的东西，敲一敲就修好了），即使其他能力忽然间消失了，只要元能力还在就依然有重建的可能（愿原力与你同在···）。&lt;&#x2F;p&gt;
&lt;p&gt;「尝试」，或者说实验是很重要的一项特质。伽利略的特点之一就是爱做实验，包括思想实验。爱因斯坦称他为「现代科学之父」，相比之下，亚里士多德的那个时代对实验就不那么讲究了，比如他认为女人的牙齿比男人的少，甚至都不愿意去数一下自己妻子的牙齿。&lt;&#x2F;p&gt;
&lt;p&gt;「开放」，允许新观点挑战自己的心态。电视上有时会有这样的场景：一个人推开门扫视了下房间之后，发现要找的人不在里面，就走了，而那个人其实就躲在门背后。这就是思维盲点。一个人再聪明，也难免会有几个这样的盲点，跟其他人进行开放的讨论，就有可能找到这些盲点，进而做出更加合适的决策或行动。&lt;&#x2F;p&gt;
&lt;p&gt;「好奇」，WaitButWhy (WBW) 里有提到过一个比喻：Chef(厨师) and Cook(厨子)，厨师会带着好奇心去尝试各种原料和搭配，然后写成食谱，而厨子会按照食谱把菜做出来。瑞·达里欧也提到过「塑造者」的一个特质就是好奇(&lt;code&gt;我发现塑造者通常有一些共同特征：极富好奇心；有把事情弄清楚的强烈冲动&lt;&#x2F;code&gt;)。好奇心越少，就越容易按流程办事，不是想着去弄懂背后的真相&#x2F;原理，而是少犯错。&lt;&#x2F;p&gt;
&lt;p&gt;「自律」就是让大脑的前额叶皮层掌握话语权，而不是杏仁核。比如对「暗时间」的处理上，杏仁核会选择刷 Feed、玩游戏等带来短期快乐的事情，而前额叶皮层会倾向于做一些短期不那么快乐，甚至有点痛苦，但长期来看又很有收益的事情，比如阅读。这很难，但很值。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yong-neng-li&quot;&gt;通用能力&lt;&#x2F;h4&gt;
&lt;p&gt;无论从事哪个职业，都需要这些能力，如果这里出现了一个或几个明显的短板，就容易对职业生涯造成负面影响。&lt;&#x2F;p&gt;
&lt;p&gt;「写作」，Basecamp 招人除了技能过硬之外，对写作也有很高的要求，YC 的 Paul Graham 也是个很好的例子。写作之所以重要，是因为它能反应一个人的思考能力、语言组织能力以及专业技能。同时文字有比较长的生命周期，能够带来更长久的影响。&lt;&#x2F;p&gt;
&lt;p&gt;「沟通」，这绝不是一个简单的技能，很多时候，我们进行的只是「对话」。沟通需要整理好自己的观点、诉求，换位思考，倾听（对方想说什么，有怎样的感受和情感需求等）等。从社会属性讲，我们需要沟通，因为有社交需求；从工作层面讲，也需要沟通，因为不可避免地需要与别人合作，顺畅的沟通是良好合作的基础。&lt;&#x2F;p&gt;
&lt;p&gt;「学习」，如果对于学习能力有自信，有一套适合自己的高效学习方法，就不会害怕新事物，新领域，甚至还会有点兴奋。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhong-yao-ling-yu-de-he-xin-zhi-shi-dian&quot;&gt;重要领域的核心知识点&lt;&#x2F;h4&gt;
&lt;p&gt;查理芒格推崇多元思维模型：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;长久以来，我坚信存在某个系统——几乎所有聪明人都能掌握的系统，它比绝大多数人用的系统管用。你需要做的是在你的头脑里形成一种思维模型的复式框架。有了那个系统之后，你就能逐渐提高对事物的认识。&lt;&#x2F;p&gt;
&lt;p&gt;你必须知道重要学科的重要理论，并经常使用它们——要全部都用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;以下是基于 &lt;a href=&quot;http:&#x2F;&#x2F;bitandliteracy.github.io&#x2F;mental-models&quot;&gt;这篇文章&lt;&#x2F;a&gt; 精简的一些重要领域的核心知识点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;生物学
&lt;ul&gt;
&lt;li&gt;自然选择&lt;&#x2F;li&gt;
&lt;li&gt;差异化生存 (Survival by Differentiation)&lt;&#x2F;li&gt;
&lt;li&gt;遗传学 (Genetics)&lt;&#x2F;li&gt;
&lt;li&gt;生理学 (Physiology)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;会计
&lt;ul&gt;
&lt;li&gt;净现金流 (Free Cash Flow)&lt;&#x2F;li&gt;
&lt;li&gt;成长资本支出 (Growth Capital Expenditures)&lt;&#x2F;li&gt;
&lt;li&gt;沉没成本 (Sunk Cost)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;商业
&lt;ul&gt;
&lt;li&gt;格雷欣法则 (Gresham’s Law, 劣币逐良币)&lt;&#x2F;li&gt;
&lt;li&gt;内在价值 (Intrinsic Value)&lt;&#x2F;li&gt;
&lt;li&gt;经营杠杆 (Operating Leverage)&lt;&#x2F;li&gt;
&lt;li&gt;机会成本 (Opportunity Cost)&lt;&#x2F;li&gt;
&lt;li&gt;五力分析 (Five Forces)&lt;&#x2F;li&gt;
&lt;li&gt;品牌 (Brand)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;化学
&lt;ul&gt;
&lt;li&gt;自催化反应 (Autocatalytic reactions)&lt;&#x2F;li&gt;
&lt;li&gt;化合 (Compounding)&lt;&#x2F;li&gt;
&lt;li&gt;玻尔模型 (Bohr Model)&lt;&#x2F;li&gt;
&lt;li&gt;反应动力学 (Kinetics)&lt;&#x2F;li&gt;
&lt;li&gt;热力学 (Thermodynamics)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;经济学
&lt;ul&gt;
&lt;li&gt;信息不对称 (Asymmetric Information)&lt;&#x2F;li&gt;
&lt;li&gt;创造性破坏 (Creative Destruction)&lt;&#x2F;li&gt;
&lt;li&gt;效用递减 (Diminishing Utility)&lt;&#x2F;li&gt;
&lt;li&gt;规模经济 (Economies of Scale)&lt;&#x2F;li&gt;
&lt;li&gt;经济护城河 (Economic Moat)&lt;&#x2F;li&gt;
&lt;li&gt;机会成本 (Opportunity Cost)&lt;&#x2F;li&gt;
&lt;li&gt;囚徒困境 (Prisoner’s Dilemma)&lt;&#x2F;li&gt;
&lt;li&gt;公地悲剧 (Tragedy of the Commons)&lt;&#x2F;li&gt;
&lt;li&gt;市场 (Markets)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;工程学
&lt;ul&gt;
&lt;li&gt;抽象化 (Abstraction)&lt;&#x2F;li&gt;
&lt;li&gt;递归 (Recursion)&lt;&#x2F;li&gt;
&lt;li&gt;安全边际 (Margin of Safety)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;管理学
&lt;ul&gt;
&lt;li&gt;奥卡姆剃刀 (Occam’s razor)&lt;&#x2F;li&gt;
&lt;li&gt;帕金森定律 (Parkinson’s Law)&lt;&#x2F;li&gt;
&lt;li&gt;过程与结果 (Process versus Outcome)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;数学
&lt;ul&gt;
&lt;li&gt;复利 (Compound Interest)&lt;&#x2F;li&gt;
&lt;li&gt;决策树 (Decision Trees)&lt;&#x2F;li&gt;
&lt;li&gt;大数定律 (Law of Large Numbers)&lt;&#x2F;li&gt;
&lt;li&gt;概率论 (Probability Theory)&lt;&#x2F;li&gt;
&lt;li&gt;贝叶斯定理 (Bayes Theorem)&lt;&#x2F;li&gt;
&lt;li&gt;正态分布 (Normal Distribution)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;物理学
&lt;ul&gt;
&lt;li&gt;牛顿运动定律&lt;&#x2F;li&gt;
&lt;li&gt;电磁学&lt;&#x2F;li&gt;
&lt;li&gt;香农定理&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;心理学
&lt;ul&gt;
&lt;li&gt;自我服务偏见&#x2F;确认偏误&lt;&#x2F;li&gt;
&lt;li&gt;简单联想倾向&lt;&#x2F;li&gt;
&lt;li&gt;回馈倾向&lt;&#x2F;li&gt;
&lt;li&gt;保持一致性倾向&lt;&#x2F;li&gt;
&lt;li&gt;奖励和惩罚&lt;&#x2F;li&gt;
&lt;li&gt;被剥夺超级反映倾向&lt;&#x2F;li&gt;
&lt;li&gt;对比倾向&lt;&#x2F;li&gt;
&lt;li&gt;社会认同倾向&lt;&#x2F;li&gt;
&lt;li&gt;宜家效应&lt;&#x2F;li&gt;
&lt;li&gt;幸存者偏差&lt;&#x2F;li&gt;
&lt;li&gt;羊群效应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;si-wei-kuang-jia-fang-fa-lun-yuan-ze&quot;&gt;思维框架、方法论、原则&lt;&#x2F;h4&gt;
&lt;p&gt;这些就像是自动化的机器，是多年实践形成的一种下意识的反应。&lt;&#x2F;p&gt;
&lt;p&gt;比如这么一个场景：让同事帮忙随便点了份饭，也没有告知名称，后来来了四份饭，结果我拿错了（该场景节选自云风的博客）。有些人会怪订饭的同学没有告知自己的菜名；有些人会觉得又不是什么大事；有些人会据此想到了「三门问题」等等。&lt;&#x2F;p&gt;
&lt;p&gt;又或者老板说这个页面不够流畅，把它变得流畅些。有些人会反馈说目前只能做到这样了；有些人会从产品层面去考虑；有些人罗列出可能的优化点，并且给出投入的成本；有些人会告诉老板还有优先级更高的事情需要去处理等等。&lt;&#x2F;p&gt;
&lt;p&gt;这些就是埋藏在大脑里的自动化机器，如果能调教到很高的水准，就有更高的可能拿到好的结果。同理，如果放之任之，有可能一直是处于低功率状态甚至逆向在运行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hao-de-xi-guan&quot;&gt;好的习惯&lt;&#x2F;h4&gt;
&lt;p&gt;我们都知道习惯的力量很强大，如果能养成一些不错的习惯，就能够持续发挥作用，自己也不会觉得很累。比如习惯在危机中看到机会、找到问题的根因（root cause）、Adding Value to Others 、要事优先、早起、Eat Health、锻炼等等。&lt;&#x2F;p&gt;
&lt;p&gt;所以，如果不知道自己做什么是对的，就做一些不会错的事情，比如加强硬件系统和操作系统。&lt;&#x2F;p&gt;
&lt;p&gt;基础还会有放大作用，就像一个扇形，角度扩大一点点，圆周就可以增长不少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app-framework&quot;&gt;App Framework&lt;&#x2F;h3&gt;
&lt;p&gt;我们开发 App 会使用系统提供的各种 SDK，也就是 Framework，调用它们的 API 来达到符合自己需求的表现。在这里它的定位是「职业」。&lt;&#x2F;p&gt;
&lt;p&gt;有时会感到焦虑，不知道该做什么，好像找不到热情所在，又有被后来者替代的风险，还有生活的压力。一个原因是基础不够扎实，还有就是对「职业」这件事想得不多。这份职业最好结合了自己的兴趣和特长，这样才能走得远。职业不是 2、3 年的事，而是 2、30 年的事，这样就能慢下来，不那么浮躁和着急。就像种一棵树，需要给足够的时间，让它慢慢长。&lt;&#x2F;p&gt;
&lt;p&gt;距离 = 速度 x 时间，天赋决定了速度，但距离不仅仅取决于速度。&lt;&#x2F;p&gt;
&lt;p&gt;那么如何才能找到这样的职业呢？李笑来的苍蝇和蜜蜂的比喻我觉得比较合适：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;把一只蜜蜂装到啤酒瓶里，瓶底对着太阳，你看到的是，那蜜蜂一次又一次地撞到瓶底，永不放弃，坚持不懈，异常专注……直到累死。&lt;&#x2F;p&gt;
&lt;p&gt;把一只苍蝇装到啤酒瓶里，瓶底对着太阳，你看到的是什么呢？那苍蝇四处乱撞，一分钟不到的时间里，它就“误打误撞”冲出了瓶口……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在刚进入一个领域时，就是一只苍蝇，拼命尝试，各种尝试，各种冲撞。一旦找到方向后，马上转变成蜜蜂模式，顺着那个方向拼命地成长，拼命地突破。如果撞了一圈发现还是没有找到突破口，或者发现自己不感兴趣，就换一个领域。&lt;&#x2F;p&gt;
&lt;p&gt;所以年轻时最好多去尝试，这样有更大的几率找到自己中意的领域，同时也对自己有更好的了解。就怕爬了半辈子的梯子发现，搭错了墙。&lt;&#x2F;p&gt;
&lt;p&gt;如果没有机会去做这样的尝试，还有一个方法是回顾下自己最开心、最有成就感的几个时刻，从中应该能看到一些端倪，自己是喜欢创造，还是享受带领团队的那种成就感等等。挖掘到自己的喜好之后，再来看哪些领域跟自己的喜好有比较大的重叠度。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_1.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_1.png 374w,&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_1.png 374w&quot;
    sizes=&quot;(max-width: 374px) 100vw, 374px&quot; width=&quot;374&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还有一种方式是找到自己的精神导师，看看他们都在做什么，从中找到一些启发。比如我会去关注 Alan Kay, Bret Victor, Derek Sivers, Aaron Swartz 等，从他们的文章、作品中找到一些灵感和指引。&lt;&#x2F;p&gt;
&lt;p&gt;也可以尝试下「遗憾最小化」框架。当有一个比较大的决定需要去面对时，想象自己 80 岁的模样，自己最遗憾的事是哪些，哪个决定更能避免这些遗憾的发生。以下是我的 list，供参考：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;没有找到可以携手走完人生路的伴侣。&lt;&#x2F;li&gt;
&lt;li&gt;没有找到自己的热情所在。&lt;&#x2F;li&gt;
&lt;li&gt;没有在热情所在的事情上投入足够的时间。&lt;&#x2F;li&gt;
&lt;li&gt;没有一件值得骄傲的作品。&lt;&#x2F;li&gt;
&lt;li&gt;没有几个可以无话不说又互相关心的朋友。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果现在没有去做，是被什么牵绊住了么？如何解开？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app&quot;&gt;App&lt;&#x2F;h3&gt;
&lt;p&gt;App 就是我们的作品&#x2F;事迹。要让 App 流畅运行，一个是把 App 的性能优化到极致，这样即使操作系统比较弱，依旧可以玩得很溜。有一些人他们从小就知道自己要做什么，这就是很幸运的事。皮克斯的联合创始人艾德文·卡特姆从小就想成为一个动画师，同时自己又有数学和计算机才能，然后意识到计算机图形学将成为动画行业的基础，跟他的爱好几乎完全吻合，就决定投身于这行，结果自然也很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-shi-yao&quot;&gt;做什么&lt;&#x2F;h4&gt;
&lt;p&gt;Career 帮助我们画了一个圈，在这个圈里做什么依旧有很多的选择。要找那些高杠杆率的事情做。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I make sure to leave enough time in my schedule to think about what to work on. The best ways for me to do this are reading books, hanging out with interesting people, and spending time in nature.&lt;&#x2F;p&gt;
&lt;p&gt;— Sam Altman&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我有一个朋友，小刘。她之前在出版行业，负责技术相关的书籍。有一次跟她聊起为什么会选择这件事，她给出了推导过程：大学学的是计算机，因此对这块比较了解，但又不想成为一个地道的码农，同时也不想放弃这个优势，这样可选项就小了许多，再加上自己在文字上的敏感性，「技术出版」这个选项就浮上来了。&lt;&#x2F;p&gt;
&lt;p&gt;经过推导的选项，在执行起来也会安心一些，因为知道这即使不是最佳选择，至少不会错。&lt;&#x2F;p&gt;
&lt;p&gt;目标也很重要。就像玩游戏一样，在不断达成目标的过程中积累技能，然后向更高的关卡挑战。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zen-yao-zuo&quot;&gt;怎么做&lt;&#x2F;h4&gt;
&lt;p&gt;首先要定好优先级，最终能做成什么事情，几乎总是取决于优先级。精力是有限的资源，是用它在各个 app 之间穿梭，还是 focus 在最重要的事情上。&lt;&#x2F;p&gt;
&lt;p&gt;有时会发现时间确实不够用，这要做，那个答应别人了，也要做，留给自己的时间就不多了。 sivers 给出了一个解决方案：&lt;a href=&quot;https:&#x2F;&#x2F;sivers.org&#x2F;hellyeah&quot;&gt;No &amp;quot;yes.&amp;quot; Either &amp;quot;HELL YEAH!&amp;quot; or &amp;quot;no.&amp;quot;&lt;&#x2F;a&gt;。如果不是很兴奋地想要去做，那就 say no。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you say no to most things, you leave room in your life to really throw yourself completely into that rare thing that makes you say “HELL YEAH!”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;mu-biao-fen-jie&quot;&gt;目标分解&lt;&#x2F;h5&gt;
&lt;p&gt;这是很重要的一步，连殖民火星这样的事经过分解之后都可以变得不那么遥不可及，其他的目标又能难到哪里去。&lt;&#x2F;p&gt;
&lt;p&gt;分解的过程也是简化的过程，简化到可以马上就上手做。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing a book seems daunting, so start by doing an essay. If an essay is too much, start by writing a paragraph summary. The important thing is to have something done right away.&lt;&#x2F;p&gt;
&lt;p&gt;— Aaron Swartz (Productivity)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;瑞·达里欧在「原则」这本书里，对于如何实现目标有比较多的阐述，其核心是下面这张图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_2.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_2.png 275.5w,&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_2.png 275.5w&quot;
    sizes=&quot;(max-width: 275.5px) 100vw, 275.5px&quot; width=&quot;275.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在不断地迭代过程中，习得强大的进化能力。即使最开始目标定的有点不妥，只要能根据反馈和结果不断调整，就可以回到正确的轨道上。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;达成过程中对操作系统和 App Framework 都要有所增强。&lt;&#x2F;li&gt;
&lt;li&gt;经常利用痛苦来引导自己进行高质量的思考。认识到自己的思维盲点，避免杏仁核劫持，找到问题的根因。&lt;&#x2F;li&gt;
&lt;li&gt;几乎总是存在着一条你还没有发现的有利道路。&lt;&#x2F;li&gt;
&lt;li&gt;我怎么知道我是对的。&lt;&#x2F;li&gt;
&lt;li&gt;营造开放的环境。&lt;&#x2F;li&gt;
&lt;li&gt;不断迭代。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;我们一生中大部分的时间都会花在工作上，无论是替别人工作，还是为自己工作。因此思考工作这件事是非常有必要的。 WBW 给出了一张图，可以参考下。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_3.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_3.png 320w,&amp;#x2F;posts&amp;#x2F;you-and-your-career&amp;#x2F;career_3.png 320w&quot;
    sizes=&quot;(max-width: 320px) 100vw, 320px&quot; width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要用动态的眼光去看自己和周围的世界，不断地调整和进化，这样就有可能找到自己的 sweet spot。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;www.cs.virginia.edu&#x2F;~robins&#x2F;YouAndYourResearch.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2018&#x2F;04&#x2F;picking-career.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;sivers.org&#x2F;hellyeah&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.amazon.com&#x2F;Pivot-Only-Move-That-Matters&#x2F;dp&#x2F;0143129031&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;blog.samaltman.com&#x2F;productivity&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;www.aaronsw.com&#x2F;weblog&#x2F;productivity&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;bijansabet.com&#x2F;post&#x2F;147533511&#x2F;jeff-bezos-regret-minimization-framework&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.amazon.com&#x2F;Poor-Charlies-Almanack-Charles-Expanded&#x2F;dp&#x2F;1578645018&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;bitandliteracy.github.io&#x2F;mental-models&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>如果想学点什么，就别依赖笔记软件</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/dont-rely-on-notetaker/</link>
            <guid>https://limboy.me/posts/dont-rely-on-notetaker/</guid>
            <description>&lt;p&gt;笔记软件会造成一种错觉：已经记录下来的就是我的了，不管对这些记录的东西了解如何。尤其一些笔记软件有强大的搜索功能，甚至能搜索图片里的文字，会更加重这种感觉。而学习的重点在于理解和使用，这跟笔记软件并没有太大的关系。&lt;&#x2F;p&gt;
&lt;p&gt;相信不少人都用过 Evernote，记录内容很方便，有洁癖的还会对每一条内容进行归类，看起来非常整齐，比如这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_1jha14cf97jdh940jjga1a8cfebke_500x289.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但记下来并不等于学会了，当内容开始多了起来，还要去思考这条内容应该放在哪里比较合适，就像在打理一个图书馆，书的内容并不是最重要的，放在哪个书架上才是。&lt;&#x2F;p&gt;
&lt;p&gt;我的笔记软件是 Bear，有一段时间会把各种内容都往里面放，放完之后非常有安全感，还会想着每天晚上 Review 一遍来加深印象，但很少发生，因为当你拿起手机时，有那么多「好玩」的 App 等着你翻牌，实在没有理由临幸一段看过的内容。如果就笔记中的某个知识点进行提问的话，很可能答不上来，毕竟需要的时候搜一下就行了，为什么要记在大脑里呢。&lt;&#x2F;p&gt;
&lt;p&gt;这跟 Derek Sivers 的一个 TED 视频阐述的观点有点类似：&lt;a href=&quot;https:&#x2F;&#x2F;www.ted.com&#x2F;talks&#x2F;derek_sivers_keep_your_goals_to_yourself&#x2F;discussion&quot;&gt;Keep your goals to yourself&lt;&#x2F;a&gt;，当你向身边的人描述某件你想做的事后，往往会带来副作用，让你觉得这件事好像已经做了；而那些选择不说的人，有可能为了让别人眼前一亮，而憋出个大招。比如买了一堆书来啃，啃之前先拍下来发个朋友圈，收到了各路朋友的赞后，好像阅读这件事已经做完了或不重要了。&lt;&#x2F;p&gt;
&lt;p&gt;学习本就是个苦差事，笔记软件并没有解决学习中的痛点，甚至会有副作用。Elon Musk 作为一个学习狂人，他认为学习最重要的是要有主干（也就是 First Principle），其他的知识点都可以挂靠到这个主干上。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_32ha61ec8i088cbbd4ja41g59eee1_536x414.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这其实就是抽象能力，能看到不同问题的本质或共同点。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;180101_6ag0eejcjccb68f4aai23gl7fgacg_715x477.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以把不同的「A」想象成不同的问题&#x2F;知识点，当它们出现在我们面前时看起来形态各异，但如果能够注意到本质上它们都是 A，就可以快速应对了。而这种能力需要有意识地训练，直到形成习惯。&lt;&#x2F;p&gt;
&lt;p&gt;所以放弃「通过笔记软件来构建知识体系」的念头吧，它并不会让学习这个过程变得轻松，只会让你沉浸在「好像已经理解了，即使不理解，内容也都在那里只要我想就可以再看一遍而事实上再也不会看」的幻觉里。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>为什么番茄工作法对你没有效果</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/why-u-failed-on-pomodoro/</link>
            <guid>https://limboy.me/posts/why-u-failed-on-pomodoro/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95&quot;&gt;番茄工作法&lt;&#x2F;a&gt; 相信都听说过，原理比较简单：工作 25 分钟，休息 5 分钟（一个番茄）；每 4 个番茄休息 15 - 30 分钟。工作 25 分钟可以让大脑处于「专注」模式，有效地利用相关联的模式和知识来解决问题，休息 5 分钟可以让大脑处于「发散」模式，或许可以发现新的思考事物的角度。&lt;&#x2F;p&gt;
&lt;p&gt;所以番茄工作法还是有科学依据的。但为什么这么一项听上去没有什么门槛的技术，却很难被用起来呢？&lt;&#x2F;p&gt;
&lt;p&gt;对番茄工作法进行一下翻译：在 25 分钟内集中精力处理特定任务，然后休息 5 分钟，Repeat。注意到两个关键字「集中精力」和「特定任务」，这就是难点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-zhong-jing-li&quot;&gt;集中精力&lt;&#x2F;h3&gt;
&lt;p&gt;工作中我们需要开着 IM，以便别人可以随时找到自己，当收到跟自己相关的信息时，需要尽快回复，有些 IM 甚至可以「抖」你。当我们在干活时，如果频频收到信息，那么效率也会大打折扣，而且被打断一次之后，有可能会顺便去看一些其他的新闻，状态和时间一并消耗了。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是「吸精利器」手机。只要有一丝不想干活的念头，都能在手机得到释放。一边是让自己短期难受，但长期受益的事；另一边是短期有乐趣，长期无收益甚至有害的事。大脑做决定时，查询了一下数据库，发现「体验自我」对手机留下的是好的记录，很容易就选择了手机。因为「体验自我」不关心成长，它只负责记录「峰终体验」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;te-ding-ren-wu&quot;&gt;特定任务&lt;&#x2F;h3&gt;
&lt;p&gt;首先得要有任务，如果工作比较充实的话，那么任务会比较明确，当相对轻松些时，就需要自己安排任务，而这就不那么容易了。初入职场时，往往充满了热情，对很多技术都比较好奇，这也想了解，那也想学习，逛着逛着可能一天就没了。有了些工作上的经验和沉淀之后，对于手上的活应付起来更加自如，而剩下的时间可能就花在了非工作相关的事情上。&lt;&#x2F;p&gt;
&lt;p&gt;即使安排了任务，也有可能难度不合适，粒度太粗或太细。比如想学习机器学习，听说周志华老师的「机器学习」很不错，就拿来开始啃，到后面就发现没有数学基础根本啃不下去。又或者安排了一个模糊的任务，比如「学习 Swift」，无从下手。而这又会引发「拖延症」，产生拖延症的主要原因是任务不明确、难度不合理、缺少乐趣。所以如果在任务设定上花的时间少了，产生拖延症的概率就会增加。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ran-hou-ni&quot;&gt;然后呢？&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得「使用番茄工作法失败」可以作为一个参考，是任务划分上出了问题还是集中注意力上有待提升（当然也有一些人对这套方法免疫，他们在状态好时，可以长时间集中注意力不休息，状态差时干些其他的事情，因人而异）。Aaron Swartz 的&lt;a href=&quot;http:&#x2F;&#x2F;www.aaronsw.com&#x2F;weblog&#x2F;productivity&quot;&gt;这篇文章&lt;&#x2F;a&gt;罗列了很多种方法，比如让任务触手可及，之前 Medium 有人分享了如何每天写一篇文章，一个诀窍就是每天晚上把写作软件打开，这样第二天起来打开电脑，就可以开始写了；或者想办法让任务变得有趣，比如背单词是一件很枯燥的事情，但如果把任务换成「给每一个不熟悉的单词安排一个故事」是不是会有意思一点。还有就是在任务划分阶段也就是前期多花点功夫，通过广撒网策略找到合适的方向，然后再拆分成细致可执行的任务，游戏吸引我们的一个原因是我们打开就知道该干什么，如果停留在「学习 Python」，大脑会知道你并不是真的想学，只是一个想法而已。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Aim for slow, steady progress&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>再见，第 381 个质数</title>
            <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/summary-of-2017/</link>
            <guid>https://limboy.me/posts/summary-of-2017/</guid>
            <description>&lt;p&gt;2017 作为第 381 个质数， 很快就要成为过去时了，年初并没有给自己设定什么目标，也就没有目标完成情况这一说。这一年下来还是有不少成长，中间经历过一段彷徨期，像是被关在了一间磨砂的玻璃房里，外面的阳光能照进来，却看不到外面的风景，也找不到出去的门。好在后来慢慢调整了过来，可以心平气和地学习新东西，做一些好玩的产品。下面就罗列下我觉得值得记录的点吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yue-du&quot;&gt;阅读&lt;&#x2F;h3&gt;
&lt;p&gt;这一年下来大概看了 20 本书，大部分都看完了，少部分实在是没有耐性，快进到了最后（比如「堂吉诃德」），有些读完之后印象不是很深（比如「如何衡量你的人生」），下面这几本是看得比较认真，觉得还不错的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;san-ti&quot;&gt;三体&lt;&#x2F;h4&gt;
&lt;p&gt;大概去年还是前年就看过三体三部曲，但印象不深，不少桥段完全想不起来了。今年又有不少人谈起这本书，就耐下性子来重新看了一遍。第一部还是在飞机上通过有声书听完的，依旧非常震撼。因为属于硬科幻，因此对理论功底的要求很高，同时还要通过合适的故事把这些理论串起来，尤其是第三部里面的三个童话故事实在是惊艳。有点像科幻界的 iPhone 时刻（可能是我看的科幻著作太少了 😂）&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ren-sheng-de-zhi-hui&quot;&gt;人生的智慧&lt;&#x2F;h4&gt;
&lt;p&gt;这本书给我带来的感触也挺大的。把「人生的智慧」讲得非常通透，虽是哲学范畴，但里面的一些结论又带有比较强的逻辑性，可以感受到经过了比较深层次的思考。作者在 30 岁时就完成了主要著作「作为意欲和表象的世界」，结果 62 岁完成的著作「附录和补遗」才让他一举成名。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;痛苦和无聊是人类幸福的两个死敌，但人们总在它们之间摇来摆去 —— 脱离了痛苦，便开始无聊；不无聊时，多半痛苦着，程度轻重而已。外在的那种，属于客体，意即生活的艰辛与匮乏造成痛苦，丰裕和安定就滋生无聊；内在那重，属于主体，意即一个人对痛苦和无聊的感受，精神迟钝的人较少感受到痛苦，但后果是空虚，空虚又是无聊的根源。敏感是智力突出者的前提，但他们会夸大事物的表象，因此对痛苦的感受也敏感。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人精神能力的范围尤其决定性地限定了他领略高级快乐的能力。如果这个人的精神能力相当有限，那么，所有来自外在的努力——别人或者运气所能为他做的一切——都不会使他超越只能领略平庸无奇、夹杂着动物性的快乐的范围。他只能享受感观的乐趣、低级的社交、庸俗的消费和闲适的家庭生活。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;能够从事某样活动，如果可能的话，制作某样东西，或者至少学习某一样东西，对于我们的幸福是绝对必要的。一个人的能力需要发挥，并且，他渴望看到发挥能力以后的结果。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;简单概括就是：我们应该多做一些能够增加精神乐趣的事情，这是维持快乐的最有效的方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-lai-jian-shi&quot;&gt;未来简史&lt;&#x2F;h4&gt;
&lt;p&gt;「人类简史」作者的又一力作，「人类简史」没看完，这本倒是看完了，整本书对未来还是偏悲观的，我也基本认可作者的观点。&lt;&#x2F;p&gt;
&lt;p&gt;人在不断地追求快乐，科技在不断地进步，经济在持续发展，但现代化的工具真的带来快乐了么？我们真的比 200 年前的先人们快了么？科技的进步让我们逐渐地成为了「神」，借助外部工具或药物，我们能做到 200 年前的人无法想象的事情。当更加尖端的科技被发明出来且被少数人控制时，那时这批人和普通人的关系，是不是会像现在的人与动物的关系？经济的发展让生态环境不断恶化，要付出代价的不仅是狐狸、野兔，智人也无法逃脱。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;若要维持现代经济，就需要不断且无止境的增长。如果增长停止，经济并不会温和地平静下来，而是会轰然崩塌。正因为如此，资本主义才会鼓励我们追寻不死、快乐和神性。毕竟，我们能穿几双鞋、能开几辆车、能度几个滑雪假期，这些数字都是有限的。经济需要永远持续的增长，也就需要能永远持续的议题——追寻不死、快乐和神性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们的祖先知道我们现在所拥有的工具，一定会以为我们的生活如在天堂般无忧无虑。但事实绝非如此。虽然人类取得了诸多成就，却一直有一种压力逼着我们继续生产、不断努力。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的生化系统不断适应变化，为的是增加生存和繁衍的机会，而不是快乐幸福的机会。只要是有利于生存和繁衍的行为，生化系统就会用愉悦的感觉来回应。但这不过是一时的营销伎俩罢了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以结合「&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2017&#x2F;09&#x2F;unabomber.html&quot;&gt;卡辛斯基的警告&lt;&#x2F;a&gt;」一起看。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-war-of-art&quot;&gt;The War of Art&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;War-Art-Steven-Pressfield-ebook&#x2F;dp&#x2F;B007A4SDCG&quot;&gt;Amazon&lt;&#x2F;a&gt; 上评分很高的一本书，秉承了老外一贯的唠叨风格，核心理念简单概括下就是：把要做的事情划分到足够小，给自己 5 分钟的时间去做，就会发现没那么困难。然后持续这个过程即可。&lt;&#x2F;p&gt;
&lt;p&gt;人（至少）有两个自我：体验自我和叙事自我。体验自我负责体验过程，叙事自我负责记录，也就是下次会用到的数据库。问题就出在叙事自我只会挑峰值体验和结尾体验来记录，如果在做该做的事时，过程中和结尾都没有被爽到，那么能记录下来的就只有负面的信息（所以初期不要挑战难度过高的项目）。&lt;&#x2F;p&gt;
&lt;p&gt;与此同时，社交、新闻、游戏等 App 的获取成本极低，而内容又有趣好玩，叙事自我就会把这种「愉快」的感觉记录下来。&lt;&#x2F;p&gt;
&lt;p&gt;叙事自我不关心成长，它只是一个忠实的记录者，而我们做决定时又会很在意这些记录，于是矛盾就出现了：成长能让我们感觉到充实、平静，而这些记录却容易导致相反的决定。更有意思的是，我们会为这些「抗拒」找到合适的理由，以免让自己鄙视自己。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-kao-de-ji-zhu&quot;&gt;思考的技术&lt;&#x2F;h4&gt;
&lt;p&gt;第二次读这本书，收获依旧颇丰。简单概括就是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过数据、实地访谈、逻辑推导得出不容置疑的结论。&lt;&#x2F;li&gt;
&lt;li&gt;把自己想象成一台思考机器，周边的一切都是思考的原料。&lt;&#x2F;li&gt;
&lt;li&gt;使用这台机器「看到」 5 年后的世界，然后结合自身特点向这个世界迈进。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;作者大前研一之前学的是核物理技术，进入到麦肯锡之后，这些技术就没有任何施展空间了，但在做科研积累下来的思考习惯却派上了大用场。「当你把学校里学到的东西都忘掉以后，剩下的就是教育」，放在这个场景非常合适。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;重要的不是「假设」而是「结论」。问题是什么？核心原因是什么？具体应该怎么做？如果不能直接告诉客户「这么做就能解决问题」就不算真正的解决问题。而真正的解决之策，必然源自现场。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果去观察一些失败的决策往往会发现在推导的某个环节上，把假设当结论，尽管故事听起来毫无破绽。其中还提到了 MECE 的金字塔思考方式对于思维训练也很有帮助。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;clean-architecture&quot;&gt;Clean Architecture&lt;&#x2F;h4&gt;
&lt;p&gt;全名是「Clean Architecture: A Craftsman&#x27;s Guide to Software Structure and Design」。作者是 Robert C. Martin (Uncle Bob)，也是「Clean Code」的作者，好几十年的软件开发经验。这本书对「软件架构」的剖析结构清晰，从常见的编程范式（OOP、FP 等）开始讲起，再到 SOLID 原则，再上升到 Component，最后讲到了一些核心要素：如依赖、边界、服务化等。更重要的是对这些设计理念的独特见解，而不是照本宣科，同时会结合 Demo 来阐述。比如 OOP 虽然有那么多的特性，但最重要的是 DI（依赖注入），然后讲为什么 DI 重要。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The architecture of a system is defined by boundaries that separate high-level policy from low-level detail and follow the Dependency Rule.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;testability is an attribute of good architectures.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;First make it work.&amp;quot; You are out of business if it doesn’t work.
&amp;quot;Then make it right.&amp;quot; Refactor the code so that you and others can understand it and evolve it as needs change or are better understood
&amp;quot;Then make it fast.&amp;quot; Refactor the code for “needed” performance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ying-shi&quot;&gt;影视&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;hei-fan&quot;&gt;黑帆&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_1kaj9df46ej766j5hedkejf94bajc_1080x1599.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
今年看过的最棒的美剧，很想一口气看完，又想慢慢品尝。故事讲的是在一座尚未被正规军占领的小岛上，海盗们把抢来的财宝通过关系网销往外部，但每个人都有自己的小心思。有想把这里建立成独立王国的，有想对这块地进行殖民统治的，有想维持现状的等等，在不同的动机趋势下，各种人群开始了各种明争暗斗，堪比「权力的游戏」，演员的表演也是很大的加分项。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rick-and-morty&quot;&gt;Rick and Morty&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_713j73031c67g48adk084jkk2je0g_564x810.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
某个公众号强烈推荐的，一看评分出奇地高，就有了兴致。用一个关键字来描述的话就是「脑洞奇大」，永远处于喝醉状态的科学家 Rick 带着孙子 Morty 开始了各种神奇的冒险。Rick 基本上属于全知全能，可以通过「任意门」穿越到各个平行时空，可以造出各种稀奇古怪的发明，说的话总是那么直接，但依然有自己的苦恼。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_2fl6jj67d1f9j1eg43gg5ccb05l40_720x405.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有一集是讲在一座全是 Rick 和 Morty 的城市，有一家威化饼厂家，其独特的秘方来自于不断对某个 Rick 「播放」和女儿的温馨画面以产生某种化学元素作为威化饼干的核心成分。在被某一个工作 15 年的 Rick 破坏后，配方升级为「自由之泪」。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_3e4ge576bbf8chkli513ce47205gd_720x392.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qing-hui-da-1988&quot;&gt;请回答 1988&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_816l7kda4198bha54he570gh8408l_1080x1530.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
也是一部评分超高的片，之前看了这个名字并没有什么兴致，真的看了几集之后就一发不可收拾，声明：我是狗焕党。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-sheng&quot;&gt;未生&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s15.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_738dl3dg10he8lbc2kj1e6f5d2j11_800x1157.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
职场剧，没有太狗血的剧情，进展也慢悠悠的，演员的表演很有吸引力，现在每次去公司的天台就会想起这部电视剧。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hei-ke-di-guo-san-bu-qu&quot;&gt;黑客帝国三部曲&lt;&#x2F;h4&gt;
&lt;p&gt;之前看得一知半解，重新看一遍之后，清晰了许多，是部佳作，就是里面太多的机械类场景削弱了剧情。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;youth&quot;&gt;Youth&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_54lf0a97g4cb10caa7a4bbkak7445_1080x718.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
适合在阳光明媚的午后看，情节舒缓，画面美，探讨了一些人生大道理，我看了两遍。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;her&quot;&gt;Her&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171227_053eif73cd13cl44ie7a27h3e5f47_1080x1598.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
AI 热潮，因此又看了一遍，斯佳丽的声音太好听了。跟 AI 谈恋爱看起来也是一件很正常的事情。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;youtube&quot;&gt;Youtube&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;let-s-teach-for-mastery-not-test-scores-sal-khan&quot;&gt;Let&#x27;s teach for mastery - not test scores | Sal Khan&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-MTRxRO5SRA&quot;&gt;链接&lt;&#x2F;a&gt;，可汗的 TED 分享。目前的考试制度比较死板，无法真正检验学生是否习得某种技能或知识，而且由于无法及时地修补知识缺陷，导致越往后面这个缺陷被放大地越明显，加上新的缺陷，直到某一天觉得「自己看来真不是做 XX 的料」。有了「视频教学」后，就可以有针对性地选取自己的薄弱点进行强化训练，基础稳固之后再更上一层楼。不过他也没有提到除了考试，还有没有更合适的验证方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;inside-the-mind-of-a-master-procrastinator-tim-urban&quot;&gt;Inside the mind of a master procrastinator | Tim Urban&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=arj7oStGLkU&quot;&gt;链接&lt;&#x2F;a&gt;, Tim Urban 是著名博客 &lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;&quot;&gt;waitbutwhy&lt;&#x2F;a&gt; 的作者，这个 Ted 视频分享了他对拖延症的一些理解。通过一个 Monster &#x2F; Monkey &#x2F; Decision-Maker 模型非常形象地阐述了拖延症是怎么产生的，以及如何从 Monkey 那里重新夺回主动权。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_63i4i52ccc9bg5l6h287bdebe3g1h_640x426.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在第二篇&lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2013&#x2F;11&#x2F;how-to-beat-procrastination.html&quot;&gt;如何战胜拖延症&lt;&#x2F;a&gt; 一文中作者对这个模型进行了拓展，也很形象。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s11.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_52d1f73b2l9l5l414551fh0ac05i8_640x480.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yi-xi-luo-si-gao-nong-cun-er-tong-de-fa-zhan-zen-yang-ying-xiang-zhong-guo-wei-lai&quot;&gt;一席·罗斯高：农村儿童的发展怎样影响中国未来&lt;&#x2F;h4&gt;
&lt;p&gt;62 岁的斯科特·罗斯高（Scott Douglas Rozelle）是斯坦福大学国际研究所的教授，已从事了约 30 年中国农村研究，专注于农业经济和农村发展。这个结论的推导大概是这样的：教育对一个国家的发展起了很大作用，很多之前「没毕业」的国家，通过加大在教育上的投入后，都毕业了。而中国的农村人口占据了很大一部分，这些人里的农村儿童受教育程度普遍偏低，因此只有提升这些基数较大的人群的教育才有可能让中国毕业。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;channel-tui-jian&quot;&gt;Channel 推荐&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCsooa4yRKGN_zEE8iknghZA&quot;&gt;TED-ED&lt;&#x2F;a&gt; 不是 TED 那样的分享，都是比较简短（5 分钟左右）的小视频，制作精良，内容的覆盖面也很广，有一些有意思的逻辑推理题，我有时会在吃饭的时候提出来，效果还蛮好的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCQtwvRQWnT5Buh9hpvNNryQ&quot;&gt;柴知道&lt;&#x2F;a&gt; 主要是一些科普类的小视频，动画制作蛮用心的，可以开阔眼界。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;MIT&quot;&gt;MIT OpenCourse&lt;&#x2F;a&gt; MIT 的公开课，内容非常丰富，甚至有德州扑克的教学视频。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yin-le&quot;&gt;音乐&lt;&#x2F;h3&gt;
&lt;p&gt;音乐这块一直比较随意，没什么偏好，但总会在不经意间接触到一些印象深刻的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coldplay&quot;&gt;Coldplay&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Viva La Vida. 在苹果发布会上听到的这首歌，当时觉得挺带劲，就查了下，然后就挖掘了下这个乐队，原来「Yellow」也是这个乐队的作品。&lt;&#x2F;li&gt;
&lt;li&gt;Another&#x27;s Arms.&lt;&#x2F;li&gt;
&lt;li&gt;Army Of One.&lt;&#x2F;li&gt;
&lt;li&gt;Violet Hill.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;johnny-cash&quot;&gt;Johnny Cash&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Hurt. Rick and Morty 里面听到的，一下就被吸引了，这首歌是在第二季结束时， Rick 向银河系政府自首时放的，很伤感。后来了解到 Hurt 所在的专辑 「American IV: The Man Comes Around」是 Johnny Cash 在世时的最后一张专辑，也极具纪念意义。&lt;&#x2F;li&gt;
&lt;li&gt;Bridge Over Troubled Water.&lt;&#x2F;li&gt;
&lt;li&gt;Personal Jesus.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;macy-gray&quot;&gt;Macy Gray&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;When I See you. 声音非常特别，有点沙哑和烟嗓，节奏感很不错。&lt;&#x2F;li&gt;
&lt;li&gt;The way.&lt;&#x2F;li&gt;
&lt;li&gt;Beauty in the World.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;david-bowie&quot;&gt;David Bowie&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Changes. 这首歌更多的是纪念意义。当年在 Legend33 跟老胡一起做 App 时，常去的咖啡馆就经常会放这首歌，现在听来满满都是回忆。&lt;&#x2F;li&gt;
&lt;li&gt;Space Oddity. 「白日梦想家」里面第一次听到。&lt;&#x2F;li&gt;
&lt;li&gt;Oh! You Pretty Things.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;chaos-chaos&quot;&gt;Chaos Chaos&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Do You Feel It? 这首歌出现在 Rick and Morty S02E03, Rick 跟 Unity 重逢，最后 Unity 再次离开了 Rick。Rick 经常会说一句无厘头的话：wubba lubba dub dub，没人知道是什么意思，直到有一天鸟人道破玄机，在他们的世界里这句话的意思是：I am in great pain, please help me.&lt;&#x2F;li&gt;
&lt;li&gt;Monsters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;遇见相似的灵魂 - 代鑫。冲这个名字就喜欢。&lt;&#x2F;li&gt;
&lt;li&gt;Avalanche - Leonard Cohen. 黑帆第二季结尾时听到的，Nick Cave 翻唱，查了下原作原来是 Cohen。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=g41FFmNU66U&quot;&gt;Look On Down From The Bridge&lt;&#x2F;a&gt;. Rick and Morty S01E06 出现的，Rick 和 Morty 从另一个平行时空冒险回来发现自己在这个世界里已经死了，然后他们亲手埋葬了自己，替代自己开始了生活。之前不太明白这个 Bridge 是怎么回事，后来才知道，这个 Bridge 是连接这个世界和另一个世界的桥梁，放在这集作为背景非常合适。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ruan-jian&quot;&gt;软件&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;surge&quot;&gt;Surge&lt;&#x2F;h4&gt;
&lt;p&gt;不多讲，年度最佳。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;google-music&quot;&gt;Google Music&lt;&#x2F;h4&gt;
&lt;p&gt;为了能让 Youtube 离线下载和后台播放，就打算买个付费服务感受下，但不支持国内的信用卡，于是换了个思路，通过 Google Music 的付费服务来顺便激活 Youtube Red，没想到 Google Music 用下来还可以(小 bug 还是不少)，可能是我的要求也不太高，对国内的曲库也没有什么要求。少数派写过一篇 &lt;a href=&quot;https:&#x2F;&#x2F;sspai.com&#x2F;post&#x2F;42333&quot;&gt;Google Music 的评测&lt;&#x2F;a&gt; 感兴趣的可以了解下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;youtube-1&quot;&gt;Youtube&lt;&#x2F;h4&gt;
&lt;p&gt;大宝库，尤其是升级了会员之后，也没有广告，用起来很舒服，就是推荐系统有点着急。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mindnode&quot;&gt;Mindnode&lt;&#x2F;h4&gt;
&lt;p&gt;Mindnode 出了 5 之后，趁着打折就买了，非常满意。现在会维护一个大的思维导图，里面的内容五花八门，从编程到交互设计到书摘等一应俱全。
&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;171226_3ba9jag9lcd7fflia92ce3a52ij6k_1343x814.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bear&quot;&gt;Bear&lt;&#x2F;h4&gt;
&lt;p&gt;用过的最舒服的笔记工具了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-guan&quot;&gt;习惯&lt;&#x2F;h3&gt;
&lt;p&gt;要养成一个习惯非常难，下面这些正在养成过程中。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;跑步 (一般都在晚上 10 点之后，在公司的健身房)&lt;&#x2F;li&gt;
&lt;li&gt;思维模型学习（每天学习一个）&lt;&#x2F;li&gt;
&lt;li&gt;冥想（用的 Kevin Rose 出品的 Oak，比较简单，用起来也挺方便，没感受到什么明显的变化，但也没什么成本）&lt;&#x2F;li&gt;
&lt;li&gt;背单词（用的「有道背单词」，做得挺不错的，目前坚持了 15 天）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qi-ta-1&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;can-jia-wwdc&quot;&gt;参加 WWDC&lt;&#x2F;h4&gt;
&lt;p&gt;本来只是随便抽一下，没想到居然抽中了，索性就去感受下吧。认识了很多小伙伴，去了 Infinite 1 总部参观，在苹果总部的食堂吃了顿饭，坐了趟从旧金山到圣荷西的小火车等等，虽然自费，但从收获来讲，还是值得的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-liao-ge-gong-si-nei-bu-de-ji-zhu-wen-zhang-ping-tai&quot;&gt;做了个公司内部的技术文章平台&lt;&#x2F;h4&gt;
&lt;p&gt;最初只是想找个写技术文章的地方，发现没有一个合适的，索性自己撸起袖子干。最开始是模仿 telegra.ph，功能比较简单，只是发布和浏览 Markdown 文章，后来随着使用方的反馈，以及自己的一些想法慢慢完善，现在功能上已经挺齐全了，包括搜索也支持了。&lt;&#x2F;p&gt;
&lt;p&gt;目前有 400 篇的文章，从结果上来看也还不错，毕竟不是「官方指定」，主要是靠着口碑传播。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huang-shi-zhan-zheng-wan-dao-4000-bei&quot;&gt;皇室战争玩到 4000 杯&lt;&#x2F;h4&gt;
&lt;p&gt;这个游戏玩得蛮久的，但杯数一直在 3000 那样，后来跟一同事打赌看谁先到 4000，于是就开始了一段时间的疯狂刷杯，居然真的玩到了 4000+，人的潜力果然是被逼出来的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-yuan-san-jie-mo-fang&quot;&gt;复原三阶魔方&lt;&#x2F;h4&gt;
&lt;p&gt;某天同事心血来潮玩起了魔方，于是就带了一个回家，然后就是对着教程各种练，有时吃饭也会带上，状态好的话，2 分多钟能还原出来，卡壳了可能就需要 3 分多了，速度上比较一般，但还是蛮有成就感的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yong-swift-xie-liao-ge-kan-android-log-de-gong-ju&quot;&gt;用 Swift 写了个看 Android Log 的工具&lt;&#x2F;h4&gt;
&lt;p&gt;有一段时间 Android 相关的问题排查地比较多，而 logcat 看起来有点累，于是就自己做了一个，找回了点做工具的感觉。把它推销给同事后，在排查 Android 问题时，会优先打开它，还是蛮欣慰的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;这一年给自己打分的话，勉强及格吧，没有做出能拿的出手的东西，也没有在哪个方面有比较深入的了解，希望明年能有所改善。2018 年的方向会是机器学习、CS、JS、做一个有趣的 App，想想还是有点激动呢···&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>如何过好这一生</title>
            <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/live-well/</link>
            <guid>https://limboy.me/posts/live-well/</guid>
            <description>&lt;p&gt;这是一个很大的话题，每个人都会有自己的见解。随着年龄的增长，在焦虑感的协迫下，越来越希望尽快找到「正确答案」，来给未来的路指明方向。&lt;&#x2F;p&gt;
&lt;p&gt;怎么算找到呢？一个简单的评判方式是：当听到「xx 在 yy 时间内，通过做 zz 获得了一笔可观的收入」时，内心的波动程度。&lt;&#x2F;p&gt;
&lt;p&gt;对于「如何过好这一生」，我的答案是下面这张图，尽量往「理想模式」靠拢。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;live-well&amp;#x2F;life.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;live-well&amp;#x2F;life.png 1611w,&amp;#x2F;posts&amp;#x2F;live-well&amp;#x2F;life.png 1611w&quot;
    sizes=&quot;(max-width: 1611px) 100vw, 1611px&quot; width=&quot;1611&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;ji-ge-qian-ti&quot;&gt;几个前提&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;人的精力有限，过了黄金阶段之后，随着年龄的增长逐渐下滑。&lt;&#x2F;li&gt;
&lt;li&gt;健康是基石，且随着年龄的增长，维护成本逐渐增加。&lt;&#x2F;li&gt;
&lt;li&gt;财富是自由的基础，需要有足够的存量，但不是目的。&lt;&#x2F;li&gt;
&lt;li&gt;精神乐趣最为重要。最高级、最丰富多彩以及维持最为恒久的乐趣是精神思想上的乐趣。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jie-lun-tui-dao&quot;&gt;结论推导&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;早日财务自由。因为年龄增长必然导致精力下降，健康维护成本增加，剩下的时间已然不多，如果再分一点给财富积累，最重要的精神乐趣就享受不了了。&lt;&#x2F;li&gt;
&lt;li&gt;多花时间在精神乐趣上，最重要的事自然应该分配更多的资源。&lt;&#x2F;li&gt;
&lt;li&gt;最合适的途径就是通过大量精神乐趣上的投入，带来财富上的回报。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以，当你不知道该干什么时，读书和挣钱之间挑一个总是没错的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>工作缺少劲头怎么办</title>
            <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/work-exhaust/</link>
            <guid>https://limboy.me/posts/work-exhaust/</guid>
            <description>&lt;p&gt;工作时间长了之后，有时会出现干活「缺少劲头」的现象。怎么算「缺少劲头」呢？有一种说法是对第二天是否充满期待，我有过这种感觉，很棒，但要天天如此也不容易。我觉得缺少劲头的表现大概就是: 上班时容易被工作以外的事情吸引，下班后也不愿再想工作上的事。这不能说不对，但可以更好。毕竟在公司过的每一天，都是你自己的，何不提升下质量呢。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shi-yao-hui-chu-xian-zhe-ge-wen-ti&quot;&gt;为什么会出现这个问题&lt;&#x2F;h2&gt;
&lt;p&gt;在「如何衡量你的人生」这本书里，作者提到了两个激励因素：基础因素和动力因素。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;基础因素：职业地位、福利待遇、办公环境等。&lt;&#x2F;li&gt;
&lt;li&gt;动力因素：挑战、认可、责任感、成长等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们在选择一份工作时，往往对基础因素考虑的很多，而忽视了动力因素。基础因素相对比较固定，存在边际效应递减的问题。假设上一份工作的月薪是 1 万，下一份工作是 2 万，翻了一倍。在前几天可能还会有点小兴奋，过不了多久这个兴奋感就会过去，因此无法形成持续的激励。&lt;&#x2F;p&gt;
&lt;p&gt;当出现「缺少劲头」时，往往是激励因素出了问题。如果是基础因素出了问题，在证明自身能力的前提下可以争取。如果是动力因素出了问题（往往这个是大多数），这就需要花点时间反思了，是公司的环境问题还是自己的能力问题，多数情况下可能是自己的问题。比如做的事情没有挑战，为什么会被分配到没有挑战的事？有去争取其他更想做的事情么？得到的反馈是什么？或者最近一年感觉没什么成长，是因为确实没什么事情可做，还是自己不知道要做什么？对于做的事情标准不够高？&lt;&#x2F;p&gt;
&lt;p&gt;除了这两个因素外，氛围也很重要，周围的人做事的方式是否认同，是否踏实，是否能形成合力等。尽量去营造积极的氛围，对自己和团队都会大有好处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-jie-jue-zhe-ge-wen-ti&quot;&gt;如何解决这个问题&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;先做成一件事。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;而这并不简单。&lt;&#x2F;p&gt;
&lt;p&gt;假如领导说：你看现在反馈 Android App 图片出不来问题的用户不少，你来解决下。你看了几天代码，做了一些改动，上线后发现效果还不错，反馈的用户果然少了，于是你认为这件事情就算完成了。真的完成了么？这就涉及到了「标准」，这样的标准能给一个及格的分，毕竟精确解决了问题（反馈用户变少了）。但离「做成」还有不少距离，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;能不能设计一个更精确的模型来监控线上图片出不来的现象。&lt;&#x2F;li&gt;
&lt;li&gt;除了图片出不来，图片请求耗时是不是也需要监控下。&lt;&#x2F;li&gt;
&lt;li&gt;顺便看下 iOS 有没有类似的问题。&lt;&#x2F;li&gt;
&lt;li&gt;能不能定义一套「关键指标」用来反映线上用户的图片使用体验。&lt;&#x2F;li&gt;
&lt;li&gt;图片请求能不能做下优化，比如降级策略、弱网策略。&lt;&#x2F;li&gt;
&lt;li&gt;能不能设计一套网络质量检测工具，对于排查其他的网络问题时也能有点帮助。&lt;&#x2F;li&gt;
&lt;li&gt;能不能设计一个代码层面的无侵入网络环境模拟工具，可以自动执行各种网络环境下的单元测试。&lt;&#x2F;li&gt;
&lt;li&gt;能不能在几处关键地方加入打点，方便排查个别用户的图片体验。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一个小需求中能提炼出很多可以做的事：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;让问题排查更有效率。&lt;&#x2F;li&gt;
&lt;li&gt;减少重复性的劳动。&lt;&#x2F;li&gt;
&lt;li&gt;抽象出一套通用解决方案，甚至可以开源，回馈社区。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wei-shi-yao-zuo-cheng-yi-jian-shi-hen-zhong-yao&quot;&gt;为什么「做成一件事」很重要？&lt;&#x2F;h3&gt;
&lt;p&gt;对自己来说，能帮助养成「高标准」的习惯。很多人做事能达到 70 分，但能达到 90 分的就很少，因为太难了。首先需要想到该如何达到 90 分，光是这一条就已不易。而要达到 90 分，往往需要跳出舒适圈：跟其他部门的同事沟通；查看源码或论文；接触一门不太熟悉的语言等等。这个过程会带来不少挑战，同时对自己的成长也会带来帮助。当做成了 1，2 件事情后，慢慢就会形成习惯，而最终是习惯造就了我们自己。做成一件事后，可以营造好的口碑，提升信任感，别人会觉得把事情交给你心里会比较有底，慢慢机会就会多起来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-zhe-jian-shi-mei-shi-yao-xing-qu-zen-yao-ban&quot;&gt;对这件事没什么兴趣怎么办？&lt;&#x2F;h3&gt;
&lt;p&gt;没有兴趣自然就做不好了嘛。那在有兴趣的事情上做得怎么样？足够好么？为什么现在没有在做那样的事？有兴趣是很好的一件事，但乔布斯的一句话可能成为了不把事情做好的借口：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You’ve got to find what you love. If you haven’t found it yet, keep looking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「这不是我喜欢的事情，所以我做不好，我还要继续寻找」。然后把希望寄托在某天忽然被某件事深深吸引。不否认这种情况发生的可能性，但有点像赌博，风险比较高。我觉得缺少兴趣往往是对一件事的认识不够或有偏见。比如对画画缺少兴趣，因为从来没有画好过一副画，也不认为自己有这方面的天赋，如果要求你在一个星期内画一幅颇有难度的画，可能就很难交出一份满意的作品了。其实只要找到诀窍，勤加练习，同时赋予意义就完全有可能做到。赋予意义很重要，首先要说服自己这件事情值得做才有可能做得好：画画能够锻炼耐心，这与写程序是共通的；画画锻炼观察能力，这是一种元能力，对于自我提升会很有帮助；画画涉及到构图，跟程序架构有点像；画画需要扣细节，在追求完美的过程中这种精神必不可少。这样是不是让画画这件事不再枯燥乏味了呢？&lt;&#x2F;p&gt;
&lt;p&gt;当做成了几件事后，会发现其中有一些通用技能可以复用，比如学习能力，问题分解能力，推进能力，沟通能力。这些元能力的习得，对于做成更大的事会很有帮助。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhi-ye-gui-hua&quot;&gt;职业规划&lt;&#x2F;h3&gt;
&lt;p&gt;我自己其实没什么规划，但知道做什么事情会比较开心，只要做这些事能持续获得成就感和成长同时能对别人带来积极影响就行。我会想象 1 年后自己大概是一种怎样的状态，然后努力向那种状态靠拢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-de-geng-zhuan-ye&quot;&gt;变得更专业&lt;&#x2F;h3&gt;
&lt;p&gt;如果要获得别人的认可和尊重，这是唯一的捷径。当遇到难题时会想到你，设计上没什么思路时会找你，方案 Review 时也会找你。解决这些问题的过程中会增加影响力，这对于以后推进一些事情大有裨益。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-dao-yi-ge-bu-shun-yan-de-zhu-guan-zen-yao-ban&quot;&gt;遇到一个不顺眼的主管怎么办&lt;&#x2F;h3&gt;
&lt;p&gt;Ta 的哪些地方导致了「不顺眼」，对自己做的事情会产生怎样的影响，有没有沟通过还是自己的主观判断，Ta 的建议是否中肯等等。误判心理学有一条 &lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E7%A2%BA%E8%AA%8D%E5%81%8F%E8%AA%A4&quot;&gt;确认偏误&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人选择性地回忆、搜集有利细节，忽略不利或矛盾的资讯，来支持自己已有的想法的片面诠释。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;也就是说，当我看 Ta 不顺眼时，会主动收集很多支持「不顺眼」的细节来加强「不顺眼」的印象。先要排除这种情况，再来看 Ta 是不是对你的成长产生了负面影响，如果是的话，再寻求更合适的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-xie-shu-tui-jian&quot;&gt;一些书推荐&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1591848202&quot;&gt;Pivot&lt;&#x2F;a&gt;，作为职业发展培训师在 Google 工作了五年，离开后开始专职投入相关的工作。她把转型的过程分成了 4 个步骤：Plant -&amp;gt; Scan -&amp;gt; Pivot -&amp;gt; Launch，每个步骤都进行了详细的说明，对于考虑转型的同学应该会有帮助。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1617292397&quot;&gt;Soft Skills&lt;&#x2F;a&gt;，这本书的作者也是个软件开发工程师，其中提到了很多工程师应该具有的软技能，包括 Career &#x2F; Marketing &#x2F; Learning &#x2F; Productivity 等，可以开阔下思路。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;1455509124&quot;&gt;So Good They Can&#x27;t Ignore You&lt;&#x2F;a&gt;，不要执迷于寻找自己真正的「天职」，而要去掌握稀缺而宝贵的技能。正确地工作胜过正确的工作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;11622053&#x2F;&quot;&gt;如何衡量你的人生&lt;&#x2F;a&gt;，被乔布斯推荐的「创新者的窘境」也出自该作者。围绕三个「简单的问题」来讨论，没时间看书的可以先看下这个 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=tvos4nORf_Y&quot;&gt;TED 视频&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>如何认识事物</title>
            <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-know/</link>
            <guid>https://limboy.me/posts/how-to-know/</guid>
            <description>&lt;p&gt;在一个月明星稀的夜晚，你坐在阳台的躺椅上，手捧着银瓶梅，看得有滋有味。忽然天空闪过一道异光，一个外星生物蹦到了你面前，指了指你手上的那本书问道：这是什么？&lt;&#x2F;p&gt;
&lt;p&gt;你很想直接回答这是一本书，但这样对方可能对你发动超能力。那如何才能把「书」这个东西给讲明白呢？我们来试一下。&lt;&#x2F;p&gt;
&lt;p&gt;书是一种带有文字和图像的纸张的集合。它能够携带大量的信息，不过由于书本身也占用一定的体积，所以当它比较多时也会出现携带不方便等问题。人们通常可以在书店、图书馆或朋友之间获取到书，内容也包罗万象，包括小说、传记、科学著作等等。书通常由墨水、纸张、羊皮纸或者其他材料固定在书脊上组成。书的出现跟活字印刷术有很大关系，它使得大规模、高效率地产出书籍成为了可能，在书出现以前，中国古代会把字刻在竹简上，不过这样的「书」比较笨重，携带的信息也非常有限。在现代出现了电子书，它不占用物理空间，只要有相应的电子设备就能阅读，解决了实体书笨重不方便携带的问题，不过也有人说它少了那种读纸质书的乐趣。从本质上来说，书能满足人们的精神需求，也可以通过读书来交到志同道合的朋友。&lt;&#x2F;p&gt;
&lt;p&gt;经过这么一番简单解释之后，是不是把「书是什么」大概地捋清楚了。看起来有点复杂，了解了下面这个模型之后就会很清晰了。它分为内环和外十字两部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fhj6pju1gkj20hi0fcdgi.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面就来解释下这个模型。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-huan&quot;&gt;内环&lt;&#x2F;h3&gt;
&lt;p&gt;先从左上角的「定义」开始说起，解释「什么」，比如灯泡：可以在夜间提供照明的设备。接下来开始阐述「特性」，简单来说就是优点和缺点，比如书的优点：有质感，有收藏价值，可以记笔记，缺点在于携带不是那么方便，也不环保。了解了特性之后，就自然会想知道由于这些特性，导致它比较适合哪些场景。最后自然想了解它到底是怎么实现的，通过这四点，我们对一件事物就有了基本的了解。&lt;&#x2F;p&gt;
&lt;p&gt;不过还不够，这些更多 Focus 在事物本身，我们也要跳出来看一下，于是就有了「外十字」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wai-shi-zi&quot;&gt;外十字&lt;&#x2F;h3&gt;
&lt;p&gt;外十字主要分为 3 部分。History 回答的是为什么。为什么会有书，书产生之前是怎样的形态，有点像产品需求。Related 说明有没有相关的，一个事物很少会独立存在，总会有什么跟它产生关联，这也方便我们对它产生更全面的认识。Abstract 是对这个事物本身进行抽象，看看能不能提取出本质，这样看书这个行为甚至可以和玩游戏关联起来，因为都能达到精神愉悦。&lt;&#x2F;p&gt;
&lt;p&gt;通过这两部分的结合，对事物的理解就会比较全面了。&lt;&#x2F;p&gt;
&lt;p&gt;我们再来做个简单的测试：什么是红黑树？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;&#x2F;strong&gt; 一种自平衡二叉查找树，需要符合 5 条基本要求（篇幅原因，这里就不列出来了）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;特性：&lt;&#x2F;strong&gt; 从根到叶子的最长可能路径不多于最短的可能路径的两倍长。同时由于本身就是二查找树，因此也继承了它固有的特性，比如查找、插入的时间复杂度都是 O(log n)。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;场景：&lt;&#x2F;strong&gt; 由于相对比较平衡，因此效率较高，C++ STL 中的 map 就是通过它来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;实现：&lt;&#x2F;strong&gt; 主要是插入和删除。插入时需要先将节点染成红色，再通过判断叔父节点的颜色来决定下一步是旋转还是将祖父节点染成红色（篇幅原因，就不列出来了）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;历史：&lt;&#x2F;strong&gt; 为什么会产生红黑树呢？因为二叉查找树有一个很大的问题：容易失衡，这就导致某些场景下效率会很低，因此需要有一个平衡性好一点的二叉查找树。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;相关：&lt;&#x2F;strong&gt; 类似的平衡性不错的还有 AVL 树，比红黑树更平衡，不过实现起来也更复杂，插入、删除时的旋转操作也更多，对平衡性要求特别高的可以考虑 AVL 树。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;抽象：&lt;&#x2F;strong&gt; 回归到二叉查找树的初衷 ，它是一个通用、高效的基础数据结构，可以演化出 set &#x2F; map 等更高级的数据结构，也可以用来排序（中序遍历）。&lt;&#x2F;p&gt;
&lt;p&gt;其他的事物也可以通过这个模型来认识，这样就不会只浮于表面。不妨做一个练习，比如如何认识「如何认识事物」？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>移动端开发路在何方 - 寻找不变量</title>
            <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mobile-dev-way-out/</link>
            <guid>https://limboy.me/posts/mobile-dev-way-out/</guid>
            <description>&lt;p&gt;最近一段时间，移动端开发好像不像以前那么吃香了，招的人少了，要求更高了，给人一种感觉：这个行业是不是不行了？这个行业没出问题，只是更加理性了。&lt;&#x2F;p&gt;
&lt;p&gt;刚开始的几年，移动端开发还算是新兴领域，会的人不多，供小于求。接下来几年，随着移动端的爆发，需求和人才市场开始同步增长，只是供给侧增长得更快（尤其是经过各类培训机构的「孵化」），一段时间之后，供就大于求了，并且差量越拉越大。原因有很多，比如普遍看好移动端、开发门槛降低、培训机构助力等等。这种不平衡的状态不会维持很久，慢慢地会回归到供需基本平衡的稳定期。就像技术成熟度的曲线一样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1ffi10q2tu3j20m80ftq6r.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一门技术刚兴起时，大家普遍看好，各种文章铺天盖地，造成一种过度繁荣的现象，达到顶峰。然后技术的发展与预期产生偏差，人们的期望值慢慢地降了下来。接下来技术继续演化，进入了稳定期。&lt;&#x2F;p&gt;
&lt;p&gt;我们疑惑、焦虑，主要原因还是看不清局势，不确定未来会往哪个方向发展。对个人如此，对公司也一样，在 2012 年的 re:invent 大会上，贝佐斯阐述了他的战略思维：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我常被问一个问题：“在接下来的 10 年里，会有什么样的变化？”...但我很少被问到“在接下来的 10 年里，什么是不变的？”。我认为第二个问题比第一个问题更加重要，因为你需要将你的战略建立在不变的事物上。&lt;&#x2F;p&gt;
&lt;p&gt;在亚马逊的零售业务中，我们知道消费者会想要更低价格的产品，10 年后仍然如此。他们想要更快的物流，更多的选择。很难想像，会有顾客在 10 年后跑来和我说：“Jeff，我喜欢亚马逊，但你们的价格能不能贵一点，或者到货时间再慢一点。”&lt;&#x2F;p&gt;
&lt;p&gt;...所以我们将精力放到这些不变的事物上，我们知道现在在上面投入的精力，会在 10 年里和 10 年后持续不断的让我们获益。当你发现了一个对的事情，甚至 10 年后依然如一，那么它就值得你将大量的精力倾注于此。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么对于移动端开发的同学来说，有哪些是近几年不会变的事情？以下是我想到的：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-neng-shou-ji-de-gao-pu-ji-lu-yi-ji-gao-shi-yong-lu&quot;&gt;智能手机的高普及率以及高使用率&lt;&#x2F;h4&gt;
&lt;p&gt;目前的普及率已经很高，虽然增长放缓，但将来只会更高，除非出现更优质的替代品，而这个几率非常低（VR 和 AR 算是补充）。因此可以选择在主流平台上进行深耕，毕竟出问题时需要找一个懂的人，而且也需要这些人来探索更多的可能性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-jue-wen-ti-de-you-zhi-app-yi-jiu-you-xi-yin-li&quot;&gt;解决问题的优质 App 依旧有吸引力&lt;&#x2F;h4&gt;
&lt;p&gt;虽然那些高频刚需的巨型 App 抢夺了用户不少注意力，用户也越来越懒得装 App 了，但装得少了并不是不装。比如 Bear App，在市面上有那么多记事类 App 存在的情况下，经过 2 年的打磨，出来后很快得到认可，并且被评为 2016 Best App 之一。所以提高自己的标准，找到痛点，组建团队打磨产品也是一条路，只不过这条路走起来不如以前那么容易了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ruan-ji-neng&quot;&gt;软技能&lt;&#x2F;h4&gt;
&lt;p&gt;工作除了专业技能，还有很大一块是软技能，比如职业化、影响力、沟通、高效工作等等。这些技能往往可以用在你的下一份工作中。我们的工作迟迟不见起色，往往是因为在软技能方面吃了亏。推荐一本程序员写的书「软技能」，专门讲这个。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xue-xi-neng-li&quot;&gt;学习能力&lt;&#x2F;h4&gt;
&lt;p&gt;这也是一项通用技能，当掌握了这项技能之后，即使跨界也能应付自如，但它得来决不容易。比如同样是玩游戏，有些人能很快找到其中的窍门并勤加练习，而有些人玩了大半年水平却依旧止步不前。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xie-zuo-neng-li&quot;&gt;写作能力&lt;&#x2F;h4&gt;
&lt;p&gt;工作中难免会跟写作打交道：写邮件、写文档、写公司博客等等，写作能力体现的不仅仅是文字，而是思考和总结能力，37Signals 在 Getting Real 里也提到了写作的重要性：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are trying to decide between a few people to fill a position, always hire the better writer. It doesn&#x27;t matter if that person is a designer, programmer, marketer, salesperson, or whatever, the writing skills will pay off. Effective, concise writing and editing leads to effective, concise code, design, emails, instant messages, and more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;she-ji-neng-li&quot;&gt;设计能力&lt;&#x2F;h4&gt;
&lt;p&gt;设计无处不在，内部的工具、代码、演讲、甚至小区门口的垃圾桶也是经过设计的。这是一种跨领域的通用能力，而且随着消费升级，人们会更加青睐经过设计的产品。有些能力不错的程序员，有时会因为设计的短板而吃亏，因为看着不优雅的东西，我们往往会怀疑它工作起来也不够优雅。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hou-duan&quot;&gt;后端&lt;&#x2F;h4&gt;
&lt;p&gt;如果去各个招聘网站上搜索，会发现后端的需求还是挺旺盛的。无论是前端、客户端、小程序都需要跟后端通信，而在这些语言中投资一门成熟或有潜力的语言，也是不错的选择。我已经接触了好几个原先只做客户端，现在 java／groovy 也写得溜溜的同学。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-duan&quot;&gt;前端&lt;&#x2F;h4&gt;
&lt;p&gt;前端的使用场景很多，从对外的 H5 页面，到内部的小工具、平台，到跨平台的页面等等，都会用到前端，这个领域也是异常活跃，因此投入时间在这上面也会有相应的回报。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-ben-gong&quot;&gt;基本功&lt;&#x2F;h4&gt;
&lt;p&gt;比如算法、数据结构、TCP／IP 协议、系统设计能力、编码能力等，如果要在这个领域继续玩下去，修炼内功绝对有好处。我之前也不明白工作中明明用不着这些，为什么还要学？等细看了之后发现还是挺有意思的，而且其中的思路内化了之后，对于工作会有启发，还有就是知道内部是怎么运行的，心里会比较有底。&lt;&#x2F;p&gt;
&lt;p&gt;上面这些事情有一个特征：时间对他们的影响不太大。用化学里的一个术语描述就是：长半衰期。我们应该多做一些长半衰期、高价值的事。&lt;&#x2F;p&gt;
&lt;p&gt;到底选择做什么，这个还得看个人的愿景，最喜欢做什么，希望达到怎样的结果。相比上面这些不变项，这个更加重要，不然一样会陷入选择恐慌。所以给自己一点压力，把「3 年后希望自己在怎样的环境下做着什么事情」尽早想清楚吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>学习如何学习</title>
            <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learning-how-to-learn/</link>
            <guid>https://limboy.me/posts/learning-how-to-learn/</guid>
            <description>&lt;p&gt;在「如何学习」这点上，一直觉得自己做的不够好，曾经想学吉他，坚持了两个礼拜就以「手指太短，不适合」终结了，后来想学数学，却终究连翻开书的勇气都没有，工作一忙更是顾不上这些了。所以在 Youtube 上看到 Barbara Oakley 的 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vd2dtkMINIw&quot;&gt;Learning How to Learn&lt;&#x2F;a&gt; 时，才发现自己在学习上的各种问题，收获颇多。如果有兴趣的话，建议直接看视频，讲解地很有条理且生动。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Barbara_Oakley&quot;&gt;Barbara Oakley&lt;&#x2F;a&gt; 是系统工程学博士，但对于「学习」方面也颇有研究，在 &lt;a href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;learning-001&#x2F;lecture&quot;&gt;Coursera&lt;&#x2F;a&gt; 上也有相应的课程。还出了几本书，比如 &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Mind-For-Numbers-Science-Flunked-ebook&#x2F;dp&#x2F;B00G3L19ZU&quot;&gt;A Mind For Numbers: How to Excel at Math and Science&lt;&#x2F;a&gt;，这里对于她在 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vd2dtkMINIw&quot;&gt;Google 的分享&lt;&#x2F;a&gt;做一个简单的翻译和摘要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhai-yao&quot;&gt;摘要&lt;&#x2F;h3&gt;
&lt;p&gt;(主持人)我记得查理芒格说过，他认识的人中没有一个不每天阅读的，还把巴菲特形容为一台学习机器。那么如何才能成为一个高效学习者呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zheng-wen&quot;&gt;正文&lt;&#x2F;h3&gt;
&lt;p&gt;我小的时候，想要学习其他语言，但大学的助学金不太容易拿到，而我又迫切想要学习一门语言，然后我想到了一个既可以学习语言，又能得到些收入的方法，那就是参军。然后我确实学了一门语言：俄语。虽然俄国的环境不怎么样，但我喜欢冒险和新的视角。我回想在西点的工程师们，他们解决问题的能力非常出众，往往能想到我想不到的。然后我就想，我能不能也达到跟他们一样的程度？有学生提了这么个问题：如何改变你的大脑。然后我就去了解世界顶级的教授他们是如何做到让学生更好地学习工程学、数学、化学的？他们自己又是如何学习的？跟他们接触后发现，他们常用的有隐喻和类比。接下来我想跟大家分享下学习的关键因素。&lt;&#x2F;p&gt;
&lt;p&gt;我们都知道大脑是很复杂的，那么来简化一下，可以想象成大脑以两种不同的模式工作。第一个是「专注」，另一个则是「发散」。我们用一个弹球机来描述这两种状态。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_analogy.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_analogy.jpg 135w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_analogy.jpg 135w&quot;
    sizes=&quot;(max-width: 135px) 100vw, 135px&quot; width=&quot;135&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设大脑里有一个弹球机&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_brain.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_brain.png 407w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;pinball_brain.png 407w&quot;
    sizes=&quot;(max-width: 407px) 100vw, 407px&quot; width=&quot;407&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;底部有一个触发开关，有很多的槽点密集排布。比如，你已经知道了乘法，然后要处理一道乘法运算题。当你处于「专注」模式时，会运用已有的模型，在「乘法」的槽点附近打转，也就是结合以前的学习经验去寻找答案。如果你要解决的问题是基于新的模型，比如你已经知道了乘法运算，但从没有接触过除法运算，如何掌握这个新的模型呢，这时就要用到「发散」了。当处于「发散」状态时，「槽点」之间的距离会变大，你无法通过局限在某一点来解决问题，但至少能找到一种新的思考事物的角度。当你在解决一个非常困难的问题时，不要逼自己长时间处于「专注」状态，这样就会局限在一个狭小的范围。所以需要进入到另一种模式，也就是「发散」模式。简单来说，就是脱离当前的工作环境，出去走走，冲个澡等，总之是让大脑脱离「专注」状态。我们来举一个例子吧。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;salvador-dali.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;salvador-dali.png 118w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;salvador-dali.png 118w&quot;
    sizes=&quot;(max-width: 118px) 100vw, 118px&quot; width=&quot;118&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Salvador_Dal%C3%AD&quot;&gt;Salvador Dali&lt;&#x2F;a&gt; 是 20 世纪著名的超现实主义画家，他最爱干的事情就是，当遇到一个棘手的问题时，会躺在椅子上，放松再放松，同时手里握着一把钥匙。当足够放松到快要睡着时，钥匙就会掉在地上，与地板碰撞的声音会把他叫醒，然后就可以带着从「发散」状态收获的想法继续进入到「专注」模式。&lt;&#x2F;p&gt;
&lt;p&gt;你可能会觉得这个对艺术家有用，那么对工程师是否也同样有效呢？据传，爱迪生也有类似的行为爱好，只不过不是钥匙，而是滚珠轴承。&lt;&#x2F;p&gt;
&lt;p&gt;当你在解决一个问题时，即使已经有成千上万的人已经解决过了，但对你来说确实第一次，你也可以试试类似的方法。&lt;&#x2F;p&gt;
&lt;p&gt;当你处于「专注」状态时，并没有利用到其他更多的关联，这也是为什么在两种状态间切换是如此重要。就像你不能一下吃成大胖子一样，神经系统也是需要一段时间来适应新的学习和思维方式。&lt;&#x2F;p&gt;
&lt;p&gt;你或许会说，我有拖延症，那我们就来说说拖延症。拖延症的成因是当你面对不喜欢做的事情时，大脑的「痛感中心」就会被激活。所以当你看一本不喜欢的书时，会感觉到隐痛，这种痛就像手指被锤子砸了一样，通常会有两种做法：第一种是花大概 20 分钟去搞定它，然后痛感就会慢慢降低进而消失。但如果你像大多数人一样，将注意力集中到其他做起来更舒服的事情上，就会马上就会感到好些了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;procrastination.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;procrastination.png 899w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;procrastination.png 899w&quot;
    sizes=&quot;(max-width: 899px) 100vw, 899px&quot; width=&quot;899&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从某种程度上来说，拖延症也是会上瘾的，这对你的生活是非常有害的。最有效的方式是使用「番茄工作法」，通常来说设置 25 分钟为一个「番茄时间」，然后关闭其他所有会打扰你的一切。在这 25 分钟内，集中精力进入到「专注」模式。由于你专注于当前的任务，而不是「我必须完成它」的痛苦，做起来就会容易很多。当到时间后，给自己点奖励，出去走走或上上网、聊聊天都行。有一点要注意的是，不要以完成任务为目标，时间到了，就休息。它能帮助你跨过痛苦期，进入 flow 状态。还有就是不要一下子做太多的「番茄」，一步一步来，慢慢适应这套系统。&lt;&#x2F;p&gt;
&lt;p&gt;还有跟学习很相关的一点是睡眠。常常有人说考试前要睡好觉，事实上，睡眠在各种层面上都很重要。当处于非睡眠状态时，代谢物会在细胞间产生，它们就像垃圾一样在那，而且越积越多，这会影响你的判断。这也是为什么当你长时间工作时，逻辑会越来越乱。当你睡觉时，这些细胞会缩小，然后垃圾就被冲走了，就像重新打扫了房间一样。&lt;&#x2F;p&gt;
&lt;p&gt;根据神经学上的发现，将学习分为多个短期学习、睡觉，多个短期学习、睡觉，这样的循环系统，对于构建神经网络非常有帮助，这也是高效学习的秘诀之一。&lt;&#x2F;p&gt;
&lt;p&gt;人每天都会长出新的神经元，有两种方式可以让这些神经元存活并成长。一个就是将自己暴露在新的环境中，这也是为什么旅行会很有帮助，这些新元素能让新出生的神经元活下来。还有一个让新长出来的神经元活下来的方法，很简单，就是锻炼。不需要励志成为奥林匹克运动员或者成为马拉松选手，即使只是简单的散步也是非常有效的。但即使只有几天的锻炼也会带来更大的效果，它会增强新神经元的存活和生长。&lt;&#x2F;p&gt;
&lt;p&gt;接下来聊聊工作记忆（Working Memory），工作记忆就是临时记住一些信息，以前常说有 7 个槽可以用，这也是为什么你能记住 7 位数的电话号码，但事实上大概只有 4 个槽可以用，所以当你用工作记忆来记一些东西时，可以想象有一只章鱼在掌控着这几个槽，并建立连接，这也是为什么不能一次记住太多的想法。当你多任务同时开工时，相当于把章鱼的触角从仅有的几个槽中拿走一个或多个，这会让你变得笨一点。而发散模式则是有更多的连接。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;octopus.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;octopus.png 329w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;octopus.png 329w&quot;
    sizes=&quot;(max-width: 329px) 100vw, 329px&quot; width=&quot;329&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那如何把短期记忆变成长期记忆呢，最好的方法就是练习，练得越多，神经元就会长得越长，扎得越深。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;neural-die.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;neural-die.png 276w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;neural-die.png 276w&quot;
    sizes=&quot;(max-width: 276px) 100vw, 276px&quot; width=&quot;276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你不练习，那么这些「蝙蝠」就会在模式形成长期记忆前把它叼走，这也是为什么有时觉得已经理解了某个概念，然后走开了，过了两天，这些内容都被「蝙蝠」叼走了，然后就记不起什么了。所以最好的方式就是带一定间隙的重复练习(Spaced Repetition)，比如周一、周二、周三、周五、周日练习。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说 Chunk。假设你要拼一副图，如果不明白每一块代表的含义，就会有无从下手的感觉，就像中间的那个圆一样，你能看到它，它也是个 Chunk，但却无法与其他的 Chunk 产生联系，这也是为什么死记硬背的效果会很差的原因。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.png 821w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.png 821w&quot;
    sizes=&quot;(max-width: 821px) 100vw, 821px&quot; width=&quot;821&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当你在研究某个课题时，你其实在创建一个 Chunk 群，这些 Chunks 会跟其他的 Chunks 生关联，这也是伟大创意的产生之源。这时往往会得到一些支离破碎的 Chunks，如果都学会了，就会形成一副完整的图片，即使少了其中几片。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.jpg 510w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;chunk.jpg 510w&quot;
    sizes=&quot;(max-width: 510px) 100vw, 510px&quot; width=&quot;510&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但如果你不重复练习，并且深刻掌握 Chunks，也能把 Chunks 拼起来，只不过是模糊的，而且很难拼成全图。&lt;&#x2F;p&gt;
&lt;p&gt;不同领域的 Chunks，有可能长得差不多，这样就可以借鉴原有的 Chunk 来学习新的 Chunk。比如你是一个物理学家，再去学经济学会更简单些，因为其中的一些 Chunks 非常相像。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;multi-chunks.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;multi-chunks.png 371w,&amp;#x2F;posts&amp;#x2F;learning-how-to-learn&amp;#x2F;multi-chunks.png 371w&quot;
    sizes=&quot;(max-width: 371px) 100vw, 371px&quot; width=&quot;371&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后给大家一些关于学习的建议：&lt;&#x2F;p&gt;
&lt;p&gt;测试是必要且重要的。Test yourself on everything, all the time。同样的时间用来做测试和学习，前者会让你收获更多。使用卡片(Flashcards)，卡片不是专门用来学习语言的，卡片是一个通用的学习手段，诗人们会用它记忆诗句，以此来更强烈地感受诗词带来的震撼。&lt;&#x2F;p&gt;
&lt;p&gt;记得做「家庭作业」，不要只做一次，挑其中的重点多做几次，即使只是在大脑里过一遍，确保自己真的掌握了，这样你就得到了一组 Chunks。&lt;&#x2F;p&gt;
&lt;p&gt;最有效的方法还是「回想」，尤其是当你在解决困难的问题时。当你在阅读文章时，试着离开书本，回想一下能否记起其中的要点，这对于理解内容有很大的帮助，比反复读和思维导图效果都要好。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个简单的技巧是向其他人阐述你所理解的东西，并且假设对方只是一个 10 岁的小孩（费曼学习法）。如果你能找到一个简单清楚的描述，就能更加深入地理解。你甚至可以把自己放到问题发生的场景中。&lt;&#x2F;p&gt;
&lt;p&gt;当你处于专注模式时，会有一种「我已经掌握了」的感觉，这时可以跟其他处于 diffuse 模式的人交流下想法，有时会帮助你纠正错误。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我们都说要追随你的热情，但热情只是让你擅长的东西变得更擅长，而有些东西要花很长的时间才能擅长，所以不仅仅要追随你的热情，还要扩大你的热情，然后生活质量就会有大幅度的提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>自学 iOS 开发的一些经验</title>
            <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learning-ios/</link>
            <guid>https://limboy.me/posts/learning-ios/</guid>
            <description>&lt;p&gt;不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。&lt;&#x2F;p&gt;
&lt;p&gt;现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-chu&quot;&gt;基础&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;yi-ding-de-bian-cheng-jing-yan&quot;&gt;一定的编程经验&lt;&#x2F;h4&gt;
&lt;p&gt;这里说的编程经验是至少熟练一门编程语言，对 OOP 有一定的了解，最好熟悉一些基本的设计模式。遇到过的好多 iOS 开发，大多是从别的语言转过来的，所以有一定的编程基础，学起来会更容易 get the point.&lt;&#x2F;p&gt;
&lt;p&gt;如果是第一次接触编程，当然也是没问题的，只是要做好心理准备，可能会比想象的难。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ying-yu&quot;&gt;英语&lt;&#x2F;h4&gt;
&lt;p&gt;发现不少开发对于英语似乎有点接受不能，通常都是中文优先，除非迫不得已，才硬着头皮看看 StackOverflow，英文文章，文档等。忘了是谁说过「难走的路越走越好走」，通常如此。其实只要稍微 push 一下自己，那些技术文章啃下来应该不会有太大的问题，有过几次成功的体验后，这种恐惧感就会减少很多。优质的文章、视频、书籍，多是英文的，不迈过这个坎，将来要么成为瓶颈，要么花更大的成本去填补。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-men&quot;&gt;入门&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shu-ji&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;要学习 iOS 开发，自然要先学 Objective-C （当然现在也可以直接上 Swift，不过如果多人协作的话，OC 目前还是主流），因为 OC 是 C 语言的超集，所以了解 C 语言对于学习 OC 肯定会有帮助，不过就算不了解，直接学 OC 也没太大问题。&lt;&#x2F;p&gt;
&lt;p&gt;这里推荐 BNR (Big Nerd Ranch) 的这本 &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Objective-C-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;032194206X&quot;&gt;Objective-C Programming The Big Nerd Ranch Guide&lt;&#x2F;a&gt;，讲解地比较细致，能帮助你更好的理解 OC，更重要的是教你遇到问题时，如何去解决问题，以及这个问题对应的一些知识点，如何使用文档等等。&lt;&#x2F;p&gt;
&lt;p&gt;来到一个新的世界，肯定会对这个世界充满好奇，想订阅一大堆博客，买一堆书，看各种教程和视频，然后就变得浮躁，不知该从哪下手，这会导致拖延症。我渴了，给我倒一杯水，这个很直接，马上就可以做，但如果是给我买一瓶饮料，而自己对那些饮料又不怎么熟悉时，就纠结了，不如刷会微博，看看朋友圈，玩个小游戏先。&lt;&#x2F;p&gt;
&lt;p&gt;所以一本好的入门教材很重要，要契合自己当前的水平，且常常会有收获，这种成就感会激励着你继续学下去。&lt;&#x2F;p&gt;
&lt;p&gt;在看书的过程中，往往会有这样的经历：书中提到某个人、观点、知识点、书、文章，然后就顺着它提到的这些东西出去了，可能某个知识点又牵扯到另一些内容，然后就这样越走越远。想起了一个故事&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;三只猎狗追一只土拔鼠,土拔鼠逃跑时钻进了一个树洞。这个树洞只有一个出口,不一会儿,忽然从树洞里跑出一只兔子。兔子飞快地向前跑,并爬上另一棵大树。兔子因为慌乱在树上没站稳,掉了下来,砸晕了正仰头看的三只猎狗,最后,兔子终于逃脱。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;对于这个故事可以从不同的角度去解读，我更愿意以初心去解读。兔子为什么会爬树？为什么能砸晕三只猎狗？这不是重点，重点是，之前追赶的土拨鼠哪去了？看书时难免会有延伸阅读，这个深度我觉得不宜超过 2 层，不然很容易就回不来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是如果有可能，最好每天都看点，这其实是很难的，因为总是会有优先级更高的事，或者之前的某些习惯在干扰。一旦断了几天，就不想再拿起来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有，苹果官方的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;referencelibrary&#x2F;GettingStarted&#x2F;RoadMapiOS&#x2F;&quot;&gt;Start Developing iOS Apps Today&lt;&#x2F;a&gt; 也是很不错的入门材料。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-pin&quot;&gt;视频&lt;&#x2F;h4&gt;
&lt;p&gt;推荐斯坦福老头子(Paul Hegarty)的 &lt;a href=&quot;https:&#x2F;&#x2F;itunes.apple.com&#x2F;us&#x2F;course&#x2F;developing-ios-7-apps-for&#x2F;id733644550&quot;&gt;Developing iOS 7 Apps for iPhone and iPad&lt;&#x2F;a&gt; ，当初也是看的这个（那时还是更老的版本），Paul 是资深的 Mac&#x2F;iOS 开发（前苹果员工？），很多知识点讲得很到位，学生们的提问也大都在点上，同时配有 Demo，总之听下来会对 iOS 开发有比较全面的了解。&lt;&#x2F;p&gt;
&lt;p&gt;同时推荐一本小册子：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;objc-zen&#x2F;objc-zen-book&quot;&gt;objc-zen-book&lt;&#x2F;a&gt;，花不长时间就能看完，里面是一些 Best Practices，对于编写优质代码会很有帮助。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bi-ji&quot;&gt;笔记&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个持久的过程，任何阶段都适用。以前也没太在意这个，觉得概念性的东西，脑子过一遍，就大概知道了，然后就去啃其他的东西了，现在看来，如果有记笔记的话，会更有助于消化概念、知识点，也可以记录自己的思考过程。达芬奇就记录了 10000 多页的笔记。&lt;&#x2F;p&gt;
&lt;p&gt;记笔记可以加深对知识点的理解，而成为编程巨星的唯一秘诀就是：&lt;a href=&quot;http:&#x2F;&#x2F;www.codesimplicity.com&#x2F;post&#x2F;the-singular-secret-of-the-rockstar-programmer&#x2F;&quot;&gt;对所做的事情理解地越深，就会做得越好&lt;&#x2F;a&gt;。同时如果遵循&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;&#x2F;a&gt;去复习的话，效果更佳。对知识点了解地足够透彻后，Debug 时才更有可能知道问题出在哪，解决问题也更容易有思路。&lt;&#x2F;p&gt;
&lt;p&gt;笔记不仅可以记知识点，也可以记录调试过程，比如&lt;a href=&quot;http:&#x2F;&#x2F;borkware.com&#x2F;bnr&#x2F;CampWhereIOS6.html&quot;&gt;这篇笔记&lt;&#x2F;a&gt;，有一种调试方法：&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95&quot;&gt;小黄鸭调试法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多程序员都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题，就在解释的过程中击中了问题的解决方案。一边阐述代码的意图一边观察它实际上的意图并做调试，这两者之间的任何不协调会变得很明显，并且更容易发现自己的错误。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;生活中我们可能不会真的这么去做，这时抽离出另一个自己，记录下跟 ta 的对话，也是个发现问题的好方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;lian-xi&quot;&gt;练习&lt;&#x2F;h4&gt;
&lt;p&gt;这也是一个持续的过程，知道了些概念或原理后，总是会想着去验证下是不是这样，无论结果是否如自己预期，实践的过程会降低对语言的陌生感，慢慢地培养一种驾驭这门语言的自信，如果出了错，正好可以重新梳理一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;如果静下心来看完了 BNR 的这本书，以及斯坦福的 iOS 开发视频，那么对 OC 应该比较了解了，一些常用的 UIKit 用起来也没什么问题了，比如 UIViewController &#x2F; UIView &#x2F; UIScrollView &#x2F; UIImageView &#x2F; UITableView。也熟悉一些概念，如 KVO &#x2F; MVC &#x2F; Delegate &#x2F; DataSource。&lt;&#x2F;p&gt;
&lt;p&gt;这个阶段下来，应该会有：哦，iOS 开发也就这样嘛，多翻翻文档，熟悉 Cocoa Touch 的一些 Class，差不多也能做出一个简单的 App 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-jie&quot;&gt;进阶&lt;&#x2F;h3&gt;
&lt;p&gt;入门之后，接下来可以折腾的东西还会有不少。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-1&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Effective-Objective-C-2-0-Specific-Development&#x2F;dp&#x2F;0321917014&quot;&gt;Effective Objective-C 2.0&lt;&#x2F;a&gt;，里面提到了 52 种提高 iOS App 质量的途径。涉及了 API 设计、protocols &#x2F; category 的使用、写出更模块化的代码等，读下来应该会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;0321942051&quot;&gt;iOS Programming: The Big Nerd Ranch Guide (4th Edition)&lt;&#x2F;a&gt;，又是一本 BNR 的书，这本书的特点是通过 Demo 来引出知识点，然后提一些问题，并且会细说解题思路。看书的过程中，对于元学习能力的提升也会有一定帮助。&lt;&#x2F;p&gt;
&lt;p&gt;--- update ---&lt;&#x2F;p&gt;
&lt;p&gt;发现巧哥的 &lt;a href=&quot;http:&#x2F;&#x2F;item.jd.com&#x2F;11598468.html&quot;&gt;iOS 开发进阶&lt;&#x2F;a&gt; 已经可以在京东买到了，虽然没有细看，但巧哥出品质量肯定有保障。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qi-ta-zi-yuan&quot;&gt;其他资源&lt;&#x2F;h4&gt;
&lt;p&gt;进入这个阶段后，可以去探索更大的世界了，现在的资源已经很丰富了，但还是要遵循「少而精」的原则。以下是我觉得挺不错的源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdevweekly.com&#x2F;&quot;&gt;iOS Dev Weekly&lt;&#x2F;a&gt; 每周一期，内容多为这一星期里值得关注的 Github 项目、文章、工具等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.devtang.com&#x2F;&quot;&gt;iOS 移动开发周报&lt;&#x2F;a&gt; 这是唐巧大大整理的每周不错的 iOS 开发相关的内容，多为中文。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.raywenderlich.com&#x2F;tutorials&quot;&gt;RayWenderlich&lt;&#x2F;a&gt; 很多详细又全面的教程，不容错过。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdev.slack.com&#x2F;home&quot;&gt;iOS Dev Slack&lt;&#x2F;a&gt; 国内不少 iOS 开发（包括大大们）都在这里，不过现在好像不怎么能拿到邀请了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tangqiaoboy&#x2F;iOSBlogCN&quot;&gt;中文 iOS&#x2F;Mac 开发博客列表&lt;&#x2F;a&gt;，打开工具订阅吧。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;还有，如果可能的话，多去分享自己学到的东西，教是最好的学，我试过几次，效果真的很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao-1&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段下来，对于常用的设计模式、内存管理、Blocks 的使用、图像操作、网络请求和管理、多线程应该比较熟悉了。对于 CALayer、Animation、UIScrollView、UITableView、UICollectionView、ViewController Container 则非常熟悉，对「非常熟悉」的定义是：不打开 Xcode，脑子里就能把相应的知识点复述出来 80% ，比如这个类有哪些方法，Delegate &#x2F; DataSource 有哪些方法，怎么使用，如果要实现某个效果，应该怎么做（好吧， UICollectionView 除外）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji&quot;&gt;高级&lt;&#x2F;h3&gt;
&lt;p&gt;其实高级、进阶、入门并没有严格的界限，在入门阶段也可以探究高级阶段的一些东西。我觉得支撑我们不断探索和前进的动力不是兴趣，而是永不满足的好奇心，和对优雅代码的追求。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your standards are low, you&#x27;re going to stop pretty early on in the process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;BNR 的这篇 &lt;a href=&quot;http:&#x2F;&#x2F;www.bignerdranch.com&#x2F;blog&#x2F;leveling-up&#x2F;&quot;&gt;Leveling Up&lt;&#x2F;a&gt; 已经讲得很好了，也更加细致。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-2&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Pushing-Limits-Applications&#x2F;dp&#x2F;1118818342&quot;&gt;iOS 7 Programming Pushing the Limits&lt;&#x2F;a&gt; 这本书对 iOS 7 的一些特性会讲解地比较深入，当然也不仅仅是 iOS 7。只叹 iOS 更新实在太快，书籍往往跟不上，一本好书往往需要很长时间来撰写，等书可以出版了，iOS 又出新版本了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yuan-ma&quot;&gt;源码&lt;&#x2F;h4&gt;
&lt;p&gt;看优秀的源码，可以学到很多东西，使用过程中遇到问题也更容易解决。这些是我觉得值得细看的源码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AFNetworking&#x2F;AFNetworking&quot;&gt;AFNetworking&lt;&#x2F;a&gt;(NSOperation, HTTP, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rs&#x2F;SDWebImage&quot;&gt;SDWebImage&lt;&#x2F;a&gt;(Image Handle, Cache, NSOperation, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samvermette&#x2F;SVPullToRefresh&quot;&gt;SVPullToRefresh&lt;&#x2F;a&gt;(UIScrollView, State Handle), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;icanzilb&#x2F;JSONModel&quot;&gt;JSONModel&lt;&#x2F;a&gt;(runtime)&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，也可以翻翻 &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;CF&#x2F;CF-855.17&#x2F;&quot;&gt;CoreFoundation&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;objc4&#x2F;objc4-646&#x2F;&quot;&gt;OC runtime&lt;&#x2F;a&gt; 的源码。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-yuan&quot;&gt;资源&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;oleb.net&#x2F;blog&#x2F;&quot;&gt;oleb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nshipster.com&#x2F;&quot;&gt;NSHipster&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;objc.io&quot;&gt;objc.io&lt;&#x2F;a&gt; || &lt;a href=&quot;http:&#x2F;&#x2F;objcio.cn&quot;&gt;objcio.cn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;&quot;&gt;WWDC 视频&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gong-ju&quot;&gt;工具&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;chisel&quot;&gt;chisel&lt;&#x2F;a&gt; Facebook 出品的 LLDB 助手，用于调试很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;revealapp.com&#x2F;&quot;&gt;Reveal&lt;&#x2F;a&gt; 每当好奇某个 App 的实现时，都会打开它一窥究竟，用于调试自己的 App 也很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; steipete 大大出品的一款方便使用 method swizzling 的工具，可以在运行时动态添加代码到某个方法&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nygard&#x2F;class-dump&quot;&gt;class-dump&lt;&#x2F;a&gt; 从 Mach-O 文件生成 OC 头文件，有时想看看某个 App 大概是如何组织的会比较方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.hopperapp.com&#x2F;&quot;&gt;Hopper&lt;&#x2F;a&gt; 可以对二进制文件进行反编译，甚至可以生成伪代码！有时想看看 UIViewController 里某个方法大概是怎么实现的，就可以用它。&lt;&#x2F;li&gt;
&lt;li&gt;Instruments 这个内置的工具对于发现 App 的各种问题很有帮助，如内存占用、泄露，渲染问题等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;mu-biao-2&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段，对于底层的实现会有更深入的了解，各种 Core 开头的 Framework 至少可以说出个大概，工具也能熟练使用，「正经的代码」写过数万行，可能天天在翻 &lt;a href=&quot;http:&#x2F;&#x2F;kapeli.com&#x2F;dash&quot;&gt;Dash&lt;&#x2F;a&gt;。如果别人让你实现某个功能，能在较短的时间内给出不错的实现方案，并且足够细致，甚至精细到如何使用 Core Graphic 去画某个图像。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得无论学习什么，「速成」的心态是最要不得的，这只会让自己变得浮躁，一知半解，整个过程也很难让自己的元学习能力得到提升。慢慢来，攻占一个城后，再去打下一个，这时心态也会平和许多。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>阅读源码的乐趣</title>
            <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-pleasure-of-reading-source/</link>
            <guid>https://limboy.me/posts/the-pleasure-of-reading-source/</guid>
            <description>&lt;p&gt;阅读源码尤其是优秀的源码是一件很有乐趣的事情，可以拓宽视野，提高品位，锻炼思维，就像间接地在跟作者沟通一样。Quora 上有一个问题是：&lt;a href=&quot;http:&#x2F;&#x2F;www.quora.com&#x2F;How-did-TJ-Holowaychuk-learn-to-program&quot;&gt;TJ-Holowaychunk 是如何学习编程的&lt;&#x2F;a&gt;，他的回答是&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&#x27;t read books, never went to school, I just read other people&#x27;s code and always wonder how things work&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果有足够的好奇心，并且总想知道「How Things Work」，那么阅读源码就是个不错的途径。&lt;&#x2F;p&gt;
&lt;p&gt;源码的复杂度不同，需要投入的时间、使用的方法也不同，以一个中等复杂度的项目为例，简单分享下我阅读源码的一些经验。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 2014，有一个 Session 是讲&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;#232&quot;&gt;「Advanced User Interfaces with Collection Views」&lt;&#x2F;a&gt;，之所以选择这个，是因为它是我们还算熟悉的对象（Collection View），但苹果用了一些「特殊」的架构来做到代码复用，并且减少 VC 的体积，而且使用了部分 iTunes Connect 的源码，而不是简单的演示代码。所以决定一窥究竟。&lt;&#x2F;p&gt;
&lt;p&gt;为了有一个大概的感受，先看一遍视频，不需要领会每个要点，先记录一些关键信息，方便到时翻源码。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;这套结构可以处理复杂的 DataSource&lt;&#x2F;li&gt;
&lt;li&gt;可以同时适配 iPhone &#x2F; iPad&lt;&#x2F;li&gt;
&lt;li&gt;有一个统一的 loading indicator&lt;&#x2F;li&gt;
&lt;li&gt;可以设置某个 Header 是否置顶&lt;&#x2F;li&gt;
&lt;li&gt;可以有一个全局的 Header&lt;&#x2F;li&gt;
&lt;li&gt;通过聚合 DataSource 的方法来达到代码复用，并且只有一个 VC&lt;&#x2F;li&gt;
&lt;li&gt;可以设置聚合形式为 Segmented &#x2F; Composed&lt;&#x2F;li&gt;
&lt;li&gt;layout 信息可以配置，且可以覆盖&lt;&#x2F;li&gt;
&lt;li&gt;使用了有限状态机&lt;&#x2F;li&gt;
&lt;li&gt;子 DataSource 在数据载入完成后会有一个 block，所需的 DataSource 都载入完成时，这些 block 会被统一执行&lt;&#x2F;li&gt;
&lt;li&gt;Section Metrics 可以设置 Section 的具体表现&lt;&#x2F;li&gt;
&lt;li&gt;layout 的信息会在内部被保存，避免重复计算 (Snapshot Metrics)&lt;&#x2F;li&gt;
&lt;li&gt;Optional Layout Methods 会有意想不到的好效果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;产生了一些疑问，比如&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;多个子 DataSource 被组合成一个 Composed DataSource 时，如何通过 IndexPath 找到对应的 DataSource？&lt;&#x2F;li&gt;
&lt;li&gt;找到之后如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;是否置顶是如何实现的？&lt;&#x2F;li&gt;
&lt;li&gt;如何通过有限状态机来管理 Loading 状态？&lt;&#x2F;li&gt;
&lt;li&gt;如果有按钮，那么按钮的点击事件如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;Collection View 没有 headerView，这又是怎么实现的？&lt;&#x2F;li&gt;
&lt;li&gt;数据是怎么载入的？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;大概有了些概念和疑问之后，就可以打开源码痛快看了，先来看看目录结构 (可以在这里&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zwaldowski&#x2F;AAPLAdvancedCollectionView&quot;&gt;在线浏览&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Framework
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Categories
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; DataSources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Layouts
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; ViewControllers
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Views
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Application
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来关键的信息都在 Framework 里了，那如何切入呢？反其道而行之，先来看看这些 Framework 是怎么用的，最直接的就从 ViewController 入手。那就先来看看 AAPLCatListViewController 这个类吧，如果没猜错的话，应该是展示喵咪列表（直观的名字很重要）。&lt;&#x2F;p&gt;
&lt;p&gt;果然很小，居然只有 140 行，如果不分离的话，1400 行也是可以轻松达到的。看到定义了一个 AAPLSegmentedDataSource，脑海里大概可以想象出是一个可以切换 Tag 的页面，接着又看到了两个 DataSource，那这两个页面的数据源应该就是它们了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;APPLCatListViewController ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLSegmentedDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;segmentedDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;catsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;favoriteCatsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectedIndexPath;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;selectedDataSourceObserver;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后又看到这么一行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)dealloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;segmentedDataSource&lt;&#x2F;span&gt;&lt;span&gt; aapl_removeObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;selectedDataSourceObserver&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是苹果自己实现了一个 KVO Wrapper，果然他们自己也无法忍受原生的 KVO，哈哈。接着到了 ViewDidLoad，新建了两个 DataSource，那新建的时候都干了些什么？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newAllCatsDataSource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title for available cats list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All the big ...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The message to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;No Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The title to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A problem with the network ....&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Unable To Load Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title of message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; dataSource;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以只是初始化，然后设置一些信息，Nothing Special。然后看到了 AAPLLayoutSectionMetrics ，看起来是设置 Layout 的一些显示信息，如 height &#x2F; backgroundColor 之类的。&lt;&#x2F;p&gt;
&lt;p&gt;最后创建了一个 KVO 来监测 selectedDataSource 的变化，界面上做相应的调整。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看看 AAPLCatListDataSource 的实现，一进去发现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLCatListDataSource : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AAPLBasicDataSource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Is this list showing the favorites or all available cats?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来 AAPLBasicDataSource 一定做了很多事，进入到 AAPLBasicDataSource.m 文件，看到这个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setShowingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)showingFavorites
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resetContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNeedsLoadContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observeFavoriteToggledNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;AAPLCatFavoriteToggledNotificationName object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到有一个 &lt;code&gt;setNeedsLoadContent&lt;&#x2F;code&gt; 方法，看起来数据的载入应该是通过这个方法来触发的，进去看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setNeedsLoadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelPreviousPerformRequestsWithTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) object:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) withObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;afterDelay:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一个方法没怎么接触过，查一下文档先，原来是可以取消之前通过 &lt;code&gt;performSelector:withObject:afterDelay:&lt;&#x2F;code&gt; 触发的方法，为了加深印象，顺便 Google 一下这个方法，原来 &lt;code&gt;performSelector:withObject:afterDelay&lt;&#x2F;code&gt; 在方法被执行前，会持有 Object，方法执行后在解除对 Object 的持有，如果不小心多次调用这个方法就有可能导致内存泄露，所以在调用此方法前先 cancel 一下是个好习惯。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看这个 &lt;code&gt;loadContent&lt;&#x2F;code&gt; 都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; To be implemented by subclasses…
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来需要在子类实现这个方法，那就到 AAPLCatListDataSource 里看看这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadContentWithBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Check to make certain a more recent call to load content hasn&amp;#39;t superceded this one…
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading ignore];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading doneWithError:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(cats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; cats;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithNoContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchFavoriteCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用了 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; 方法，进去看看，这个方法做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContentWithBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingBlock)block
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;beginLoading&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    __weak &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; weakself &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadingWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error, AAPLLoadingUpdateBlock update){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Tell previous loading instance it&amp;#39;s no longer current and remember this loading instance
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Call the provided block to actually do the load
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loading)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单说来就是生成了一个 loading，然后把 loading 传给 block，那 &lt;code&gt;loadingWithCompletionHandler:&lt;&#x2F;code&gt; 这个方法又做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)loadingWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update))handler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSParameterAssert(handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; handler;
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以就是生成一个 loading 实例，然后把 handler 存到 block 属性里。既然存了，那将来某个时候一定会用到，从名字上来看，应该是 loading 完成时会被调用，搜索 block 关键字，发现只有在下面这个方法中 block 才会被调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_doneWithNewState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newState error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingUpdateBlock)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#if&lt;&#x2F;span&gt;&lt;span&gt; DEBUG
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;OSAtomicCompareAndSwap32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_complete)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NSAssert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completion method called more than once&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;block)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _block;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newState, error, update);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;既然是 _ 开头，那应该是内部方法，对外封装了几种状态，如 &lt;code&gt;ignore&lt;&#x2F;code&gt;, &lt;code&gt;done&lt;&#x2F;code&gt;, &lt;code&gt;updateWithContent:&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;p&gt;咦，这里为什么要先把 _block 赋给一个临时变量 block，然后再把 _block 设为 nil 呢？看起来像是为了解决某种内存问题。如果直接 &lt;code&gt;_block(newState, error, update)&lt;&#x2F;code&gt; 会怎样？哦，虽然这里没有出现 self，但 _block 是一个 instance 变量，所以在 ^{} 里会对 self 进行强引用。而如果赋给一个临时变量，那么只会对这个临时变量强引用，就不会出现循环引用的情况。&lt;&#x2F;p&gt;
&lt;p&gt;AAPLLoading 看的差不多了，再出来看 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; ，注意到在 CompletionHandler 里，有这么一段&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 self 是 AAPLDataSource （Block 嵌套多了，还真是容易晕啊），来看看 &lt;code&gt;endLoadingWithState:error:update&lt;&#x2F;code&gt; 这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)endLoadingWithState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)state error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(dispatch_block_t)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;shouldDisplayPlaceholder&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(update)
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enqueuePendingUpdateBlock:update&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyBatchUpdate:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Run pending updates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;executePendingUpdates];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingComplete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyContentLoadedWithError:error&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;设置一些状态，然后在恰当的时机调用 update block，咦，这里有个 dispatch_block_t 没怎么见过，查了一下原来是一个内置的空传值和空返回的 block。&lt;&#x2F;p&gt;
&lt;p&gt;看了下 &lt;code&gt;enqueuePendingUpdateBlock&lt;&#x2F;code&gt;，会把现在的这个 update 结合之前的 updateBlock，形成一个新的 updateBlock，应该就是视频里提到的当所有的 DataSource 都载入完时，统一执行之前的 update block&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;notifyBatchUpdate:&lt;&#x2F;code&gt; 所做的是看一下 Delegate 是否响应 &lt;code&gt;dataSource:performBatchUpdate:complete:&lt;&#x2F;code&gt; 如果响应则走你，不然挨个执行 update &#x2F; complete。&lt;&#x2F;p&gt;
&lt;p&gt;看完了 &lt;code&gt;loadContentWithBlock&lt;&#x2F;code&gt; 再来看看这个 Block 里面都做了什么，大意是根据 self.showingFavorites 来切换不同的数据源，这里看到了一个新的类 AAPLDataAccessManager，看起来像是统一的数据层，瞄一眼&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; AAPLCat;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLDataAccessManager : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (AAPLDataAccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;manager&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchFavoriteCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchDetailForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cat, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchSightingsForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sightings, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然如此，将来数据的载入形式有变化，或需要做缓存啥的，都可以在这一层处理，其他部分不会感觉到变化。&lt;&#x2F;p&gt;
&lt;p&gt;这一轮看下来已经有不少信息量了，来简单捋一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[SegmentedDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; setNeedsLoadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[CatListDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[DataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentWithBlock:]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;创建&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loading，设置 loading 完成后要做的事 → 拿到数据后放到 updateQueue 里，等全部拿到再执行 batchUpdate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;执行&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentBlock → 使用 DataAccessManager 去获取数据，拿到后交给 loading
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里，我们还没有运行 Project 看效果，因为我觉得代码包含的信息会更丰富，而且这么看下来后，对于界面会长啥样也有个大概的了解。&lt;&#x2F;p&gt;
&lt;p&gt;这只是开始，继续挖掘下去还会有不少好东西，比如 Favorite 按钮的处理，它是通过 Responder Chain 而不是 Delegate 来实现的，也是一个思路。通过有限状态机来管理 loading 状态也是很有意思的实现。&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，可以看下 ComposedDataSource，先不看实现，如果要自己写大概会是什么思路，比如当调用 &lt;code&gt;[UICollectionView cellForItemAtIndexPath:]&lt;&#x2F;code&gt; 时，如何找到对应的 DataSource，找到之后如何渲染对应的 Cell 等。&lt;&#x2F;p&gt;
&lt;p&gt;所以看源码真的是一件很有意思的事情，像一场冒险，总是会有意外收获，可能在不知不觉中，能力就得到了提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>把手机拿在手里，这样就不会错过细微的风景了</title>
            <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/phone-in-my-hand/</link>
            <guid>https://limboy.me/posts/phone-in-my-hand/</guid>
            <description>&lt;p&gt;「拍照」对于一个手机的意义已经越来越重要了，每次新出一款手机，都会先看下拍照效果怎么样：夜景、强光、人像、阴天、色彩等等。但真正到手后，它的作用真的发挥出来了么？还是只是用来记录生活：美食、自拍、风景、某地的标志物等等。这些当然是相机可以做也应该做的事，但相信我们在买它的时候还会有别的打算吧，比如抓拍容易被忽略，但在你看来又值得记录的场景。&lt;&#x2F;p&gt;
&lt;p&gt;有很长一段时间，走在路上的时候，它只是静静地躺在裤兜了，有时也会用来听听音乐或 podcast。因为每天走的是同一条路，路上的风景早已了然于胸，闭上眼睛都知道前面一个路口左转会有什么，过了天桥又会有什么，进了小区会看见什么。对于这些习惯了的事物会自动关闭「探索」模式，就像老朋友一样，ta 懂你，你也懂 ta。&lt;&#x2F;p&gt;
&lt;p&gt;直到有一天我把手机拿在手里，就像攥着一把锤子一样，到处留意那个钉子。&lt;&#x2F;p&gt;
&lt;p&gt;路边有一家纹身店，我看到一个皮肤白皙，相貌英俊的男生略带羞涩的坐在里面，不知出于什么原因想要给自己纹个身。看到一只老鼠从河的一头游到另一头，钻进了大片铜钱草的深处。看到路边有一家修鞋的店，而店里的一位师傅是聋哑人。看到斑马线有时会在前半部分故意呈现曲折状。看到傍晚的天空居然是火烧云。看到刚下完雨，路边的绿化带上有水珠挂在了蜘蛛网上。看到地上的石板路是参差不齐，错落有致地摆放。看到路边的树上结了一串不知名的果实。&lt;&#x2F;p&gt;
&lt;p&gt;这个之前自以为一览无余的风景，竟有那么多细微之处未曾留意。我们总是希望能去外面的世界看看，看看不一样的人，不一样的事，不一样的景，这当然是好的，只是也别忽略了现在生活的这个小世界，细细品味，或许还会有不少惊喜呢。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>MVP VS MLP</title>
            <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mvp-vs-mlp/</link>
            <guid>https://limboy.me/posts/mvp-vs-mlp/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-mvp&quot;&gt;什么是 MVP？&lt;&#x2F;h3&gt;
&lt;p&gt;MVP(Minimum Viable Product)可以理解为「最小可行产品」，就是一个产品只包含了最精简的，用户最需要的功能。就像古人需要知道大概的时间，戳一根棍在地上，看着棍的影子心里就大概有个数了，这根棍就是 MVP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvp-de-hao-chu-shi-shi-yao&quot;&gt;MVP 的好处是什么？&lt;&#x2F;h3&gt;
&lt;p&gt;我们在构思一款产品时，心里往往会有很多想法，尤其是开启了头脑风暴模式时，更是五花八门，简单罗列起来可能就有几十条，那么如何对这些想法进行取舍呢？&lt;&#x2F;p&gt;
&lt;p&gt;首先需要一个目标：这个产品要解决的用户痛点是什么？围绕这个点去考虑哪些想法是可行的，哪些暂时不可行，但将来会可行，哪些跟目标完全不相干等等。这个目标就像磁铁一样，把最相关的功能点都吸引了过来，这样就会产生一个 MVP。&lt;&#x2F;p&gt;
&lt;p&gt;比如想做一个专门拍猫的 App，要解决的问题是：为猫奴们提供一个专门的互动平台。然后就可以罗列功能点了，比如是否需要按猫的品种分类，是否需要讨论区，是否可以拍视频，是否需要滤镜，是否需要分享到社交网络，是否可以赞，是否可以发表养猫日记，是否可以对照片&#x2F;视频评论等等。&lt;&#x2F;p&gt;
&lt;p&gt;此时会发现，好像这些功能点都跟目标有关系，那是不是需要一下子都做出来呢？不，不要这样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;media-cache-ak0.pinimg.com&#x2F;736x&#x2F;46&#x2F;03&#x2F;43&#x2F;460343019a237709f80afb42647b285a.jpg&quot; alt=&quot;Spotify Product Design&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最开始要验证的一个想法是：用户会不会对这样的平台感兴趣？毕竟可以分享的平台那么多，所以这是最需要验证的。一下子上太多功能，对用户来说是会有压力的。所以最开始可以针对「猫」这个特点去做些文章，比如拍照时，可以选择猫的种类，可以按猫的种类或颜色进行筛选等等。毕竟这是区别其他平台的一个很重要的点，然后可以加上最基本的社交功能，比如「赞」。再结合几个功能点就可以出一版了。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，看用户的反应和使用习惯，再从中找出问题，进行下一版的完善。&lt;&#x2F;p&gt;
&lt;p&gt;所以 MVP 的好处是可以避免花了大把的时间去做一个产品，结果放出来后发现没人用这种尴尬的局面。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvp-de-wen-ti-zai-na-li&quot;&gt;MVP 的问题在那里？&lt;&#x2F;h3&gt;
&lt;p&gt;MVP 的问题在于少了情感，而人偏偏又情感丰富而细腻。想象一下，如果「Her」里面，萨曼莎的声音像机器人那样，其他都不变，西奥多还会对她那么情有独钟么？不会，因为尽管说的话一样，但机器人的声音让我们有「距离感」，而这种「距离感」会时刻提醒别人，我只是一个机器，我跟你们不一样，我只是一堆硬件和软件的产物，这样就不容易让使用者产生愉悦感。&lt;&#x2F;p&gt;
&lt;p&gt;就像在「下厨房」之前，有很多的类似的网站，但当「下厨房」出来之后，很多人都转向了它，除了界面干净整洁，使用方便外，「有爱」也是一个很重要的因素。那句「唯有美食与爱不可辜负」抓住了多少人的心啊。&lt;&#x2F;p&gt;
&lt;p&gt;所以就引出了另一种模式：MLP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-mlp&quot;&gt;什么是 MLP？&lt;&#x2F;h3&gt;
&lt;p&gt;MLP(Minimum Lovable Product)「最小可爱产品」(总觉得怪怪的)，是在 MLP 的基础上注入了情感元素，看下面这张图片。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;media-cache-ec0.pinimg.com&#x2F;736x&#x2F;e6&#x2F;f4&#x2F;9a&#x2F;e6f49a169c6d58731cba50968967c94a.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边的蛋糕只是一个蛋糕，是一个可以充饥的食品，可能味道还不错。右边的也还是蛋糕，但会觉得「萌萌的」，拉近了与客户之间的距离。如果味道差不多，价钱也差不多，你会选择哪个？&lt;&#x2F;p&gt;
&lt;p&gt;其实很多人都想做一款体贴的产品，但最终放弃了，因为它太难了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shang-ceng-de-ya-li&quot;&gt;上层的压力&lt;&#x2F;h4&gt;
&lt;p&gt;Boss 会关注项目的进度，何时能够完工，为什么进度这么慢等等，如果顶不住压力，就容易产生「就这样吧，先把功能实现了再说」这样的念头，而这样的心态是很难做出一个 MLP 的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-ji-dui-chan-pin-qing-zhu-de-qing-gan-bu-gou&quot;&gt;自己对产品倾注的情感不够&lt;&#x2F;h4&gt;
&lt;p&gt;有些产品经理对待产品，会觉得这是上头交代的任务，那么我完成就好了。然后就开始寻找类似的 App 去体验，去找灵感，然后找出几个符合当前产品的表现形式或交互，凑在一起就基本完成任务了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gong-cheng-shi-men-de-ya-li&quot;&gt;工程师们的压力&lt;&#x2F;h4&gt;
&lt;p&gt;有时我们确实倾注了感情，也确实在原型图上有所体现，但到了工程师这里往往会遇到些困难。因为这些「锦上添花」的东西，往往看着挺小，但代码上的改动会比较大，如果工程师内心觉得这是个「没什么用」的功能，就会想出一些理由来说服你，说到最后觉得：哎，那就这样吧。&lt;&#x2F;p&gt;
&lt;p&gt;所以有爱的产品不多，但「有爱」是可以带来很多好处的，为了这些好处，也值得花时间去雕琢。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-shi-fan-liao-cuo-ye-hui-geng-rong-yi-de-dao-liang-jie&quot;&gt;即使犯了错，也会更容易得到谅解&lt;&#x2F;h4&gt;
&lt;p&gt;同样是被踩了一脚，如果是被好朋友踩的，笑笑就过了，如果被陌生人踩了，虽然也没什么，但也会略显不悦。&lt;&#x2F;p&gt;
&lt;p&gt;用户愿意再给一次机会，相信它会改进，会变得更好，毕竟对它有感情。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;geng-rong-yi-xing-cheng-bu-luo&quot;&gt;更容易形成部落&lt;&#x2F;h4&gt;
&lt;p&gt;大多数的产品都是针对某个人群开发的，越有爱，就越容易形成部落。部落就是忠实的用户群。部落的人数越多，产品经理和公司的其他员工的存在感和满足感就越强烈。&lt;&#x2F;p&gt;
&lt;p&gt;所以，要做出更好的产品，向着 MLP 出发吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做产品的态度</title>
            <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-attitude-of-making-products/</link>
            <guid>https://limboy.me/posts/the-attitude-of-making-products/</guid>
            <description>&lt;p&gt;做人要有态度，做产品自然也要有态度。李宗盛在「致匠心」里提到：人不能孤独地活着，之所以有作品是为了沟通，透过作品去告诉人家心里的想法，眼中看世界的样子，所在意的，所珍惜的，所以，作品就是自己。&lt;&#x2F;p&gt;
&lt;p&gt;那该用怎样的态度去做产品呢？以下是我想到的一些&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ba-chan-pin-dang-zuo-yi-jian-yi-zhu-pin&quot;&gt;把产品当做一件艺术品&lt;&#x2F;h3&gt;
&lt;p&gt;了解一个人最好的方式，不是看他说了什么，而是看他做了什么。你可能对产品有特别深刻的理解，能头头是道的讲上两三个小时，但如果没有作品，或者作品很一般，不禁会让人怀疑你到底有没有货？&lt;&#x2F;p&gt;
&lt;p&gt;对产品用心的人，对生活往往也很用心，有独特的魅力。谁不想与这样的人一起合作呢。&lt;&#x2F;p&gt;
&lt;p&gt;艺术品是需要打磨的。光是交互和设计上的细节就足够打磨一阵的。因为刚开始策划产品时，总会有疏忽遗漏的地方，或者效果出来后有不如意的地方。对于这些可以优化的点的态度很重要，有不少做产品的往往会在这一步妥协，理由是：先放上去，然后再迭代。在我看来，这跟把文章放到 Instapaper 里一样，read it later = read it never。就像明知道一碗饭里藏着一只小强的嫩腿，但因为拿出来太麻烦，就直接端给用户吃一样。这是一种不负责任的态度，对用户，更是对自己。&lt;&#x2F;p&gt;
&lt;p&gt;「禅与摩托车维修艺术」里说道：想知道怎样画一张完美的画吗？很简单，你先让自己变得完美，然后再顺其自然地画出来。打磨产品的过程，就是让自己变得完美的过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-shu-ju-min-gan&quot;&gt;对数据敏感&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道，数据是用来做参考的，所以首先要有数据。在开发花瓣 App 的过程中，我们发现「事件」是一个很重要的数据源，所以埋了 60 多个点，尽可能覆盖到所有可测点，同时又不至于太细。&lt;&#x2F;p&gt;
&lt;p&gt;有了数据之后，怎么看数据也是一门小学问。这里牵扯到另一个特质，不仅仅是在做产品上，更应该在生活上 -- 好奇心。在好奇心的驱使下，才会去追问为什么导航栏按钮的点击次数明显大于长按，为什么双击的使用频率那么高，为什么在瀑布流页面很少会有人长按，为什么人们不愿意去点采集所在的画板等等。&lt;&#x2F;p&gt;
&lt;p&gt;要根据数据推测可能的原因，这样才能有优化的方向。数据高了要知道为什么会高，低了是因为这个功能本身就没什么人会用，还是因为没做好导致的，都要去想。&lt;&#x2F;p&gt;
&lt;p&gt;当看到数据背后的问题，然后有针对性地做出调整发布新版后，看到数据变好了，这种快感也只有亲身经历才能体会吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-shi-duo-chong-fang-an-zhao-dao-zui-you-jie&quot;&gt;尝试多种方案，找到最优解&lt;&#x2F;h3&gt;
&lt;p&gt;在原型阶段尤其如此。苹果在 WWDC 2014 上，还搬出了他们内部做 App 的流程：prototyping fake it till you make it. 非常值得一看。里面提到了三点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make fake apps&lt;&#x2F;li&gt;
&lt;li&gt;Show people&lt;&#x2F;li&gt;
&lt;li&gt;Learn from their feedback&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;make-show-learn.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;make-show-learn.png 315w,&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;make-show-learn.png 315w&quot;
    sizes=&quot;(max-width: 315px) 100vw, 315px&quot; width=&quot;315&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;各个阶段会有不同的问题&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些应该是真实的？&lt;&#x2F;li&gt;
&lt;li&gt;哪些可以是假的？&lt;&#x2F;li&gt;
&lt;li&gt;什么场景下会用它？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;你知道如何使用 X 功能吗？&lt;&#x2F;li&gt;
&lt;li&gt;使用 X 功能是否足够简单？&lt;&#x2F;li&gt;
&lt;li&gt;如何能做得更好？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learn&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些跟预期的一致？&lt;&#x2F;li&gt;
&lt;li&gt;哪些跟预期的不一致？&lt;&#x2F;li&gt;
&lt;li&gt;有什么新的启发？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;记得在做花瓣的新功能「一起」时，遇到了一个很棘手的问题，我们想了好几天也没有合适的解决方案。场景大概是这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;yiqi.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;yiqi.png 161w,&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;yiqi.png 161w&quot;
    sizes=&quot;(max-width: 161px) 100vw, 161px&quot; width=&quot;161&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当用户添加了新的帖子时，该如何处理？是否需要跳到顶部？如果跳到顶部，那么如果之前浏览了很多页，这时再要回去就困难了。如果不跳，只是给个提醒，又有点违背用户的心理期待。如果浏览得少就跳，浏览得多就不跳呢？NoNoNo，体验不一致，用户会懵的。给一个按钮，让用户自己选择是否跳到顶部？NoNoNo，首先是没有合适的地方放按钮，其次把选择权交给用户又多了一个步骤，而且让用户思考了。&lt;&#x2F;p&gt;
&lt;p&gt;就这样，一直没有好的办法，因为一直装着这件事，某天回家上床后，忽然有了灵感：不如把看过的帖子都折叠起来，然后跳到顶部，这样就没有「回去困难」的问题了，而且看起来也很优雅。于是起床，忙乎到 3 点，把这个功能实现了，大家体验了下，都觉得不错。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;qiyi-zhedie.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;qiyi-zhedie.png 162w,&amp;#x2F;posts&amp;#x2F;the-attitude-of-making-products&amp;#x2F;qiyi-zhedie.png 162w&quot;
    sizes=&quot;(max-width: 162px) 100vw, 162px&quot; width=&quot;162&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;做产品，有时就想解数学题一样，思路对了的时候是能够感知到的，有种本就该如此的感觉。如果缺少这种感觉，或许是因为尝试得还不够。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ti-yan-ge-lei-you-zhi-app&quot;&gt;体验各类优质 App&lt;&#x2F;h3&gt;
&lt;p&gt;做产品的，往往手机里装了满屏的 App，反正空间闲着也是闲着，似乎这样才有些「安全感」。我倒不这么认为，我们应该去体验优质的 App，从下载下来那一刻就开始，甚至下载之前就可以琢磨：为什么会下这个 App？从哪里得知的？它是做什么用的？其他人对它的评价如何？&lt;&#x2F;p&gt;
&lt;p&gt;然后看着这个 icon，它传达了什么意思？是否简洁？进去之后的启动页是如何的？启动速度是否够快？引导页有什么特点？我看着这些引导页的感受是什么？第一个页面是否吸引我？是否知道该如何操作？有哪些地方觉得特别贴心的？有哪些地方可以改进的？为什么这个按钮要放在这里？为什么信息要这么布局等等。&lt;&#x2F;p&gt;
&lt;p&gt;所以要完整细致地体验一个 App 其实是很费精力的，只有多去使用这样的 App，才能提升自己的品味，找到做一款优质 App 的感觉。我们使用苹果的产品的原因之一是，它能把复杂的电脑技术变得让人容易理解，非常自然，从中也能得到些许启发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-yao-ba-xi-wang-ji-tuo-zai-tui-yan-shang&quot;&gt;不要把希望寄托在推广上&lt;&#x2F;h3&gt;
&lt;p&gt;很多人埋怨自己的产品用的人太少是因为缺少合适的推广渠道，往往抱着只要 XXX 推一下，用户量就会蹭蹭地往上涨，活跃度也会跟着上来的心态。这跟出身贫寒，饱受贫穷之苦的人觉得只要有了钱一切都会好起来的想法如出一辙。但如果仔细想想，事实可能并不是那样。&lt;&#x2F;p&gt;
&lt;p&gt;虽然目前的用户比较少，但他们是否有在用，用的是否舒服，是否解决了他们的某个问题，自己的产品用起来是否足够简单等等，这些都是可以先问问自己的。&lt;&#x2F;p&gt;
&lt;p&gt;宁愿让 50 个忠实用户愉快地使用自己的产品，而不是通过推广让 1000 个人知道了，结果只有 50 个人在用。&lt;&#x2F;p&gt;
&lt;p&gt;因上努力，果上随缘。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-duan-wan-shan-zi-ji-de-zhi-shi-ti-xi&quot;&gt;不断完善自己的知识体系&lt;&#x2F;h3&gt;
&lt;p&gt;张小龙说，产品经理就是站在上帝身边的人，那么这个人必须要懂得足够多，才有资格站在那里。这不是看几本产品相关的书就可以的，那样就真的是「人人都是产品经理」了。虽不需上知天文，下知地理。但有些领域的知识还是最好知道点，比如心理学、设计、统计学、编程、商业等等，在做决策时心里能更有底一些，沟通时也会更流畅。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-ju-ni-yu-bu-gai-jiu-jie-de-xi-jie&quot;&gt;不拘泥于不该纠结的细节&lt;&#x2F;h3&gt;
&lt;p&gt;有不少人会觉得「扣细节」是一个优秀的品质，大部分情况下如此，但有时候也应该适度避免陷入这个误区。比如 Google 设计团队不能决定两种蓝色可以选哪一种，而必须要用 41 种辅助颜色来证明哪个蓝色表现更好。或者把一个边界调整 3~4 个像素，也被要求用数据来证明这种调整的必要性。这些都属于「不该扣的细节」，比这更重要，更有意思的事情还有很多。&lt;&#x2F;p&gt;
&lt;p&gt;以上是做了一段时间产品经理总结的一些小经验，与君共勉。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>生活的乐趣</title>
            <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/enjoy-life/</link>
            <guid>https://limboy.me/posts/enjoy-life/</guid>
            <description>&lt;p&gt;对生活的乐趣，每个人都有自己不同的理解。有些人觉得隔三差五能吃上好吃的就很满足了；有些人觉得年薪能上 40 万就好了；有些人觉得有钱之后能去各个国家逛一逛会是很幸福的事。&lt;&#x2F;p&gt;
&lt;p&gt;这很好，不管这个目标能不能实现，至少还有希望。但是很多情况下这些目标并不会给生活带来多大的快乐，相反还因为无法在短时间内达成，而产生落差，渐渐地被生活的琐事包围，也就自然淡忘了。&lt;&#x2F;p&gt;
&lt;p&gt;生活有自己的轨道，如果你不知道往哪儿走，就会被生活推着前进。而生活替你选择的这条路，往往不是你最想走的路。于是各种各样的矛盾就开始出现，你总觉得这不是自己想要的生活，但自己想要的生活是什么却并不清楚，或者太过遥远。于是抱怨、嫉妒等等负面情绪就开始出现了。&lt;&#x2F;p&gt;
&lt;p&gt;无论是喜是悲，自己的生活只能由自己负责。路边的皮球，路人爱踢上两脚。但没有人会对行驶中的汽车下脚。&lt;&#x2F;p&gt;
&lt;p&gt;有一句话叫「找到你所爱」，相信都听过。那一瞬间可能有种被击中的感觉，过了几天，该干啥还是干啥。事实上，我觉得这句话还有一定的副作用。在进入某个领域后，如果要继续深入下去，就会遇到更多更难以应付的问题，这时兴趣已经完全失去了作用，我们需要一个支撑下去的信念。如果没有这么一个信念，是很容易中途放弃的。理由也很简单：我在这个领域没有天赋，或者天赋不够，这不是我所爱的，要不去其他的领域试试？或者，我的能力也只能到这了，很难再深入下去了。在舒适区待的时间一长，生活就会开始变腻。&lt;&#x2F;p&gt;
&lt;p&gt;那如何才能让生活变得更加美好呢？我想从游戏的角度来看待这个问题。一些好的游戏能让我们玩上好几天甚至好几个月，其中必定有些东西抓住了我们，或者说很好的利用了我们作为人的特性。小时候经常听大人说，如果你能把玩游戏的心思放一半到学习上就好了。为什么那时候我们不爱学习？因为学习太枯燥了，老师也不会因为我们学会了某个公式或某个字而表扬我们。而游戏不一样，如果在游戏中，通过自己的努力解决了一些问题，马上就会有奖励，可能是一句话、或者金币、或者加命、或者可以进入下一关等等。我们享受这个过程。游戏的形式多种多样，小的如「扫雷」，大的如「魔兽世界」，其本质都是「解决问题」。那为什么我们享受解决游戏中的问题，而对生活中的问题却没有那么大的热情呢？&lt;&#x2F;p&gt;
&lt;p&gt;生活中的问题，往往是隐式的，不仔细观察，甚至都意识不到它的存在。等到意识到时，也有的选择。除非是那种特别重要和紧急的，需要我们无论如何都得解决。其他无足轻重的，不去解决也不会有什么问题。人的本性是懒的，如果一件事情，做也可以不做也可以，那何必让自己操那份心，受那份罪呢？&lt;&#x2F;p&gt;
&lt;p&gt;那如果真的把生活当作游戏呢？没有可解决的问题？仔细找，肯定会有不少，先从自己比较有信心搞定的入手，慢慢地积累这种自信和能力。比如想让自己养成经常看书的习惯，不要一开始就拿出又厚又难啃的专业书，先从轻松一点的小说入手，克服对书的恐惧感。然后再找薄一点的，比较容易理解的专业书。再慢慢地从深度和广度去扩展。千万不要操之过急。好比在过了第 1 关后，直接就跳到第 10 关。把它当成一生的习惯，就不会嫌这个过程太长了。&lt;&#x2F;p&gt;
&lt;p&gt;所以「享受解决问题的乐趣」可能比「找到你所爱」对生活更有帮助。女朋友生气了，会很自然地想办法让她高兴起来，因为意识到这是个问题，必须要解决。那有没有意识到自己的专业能力不够是个问题？人缘不好也是个问题？可以用 50 行代码搞定的，写了 100 行也是个问题？如果找到了一个自己经常遇到但又被忽略的问题，把它解决了，其实也就解决了一群人的问题。如果这群人的基数够大的话，把心思都放在这个问题上，创业就自然形成了。&lt;&#x2F;p&gt;
&lt;p&gt;黑客有一句名言：这个世界充满了迷人的问题。好比进入某个房间里，看到沙发上有一张 5 块钱的纸币，你走过去，拿到了，很开心。然后大概看了一圈，没有了， 就不知道该干什么了。但其实很多的钱藏在柜子后、地板下、缝隙里，如果不仔细找，就不会发现这些宝藏。这个房间就好比某个领域，隐藏的钱，就好比没有被发现，或者没有被很好解决的问题。最好的情况是这个房间够大，藏的钱够多，且进来的人不多。这样的房间毕竟不多，更常见的是房间很大，人也很多，只要能做得比这些人好，就能挣到更多的钱。如果这个房间人不多，但钱也不多，但竞争压力小，只要用心找，把隐藏的钱都搜刮出来也足够让你的生活变得非常美好。&lt;&#x2F;p&gt;
&lt;p&gt;不要让「我的天赋不在这」，成为平庸的借口。想想你有没有什么游戏玩得特别好，是如何做到的？是不断解决问题带来的乐趣和信心，将我们带领到了更远的前方。那些天赋好点的，一次过，不那么好的，多玩几次也就过了。&lt;&#x2F;p&gt;
&lt;p&gt;观察、勤思、探索，这些都能帮助你更好地发现问题、解决问题。费曼说过：一切事情都可以很有意思。这跟佛语所说的：一花一世界、一沙一天堂有异曲同工之妙。背出 32 种月季的名称没有任何意义，去探索为什么会有这么多种月季、是什么原因导致了它会长成这样不是更有意思吗？这种刨根问底的精神对于解决其他问题也是很有帮助的。&lt;&#x2F;p&gt;
&lt;p&gt;要解决的问题并不局限于自己所处的领域，生活中的各种问题也在此列。如果你有很强的解决问题的能力，就会被更多的人需要，而人的本性里很重要的一条是：渴望具有重要性。很好的匹配上了。&lt;&#x2F;p&gt;
&lt;p&gt;老天不会给你你处理不了的问题。所以如果真的享受问题，享受解决问题，那还有什么可操心的呢？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>职业规划是不靠谱的</title>
            <pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/career-planning/</link>
            <guid>https://limboy.me/posts/career-planning/</guid>
            <description>&lt;p&gt;经常会在各种场合听到人们问起：你的职业规划是什么？有些人很快就能给出答案，有些人临时想了一个，有些人则坦然没有想好。&lt;&#x2F;p&gt;
&lt;p&gt;职业规划到底是个什么东西？以程序员来说，架构师、技术总监、CTO 等等看起来很风光的 Title 都会是不错的候选，让自己看起来很有抱负的样子。&lt;&#x2F;p&gt;
&lt;p&gt;可这一点用都没有！甚至还有负作用！假如每天怀揣着成为架构师的目标去工作去学习，我敢保证，不出一个礼拜就会被这个目标拖垮，因为这实在是没有什么激励作用，是扎扎实实的负反馈。感觉今天学到了不少东西，可是一看架构师要懂那么多，那么深，就会觉得自己的这些收获好渺小。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会说，这是大目标，会拆分成很多的小目标。这个理论没有错，但实现上会有不少问题。因为这是一个探索的过程，就好像一个从来没出过远门的南方人，在没有地图的情况下要走到北方的某个城市去。只是知道大概的方向，这种情况下如何设置小目标呢？即使有了地图，能不能把小目标设置地合理也是很大地挑战。这也是为什么有专门的「关卡设计师」这个职位。如果小目标设置得不合理，要么产生挫败感，要么觉得没挑战，这两种情绪对于长远地目标来说都是很不利的。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要的是「浸入式」的体验，这个词对于游戏设计师是很重要的。为什么有些游戏我们能玩上上百关，还乐此不疲？不是因为在最开始的时候，告诉自己「我一定要玩到 100 关！」，而是渐进的难度设置让你在每一关完成后都有成就感。在玩第 19 关时，你断然不会想「真好，离 100 关又进了 1 步」。&lt;&#x2F;p&gt;
&lt;p&gt;游戏和生活很多地方是相通的。为什么有些人从事了某项职业 10 年还不如别人 3 年成就更高，道理也一样。因为在玩到某一关后，他停止了向难度更大的下一关迈进，反复玩着同一关，自然不会有进步。所以用「工龄」去判断一个人的能力是很容易失误的。&lt;&#x2F;p&gt;
&lt;p&gt;我们希望自己变得强大，这没有问题。希望自己变得像 XXX 一样，这也没有问题，有希望总是好的嘛。但如果把 XXX（高级 Title）作为自己的职业目标，就有些问题了。你不一定知道怎样才能成为 XXX，也就是说没有一条明确的道路，即使有，也未必适合你，即使你已做好了充分的准备，也难保在行进的过程中不受其他事物的诱惑，或者发现自己并不喜欢这条路。很可能你只是看到了 XXX 光鲜的一面，然后天真地以为自己只要努力也一定能做到，直到被现实虐得体无完肤。&lt;&#x2F;p&gt;
&lt;p&gt;每一行都不容易，这是很简单就可以推导出来的，假设确实有那么几个行业很容易，也很挣钱，除非正好被你赶上了，不然人一多，门槛自然也就上去了。&lt;&#x2F;p&gt;
&lt;p&gt;费曼老师说过：每一件事情都可以很有意思。认清自己的现状，发现自己的不足，享受解决问题的乐趣，在不断的正反馈下慢慢地去拓宽自己的知识圈，增强解决问题的能力。如果有了这种元能力，在每一行都能做得很好，很快乐。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;career-planning&amp;#x2F;light.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;career-planning&amp;#x2F;light.jpg 320w,&amp;#x2F;posts&amp;#x2F;career-planning&amp;#x2F;light.jpg 320w&quot;
    sizes=&quot;(max-width: 320px) 100vw, 320px&quot; width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>你的袜子还干着吗？</title>
            <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/sock/</link>
            <guid>https://limboy.me/posts/sock/</guid>
            <description>&lt;p&gt;「袜子」这东西，细细想来，跟「梦想」还真有几分相像。你不能时不时地就跟人谈起你的梦想，就像你不会经常撂起裤腿，让人看一下你的袜子一样。但又不能不穿袜子，我们也不能没有梦想。&lt;&#x2F;p&gt;
&lt;p&gt;以前我一直不太明白，那些工作得并不开心的人，为什么不辞职呢？后来想想，大概有这么几个原因： 1) 人有很强的适应性。再好吃的巧克力，天天吃，早晚会腻。同理，第一次吃苦瓜，可能会受不了，吃多了也就那么回事，跟吃黄瓜似的。2）没有更好的机会。可能是猎头提供的职位不够吸引人，或者投了几份简历后没有下文，又因为自己的工作也挺习惯的，也就没有太大的动力去寻觅新的目标，或者为下一份工作做好充足的准备。3）生活上的压力。养车、养房、养家、养孩子，所有这些都需要钱，需要源源不断的现金流。除非已经储备了足够的资金，容许自己歇一歇。&lt;&#x2F;p&gt;
&lt;p&gt;我们免不了在河边走，鞋也已沾上水珠，但是你的袜子还干着吗？我们每天所做的事，跟内心那个小小的梦想有关吗？有一部电视剧叫「中国式离婚」，或许也应该有个名词叫「中国式创业」：瞄准国外那些有苗头的新兴网站&#x2F;app，用最快的速度复制一个出来，然后拉投资，做推广。就像关在动物园里的猩猩一样，管理员扔过来几个香蕉，判断最好最快的，体能也不错的猩猩先抢到，剩余的就在那哀声叹气，等着下次管理员的到来。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会说，国情如此，你又何必大惊小怪。我奇怪的是为什么这么不好意思放到台面上的事情，会有那么多人内心毫无愧疚地争先恐后地投入其中。这其中我相信「榜样」的力量是很重要的。你看那「XXX」不就是直接拷贝国外的那个「XXX」嘛，现在多火，活得多好。这样的例子多了，内心的那道槛也就很自然地跨过去了，你的袜子也就湿了。&lt;&#x2F;p&gt;
&lt;p&gt;如果以这样的方式「创业」成功，就会带着其中的快感和经验，向下一个目标迈进，而绝不会来一个华丽转身说：我有钱了，我要去实现我当初的梦想。因为既然选择了「中国式创业」，基本上说明对金钱有强烈的欲望，而有了钱之后，又会勾出心中更大的欲望。这个时候也就不会关心袜子到底湿没湿，换一双更贵的鞋才是首先要考虑的。&lt;&#x2F;p&gt;
&lt;p&gt;有些人一直想年轻时拼命工作，多挣点钱，然后 35 岁退休，带着家人环游世界，在某个漂亮的城市定居。这是一个美好的愿望，但是基本上此路不通。一旦适应了高强度的生活节奏和呼风唤雨的那种优越感，一下子转变到在自家后院天天晒晒太阳、听听音乐，这种落差是难以调和的。就像一辆法拉利，它享受在路上的那种风驰电掣，让它在车库里慢慢地老化，自己都会觉得残忍。&lt;&#x2F;p&gt;
&lt;p&gt;坚持心中的梦想，即使放在国外也是很难能可贵，在国内更加有种行为艺术的感觉。湿地越来越多，当你看到别人淡定地穿着皮鞋走在水滩上时，为了不弄湿袜子，跳个奇怪的舞步又何妨，如果能带把扫帚把积水扫了就更好了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我已经不在知乎了</title>
            <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/im-not-at-zhihu/</link>
            <guid>https://limboy.me/posts/im-not-at-zhihu/</guid>
            <description>&lt;p&gt;忽然间来了心绪，加上&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;gxxx&quot; target=&quot;_blank&quot;&gt;@gxxx&lt;&#x2F;a&gt;同学在推上日复一日的邀文，和抱着对广大关心我的同学们负责的心情，我觉得有必要阐述一个事实：我已经不在知乎了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-gu&quot;&gt;回顾&lt;&#x2F;h3&gt;
&lt;p&gt;在 7 月的某一天下午，李申申同学邀请我到知乎参观下，我纯净地答应了。大概参观了下工场和知乎，跟申申聊了会，然后申申说：来知乎吧。这让我有点措手不及，前面说过了，我是抱着很纯净的心态过去的，而且凤凰网那边还有 RSU 和年中技术部 A+员工奖金在那牵制着。但是看到了知乎的环境、氛围还有一堆优秀的人才，我觉得这是一个很好的学习机会，稍微做了会思想斗争后，就妥协了。&lt;&#x2F;p&gt;
&lt;p&gt;知乎有很浓厚的苹果底蕴：第一个问题的编号为 19550225; MBP&#x2F;MBA 人手一台，唯一一台 windows 是财务在使用; iPhone 的普及率很高。这跟知乎的 apple4us 血统有很大关系。知乎其实还推崇海盗文化，这个我个人的感触倒不是很深。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很重视员工的快乐指数，努力营造家庭文化：桌球(god, i love it, though i suck)、免费的午餐、充足的零食和水果、DSP 人体工程学椅子等等。这一切都体现了一个字：诚意。我真的关心你们，关心你们的生活。作为员工自然也能领会这种诚意，那么还有什么好犹豫的，努力干活吧。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很乐意尝试并使用新兴技术：使用 Git 进行版本控制，Github 来管理代码，Basecamp 管理项目，python 作为开发语言，等等。其实这些都不是什么新东西，也都是经过了时间的验证，但很多公司由于技术主管自身的限制，和员工的技术能力，最终都选择了走最安稳的道路。&lt;&#x2F;p&gt;
&lt;p&gt;知乎很重视工程师的质量，宁缺勿滥。也会给予他们很大的自由，比如可以随意选择上班时间，甚至不来公司都可以（由于工程师任务量的加大，现在的自由度也有所减少）；可以访问大部分的代码。每周会有一次技术分享活动，总是会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;关于加班。在知乎上班的感觉不那么强烈，不像很多公司，9 点之前要刷卡，不然算迟到，然后终于等到 6 点，刷卡下班挤地铁。因为在知乎不需要刷卡，上班和下班点都由你自己来控制。但很重要的一点是，不要让其他人因为你而拖延了进度。任务比较紧急时，连续熬个一两个通宵也正常（现在我还挺怀念那种感觉的）。&lt;&#x2F;p&gt;
&lt;p&gt;知乎几乎没有等级制度，如 A 管 B，B 负责 C 等等。如果要实现一个新特性，比如图片上传，会有几个工程师和一个产品设计来负责这块，想出一个解决方案后，再和申申细细地碰一下，申申经常会提到一些比较容易遗漏或出错的地方。方案有了，大家就可以分头行动了，所以知乎也没有架构师这么一个职位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-kai&quot;&gt;离开&lt;&#x2F;h3&gt;
&lt;p&gt;回过头来再说说我为什么离开知乎吧。原因大概有这么几个：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-jing-zao-gao-de-tian-qi&quot;&gt;北京糟糕的天气&lt;&#x2F;h4&gt;
&lt;p&gt;是的，天气是一个很大的原因。记得有一阵每天晚上坐车回家，都得吐出好些分泌物。为了自己和 MM 的健康着想，打算换一个既适宜居住，又有点互联网氛围的城市，于是就选择了杭州。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-ji-de-chuang-ye-xiang-mu&quot;&gt;自己的创业项目&lt;&#x2F;h4&gt;
&lt;p&gt;嗯，当时比较迷摄影，于是很想做一个网站来提高下国内的摄影网站品位。也是在暗地里筹划了好久，最后决定应该认真地去尝试下。但是由于对现状分析地不够透彻，和过高地估计了自己的能力，此项目在推出不久后便搁浅，也正因如此，才有了后来的「Once Touch」&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xiang-she-xi-ios-kai-fa&quot;&gt;想涉猎 iOS 开发&lt;&#x2F;h4&gt;
&lt;p&gt;因为对苹果的喜爱，加上 app store 广大的用户群和方便的付费系统，加上相信苹果会持续改进产品，于是就动了这个念头。如果留在知乎，会推迟学习 iOS 的脚步。&lt;&#x2F;p&gt;
&lt;p&gt;基于上述 3 点，我决定离开知乎，离开那群可爱的人们。可能要让&lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;gxxx&quot; target=&quot;_blank&quot;&gt;@gxxx&lt;&#x2F;a&gt;君失望了，不过这些就是我离开知乎的原因。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huai-nian&quot;&gt;怀念&lt;&#x2F;h3&gt;
&lt;p&gt;虽已时隔 4 个多月，回想起在知乎那段时光，依旧心有戚戚焉。&lt;&#x2F;p&gt;
&lt;p&gt;感谢带给我们那么多欢乐的桌球&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_football.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_football.jpg 300w,&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_football.jpg 300w&quot;
    sizes=&quot;(max-width: 300px) 100vw, 300px&quot; width=&quot;300&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;感谢曾经共同奋战的队友&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_team.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_team.jpg 300w,&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_team.jpg 300w&quot;
    sizes=&quot;(max-width: 300px) 100vw, 300px&quot; width=&quot;300&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;感谢知乎&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_pai.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_pai.jpg 300w,&amp;#x2F;posts&amp;#x2F;im-not-at-zhihu&amp;#x2F;zhihu_pai.jpg 300w&quot;
    sizes=&quot;(max-width: 300px) 100vw, 300px&quot; width=&quot;300&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>程序员，你还酷吗？</title>
            <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/hey-programmers-are-you-cool/</link>
            <guid>https://limboy.me/posts/hey-programmers-are-you-cool/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;当别人问起你的职业，是否会有一丝卑微感，是不是更希望自己的头衔是经理、总监、主管之类的？&lt;&#x2F;p&gt;
&lt;p&gt;面对琳琅满目且不断调整的需求，是否会以完成需求为目的，而不顾程序本身的优雅？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得程序员就是吃青春饭的，迟早得转型到管理，不如趁早转，积累点经验？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得自己做的事情很重要，但做成后被褒奖的却不是你，或者只是顺带一提？&lt;&#x2F;p&gt;
&lt;p&gt;看到满屏的英文文档，或遇到搞不定的 Bug 时，开始怀疑人生？&lt;&#x2F;p&gt;
&lt;p&gt;与女孩子接触的机会太少，真希望调到 XX 组？&lt;&#x2F;p&gt;
&lt;p&gt;是否觉得与其他人交流起来会有点困难？&lt;&#x2F;p&gt;
&lt;p&gt;是否讨厌办公室政治，又不得不在其中涡旋？&lt;&#x2F;p&gt;
&lt;p&gt;面对不断更新的技术，是否有种无力感？&lt;&#x2F;p&gt;
&lt;p&gt;是否也希望某天能做出一个 NB 的应用，改变世界？&lt;&#x2F;p&gt;
&lt;p&gt;是否会有扁项目经理的冲动？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果你对上面提到的这些深有同感，那么作为一个程序员，你可能真的不够酷。程序(app)能够以其独有的方式改善人们的生活，而程序员是触发这一切的根本。他们坐在电脑前，噼里啪啦敲一些外人根本看不懂的符号，熟练地使用快捷键，变魔术般的做好了一个网站&#x2F;应用，然后你打开电脑&#x2F;手机就能看到并使用他们，这难道还不够酷吗？&lt;&#x2F;p&gt;
&lt;p&gt;要让人们对某一行业的态度发生转变，最好的方式就是从事该行业的人自己去证明。如果越来越多的程序员创造出了能够改善人们生活方方面面的应用，而且程序员不是简单地去实现，而是以主导者的身份出现，那时候人们对程序员的认识一定会比现在好不少。这就需要程序员不光要会写程序，还要具备创业家的心态，这并没有想像中的那么难，连那么复杂的程序都能搞定，还有什么是自己搞不定的？&lt;&#x2F;p&gt;
&lt;p&gt;在使用一个应用时，如果界面很漂亮，我们会感叹：设计师真 NB；如果体验很好，我们会感叹：产品经理真 NB；如果程序出了点 Bug，我们会抱怨：程序员弱爆了。一个应用正常运行，是程序员应该做的；如果出了问题，自觉修 Bug 去吧。一个应用，如果真有用户对程序本身赞叹不绝，很可能是 UI&#x2F;UE 很不咋地，但程序运行地还挺符合预期。&lt;&#x2F;p&gt;
&lt;p&gt;程序员要得到外界的认可是比较难的，虽然他们在做着很重要的事情。但如果我们真的享受编程带来的乐趣，坚信程序可以让人们的生活变得更加方便和美好，又何必在意外人的看法呢？在属于自己的世界里，静静地绽放，就像深海的水母一样。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;hey-programmers-are-you-cool&amp;#x2F;jellyfish.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;hey-programmers-are-you-cool&amp;#x2F;jellyfish.jpg 298.5w,&amp;#x2F;posts&amp;#x2F;hey-programmers-are-you-cool&amp;#x2F;jellyfish.jpg 298.5w&quot;
    sizes=&quot;(max-width: 298.5px) 100vw, 298.5px&quot; width=&quot;298.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后，千万别惹程序员，因为他们会顺手拿起封面是犀牛的 O&#x27;Reilly 书砸你。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>这些年我的不足</title>
            <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-shortages/</link>
            <guid>https://limboy.me/posts/my-shortages/</guid>
            <description>&lt;p&gt;如果把人生比作跑步的话，我们都在用自己的节奏和姿势在完成比赛。这些跑步的技巧可能是小时候从老师，朋友，家人那得来的。随着时间的流逝，我们习惯了这种跑步的技能，看见那些跑得快的，会羡慕；跑得慢的，会不屑；跑得别扭的，会当作笑料。但是自己跑得怎么样，却很少关心。为什么要跑这条道？为什么这么慢？为什么这么累？&lt;&#x2F;p&gt;
&lt;p&gt;我们很难做到客观，尤其是面对自己的时候，那些缺点、曾经犯的错会自动进入盲区，躲避意识的雷达。尽管如此，我还是找到了数量可观的不足，才发现，原来这么些年，我一直在以这么别扭、丑陋的姿势在跑步。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-gou-zhuan-zhu&quot;&gt;不够专注&lt;&#x2F;h3&gt;
&lt;p&gt;乔希·维茨金在《学习的艺术》里曾这么描述他当时的专注程度：『我太过于专注，以至于她觉得如果把手放在我眼前的话都会燃烧起来。』&lt;&#x2F;p&gt;
&lt;p&gt;如果足够专注的话，就会进入一种『流状态』，忘了时间，忘了身边的世界，只有自己当前所做的事。遗憾的是，我进入这种状态的机会不多，也没有有意识地去培养。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-shan-yu-tui-chi-man-zu-gan&quot;&gt;不善于推迟满足感&lt;&#x2F;h3&gt;
&lt;p&gt;假设有两个任务，一个比较简单、有趣，另一个比较困难，但如果完成的话对自己的提升会比前一个任务高。这时你会选择先做哪一个？如果那个困难的任务并不强迫你必须完成，还会去做吗？&lt;&#x2F;p&gt;
&lt;p&gt;推迟满足感可以让我们享受解决问题带来的乐趣，更重要的是锻炼了自律能力。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-shan-yu-zhi-ding-ji-hua&quot;&gt;不善于制定计划&lt;&#x2F;h3&gt;
&lt;p&gt;做事往往是凭着一股热情，热度过了，事情也基本到尾声了，而事实上，没有人的热情可以持续很长一段时间。&lt;&#x2F;p&gt;
&lt;p&gt;把一个大目标，切分成多个合适的小目标，这是我不擅长的。如果是从 A 到 D，那 D 就是我的目标，而不会加入 B,C 这两个里程碑，结果就是把自己弄的很累，作品也不够精致。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-shao-da-ju-guan&quot;&gt;缺少大局观&lt;&#x2F;h3&gt;
&lt;p&gt;我很在乎界面和用户体验，那些我看着或用着不舒服的，一概不去碰，比如新浪微博。在凤凰网的时候，我对旅行有点兴趣，但当时那些旅行方面的网站让我没有一点参与欲望，于是就花了三个月自己做了一个旅行社区，当时真没想好该怎么去运营这个网站，网站做完了，接下来该怎么办，就束手无策了。如果能够克制一下自己的偏执，能够细致地去了解这个行业，这些时间还能花在更有意义的事情上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-shao-dong-xi-shi-wu-ben-zhi-de-neng-li&quot;&gt;缺少洞悉事物本质的能力&lt;&#x2F;h3&gt;
&lt;p&gt;这个能力不是天生就有的，需要后期不断地磨练。大前研一之前是核能博士，最后却在麦肯锡搞出了一番名堂。他总是能在很短的时间内就帮企业找到问题的原因，这得归功于他从小锻炼的逻辑思维能力和平日对每一个细小的事物都当作案例去对待的心态。&lt;&#x2F;p&gt;
&lt;p&gt;不找出真正的原因，就别期望能够解决问题。所以最重要的是思考“在各种现象之间，如何找出真正的原因”，绝不能在列举了各种现象之后就停止了思考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;que-fa-xiang-xiang-li&quot;&gt;缺乏想象力&lt;&#x2F;h3&gt;
&lt;p&gt;爱因斯坦说过『想象力比知识重要』。由于从小反应就比较迟钝，加上缺少敏锐的观察力，当然还有老师们的辛勤扼杀，想象力已经生锈。&lt;&#x2F;p&gt;
&lt;p&gt;想象力是各种创造的源泉，想象力的缺失必然也导致创造力的低下，而如果不能去创造一些又酷又有创意的东西，那生活就太乏味了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-qi-xin-bu-gou&quot;&gt;好奇心不够&lt;&#x2F;h3&gt;
&lt;p&gt;大前研一在《思考的技术》里说：『一定要保持好奇心，因为好奇心可以转化为思考的养分』。好奇心可以促使我们思考，让我们始终保持学习的动力和乐趣，让我们更深刻地去理解周围的事物。&lt;&#x2F;p&gt;
&lt;p&gt;好奇心不够的人，更容易被『专家』蛊惑，他们喜欢『海绵式学习』而不是『淘金式学习』。The world is trying to keep you stupid，擦亮眼睛，在接纳一个观点前，先质疑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ke-yong-de-mo-xing-bu-duo&quot;&gt;可用的模型不多&lt;&#x2F;h3&gt;
&lt;p&gt;每一个行业都有它的特殊性，同时又具有普遍性。从自己从事的行业中提取出可用于其他行业的模型是一个不小的考验。比如缓存，可以让用户能更快地获取数据，用在京东这样的 B2C 商城上，缓存可以是在多个地区设立货仓(其实更像 cdn)，这样不同地区的顾客可以从离他们最近的货仓出货，加快货物到达时间。&lt;&#x2F;p&gt;
&lt;p&gt;把具体问题抽象化，找到问题的本质，然后套用掌握的一个或多个模型来解决问题。模型越多，了解得越透彻，解决问题的能力也就越强。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yue-du-liang-bu-gou&quot;&gt;阅读量不够&lt;&#x2F;h3&gt;
&lt;p&gt;查理·芒格在《穷查理宝典》里说：『我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的——没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我，觉得我是一本长了两条腿的书』。&lt;&#x2F;p&gt;
&lt;p&gt;阅读能够拓宽我们的视野，吸收他人的精华，指导我们的生活，愉悦我们的心灵。也曾经列了一些必读书目，由于重视程度不够，加上这些书比较厚，读起来颇费力，且没有一定要读的理由，就一拖再拖，结果就不了了之。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mei-neng-ba-yi-jian-shi-qing-zuo-dao-ji-zhi&quot;&gt;没能把一件事情做到极致&lt;&#x2F;h3&gt;
&lt;p&gt;我喜欢做一些有意思或者自认为有价值的项目，如前面所说，很多都是憋足一股劲，凭着热情，直到做到自己还算满意，然后，就没有然后了。&lt;&#x2F;p&gt;
&lt;p&gt;这世界平庸的项目有很多，不要再去凑热闹了，把精力集中在少数几个最有兴趣和意义的项目上，让它们发挥出最大的价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-gou-kai-fang-de-xin-tai&quot;&gt;不够开放的心态&lt;&#x2F;h3&gt;
&lt;p&gt;想到一个解决方案时，不要急着实现，跟过来人探讨一下，看看这个实现有没有问题，有没有更好的方案。我总是怕打扰别人，有了想法就去实现，经常会走了不少弯路。&lt;&#x2F;p&gt;
&lt;p&gt;多去看看外面的世界，接触各行各业的人，分享各自的经历。北京 open party 曾经去过一次，给我的感觉很好，大家分享自己在某一领域的经验，或旅行心得，能学到不少东西。&lt;&#x2F;p&gt;
&lt;p&gt;所谓开放的心态，就是愿意去听听别人的看法，即使自己已经有了想法。自己看到的，想到的很可能不够全面，别人尤其是过来人的想法往往能够弥补这些思维漏洞。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-nian-bu-gou-jian-ding&quot;&gt;信念不够坚定&lt;&#x2F;h3&gt;
&lt;p&gt;坚定的信念是战胜困难的强有力武器。我在遇到一些感觉超出了自己能力范围的问题时，会有退缩心理。搞不定这个问题时，就会犹豫：我一定要从事这个行业吗？我在其他行业会不会更有天赋？这种心态越严重，越不利于问题的解决，到最后搞得自己心神不宁。&lt;&#x2F;p&gt;
&lt;p&gt;结婚前要睁大双眼看清楚，结婚后要睁一只眼闭一只眼。在选择行业时也一样，一定要谨慎，同时结合自己的兴趣和能力。一旦决定了，就不要再给自己留退路。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>小谈摄影</title>
            <pubDate>Sun, 25 Dec 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-photograph/</link>
            <guid>https://limboy.me/posts/about-photograph/</guid>
            <description>&lt;p&gt;这个标题我纠结了好久，因为『谈论』一般是牛人们的用词，本人摄影小菜鸟一枚，不敢随便用，但一时又找不到合适的词，就先借用一下了。&lt;&#x2F;p&gt;
&lt;p&gt;注：以下内容，纯属个人观点，如有同感，深感荣幸 :)&lt;&#x2F;p&gt;
&lt;p&gt;摄影的时间不长，拍照倒是有些年头了，很多人会把拍照和摄影混为一谈，就好像会写代码的都是程序员，会入侵电脑的都是黑客一样。在我看来，摄影最重要的是一颗敏感的心和善于发现的眼睛(器材当然也重要，但重要性不如前者），而拍照只需要一个还过得去的相机就行。拍照的一个很重要作用是留念，如和李开复合影，或者在故宫门前摆个 POSE，或者看到某个美景，忍不住按下了快门。而摄影不一样，摄影要累多了，同样是面对某个美景，一个优秀的摄手会尝试各种拍摄手法、构图、用光、光圈大小、快门时间等等，比如面对瀑布，增加快门时间，可以营造水幕的感觉，缩短快门时间又可以抓住飞溅而起的水花。但如果只是拍照，那么拿相机对着瀑布，咔嚓一下就可以了，算是对自己去过某地的证明。&lt;&#x2F;p&gt;
&lt;p&gt;一个优秀的摄影作品至少要满足『美』和『故事』两者中的一个。美不用说了，故事的意思是，看到一张照片，你会被照片中的主体所吸引，进而去猜测作者拍此照片的意图，甚至去想像作者当时的心情，姿态，等等。照片本身不一定惊艳，但背后的故事却值得细细回味。比如&lt;a href=&quot;http:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;zhou_mengjie&#x2F;6318039145&quot;&gt;这张&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  照片找不到了···
&lt;&#x2F;aside&gt;
&lt;p&gt;第一眼可能觉得并不是很漂亮，但马上会被主体所吸引：dancing in the rain。可以从这张照片中看到一种生活态度：大多数人在雨天的路上，多半是行色匆匆，而照片中的主角却可以享受这场雨，雨仿佛成为了一个道具。如果喜欢的话还可以进一步把雨抽象为各种挫折，然后你会看到一种与困境共舞的心态。此时，作者真正想要表达的是什么已经不重要了，重要的是你从这张照片中看到了什么。&lt;&#x2F;p&gt;
&lt;p&gt;摄影的难度还在于抓住瞬间。当你去参加婚礼，整个场面让你感到很喜庆，但当你认认真真地想找到几个喜庆的镜头时，就会卡住。大家看上去都很 happy，那么是来张全景的，还是抓拍某个特别 happy 的人；婚礼布置的很漂亮，但是从哪个角度去拍效果最好；怎么才能表现出新郎新娘很恩爱，等等。首先脑海中要先有这些意识，然后再从现场找到能够凸显这些特点的画面，这些画面很可能稍纵即逝，或者你没有注意到，或者拍摄角度不对，等等。所以你需要不断调整，不断发现，不断按下快门。这么做的结果就是你无法融入到整个婚礼的过程，只是纯粹以一个摄影师的身份在记录。引用豆友&lt;a href=&quot;http:&#x2F;&#x2F;www.douban.com&#x2F;people&#x2F;shinewewe&#x2F;&quot;&gt;想念的树&lt;&#x2F;a&gt;的一段话：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我越来越意识到，好多时候我并不愿意拿出相机来截断那些美妙的时刻。&lt;br &#x2F;&gt;
我不是说拍下来那就不美妙了，只是你必须意识到并且接受那种变化，一旦发生，即产生了一个时间节点。&lt;br &#x2F;&gt;
气氛，记忆发生或多或少的改变。&lt;br &#x2F;&gt;
于是我更愿意就那样放弃拍摄的想法，让那些瞬间在记忆中延续下去，流动成诗篇。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;再来说说器材。经常会看到对是否应该配备高端器材的争论，主要争论点是：硬件上去了，那么出来的照片主要是你的功劳还是相机的功劳？你是否沦为了高端器材的奴隶？DigitalRev 曾经做过一个实验，让一个专业的摄影师使用低端的卡片机，然后让一个基本不会摄影的人使用高端相机，结果卡片机的效果并不差，而高端相机的效果也没有好到哪去。所以一张好照片肯定是人与相机完美合作的结果。最悲惨的一个场景是，一个高端相机被一个不懂摄影的人当作炫耀的资本，那个相机一定很郁闷，空有一身好武艺，奈何主人无色心。但我还是不太喜欢一味地追求高配（因为我很穷 XDD），这会让你偏离摄影的主旨(除非是工作原因)，少了那颗发现的心，照片即使看上去很漂亮，也经不起细细品味。&lt;&#x2F;p&gt;
&lt;p&gt;摄影很难，也很累，但很有乐趣，也很有意义。送上我很喜欢的一首小诗（&lt;a href=&quot;http:&#x2F;&#x2F;www.douban.com&#x2F;group&#x2F;topic&#x2F;3764247&#x2F;&quot;&gt;青铮：迦陵频伽——我们所追寻的&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我伸手想要握住光，&lt;br &#x2F;&gt;
光却消失掉；&lt;br &#x2F;&gt;
我用镜头对准风，&lt;br &#x2F;&gt;
风不知去了哪里。&lt;br &#x2F;&gt;
然而我从不曾气馁，&lt;br &#x2F;&gt;
也从来不曾放弃希望；&lt;br &#x2F;&gt;
我总是背着我的相机，&lt;br &#x2F;&gt;
走过每一天，走遍这个城市。&lt;&#x2F;p&gt;
&lt;p&gt;我曾经寻找一个女孩子的身影，&lt;br &#x2F;&gt;
不肯相信我不能找到，&lt;br &#x2F;&gt;
因为我寻找的不是她的身份或名字，&lt;br &#x2F;&gt;
也不是发生在她生命中的我所不知道的故事。&lt;br &#x2F;&gt;
我寻找的是她留在我画面上的东西，&lt;br &#x2F;&gt;
还有我的画面不曾清晰表达的东西；&lt;br &#x2F;&gt;
光一样会消失，却又永远在那里的东西，&lt;br &#x2F;&gt;
风一样不可捉摸，但总是会回来的东西。&lt;&#x2F;p&gt;
&lt;p&gt;你别问我那是什么，&lt;br &#x2F;&gt;
我将不知如何回答。&lt;br &#x2F;&gt;
正如我不知为何我要背着相机，&lt;br &#x2F;&gt;
走遍这个城市，走遍这个世界，&lt;br &#x2F;&gt;
年复一年，直到我生命的最后一天，&lt;br &#x2F;&gt;
直到我还能为一个画面感动不已。&lt;&#x2F;p&gt;
&lt;p&gt;是的，我不知道为什么，&lt;br &#x2F;&gt;
一如这个世界上的每一种追寻，&lt;br &#x2F;&gt;
我只能说，它使我的人生完整，&lt;br &#x2F;&gt;
它使我的生命具有意义。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最后小小的宣传下自己的小站：&lt;a href=&quot;http:&#x2F;&#x2F;wuditoo.com&quot;&gt;无敌兔&lt;&#x2F;a&gt;，如果你有不错的照片，不妨去分享下:)&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  网站也找不到了···
&lt;&#x2F;aside&gt;</description>
        </item>
        
        
        <item>
            <title>一次失败的上线</title>
            <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learned-from-an-unsuccessful-project/</link>
            <guid>https://limboy.me/posts/learned-from-an-unsuccessful-project/</guid>
            <description>&lt;p&gt;由于上一次通知的上线引来用户的一些不满，所以产品马不停蹄，在一轮又一轮的需求讨论中设计了下一版通知，希望尽快上线，我负责通知的后端实现，当时看到图后，有点小小的崩溃：时间太紧，难度很大，很多地方不属于通知。但是既然定下来了，就只能咬咬牙，拼一拼了。&lt;&#x2F;p&gt;
&lt;p&gt;于是接下来的 9 天，变成了一段难忘的回忆，基本上都是 3 点以后回家，第二天赶上免费的午餐后，继续 coding。最后一天还剩了些 bug，索性就不回家了，就这样勉强完成了新版的通知，但随后又被推翻，当时确实很愤怒，但细细想想确实有不少地方还不够到位，尤其是新通知的架构，作为责任人之一，以下是我的一些感悟和反思。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mei-you-bu-ke-neng&quot;&gt;没有不可能&lt;&#x2F;h3&gt;
&lt;p&gt;阿迪同学让这句话在全世界流行，但越是常见的东西，越容易熟视无睹。我们相信没有不可能，因为有太多的案例可以证明这句话，但要身体的每一个细胞都坚信这句话就很难了。只有在自己做了一些让后来的自己都不得不佩服的事情时，才会把这句话刻在心里。这样的事对我来说还太少了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-dui-you-hen-guan-jian&quot;&gt;好的队友很关键&lt;&#x2F;h3&gt;
&lt;p&gt;产品同学(ecvip)会把每个设计和交互讲解地很清楚，会陪着我们熬到很晚。前端同学(Dang &amp;amp; 骁哥)总是能高效地完成页面，思路很清晰，我总是觉得自己在拖他们的后腿。后端同学也就是我，估计是这个木桶最短的那块。还有就是 CTO 申申同学并没有过于责备这次的失败，而是要请我们撮一顿，那个感动啊。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xu-qiu-shi-hui-bian-hua-de&quot;&gt;需求是会变化的&lt;&#x2F;h3&gt;
&lt;p&gt;我这次就是栽倒这上了，为了满足当前的需求而设计了对应的架构，导致后来需求发生变化时很难应对。在设计时就应该考虑到将来的可变性，尽量灵活。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-xiang-bie-ren-qing-jiao&quot;&gt;多向别人请教&lt;&#x2F;h3&gt;
&lt;p&gt;由于时间比较紧，加上自己理解上的偏差，在设计后端架构时没有与其他同学进行沟通，就直接进行代码实现。写着写着就觉得有点奇怪，但已经这样了，就只能继续按着现在的架构走。等到后来杨昆同学 review 代码时才发现：我靠，怎么成了这样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-ji-zi-ji-de-ji-neng&quot;&gt;升级自己的技能&lt;&#x2F;h3&gt;
&lt;p&gt;海贼王里，每一次战斗，大家的技能都会有提升，越是大的战斗，敌人越强劲，技能升级地越高。在现实中，应该是在大的战役前做好充足的技能储备，打完战役后，总结哪些地方还需要继续提升和完善，接下来再有目的地去改进，避免在下次的战役中出现同样的问题。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine1.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine1.jpg 350w,&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine1.jpg 350w&quot;
    sizes=&quot;(max-width: 350px) 100vw, 350px&quot; width=&quot;350&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine2.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine2.jpg 350w,&amp;#x2F;posts&amp;#x2F;learned-from-an-unsuccessful-project&amp;#x2F;little-miss-sunshine2.jpg 350w&quot;
    sizes=&quot;(max-width: 350px) 100vw, 350px&quot; width=&quot;350&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>知乎的困境</title>
            <pubDate>Tue, 19 Jul 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/zhihu/</link>
            <guid>https://limboy.me/posts/zhihu/</guid>
            <description>&lt;p&gt;个人观点，欢迎指正:)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-hu-yao-jie-jue-yi-ge-shi-yao-wen-ti&quot;&gt;知乎要解决一个什么问题？&lt;&#x2F;h3&gt;
&lt;p&gt;如果我遇到以下问题：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;为什么有的照片拍出来建筑物是倾斜的？&lt;&#x2F;li&gt;
&lt;li&gt;陈奕迅的『爱情转移』到底想要表达什么？&lt;&#x2F;li&gt;
&lt;li&gt;iphone4 升级到 ios5 beta3 后，可不可以降到 4.3.3？&lt;&#x2F;li&gt;
&lt;li&gt;如何训练台球的基本功？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;第一反应是到知乎提问，且能在较短时间内得到满意的答复，那么知乎就成了。其实从产品上是完全可以应付的，最难的是用户为什么要来这里提问？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果我有 iphone4，第一反应肯定是去 weiphone。&lt;&#x2F;li&gt;
&lt;li&gt;如果我想更了解电影，豆瓣或 mtime 都是不错的选择。&lt;&#x2F;li&gt;
&lt;li&gt;如果我想精通摄影，会选择蜂鸟或无忌。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;什么时候会想到去知乎？&lt;&#x2F;p&gt;
&lt;p&gt;知乎就好比是宾馆，如果要讨论某个领域的问题，先到前台领门牌号，然后到一个房间讨论。而垂直社区直接就是一个房间，打开门后就可以看到一大堆人在那讨论。&lt;&#x2F;p&gt;
&lt;p&gt;用一段程序来表述大致如下&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dang-qian-zhuang-tai&quot;&gt;当前状态&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;蜂鸟&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;无忌&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;mtime&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;douban&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;咖啡厅&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# when will you think of zhihu
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;li-xiang-zhuang-tai&quot;&gt;理想状态&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;whatever &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;	goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;知乎&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;answers found:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;摄影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;蜂鸟&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;无忌&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;电影&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;mtime&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;douban&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;创业&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;			goto: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;咖啡厅&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要让用户产生这种观念上的改变，那时的知乎在某个领域(如摄影)一定已经积累的相当的人气和问答。以摄影为例，摄影的初始问答从何而来？我觉得只可能是知乎重度用户打算学摄影，或者在学习过程中遇到问题，然后抱着试试看的心情发了个问题。为什么是知乎重度用户？因为如果只是偶尔过来逛逛的用户，在他眼里，这只是一个有点意思的网站，并没有太深的感情，就算遇到了摄影方面的问题，一看相关问题很少，直接就放弃了发问题的念头，因为对他来说浏览是一种习惯，而我们的行为都受习惯的支配。这也好解释为什么知乎重度用户明知可能得不到比较理想的答案，也可能会发问题，因为他习惯了参与，习惯了回答或提问。&lt;&#x2F;p&gt;
&lt;p&gt;所以知乎如果要向各个领域扩展，至少要具备这几个条件：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;足够数量的重度用户&lt;&#x2F;li&gt;
&lt;li&gt;重度用户的爱好最好广泛些&lt;&#x2F;li&gt;
&lt;li&gt;各个领域都有些活跃的达人&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;第三个条件很难。假如一个摄影相关的问题被提出后没有很快地得到好的答案，会很打击用户的积极性，下次如果再有类似问题，可能会选择其他的专业论坛。这时就需要该领域的达人出现了，这里又有一些问题：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;达人一般都很忙，很难抽出时间静下心来回答问题&lt;&#x2F;li&gt;
&lt;li&gt;有那么几天，达人关注的领域都没有什么新问题或有意思的问题，以后索性就不来了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;达人很少制造问题，所以把某些领域的达人作为种子用户，问答的氛围也很难建立。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-rong-wei-wang-zhu-bu-kai-fang&quot;&gt;内容为王，逐步开放&lt;&#x2F;h3&gt;
&lt;p&gt;国内不乏人气很旺的大站，但普遍有一种很水的感觉，简单说来就是，社交氛围多于思维碰撞。这往往是站长们追求 pv&#x2F;用户数&#x2F;发贴数的结果。这也是知乎的吸引力所在，在知乎能感觉到一种宁静，如果让我给知乎写一个 slogan 的话，应该会是：正经提问和回答的地方。如果不是这样，那就没理由来知乎了，水区多的是。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-wei-chi-gao-zhi-liang-de-hui-da&quot;&gt;如何维持高质量的回答&lt;&#x2F;h3&gt;
&lt;p&gt;业界达人不是回答的主力军，因为已经有足够的影响力了，也很少有时间来回答。但他们的回答能带来极好的效果。所以氛围的维系主要落在准达人身上，他们愿意回答是因为帮助别人是一种很自然的事，同时也可以向其他人展示自己的阅历、知识和才华。但是这些准达人是很挑剔的，如果问题的质量明显下降了，或者另一层次的用户大量入驻，或者感觉整个氛围不对，很可能就 say goodbye 了，所以如何让这些准达人持续贡献高质量的回答也是个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-ju-xian-yu-wen-da&quot;&gt;不局限于问答&lt;&#x2F;h3&gt;
&lt;p&gt;单纯的问答很难持久，用户很难养成每天习惯性地上来看看这种行为。要让用户泡起来，还需要具备&amp;quot;信息&amp;quot;输出。我们习惯上 hacker news，因为那里总是能发现很酷的东西，或者行业新闻；上 weifeng 也是因为大量的信息和资源。所以 Quora 支持&amp;quot;Write Post&amp;quot;，支持 blog feed import。&lt;&#x2F;p&gt;
&lt;p&gt;前面的路很难，但创业从来都是要披荆斩棘的，带着一颗不安份的心，奋斗吧&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>time to leave</title>
            <pubDate>Tue, 12 Jul 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/time-to-leave/</link>
            <guid>https://limboy.me/posts/time-to-leave/</guid>
            <description>&lt;p&gt;五个月前，去豆瓣面试，结果由于自己的薪资要求偏高，与豆瓣失之交臂。&lt;&#x2F;p&gt;
&lt;p&gt;两个月前，杭州一家我挺中意的公司对我抛出了橄榄枝，由于公司股票的原因，我放弃了那次机会。&lt;&#x2F;p&gt;
&lt;p&gt;这次又是类似的一幕：北京一家我挺喜欢的公司对我有兴趣，但由于中期考核拿到了 AA(最高等级，研发部一共两个人)，所以如果现在提出离职的话，奖金就没戏了。除非等到月底拿完钱，然后再提出离职。于是又开始小小的纠结了。&lt;&#x2F;p&gt;
&lt;p&gt;几番思量，加上总结之前的教训，提出了辞职，不想再因为钱而耽误了这次机会。而且如果等着这笔钱，人格上实在是不怎么光辉，也是对自己能力的不自信。还有一个原因是: 新公司那边的座位紧张，不想站着 coding。XD&lt;&#x2F;p&gt;
&lt;p&gt;其实，如果不去新公司，也想歇歇了。调整一下心情，明确一下目标，问问自己究竟想要什么。跟新东家接触后发现，非常接近我之前说的理想中的公司，于是我心动了。&lt;&#x2F;p&gt;
&lt;p&gt;在那里上下班不用刷卡，有免费的午餐，发 mbp，用 git 管理源码，不在 windows 下写程序，工程师主导。最重要的是我认可那里的人，以及他们正在做的事。忽然有种找到组织的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;知乎，我来了&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>纪念L君</title>
            <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/disillusion/</link>
            <guid>https://limboy.me/posts/disillusion/</guid>
            <description>&lt;p&gt;套用《纪念刘和珍君》的一段话：&lt;&#x2F;p&gt;
&lt;p&gt;bq. 我也早觉得有写一点东西的必要了，这虽然于离者毫不相干，但在职者，却大抵只能如此而已&lt;&#x2F;p&gt;
&lt;p&gt;一个我抬头就能看到他开着四个小窗口进行调试的人，一个当初把我带到公司的人，一个前两天还在地铁跟我说他开发的 nginx 模块已经基本可用的人，一个可以让我们安心搞研发的人，一个刚搬到新办公地点就因为有地方可以放那么多技术书籍而高兴的人，一个因为带着书度蜜月而被 MM 抱怨的人，忽然就这么离开了。&lt;&#x2F;p&gt;
&lt;p&gt;如果把公司比作在前线战斗的军队，L 的职责是为前线的战士提供好用，高效的作战武器，从手枪到导弹，还有自己的一部分军队。但是忽然某一天指挥官说：L，你可以走了。就像死神宣布某个人的生命结束那样直接，残酷。&lt;&#x2F;p&gt;
&lt;p&gt;L 离开的原因有很多的版本：研发成果没有被项目使用；搞小团体；底下的部门投诉太多；权利太大，上层被架空等等。但是无论哪种或几种理由都至少可以坐下来谈谈吧。三四天的时间，几乎没有什么交接，就让技术部的三位核心走人，简单粗暴。即使理在你那一边，这种做法实在是我不敢苟同的。为公司效力了三年多的技术部管理层，在没有犯明显错误的情况下，居然是像瘟神一样被&amp;quot;请出&amp;quot;公司，作为一个普通员工，我实在不能没有想法。&lt;&#x2F;p&gt;
&lt;p&gt;我不知道上层是怎么想的，貌似他们觉得也没有必要让我们知道他们是怎么想的，真正的原因是什么。在这种信息不对称的情况下，我只能通过平时的接触，有限的信息来得出自己的判断。L 是一个比较典型的技术牛人，由于职责所在，也会负责管理。但是 L 以这种方式离开，加上公司重心的转移，以及与上层的交谈，我只能得出这么个结论：业务为主，技术为辅，业务搞好，则赢；反之则输。技术，技术人才的储备，技术团队的磨合都不重要，至少优先级比较低。我的脑海中忽然想起去年年终会时，一位高层说：明年我们的目标是打造业界第一的 PHP 团队。有那么一瞬间我几乎信了，因为他说得那么真诚。&lt;&#x2F;p&gt;
&lt;p&gt;L 的离去还有一个影响就是带走了部分技术氛围。对于技术人员来说，这种技术氛围是很珍贵的。平时即使不常跟 L 沟通，但只要看到人在那，心里就多少会觉得踏实。&lt;&#x2F;p&gt;
&lt;p&gt;L 走好，不知道何时还能再见到你那天真无邪的小眼睛 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做完猜电影的一点感想</title>
            <pubDate>Mon, 30 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/iguess-feeling/</link>
            <guid>https://limboy.me/posts/iguess-feeling/</guid>
            <description>&lt;p&gt;如果你认真，持续地去做了一件事，几乎不可能没有收获。&lt;a href=&quot;http:&#x2F;&#x2F;iguess.me&quot;&gt;猜电影&lt;&#x2F;a&gt;这个业余项目也断断续续进行了将近 20 天，从 GAE 到 VPS，从 python 到 PHP，反正就是各种折腾，现在成品基本上出来了，当然还有很多需要完善和改进的，&lt;a href=&quot;http:&#x2F;&#x2F;iguess.me&quot;&gt;欢迎访问&lt;&#x2F;a&gt; :)。以下是一些我的小感想&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ni-neng-zai-ling-chen-4-dian-ban-qi-lai-ma&quot;&gt;你能在凌晨 4 点半起来吗？&lt;&#x2F;h3&gt;
&lt;p&gt;早起其实不难，如果你对这一天充满了期待，或者急不可耐地想要去做一件事。做这个项目的时候，经常会有一些有意思的想法，然后就恨不得马上去实现，但是太晚了，而且工作了一天后，晚上的效率也不高。于是只能放到凌晨，我清楚地记得那天给自己定了 4 点半的闹钟，结果 3 点醒来后，就再也睡不着了，于是从 3 点一直开发到早上 7 点多，再睡一个小回笼觉到 8 点多，就屁颠屁颠地上班去了。上班时的感觉也很好，因为一块大石头已经放到杯子里，有底了。&lt;&#x2F;p&gt;
&lt;p&gt;记得当年从时光网辞职后，在家帮朋友开发一个手机社区，也有过一阵类似的感觉，当然那时自由多了，想几点起就几点起，起床后可以痛快地做自己的项目，现在还真有点怀念。&lt;&#x2F;p&gt;
&lt;p&gt;37signals 的招聘中写到：认同一个伟大的工作并驱动自己，这非常重要。不知道大家对自己的工作还有没有激情，有没有憧憬，有没有感觉到挑战，如果没有或者比较少，又是如何释放自己的激情，为什么不到一个更广阔的空间？&lt;&#x2F;p&gt;
&lt;p&gt;国内有梦想的公司不少，或者说，每个公司都应该有自己的梦想吧，或大或小，或远或近而已。但你真的能够认同吗？你发自肺腑地希望公司能够蒸蒸日上吗？在公司最困难的时候，你愿意留下来吗？答案很可能是否定的。公司不是我们的归宿，她只是与我们进行着一笔交易，她出钱，我们出时间和技能。最危险的是我们会渐渐地习惯这个交易，以为人生本应如此，梦想这玩意不现实。呵呵，有点扯远了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;biao-mian-kan-qi-lai-jian-dan-de-shi-zuo-qi-lai-zhen-bu-jian-dan&quot;&gt;表面看起来简单的事，做起来真不简单&lt;&#x2F;h3&gt;
&lt;p&gt;这也是我喜欢苹果的一个原因，她可以让一个操作尽量简单，易懂，一用就会，但是易用的背后往往包含着很复杂的处理过程。这才是用户至上。写猜电影的时候，我常常会想: 这个功能应该怎样在页面上体现，应该怎样交互用户才不会迷茫，是否有必要加一个提交按钮，loading 效果怎样做才看着比较舒服等等。当然，如果只是想实现这个功能就没必要费这个周折了。&lt;&#x2F;p&gt;
&lt;p&gt;前期只需要完成最核心的功能，让用户可以无障碍地使用，功能尽量少，但每个功能都要做到看着舒服，用着流畅。功能越少，用户越不容易迷茫，后期再推出新功能时，也更加能接受。好比税收一样，一下子扣去一年的税和分月扣，虽然结果是一样的，但哪个更能接受？&lt;&#x2F;p&gt;
&lt;p&gt;要有追求完美的心态。就拿那个投票来说吧，看上去很简单的上下箭头加上中间的数字，其实要考虑的因素有不少：是否已登入？是否之前投过票？投过票的话是否要高亮显示？是否是自己发的帖子？如何防止多次投票？等等。要做到完美并不容易。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-de-zhong-gou&quot;&gt;记得重构&lt;&#x2F;h3&gt;
&lt;p&gt;一开始为了能尽快出第一个版本，往往对代码的质量就不那么讲究，这很正常，说正确也无妨。敏捷嘛，就是要讲究快速发布版本，但庞大的函数，一段又一段又一段的 if else 判断，臃肿的类，无意义的数字、变量，重复的代码等等，这些虽然成功地帮助你实现了最基本的功能，但如果放任不管，将来开发新功能，或修改 bug 时就够你受的了，这也严重影响了下一版本的发布。&lt;&#x2F;p&gt;
&lt;p&gt;如果代码量已经挺大了，且可重构部分还不少，那就有点不妙了，不过好在自己写的代码最熟悉，多费点时间还是可以重构地差不多的。不过更好的方法是持续重构，也就是隔三差五地让自己的代码变得更优雅。软件开发就是与熵的战斗，如果不用心，熵就会很大，结果嘛，你懂的:)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-yao-gei-zi-ji-tie-biao-qian&quot;&gt;不要给自己贴标签&lt;&#x2F;h3&gt;
&lt;p&gt;我是个 PHP 程序员，不会设计，不会 js，不会前端交互，无法独立完成一个网站。
我是个编辑，要我使用 SQL 语句，天哪，杀了我吧(我从朋友的口中得知，他们公司有如此 BT 的编辑存在)。
我是个产品经理，我不需要动那些具体的技术细节，我只要把我的想法表达清楚就好了。&lt;&#x2F;p&gt;
&lt;p&gt;老罗当年招了好几茬设计都没有一个合适的，到最后不也是自己上嘛，那可是老罗啊，一个相声表演艺术家，自学设计，貌似效果还不错。&lt;&#x2F;p&gt;
&lt;p&gt;爱给自己贴标签的人，往往在他自己的领域也难有太大的建树，因为如果你是一个 PHP 程序员，你可以拒绝学习 linux，mysql，nginx，设计模式，等等，也可以拒绝了解 PHP 内部的运行机制，因为你可以告诉自己：我是一个普通的 php 程序员，不需要了解这些。其实说白了，还是对自己学习能力的不自信，没有刨根问底的精神，没有探索未知领域的意愿。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-de-shao-wei-chang-yuan-yi-dian&quot;&gt;想得稍微长远一点&lt;&#x2F;h3&gt;
&lt;p&gt;比如，花了很长的时间，终于把你的作品熬出来了，然后呢？怎么让目标用户知道并且喜欢上你的作品？哎，我是个天真的程序员，总是幻想着，我把一个 idea 实现了，慢慢地就会有人来用，然后慢慢地他们会口口相传。我的目标不是有多少用户数，我只在乎我的这个应用能为多少人带来便利，能为多少人解决问题。虽然如此，看着自己消耗了那么多的 ATP，做出来的东西没人用，难免会有点伤感。&lt;&#x2F;p&gt;
&lt;p&gt;所以除非只是想练练手，不然最好想一下如何去推广，除非你在该领域有足够的影响力或资源。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;鉴于我懒得推广，又想做点能够影响一批人的东东，所以我打算以后多花点时间在正事上，把基本功练好，加入一个靠谱的团队。十个巴掌怎么也比一个巴掌拍得响。&lt;&#x2F;p&gt;
&lt;p&gt;有不少人担心程序员是吃青春饭的，过了 30，就会力不从心，到时要么做管理要么转行。有了这个想法后，就更不可能用心地去写程序，去思考。恶性循环就这么产生了。我倒愿意相信，各行各业之间是相通的。计算机系统是如此地神奇，算法是如此地考验脑力，linux 是如此地优雅。如果真的把程序搞得很明白透彻了，其间你所收获的知识，经验一定可以运用到(至少是部分)其他领域，这也是达芬奇老人家能够精通多门领域的一个原因吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>have you lost yourself?</title>
            <pubDate>Mon, 23 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/have-you-lost-your-self/</link>
            <guid>https://limboy.me/posts/have-you-lost-your-self/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;期待周五，讨厌周一吗？&lt;&#x2F;li&gt;
&lt;li&gt;期待发薪水的那天吗？&lt;&#x2F;li&gt;
&lt;li&gt;下班后急着回家吗？&lt;&#x2F;li&gt;
&lt;li&gt;上班时盼望领导今天不在吗？&lt;&#x2F;li&gt;
&lt;li&gt;有花一半以上的时间在工作或工作相关的事情上吗？&lt;&#x2F;li&gt;
&lt;li&gt;是否不太情愿地打开工作相关的文件？&lt;&#x2F;li&gt;
&lt;li&gt;有没有分析过自己的优势和劣势，及如何提高和弥补？&lt;&#x2F;li&gt;
&lt;li&gt;回到家后还会从事工作相关的事情吗？&lt;&#x2F;li&gt;
&lt;li&gt;第二天醒来不知道今天要干什么？&lt;&#x2F;li&gt;
&lt;li&gt;不知道这周&#x2F;月都做了什么？&lt;&#x2F;li&gt;
&lt;li&gt;盼望有一天能通过彩票&#x2F;抽奖改变自己的命运？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;有一份稳定的工作，领着满意的薪水，跟同事相处融洽，也有和睦的家庭。看上去一切都是那么美好，但这真是自己想要的吗？还是只是想让别人看上去很好？从小我们就生活在别人的眼里，但凡有一点出格的表现，就会马上被家人纠正，被朋友取笑。渐渐地，我们妥协了，放弃了追求自己想成为的那个人。&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;一个人如果遵照他的内心去活着，他要么成为一个疯子，要么成为一个传奇&amp;quot;。如果在别人眼里，你是一个正常的人，很可能，你已经有那么点不正常了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>漫谈互联网产品开发</title>
            <pubDate>Sun, 08 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-product-develop/</link>
            <guid>https://limboy.me/posts/web-product-develop/</guid>
            <description>&lt;p&gt;每个公司都有自己的产品开发规范，我自己也大概想了下，比较适合小团队。&lt;&#x2F;p&gt;
&lt;p&gt;借鉴 Unix 的设计哲学：一个工具只做好一件事，并提供接口。放到产品开发就是：产品可以被划分成多个模块，每个模块都有相应的 API。这样就能做到分工明确和解耦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;san-ceng-jia-gou&quot;&gt;三层架构&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;biao-xian-ceng&quot;&gt;表现层&lt;&#x2F;h4&gt;
&lt;p&gt;web &#x2F; mobile &#x2F; app ...&lt;&#x2F;p&gt;
&lt;h4 id=&quot;api-ceng&quot;&gt;API 层&lt;&#x2F;h4&gt;
&lt;p&gt;user &#x2F; article &#x2F; comment &#x2F; ...&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-chu-fu-wu-ceng&quot;&gt;基础服务层&lt;&#x2F;h4&gt;
&lt;p&gt;db &#x2F; queue &#x2F; memcache &#x2F; ...&lt;&#x2F;p&gt;
&lt;p&gt;如果使用 GAE 的话，就不用花心思去构建基础服务层了。这样就只剩下表现层和 API 层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-gong&quot;&gt;分工&lt;&#x2F;h3&gt;
&lt;p&gt;每个人都要负责产品的一部分，有两种构建方式：水平构建和垂直构建&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chui-zhi-gou-jian&quot;&gt;垂直构建&lt;&#x2F;h4&gt;
&lt;p&gt;假如我负责用户系统，则所有与用户相关的事情都由我来完成，从前端到后端，包括 API，页面展示，互动等等。这样做的话，对开发人员的要求比较高，需要同时对前后台都比较熟悉。但能减少沟通成本，提高开发效率。假如用户系统出现了一个 bug，我就能很快地修复，因为我最熟悉，且所有与用户相关的都由我负责。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shui-ping-gou-jian&quot;&gt;水平构建&lt;&#x2F;h4&gt;
&lt;p&gt;这也是大部分公司采用的方法，把开发人员分为前端&#x2F;后端等等。前端的任务就是负责页面的展示和交互，后端开发人员负责 API 的构建，可能还会有专门的 DBA。这样做的好处是可以发挥每个人的特长。但也有不少问题，比如用户系统出现了一个 bug，前端相信自己的程序没有问题，就会把问题推给后端，后端查看了一遍也觉得没问题，可能又会把问题推回去。这样一来二去，不仅浪费时间，影响效率，还会破坏团队的氛围。&lt;&#x2F;p&gt;
&lt;p&gt;假如又有了一项新任务，是开发一个评论系统，前端可能 1 天就把页面做完了，然后就干别的事去了，结果后端花了 4 天才把 API 搞定。然后前端又要从别的地方把心收回来，阅读 API 文档，再整合，又耽搁了不少时间。这就有点不够敏捷了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-mu-guan-li&quot;&gt;项目管理&lt;&#x2F;h3&gt;
&lt;p&gt;我推荐使用 Basecamp+Campfire+github。Basecamp 用来管理项目；Campfire 是团队讨论的地方(已与 Basecamp 集成)，可以开设多个版块；github 用来管理源码。&lt;&#x2F;p&gt;
&lt;p&gt;一个高效的开发者最不能接受的就是被打断，我好不容易进入了状态，结果被迫去跟你讨论一个不太重要的问题，这简直是谋杀，所以开发项目时最好把 IM 关掉，或者设置成离开状态。&lt;&#x2F;p&gt;
&lt;p&gt;dropbox 可以作为辅助工具，用来在团队内部共享资料。&lt;&#x2F;p&gt;
&lt;p&gt;github 的开发流程，可以参考&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;translate&#x2F;2010&#x2F;10&#x2F;30&#x2F;a-successful-git-branch.html&quot;&gt;此文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;frontController 要尽可能的薄，通常只需负责渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;techportal.ibuildings.com&#x2F;2010&#x2F;02&#x2F;22&#x2F;scaling-web-applications-with-hmvc&#x2F;&quot;&gt;hmvc&lt;&#x2F;a&gt;将各个页面模块组合成一个页面&lt;&#x2F;li&gt;
&lt;li&gt;可以使用内部 REST 的方式来合并多个 REST 请求&lt;&#x2F;li&gt;
&lt;li&gt;API 层可以模拟 http 的 403 状态码来减少数据传输&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;暂时就想到这些了，实际情况肯定要复杂地多。有哪些地方可以改进，或者根本就不现实，欢迎指出 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于选择</title>
            <pubDate>Sun, 10 Apr 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-choice/</link>
            <guid>https://limboy.me/posts/about-choice/</guid>
            <description>&lt;p&gt;选择少的时候，痛苦，因为这说明你还不够强大。选择多的时候也痛苦，因为你要仔细考量每一个选择带来的成本。所以我们苦恼，我们总是想找到一个最好的选择，为了这个最好的选择，我们可以在候选者之间徘徊很长时间，但每每一想到这些选择，都会重复着上一次的过程，只是依然没有结果。&lt;&#x2F;p&gt;
&lt;p&gt;想起了一个故事，大意是一只驴很渴，这时它遇到了两桶水，但最后它还是渴死了，因为它不知道到底该先喝哪桶水。&lt;&#x2F;p&gt;
&lt;p&gt;选择确实重要，但没那么重要，你的人生不可能因为一次选择而彻底改变。做选择时最重要的是知道自己想要的是什么，再做决定就容易了，如果还是很纠结，那就随便选一个。也可以扔一枚硬币，两个面分别对应两个选择，但不是看它最后显示的是哪个面，而是在抛起的过程中，你最希望它是哪个面。follow your heart&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;about-choice&amp;#x2F;choice-coin.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;about-choice&amp;#x2F;choice-coin.jpg 195.5w,&amp;#x2F;posts&amp;#x2F;about-choice&amp;#x2F;choice-coin.jpg 195.5w&quot;
    sizes=&quot;(max-width: 195.5px) 100vw, 195.5px&quot; width=&quot;195.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;小时候，我们不怕做选择，因为没什么太大的后果，顶多就是被老师训一顿，被父母打打屁股，说两句。但随着年龄的增长，肩上的担子越来越重，压力也越来越大。你可能跟自己斗争了很久，做了个决定，但女友不同意，家里人反对，朋友劝说。有了孩子&#x2F;房子&#x2F;车子之后更麻烦。牵绊的事越多，越不利于做决定，于是我们妥协了，对生活说：生活你赢了，再见理想。&lt;&#x2F;p&gt;
&lt;p&gt;可是我们的人生只有一次啊。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我理想中的公司</title>
            <pubDate>Thu, 07 Apr 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-ideal-company/</link>
            <guid>https://limboy.me/posts/my-ideal-company/</guid>
            <description>&lt;p&gt;我特别喜欢那种少而精的团队，大家齐心协力为了共同的目标而努力。人一多，心就容易散，这也增加了管理成本和沟通成本，而这两个因素往往是造成低效的重要原因。而且员工的质量很难得到控制，你不知道他们是来混日子的，还是冲着舒适来的，或是其他的目的，这就很难做到公平，除非每个入职员工都严格把关。不过这里也有个悖论，如果员工们个个都是精英，在公司规模不是很大的情况下，不会需要更多的外援；如果老是发现任务完成不了，或者效率低下，想通过扩招来弥补这些问题，那说明现在的员工很可能不够优秀。&lt;&#x2F;p&gt;
&lt;p&gt;人一多，互相熟悉也会是问题。我的理念是，我要么跟你很熟，或愿意跟你很熟，要么一点不熟。如果路上看到一个同事，知道他叫什么名字，做什么的，然后点个头示意一下，这是多么冷淡的一种表现啊，我不喜欢这样。&lt;&#x2F;p&gt;
&lt;p&gt;优秀的人才设计出来的产品，写出来的代码，是 10 个平庸的人加一起也无法超越的。但如团队中老是有那么一个或几个很嗝应的 B 类员工在掺和，而且上级对此些人还比较信任，这时事情就会向不好的方向开始发展了。因为 A 类人是很难或者无法与 B 类人共处的: 理念不一样，学习能力不一样，目标不一样。所以如果对新员工的质量降低了要求，必然会对 A 类员工带来不小的影响，所以要少招人，招对人。&lt;&#x2F;p&gt;
&lt;p&gt;公司是员工的家，员工是公司的家人。虽然很多公司挂出了类似的口号，但也只是口号，这甚至比没有这个口号更糟：这个公司只会说说而已。公司首先要对员工表现出家的感觉：环境舒适，水果自便，iMac，福利，不用刷卡，等等。最重要一点，把员工当人看，这是很基本的一点，但很多公司就是做不到，他们把员工当成资源，不去或者很少考虑他们的需求，他们的反馈，他们的任务量。&lt;&#x2F;p&gt;
&lt;p&gt;想想是谁决定了公司的未来，是员工啊。他们是人，他们需要被尊重，被认可，被关爱，而这些又能促使员工进一步去提升自己，去为公司创造更多的价值。这才是良性循环。领导们问都不问员工的意见，一拍板就把事情给定了，然后让他们什么时间之前完成，这不是扯淡嘛。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个技术人员，当然希望到一个技术主导的公司。这样的公司国内有，且数量也还不算太少。但有自己理念的，有家的感觉的，技术主导的公司，就太少了。豆瓣算一个，除此之外还真想不出第二个。如果真找不到合适的，就只能自己创建一个了。&lt;&#x2F;p&gt;
&lt;p&gt;我比较喜欢 yy, 这个场景在我的脑海里出现了好多次了：在大城市的周边，租一个大别墅，员工们如果租的房子离得比较远，或者交通不太方便，可以在那住着。选择大城市是因为大城市的人才相对较多，选择郊区是因为清静，空气好，风景好，房租便宜。别墅的前面是一片草坪，搞点什么活动都可以。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;the-whole-team.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;the-whole-team.jpg 222.5w,&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;the-whole-team.jpg 222.5w&quot;
    sizes=&quot;(max-width: 222.5px) 100vw, 222.5px&quot; width=&quot;222.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;公司内部的氛围一定要轻松，环境要舒适，工作区就算达不到每个人单独一间房间，至少空间要足够大，尽量少的干扰。可以配一块白板，但最好在一个独立的房间，以免打扰到其他人。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;team.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;team.jpg 400w,&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;team.jpg 400w&quot;
    sizes=&quot;(max-width: 400px) 100vw, 400px&quot; width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要有休闲区，如电影放映厅、游戏室、乒乓球、K 歌厅等等，总之，就是要让员工感觉到公司为了员工的生活做了很多努力。那如果员工花很多的时间在休闲上怎么办？没有问题，只要你高质量地完成了自己的任务。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;game-room.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;game-room.jpg 320w,&amp;#x2F;posts&amp;#x2F;my-ideal-company&amp;#x2F;game-room.jpg 320w&quot;
    sizes=&quot;(max-width: 320px) 100vw, 320px&quot; width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;员工把生命中的一部分时间给了公司，公司当然要给予相应的回报。对于那些对公司做出很多贡献的更应该奖励，这些人不光是公司觉得他们付出了很多，员工也会觉得他们获此待遇是应该的，并会以他们为榜样。这样就建立起了良性循环。&lt;&#x2F;p&gt;
&lt;p&gt;有点幼稚，有点过于理想，随着时间的流逝，阅历的增长，肯定会有部分变化，真希望在不远的将来多看到那样的公司，那里是理想主义者的天堂。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>简单说说StackOverflow和Quora</title>
            <pubDate>Wed, 30 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/so-quora/</link>
            <guid>https://limboy.me/posts/so-quora/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;robbin.javaeye.com&#x2F;blog&#x2F;978077&quot;&gt;robbin&lt;&#x2F;a&gt;说: SO 和 Quora 成功的基因是用户身份的真实性和唯一性。不敢苟同，StackOverflow 使用 OpenId 主要是从用户体验上考虑，而 Quora 则完全可以不绑定 Social Account&lt;&#x2F;p&gt;
&lt;p&gt;在 StackOverflow 出来前，编程类的问答网站也是有的，比如&lt;a href=&quot;http:&#x2F;&#x2F;www.experts-exchange.com&#x2F;&quot;&gt;experts-exchange&lt;&#x2F;a&gt;，论坛如&lt;a
href=&quot;http:&#x2F;&#x2F;www.codingforums.com&#x2F;&quot;&gt;codingforums&lt;&#x2F;a&gt;。而且用户活跃度也不低，但也明显存在几个问题，而 StackOverflow&#x2F;Quora 看到了这些问题，并给出了自己的解决方案。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhong-fu-wen-ti&quot;&gt;重复问题&lt;&#x2F;h3&gt;
&lt;p&gt;假设用户发了一个求助贴，然后下面有 10 条回复，而正好是第 10 条回复解决了发贴者的问题，于是 problem solved，但只是相对该发贴者，如果另一个用户也碰到了类似问题，首先他不知道这个问题是否已经被解决，所以嫌麻烦，在发贴前没有搜索，又发了一个类似的问题。对于这个现象，也有不同的看法，如多回答几遍问题，你的技能也会在一次次的重复中得到巩固和提升，所以重复问题是可以接受的。但也有一部分人的观点是尽量不要问重复的问题，从编程角度来说不够 DRY，而且一个问题不应该被解决多次，同时还浪费了别人的时间。&lt;&#x2F;p&gt;
&lt;p&gt;对于持第二种观点的人，他们往往建议发贴前先搜索，但用户是懒的，而且发贴求助已经成了下意识的行为，所以效果并不理想，而 StackOverflow 的做法是，在你输入完标题后，自动提示可能类似的问题，这样就把搜索的过程融入到了发贴中，如果正好看见有人发过类似的，直接点击链接即可。Quora 也类似，Add Question 前，自动搜索问题，重复问题的现象由此得到了部分缓解。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zui-jia-da-an&quot;&gt;最佳答案&lt;&#x2F;h3&gt;
&lt;p&gt;再来说说最佳答案，以前的编程论坛或网站都不太重视这块，所以没有投票机制，这对于搜索过来的，希望尽快找到该问题答案的用户是不太友好的，可能前 9 个回复都不是最佳答案，或者有一个看似最佳答案，但确是错的，不过这么做倒是能让用户把回答都看完了，然后自己去判断应该参考哪个答案。这对于用户来说太累了，所以 StackOverflow 和 Quora 都有投票机制，默认的都是票数最多的放在最前面，用户一下就能找到最佳答案，而且这样做也能鼓励用户做高质量的回复。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-da-zhi-liang&quot;&gt;回答质量&lt;&#x2F;h3&gt;
&lt;p&gt;说到回答质量，就必须牵扯到网站的用户群。之前的编程问答论坛，往往对回答质量不够重视，而对 PV，注册用户数，发贴量等数据比较关心，也就是人气一定要旺。而 StackOverflow 是由业界两位大牛 Jeff 和 Joel 创建，而且内测也是在其博客订阅者内展开，根据吸引力法则，这些订阅用户中肯定不乏编程达人。所以网站的第一批用户就是这些相对靠谱的程序员。网站开发者努力打造简洁，易用，为用户提供便捷的网站。用户感受到开发者的良苦用心，用自己的文字维护高质量的回答。&lt;&#x2F;p&gt;
&lt;p&gt;Quora 也类似，开发者是前 Facebook CTO，你能明显感觉到网站为高质量内容所做的努力：发表问题前自动搜索；还要进行一系列的测试题，让你知道怎样的问题和答案才是受欢迎的，最后还是简洁的设计和用户体验让你不忍破坏这良好的氛围。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;其实 SO 和 Quora 的成功，总结起来很简单：时刻知道自己想要做什么，并且让用户感受到。&lt;&#x2F;p&gt;
&lt;p&gt;SO 想做的是好用的社会化编程问答网站，所以你能看到他们为此付出的努力：勋章激励机制，投票机制，文章内容预览功能，不同等级有不同权限(编辑别人的内容，关闭问题等等)，等等。&lt;&#x2F;p&gt;
&lt;p&gt;Quora 要做的是高质量的社会化问答社区，所以他们花了大量的心思在引导用户如何创建受欢迎的问题和答案，以及投票机制。个人觉得比较创新的是&amp;quot;Describe your xxx experience&amp;quot;，这样在不同的领域回答问题时，你的身份都是不一样的。当然还有其他一些独到之处，所有的这些都与 Quora 要做的相吻合，并且用户感受得到。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的2010总结和2011展望</title>
            <pubDate>Mon, 10 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/my-2010-and-2011/</link>
            <guid>https://limboy.me/posts/my-2010-and-2011/</guid>
            <description>&lt;p&gt;本来是不想写的，最主要原因是懒，懒得从脑海中费劲地寻找去年的踪迹，做了不少，但多零碎。也不能算失败的一年，因为并没有给自己订目标。为了避免来年总结时没有数据可参考，我打算认真地使用 Google Calendar 来记录每天的活动。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-shi&quot;&gt;尝试&lt;&#x2F;h3&gt;
&lt;p&gt;09 年时，跟&lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;ryansigma&quot;&gt;ryansigma 同学&lt;&#x2F;a&gt;一起创办了&lt;a href=&quot;http:&#x2F;&#x2F;3gvg.leezhong.com&quot;&gt;3gvg&lt;&#x2F;a&gt;，算是对创业的初步尝试，大概花费了半年左右的时间，产品基本完成，但是发现没有人用(跟早期的 groupon 有点像)，后来也就不了了之了。这次试水，对创业有了进一步的理解：最开始时，一定要从小做起，哪怕是一个博客。重要的是价值的输出，或者真正解决了用户的&lt;strong&gt;某一个&lt;&#x2F;strong&gt;问题。把台子搭的很大，然后 YY 用户在舞台上舞的热火朝天，实在是太一厢情愿了。&lt;&#x2F;p&gt;
&lt;p&gt;不幸的是，悲剧再次发生了。不甘寂寞的我，又开始了第二次试水。这次尝试多少带有点任务感，因为这个点子在我的&amp;quot;someday&amp;quot;清单里，待的太久了，又不忍心把它删了，于是狠一狠心就把它做了。做的过程很快乐，好几次都进入了&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flow_(psychology)&quot;&gt;流状态&lt;&#x2F;a&gt;。经过三个月的努力，终于把&lt;a href=&quot;http:&#x2F;&#x2F;xingzher.com&quot;&gt;行者&lt;&#x2F;a&gt;折腾出来了，期间页面整体改版一次，代码重写一次。项目完成后，感觉整个人都轻松了，期间 ryansigma 问我，打算怎么推广这个网站，我很天真地告诉他，船到桥头自然直。问题是，船还没到桥头，就靠岸了。&lt;&#x2F;p&gt;
&lt;p&gt;这次其实说来也不能算失败，因为初衷就是要做这么一个项目，最后也算高质量完成了，只是结果跟我预期的不一样。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gong-zuo&quot;&gt;工作&lt;&#x2F;h3&gt;
&lt;p&gt;找到了一份挺符合期望的工作，压力不大，牛人不少。进公司时，部门只有我一个人，负责公司内部框架的开发，上头也给了我不少的研发时间和空间。刚开始时确实很努力地想把框架做得完美，但做着做着，有不少的因素，让我对这个项目失去了信心，可能是我不太熟悉大公司的做事方法，于是就抽出部分时间都用来做自己的项目(年终 KPI 考核时，还是发现自己做了很多，我实在是太高效了，哈哈)。有不少时间我都在想，要不要把框架做好，思来想去，还是算了，不如认认真真地提高自己的整体技术水平。所以下半年的时间，我基本都在研究具体的技术。&lt;&#x2F;p&gt;
&lt;p&gt;其实有想过要离开公司，因为安逸的生活，吞噬我的激情，让我看不到未来的方向。我在公司与其他人交流得不多，这跟我交友的原则有关，宁缺勿滥，少而精。要么是生人，要么是熟人。半生不熟，我只能用低劣的社交技巧来应付，这是我不喜欢做的事。有时我会把公司想象成一个咖啡厅，我只是在这里喝咖啡(确实，我每天基本要两杯)，做我的工作，做公司安排我的工作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bo-ke&quot;&gt;博客&lt;&#x2F;h3&gt;
&lt;p&gt;很高兴，把博客坚持了下来。之前的博客要么被荒废了，要么被主动删除了。删除的原因是，我不能接受几个月前自己写的博文，要么风格不对，要么深度不够，要么皮肤不耐看，不够雅致。我希望每次开博都是一个新的开始。为了不让将来的自己荒废现在的博客，我只能尽量把皮肤做得符合自己的审美，文章尽量多花点时间。现在看来效果还不错。2011 年继续好好维护这来之不易的博客。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-chang&quot;&gt;成长&lt;&#x2F;h3&gt;
&lt;p&gt;技术方面成长了不少，但离自己的期望还是有不少的差距。也看到了一点发展的方向，今年要深度尝试一下。&lt;&#x2F;p&gt;
&lt;p&gt;交际方面基本没有什么成长，这也是今年重点要解决的问题&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuang-bei&quot;&gt;装备&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LX3&lt;&#x2F;li&gt;
&lt;li&gt;HTC Hero&lt;&#x2F;li&gt;
&lt;li&gt;ipod touch4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2011-zhan-wang&quot;&gt;2011 展望&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhuang-bei-1&quot;&gt;装备&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Air&lt;&#x2F;li&gt;
&lt;li&gt;ipad2&lt;&#x2F;li&gt;
&lt;li&gt;iphone4&lt;&#x2F;li&gt;
&lt;li&gt;Nikon D90&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;选择了多款苹果的产品，确实是太喜欢苹果的设计了。我对设计的要求是: 如果做不到顶级的设计，那就放弃设计，一切从简，这样至少不会招致反感(比如 facebook)。所以我是忠实的 G 粉。同时我又被苹果那偏执的设计所征服，所以我也是果粉。苹果和 Google 确实省下了我不少的选择时间：如果有一件产品 Google 或苹果有，那就用他们的，除非其他产品确实够优秀(如 dropbox)。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhuan-ye-neng-li&quot;&gt;专业能力&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;python&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原因很简单: 2010 年度编程语言、GAE、语言本身的魅力、容易招到优秀的程序员(&lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;pypar.html&quot;&gt;python paradox&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;nodejs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于 V8 引擎的服务端异步 js 编程，听着就很有诱惑。更高效，更少的学习成本，从 09 年 2 月到现在，一直备受关注，也有越来越多的插件支持。&lt;a href=&quot;http:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;nodejs&lt;&#x2F;a&gt;也希望能&lt;a href=&quot;http:&#x2F;&#x2F;www.itjoblog.co.uk&#x2F;2010&#x2F;12&#x2F;nginx-new-apache-nodejs.html&quot;&gt;成为下一个 PHP&lt;&#x2F;a&gt;，这样的潜力股可不能错过了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;nosql&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;主要选中了 mongodb 和 redis。简单，高效，即使不能替代 MySQL，用来做缓存，队列都不错。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;iOS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个不能再拖了，原因也很简单：我喜欢苹果，能在这么漂亮的平台上运行自己参与制作的 app，同时还能有收入，这是一件多么愉悦的事情啊。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ren-ji-guan-xi&quot;&gt;人际关系&lt;&#x2F;h4&gt;
&lt;p&gt;我相信吸引力法则，周围的人和事都是自己吸引过来的，如果对现实不满，那就改变自己。&lt;&#x2F;p&gt;
&lt;p&gt;这也是我用心维护博客的一个原因，博客能够更加全面的展现自己，让别人了解自己，从而找到臭味相投的人。&lt;&#x2F;p&gt;
&lt;p&gt;之前看到那些浮于世事，心里的水很满的人，我是有点鄙视他们的。但是细细一想，每个人都在成长的路上，既然大家的情况相同，那我又有什么鄙视的资本呢？而且这个有色眼镜一旦带上后，也会忽略了别人的优点，这同样也影响了自己的成长。所以调整好心态，摘掉有色眼镜，发现对方的优点，真诚地关心他人，对于自己感兴趣的人更要主动。这就是 2011 年我的心理成长目标。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chuang-ye&quot;&gt;创业&lt;&#x2F;h4&gt;
&lt;p&gt;年轻时如果不去做一些自己喜欢的够疯狂的事，那就意味着提前进入了老年期。不想等我老时，后悔自己年轻时这也没做，那也没做，在悔恨中告别此生。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shen-du-si-kao&quot;&gt;深度思考&lt;&#x2F;h4&gt;
&lt;p&gt;社会是浮躁的，现实是残酷的，压力是明显的，但这些都不能作为拒绝深度思考的理由。我们最终是要对自己的人生负责，钱固然重要，但我更看重自己的成长。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我对web系统架构的一些思考</title>
            <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-system-architecture/</link>
            <guid>https://limboy.me/posts/web-system-architecture/</guid>
            <description>&lt;p&gt;能力&#x2F;经验有限，不足之处还请指点 :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-zai-jun-heng&quot;&gt;负载均衡&lt;&#x2F;h3&gt;
&lt;p&gt;这里把多台 nginx 反向代理服务器顶在最前面，可以通过 DNS 简单轮循或绑定虚拟 IP 的方法来实现分流。之所以用 nginx 是因为它的稳定、强大、高性能、低开销、以及对高并发的支持。也可以换成 LVS，从效率上来说肯定会比 nginx 高，因为工作在 OSI 的第四层(传输层)，可以修改目标 IP。甚至可以在第二层(数据链路层)修改 MAC 地址(DR 模式，相当于路由器)，让数据包直接到达目标服务器。不过工作在下层虽然效率提高了，但相应的控制能力也少了，比如无法根据 http url 来进行负载均衡，缓存页面执行结果等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-ceng&quot;&gt;应用层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层是 web 服务器，主要任务是从服务层获取需要的数据，然后渲染到模板，返回给前端服务器。可以理解为 Controller-View，没有 Model，因为 Model 被移到了一下层，用来单独提供服务。这么做的原因是方便分布式部署，单元测试，避免单点故障。所以这层是相对较轻松的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-wu-ceng&quot;&gt;服务层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层的任务是提供模块的接口，供上层调用。如相册模块，需要有创建相册&#x2F;显示相册图片&#x2F;删除图片等等功能。至于服务的形式就很灵活了，如 REST&#x2F;RPC&#x2F;SOAP 等等。&lt;&#x2F;p&gt;
&lt;p&gt;这一层的任务就比较艰巨了，要保证接口的稳定性，要处理复杂的逻辑，实现算法，与存储层交互等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cun-chu-ceng&quot;&gt;存储层&lt;&#x2F;h3&gt;
&lt;p&gt;存储层是整个系统的核心，一旦数据丢失，网站就成了空架子了，所以一定要及时备份。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huan-cun-ceng&quot;&gt;缓存层&lt;&#x2F;h4&gt;
&lt;p&gt;在网站流量不大时，缓存是可选层。随着流量的增大，缓存的重要性也越来越突出，甚至可以把内存当硬盘来用，以保证快速响应。如何提高缓存命中率，设置缓存失效时间等等缓存的处理就变得尤为重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-ku-ceng&quot;&gt;数据库层&lt;&#x2F;h4&gt;
&lt;p&gt;这个可以讲的就太多了，多数系统的瓶颈也在这。总体说来会经历主从服务器，垂直分区和水平分区这三个过程。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fen-bu-shi-cun-chu&quot;&gt;分布式存储&lt;&#x2F;h4&gt;
&lt;p&gt;这里会遇到的问题是文件的同步，如何分配给用户最合适的服务器，磁盘 I&#x2F;O 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dui-lie-fu-wu-qi&quot;&gt;队列服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这也是大型网站的标配，处理日志&#x2F;分析用户行为&#x2F;发送邮件等等都会用到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-kong-fu-wu-qi&quot;&gt;监控服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这么多的服务器，我们需要知道各个服务器当前的运行状况，如磁盘 I&#x2F;O，CPU 使用率，内存使用率，负载等等，一旦发现异常可以及时处理。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ri-zhi-fu-wu-qi&quot;&gt;日志服务器&lt;&#x2F;h4&gt;
&lt;p&gt;排查故障就靠它了，比如有骇客入侵，某个页面访问很慢，出现 500 错误，慢查询等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-fen-fu-wu-qi&quot;&gt;备份服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这个重要性不言而喻，比如数据库宕机，某张表损坏，数据库磁盘错误等等。没有了它，辛辛苦苦积攒下来的数据就这么一去不复返了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>看了Solar框架的几点感触</title>
            <pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/solar/</link>
            <guid>https://limboy.me/posts/solar/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;solarphp.com&#x2F;&quot;&gt;Solar 框架&lt;&#x2F;a&gt;，大家可能不是很熟悉，我也是看了这篇文章:&lt;a href=&quot;http:&#x2F;&#x2F;paul-m-jones.com&#x2F;archives&#x2F;1113&quot;&gt;The Future of Zend Framework is Solar&lt;&#x2F;a&gt;后，眼前一亮，就花了点时间了解了一下。标题很吸引眼球，不过确实也把 Solar 的一些特性通过对比的方式很好地展现出来了，下面是我总结的几点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-gou-jian-fang-fa&quot;&gt;全局构建方法&lt;&#x2F;h3&gt;
&lt;p&gt;很多框架都没有做到这点，或者说没有意识到这点，要实例化一个类时，可以 new，可以 getInstance()，可以 factory，参数的传递也没有统一的规范。Solar 这点做得很好&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Solar_Base &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; note that the config property is named for the class
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; with an underscore prefix.  this lets us collect the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; parent config defaults as well.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;one&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;two&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;three&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 Solar 在实例化一个类时是通过一个全局的 factory 方法来实现的，同时参数的传递也很讲究，只能传递一个 config 数组，当然这个 config 可以从配置中读取。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-yi-de-config-diao-yong&quot;&gt;统一的 config 调用&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 在运行时只调用一个 config 文件，这个跟 yii 有点类似，Kohana 则是把配置文件打得很散。这样做的好处是可以避免在运行时多次读取配置文件，影响效率，而且配置文件一多的话也容易乱。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 的 config 配置里有几项是特殊项，如 ini_set,registry_set。还有一个很重要的特性是将类名作为 key，然后将该类的属性作为值，运行时这些值将自动覆盖类的默认值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * ini_set values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ini_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error_reporting&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_ALL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_STRICT&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;display_errors&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;html_errors&amp;#39;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;session.save_path&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;tmp&#x2F;session&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;date.timezone&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;UTC&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * auto-register some default objects for common use. note that these are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * lazy-loaded and only get created when called for the first time.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;registry_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sql&amp;#39;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_User&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;model_catalog&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Model_Catalog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mail_transport&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Mail_Transport&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;controller_front&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * sql adapter to use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Adapter_Sqlite&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * front controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;classes&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_App&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;disable&amp;#39;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;base&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;default&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;routing&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有一点我觉得 Solar 做得不太好，就是把类的属性的默认值放在了类里，而不是配置文件里。将来如果因为某个属性导致系统出问题，调试起来将会很困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-zhu-ce-qi-xiao-mie-dan-li&quot;&gt;全局注册器(消灭单例)&lt;&#x2F;h3&gt;
&lt;p&gt;通过全局注册器就可以在整个应用程序中共享内容，这个内容可以是字符串&#x2F;数组&#x2F;对象等等。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就是最简单的存取，也可以设置为 lazy-loading，就是不直接存对象，而是类名和 config，这样只有到真正需要时才实例化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过这种方法，其实就实现了单例。现在很多框架都在大力打压单例，Zend Framework 更是在 2.0 的 roadmap 里提出要尽可能地消灭单例，不在类的内部实现单例方法，因为这样的话子类就很难扩展，尤其是在单例里又加入了一些特有的逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-chang-ji-zhi&quot;&gt;异常机制&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 的异常机制也有自己的特点，做得很细致。自带了 16 个常用异常，如 DirNotFound&#x2F;FileNotReadable 等等，不过感觉这块有点过设计了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;My_Example_Class&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错的类名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ERR_SOMETHING_WRONG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;Exception类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Something is wrong.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;附加信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;所谓依赖注入(dependency injection)，就是某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 一般是把要注入的类定义在 config 里，比如 Auth 类要用到 Cache，但不确定具体使用时会用到哪个 Cache，此时可以通过配置 config 文件来实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Auth_Adapter&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;cache&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timeout&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样 Auth 类就会使用 Memcache 作为缓存引擎。可以在类内部定义多个注入点，这样就可以使用不同的类来完成同样的目的，只要该类有特定的方法。Zend Framework 在 2.0 的 roadmap 中也提到&amp;quot;All components &lt;strong&gt;MUST&lt;&#x2F;strong&gt; allow for dependency injection&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;依赖注入可以让模块之间更加松耦合，比如之前用的是 XCache 缓存殷勤，后来由于业务变动要使用 Memcache 引擎，这时只需在配置文件里修改一下缓存类型就行了，多省事啊。&lt;&#x2F;p&gt;
&lt;p&gt;我们学习各种设计模式，最终都是为了一个目的：应对变化。而依赖注入可以让我们更加从容地应对变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gua-pei-qi&quot;&gt;适配器&lt;&#x2F;h3&gt;
&lt;p&gt;使用适配器是依赖注入的基础，适配器其实就是一个抽象基类，所有的子类都必须继承该抽象基类。这样才能保证在使用依赖注入时，一定存在某个特定方法。比如上面说到的 Auth 引用缓存问题，因为所有的缓存都是继承 Solar_Cache_Adapter 而来，所以一定会有 save 方法，Auth 在调用缓存时就可以放心地 save 了。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 内部使用了大量的 Adapter，目的就是为了方便依赖注入。可能系统提供的几个类都不适合具体应用，这时只要继承 Adapter，自己写一个类，然后加到配置文件里就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 框架还是值得看一看的，即使不打算拿他来做应用。也可以关注一下 Zend Framework 2.0，如果真的实现了&lt;a href=&quot;http:&#x2F;&#x2F;framework.zend.com&#x2F;wiki&#x2F;display&#x2F;ZFDEV2&#x2F;Zend+Framework+2.0+Requirements&quot;&gt;roadmap&lt;&#x2F;a&gt;里所说的种种，相信一定会给其他的 php 框架带来巨大的冲击。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>关于创业的一点感悟</title>
            <pubDate>Sat, 23 Oct 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/think-about-startup/</link>
            <guid>https://limboy.me/posts/think-about-startup/</guid>
            <description>&lt;p&gt;在&lt;a href=&quot;http:&#x2F;&#x2F;news.ycombinator.com&quot;&gt;HN&lt;&#x2F;a&gt;看到了&lt;a href=&quot;http:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=1817883&quot;&gt;这篇文章&lt;&#x2F;a&gt;，该文的作者辞掉了一份收入颇丰的工作，用了 8 个月的时间，开发完成了他的网站。但是在推广的时候却遇到了一些问题。他想到的第一个方法是给&lt;a href=&quot;www.techcrunch.com&quot;&gt;TC&lt;&#x2F;a&gt;写信，非常认真地写信，希望 TC 能给报道一下，无果。给另一家规模稍小的类似网站投稿依旧没有回音，也没有可能在 HN 和 Reddit 被报道，于是他的项目就搁浅了。只能眼睁睁看着其他类似的网站脱颖而出。最后他得出的结论是：需要一个绝好的想法，然后可以病毒式传播。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说我的故事：我是一个不太闲得住的人，在一个地方时间待长了，总想到别处逛逛，但我身边又没有这样的朋友，可以告诉我哪里值得去，哪里不该去。于是我就上网找旅游社区，我要的很简单，就是一个点评景点的地方，哪个景点的分高，口碑好，我就去哪。结果转了半天也没有发现一个合我心意的，不是套一个 discuz 论坛，就是有一堆乱七八糟的功能，或者界面实在太粗糙，等等。万般无奈之下，只能自己操刀，按着自己的想法来做这么一个社区——&lt;a href=&quot;http:&#x2F;&#x2F;xingzher.com&quot;&gt;行者&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因为白天还要上班，所以只有晚上那么点时间来做项目。遇到的最大的困难是，坚持不下去，因为随着时间的推移，热情也下降地很快，一旦有两三天没有碰它，以后再要捡起来就很难了。这时只能不断地给自己打气：不能就这么放弃了啊，不然之前那么多的付出就浪费了；这么好的一个产品，不做完真是太可惜了；等做完后，大家一定会喜欢的......等等。所以一个人做项目，尤其是业余时间，规模还不小的项目，真的很难。就像长跑一样，跑累了，一休息就不想起来了，反正也没有人逼着你非跑到终点。&lt;&#x2F;p&gt;
&lt;p&gt;很庆幸我坚持了下来(因为告诉过好几个朋友我在做这么个网站，不能言而无信，这也是我坚持下来很重要的一个原因)，大概花了 100 多天，自己看着还比较满意。于是我也遇到了跟上文的作者同样的问题: 如何推广？期间有好友跟我说过: 这个网站将来推广会是个问题。我还比较有信心地告诉他: 一步一步来，车到山前必有路，先做出来，将来的事将来再说。现在要找路了，却不知道路在哪？&lt;&#x2F;p&gt;
&lt;p&gt;曾经也想过大概要怎么推广，比如找几个有名的博客宣传一下或者挂个广告，或者想一个很好的 idea，把旅友们都聚集过来，实在不行就到旅友论坛里去发帖，拉人。但这些不是我的兴趣所在，也不是我的强项，遇到问题不知道怎么解决，也没有太大的热情去做这件事，于是慢慢就搁浅了。&lt;&#x2F;p&gt;
&lt;p&gt;其实细细分析起来还有很多原因&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我做的是社区。不像服务性网站，社区是需要用户创造内容的，但对于新用户来说，能不能接受你这个网站还是个问题，更别提创造内容了。就算看着还顺眼，用着也还行，没有人互动，这也很打击士气。所以积累第一批忠实用户真的很困难。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不是我熟悉的领域。做这个社区，纯粹是一厢情愿，觉得自己好好做，别人就会来用。但事实上我跟本就不知道作为一个驴友对我的网站有怎样的期待值；最希望提供怎样的功能；用了之后，有什么样的感想。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;热情没了。前两个都不是最根本的问题，这个才是最致命的。我为什么要花那么多精力&#x2F;时间&#x2F;财力去推广这个网站？旅行对我来说又不是必须的，我还不如多花点时间去研究算法，新技术......等等。之前还能找到继续下去的动力，这次我想了想，如果要继续下去，那么最大的动力就是: 都已经把孩子生出来了，总不能不管吧。但是我又有了新的目标...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过这件事，想到了以下几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创业不是你把一个产品做好了就行了，营销也很重要，除非你本身就有了足够的影响力。不然看着自己辛辛苦苦做出来的产品没人用，这种感觉很打击信心的。所以如果你是一个程序员，最好找一个擅长营销的朋友来帮你的产品打开出路，发挥各自所长，才有可能成功。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果想在互联网创业的话，最好认清现实。除非你不想盈利，只是作为业余项目，练练手。国内的互联网创业门槛其实是很高的，尽量往小处着手，就目前来看电子商务和移动互联网是两个可以考虑的方向。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;避免单干，除非你够 NB。创业阶段，需要考虑的事情非常多，如设计&#x2F;体验&#x2F;程序&#x2F;前端&#x2F;推广&#x2F;持续改进等等。就算你是全能型的人才，如果都亲力亲为的话，也会很累。不如找 1-2 个志趣相投，特长互补的人来一起做，享受团队合作带来的快感。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;创业是很辛苦的: 找到靠谱的团队成员很难，成员之间如何合作，如何有效沟通，如何提高成员的士气，如何让成员更高效地工作，如何营造轻松的氛围，如何应付突变，核心成员离开了怎么办...等等。所以如果真想创业的话，先了解一下作为 founder，需要具备哪些能力和资源，然后在实践中慢慢积累，等到觉得时机差不多了，再去尝试，这样成功的可能性会大得多。当然如果只想安稳地挣钱的话，还是办公室最靠谱。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;李想说：反对一切创业。凭着一股热情，就想开创一片天地，这样的行为并不能让你学到什么，只会让你感觉很受伤。而真正具备了创业的条件和创业的心的人，是不会在乎他人的看法的。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>使用github作为博客引擎</title>
            <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/make-github-as-blog-engine/</link>
            <guid>https://limboy.me/posts/make-github-as-blog-engine/</guid>
            <description>&lt;p&gt;在介绍之前，先普及一下基础知识，大鸟们直接跳过。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-git&quot;&gt;什么是 git&lt;&#x2F;h3&gt;
&lt;p&gt;git 是一个分布式版本控制工具(DVCS)，不需要服务端软件支持(即使在地铁里也可以正常 commit)，Linux 内核开发用的版本控制工具就是它。&lt;&#x2F;p&gt;
&lt;p&gt;常用的 SVN 属于集中式版本控制工具(CVCS)，需要在服务端开启 SVN 服务，然后客户端 checkout,commit,update。&lt;&#x2F;p&gt;
&lt;p&gt;更详细的介绍请参考&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Git_(software)&quot;&gt;维基百科&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-github&quot;&gt;什么是 github&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;github&amp;quot;:http:&#x2F;&#x2F;github.com&#x2F; 的标语是：&amp;quot;secure source code hosting and collaborative development&amp;quot;。一个基于 git 的类似 google code 的代码仓库，付费版的用户可以创建私有仓库，支持多人开发。很多项目都选择了 github 来保存代码，如&amp;quot;jQuery&#x2F;reddit&#x2F;RoR&#x2F;CakePHP&#x2F;Redis&amp;quot;等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-pages&quot;&gt;github pages&lt;&#x2F;h3&gt;
&lt;p&gt;先说说 pages 功能，blog 就是在 pages 的基础上搭建的。如果英文不错的话，可以直接&lt;a href=&quot;http:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;浏览此页&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建一个用户的页面很简单，假设你的用户名为 foo&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个仓库(repository)，名称填&amp;quot;foo.github.com&amp;quot;，创建&lt;&#x2F;li&gt;
&lt;li&gt;在本地新建一个文件夹，假如为 foo,在 foo 里面新建一个 index.html 页面，随便输入点内容&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;&#x2F;code&gt; 初始化，&lt;code&gt;git add .&lt;&#x2F;code&gt; 把 index.html 加入到仓库中，&lt;code&gt;git commit&lt;&#x2F;code&gt; 提交修改&lt;&#x2F;li&gt;
&lt;li&gt;添加 github 的分支 &lt;code&gt;git remote add origin git@github.com:foo&#x2F;foo.github.com.git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;提交到 github 分支 &lt;code&gt;git push origin master&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;过 1 分钟左右，浏览 foo.github.com，就可以看到刚刚创建的 index.html 文件了。&lt;&#x2F;p&gt;
&lt;p&gt;除了创建用户页面，还可以针对每个项目单独创建项目的主页，这不是本文的重点，有兴趣的可以&lt;a href=&quot;http:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;浏览此页&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chuang-jian-blog&quot;&gt;创建 blog&lt;&#x2F;h3&gt;
&lt;p&gt;终于扯到正题上了(-,-)，前面已经说过如何创建 html 页面，其实已经可以写博客了，创建一个 index.html 页面，在里面列出写过的文章，点击标题进去后又是一个手动创建的 html 页。就是太麻烦了，一点都不酷，说不定还会被 MM 鄙视。&lt;&#x2F;p&gt;
&lt;p&gt;github 当然知道这个问题，所以他们创建了&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;jekyll&quot;&gt;jekyll 模板引擎&lt;&#x2F;a&gt; 。简单来说，就是你可以用&lt;a href=&quot;http:&#x2F;&#x2F;www.textism.com&#x2F;tools&#x2F;textile&#x2F;?sample=2&quot;&gt;textile&lt;&#x2F;a&gt; 或者&lt;a href=&quot;http:&#x2F;&#x2F;daringfireball.net&#x2F;projects&#x2F;markdown&#x2F;syntax&quot;&gt;markdown&lt;&#x2F;a&gt;语法来写博客，提交到 github 后，会自动转换成 html。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;sites&quot;&gt;这里&lt;&#x2F;a&gt;有很多网站&#x2F;博客，都是基于 github 的 jekyll 模板开发的，如果觉得哪个不错，可以查看 source。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;mojombo.github.com&quot;&gt;这个仓库&lt;&#x2F;a&gt;，里面有一些特殊的文件&#x2F;文件夹：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;config-yml&quot;&gt;_config.yml&lt;&#x2F;h3&gt;
&lt;p&gt;存储了一些设置，大部分的设置都可以通过命令行指定，但放到配置文件里更方便些&lt;&#x2F;p&gt;
&lt;h4 id=&quot;layouts&quot;&gt;_layouts&lt;&#x2F;h4&gt;
&lt;p&gt;_layouts 文件夹存放的是模板文件，文章会被渲染到这些模板里，{{ content }}变量指代的是文章内容&lt;&#x2F;p&gt;
&lt;h4 id=&quot;posts&quot;&gt;_posts&lt;&#x2F;h4&gt;
&lt;p&gt;这里就是真正存放博客文章的地方了，文件命名要遵守这种格式:year-month-day-title.markup&lt;&#x2F;p&gt;
&lt;h4 id=&quot;site&quot;&gt;_site&lt;&#x2F;h4&gt;
&lt;p&gt;这个文件夹是程序生成的，如果本地没有安装 jekyll 的话，是不会有这个文件夹的，如果想要先本地预览一下，再提交到 github，最好通过.gitignore 把这个文件夹排除。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;index-html&quot;&gt;index.html&lt;&#x2F;h4&gt;
&lt;p&gt;这个文件也有一个&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;yaml-front-matter&quot;&gt;yaml 前缀&lt;&#x2F;a&gt; ，可以指定使用哪个模板，标题等等，所有根文件夹下的.html&#x2F;.htm&#x2F;.textile&#x2F;.markdown 都会被解析。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;other-files-folders&quot;&gt;other files&#x2F;folders&lt;&#x2F;h4&gt;
&lt;p&gt;上面没有列出的文件&#x2F;文件夹都会被 jekyll 放到_site 文件夹下，如 css&#x2F;image&#x2F;script 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jekyll-de-an-zhuang&quot;&gt;jekyll 的安装&lt;&#x2F;h3&gt;
&lt;p&gt;参考&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;install&quot;&gt;安装页&lt;&#x2F;a&gt; ，如果使用时提示&amp;quot;liquid requires RubyGems version &amp;gt;= 1.3.7&amp;quot;，可以在&lt;a href=&quot;http:&#x2F;&#x2F;rubyforge.org&#x2F;frs&#x2F;?group_id=126&quot;&gt;这里&lt;&#x2F;a&gt; 下载对应的文件，安装即可。&lt;&#x2F;p&gt;
&lt;p&gt;安装完之后，为了避免路径调用问题，可以在 apache&#x2F;nginx 里给对应的文件夹(&#x2F;path&#x2F;to&#x2F;_site)绑定一个本地域名，如&amp;quot;lc.foo.github.com&amp;quot;，在终端里输入&amp;quot;jekyll --pygments&amp;quot;，然后就可以用该域名访问本地博客了，如果一切正常，再提交到 github&lt;&#x2F;p&gt;
&lt;p&gt;PS:如果你之前的博客是基于 wordpress&#x2F;movable type&#x2F;typo 4+，可以参考这篇&lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;blog-migrations&quot;&gt;迁移指南&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bang-ding-yu-ming&quot;&gt;绑定域名&lt;&#x2F;h3&gt;
&lt;p&gt;这个就更简单了，新建一个 CNAME 文本文件，在里面输入域名，如&amp;quot;blog.leezhong.com&amp;quot;，然后在域名提供商里，指定该域名的 CNAME 为&amp;quot;foo.github.com&amp;quot;，搞定&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-jia-ping-lun-gong-neng&quot;&gt;添加评论功能&lt;&#x2F;h3&gt;
&lt;p&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;disqus.com&quot;&gt;disqus&lt;&#x2F;a&gt; ，整个注册和使用流程还是挺清晰易懂的，这里就不多说了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao-wen-zhang&quot;&gt;参考文章&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;jekyll wiki&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;&quot;&gt;http:&#x2F;&#x2F;wiki.github.com&#x2F;mojombo&#x2F;jekyll&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;github blog&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;272-github-pages&quot;&gt;http:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;272-github-pages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;publishing a blog with github and jekyll&amp;quot;: &lt;a href=&quot;http:&#x2F;&#x2F;blog.envylabs.com&#x2F;2009&#x2F;08&#x2F;publishing-a-blog-with-github-pages-and-jekyll&quot;&gt;http:&#x2F;&#x2F;blog.envylabs.com&#x2F;2009&#x2F;08&#x2F;publishing-a-blog-with-github-pages-and-jekyll&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h3&gt;
&lt;p&gt;之前一直用的 wordpress，但是太臃肿了，而且有安全隐患，还得有一个 PHP 空间，访问速度也得不到保证。平时 github 用得比较多，正好他们提供&amp;quot;博客&amp;quot;服务，正合我意，初步使用下来，没有什么问题，能在本地用 vim 写 textile 语法的博客是一件多么爽的事情啊，还可以本地预览最终效果，数据也不会轻易丢失。&lt;&#x2F;p&gt;
&lt;p&gt;最后再次感谢 github 提供了这么好的服务，如果对 github 的创业历程感兴趣，可以参考&lt;a href=&quot;http:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2008&#x2F;10&#x2F;18&#x2F;how-i-turned-down-300k.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
    </channel>
</rss>