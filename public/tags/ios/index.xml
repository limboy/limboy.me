<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Limboy - iOS</title>
        <link>https://limboy.me</link>
        <description></description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://limboy.me/tags/ios/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sun, 04 Mar 2018 00:00:00 +0000</lastBuildDate>
        
        <item>
            <title>轻量级低风险 iOS Hotfix 方案</title>
            <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-lightweight-hotfix/</link>
            <guid>https://limboy.me/posts/ios-lightweight-hotfix/</guid>
            <description>&lt;p&gt;我们都知道苹果对 Hotfix 抓得比较严，强大好用的 JSPatch 也成为了过去式。但即使测试地再细致，也难保线上 App 不出问题，小问题还能忍忍，大问题就得重新走发布流程，然后等待审核通过，等待用户升级，周期长且麻烦。如果有一种方式相对比较安全，不需要 JSPatch 那么完善，但也足够应付一般场景，使用起来还比较轻量就好了，这也是本文要探讨的主题。&lt;&#x2F;p&gt;
&lt;p&gt;要达到这个目的，Native 层只要透出两种能力就基本可以了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在任意方法前后注入代码的能力，可能的话最好还能替换掉。&lt;&#x2F;li&gt;
&lt;li&gt;调用任意类&#x2F;实例方法的能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;第 2 点不难，只要把 &lt;code&gt;[NSObject performSelector:...]&lt;&#x2F;code&gt; 那一套通过 &lt;code&gt;JSContext&lt;&#x2F;code&gt; 暴露出来即可。难的是第 1 点。其实细想一下，这不就是 AOP 么，而 iOS 有一个很方便的 AOP Library: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt;，只要把它的几个方法通过 JSContext 暴露给 JS 不就可以了么？&lt;&#x2F;p&gt;
&lt;p&gt;选择 Aspects 的原因是它已经经过了验证，不光是功能上的，更重要的是可以通过 AppStore 的审核。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is stable and used in hundreds of apps since it&#x27;s part of PSPDFKit, an iOS PDF framework that ships with apps like Dropbox or Evernote.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Aspects 使用姿势：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前插、后插、替换某个方法都可以。使用类的方式很简单，&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt; 即可，Selector 也一样 &lt;code&gt;NSSelectorFromString&lt;&#x2F;code&gt;，这样就能通过外部传入 String，内部动态构造 Class 和 Selector 来达到 Fix 的效果了。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式的安全性在于：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;不需要中间 JS 文件，准备工作全部在 Native 端完成。&lt;&#x2F;li&gt;
&lt;li&gt;没有使用 App Store 不友好的类&#x2F;方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设线上运行这这样一个 Class，由于疏忽，没有对参数做检查，导致特定情况下会 Crash。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 传一个 0 就 gg 了
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;denominator;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在我们要避免 Crash，就可以通过这种方式来修复&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixScriptString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;fixInstanceMethodReplace(&amp;#39;MightyCrash&amp;#39;, &amp;#39;divideUsingDenominator:&amp;#39;, function(instance, originInvocation, originArguments){ \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    if (originArguments[0] == 0) { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        console.log(&amp;#39;zero goes here&amp;#39;); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } else { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        runInvocation(originInvocation); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:fixScriptString&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行一下看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;result: &lt;&#x2F;span&gt;&lt;span&gt;%.3f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;won&amp;#39;t crash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; result: 0.333
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Javascript log: zero goes here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; won&amp;#39;t crash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It Works, 是不是有那么点意思了。以下是可以正常运行的代码，仅供参考。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Aspects.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;JavaScriptCore&#x2F;JavaScriptCore.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;Felix: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;Felix
&lt;&#x2F;span&gt;&lt;span&gt;+ (Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sharedInstance;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;javascriptString];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_context;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        _context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[JSContext alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [_context setExceptionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Oops: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _context;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;isClassMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:&lt;&#x2F;span&gt;&lt;span&gt;(AspectOptions)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instanceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectorName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selectorName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixImpl:&lt;&#x2F;span&gt;&lt;span&gt;(JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;fixImpl &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(instanceName);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(isClassMethod) {
&lt;&#x2F;span&gt;&lt;span&gt;        klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(klass)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt; sel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString&lt;&#x2F;span&gt;&lt;span&gt;(selectorName);
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:sel withOptions:option usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [fixImpl callWithArguments:@[aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;originalInvocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;className &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(className);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInvocation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInvocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;invocation) {
&lt;&#x2F;span&gt;&lt;span&gt;        [invocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; helper
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;var console = {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;log&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;message) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Javascript log: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,message);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>App 图片体验指标</title>
            <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/app-img-metrics/</link>
            <guid>https://limboy.me/posts/app-img-metrics/</guid>
            <description>&lt;p&gt;网络图片作为 App 的一个重要组成，自然也需要一些关键指标来衡量，有了指标方便看到优化的效果。不过目前貌似没有比较广泛采用的指标，跟其他公司交流时，当聊到 Crash 率，大家都有统一的认知，但聊到图片体验，就很难进行比较了：我们这块一直都不错，用户反馈也不多。但事实可能并不如此。&lt;&#x2F;p&gt;
&lt;p&gt;为什么图片的指标不好定？因为环境比较复杂，边界也不太好确定（不像 Crash，判断条件非常清晰）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;网速比较慢，图片出不来或出来得很慢正不正常。&lt;&#x2F;li&gt;
&lt;li&gt;图片本身就比较大，下载过程自然就慢了，耗时长一点也正常。&lt;&#x2F;li&gt;
&lt;li&gt;即使下载速度比较快，如果是单线程的话，显示上也是一张一张出来，体验并不好。&lt;&#x2F;li&gt;
&lt;li&gt;有时图片即使下载成功了，也有可能无法显示。&lt;&#x2F;li&gt;
&lt;li&gt;···&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果把图片从请求到渲染完成作为一个任务，这个任务的成功跟很多因素有关，但核心阻碍只有一个，就是「图片请求」，其他可优化的空间不多或效果不那么明显，且相对成熟（比如后台多线程下载，滑出屏幕时取消下载等）。因此图片体验的指标可以缩小范围为「图片请求指标」。&lt;&#x2F;p&gt;
&lt;p&gt;跟图片请求最相关的几个因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CDN&lt;&#x2F;li&gt;
&lt;li&gt;客户端网络状况&lt;&#x2F;li&gt;
&lt;li&gt;图片大小&lt;&#x2F;li&gt;
&lt;li&gt;图片格式&lt;&#x2F;li&gt;
&lt;li&gt;请求协议（http&#x2F;1.1 http&#x2F;2）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些就好像汽车的离合、油门、刹车可以供我们控制，也需要一个仪表盘来看到控制的效果。那这个仪表盘里显示的是什么？&lt;&#x2F;p&gt;
&lt;p&gt;我们希望显示的内容能真实地体现用户的图片体验。在这个前提下，很多因素就不需要考虑了，比如网络环境、机型等。因为同样一张图，如果 3 秒后还没有出来，无论是 wifi 还是 2G，这个体验就是不好的。&lt;&#x2F;p&gt;
&lt;p&gt;接下来再来看图片请求会有哪些结果，很简单，请求成功和请求失败。请求失败比较好办，失败就是失败了，记录一下即可。那么请求成功该怎么细分呢？&lt;&#x2F;p&gt;
&lt;p&gt;我们知道在 web 时代，如果页面 3 秒没有出来，用户离开网页的可能性就会高很多。在图片领域没有相对权威的值，因此结合真实体验，拟定了以下的体验指标：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;图片请求失败率:
&lt;&#x2F;span&gt;&lt;span&gt;	图片请求失败次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;图片请求耗时：
&lt;&#x2F;span&gt;&lt;span&gt;	优: 耗时在 (0, 1] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	良: 耗时在 (1, 2] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	中: 耗时在 (2, 3] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	差: 耗时在 (3, ∞) 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于真实环境下图片请求次数会很大，因此可以设置采样率，比如 &lt;code&gt;1&#x2F;1000&lt;&#x2F;code&gt;，也就是 1000 次图片请求记录 1 次，将样本量缩到恰当的范围。&lt;&#x2F;p&gt;
&lt;p&gt;有了这 5 份数据，对于线上的图片体验就能有一定的了解了，接下来可以针对每份数据进行不同维度的数据聚合，比如：城市、网络类型、页面 URL、error_code、CDN 等。如果某个城市的图片访问出了问题，就能很快知道，或者某个 CDN 调整也能快速定位。&lt;&#x2F;p&gt;
&lt;p&gt;同时可以对每份数据的前 N 位 Top 用户进行记录，因为有可能某几个用户发生异常，贡献了大部分的数据。&lt;&#x2F;p&gt;
&lt;p&gt;在这些指标的基础上，可以再从图片大小、尺寸、CDN、网络请求等维度进行优化，方便验证效果。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The Right Way to Architect iOS App with Swift</title>
            <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-right-way-to-ios-architecture/</link>
            <guid>https://limboy.me/posts/the-right-way-to-ios-architecture/</guid>
            <description>&lt;p&gt;关于 iOS 架构的文章感觉已经泛滥了，前一阵正好 Android 官方推了一套 &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;guide.html&quot;&gt;App Architecture&lt;&#x2F;a&gt; ，于是就在想，对于 iOS 来说，怎样的架构才是最适合的。带着这个问题，我开始了探索。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-architecture-matters&quot;&gt;Why Architecture Matters?&lt;&#x2F;h2&gt;
&lt;p&gt;这是第一个也是最重要的问题，为什么会出现各种 Architecture Pattern？真的那么重要么？&lt;&#x2F;p&gt;
&lt;p&gt;我们来想一下，无论是做一个 App 还是搭一套后台系统，如果是一次性的，今天用完明天就可以扔掉，那么怎么快怎么来，代码重复、代码逻辑、代码格式统统不重要。&lt;&#x2F;p&gt;
&lt;p&gt;这种场景比较适合黑客马拉松，而真实情况往往是我们的代码需要上线，要对用户负责，而一套好的架构会让这些事情变得更加容易。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-jian-ji-qie-zheng-ji&quot;&gt;好的架构简洁且整洁&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;170619_4e7gif674kdad56l6iek5lj8i7dl9_984x329.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;说到架构，往往会想到建筑，软件架构跟建筑不同的点是软件架构会随着时间的推移进行演进，而实体建筑则没这个特性。抛开时间维度，这二者还是有一定的相似性的。&lt;&#x2F;p&gt;
&lt;p&gt;好的架构容易催生好的代码，就像住在干净整洁的房子里，会下意识地让其中的家具、电器、摆饰等也井井有条。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-rang-dai-ma-geng-jia-rong-yi-wei-hu&quot;&gt;好的架构让代码更加容易维护&lt;&#x2F;h3&gt;
&lt;p&gt;不容易维护的代码往往有这么几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;抽象程度低&lt;&#x2F;li&gt;
&lt;li&gt;职责不明确&lt;&#x2F;li&gt;
&lt;li&gt;喜欢走捷径&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;好的架构能对 2 和 3 有一定的作用，对于第 1 点还是要看程序员的能力和经验。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chou-xiang-cheng-du-di&quot;&gt;抽象程度低&lt;&#x2F;h4&gt;
&lt;p&gt;这样的代码往往是命令式编程产生的，也就是像 CPU 那样的思考方式，把产品经理的需求直观地翻译成代码，而不对其中的共性、本质进行抽离和抽象，时间一长就容易看不懂其中的逻辑，需求一变就要改核心代码。&lt;&#x2F;p&gt;
&lt;p&gt;比如下面这段代码，不知道具体要完成什么任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcs43v88j20nk0damzy.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze-bu-ming-que&quot;&gt;职责不明确&lt;&#x2F;h4&gt;
&lt;p&gt;这也是产生「一大坨代码」的原因之一，就像 MVC 模式里，没有说明用户的操作应该在哪里处理，业务逻辑放在什么地方，这样就容易走捷径，怎么方便怎么来，而越是方便到后来就越容易出问题。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xi-huan-zou-jie-jing&quot;&gt;喜欢走捷径&lt;&#x2F;h4&gt;
&lt;p&gt;这是我们的天性，毕竟能够更快更方便地达到目标，为什么不做呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如我们都知道「通知」用起来很方便，所有涉及到单向数据传递的地方都可以使用，比如 Cell 通过通知向 VC 传递点击事件信息、Model 通过通知向 VC 传递数据信息、VC 之间通过通知进行解耦等等。&lt;&#x2F;p&gt;
&lt;p&gt;又比如可以很方便地在 VC 存储状态信息，慢慢地 VC 里这些状态变量就多了起来，到后来要维护这些变量就变得非常困难，出了问题也不好排查。&lt;&#x2F;p&gt;
&lt;p&gt;Clojure 的作者 Rich Hickey 有一个非常著名的 &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt; 分享&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple is often erroneously mistaken for easy. &amp;quot;Easy&amp;quot; means &amp;quot;to be at hand&amp;quot;, &amp;quot;to be approachable&amp;quot;. &amp;quot;Simple&amp;quot; is the opposite of &amp;quot;complex&amp;quot; which means &amp;quot;being intertwined&amp;quot;, &amp;quot;being tied together&amp;quot;. Simple != easy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Simple 是我们所追求的，而 Easy 往往会让事情往反方向发展。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-fu-gai-da-duo-shu-chang-jing&quot;&gt;好的架构能够覆盖大多数场景&lt;&#x2F;h3&gt;
&lt;p&gt;产品经理：老板说要做一个插座，具体怎么实现我不管，下周一就要。拿到这个需求之后，你觉得很简单，完美符合需求，就像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctgc56dj206u06ujrp.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可是好景不长，老板新买了一个电脑，只支持两相的插座，而且现在就要，作为工程师，你不能被这么简单朴实的需求难倒，于是稍微动了下脑筋，就出了一个解决方案：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctvnyggj206c065dhe.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然丑陋，但是可以工作。但我们的目标不只是可以工作（紧急情况除外），更要优雅地工作。&lt;&#x2F;p&gt;
&lt;p&gt;举一个现实的例子，比如页面间支持通过 Router 进行跳转，但有一天发现有页面间通信的需求，然后就会出来一些 trick 的解决方案，比如发通知或者给 Router 加一个 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt; 的方法，本质上跟上图的解决方案没什么区别。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-ti-sheng-kai-fa-xiao-lu-fang-bian-ding-wei-wen-ti&quot;&gt;好的架构能够提升开发效率，方便定位问题&lt;&#x2F;h3&gt;
&lt;p&gt;好的架构能够支持多人并行开发、一定程度的代码复用、单元测试，出了问题能比较方便地找到原因。这几点是架构要解决的主要问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dang-qian-de-zhuang-tai&quot;&gt;当前的状态&lt;&#x2F;h2&gt;
&lt;p&gt;目前主流的主要有 MVC 和 MVVM，VIPER 用的会少一些，它们之间的优劣对比这里就不展开了，可以查看这篇文章来了解：&lt;a href=&quot;https:&#x2F;&#x2F;blog.coding.net&#x2F;blog&#x2F;ios-architecture-patterns&quot;&gt;iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译) - Coding 博客&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单总结下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MVC 模式过于简单，定的标准过于粗放， 容易滋生捷径。&lt;&#x2F;li&gt;
&lt;li&gt;MVVM 会好很多，但场景的覆盖还不够全，比如缺少页面间跳转／通信、数据获取等。&lt;&#x2F;li&gt;
&lt;li&gt;VIPER 更加细致，但有点臃肿。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-define-right&quot;&gt;How to Define “Right”&lt;&#x2F;h2&gt;
&lt;p&gt;每种架构都有自己的特点，如果要定义「Right」的话，至少要符合一些标准，以下是我整理的觉得比较重要的几条：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;尽量简单&lt;&#x2F;li&gt;
&lt;li&gt;结构清晰&lt;&#x2F;li&gt;
&lt;li&gt;职责明确&lt;&#x2F;li&gt;
&lt;li&gt;符合 GUI 编程的特点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jin-liang-jian-dan&quot;&gt;尽量简单&lt;&#x2F;h3&gt;
&lt;p&gt;简单的事物容易理解，也比较容易接受，用爱因斯坦的话来说「尽量简单，但不要过于简单」。VIPER 其实已经挺完善的了，但就是有点复杂，可以看&lt;a href=&quot;https:&#x2F;&#x2F;www.objc.io&#x2F;issues&#x2F;13-architecture&#x2F;viper&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-gou-qing-xi&quot;&gt;结构清晰&lt;&#x2F;h3&gt;
&lt;p&gt;清晰的结构让外人也能很快地知道每个目录是做什么的，里面的文件起着怎样的作用，自己维护起来也方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-ze-ming-que&quot;&gt;职责明确&lt;&#x2F;h3&gt;
&lt;p&gt;也就是 &lt;code&gt;Separation of Concern&lt;&#x2F;code&gt; ，每个单元只需要关心自己的事情，跟外部尽量解耦，这样无论是对代码复用和测试都会很有帮助。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-he-gui-bian-cheng-de-te-dian&quot;&gt;符合 GUI 编程的特点&lt;&#x2F;h3&gt;
&lt;p&gt;GUI 编程和其他的非界面编程还是有差异的，对 GUI 编程的特点进行合适地抽象，并在此基础上形成的架构才更有「对」的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;我比较认同 &lt;code&gt;view = render(state) + handle(event)&lt;&#x2F;code&gt; 这个定义，view 本身只做两件事，给 state 包一层漂亮的外衣，同时对用户的操作做出响应。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inspiring&quot;&gt;Inspiring&lt;&#x2F;h2&gt;
&lt;p&gt;差不多心里有谱了，现在来看看相关领域的架构大概是怎样的，找点启发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;android-architecture&quot;&gt;Android Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;Android 最近出了一套官方推荐的&lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;index.html&quot;&gt;架构&lt;&#x2F;a&gt;，挺细致的，主要的流程如下图所示&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;images&#x2F;final-architecture.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大意就是 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 通过调用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 从 &lt;code&gt;Model&lt;&#x2F;code&gt; 或 &lt;code&gt;Remote&lt;&#x2F;code&gt; 中获取数据，然后放到内置的 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 里，而 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 在 &lt;code&gt;Activity&lt;&#x2F;code&gt; 初始化时即被绑定，因此当 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 变化时，可以马上反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;当用户操作界面时，&lt;code&gt;Activity&lt;&#x2F;code&gt; 会捕获到这些事件，然后调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法，这些方法最终会导致 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 发生改变，再次反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;整体也是 MVVM 的模式，但也有自己的特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 来做单向绑定。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 来统一数据的交互。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;Room&lt;&#x2F;code&gt; 作为持久层。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 供使用。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;LifeCycle&lt;&#x2F;code&gt; 来简化跟生命周期相关的对象的操作，避免内存泄漏。（比如 ViewModel）&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Dagger2&lt;&#x2F;code&gt; 这个依赖注入工具来避免依赖。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;elm-architecture&quot;&gt;Elm Architecture&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Elm is a functional language that compiles to JavaScript. It competes with projects like React as a tool for creating websites and web apps. Elm has a very strong emphasis on simplicity, ease-of-use, and quality tooling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Elm 是一个主打函数式编程，同时通过强大的编译器来尽量确保没有 runtime error 的编程语言，著名的 Redux 就是受它启发。来感受下它的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Html&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html.Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;beginnerProgram &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type Msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;Decrement
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;msg model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;toString model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;+&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 4 块，&lt;code&gt;model&lt;&#x2F;code&gt; , &lt;code&gt;view&lt;&#x2F;code&gt; , &lt;code&gt;update&lt;&#x2F;code&gt; , &lt;code&gt;message&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;view 展示 model 数据，同时将用户的操作作为 message 抛出。&lt;&#x2F;li&gt;
&lt;li&gt;model 包含了页面所需的所有信息。&lt;&#x2F;li&gt;
&lt;li&gt;当 message 被抛出时，会自动进入到 update 方法，update 返回的新 model 自动进入到 view 里被展示。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcussf1ij20e00983yw.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟其他的前端框架不同，Elm 不喜欢 parent-child communication, 也不提倡 components，作为函数式编程语言，它在乎的就是创建 function，通过 &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;reuse&#x2F;&quot;&gt;helper function&lt;&#x2F;a&gt; 来达到类似的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vue-architecture&quot;&gt;Vue Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcv8rgczj20io09wq3l.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Vue 也是采用的 MVVM 模式，把数据绑定在内部处理了，对外部来说只要在 &lt;code&gt;data&lt;&#x2F;code&gt; 里声明特定的 key，在 &lt;code&gt;view&lt;&#x2F;code&gt; 里就可以直接使用，并且实时响应。对于 &lt;code&gt;view&lt;&#x2F;code&gt; 的事件，也会映射到 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法。&lt;&#x2F;p&gt;
&lt;p&gt;Vue 的 &lt;code&gt;Router&lt;&#x2F;code&gt; 是把 path 映射到 component 上，看着也比较清晰。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;user&#x2F;:id&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-right-way-imo&quot;&gt;The Right Way (IMO)&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcvlcjgyj20dw0xg76t.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;目录结构需要能够让不同职责的文件找到自己的归属，同时尽量清晰。这个是我目前觉得还不错的分类&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;External&lt;&#x2F;code&gt; ：一些第三方的 framework。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Extensions&lt;&#x2F;code&gt; : 针对当前 App 做的一些针对性扩展。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;&#x2F;code&gt; : 比较重要的基础组件，在前期就要管控起来。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Models&lt;&#x2F;code&gt; : 对应服务端的 Objects。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Views&lt;&#x2F;code&gt; : 页面。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Shared&lt;&#x2F;code&gt; : 会在 App 内部被公用的部分，方便统一管控。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Utilities&lt;&#x2F;code&gt; : 一些帮助类。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxzpz4yj218m0mw0vs.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本质上跟 MVVM 差不多，只是多补充了些细节。之前也有考虑过采用 ReSwift + RxSwift 的方式，也就是 Redux，后来写下来发现还是有点复杂：比如下拉刷新的 3 个 state （ loading &#x2F; loaded &#x2F; failed），action 要定义（毕竟获取数据的逻辑写在 Action 中），state 中也要定义（视图最终关心的是 state 的变化）；没有很方便的 diff 支持等。于是就回归到了 MVVM 模式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;p&gt;ViewModel 主要有 3 个职责：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Repository 获取&#x2F;修改数据。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 供 View 使用。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Functions&lt;&#x2F;code&gt; 供 View 调用，通常会导致 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 的改变。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这块也算是常规手法，需要注意的一点是 Repository 的初始化，如果要方便测试的话，最好提供注入点（比如初始化时注入或提供 set 方法注入）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;repository&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 的职责就是跟数据打交道，获取远程／本地数据，并将其转换成 Model 返回给 ViewModel。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ye-mian-jian-tiao-zhuan-he-tong-xin&quot;&gt;页面间跳转和通信&lt;&#x2F;h4&gt;
&lt;p&gt;使用 Router 即可，如果是内部的 VC 之间跳转，还可以携带 model 信息。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yong-de-xiao-mo-kuai-components&quot;&gt;通用的小模块( Components )&lt;&#x2F;h4&gt;
&lt;p&gt;我发现前端开发里，&lt;code&gt;Components&lt;&#x2F;code&gt; 用得还蛮多的，客户端开发倒不那么常见。这些小模块其实就是一些可在多个页面复用的业务相关的视图（Widget），可能带有业务逻辑，方便复用，比如「赞」按钮。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-wu-diao-yong&quot;&gt;服务调用&lt;&#x2F;h4&gt;
&lt;p&gt;比如在详情页要使用购物车的「加购」功能，通常做法是采用 &lt;code&gt;Register Procotol&lt;&#x2F;code&gt; 方式，维护一个 Protocol 和 Class 的注册表，并且在 App 启动时进行注册。我发现使用 Swift 的 POP 就不需要这么麻烦了，具体怎么做，我们后面讲。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;这个 Demo 演示了知乎日报的列表和详情页：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcx5hukwj20lt0ijq3x.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来蛮简单的，不过事实可能并非如此，我们来慢慢捋一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chu-shi-ye&quot;&gt;初始页&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxfxauej20af0ijwek.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;刚进来时，会处于原始的 loading 状态，这个状态不同于下拉刷新，可能是一个萌萌的 loading 图。&lt;&#x2F;p&gt;
&lt;p&gt;首先这个页面属于 &lt;code&gt;NewsFeed&lt;&#x2F;code&gt; 页，因此在该目录下新建 3 个文件&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;|- NewsFeedViewModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedRepository.swift
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;本着 view 只是展示 state 的原则，我们首先要处理的就是 state，那么怎么处理？ 这个 Event 是从 View 那边触发的，触发之后，对于 View 来说只能求助于 ViewModel，于是 VM 就提供了一个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 方法。&lt;&#x2F;p&gt;
&lt;p&gt;那这个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 里该做些什么呢？其实也就是根据 repository 的不同结果，设置不同的 state，然后 view 来响应这些 state。同时考虑到之后的「下拉刷新」和「加载更多」，顺便分离出一个通用的 &lt;code&gt;loadData:&lt;&#x2F;code&gt; 方法&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-1&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; todo
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 应该是怎样的呢？在 OC 时代，只要简单的暴露 readonly 的 property，外部无论是 KVO 还是 RAC 都能很方便地进行绑定，到了 swift 时代，如果要做 KVO 就要继承 &lt;code&gt;NSObject&lt;&#x2F;code&gt;，还要加一个 &lt;code&gt;@dynamic&lt;&#x2F;code&gt; 前缀，不优雅。比较理想的状态是使用 RxSwift 的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 作为属性，外部只要 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 就行了。不过在内部如何给这个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 塞数据又有点小问题。最终决定使用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 作为暴露的属性，它的好处是内部不需要再新建一个变量，直接设置这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的 &lt;code&gt;value&lt;&#x2F;code&gt; 即可，弊端就是对于使用方需要先通过 &lt;code&gt;asObservable()&lt;&#x2F;code&gt; 转一下再进行 subscribe，并且只要愿意，也可以设置 &lt;code&gt;value&lt;&#x2F;code&gt; 值，存在误操作的风险。在这里我们先简单起见用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 来做。&lt;&#x2F;p&gt;
&lt;p&gt;接下来的问题就是这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 里应该放什么？肯定要放一些当前的 loading 状态，比如 loaded，failed，loading 这些，那么要不要带上 data？如果不一起带上 data，那么状态的改变和数据的改变就不是一个原子操作，有可能会带来一些异常（比如 view 发现 loading 状态变为 loaded，自动去取最新的 data，但此时 data 可能还没有改变）。因此，我把它们都放到了一起，首先来看一下 &lt;code&gt;ResultModel&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;model&quot;&gt;Model&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个通用的数据结构&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ResultModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; initial, refresh, more
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingStatus: Equatable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loading
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loaded
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; failure(Error)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;==(lhs: LoadingStatus, rhs: LoadingStatus) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; (lhs, rhs) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingStatus: LoadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingType: LoadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;initial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; news:Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span&gt; Variable(ResultModel())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2 如果当前处于 loading 状态，就不继续处理了
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3 设置新的 loading 类型和状态
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loading
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loadingType
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4 接下来就是发网络请求，根据不同的请求结果设置 state
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里使用 &lt;code&gt;static&lt;&#x2F;code&gt; 主要是出于方便。&lt;&#x2F;li&gt;
&lt;li&gt;这里纠结了一段时间，之前是新建了 3 个 loading status（initial, refresh, loadmore），然后每个 status 再细分为 3 种状态(loading, loaded, error)，后来发现这样的话，「当前是哪个 loading status，该 status 目前处于什么状态」判断起来会比较麻烦。于是就按照现在这样进行了拆分。&lt;&#x2F;li&gt;
&lt;li&gt;在这里对状态进行更改之后，UI 那边可以自动收到更新。&lt;&#x2F;li&gt;
&lt;li&gt;这里会调用 Repository 来获取数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;repository-1&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 这块由于是异步交互，因此直接就上 RxSwift 了，返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; ，VM 作为消费方来订阅。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RxSwift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedRepository {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;news(_ offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any]?&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create({ observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;characters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;before&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;latest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Resource(path: path, method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;GET, requestBody: nil, headers: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;], parse: decodeJSON)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个用的是 chris 开源的简单的 API 请求封装 http:&#x2F;&#x2F;chris.eidhof.nl&#x2F;posts&#x2F;tiny-networking-in-swift.html
&lt;&#x2F;span&gt;&lt;span&gt;            apiRequest(baseURL: URL(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;news-at.zhihu.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;, resource: resource, failure: { (reason, result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(reason))
&lt;&#x2F;span&gt;&lt;span&gt;            }, success: { result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在这里直接返回解析后的 Model，这样 VM 那边就不用处理了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-diao-yong-repository&quot;&gt;ViewModel 调用 Repository&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 json 转换为 model
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsedResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_parseResult(result: result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 设置对应的 value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;more {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; (parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? [])
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? []
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loaded
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;date ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 统一设置 value，对外部 subscriber 来说就是原子操作
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }, onError: { (error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;failure(error)
&lt;&#x2F;span&gt;&lt;span&gt;    }, onCompleted: {
&lt;&#x2F;span&gt;&lt;span&gt;    }) {
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里你会注意到有一个 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; ，这个主要是提供灵活性，避免暴力的 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; ，比如获取到了更多的数据之后，可以只 reload 新的数据。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController: UITableViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;        viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoading()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stopAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loaded {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这里调用 Diff 这个 framework 提供的 extension
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;animateRowChanges(oldData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems, newData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;initial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;startAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;「正在加载」和「已经加载」的场景已经处理完了，「加载失败」的处理也类似，比如失败之后显示一个 reload button，点击 reload button 之后，再调用一下 &lt;code&gt;viewModel.initialLoading()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tableview&quot;&gt;TableView&lt;&#x2F;h4&gt;
&lt;p&gt;接下来就来看看如何处理 TableView 的数据展示，其实就是消费 VM 的 property&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里最基本的首页数据展示就基本完成了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jia-zai-geng-duo&quot;&gt;加载更多&lt;&#x2F;h3&gt;
&lt;p&gt;之前一直在纠结这块到底该怎么做才比较合适，如果直接把 newItems append 到原有的 items 列表，形成新的列表，UI 那边拿到之后就只能 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; 了，最好能让 UI 那边知道新的和旧的之间发生了哪些变化，于是就找到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wokalski&#x2F;Diff.swift&quot;&gt;Diff&lt;&#x2F;a&gt; 这个 framework，它能够定位出两个 collection 之间的差异，但前提是 collection item 要实现 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议。于是就有了 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; 的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-huan-gong-neng&quot;&gt;喜欢功能&lt;&#x2F;h3&gt;
&lt;p&gt;喜欢功能本质上是修改 NewsItem 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，然后让 UI 可以感知到这个变化。这里问题就来了：如何对列表中的一个 &lt;code&gt;struct&lt;&#x2F;code&gt; 进行调整？我们知道 &lt;code&gt;struct&lt;&#x2F;code&gt; 是值拷贝的，只要发生赋值行为，拿到的就不再是原先的那个 struct 了（比如把 items 通过参数传递，要修改的话就要进行拷贝，除非设置为 &lt;code&gt;inout&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;这个问题本质上是如何操作 Immutable Objects，然后就想到了 &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;immutable-js&#x2F;&quot;&gt;Immutable.js&lt;&#x2F;a&gt;，它也提供了一些修改 List 的方法，只不过都是返回一个新的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;immutable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;])]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setIn&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;999&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; List [ 0, 1, 2, List [ 999, 4 ] ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，这里简单的处理方式就是通过传进来的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 找到它在 list 中的 index（&lt;code&gt;newsItem&lt;&#x2F;code&gt; 已经实现了 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议），然后把修改过 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性的新的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 放到 index 位置来达到替换的效果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;toggleFav(_ newsItem: NewsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; newsIndex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;index(of: newsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex]
&lt;&#x2F;span&gt;&lt;span&gt;            _newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span&gt;_newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _newsItem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;components&quot;&gt;Components&lt;&#x2F;h4&gt;
&lt;p&gt;由于新闻列表和喜欢的新闻列表表现上一致，那么就可以进行一些复用，比如可以把 Cell 作为 Component。&lt;&#x2F;p&gt;
&lt;p&gt;那对于一个 Component 来说，需要具备哪些特性呢？这个并没有什么约定，本质上就是一个或几个函数，外部调用后会返回一个 view，或者提供一些 block 回调，仅此而已。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;truth-and-computed-properties&quot;&gt;Truth and Computed Properties&lt;&#x2F;h4&gt;
&lt;p&gt;这里的 &lt;code&gt;Truth&lt;&#x2F;code&gt; 是指最源头的数据，比如一个数组，&lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 是指对源头数据进行消费可以得到的结果，比如数组的长度，或数组中的正数等。&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;Truth&lt;&#x2F;code&gt; 就是 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 列表，而喜欢的 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 就是 &lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 。因此只要 newsItems 发生变化，就重新计算喜欢的 NewsItems。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;filter { (item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xi-huan-gong-neng-de-view&quot;&gt;喜欢功能的 View&lt;&#x2F;h4&gt;
&lt;p&gt;主要就是两件事：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;点击 Fav 按钮时，调用 VM 的 &lt;code&gt;toggleFav&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;li&gt;当 Fav 列表更新时，刷新 TableView。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem) { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (button) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ye-mian-tiao-zhuan&quot;&gt;页面跳转&lt;&#x2F;h3&gt;
&lt;p&gt;页面间的跳转用到了 &lt;code&gt;Router&lt;&#x2F;code&gt; ，也就是 open 一个 url 就能到达特定的页面，这么做的好处是可以和外部跳转进来的情况统一处理（因为从外部跳到某个 app 只能通过 openURL）。&lt;&#x2F;p&gt;
&lt;p&gt;但在内部直接输入 URL 总觉得不优雅，而且容易出错，将来如果要修改 URL 也不方便。因此做了一个简单的 &lt;code&gt;Router&lt;&#x2F;code&gt; 来达到这个效果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UIKit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; RouterTable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;home&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; detail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;detail&#x2F;:id&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;asController() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UIViewController.Type {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;to(_ route: RouterTable, parameters: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, Any&amp;gt;?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asController()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2.1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (key, value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;                viewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;putExtra(key, value)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: 添加 shouldBePushed 调用，比如有些页面需要先登录
&lt;&#x2F;span&gt;&lt;span&gt;        DispatchQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;async {
&lt;&#x2F;span&gt;&lt;span&gt;            UINavigationController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;pushViewController(viewController, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;parseURL(_ url: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (RouterTable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;?) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: add implementation
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home, nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 3 部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;这个跟 vue-router 里定义 url 和 components 的关系一样，主要是为了方便统一管理。&lt;&#x2F;li&gt;
&lt;li&gt;这里主要是把 enum 转换为对应的 Controller，因为限制了类型，也就不会出现找不到 VC 的情况。&lt;&#x2F;li&gt;
&lt;li&gt;这个是用来应对外部跳转进来的 URL，把它解析成 &lt;code&gt;RouterTable&lt;&#x2F;code&gt;，统一逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对 2 重点说一下，这个是最简实现，真实场景会比这复杂得多，比如有些页面是 present 出来的，有些页面 push 前需要先判断是否登录等等。&lt;&#x2F;p&gt;
&lt;p&gt;注意到 &lt;code&gt;2.1&lt;&#x2F;code&gt; 的部分，这里有一个 &lt;code&gt;putExtra&lt;&#x2F;code&gt; 方法，这是新添加的一个扩展，参考了 Android 的 &lt;code&gt;Intent&lt;&#x2F;code&gt; &lt;code&gt;putExtra&lt;&#x2F;code&gt; 。实现如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any)
&lt;&#x2F;span&gt;&lt;span&gt;    func getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension UIViewController: ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private struct&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; extra: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any) {
&lt;&#x2F;span&gt;&lt;span&gt;        IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于 extension 不支持 associated properties，因此用 struct 做了个中转。这样，VC 之间的跳转如果要带上额外的参数，只要放到 extra 里即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye&quot;&gt;详情页&lt;&#x2F;h3&gt;
&lt;p&gt;详情页比较简单，只是展示一个 webview，这里比较棘手的问题是 model 数据的同步。由于详情页也可以修改 &lt;code&gt;NewsItem&lt;&#x2F;code&gt; 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，这个改变需要能够实时同步到列表页，不然就会出现状态不同步的情况。&lt;&#x2F;p&gt;
&lt;p&gt;这块的设计也想了一段时间，Pinterest 采用的是&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@Pinterest_Engineering&#x2F;immutable-models-and-data-consistency-in-our-ios-app-d10e248bfef8&quot;&gt;通知的方式&lt;&#x2F;a&gt;，并且额外开发了一个用来支持这种方式的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pinterest&#x2F;plank&quot;&gt;库&lt;&#x2F;a&gt;，不想整的这么麻烦。本质需求是：当传过去的 model 发生变化时通知我。而 RxSwift 里的 &lt;code&gt;Variable&lt;&#x2F;code&gt; 不是正好可以达到这个效果么？于是就有了基于 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的解决方案。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItemVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 详情页可能会对这个 newsItemVariable 进行调整
&lt;&#x2F;span&gt;&lt;span&gt;        newsItemVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 找到这个 item 所在的 index，并进行替换
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;update(item: item)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 带上这个 Variable 到新的 VC
&lt;&#x2F;span&gt;&lt;span&gt;        Router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail, parameters: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: newsItemVariable])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xiang-qing-ye-view-de-chu-li&quot;&gt;详情页 View 的处理&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController: UIViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        navigationItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rightBarButtonItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tap
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; viewModel.load(id)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as?&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;load(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id))
&lt;&#x2F;span&gt;&lt;span&gt;            NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsDetail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URLRequest(url: URL(string: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;shareURL)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;webView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadRequest(request)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里为通过外部 URL 进来的留一个入口。&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;code&gt;getExtra&lt;&#x2F;code&gt; 拿到 &lt;code&gt;Variable&lt;&#x2F;code&gt; 后，接下来就交给 VM 了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;handleDataChange&lt;&#x2F;code&gt; 做的事情就是响应 VM 的 properties 的变化，做一些 UI 上的调整。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;service&quot;&gt;Service&lt;&#x2F;h3&gt;
&lt;p&gt;之前说过使用 Swift 提供 Service 会比较方便，都不需要在 App 启动时进行注册，利用自带的 Protocol Extension 就能达到效果。这个例子中没有用到，就举个其他的例子吧，以购物车为例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放在 Services 目录下的 Protocols.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 具体的实现可以放到对应的页面
&lt;&#x2F;span&gt;&lt;span&gt;extension Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; business logic
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于想要使用这个功能的开发来说，只要看 &lt;code&gt;Services&#x2F;Protocols.swift&lt;&#x2F;code&gt; 就行了。跟 Objective-C 不同，extension 里如果有两个相同的方法，编译器会直接报错，这样就避免了运行期可能出现多个实现的问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;local-reasoning&quot;&gt;Local Reasoning&lt;&#x2F;h3&gt;
&lt;p&gt;Local Reasoning 的意思是对于数据的改动都发生在某一个特定的单元。这也是使用 Value Type 的好处，因为如果使用 Reference Type，只要把其中的一个 Reference 给了出去，就不知道什么时间什么场景下数据会在外部被改变，就像给了你一张银行卡，今天看还剩 1 万，可能明天再去看就只剩 1 千了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 VM 后，所有对数据的改动都发生在 VM 里面，同时对数据的消费也尽量在一个地方，方便维护。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;以上是我自己对「Right Architecture」的一些理解和实践，实际过程中肯定还有很多细节要调整，如果你有什么想法欢迎交流～&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Demo 在这里：https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;ZhihuDailyDemo&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>是时候学习 RxSwift 了</title>
            <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/time-to-learn-rxswift/</link>
            <guid>https://limboy.me/posts/time-to-learn-rxswift/</guid>
            <description>&lt;p&gt;相信在过去的一段时间里，对 RxSwift 多少有过接触或耳闻，或者已经积累了不少实战经验。此文主要针对那些在门口徘徊，想进又拍踩坑的同学。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-xue-xi-rxswift&quot;&gt;为什么要学习 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;当决定做一件事情时，至少要知道为什么。RxSwift 官网举了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;RxSwift&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;Why.md&quot;&gt;几个例子&lt;&#x2F;a&gt;，比如可以统一处理 &lt;code&gt;Delegate&lt;&#x2F;code&gt;, &lt;code&gt;KVO&lt;&#x2F;code&gt;, &lt;code&gt;Notification&lt;&#x2F;code&gt;，可以绑定 UI，方便网络请求的处理等等。但这些更多的是描述可以用 RxSwift 来做什么，跟为什么要使用 RxSwift 还是会有点不同。&lt;&#x2F;p&gt;
&lt;p&gt;我们先来分析下 GUI 编程的本质，我喜欢把它抽象为视图和数据的结合。其中视图负责两件事：展示和交互，展示什么由数据决定。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474678383.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474678383.jpg 638w,&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474678383.jpg 638w&quot;
    sizes=&quot;(max-width: 638px) 100vw, 638px&quot; width=&quot;638&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中单向数据流可以通过&lt;a href=&quot;http:&#x2F;&#x2F;limboy.me&#x2F;tech&#x2F;2016&#x2F;12&#x2F;04&#x2F;reswift-analyze.html&quot;&gt;之前介绍的 ReSwift&lt;&#x2F;a&gt; 完成。看起来好像没 RxSwift 什么事情，其实不然，RxSwift 可以在 UniDirectional Data Flow 的各个阶段都发挥作用，从而让 Data 的处理和流动更加简洁和清晰。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474032179.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474032179.jpg 636w,&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474032179.jpg 636w&quot;
    sizes=&quot;(max-width: 636px) 100vw, 636px&quot; width=&quot;636&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过对 RxCocoa 的各种回调进行统一处理，方便了「Interact」的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的 transform 和 composite，方便了 &lt;code&gt;Action&lt;&#x2F;code&gt; 的生成（比如使用 &lt;code&gt;throttle&lt;&#x2F;code&gt; 来压缩 &lt;code&gt;Action&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;通过对网络请求以及其他异步数据的获取进行 &lt;code&gt;Observable&lt;&#x2F;code&gt; 封装，方便了异步数据的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过 RxCocoa 的 binding，方便了数据的渲染。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以 ReSwift 规范了数据流，RxSwift 为数据的处理提供了方便，这两个类库的结合，可以产生清晰的架构和易维护的代码。&lt;&#x2F;p&gt;
&lt;p&gt;当然，前提是对它们有足够的了解，尤其是 RxSwift，也就是我们今天的主角。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-rxswift&quot;&gt;什么是 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;在 GUI 编程中，我认为比较复杂的有三个部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;非原生 UI 效果的实现（比如产品经理们经常冒出来的各种想法）。&lt;&#x2F;li&gt;
&lt;li&gt;大量状态的维护。&lt;&#x2F;li&gt;
&lt;li&gt;异步数据的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1）不在这次的讨论范畴（这里的学问也很多，比如流畅性和性能）。2) 可以通过单向数据流来解决（结合 Immutable Data）。3) 可以通过 RxSwift 来解决。那么 RxSwift 是如何处理异步数据的呢？&lt;&#x2F;p&gt;
&lt;p&gt;在说 RxSwift 之前，先来说下 Rx， &lt;a href=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;&quot;&gt;ReactiveX&lt;&#x2F;a&gt; 是一种编程模型，最初由微软开发，结合了观察者模式、迭代器模式和函数式编程的精华，来更方便地处理异步数据流。其中最重要的一个概念是 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;举个简单的例子，当别人在跟你说话时，你就是那个观察者，别人就是那个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，它有几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可能会不断地跟你说话。（&lt;code&gt;onNext:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;可能会说错话。（&lt;code&gt;onError:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;结束会说话。（&lt;code&gt;onCompleted&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;你在听到对方说的话后，也可以有几种反应：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;根据说的话，做相应的事，比如对方让你借本书给他。（&lt;code&gt;subscribe&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;把对方说的话，加工下再传达给其他人，比如对方说小张好像不太舒服，你传达给其他人时就变成了小张失恋了。（&lt;code&gt;map:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;参考其他人说的话再做处理，比如 A 说某家店很好吃，B 说某家店一般般，你需要结合两个人的意见再做定夺。（&lt;code&gt;zip:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以，从生活中也能看到 Rx 的影子。「有些事情急不得，你得等它自己熟」，异步，其实就是跟时间打交道，不同的时间，拿到的数据也会不一样。可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&quot;&gt;在线感受下&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814518766811.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814518766811.jpg 813w,&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814518766811.jpg 813w&quot;
    sizes=&quot;(max-width: 813px) 100vw, 813px&quot; width=&quot;813&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的核心是当数据有变化时，能够立刻知晓，并且通过组合和转换后，可以即时作出响应。有点像塔防，先在路上的各个节点埋好武器，然后等着小怪兽们过来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rxswift-workflow&quot;&gt;RxSwift Workflow&lt;&#x2F;h3&gt;
&lt;p&gt;大致分为这么几个阶段：先把 Native Object 变成 Observable，再通过 Observable 内置的各种强大的转换和组合能力变成新的 Observable，最后消费新的 Observable 的数据。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814540314644.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814540314644.jpg 724w,&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814540314644.jpg 724w&quot;
    sizes=&quot;(max-width: 724px) 100vw, 724px&quot; width=&quot;724&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;native-object-observable&quot;&gt;Native Object -&amp;gt; Observable&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;rx-extension&quot;&gt;.rx extension&lt;&#x2F;h5&gt;
&lt;p&gt;假设需要处理点击事件，正常的做法是给 Tap Gesture 添加一个 Target-Action，然后在那里实现具体的逻辑，这样的问题在于需要重新取名字，而且丢失了上下文。RxSwift (确切说是 RxCocoa) 给系统的诸多原生控件（包括像 &lt;code&gt;URLSession&lt;&#x2F;code&gt;）提供了 rx 扩展，所以点击的处理就变成了这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tapBackground &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UITapGestureRecognizer()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tapBackground&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;event
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;endEditing(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addGestureRecognizer(tapBackground)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是简洁了很多。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;observable-create&quot;&gt;Observable.create&lt;&#x2F;h5&gt;
&lt;p&gt;通过这个方法，可以将 Native 的 object 包装成 &lt;code&gt;Observable&lt;&#x2F;code&gt;，比如对网络请求的封装：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;response(_ request: URLRequest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;(Data, HTTPURLResponse)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dataTaskWithRequest(request) { (data, response, error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(data, httpResponse))
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;resume()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create {
&lt;&#x2F;span&gt;&lt;span&gt;			task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;cancel()
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;出于代码的简洁，略去了对 error 的处理，使用姿势类似&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response(aRequest)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(data)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有两个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Observerable&lt;&#x2F;code&gt; 返回的是一个 &lt;code&gt;Disposable&lt;&#x2F;code&gt;，表示「可扔掉」的，扔哪里呢，就扔到刚刚创建的袋子里，这样当袋子被回收（&lt;code&gt;dealloc&lt;&#x2F;code&gt;）时，会顺便执行一下 &lt;code&gt;Disposable.dispose()&lt;&#x2F;code&gt;，之前创建 &lt;code&gt;Disposable&lt;&#x2F;code&gt; 时申请的资源就会被一并释放掉。&lt;&#x2F;li&gt;
&lt;li&gt;如果有多个 subscriber 来 subscribe &lt;code&gt;response(aRequest)&lt;&#x2F;code&gt; 那么会创建多个请求，从代码也可以看得出来，来一个 observer 就创建一个 task，然后执行。这很有可能不是我们想要的，如何让多个 subscriber 共享一个结果，这个后面会提到。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;variable&quot;&gt;Variable()&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Variable(value)&lt;&#x2F;code&gt; 可以把 value 变成一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，不过前提是使用新的赋值方式 &lt;code&gt;aVariable.value = newValue&lt;&#x2F;code&gt;，来看个 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumberVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable(magicNumber)
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;magic number is &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;73
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 73
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;起初看到时，觉得还蛮神奇的，跟进去看了下，发现是通过 &lt;code&gt;subject&lt;&#x2F;code&gt; 来做的，大意是把 &lt;code&gt;value&lt;&#x2F;code&gt; 存到一个内部变量 &lt;code&gt;_value&lt;&#x2F;code&gt; 里，当调用 &lt;code&gt;value&lt;&#x2F;code&gt; 方法时，先更新 &lt;code&gt;_value&lt;&#x2F;code&gt; 值，然后调用内部的 &lt;code&gt;_subject.on(.next(newValue))&lt;&#x2F;code&gt; 方法告知 subscriber。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;subject&quot;&gt;Subject&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;&#x2F;code&gt; 简单来说是一个可以主动发射数据的 &lt;code&gt;Observable&lt;&#x2F;code&gt;，多了 &lt;code&gt;onNext(value)&lt;&#x2F;code&gt;, &lt;code&gt;onError(error)&lt;&#x2F;code&gt;, &#x27;onCompleted&#x27; 方法，可谓全能型选手。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐶&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐱&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;记得在 RAC 时代，subject 是一个不太推荐使用的功能，因为过于强大了，容易失控。RxSwift 里倒是没有太提及，但还是少用为佳。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;observable-new-observable&quot;&gt;Observable -&amp;gt; New Observable&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;&#x2F;code&gt; 的强大不仅在于它能实时更新 value，还在于它能被修改／过滤／组合等，这样就能随心所欲地构造自己想要的数据，还不用担心数据发生变化了却不知道的情况。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;combine&quot;&gt;Combine&lt;&#x2F;h5&gt;
&lt;p&gt;Combine 就是把多个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 组合起来使用，比如 &lt;code&gt;zip&lt;&#x2F;code&gt; (小提示：如果对这些函数不太敏感，可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&#x2F;&quot;&gt;实际操作下&lt;&#x2F;a&gt;，体会会更深些)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zip&lt;&#x2F;code&gt; 对应现实中的例子就是拉链，拉链需要两个元素这样才能拉上去，这里也一样，只有当两个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都有了新的值时，subscribe 才会被触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stringSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; intSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;zip(stringSubject, intSubject) { stringElement, intElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(stringElement) \(intElement)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅰️ 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅱️ 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果这里 &lt;code&gt;intSubject&lt;&#x2F;code&gt; 始终没有执行 &lt;code&gt;onNext&lt;&#x2F;code&gt;，那么将不会有输出，就像拉链掉了一边的链子就拉不上了。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;zip&lt;&#x2F;code&gt;，还有其他的 combine 的姿势，比如 &lt;code&gt;combineLatest&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;switchLatest&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;transform&quot;&gt;Transform&lt;&#x2F;h5&gt;
&lt;p&gt;这是最常见的操作了，对一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的数值做一些小改动，然后产出新的值，依旧是一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;of(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map { $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是大致的实现（摘自官网）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; ObservableType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;myMap&amp;lt;R&amp;gt;(transform: E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; R) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;R&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe { e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; e {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value):
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; transform(value)
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error):
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(error))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed:
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; subscription
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接受一个 transform 闭包，然后返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因为接下来使用者将会对 &lt;code&gt;myMap&lt;&#x2F;code&gt; 的结果进行 subscribe，所以需要在 create 内部 subscribe 一下，不然最开始的那个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 就是个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt;，一个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt; 是不会产生新的数据的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;filter&quot;&gt;Filter&lt;&#x2F;h5&gt;
&lt;p&gt;Filter 的作用是对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 传过来的数据进行过滤，只有符合条件的才有资格被 subscribe。写法上跟 map 差不多，就不赘述了。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;connect&quot;&gt;Connect&lt;&#x2F;h5&gt;
&lt;p&gt;这是挺有意思的一块，在之前介绍 &lt;code&gt;Observable.create&lt;&#x2F;code&gt; 时有提到过，一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被多次 subscribe 就会被多次触发，如果一个网络请求只想被触发一次，同时支持多个 subscriber，就可以使用 &lt;code&gt;publish&lt;&#x2F;code&gt; + &lt;code&gt;connect&lt;&#x2F;code&gt; 的组合。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 使用了 &lt;code&gt;publish()&lt;&#x2F;code&gt; 方法后，正常的 subscribe 就不会触发它了，除非 &lt;code&gt;connect()&lt;&#x2F;code&gt; 方法被调用。而且每次 subscribe 不会导致 &lt;code&gt;Observable&lt;&#x2F;code&gt; 重新针对 observer 处理一遍。看一下这张图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;documentation&#x2F;operators&#x2F;images&#x2F;publishConnect.c.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有两块需要注意：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之前的两次 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 并没有产生新的 value。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之后 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 的，只是等待新的 value，同时新的 value 还会分发给之前的 subscriber。&lt;&#x2F;li&gt;
&lt;li&gt;即使所有的 &lt;code&gt;subscription&lt;&#x2F;code&gt; 被 &lt;code&gt;dispose&lt;&#x2F;code&gt;, &lt;code&gt;Observable&lt;&#x2F;code&gt; 依旧处于 &lt;code&gt;hot&lt;&#x2F;code&gt; 状态，就好像还以为有人关心新的值一样。（这可能不是想要的结果）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对第 3 点，可以使用 &lt;code&gt;refcount()&lt;&#x2F;code&gt; 来代替 &lt;code&gt;connect()&lt;&#x2F;code&gt;，前者会在没有 subscriber 时自动「冷」下来，不会再产生新的值。（Demo 取自&lt;a href=&quot;http:&#x2F;&#x2F;www.tailec.com&#x2F;blog&#x2F;understanding-publish-connect-refcount-share&quot;&gt;这里&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myObservable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;interval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, scheduler: MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;publish()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;refCount() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mySubscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Disposing at 3 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    mySubscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dispose()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Subscribing again at 6 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Starting at 0 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;span&gt;Next: 2
&lt;&#x2F;span&gt;&lt;span&gt;Disposing at 3 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Subscribing again at 6 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，3 秒后 subscription dispose，此时没有任何 subscriber 还关心 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因此就重置了，所以 6 秒后又回到了初始状态（如果变成 &lt;code&gt;connect&lt;&#x2F;code&gt; 方法的话，会发现 6 秒后会输出 &lt;code&gt;Next: 6 &#x2F; Next: 7&lt;&#x2F;code&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;那如果后加入的 subscriber 想要之前的数据怎么办？可以对原始的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 设置 &lt;code&gt;replay(n)&lt;&#x2F;code&gt;，表示最多返回 n 个元素给后加入的 subscriber。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;p&gt;上面介绍的是最基本的概念。顺便提一下比较常见的几个问题：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-chu-li-scheduler&quot;&gt;如何处理 Scheduler？&lt;&#x2F;h4&gt;
&lt;p&gt;默认代码都是在当前线程中执行的，如果要手动切换线程，可以使用 &lt;code&gt;subsribeOn&lt;&#x2F;code&gt; 和 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 两种方式，一般来说后者用得会多一些，那这两者有什么区别呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 跟位置无关，也就是无论在链式调用的什么地方，&lt;code&gt;Observable&lt;&#x2F;code&gt; 和 &lt;code&gt;subscription&lt;&#x2F;code&gt; 都会受影响；而 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 则仅对之后的调用产生影响，看个 Demo：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; observable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { (observer: AnyObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Disposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;observable thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onCompleted()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;observable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map1 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(ConcurrentDispatchQueueScheduler(qos: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;userInteractive)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map2 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;subscribe thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;observeOn&lt;&#x2F;code&gt;，那么输出如下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 observable thread 和 map1 thread 依旧保持当前线程，但 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 之后就变成了另一个线程。&lt;&#x2F;p&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt;，那么会输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到全都变成了 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 指定的 Queue。所以 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 的感染力很强，连 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都能影响到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cold-observable-he-hot-observable&quot;&gt;Cold Observable 和 Hot Observable&lt;&#x2F;h4&gt;
&lt;p&gt;Cold 相当于 InActive，就像西部世界里，未被激活的机器人一样；Hot 就是处于工作状态的机器人。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;subscription-wei-shi-yao-yao-dispose&quot;&gt;Subscription 为什么要 Dispose？&lt;&#x2F;h4&gt;
&lt;p&gt;因为有了 &lt;code&gt;Subscriber&lt;&#x2F;code&gt; 所以 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被激活，然后内部就会使用各种变量来保存资源，如果不 &lt;code&gt;dispose&lt;&#x2F;code&gt; 的话，这些资源就会一直被 keep，很容易造成内存泄漏。&lt;&#x2F;p&gt;
&lt;p&gt;同时手动 dispose 又嫌麻烦，所以就有了 &lt;code&gt;DisposeBag&lt;&#x2F;code&gt;，当这个 Bag 被回收时，Bag 里面的 subscription 会自动被 dispose，相当于从 MRC 变成了 ARC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;RxSwift 如果概念上整理清楚了，会发现其实并不难，多从 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的角度去思考问题，多想着转换和组合，慢慢就会从命令式编程转到声明式编程，对于抽象能力和代码的可读性都会有提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>「无侵入页面加载完成检测」的一些思路</title>
            <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/page-open-detect/</link>
            <guid>https://limboy.me/posts/page-open-detect/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;在诸多的性能指标里，「页面加载完成耗时」是非常重要的一项，尤其是重点页面，如详情页，1 秒内打开和 3 秒内打开差别是很大的，直接影响 GMV。&lt;&#x2F;p&gt;
&lt;p&gt;再来说一下「页面加载完成」的定义，不是页面 layout 完成，不是请求完成，而是图片和文字都已被渲染完成。比较常见的做法是在页面的 &lt;code&gt;ViewDidAppear&lt;&#x2F;code&gt; 和请求完成且数据被转换成 Model 之后分别打点，前者表示页面出现的时间，后者表示数据获取的时间，基本可以体现出页面加载时间。但也有一些问题比如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;业务经常调整，所以埋点也需要调整，这个过程中很容易出现错埋、漏埋的问题。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面会有多个请求，只有这些请求全部完成后，页面才能渲染，这时数据请求埋点就会有点麻烦。&lt;&#x2F;li&gt;
&lt;li&gt;这几个时间点跟用户真正看到的时间还是会有差别，不够准确。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以一种无侵入的检测机制就很重要了。正好在&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&quot;&gt;掘金&lt;&#x2F;a&gt;上看到了&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&#x2F;post&#x2F;58440e98128fe1006c4c951d&quot;&gt;用图像识别来自动确认网页加载成功&lt;&#x2F;a&gt;，受此启发，觉得此路有戏。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-an&quot;&gt;实现方案&lt;&#x2F;h3&gt;
&lt;p&gt;当 push／present 一个页面时，隔一段时间去截屏并分析当前页面的空白（纯色）部分占比，如果超过某个阈值，就认为页面未加载完成。这里会有几个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;需要主动去截屏检测，而不能加载完成后告知。这其中的差别在于无法得知具体哪个时间加载完成了。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面被故意设计成有较多留白，这时就不容易判断了。&lt;&#x2F;li&gt;
&lt;li&gt;「未加载完成」不同的页面会有不同的表现。&lt;&#x2F;li&gt;
&lt;li&gt;当用户滑动时，有可能之前的页面已经加载了&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;chun-se-zhan-bi&quot;&gt;纯色占比&lt;&#x2F;h3&gt;
&lt;p&gt;最简单的方案就是把图片上的每个像素点都取出来，放到一个字典里，之后如果有相同色值的像素，那么 &lt;code&gt;count++&lt;&#x2F;code&gt;。问题也很明显，一个屏幕几十万个点，这一轮都还没分析完，用户已经打开第二个页面了。&lt;&#x2F;p&gt;
&lt;p&gt;再回到想要达到的目标：纯色部分占比。那么将图片压缩到更小的 size 不就行了么。老套路，铺张画布，把图片浇上去。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)imageWithImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)image scaledToSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span&gt;)newSize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newSize, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawInRect:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsEndImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; newImage;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就是真正的计算了，过程也比较简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 UIImage 转换成 CGImage Data
&lt;&#x2F;span&gt;&lt;span&gt;CGDataProviderRef provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImageGetDataProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;CFDataRef pixelData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGDataProviderCopyData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(provider)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetBytePtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; dataLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; R,G,B, and A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 用来装 color ，key 为 R-G-B 字符串，value 为出现次数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; colorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(dataLength); i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		colorCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; green &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 以 R-G-B 为 key
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, red, green, blue&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;colors[result]) {
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @([colors[result] integerValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 按出现次数排序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allValues&lt;&#x2F;span&gt;&lt;span&gt; sortedArrayUsingComparator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSComparisonResult&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[obj2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedDescending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedAscending&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 计算占比，并从高到低排序，取前 10 个
&lt;&#x2F;span&gt;&lt;span&gt;[sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; _Nonnull stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[percent addObject:@([count intValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(colorCount))];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先把 &lt;code&gt;UIImage&lt;&#x2F;code&gt; 转换成 &lt;code&gt;CFDataRef&lt;&#x2F;code&gt;，再遍历获取 &lt;code&gt;Color&lt;&#x2F;code&gt;，对相同的的 &lt;code&gt;Color&lt;&#x2F;code&gt; 进行累加，最后排一下序即可。&lt;&#x2F;p&gt;
&lt;p&gt;返回的数据类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.4586517&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.06202247&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.02921348&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能拿到了颜色的占比。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;p&gt;假设设定纯色区域超过 30% 认为没有完全加载，来找几个 Demo 测试下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifqtcztfhbqwendcmmzdambqgyyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果符合「未加载完毕」定义&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4139326&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.05438202&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再换一个&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrgizrwme2wgndcmmzdambqmeyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然没有加载完，但结果少于 30%&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.2788764&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.04853933&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果把值设得小一些，那么有可能「误杀」，比如这个界面&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s17.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrdimlemfrggndcmmzdambqmeyde_600x1067.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4530337&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06561798&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.02921348&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个界面已经加载完成了，但由于空白面积较多，因此纯色的占比也较多，如果按照之前的公式就会误伤，如何解决这个问题，之后再讨论。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看另一个未加载完毕的页面：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ie4tszldguytanlcmmzdambqgqyde_750x1278.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个页面的结果是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.3433708&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果中间部分加载出来（也就是面积最大的那一块），那么就变成了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这也属于页面未加载完成，但又是一个新的规则了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;再来回顾一下「截图分析纯色占比」带来的问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;隔 N 秒去截图时，用户可能滑到第 2 屏了，这时第 1 屏加载完了，但 2 屏还没有加载完，不应该属于「页面加载未完成」范畴。&lt;&#x2F;li&gt;
&lt;li&gt;不同页面的纯色特性不一样，有的比较分散，有的正常状态下也会有比较多的纯色，这样就容易误判。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于场景 1 还没有想到特别好的处理方式，一种办法是通过判断 runloop 的 mode 是否等于 &lt;code&gt;UITrackingRunLoopMode&lt;&#x2F;code&gt; 来判断是否有滑动，不太优雅，但可能行得通。&lt;&#x2F;p&gt;
&lt;p&gt;对于场景 2 可以把数据发送到服务端，让服务端去计算某个页面的纯色分布情况，比如大部分都是 &amp;lt; 10%，有少部分在 20% 以上，那么就可以判定为未加载完成，不过成本还是有点高。&lt;&#x2F;p&gt;
&lt;p&gt;所以这个方案虽然可以做到无侵入，但在结果判定上还是存在些缺陷，期待有更成熟的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReSwift 介绍</title>
            <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reswift-analyze/</link>
            <guid>https://limboy.me/posts/reswift-analyze/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-reswift&quot;&gt;什么是 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;ReSwift&lt;&#x2F;a&gt; 是基于 &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; 思想实现的 Swift 类库。基本的流程如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;14808452245719.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当用户点击了视图上的某个元素时，会发出一个 &lt;code&gt;Action&lt;&#x2F;code&gt;，这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 包含了两个基本元素：&lt;code&gt;Action Type&lt;&#x2F;code&gt; 和 &lt;code&gt;Action Payload&lt;&#x2F;code&gt;，比如「点击收藏按钮」这个 &lt;code&gt;Action&lt;&#x2F;code&gt;，可能会被描述为：&lt;code&gt;Action(&amp;quot;CollectButtonTapped&amp;quot;, [&amp;quot;itemID&amp;quot;: 189])&lt;&#x2F;code&gt;。然后这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 就会到达 &lt;code&gt;Store&lt;&#x2F;code&gt;，&lt;code&gt;Store&lt;&#x2F;code&gt; 也很简单，只做两件事：1. 接收 &lt;code&gt;Action&lt;&#x2F;code&gt;；2. 将 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;Reducer&lt;&#x2F;code&gt;。&lt;code&gt;Reducer&lt;&#x2F;code&gt; 做的事情就更简单了，接收 &lt;code&gt;Store&lt;&#x2F;code&gt; 发出的 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt;，内部运算之后，返回一个新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;code&gt;Store&lt;&#x2F;code&gt; 拿到了新的 &lt;code&gt;State&lt;&#x2F;code&gt; 后，再把 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;View&lt;&#x2F;code&gt;。&lt;code&gt;View&lt;&#x2F;code&gt; 渲染新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;简单描述下各个模块的职责：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;View&lt;&#x2F;code&gt; 可以理解为一个「壳」，所有的数据都由 &lt;code&gt;State&lt;&#x2F;code&gt; 提供，这样就把表现层和数据层分开了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;view = f(state)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;action&quot;&gt;Action&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Action&lt;&#x2F;code&gt; 用来描述发生了什么事情，比如不小心用脚踢到了椅子，神经系统就会把这个信息传递给大脑，这个信息就是 &lt;code&gt;Action&lt;&#x2F;code&gt;，而大脑就是之后要讲到的 &lt;code&gt;Store&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;store&quot;&gt;Store&lt;&#x2F;h4&gt;
&lt;p&gt;这是核心模块，就像大脑会不停地接受到各种 &lt;code&gt;Action&lt;&#x2F;code&gt;，并作出反应，只不过在这里 &lt;code&gt;Store&lt;&#x2F;code&gt; 并不具备「做决定」的能力，而是把这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 交给了所有可能关心它的 &lt;code&gt;Reducers&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 推荐一个 App 只有一个 &lt;code&gt;Store&lt;&#x2F;code&gt;，在实际情况中，如果这么做的话，会带来不少的副作用，比如所有的模块都需要依赖 &lt;code&gt;Store&lt;&#x2F;code&gt;，这个 &lt;code&gt;State&lt;&#x2F;code&gt; 会很庞大，不可避免的会影响性能。所以，单个页面或模块有一个 &lt;code&gt;Store&lt;&#x2F;code&gt; 会比较合适。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;state&quot;&gt;State&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;State&lt;&#x2F;code&gt; 是一个隐形的杀手，因为使用它极其方便，而它的危害也不会瞬间爆发，就像温水煮青蛙一样，等发现问题越来越多、被各种多线程问题困扰时，就会感受到它的威力了。&lt;&#x2F;p&gt;
&lt;p&gt;所以把 &lt;code&gt;State&lt;&#x2F;code&gt; 单独拎出来，并且使用 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2015&#x2F;414&#x2F;&quot;&gt;Value Types&lt;&#x2F;a&gt; 来解决各种多线程或变量被修改导致的问题。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2016&#x2F;419&#x2F;&quot;&gt;Protocol and Value Oriented Programming in UIKit Apps&lt;&#x2F;a&gt; 中也推荐使用 Value Composition，而不是继承，同时把 State 集中到一个地方处理，也有助于 Local Reasoning。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-shi-yong-reswift&quot;&gt;为什么要使用 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;确切说来是为什么要使用「单向数据流」的架构模式，主要有这么几个好处：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;数据单向流动容易让结构变得清晰，出问题时也更容易排查。&lt;&#x2F;li&gt;
&lt;li&gt;使用了 「Value Types」作为流动的数据，避免各种诡异的「不小心被篡改」或多线程 bug。&lt;&#x2F;li&gt;
&lt;li&gt;在统一的入口处理数据（State），比起散落在各处更加容易控制。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;Readme&lt;&#x2F;a&gt; 里带了一个简单的 Demo，可以感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ma-yi-pie&quot;&gt;源码一瞥&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift (3.0.0) 的源码很精简，对 Swift 熟悉的话，很快就能看完。说下我自己在看源码的过程中学到的一些 tips 吧。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reduce-de-shi-yong&quot;&gt;Reduce 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;&#x2F;code&gt; 在函数式编程的领域里会经常被用到，甚至可以实现 &lt;code&gt;map&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;filter&lt;&#x2F;code&gt; 等功能，足见其强大。它的运行规则是以函数的处理结果作为初始值，再结合数组中的元素返回处理结果，不断循环，直到数组中的元素全部处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;在 Swift 中，它是 &lt;code&gt;Sequence&lt;&#x2F;code&gt; 协议扩展的一个方法，签名如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;reduce&amp;lt;Result&amp;gt;(_ initialResult: Result, _ nextPartialResult: (Result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Element) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Result) rethrows -&amp;gt; Result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ReSwift 中有好几个地方都用到了 &lt;code&gt;reduce&lt;&#x2F;code&gt;，比如通过它来达到 &lt;code&gt;combineReducer&lt;&#x2F;code&gt; 的效果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public struct&lt;&#x2F;span&gt;&lt;span&gt; CombinedReducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; self.reducers 包含了 AnyReducer 的实例
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reduce(state) { (currentState, reducer) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: action, state: currentState)
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;按照入队列的先后，reducer 被依次执行，并且把生成的新的 &lt;code&gt;State&lt;&#x2F;code&gt; 作为下一个循环的初始值传递给下一个 reducer。&lt;&#x2F;p&gt;
&lt;p&gt;在处理 &lt;code&gt;middleware&lt;&#x2F;code&gt; 时，也有用到类似的技术，不过那个更加复杂些，涉及到&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;zh-hans&#x2F;%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0&quot;&gt;高阶函数&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhuang-shi-qi-mo-shi&quot;&gt;装饰器模式&lt;&#x2F;h4&gt;
&lt;p&gt;装饰器模式简单来说就是在不改变类／方法原有功能的前提下，提供了一些额外的能力。比较常见的有 validator，客户端提交的数据要入库前需要做一下校验，不通过的话直接返回。在 python 里装饰器非常常见，比如在一个方法上加一个 &lt;code&gt;@cached&lt;&#x2F;code&gt; 或者 &lt;code&gt;@validate&lt;&#x2F;code&gt; 等 annotation。&lt;&#x2F;p&gt;
&lt;p&gt;在实现 Reducer 时，有用到这个模式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public protocol Reducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleAction(action: Action, state: ReducerStateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension Reducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; withSpecificTypes(action, state: state, function: handleAction)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;_handleAction&lt;&#x2F;code&gt; 对 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 做了个校验，（&lt;code&gt;withSpecificTypes&lt;&#x2F;code&gt; 函数里如果校验不通过，&lt;code&gt;handleAction&lt;&#x2F;code&gt; 不会被执行），这样对于使用者，只需继承 Reducer 实现 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 方法，ReSwift 内部调用时会使用 &lt;code&gt;_handleAction&lt;&#x2F;code&gt; 来做一些校验。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;StoreSubscriber&lt;&#x2F;code&gt; 里也有用到类似的技术。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;associatedtype-de-shi-yong&quot;&gt;associatedtype 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;通过 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;，可以让 protocol 使用 &lt;code&gt;generic&lt;&#x2F;code&gt;, Natasha 还写过一篇关于 &lt;a href=&quot;https:&#x2F;&#x2F;www.natashatherobot.com&#x2F;swift-what-are-protocols-with-associated-types&#x2F;&quot;&gt;PAT 使用的文章&lt;&#x2F;a&gt;，里面以宠物小精灵为例，通过 PAT 让不同的小精灵具备了不同的能力。不过使用了 &lt;code&gt;associatedtype&lt;&#x2F;code&gt; 或 &lt;code&gt;Self&lt;&#x2F;code&gt; 后，就不能作为变量的类型来声明了，比如 &lt;code&gt;var something: AProtoclWithAssociatedType&lt;&#x2F;code&gt; 这样编译器会报错，具体原因可以参考&lt;a href=&quot;http:&#x2F;&#x2F;krakendev.io&#x2F;blog&#x2F;generic-protocols-and-their-shortcomings&quot;&gt;这篇文章&lt;&#x2F;a&gt;，主要是因为无法指定 Generic 的类型，导致编译器无法在编译期间就确定具体的类型，对于强类型语言来说，这是不能接受的。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 中，在定义 StoreType 时，有用到 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; StoreType {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype State: StateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Initializes the store with a reducer and an intial state.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(reducer: AnyReducer, state: State?)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在定义 reducer protocol 时，也有用到（也是关联了 StateType）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dui-wai-zhi-du-dui-nei-ke-du-xie&quot;&gt;对外只读，对内可读写&lt;&#x2F;h4&gt;
&lt;p&gt;在 OC 时代，通常的做法是在 .h 里声明为 &lt;code&gt;readonly&lt;&#x2F;code&gt;，然后在 .m 的 class extension 里，将同名的属性声明为 &lt;code&gt;readwrite&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Swift 没有头文件的概念，直接一句话搞定 &lt;code&gt;private(set)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; Subscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;State: StateType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private(set) weak var&lt;&#x2F;span&gt;&lt;span&gt; subscriber: AnyStoreSubscriber? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; selector: ((State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any)?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;subscription 希望外部可以拿到 subscriber，但不要修改它，于是在前面加了 &lt;code&gt;private(set)&lt;&#x2F;code&gt;，也就是把 &lt;code&gt;set&lt;&#x2F;code&gt; 方法标记为 private。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift 还是挺值的一试的，一方面是因为单向数据流确实对程序的清晰度有帮助，另一方面 ReSwift 的代码很简洁，内部实现比较容易搞明白，这样即使出问题也比较容易定位。&lt;a href=&quot;https:&#x2F;&#x2F;realm.io&#x2F;news&#x2F;benji-encz-unidirectional-data-flow-swift&#x2F;&quot;&gt;Realm&lt;&#x2F;a&gt; 上有作者分享的案例，可以参考下。不足嘛肯定也有，比如功能比较简单，只是做了数据流，缺少 Diff 支持，在做列表更新／删除时会比较痛苦；如何与 MVVM 等比较成熟的架构有效地结合起来等。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，由于数据都通过 State 来传递，可以在出 bug 时，上传当时的 state 内容方便定位；还可以基于 State 来做&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift#demo&quot;&gt;时光机&lt;&#x2F;a&gt;。不妨在 Side Project 中尝试下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路·续</title>
            <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components-continued/</link>
            <guid>https://limboy.me/posts/mgj-components-continued/</guid>
            <description>&lt;p&gt;前几天在「移动学习分享群」分享了关于蘑菇街组件化方面的一点经验，由于时间和文字描述方面的限制，很多东西表述的不是很清楚，让一些同学产生了疑惑，casatwy 老师也写了篇&lt;a href=&quot;http:&#x2F;&#x2F;casatwy.com&#x2F;iOS-Modulization.html&quot;&gt;文章&lt;&#x2F;a&gt;来纠正其中的一些实现，看完之后确实有不少启发。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yi-de-diao-yong-shi-xian&quot;&gt;统一的调用实现&lt;&#x2F;h4&gt;
&lt;p&gt;将「URL 调用」和「组件间调用」通过 runtime 达到统一，通过 prefix 的方式来避免安全上的一些漏洞。看起来确实会舒服些，也比较灵活。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-guo-category-lai-tong-yi-zu-jian-dui-wai-bao-lu-de-jie-kou&quot;&gt;通过 Category 来统一组件对外暴露的接口&lt;&#x2F;h4&gt;
&lt;p&gt;支持 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 但最终还是走的 target-action，跟内部调用无差别。
这也是我们目前有待提升的点，想知道某个组件支持哪些 URL 或 哪些 Protocol 不够方便，URL 的参数传递也是个问题，将来 URL 发生变动的话，调整起来也比较麻烦。后续会在这块再加强下。&lt;&#x2F;p&gt;
&lt;p&gt;当初决定使用 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 来做页面间的跳转，而不是方法调用，主要是考虑到我们的大部分场景都可以通过这种方式解决，因此就这么定了。&lt;code&gt;openURL:&lt;&#x2F;code&gt; 更像 Android 里的 「隐式 Intent」，不关心谁来处理这个 URL，由系统（MGJRouter）来决定。而方法调用更像「显式 Intent」或者 RPC，明确地知道应该由谁来处理。前者的好处是可以更少地关心业务逻辑，后者的好处是可以很方便地完成参数传递。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geng-ming-que-de-biao-shu&quot;&gt;更明确的表述&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;openURL&lt;&#x2F;code&gt; 只是页面间的调用方式&lt;&#x2F;li&gt;
&lt;li&gt;组件间的调用通过 protocol 来实现&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每个组件都有一个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，这个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，主要做了三件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;注册这个组件关心的 URL&lt;&#x2F;li&gt;
&lt;li&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;li&gt;
&lt;li&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-guan-xin-de-url&quot;&gt;注册这个组件关心的 URL&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;MGJRouter.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;MGJRouter.png 216w,&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;MGJRouter.png 216w&quot;
    sizes=&quot;(max-width: 216px) 100vw, 216px&quot; width=&quot;216&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;URL 的注册会有对应的 block，拿到这个 URL 后，想怎么折腾就怎么折腾。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-neng-gou-bei-diao-yong-de-fang-fa-shu-xing&quot;&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;h4&gt;
&lt;p&gt;当有一些场景不适合用 URL 的方式时，就可以通过注册 protocol 来实现&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;ModuleManager.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;ModuleManager.png 216w,&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;ModuleManager.png 216w&quot;
    sizes=&quot;(max-width: 216px) 100vw, 216px&quot; width=&quot;216&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager registerClass:ClassA forProtocol:ProtocolA]&lt;&#x2F;code&gt; 的结果就是在 MM 内部维护的 dict 里新加了一个映射关系。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager classForProtocol:ProtocolA]&lt;&#x2F;code&gt; 的返回结果就是之前在 MM 内部 dict 里 protocol 对应的 class，使用方不需要关心这个 class 是个什么东东，反正实现了 &lt;code&gt;ProtocolA&lt;&#x2F;code&gt; 协议，拿来用就行。&lt;&#x2F;p&gt;
&lt;p&gt;这里需要有一个公共的地方来容纳这些 public protocl，也就是图中的 &lt;code&gt;PublicProtocl.h&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zai-app-sheng-ming-zhou-qi-de-bu-tong-jie-duan-zuo-bu-tong-de-xiang-ying&quot;&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;h4&gt;
&lt;p&gt;上一篇文章中有提到，这里简单说下，&lt;code&gt;ModuleEntry&lt;&#x2F;code&gt;，实现某个特定的协议(该协议继承自 &lt;code&gt;UIApplicationDelegate&lt;&#x2F;code&gt; )，然后实现对应的方法即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhen-dui-casatwy-na-pian-wen-zhang-de-yi-xie-hui-ying&quot;&gt;针对 casatwy 那篇文章的一些回应&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单纯以 openURL 的方式是无法胜任让一个 App 去实施组件化架构的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同意，所以我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;根本无法表达非常规对象&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;单纯地通过 &lt;code&gt;openURL&lt;&#x2F;code&gt; 确实不太好表达，但我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册 URL 的目的其实是一个服务发现的过程，在 iOS 领域中，服务发现的方式是不需要通过主动注册的，使用 runtime 就可以了。另外，注册部分的代码的维护是一个相对麻烦的事情，每一次支持新调用时，都要去维护一次注册列表。如果有调用被弃用了，是经常会忘记删项目的。runtime 由于不存在注册过程，那就也不会产生维护的操作，维护成本就降低了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于通过 runtime 做到了服务的自动发现，拓展调用接口的任务就仅在于各自的模块，任何一次新接口添加，新业务添加，都不必去主工程做操作，十分透明。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;尽管通过 runtime 可以做到这些，但最终还是要通过维护 &lt;code&gt;Category&lt;&#x2F;code&gt; 来暴露新增的 Target-Action，所以 runtime 虽然不存在注册过程，但实际使用过程中，还是会有注册过程，还是需要去维护。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有拆分远程调用和本地间调用&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;从上面的图可以看到，我们其实是分为「组件间调用」和「页面间跳转」两个维度，只要 app 响应某个 URL，无论是 app 内还是 app 外都可以，而「组件间」调用走的完全是另一条路，所以也不会有安全上的问题。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;以远程调用的方式为本地间调用提供服务&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地间调用无法传递非常规参数，复杂参数的传递方式非常丑陋&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上，使用 Protocol&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须要在 app 启动时注册 URL 响应者&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;是的，就蘑菇街的方案来说，这步不可避免。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个不必要的操作会导致不必要的维护成本&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;维护只是在组件内部做调整，并不需要在主工程里做修改。如果采用 Category 的方式，好处是不用在启动时注册，但当组件的接口有变动时，依然要维护 Category，这个成本是免不了的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;新增组件化的调用路径时，蘑菇街的操作相对复杂
在本文给出的组件化方案中，响应者唯一要做的事情就是提供 Target 和 Action，并不需要再做其它的事情&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提供了 Target-Action 之后，还是要在 Category 里添加一个 wrapper 的吧?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有针对 target 层做封装
这种做法使得所有的跨组件调用请求直接 hit 到业务模块，业务模块必然因此变得臃肿难以维护，属于侵入式架构。应该将原本属于调用相应的部分拿出来放在 target-action 中，才能尽可能保证不将无关代码侵入到原有业务组件中，才能保证业务组件未来的迁移和修改不受组件调用的影响，以及降低为项目的组件化实施而带来的时间成本。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「将原本属于调用相应的部分拿出来放在 target-action 中」并不是唯一可行的方式，使用 Protocol&#x2F;URL 注册也可以达到效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;casatwy 的一些思路和思考问题的角度挺不错的，也从他的文章中收获了不少，希望这篇文章能把之前模糊的一些观念说得足够清楚，还有问题的话欢迎继续交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路</title>
            <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components/</link>
            <guid>https://limboy.me/posts/mgj-components/</guid>
            <description>&lt;p&gt;在组件化之前，蘑菇街 App 的代码都是在一个工程里开发的，在人比较少，业务发展不是很快的时候，这样是比较合适的，能一定程度地保证开发效率。&lt;&#x2F;p&gt;
&lt;p&gt;慢慢地代码量多了起来，开发人员也多了起来，业务发展也快了起来，这时单一工程开发模式就会显露出一些弊端&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;耦合比较严重（因为没有明确的约束，「组件」间引用的现象会比较多）&lt;&#x2F;li&gt;
&lt;li&gt;容易出现冲突（尤其是使用 Xib，还有就是 Xcode Project，虽说有&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;truebit&#x2F;xUnique&quot;&gt;脚本&lt;&#x2F;a&gt;可以改善）&lt;&#x2F;li&gt;
&lt;li&gt;业务方的开发效率不够高（只关心自己的组件，却要编译整个项目，与其他不相干的代码糅合在一起）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了解决这些问题，就采取了「组件化」策略。它能带来这些好处&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;加快编译速度（不用编译主客那一大坨代码了）&lt;&#x2F;li&gt;
&lt;li&gt;自由选择开发姿势（MVC &#x2F; MVVM &#x2F; FRP）&lt;&#x2F;li&gt;
&lt;li&gt;方便 QA 有针对性地测试&lt;&#x2F;li&gt;
&lt;li&gt;提高业务开发效率&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先来看下，组件化之后的一个大概架构&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575533415332.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575533415332.jpg 812w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575533415332.jpg 812w&quot;
    sizes=&quot;(max-width: 812px) 100vw, 812px&quot; width=&quot;812&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「组件化」顾名思义就是把一个大的 App 拆成一个个小的组件，相互之间不直接引用。那如何做呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-shi&quot;&gt;实现方式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zu-jian-jian-tong-xin&quot;&gt;组件间通信&lt;&#x2F;h4&gt;
&lt;p&gt;以 iOS 为例，由于之前就是采用的 URL 跳转模式，理论上页面之间的跳转只需 open 一个 URL 即可。所以对于一个组件来说，只要定义「支持哪些 URL」即可，比如详情页，大概可以这么做的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首页只需调用 &lt;code&gt;[MGJRouter openURL:@&amp;quot;mgj:&#x2F;&#x2F;detail?id=404&amp;quot;]&lt;&#x2F;code&gt; 就可以打开相应的详情页。&lt;&#x2F;p&gt;
&lt;p&gt;那问题又来了，我怎么知道有哪些可用的 URL？为此，我们做了一个后台专门来管理。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575445324533.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575445324533.jpg 1165w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575445324533.jpg 1165w&quot;
    sizes=&quot;(max-width: 1165px) 100vw, 1165px&quot; width=&quot;1165&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后可以把这些短链生成不同平台所需的文件，iOS 平台生成 .{h,m} 文件，Android 平台生成 .java 文件，并注入到项目中。这样开发人员只需在项目中打开该文件就知道所有的可用 URL 了。&lt;&#x2F;p&gt;
&lt;p&gt;目前还有一块没有做，就是参数这块，虽然描述了短链，但真想要生成完整的 URL，还需要知道如何传参数，这个正在开发中。&lt;&#x2F;p&gt;
&lt;p&gt;还有一种情况会稍微麻烦点，就是「组件 A」要调用「组件 B」的某个方法，比如在商品详情页要展示购物车的商品数量，就涉及到向购物车组件拿数据。&lt;&#x2F;p&gt;
&lt;p&gt;类似这种同步调用，iOS 之前采用了比较简单的方案，还是依托于 &lt;code&gt;MGJRouter&lt;&#x2F;code&gt;，不过添加了新的方法 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt;，注册时也使用新的方法进行注册&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toObjectHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParamters){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some calculation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时 &lt;code&gt;NSNumber *orderCount = [MGJRouter objectForURL:@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot;]&lt;&#x2F;code&gt; 这样就拿到了购物车里的商品数。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂但更具通用性的方法是使用「协议」 &amp;lt;-&amp;gt; 「类」绑定的方式，还是以购物车为例，购物车组件可以提供这么个 Protocol&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;MGJCart &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;orderCount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到通过协议可以直接指定返回的数据类型。然后在购物车组件内再新建个类实现这个协议，假设这个类名为&lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，接着就可以把它与协议关联起来 &lt;code&gt;[ModuleManager registerClass:MGJCartImpl forProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;，对于使用方来说，要拿到这个 &lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，需要调用 &lt;code&gt;[ModuleManager classForProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;。拿到之后再调用 &lt;code&gt;+ (NSInteger)orderCount&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;那么，这个协议放在哪里比较合适呢？如果跟组件放在一起，使用时还是要先引入组件，如果有多个这样的组件就会比较麻烦了。所以我们把这些公共的协议统一放到了 &lt;code&gt;PublicProtocolDomain.h&lt;&#x2F;code&gt; 下，到时只依赖这一个文件就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;Android 也是采用类似的方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zu-jian-sheng-ming-zhou-qi-guan-li&quot;&gt;组件生命周期管理&lt;&#x2F;h4&gt;
&lt;p&gt;理想中的组件可以很方便地集成到主客中，并且有跟 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 一致的回调方法。这也是 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看现在的入口方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didFinishLaunchingWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)launchOptions
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [MGJApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startApp&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] loadModuleFromPlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] pathForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;modules&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; ofType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;plist&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didFinishLaunchingWithOptions:launchOptions&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackLaunchTime&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 &lt;code&gt;[MGJApp startApp]&lt;&#x2F;code&gt; 主要负责一些 SDK 的初始化。&lt;code&gt;[self trackLaunchTime]&lt;&#x2F;code&gt; 是我们打的一个点，用来监测从 &lt;code&gt;main&lt;&#x2F;code&gt; 方法开始到入口方法调用结束花了多长时间。其他的都由 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 搞定，&lt;code&gt;loadModuleFromPlist:pathForResource:&lt;&#x2F;code&gt; 方法会读取 bundle 里的一个 plist 文件，这个文件的内容大概是这样的&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575489295366.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575489295366.jpg 453w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575489295366.jpg 453w&quot;
    sizes=&quot;(max-width: 453px) 100vw, 453px&quot; width=&quot;453&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个 &lt;code&gt;Module&lt;&#x2F;code&gt; 都实现了 &lt;code&gt;ModuleProtocol&lt;&#x2F;code&gt;，其中有一个 &lt;code&gt;- (BOOL)applicaiton:didFinishLaunchingWithOptions:&lt;&#x2F;code&gt; 方法，如果实现了的话，就会被调用。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题就是，系统的一些事件会有通知，比如 &lt;code&gt;applicationDidBecomeActive&lt;&#x2F;code&gt; 会有对应的 &lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;&#x2F;code&gt;，组件如果要做响应的话，只需监听这个系统通知即可。但也有一些事件是没有通知的，比如 &lt;code&gt;- application:didRegisterUserNotificationSettings:&lt;&#x2F;code&gt;，这时组件如果也要做点事情，怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;一个简单的解决方法是在 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 的各个方法里，手动调一遍组件的对应的方法，如果有就执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didRegisterForRemoteNotificationsWithDeviceToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)deviceToken
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ke-gong-cheng&quot;&gt;壳工程&lt;&#x2F;h4&gt;
&lt;p&gt;既然已经拆出去了，那拆出去的组件总得有个载体，这个载体就是壳工程，壳工程主要包含一些基础组件和业务 SDK，这也是主工程包含的一些内容，所以如果在壳工程可以正常运行的话，到了主工程也没什么问题。不过这里存在版本同步问题，之后会说到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yu-dao-de-wen-ti&quot;&gt;遇到的问题&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zu-jian-chai-fen&quot;&gt;组件拆分&lt;&#x2F;h5&gt;
&lt;p&gt;由于之前的代码都是在一个工程下的，所以要单独拿出来作为一个组件就会遇到不少问题。首先是组件的划分，当时在定义组件粒度时也花了些时间讨论，究竟是粒度粗点好，还是细点好。粗点的话比较有利于拆分，细点的话灵活度比较高。最终还是选择粗一点的粒度，先拆出来再说。&lt;&#x2F;p&gt;
&lt;p&gt;假如要把详情页迁出来，就会发现它依赖了一些其他部分的代码，那最快的方式就是直接把代码拷过来，改个名使用。比较简单暴力。说起来比较简单，做的时候也是挺有挑战的，因为正常的业务并不会因为「组件化」而停止，所以开发同学们需要同时兼顾正常的业务和组件的拆分。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ban-ben-guan-li&quot;&gt;版本管理&lt;&#x2F;h5&gt;
&lt;p&gt;我们的组件包括第三方库都是通过 Cocoapods 来管理的，其中组件使用了私有库。之所以选择 Cocoapods，一个是因为它比较方便，还有就是用户基数比较大，且社区也比较活跃（活跃到了会时不时地触发 Github 的 rate limit，导致长时间 clone 不下来··· &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;4989#issuecomment-193772935&quot;&gt;见此&lt;&#x2F;a&gt;），当然也有其他的管理方式，比如 submodule &#x2F; subtree，在开发人员比较多的情况下，方便、灵活的方案容易占上风，虽然它也有自己的问题。主要有版本同步和更新&#x2F;编译慢的问题。&lt;&#x2F;p&gt;
&lt;p&gt;假如基础组件做了个 API 接口升级，这个升级会对原有的接口做改动，自然就会升一个中位的版本号，比如原先是 1.6.19，那么现在就变成 1.7.0 了。而我们在 Podfile 里都是用 &lt;code&gt;~&lt;&#x2F;code&gt; 指定的，这样就会出现主工程的 pod 版本升上去了，但是壳工程没有同步到，然后群里就会各种反馈编译不过，而且这个编译不过的长尾有时能拖上两三天。&lt;&#x2F;p&gt;
&lt;p&gt;然后我们就想了个办法，如果不在壳工程里指定基础库的版本，只在主工程里指定呢，理论上应该可行，只要不出现某个基础库要同时维护多个版本的情况。但实践中发现，壳工程有时会莫名其妙地升不上去，在 podfile 里指定最新的版本又可以升上去，所以此路不通。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题是 &lt;code&gt;pod update&lt;&#x2F;code&gt; 时间过长，经常会在 &lt;code&gt;Analyzing Dependency&lt;&#x2F;code&gt; 上卡 10 多分钟，非常影响效率。后来排查下来是跟组件的 Podspec 有关，配置了 subspec，且依赖比较多。&lt;&#x2F;p&gt;
&lt;p&gt;然后就是 pod update 之后的编译，由于是源码编译，所以这块的时间花费也不少，接下去会考虑 framework 的方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-xu-ji-cheng&quot;&gt;持续集成&lt;&#x2F;h3&gt;
&lt;p&gt;在刚开始，持续集成还不是很完善，业务方升级组件，直接把 podspec 扔到 private repo 里就完事了。这样最简单，但也经常会带来编译通不过的问题。而且这种随意的版本升级也不太能保证质量。于是我们就搭建了一套持续集成系统，大概如此&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575538180893.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575538180893.jpg 857w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575538180893.jpg 857w&quot;
    sizes=&quot;(max-width: 857px) 100vw, 857px&quot; width=&quot;857&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个组件升级之前都需要先通过编译，然后再决定是否升级。这套体系看起来不复杂，但在实施过程中经常会遇到后端的并发问题，导致业务方要么集成失败，要么要等不少时间。而且也没有一个地方可以呈现当前版本的组件版本信息。还有就是业务方对于这种命令行的升级方式接受度也不是很高。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547778269.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547778269.jpg 972w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547778269.jpg 972w&quot;
    sizes=&quot;(max-width: 972px) 100vw, 972px&quot; width=&quot;972&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于此，在经过了几轮讨论之后，有了新版的持续集成平台，升级操作通过网页端来完成。&lt;&#x2F;p&gt;
&lt;p&gt;大致思路是，业务方如果要升级组件，假设现在的版本是 0.1.7，添加了一些 feature 之后，壳工程测试通过，想集成到主工程里看看效果，或者其他组件也想引用这个最新的，就可以在后台手动把版本升到 0.1.8-rc.1，这样的话，原先依赖 &lt;code&gt;~&amp;gt; 0.1.7&lt;&#x2F;code&gt; 的组件，不会升到 0.1.8，同时想要测试这个组件的话，只要手动把版本调到 0.1.8-rc.1 就可以了。这个过程不会触发 CI 的编译检查。&lt;&#x2F;p&gt;
&lt;p&gt;当测试通过后，就可以把尾部的 &lt;code&gt;-rc.n&lt;&#x2F;code&gt; 去掉，然后点击「集成」，就会走 CI 编译检查，通过的话，会在主工程的 podfile 里写上固定的版本号 0.1.8。也就是说，podfile 里所有的组件版本号都是固定的。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547304396.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547304396.jpg 993w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547304396.jpg 993w&quot;
    sizes=&quot;(max-width: 993px) 100vw, 993px&quot; width=&quot;993&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;zhou-bian-she-shi&quot;&gt;周边设施&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ji-chu-zu-jian-ji-zu-jian-de-wen-dang-demo-dan-yuan-ce-shi&quot;&gt;基础组件及组件的文档 &#x2F; Demo &#x2F; 单元测试&lt;&#x2F;h4&gt;
&lt;p&gt;无线基础的职能是为集团提供解决方案，只是在蘑菇街 App 里能 work 是远远不够的，所以就需要提供入口，知道有哪些可用组件，并且如何使用，就像这样（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575551851317.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575551851317.jpg 1117w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575551851317.jpg 1117w&quot;
    sizes=&quot;(max-width: 1117px) 100vw, 1117px&quot; width=&quot;1117&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这就要求组件的负责人需要及时地更新 README &#x2F; CHANGELOG &#x2F; API，并且当发生 API 变更时，能够快速通知到使用方。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gong-gong-ui-zu-jian&quot;&gt;公共 UI 组件&lt;&#x2F;h4&gt;
&lt;p&gt;组件化之后还有一个问题就是资源的重复性，以前在一个工程里的时候，资源都可以很方便地拿到，现在独立出去了，也不知道哪些是公用的，哪些是独有的，索性都放到自己的组件里，这样就会导致包变大。还有一个问题是每个组件可能是不同的产品经理在跟，而他们很可能只关注于自己关心的页面长什么样，而忽略了整体的样式。公共 UI 组件就是用来解决这些问题的，这些组件甚至可以跨 App 使用。（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575557095716.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575557095716.jpg 996w,&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575557095716.jpg 996w&quot;
    sizes=&quot;(max-width: 996px) 100vw, 996px&quot; width=&quot;996&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;「组件化」是 App 膨胀到一定体积后的解决方案，能一定程度上解决问题，在提高开发效率的过程中，采坑是难免的，希望这篇文章能够带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>MVVM without ReactiveCocoa</title>
            <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</link>
            <guid>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</guid>
            <description>&lt;p&gt;MVVM 是 MVC 模式的一种演进，它主要解决了 ViewController 过于臃肿带来的不易维护和测试的问题。其中 ViewModel 的主要职责是处理业务逻辑并提供 View 所需的数据，这样 VC 就不用关心业务，自然也就瘦了下来。ViewModel 只关心业务数据不关心 View，所以不会与 View 产生耦合，也就更方便进行单元测试。&lt;&#x2F;p&gt;
&lt;p&gt;View 是一个壳，它所呈现的内容都需要由 ViewModel 来提供，而 View 又不与 ViewModel 直接沟通，这时就需要 ViewController 来做中间的协调者。&lt;&#x2F;p&gt;
&lt;p&gt;ViewController 持有 View 和 ViewModel，当 VC 初始化时，会让 ViewModel 去取数据，简单来说就是调用 VM 的某个获取数据的方法。&lt;&#x2F;p&gt;
&lt;p&gt;使用 MVVM 最舒服的姿势是搭配 ReactiveCocoa。不过它的问题在于学习成本和维护成本比较高，在小团队中或许还可以尝试，当开发人员数量较多时就很难推起来了。这也是我们今天要讲的主题：如何不借助 ReactiveCocoa 来实现 MVVM。&lt;&#x2F;p&gt;
&lt;p&gt;先从数据的获取开始说起吧。在 ReactiveCocoa 里有一个类叫「RACCommand」，它的主要作用是执行某个会改变数据的操作，然后提供获取数据的方法，跟我们想要达到的目的很像，所以可以借鉴这个思路，写一个简单的 Command。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCompletionBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandConsumeBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCancelBlock)();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommandResult : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommand : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; executing;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) MGJCommandResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandCancelBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cancelHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 8
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 9
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;input&lt;&#x2F;code&gt; 是外部传过来的值，比如 user_id，当拿到数据后，调用下 completionHandler，这样 &lt;code&gt;result&lt;&#x2F;code&gt; 属性就会变化&lt;&#x2F;li&gt;
&lt;li&gt;有些操作，如 http 请求，需要手动取消&lt;&#x2F;li&gt;
&lt;li&gt;单独把 &lt;code&gt;error&lt;&#x2F;code&gt; 作为一个属性放出来，是因为很多数据请求操作都可能出错，当出错后，只需改变这个 error 属性即可。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;content&lt;&#x2F;code&gt; 存放了这个 Command 的数据处理结果。&lt;&#x2F;li&gt;
&lt;li&gt;标识了这个 Command 目前的运行状态，比如可以根据这个状态来显示 loading。&lt;&#x2F;li&gt;
&lt;li&gt;每次 Command 执行完一个任务后，result 都会改变，外部可以 KVO 这个 result，然后就可以实时获取最新的结果了。&lt;&#x2F;li&gt;
&lt;li&gt;Command 的执行逻辑，如果实现了 &lt;code&gt;cancelHandler&lt;&#x2F;code&gt; 的话，外部调用 &lt;code&gt;cancel&lt;&#x2F;code&gt;，这个 Handler 就会被触发。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来触发 Command 的执行，同时可以传一个参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来取消 Command 的执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;实现起来也蛮简单的，这里就不多说了。用起来大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewModel.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MGJCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConsumeHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler) {
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [FollowRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getFollowList:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)input success:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;users) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usersToFollow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kFollowExpertSearchSucceedSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } failure:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(StatusEntity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ViewController 里的用法大概像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didTapFollowButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 根据 button 找到 userID
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand&lt;&#x2F;span&gt;&lt;span&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;userID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是这样，VC 本身不处理业务逻辑，都交给 ViewModel 去处理，而这些数据请求的结果处理又有不同的处理方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;delegate&quot;&gt;Delegate&lt;&#x2F;h3&gt;
&lt;p&gt;当 ViewModel 拿到数据后，可以把结果以 Delegate 的方式通知 VC，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didFollowUserWithResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)result
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt; doSomeAnimation];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样做的好处是比较符合苹果既有的设计模式，而且也可以通过查看 Delegate 协议来知道 VM 暴露了哪些接口供外部使用。&lt;&#x2F;p&gt;
&lt;p&gt;不过这种方法少了点灵活性，比如需要联合多个属性的变化来做一些事情时，处理起来就会比较麻烦，这也是 RAC 强大的地方。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kvo&quot;&gt;KVO&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 是基于 KVO 构建的，所以也可以用 KVO 来让 VC 获取 VM 的变化。&lt;&#x2F;p&gt;
&lt;p&gt;但我们都知道 KVO 的槽点比较多，比如使用起来不方便，用完还要记得移除等。这里可以使用 Facebook 开源的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;KVOController&quot;&gt;KVOController&lt;&#x2F;a&gt;，它比较好的处理了 KVO 存在的一些问题，同时又能发挥 KVO 带来的便捷性。&lt;&#x2F;p&gt;
&lt;p&gt;有了它我们就能在一个地方把 VM 的更新处理掉了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;KVOController&lt;&#x2F;span&gt;&lt;span&gt; observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt; keyPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionNew&lt;&#x2F;span&gt;&lt;span&gt; block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;observer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;target, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;change) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;newValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; change[NSKeyValueChangeNewKey];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doSomething with the newValue
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对 VM 其他 keyPath 的处理也都可以放到这里
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果觉得这样的写法还是太麻烦，可以做一层简单的封装，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; use newValue to update view
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是会好一点，使用 KVO 比 Delegate 好的一点是不用再额外声明协议和方法，而且支持 block，使用起来也会方便些。&lt;&#x2F;p&gt;
&lt;p&gt;对于像 &lt;code&gt;error&lt;&#x2F;code&gt; 这样很多操作都会产生同样结果的场景，可以单独拿出来，作为 ViewModel 的一个属性，使用时，直接 KVO 这个属性即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-jie-chu-li&quot;&gt;细节处理&lt;&#x2F;h3&gt;
&lt;p&gt;如果不涉及到 TableView 等会出现复用场景的地方，MVVM 使用起来还是比较方便的。如果有了 TableView，又要做一些额外的处理。&lt;&#x2F;p&gt;
&lt;p&gt;一般来说，VC 可以带一个 VM，那如果出现 Cell 时怎么办，Cell 里又包含了按钮，按钮又需要数据请求又怎么处理？这些都是比较常见的场景，也可以通过 MVVM 来解决。&lt;&#x2F;p&gt;
&lt;p&gt;我们知道 VM 的职责是为 View 提供数据支持，Cell 也是一个 View，那么为 Cell 配备一个 VM
不就可以了么。&lt;&#x2F;p&gt;
&lt;p&gt;这样的话，VC 的 VM 需要包含一个数组，里面的元素是 CellVM，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView cellForRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[tableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dequeueReusableCellWithIdentifier:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Cell&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forIndexPath:indexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; cell 可能会用到 cellVM 里的 Command，所以在这里处理 command 的执行结果
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; update cell after like
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然仅仅如此是不够的，我们需要找个恰当的时机把 KVO 移除，避免多次监听。&lt;code&gt;UITableViewDelegate&lt;&#x2F;code&gt; 里的这个方法就很适合。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView didEndDisplayingCell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)cell forRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unobserve:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不过这里也要讲究一个平衡，如果 Cell 的类型比较多，且涉及 Command 的地方不多，只是做呈现方面的工作，直接使用 Entity 会更方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 尽量不涉及业务逻辑，让 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 去做这些事情。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 只是一个中间人，接收 &lt;code&gt;View&lt;&#x2F;code&gt; 的事件、调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的方法、响应 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的变化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 不能包含 View，不然就跟 View 产生了耦合，不方便复用和测试。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 之间可以有依赖。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 避免过于臃肿，不然维护起来也是个问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;MVVM 并不复杂，跟 MVC 也是兼容的，只是多了一个 ViewModel 层，但就是这么一个小改动，就能让代码变得更加容易阅读和维护，不妨试一下吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS 统计打点那些事</title>
            <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-analytics/</link>
            <guid>https://limboy.me/posts/ios-analytics/</guid>
            <description>&lt;p&gt;一个环节，App 的运行状态、改版后的效果、用户的各种行为等都需要打点，市面上也有不少可供选择的第三方库。 假设产品有这么个需求：当用户在详情页点击购买按钮时，记录一下事件。我们实现起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    [XXXAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个需求就这样轻松搞定了，但细细想想还是有不少问题的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;页面上会有其他的 Button，可能每个 Button 都要放上这么一段代码。&lt;&#x2F;li&gt;
&lt;li&gt;这些统计其实跟具体的业务无关，没必要跟业务代码混杂在一起，不优雅。&lt;&#x2F;li&gt;
&lt;li&gt;当改版或者重构时，有可能忘了把相应的打点代码迁移过去。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以需要一种更好的方式来做这件事，这就是使用 AOP(&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Aspect-oriented_programming&quot;&gt;Aspect-Oriented-Programming&lt;&#x2F;a&gt;)，翻译过来就是「面向切面编程」&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;简单来说，就是可以动态的在函数调用的前后插一段代码。iOS 可以使用 Pete Steinberger 开发的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; 这个库，大致原理是在 runtime 层，通过 swizzle method 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;来看一个小 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样在 &lt;code&gt;UIViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewWillAppear:&lt;&#x2F;code&gt; 被调用后，还会再调一下我们定义的 Block，这段日志就会被输出。而打点正好符合这种场景：正事干完之后，额外干一些跟业务无关的事情。&lt;&#x2F;p&gt;
&lt;p&gt;上面的例子，我们通过 AOP 来做的话，大概就是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; no need to call [XXXAnalytics event:]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; AppDelegate.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [DetailViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样统计代码就从业务代码中剥离出来了。但是又产生了一个新问题，多个 Button Event，岂不是要写很多行这样的代码，「重复」这样的事情，作为一个程序员怎么能忍，简单，造一个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)event
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:event];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:ListViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(followButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kAnotherEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来又干净了些。这时，产品经理又提了个需求：当这个按钮点击时，如果已经登录了，发送 EventA，如果没有登录则发送 EventB，也就是说，不再只是 &lt;code&gt;[XXXAnalytics event:]&lt;&#x2F;code&gt; 这么简单了，还需要加上额外的逻辑，这也难不倒我们，加上一个 &lt;code&gt;block&lt;&#x2F;code&gt; 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass
&lt;&#x2F;span&gt;&lt;span&gt;                   selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector
&lt;&#x2F;span&gt;&lt;span&gt;               eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo))eventHandler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(eventHandler) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aspectInfo);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 使用
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) eventHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loggedIn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventA] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventB];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好了，现在只要不是太复杂的打点逻辑(那些需要方法上下文变量的)我们都能应付了，接下来就该等产品来验收了。产品搬了个凳子坐在身边，然后点一下 Button，看一下 Console，被几轮蹂躏后，产品也慢慢地接受了这种验收方式。后来某一天，忽然发现某一项或某几项数据有异常，然后找到开发，瞄了一眼：哦，这个方法被重构了。或者新加的方法忘了加统计了。只能等到下个版本再加上了，如果只是一般的统计数据倒还好，跟钱相关的就麻烦了。&lt;&#x2F;p&gt;
&lt;p&gt;那么有没有一种直观的验证方式呢？当然，程序员是万能的呀。一个理想的状况是，产品打开 App 后，开启某个开关就能看到所有会发送 Event 的按钮，就像这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-analytics&amp;#x2F;analytics_highlight.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;ios-analytics&amp;#x2F;analytics_highlight.jpg 320w,&amp;#x2F;posts&amp;#x2F;ios-analytics&amp;#x2F;analytics_highlight.jpg 320w&quot;
    sizes=&quot;(max-width: 320px) 100vw, 320px&quot; width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中数字代表了 &lt;code&gt;EventID&lt;&#x2F;code&gt;。如何实现呢？还记得注册事件时，我们有传入 &lt;code&gt;class&lt;&#x2F;code&gt; 和 &lt;code&gt;selector&lt;&#x2F;code&gt; 么，一般我们都会有一个 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt;，那么就可以在 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewDidAppear:&lt;&#x2F;code&gt; 里做点文章了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; BaseViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidAppear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)animated
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidAppear:animated&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取已经注册过的 classes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[OurAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;registeredClasses&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateKeysAndObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectors, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isKindOfClass:NSClassFromString(className)]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 如何根据 selector 找到它的宿主？
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以现在问题就剩下，如何根据 &lt;code&gt;selector&lt;&#x2F;code&gt; 找到对应的 Button，这里要注意，有些 Button 可能要等网络请求完成才会出现，比如 &lt;code&gt;TableViewCell&lt;&#x2F;code&gt; 里的 Button。&lt;&#x2F;p&gt;
&lt;p&gt;没有想到太方便的方法，简单粗暴点就是设置个 Timer 每隔一段时间扫一下 subviews，如果是 button 或 包含 tapGesture 的，就拿它们的 action 对比一下，如果 match 就可以高亮那个 button &#x2F; view 了。&lt;&#x2F;p&gt;
&lt;p&gt;EventID 也一样，之前在注册时也会传一个 EventID 过来，这里直接显示出来即可。对于那些传 &lt;code&gt;eventHandler&lt;&#x2F;code&gt; 的就不行了。&lt;&#x2F;p&gt;
&lt;p&gt;所以理论上是可行的，性能上会稍微有点损耗，尤其是当 subViews 的结构比较复杂时，不过只是内部用来做验证，所以这也不是什么问题。&lt;&#x2F;p&gt;
&lt;p&gt;看起来效果已经不错了，有没有可能让这套体系再灵活一些？比如可以从后端制定打点规则？客户端只是读取一个配置文件，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; analyticsRules 是从配置文件中读取出来的
&lt;&#x2F;span&gt;&lt;span&gt;    [analyticsRules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rules, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;class&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;selector&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eventID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;eventID&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:klass seletor:seletor event: eventID];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那如果在后台的时候填错了 Class 或 Selector 怎么办？还好有 &lt;code&gt;objc_getClassList&lt;&#x2F;code&gt; 和 &lt;code&gt;class_copyMethodList&lt;&#x2F;code&gt; 这两个运行时方法，有了它们就可以在 App 启动时扫一遍已注册的类（过滤掉 UI &#x2F; NS 开头的），然后将它们的 seletor 也一并保存下来发送给服务端，当然这种操作只需在适当的时机做一下就可以了，比如集成打包时。&lt;&#x2F;p&gt;
&lt;p&gt;现在，这套体系就比较完整了。当然这只是我的一些构想，并没有在实践中尝试过，所以肯定会踩到各种各样的坑，不过至少看起来是个可行的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Advanced NSOperation</title>
            <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/advanced-nsoperation/</link>
            <guid>https://limboy.me/posts/advanced-nsoperation/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;这篇文章是对 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2015&#x2F;?id=226&quot;&gt;WWDC 2015 Session 226: Advanced NSOperations&lt;&#x2F;a&gt; 的一个小结，在那个视频中，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;davedelong&quot;&gt;Dave DeLong&lt;&#x2F;a&gt; 分享了 NSOperation 的高级玩法，WWDC App 就是基于这套玩法做的，还是挺开阔思路的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsoperation-he-nsoperationqueue-jian-jie&quot;&gt;NSOperation 和 NSOperationQueue 简介&lt;&#x2F;h3&gt;
&lt;p&gt;我们知道 NSOperation 可以执行一些后台操作，如 HTTP 请求，在 iOS 4.0 之前是基于 NSThread 来实现的，iOS 4.0 带了 GCD，NSOperation 底层也基于 GCD 重写了底层实现。&lt;&#x2F;p&gt;
&lt;p&gt;所以 NSOperation 是 GCD 的高层封装，同时也带来了一些更加便利的功能，比如取消任务，设置依赖等。在进入高级玩法前，先简单的介绍下 NSOperation 和 NSOperationQueue。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsoperationqueue-maxconcurrentoperationcount&quot;&gt;NSOperationQueue maxConcurrentOperationCount&lt;&#x2F;h4&gt;
&lt;p&gt;这个属性表示的是 NSOperationQueue 最多可以同时处理几个任务，假如我们希望它一次只处理一个，也就是线性 Queue，可以设置 &lt;code&gt;maxConcurrentOperationCount = 1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-1.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-1.png 337w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-1.png 337w&quot;
    sizes=&quot;(max-width: 337px) 100vw, 337px&quot; width=&quot;337&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中间的点表示任务的状态，在上一个任务完成前，下一个任务不会被执行，因为只有一个 worker。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望一次能处理多个，将这个值设置为大于 1 即可，或者直接使用默认值，系统会自动设置一个合理的最大值。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-2.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-2.png 337w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-2.png 337w&quot;
    sizes=&quot;(max-width: 337px) 100vw, 337px&quot; width=&quot;337&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;nsoperation-cancel&quot;&gt;NSOperation cancel&lt;&#x2F;h4&gt;
&lt;p&gt;从上面的图可以看到，正在被执行的任务的状态跟在后面排队的状态是不一样的，有这么几种状态：pending, ready, executing, finished, cancelled。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-3.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-3.png 148.5w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-3.png 148.5w&quot;
    sizes=&quot;(max-width: 148.5px) 100vw, 148.5px&quot; width=&quot;148.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之前提到过 NSOperation 一个很重要的特性是可以被取消，但不同状态的取消处理也不一样。比如当 Operation 处于 pending, ready 状态时，系统可以去看一下这个 Operation 是否已经被取消了(判断 self.cancelled)，如果是的话，就不执行任务了。但是当 Operation 处于 executing 状态时，取消的操作就只能自己处理了，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyOperation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSOperation
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelled&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; executing
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsoperation-dependency&quot;&gt;NSOperation dependency&lt;&#x2F;h4&gt;
&lt;p&gt;NSOperation 还有一个很重要的特性是可以设置依赖&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-4.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-4.png 150.5w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-4.png 150.5w&quot;
    sizes=&quot;(max-width: 150.5px) 100vw, 150.5px&quot; width=&quot;150.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;任务 A 需要等待 任务 B 和 任务 C 完成，才能被执行，而任务 B 需要等到 任务 D 完成才能被执行。&lt;&#x2F;p&gt;
&lt;p&gt;当然前提是这些 Operation 都需要被放到某个 Queue 里，这样它们的状态才会发生改变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji-wan-fa&quot;&gt;高级玩法&lt;&#x2F;h3&gt;
&lt;p&gt;开发 App 的过程中，有一些逻辑是可以共用的，比如登录、网络状况等，最好可以组装起来，就像超能陆战队里的 megabot 一样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;megabot.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;megabot.jpg 240w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;megabot.jpg 240w&quot;
    sizes=&quot;(max-width: 240px) 100vw, 240px&quot; width=&quot;240&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于前面提到的 NSOperation &#x2F; NSOperationQueue 的一些特点，苹果的工程师们想到了他们的解决方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;condition&quot;&gt;Condition&lt;&#x2F;h4&gt;
&lt;p&gt;Condition，也就是条件，它可以被附加到 Operation 上，只有当 Condition 被满足时，Operation 才能被执行。比如只有在有网络的情况下才能进行交易，这时「网络状况」就是附加给「交易」的 Condition。&lt;&#x2F;p&gt;
&lt;p&gt;一个 Condition 主要包含了 3 个方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation?
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;func evaluateForOperation(operation: Operation, completion: OperationConditionResult -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这个属性用来表明这个 Condtion 是否是排他的，如果是的话，同一时间只能出现一个该类型的实例，类型的指定是通过设置 &lt;code&gt;name&lt;&#x2F;code&gt; 来实现的。&lt;&#x2F;li&gt;
&lt;li&gt;为传入的 operation 返回一个依赖的 operation，比如「喜欢」这个 Operation 需要用户已处于登录状态，那么「登录」这个 Condition 的这个方法就可以返回一个「登录」的 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;这个方法是查看这个 Condition 的执行结果，比如前面的「登录」Operation 结束后，系统将要执行「喜欢」这个 Operation，然后这个方法就会被触发，如果没有错误发生的话，就执行「喜欢」，如果有错误发生「喜欢」就会自动结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以总结起来 Condition 主要干了这么三件事&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-condition.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-condition.png 206w,&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-condition.png 206w&quot;
    sizes=&quot;(max-width: 206px) 100vw, 206px&quot; width=&quot;206&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;来看一个简单的 Condition (来自 WWDC Sample)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ReachabilityCondition: OperationCondition {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; hostKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Host&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Reachability&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(host: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; host
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;evaluateForOperation(operation: Operation, completion: OperationConditionResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        ReachabilityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;requestReachability(host) { reachable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; reachable {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Satisfied)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSError(code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ConditionFailed, userInfo: [
&lt;&#x2F;span&gt;&lt;span&gt;                    OperationConditionKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hostKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host
&lt;&#x2F;span&gt;&lt;span&gt;                ])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Failed(error))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Condtion 初始化时可以传参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;这个 Condition 没有生成一个 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;，因为生成依赖 Operation 的目的是当这个 Operation 运行完后，可以在 evaluateForOperation 时获取之前的运行结果，而这里直接调用 ReachabilityController 的 requestReachability 方法就可以了，所以就免去了这一步。&lt;&#x2F;li&gt;
&lt;li&gt;当结果符合预期时，调用 &lt;code&gt;completion(.Satisfied)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;当出现异常时，调用 &lt;code&gt;completion(.Failed(error))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;operation&quot;&gt;Operation&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Operation&lt;&#x2F;code&gt; 继承自 &lt;code&gt;NSOperation&lt;&#x2F;code&gt;，同时添加了一些方法，主要可以分为 4 部分&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;li&gt;
&lt;li&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;li&gt;
&lt;li&gt;添加 Observer&lt;&#x2F;li&gt;
&lt;li&gt;添加 Condtion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;she-zhi-zhuang-tai-bian-liang-tong-shi-shou-dong-she-zhi-kvo&quot;&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;h5&gt;
&lt;p&gt;在系统提供的状态的基础上，又添加了一些新的状态，如 &lt;code&gt;EvaluatingConditions&lt;&#x2F;code&gt;, &lt;code&gt;Pending&lt;&#x2F;code&gt; 等，这些状态的改变都需要触发内置状态的 KVO，如 &lt;code&gt;isExecuting&lt;&#x2F;code&gt;, &lt;code&gt;isFinished&lt;&#x2F;code&gt;, &lt;code&gt;isReady&lt;&#x2F;code&gt; 等。通常的做法会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;willChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Executing;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当只有少量的状态改变时，在前后包一层还可以接受，但如果多了的话，就不美观了，这时可以使用 KVO 的一个方法 &lt;code&gt;+ keyPathsForValuesAffectingValueForKey:&lt;&#x2F;code&gt;，它的意思是，哪些 keyPaths 的改变会导致 &lt;code&gt;Key&lt;&#x2F;code&gt; 发生变化。所以可以定义这几个方法，然后正常设置 &lt;code&gt;state&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsReady() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsExecuting() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsFinished() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然，这只是完成了一半，系统知道 state 变了后， &lt;code&gt;isReady&lt;&#x2F;code&gt; 会变，然后就会调用 &lt;code&gt;ready&lt;&#x2F;code&gt; 方法，所以这三个方法我们也要一并覆盖掉。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; executing: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; finished: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Finished
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; ready: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; state {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Pending:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省去不相关的代码
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;                evaluateConditions()
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Until conditions have been evaluated, &amp;quot;isReady&amp;quot; returns false
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Ready:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; cancelled
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;可以看到，当系统在问某个 Operation 是否 ready 时，&lt;code&gt;evaluateConditions&lt;&#x2F;code&gt; 方法会被触发，这里包含了该 Operation 的所有 Conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 的执行结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;zhi-xing-conditions-de-evaluateforoperation-fang-fa&quot;&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;evaluateConditions() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Pending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;evaluateConditions() was called out-of-order&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;EvaluatingConditions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    OperationConditionEvaluator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;evaluate(conditions, operation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) { failures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extend(failures)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Ready
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;遍历当前 Operation 的 conditions，执行它们的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法，然后将错误保存在 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 里，同时将当前的状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;或许你会问，如果出现错误，是不是表示条件不满足，如果条件不满足，为什么还要将状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;？ 这是因为当状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt; 后，就会执行 &lt;code&gt;main&lt;&#x2F;code&gt; 方法，在那里会对 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 做统一判断。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override final func &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Ready, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;This operation must be performed on an operation queue.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; _internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled {
&lt;&#x2F;span&gt;&lt;span&gt;        state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; observers {
&lt;&#x2F;span&gt;&lt;span&gt;            observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationDidStart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        execute()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        finish()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里出现了 observer，当 Operation 处于不同状态时，会调用 observers 的不同方法&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;tian-jia-observers&quot;&gt;添加 Observers&lt;&#x2F;h5&gt;
&lt;p&gt;observer 的实现还是比较简单的，首先定义一个 Protocol，所有的 observer 都需要实现这个 Protocol 里的方法，然后 Operation 内置一个数组作为容器，&lt;code&gt;addObserver&lt;&#x2F;code&gt; 时，将 observer 添加到容器，当处于不同状态时，遍历容器里的 observer，调用相应的方法。&lt;&#x2F;p&gt;
&lt;p&gt;这不免让我们想起了 delegate，跟 delegate 相比，observer 的好处就在于可以指定多个观察者，而 delegate 只能指定一个。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;tian-jia-condtions&quot;&gt;添加 Condtions&lt;&#x2F;h5&gt;
&lt;p&gt;跟 observer 的实现思路基本一致。你或许会问，添加的这些 Conditions 什么时候会被触发呢？没错，就是在将 Operation 添加到 OperationQueue 时。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operationqueue&quot;&gt;OperationQueue&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;OperationQueue&lt;&#x2F;code&gt; 也是继承自系统的 &lt;code&gt;NSOperationQueue&lt;&#x2F;code&gt;，同时重写了 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法，这个方法主要做了 3 件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;给 Operation 添加 observer&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;gei-operation-tian-jia-observer&quot;&gt;给 Operation 添加 observer&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver(
&lt;&#x2F;span&gt;&lt;span&gt;    startHandler: nil,
&lt;&#x2F;span&gt;&lt;span&gt;    produceHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    finishHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationQueue?(q, operationDidFinish: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, withErrors: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(delegate)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;我们前面说过，一个 Operation 可以生成一个新的 Operation，这个 Operation 生成后也需要被放到 Queue 里，这个放置的过程就是在这个 delegate 里实现的。&lt;&#x2F;li&gt;
&lt;li&gt;operationQueue 自己有一个 delegate，当 queue 里的一个 operation 执行完时，会向 delegate 报告。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-dependencyforoperation&quot;&gt;处理 Operation 的 dependencies 的 dependencyForOperation&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Extract any dependencies needed by this operation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dependencies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;    $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(op)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; dependency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; dependencies {
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDependency(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就很简单了，调用 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt; 方法，拿到 operation，然后将当前的 op 依赖该 operation，同时将这个 operation 放到 queue 里，所以在 conditions 的 operations 执行完之前，op 是不会执行的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-pai-ta-xing&quot;&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; concurrencyCategories: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap { condition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isMutuallyExclusive { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;concurrencyCategories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Set up the mutual exclusivity dependencies.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; exclusivityController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ExclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedExclusivityController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(op, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(BlockObserver { operation, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;removeOperation(operation, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这里可能看不出「排他」的实现，因为是在 &lt;code&gt;exclusivityController&lt;&#x2F;code&gt; 里面实现的，调用了它的 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法后，它会去查看这个类型的数组是否为空，如果不为空，就让这个 operation 依赖数组的最后一个。这样在之前的 operation 执行完之前，这个 operation 是不会被执行的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;p&gt;有了 Operation 和 OperationQueue 之后，就可以开始生产 megabot 了，来看一个「查看原网页」的 Operation，这个 Operation 的作用就是展示传入的 URL。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SafariServices
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; An `Operation` to display an `NSURL` in an app-modal `SFSafariViewController`.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: Operation {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; URL: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(URL: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;URL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URL
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;execute() {
&lt;&#x2F;span&gt;&lt;span&gt;        dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UIApplication&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedApplication()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;keyWindow?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rootViewController {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; safari &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; SFSafariViewController(URL: URL, entersReaderIfAvailable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            safari&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;presentViewController(safari, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, completion: nil)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: SFSafariViewControllerDelegate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;safariViewControllerDidFinish(controller: SFSafariViewController) {
&lt;&#x2F;span&gt;&lt;span&gt;        controller&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dismissViewControllerAnimated(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;因为这是一个 &lt;code&gt;ViewController&lt;&#x2F;code&gt; 相关的 Operation，所以其他同类型的 Operation，需要等我完成后才能被执行。&lt;&#x2F;li&gt;
&lt;li&gt;当这个 controller 被关闭时，表示这个 Operation 结束，调用一下 &lt;code&gt;finish&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果需要的话，可以给这个 Operation 再加一个 &lt;code&gt;ReachabilityCondition&lt;&#x2F;code&gt;，当没有网络时就不打开了。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看在 VC 层面的使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockOperation {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;performSegueWithIdentifier(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;showEarthquake&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sender: nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; blockObserver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver { _, errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            If the operation errored (ex: a condition failed) then the segue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            isn&amp;#39;t going to happen. We shouldn&amp;#39;t leave the row selected.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;        *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;            dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;                tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;deselectRowAtIndexPath(indexPath, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(blockObserver)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    operationQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(operation)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;类似 &lt;code&gt;NSBlockOperation&lt;&#x2F;code&gt;， &lt;code&gt;BlockOperation&lt;&#x2F;code&gt; 也可以快速生成一个 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;BlockObserver&lt;&#x2F;code&gt; 也是一个快速生成 observer 的方法，这里描述了当 Operation 完成后的处理。&lt;&#x2F;li&gt;
&lt;li&gt;调用方需要新建一个 queue，然后把 Operation 放到这个 queue 里。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;相比起正常的调用，还是会多了些步骤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;基于 Operation 来架构的思想还是蛮新颖的，可以将复杂的任务拆分成粒度更细的 Operation，然后再组装。但实际使用起来也会有不少问题，比如之前提到的写起来会复杂些，调试时看 backtrace 会很累，不确定是否会带来更好的可维护性等等。不过既然苹果都已经把它用到了线上的 App，至少说明是可行的，至于与已有的架构相比会带来怎样的提升，可能需要实际写起来才知道。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Builder Pattern 在 Objective-C 中的使用</title>
            <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/builder-pattern/</link>
            <guid>https://limboy.me/posts/builder-pattern/</guid>
            <description>&lt;p&gt;在说 Builder Pattern 之前，我们先来看看一个场景。假设我们要预定一个 iPhone 6，要 64G 的，金色的，用代码表述大概是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFX 是一个前缀，因为直接写 iPhone6 不符合类名大写的习惯，写成 IPhone6 更是怪异 ╮(╯▽╰)╭
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以是另一种方式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一种方式可扩展性好些，但无法约束必须设置某些 property。第二种方式修正了这个问题，但扩展性也差了。&lt;&#x2F;p&gt;
&lt;p&gt;假如又有了新需求，要让客户可以选择发售区域，比如港行，国行，美版等等。对于第一种，自然可以新增一个属性，但使用者很可能完全不知道新增了这么个属性。对于第二种，则只能再新建一个初始化方式，如 &lt;code&gt;-[initWithStorage:color:place]&lt;&#x2F;code&gt;。那如果又有新的需求，比如选择是否刻字，以及刻哪些字呢？或者可以选择外壳的种类等等。这两种方式都不能很好地处理需求的变更。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们来说说 Builder Pattern，这个模式可以在各种语言里被很方便地实现，比如 javascript&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6Builder()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;golden&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setPlace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;HK&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当有新的属性时，再加一个 &lt;code&gt;setProperty&lt;&#x2F;code&gt; 即可。如果漏写了某个属性，可以在 &lt;code&gt;build&lt;&#x2F;code&gt; 里检查。&lt;&#x2F;p&gt;
&lt;p&gt;在 Objective-C 里，这样的链式写法不是很流行（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Masonry&#x2F;Masonry&quot;&gt;Masonry&lt;&#x2F;a&gt;里这种写法用的比较多），所以，在 OC 里写起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果少了什么属性，在 &lt;code&gt;build&lt;&#x2F;code&gt; 时检查下即可。这样既解决了不方便扩展的问题，当有新的属性时也可以知道。&lt;&#x2F;p&gt;
&lt;p&gt;不过看起来还是不够优雅，这个 builder 只是一个临时工具，用完了就扔掉了，既然这样，那有没有可能写法上符合 OC 的传统，又让这个 builder 「临时出现」一下？且看下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor goldenColor];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是看起来舒服多了。builder 只是在 block 范围内起作用，不会影响当前 context 的变量。这个 &lt;code&gt;+[createWithBuilder:]&lt;&#x2F;code&gt; 的代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)createWithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(BuilderBlock)block {
&lt;&#x2F;span&gt;&lt;span&gt;	NSParameterAssert(block);
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(builder)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里 &lt;code&gt;build&lt;&#x2F;code&gt; 方法，也有两种实现，第一种&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)builder
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		_storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外一种是把两个过程合并为一个过程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以在这里对 property 做检查
&lt;&#x2F;span&gt;&lt;span&gt;	NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;发行区别忘了填哦&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; iPhone6;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这两种方式的区别在于对参数的处理，前一个是在目标 Class 中处理，后一种是在 Builder 中处理。&lt;&#x2F;p&gt;
&lt;p&gt;在 Facebook 的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;pop&quot;&gt;pop&lt;&#x2F;a&gt; 中也有类似的使用，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;animatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;propertyWithName:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;property&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initializer:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(POPMutableAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;prop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;writeBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;readBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 &lt;code&gt;initializer&lt;&#x2F;code&gt; 其实就是 &lt;code&gt;builder&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我在写蘑菇街的基础框架时，也有用到过几处，觉得还是蛮方便的，尤其对使用者来说。比如这个可以横向或纵向滚动的包含可点击 Items 的 collectionView。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MGJFlowCollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionViewWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(MGJFlowCollectionViewBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollDirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; UICollectionViewScrollDirectionHorizontal;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumInteritemSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumLineSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sectionInset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIEdgeInsetsMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGSizeMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;number){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UIView alloc] initWithFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor mgj_random];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; view;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能通过简单的配置来生成一个水平的或垂直的 collectionView 了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 Builder Pattern 还有一个好处，就是可以将零散的配置统一起来。比如要创建一个 CollectionView，我们需要设置 layout，还要设置 layout 的一些属性，还要设置 DataSource &#x2F; Delegate 等，现在可以在一个地方统一设置，可读性上也会好一些。&lt;&#x2F;p&gt;
&lt;p&gt;所以如果遇到需要多个参数，甚至某个参数自己还包含了各种参数时，可以考虑下 Builder Pattern。&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&quot;&gt;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>自学 iOS 开发的一些经验</title>
            <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/learning-ios/</link>
            <guid>https://limboy.me/posts/learning-ios/</guid>
            <description>&lt;p&gt;不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。&lt;&#x2F;p&gt;
&lt;p&gt;现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-chu&quot;&gt;基础&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;yi-ding-de-bian-cheng-jing-yan&quot;&gt;一定的编程经验&lt;&#x2F;h4&gt;
&lt;p&gt;这里说的编程经验是至少熟练一门编程语言，对 OOP 有一定的了解，最好熟悉一些基本的设计模式。遇到过的好多 iOS 开发，大多是从别的语言转过来的，所以有一定的编程基础，学起来会更容易 get the point.&lt;&#x2F;p&gt;
&lt;p&gt;如果是第一次接触编程，当然也是没问题的，只是要做好心理准备，可能会比想象的难。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ying-yu&quot;&gt;英语&lt;&#x2F;h4&gt;
&lt;p&gt;发现不少开发对于英语似乎有点接受不能，通常都是中文优先，除非迫不得已，才硬着头皮看看 StackOverflow，英文文章，文档等。忘了是谁说过「难走的路越走越好走」，通常如此。其实只要稍微 push 一下自己，那些技术文章啃下来应该不会有太大的问题，有过几次成功的体验后，这种恐惧感就会减少很多。优质的文章、视频、书籍，多是英文的，不迈过这个坎，将来要么成为瓶颈，要么花更大的成本去填补。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-men&quot;&gt;入门&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shu-ji&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;要学习 iOS 开发，自然要先学 Objective-C （当然现在也可以直接上 Swift，不过如果多人协作的话，OC 目前还是主流），因为 OC 是 C 语言的超集，所以了解 C 语言对于学习 OC 肯定会有帮助，不过就算不了解，直接学 OC 也没太大问题。&lt;&#x2F;p&gt;
&lt;p&gt;这里推荐 BNR (Big Nerd Ranch) 的这本 &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Objective-C-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;032194206X&quot;&gt;Objective-C Programming The Big Nerd Ranch Guide&lt;&#x2F;a&gt;，讲解地比较细致，能帮助你更好的理解 OC，更重要的是教你遇到问题时，如何去解决问题，以及这个问题对应的一些知识点，如何使用文档等等。&lt;&#x2F;p&gt;
&lt;p&gt;来到一个新的世界，肯定会对这个世界充满好奇，想订阅一大堆博客，买一堆书，看各种教程和视频，然后就变得浮躁，不知该从哪下手，这会导致拖延症。我渴了，给我倒一杯水，这个很直接，马上就可以做，但如果是给我买一瓶饮料，而自己对那些饮料又不怎么熟悉时，就纠结了，不如刷会微博，看看朋友圈，玩个小游戏先。&lt;&#x2F;p&gt;
&lt;p&gt;所以一本好的入门教材很重要，要契合自己当前的水平，且常常会有收获，这种成就感会激励着你继续学下去。&lt;&#x2F;p&gt;
&lt;p&gt;在看书的过程中，往往会有这样的经历：书中提到某个人、观点、知识点、书、文章，然后就顺着它提到的这些东西出去了，可能某个知识点又牵扯到另一些内容，然后就这样越走越远。想起了一个故事&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;三只猎狗追一只土拔鼠,土拔鼠逃跑时钻进了一个树洞。这个树洞只有一个出口,不一会儿,忽然从树洞里跑出一只兔子。兔子飞快地向前跑,并爬上另一棵大树。兔子因为慌乱在树上没站稳,掉了下来,砸晕了正仰头看的三只猎狗,最后,兔子终于逃脱。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;对于这个故事可以从不同的角度去解读，我更愿意以初心去解读。兔子为什么会爬树？为什么能砸晕三只猎狗？这不是重点，重点是，之前追赶的土拨鼠哪去了？看书时难免会有延伸阅读，这个深度我觉得不宜超过 2 层，不然很容易就回不来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是如果有可能，最好每天都看点，这其实是很难的，因为总是会有优先级更高的事，或者之前的某些习惯在干扰。一旦断了几天，就不想再拿起来了。&lt;&#x2F;p&gt;
&lt;p&gt;还有，苹果官方的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;referencelibrary&#x2F;GettingStarted&#x2F;RoadMapiOS&#x2F;&quot;&gt;Start Developing iOS Apps Today&lt;&#x2F;a&gt; 也是很不错的入门材料。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-pin&quot;&gt;视频&lt;&#x2F;h4&gt;
&lt;p&gt;推荐斯坦福老头子(Paul Hegarty)的 &lt;a href=&quot;https:&#x2F;&#x2F;itunes.apple.com&#x2F;us&#x2F;course&#x2F;developing-ios-7-apps-for&#x2F;id733644550&quot;&gt;Developing iOS 7 Apps for iPhone and iPad&lt;&#x2F;a&gt; ，当初也是看的这个（那时还是更老的版本），Paul 是资深的 Mac&#x2F;iOS 开发（前苹果员工？），很多知识点讲得很到位，学生们的提问也大都在点上，同时配有 Demo，总之听下来会对 iOS 开发有比较全面的了解。&lt;&#x2F;p&gt;
&lt;p&gt;同时推荐一本小册子：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;objc-zen&#x2F;objc-zen-book&quot;&gt;objc-zen-book&lt;&#x2F;a&gt;，花不长时间就能看完，里面是一些 Best Practices，对于编写优质代码会很有帮助。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bi-ji&quot;&gt;笔记&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个持久的过程，任何阶段都适用。以前也没太在意这个，觉得概念性的东西，脑子过一遍，就大概知道了，然后就去啃其他的东西了，现在看来，如果有记笔记的话，会更有助于消化概念、知识点，也可以记录自己的思考过程。达芬奇就记录了 10000 多页的笔记。&lt;&#x2F;p&gt;
&lt;p&gt;记笔记可以加深对知识点的理解，而成为编程巨星的唯一秘诀就是：&lt;a href=&quot;http:&#x2F;&#x2F;www.codesimplicity.com&#x2F;post&#x2F;the-singular-secret-of-the-rockstar-programmer&#x2F;&quot;&gt;对所做的事情理解地越深，就会做得越好&lt;&#x2F;a&gt;。同时如果遵循&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;&#x2F;a&gt;去复习的话，效果更佳。对知识点了解地足够透彻后，Debug 时才更有可能知道问题出在哪，解决问题也更容易有思路。&lt;&#x2F;p&gt;
&lt;p&gt;笔记不仅可以记知识点，也可以记录调试过程，比如&lt;a href=&quot;http:&#x2F;&#x2F;borkware.com&#x2F;bnr&#x2F;CampWhereIOS6.html&quot;&gt;这篇笔记&lt;&#x2F;a&gt;，有一种调试方法：&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95&quot;&gt;小黄鸭调试法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多程序员都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题，就在解释的过程中击中了问题的解决方案。一边阐述代码的意图一边观察它实际上的意图并做调试，这两者之间的任何不协调会变得很明显，并且更容易发现自己的错误。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;生活中我们可能不会真的这么去做，这时抽离出另一个自己，记录下跟 ta 的对话，也是个发现问题的好方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;lian-xi&quot;&gt;练习&lt;&#x2F;h4&gt;
&lt;p&gt;这也是一个持续的过程，知道了些概念或原理后，总是会想着去验证下是不是这样，无论结果是否如自己预期，实践的过程会降低对语言的陌生感，慢慢地培养一种驾驭这门语言的自信，如果出了错，正好可以重新梳理一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;如果静下心来看完了 BNR 的这本书，以及斯坦福的 iOS 开发视频，那么对 OC 应该比较了解了，一些常用的 UIKit 用起来也没什么问题了，比如 UIViewController &#x2F; UIView &#x2F; UIScrollView &#x2F; UIImageView &#x2F; UITableView。也熟悉一些概念，如 KVO &#x2F; MVC &#x2F; Delegate &#x2F; DataSource。&lt;&#x2F;p&gt;
&lt;p&gt;这个阶段下来，应该会有：哦，iOS 开发也就这样嘛，多翻翻文档，熟悉 Cocoa Touch 的一些 Class，差不多也能做出一个简单的 App 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-jie&quot;&gt;进阶&lt;&#x2F;h3&gt;
&lt;p&gt;入门之后，接下来可以折腾的东西还会有不少。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-1&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Effective-Objective-C-2-0-Specific-Development&#x2F;dp&#x2F;0321917014&quot;&gt;Effective Objective-C 2.0&lt;&#x2F;a&gt;，里面提到了 52 种提高 iOS App 质量的途径。涉及了 API 设计、protocols &#x2F; category 的使用、写出更模块化的代码等，读下来应该会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Ranch-Guide-Guides&#x2F;dp&#x2F;0321942051&quot;&gt;iOS Programming: The Big Nerd Ranch Guide (4th Edition)&lt;&#x2F;a&gt;，又是一本 BNR 的书，这本书的特点是通过 Demo 来引出知识点，然后提一些问题，并且会细说解题思路。看书的过程中，对于元学习能力的提升也会有一定帮助。&lt;&#x2F;p&gt;
&lt;p&gt;--- update ---&lt;&#x2F;p&gt;
&lt;p&gt;发现巧哥的 &lt;a href=&quot;http:&#x2F;&#x2F;item.jd.com&#x2F;11598468.html&quot;&gt;iOS 开发进阶&lt;&#x2F;a&gt; 已经可以在京东买到了，虽然没有细看，但巧哥出品质量肯定有保障。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qi-ta-zi-yuan&quot;&gt;其他资源&lt;&#x2F;h4&gt;
&lt;p&gt;进入这个阶段后，可以去探索更大的世界了，现在的资源已经很丰富了，但还是要遵循「少而精」的原则。以下是我觉得挺不错的源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdevweekly.com&#x2F;&quot;&gt;iOS Dev Weekly&lt;&#x2F;a&gt; 每周一期，内容多为这一星期里值得关注的 Github 项目、文章、工具等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.devtang.com&#x2F;&quot;&gt;iOS 移动开发周报&lt;&#x2F;a&gt; 这是唐巧大大整理的每周不错的 iOS 开发相关的内容，多为中文。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.raywenderlich.com&#x2F;tutorials&quot;&gt;RayWenderlich&lt;&#x2F;a&gt; 很多详细又全面的教程，不容错过。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iosdev.slack.com&#x2F;home&quot;&gt;iOS Dev Slack&lt;&#x2F;a&gt; 国内不少 iOS 开发（包括大大们）都在这里，不过现在好像不怎么能拿到邀请了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tangqiaoboy&#x2F;iOSBlogCN&quot;&gt;中文 iOS&#x2F;Mac 开发博客列表&lt;&#x2F;a&gt;，打开工具订阅吧。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;还有，如果可能的话，多去分享自己学到的东西，教是最好的学，我试过几次，效果真的很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mu-biao-1&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段下来，对于常用的设计模式、内存管理、Blocks 的使用、图像操作、网络请求和管理、多线程应该比较熟悉了。对于 CALayer、Animation、UIScrollView、UITableView、UICollectionView、ViewController Container 则非常熟悉，对「非常熟悉」的定义是：不打开 Xcode，脑子里就能把相应的知识点复述出来 80% ，比如这个类有哪些方法，Delegate &#x2F; DataSource 有哪些方法，怎么使用，如果要实现某个效果，应该怎么做（好吧， UICollectionView 除外）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji&quot;&gt;高级&lt;&#x2F;h3&gt;
&lt;p&gt;其实高级、进阶、入门并没有严格的界限，在入门阶段也可以探究高级阶段的一些东西。我觉得支撑我们不断探索和前进的动力不是兴趣，而是永不满足的好奇心，和对优雅代码的追求。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your standards are low, you&#x27;re going to stop pretty early on in the process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;BNR 的这篇 &lt;a href=&quot;http:&#x2F;&#x2F;www.bignerdranch.com&#x2F;blog&#x2F;leveling-up&#x2F;&quot;&gt;Leveling Up&lt;&#x2F;a&gt; 已经讲得很好了，也更加细致。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ji-2&quot;&gt;书籍&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;iOS-Programming-Pushing-Limits-Applications&#x2F;dp&#x2F;1118818342&quot;&gt;iOS 7 Programming Pushing the Limits&lt;&#x2F;a&gt; 这本书对 iOS 7 的一些特性会讲解地比较深入，当然也不仅仅是 iOS 7。只叹 iOS 更新实在太快，书籍往往跟不上，一本好书往往需要很长时间来撰写，等书可以出版了，iOS 又出新版本了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yuan-ma&quot;&gt;源码&lt;&#x2F;h4&gt;
&lt;p&gt;看优秀的源码，可以学到很多东西，使用过程中遇到问题也更容易解决。这些是我觉得值得细看的源码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AFNetworking&#x2F;AFNetworking&quot;&gt;AFNetworking&lt;&#x2F;a&gt;(NSOperation, HTTP, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rs&#x2F;SDWebImage&quot;&gt;SDWebImage&lt;&#x2F;a&gt;(Image Handle, Cache, NSOperation, Block), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samvermette&#x2F;SVPullToRefresh&quot;&gt;SVPullToRefresh&lt;&#x2F;a&gt;(UIScrollView, State Handle), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;icanzilb&#x2F;JSONModel&quot;&gt;JSONModel&lt;&#x2F;a&gt;(runtime)&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，也可以翻翻 &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;CF&#x2F;CF-855.17&#x2F;&quot;&gt;CoreFoundation&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;http:&#x2F;&#x2F;www.opensource.apple.com&#x2F;source&#x2F;objc4&#x2F;objc4-646&#x2F;&quot;&gt;OC runtime&lt;&#x2F;a&gt; 的源码。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-yuan&quot;&gt;资源&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;oleb.net&#x2F;blog&#x2F;&quot;&gt;oleb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nshipster.com&#x2F;&quot;&gt;NSHipster&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;objc.io&quot;&gt;objc.io&lt;&#x2F;a&gt; || &lt;a href=&quot;http:&#x2F;&#x2F;objcio.cn&quot;&gt;objcio.cn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;&quot;&gt;WWDC 视频&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gong-ju&quot;&gt;工具&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;chisel&quot;&gt;chisel&lt;&#x2F;a&gt; Facebook 出品的 LLDB 助手，用于调试很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;revealapp.com&#x2F;&quot;&gt;Reveal&lt;&#x2F;a&gt; 每当好奇某个 App 的实现时，都会打开它一窥究竟，用于调试自己的 App 也很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; steipete 大大出品的一款方便使用 method swizzling 的工具，可以在运行时动态添加代码到某个方法&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nygard&#x2F;class-dump&quot;&gt;class-dump&lt;&#x2F;a&gt; 从 Mach-O 文件生成 OC 头文件，有时想看看某个 App 大概是如何组织的会比较方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.hopperapp.com&#x2F;&quot;&gt;Hopper&lt;&#x2F;a&gt; 可以对二进制文件进行反编译，甚至可以生成伪代码！有时想看看 UIViewController 里某个方法大概是怎么实现的，就可以用它。&lt;&#x2F;li&gt;
&lt;li&gt;Instruments 这个内置的工具对于发现 App 的各种问题很有帮助，如内存占用、泄露，渲染问题等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;mu-biao-2&quot;&gt;目标&lt;&#x2F;h4&gt;
&lt;p&gt;这个阶段，对于底层的实现会有更深入的了解，各种 Core 开头的 Framework 至少可以说出个大概，工具也能熟练使用，「正经的代码」写过数万行，可能天天在翻 &lt;a href=&quot;http:&#x2F;&#x2F;kapeli.com&#x2F;dash&quot;&gt;Dash&lt;&#x2F;a&gt;。如果别人让你实现某个功能，能在较短的时间内给出不错的实现方案，并且足够细致，甚至精细到如何使用 Core Graphic 去画某个图像。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;我觉得无论学习什么，「速成」的心态是最要不得的，这只会让自己变得浮躁，一知半解，整个过程也很难让自己的元学习能力得到提升。慢慢来，攻占一个城后，再去打下一个，这时心态也会平和许多。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>读 Facebook App 头文件的一些收获</title>
            <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/facebook-app-headers/</link>
            <guid>https://limboy.me/posts/facebook-app-headers/</guid>
            <description>&lt;p&gt;最近在看一些 App 架构相关的文章，也看了 Facebook 分享的两个不同时期的架构（2013 和 2014），于是就想一窥 Facebook App 的头文件，看看会不会有更多的收获，确实有，还不少。由于在选择 ipa 上的失误，下了个 7.0 版的 Facebook（最新的是 18.1），会稍有过时，不过后来又下了个 18.1 的看了下，发现变动其实不大。以下是我从头文件中获取到的一些信息（20 多万行，浏览起来还是挺累的）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rang-shi-tu-zu-jian-ke-yi-fang-bian-di-pei-zhi&quot;&gt;让视图组件可以方便地配置&lt;&#x2F;h3&gt;
&lt;p&gt;这个在 Facebook 的演讲中也提到过，自定义的 UI 组件在初始化时可以传一些数值来表示想要呈现的效果，就像 HTML 和 CSS 一样，Dom 结构表示这是什么，CSS 对该结构进行个性化定制。 Facebook 是通过 Struct 来做这件事的，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FBActionSheetButtonMetrics {
&lt;&#x2F;span&gt;&lt;span&gt;    CDUnknownFunctionPointerType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_vptr$FBMetrics;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;_Bool&lt;&#x2F;span&gt;&lt;span&gt; _initialized;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; leftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; textLeftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorSideMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorHeight;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; detailMaxNumLines;
&lt;&#x2F;span&gt;&lt;span&gt;    UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;titleColor;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好处是减少了代码量，而且直观，方便复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-liang-shi-yong-zu-he-gua-du-shi-yong-ji-cheng&quot;&gt;尽量使用组合，适度使用继承&lt;&#x2F;h3&gt;
&lt;p&gt;如果过度使用继承，尤其是继承层次过深，往往会带来更大的维护成本。有新需求或需求变更时，会花很多时间在「是否需要在基类&#x2F;子类增加一个方法」，「是否需要新建一个子类」等设计相关的问题上。而组合则没有这个问题，大不了换一个组件。&lt;&#x2F;p&gt;
&lt;p&gt;不过 Objective-C 对于组合并没有特别的支持，所以实现起来会略麻烦&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;People {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;People
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithVehicle: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle&lt;&#x2F;span&gt;&lt;span&gt; move];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有很多类似 move 这样需要交给外部的 object 来做的方法，就会显得冗余，尽管如此，比起继承来还是更方便维护的。&lt;&#x2F;p&gt;
&lt;p&gt;使用组合的话，一般会使用「依赖注入」，比如这里的 Vehicle，并不需要特别指出是 Bike 还是 Car，只要有 move 方法就可以，这样就可以很方便地替换，对于 People 来说不需要做任何改动。在 Objective-C 里是通过 protocol 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所以 Facebook 定义了一大堆的接口，包括 Delegate, DataSource 和 Protocol，ViewController 有 Protocol，也有 Delegate(如 FBMediaGalleryViewControllerDelegate)，View &#x2F; Cell 也有 Delegate(如 FBMediaGalleryViewDelegate)，还有各种零零碎碎的 Protocol，如 FBDiscoveryCardProtocol, FBEventProtocol 等。&lt;&#x2F;p&gt;
&lt;p&gt;定义接口的过程也是梳理架构的过程，如果对架构理解不够深刻，是很难将接口恰当地抽象出来的。很多人放弃使用组合，有一部分原因也是架构上的不合理。&lt;&#x2F;p&gt;
&lt;p&gt;组件的粒度也是个问题，过细会导致组件过多，组合的过程就会花去很多时间；过粗又导致组件臃肿，难以复用。&lt;&#x2F;p&gt;
&lt;p&gt;当组件的接口定义完之后，使用起来大概会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBResponseHandler : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBTestable, FBReceivedDataBufferDelegate, FBResponseHandlerProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@interface FBPhotoViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; UIViewController &amp;lt;FBPagingViewDelegate, FBPagingViewDataSource, FBPresentableViewController&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样一眼就大概能看出来这个 Class 大概会有哪些功能，如果某个组件要作调整，只需修改一处，就可以全局通用。&lt;&#x2F;p&gt;
&lt;p&gt;适度使用继承，可以在易维护和便利上达到平衡，比如 FBTableViewController, FBDialog 等，自定义的组件可以在它们的基础上进行开发。继承的层次一般不超过 2 层，比如 UITableViewController &amp;lt;- FBTableViewController &amp;lt;- FBFriendsNearbyTableViewController&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;前面讲过，组合往往和依赖注入搭配使用，Facebook 主要是通过 FBProvider, FBProviderMapData, FBProviderMap 来实现依赖注入的。&lt;&#x2F;p&gt;
&lt;p&gt;Provider 会产生一个 Object，比如 CameraControllerProvider 调用 get 方法后，会生成一个 MNCameraController 的实例。同时 Provider 还有两个子类 SingletonProvider 和 BlockProvider，前者用来生成一个单例，后者用在需要初始化参数的情景。&lt;&#x2F;p&gt;
&lt;p&gt;ProviderMap 跟 ProviderMapData 有些重复，它们之间的关系我也没有捋清，感觉 ProviderMap 像是一个 Manager，注册了一堆 Provider，然后可以通过 Provider 的 ID 来找到之前注册的 Provider。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-hua&quot;&gt;模块化&lt;&#x2F;h3&gt;
&lt;p&gt;不光是在 Cocoa 开发领域，其他的编程领域也一样，模块化是一个理想的状态，高内聚，低耦合。像 shell 命令一样，接受参数或标准输入，生成格式化的标准输出，通过管道传递给其他支持标准输入的命令行工具。&lt;&#x2F;p&gt;
&lt;p&gt;但现实场景要复杂的多，模块化的实现也更加困难。Facebook 有一个 FBAppModule 协议&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBAppModule &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBAppModule&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceForSession:&lt;&#x2F;span&gt;&lt;span&gt;(FBSession &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;providerMap:&lt;&#x2F;span&gt;&lt;span&gt;(FBProviderMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedURLSchemes;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedKeys;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt; activeMenuItem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;defaultIcon;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ID;
&lt;&#x2F;span&gt;&lt;span&gt;- (UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewControllerForMenuItem:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初始化时传入一个 FBSession (后面会讲到) 和 ProviderMap，然后设置支持的 url schemes，keys(具体作用未知)，对应的 menuItem，icon(用于在 menuItem 显示) 和 ID&lt;&#x2F;p&gt;
&lt;p&gt;有了 Module ，自然还有 ModuleManager，它的作用是注册 Module，当一个 url 过来时，可以遍历 Module，看看是不是有模块可以处理这个 url，有的话，就调用该 Module 的 openURL: 方法。当然也可以根据 ModuleID 来获取 Module。&lt;&#x2F;p&gt;
&lt;p&gt;FBAppModule 是一个 Protocol，FBNativeAppModule 是对该协议的实现，所以具体的模块都继承该类。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dao-hang-guan-li&quot;&gt;导航管理&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说系统的 UINavigationController 已经够使用了，如果需要更大的自由度和更高的可定制性，可以自定义一个导航管理器，Facebook 使用了 FBUINavigationController (Protocol) 来实现自定义导航的管理，属性和方法跟系统的差不多。 它有多个实现：FBTariffedNavigationController, FBSwipeNavigationController, FBCustomNavigationController, FBNavigationController。前面讲过继承一般不超过 2 层，这里是一般之外的情况，有 3 层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h3&gt;
&lt;p&gt;MVVM 是解决 Massive View Controller 的一个有效方法，独立出一个 ViewModel 作为 View 的数据源，以及处理 View 的一些交互操作，而 VC 只需要将 ViewModel 和 View 关联起来即可。一般会搭配某种绑定的实现，KVO 或 ReactiveCocoa 都可以，这样 ViewModel 的数据有变化就可以自动映射到 View 上。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 也采用了这种方式，有一个 FBViewModel 基类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBViewModel : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省略了一些相关性不大的属性和方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelManager; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelManager=_viewModelManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelSource; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelSource=_viewModelSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBViewModelConfiguration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelConfiguration; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelConfiguration=_viewModelConfiguration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelVersion; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelVersion=_viewModelVersion;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelUUID; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelUUID=_viewModelUUID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBMemModelObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;memModel; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize memModel=_memModel;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNilValueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithViewModelUUID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setViewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;humanDescription&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadPermanentDataModelObjectIDFromDataModelObjectID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didUpdateWithChangedProperties:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; loadState;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Facebook 自己实现了一套 ViewModel 的更新通知机制，因为 ViewModel 都是 Immutable 的，所以无法改变，那么就需要有一个地方去集中管理这些 ViewModel，有更新时可以及时通知到， FBViewModelController 应该就是干这事的，里面有一个方法 &lt;code&gt;- (void)_notifyViewModel:(id)arg1 didUpdateWithChanges:(id)arg2;&lt;&#x2F;code&gt; 。但 FBViewModelManager 看起来更合适，二者的功能没有太理清楚。&lt;&#x2F;p&gt;
&lt;p&gt;FBViewModelController 还有一个 Delegate，主要有 3 个方法 &lt;code&gt;didUpdate[Delegate][Insert]ViewModel:&lt;&#x2F;code&gt;，可以做一些事后的操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;builder-pattern&quot;&gt;Builder Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;在定义一个 ViewController 时，往往需要接收很多个参数，以 &lt;code&gt;initWith:&lt;&#x2F;code&gt; 这种形式出现不太合适，除非你能容忍一个 10 行的方法声明。通常的做法是把这些参数声明为 property，然后在初始化 VC 后，对这些 property 赋值，然后在 ViewDidLoad 里使用这些 property。这样做有几个问题：1) 不知道哪些是需要在 ViewDidLoad 前设置的，会出现忘了设置的现象。2) 这些属性可以在外部被改动。 3) 代码不够优雅。&lt;&#x2F;p&gt;
&lt;p&gt;Builder Pattern 就是用来解决这个问题的，它跟工厂模式有点像。Facebook 也用到了这个模式，比如有一个 FBMUserFetchStatus 类，该类初始化时需要一些参数，于是就有了 FBMUserFetchStatusBuilder 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBMUserFetchStatusBuilder : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatusFromExistingMUserFetchStatus:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatus&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIdentifiers:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withImageUrls:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasVerifiedPhone:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withCanInstallMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIsFriend:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withNickname:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withPhoneticName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withUserId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后的 build 方法会生成一个 FBMUserFetchStatus 实例，有了这个 Builder 就知道有哪些参数是可以在初始化时进行设置的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-manager&quot;&gt;Data Manager&lt;&#x2F;h3&gt;
&lt;p&gt;这是重头戏，所以看起来略累，东西很多，很可能推断错误。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看实体类，首先是 FBEntityRequest&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntityRequestParse
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;canParse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;syncError;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isSyncing) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; syncing;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以实体都是可以被解析和同步的，还自带了一个 Request。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 FBEntity&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntity &amp;lt;FBEntityRequestParse, NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityURLForFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityURL;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isDataStale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; dataStale;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;lastSyncTime;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fbid;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collection:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionRequest:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBEntityDownloader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityDownloader;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentEdges&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentCollections&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityInitializeWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每个 Entity 都有一个 entityURL，或许可以用来同步？ dataStale 应该是用来表示数据是否 dirty，如果是的话，可能需要同步。 还可以请求 Collection。&lt;&#x2F;p&gt;
&lt;p&gt;FBEntityCollection 跟 FBEntity 类似，不过多了 syncAll &#x2F; memberClass &#x2F; allObjects 这些属性&#x2F;方法。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看数据请求，首先是 FBRequest，不太明白这个 Class 的具体功能，因为没有 URL，一个没有 URL 的 Request 能做什么？ 然后看到了 FBRequester，这个看起来是一个数据请求类，有 URL, responseHandler, connection 状态, delegate 等。但这只是单个的请求，如何对多个请求进行管理呢，这时看到了 FBNetworker，它有 +sharedNetworker, requestQueue, cancelRequests:, addRequest: 所以就是它了。等等，为什么下面还有一个 FBNetworkerRequest ？看起来像是 FBNetworker 的 Delegate，但不确定。&lt;&#x2F;p&gt;
&lt;p&gt;为了避免 URI 散落在各处，Facebook 还专门为 NSURL 写了个 Category 来统一管理 URI。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;NSURL (FBFoundation)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;friendsNearbyURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;codeGeneratorURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURLWithTagId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pokesURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;personExpandedAboutURLWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个 URL 生成类，FBURLRequestGenerator，该类保存了 appSecret 和 appVersion，生成的 URL 会自动带上这些属性。&lt;&#x2F;p&gt;
&lt;p&gt;其实还有很多，实在看不下来了···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smarter-views&quot;&gt;Smarter Views&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道 ViewController 自带了一个 view，可以直接在这个 view 上 addSubview，正是由于这个便利性，很多创建 View 的代码也挤在了 VC 里，实在是不雅观。&lt;&#x2F;p&gt;
&lt;p&gt;更好的方法是替换 VC 的 view 为自定义的 View，然后把这个自定义 View 独立出去。比如在 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 时覆盖 view&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyProfileViewController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadView &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MyProfileView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以同时重定义 view 的类型，如 &lt;code&gt;@property (nonatomic) MyProfileView *view&lt;&#x2F;code&gt;，让编译器明白 view 的类型已经变了。&lt;&#x2F;p&gt;
&lt;p&gt;因为看到了不少 VC 中都有 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 方法，所以推断可能使用了这项技术。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fbsession&quot;&gt;FBSession&lt;&#x2F;h3&gt;
&lt;p&gt;在 Web 开发领域，Session 是用来保存用户相关的信息的，FBSession 自然也不例外，不过它保存的内容还真是多呢。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBSession : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBInvalidating&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setCurrentSession:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_globalSessionForDebugging&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDcurrentSession&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBAPISessionStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiSessionStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize apiSessionStore=_apiSessionStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBSessionDiskStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionDiskStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize sessionDiskStore=_sessionDiskStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;store; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize store=_store;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSecret; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize appSecret=_appSecret;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isValid) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; valid;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; hasUser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userFBID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBViewerContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewerContext;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBUserPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userPreferences;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionPreferences;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateAccessToken:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateActingViewer:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clearPreferences&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invalidate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDvalueForKeyRequiresUser:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithAppSecret:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiSessionStore:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBReactionController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;reactionController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBLocationPingback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;locationPingback;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBAppSectionManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSectionManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBBookmarkManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;bookmarkManager;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and many more...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Session 是可以保存到本地的，有一个状态变量用来标识是否有效(valid)，是否已登录(hasUser)，用户的一些设置(这些设置会保存到本地)，可以更新 AccessToken，还带了各种 Controller 和 Manager，所以东西还是挺多的。&lt;&#x2F;p&gt;
&lt;p&gt;这里有两个特殊方法，使用后会被 Fire···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;services&quot;&gt;Services&lt;&#x2F;h3&gt;
&lt;p&gt;Service 顾名思义，提供某种服务，往往跟界面无关。从目录层级上看，Service 并不在 Module 里面，也就是说这二者是独立的，比如 FBTimelineModule 并不包含 FBTimelineService。&lt;&#x2F;p&gt;
&lt;p&gt;Service 之间可以有依赖，这里是通过 &lt;code&gt;startAppServiceWithDependencies:&lt;&#x2F;code&gt; 来实现的，不过不清楚 Service 自身如何声明依赖哪些其他的 Services。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;style&quot;&gt;Style&lt;&#x2F;h3&gt;
&lt;p&gt;App 的 Style 是一个容易被忽视的地方，开发往往看着设计图就开始写了，这样很容易造成样式不统一，且将来调整起来也不方便。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 是通过 Category 来自定义样式的，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBMediaKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonTypeSystemWithTitle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithNormalImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;highlightedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithTemplateImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithStyle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBUIKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_moreOptionsNavBarButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithText&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithRightPadding:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (MNLoginFormAppearanceHelpers)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;phoneFormHeaderButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;singleSignOnButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;skipButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;formFieldButtonInvertedColors&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样也不用关心 fontColor，margin，backgroundColor 等，直接拿来用即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;从目录结构上来看，Facebook 有 FBUIKit, FBFoundation, FBAppKit, Module。其中 FBUIKit 和 FBFoundation 是业务无关的，可以用在其他 App 上，FBAppKit 和 Module 是业务相关的。&lt;&#x2F;p&gt;
&lt;p&gt;Module 自带资源，可以看成是一个 mini app。&lt;&#x2F;p&gt;
&lt;p&gt;使用了 EGODatabase, SDWebImage, SSZipArchive, CocoaLumberjack 这几个开源类库（可能还有更多）。&lt;&#x2F;p&gt;
&lt;p&gt;时间和能力有限，只能挖掘出这些信息，希望能带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>使用objection来模块化开发iOS项目</title>
            <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/use-objection-to-decouple-ios-project/</link>
            <guid>https://limboy.me/posts/use-objection-to-decouple-ios-project/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atomicobject&#x2F;objection&quot;&gt;objection&lt;&#x2F;a&gt; 是一个轻量级的依赖注入框架，受&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-guice&#x2F;&quot;&gt;Guice&lt;&#x2F;a&gt;的启发，&lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;wallet&#x2F;&quot;&gt;Google Wallet&lt;&#x2F;a&gt; 也是使用的该项目。「依赖注入」是面向对象编程的一种设计模式，用来减少代码之间的耦合度。通常基于接口来实现，也就是说不需要 new 一个对象，而是通过相关的控制器来获取对象。2013 年最火的 PHP 框架 &lt;a href=&quot;http:&#x2F;&#x2F;laravel.com&quot;&gt;laravel&lt;&#x2F;a&gt; 就是其中的典型。&lt;&#x2F;p&gt;
&lt;p&gt;假设有以下场景：ViewControllerA.view 里有一个 button，点击之后 push 一个 ViewControllerB，最简单的写法类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;buttonWithType:UIButtonTypeSystem&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTitle:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Button&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forState:UIControlStateNormal&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(buttonTapped) forControlEvents:UIControlEventTouchUpInside&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt; addSubview&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;button];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)buttonTapped
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;navigationController&lt;&#x2F;span&gt;&lt;span&gt; pushViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样写的一个问题是，ViewControllerA 需要 import ViewControllerB，也就是对 ViewControllerB 产生了依赖。依赖的东西越多，维护起来就越麻烦，也容易出现循环依赖的问题，而 objection 正好可以处理这些问题。&lt;&#x2F;p&gt;
&lt;p&gt;实现方法是：先定义一个协议(protocol)，然后通过 objection 来注册这个协议对应的 class，需要的时候，可以获取该协议对应的 object。对于使用方无需关心到底使用的是哪个 Class，反正该有的方法、属性都有了(在协议中指定)。这样就去除了对某个特定 Class 的依赖。也就是通常所说的「面向接口编程」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; *&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;vc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lightGrayColor&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;nc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rootViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector，这个 injector 已经注册过&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;了。&lt;&#x2F;li&gt;
&lt;li&gt;[2] 获取&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;对应的 Object。&lt;&#x2F;li&gt;
&lt;li&gt;[3] 拿到 VC 后，设置它的某些属性，比如这里的 backgroundColor，因为在&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;里有定义这个属性，所以不会有 warning。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以看到这里没有引用 ViewControllerA。再来看看这个&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;是如何注册到 injector 中的，这里涉及到了&lt;code&gt;Module&lt;&#x2F;code&gt;，对 Protocol 的注册都是在 Module 中完成的。Module 只要继承&lt;code&gt;JSObjectionModule&lt;&#x2F;code&gt;这个 Class 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;JSObjectionModule
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;configure
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bindClass:[ViewControllerA class] toProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;绑定操作是在&lt;code&gt;configure&lt;&#x2F;code&gt;方法里进行的，这个方法在被添加到 injector 里时会被自动触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? : &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withModule:[[ViewControllerAModule alloc] init]&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setDefaultInjector:injector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [4]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector&lt;&#x2F;li&gt;
&lt;li&gt;[2] 如果默认的 injector 不存在，就新建一个&lt;&#x2F;li&gt;
&lt;li&gt;[3] 往这个 injector 里注册我们的 Module&lt;&#x2F;li&gt;
&lt;li&gt;[4] 设置该 injector 为默认的 injector&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这段代码可以直接放到 &lt;code&gt;+ (void)load&lt;&#x2F;code&gt;里执行，这样就可以避免在 AppDelegate 里 import 各种 Module。&lt;&#x2F;p&gt;
&lt;p&gt;因为我们无法直接获得对应的 Class，所以必须要在协议里定义好对外暴露的方法和属性，然后该 Class 也要实现该协议。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span&gt; currentIndex;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;backgroundColor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerA : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIViewController &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ViewControllerAProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 objection 实现依赖注入后，就能更好地实现 SRP(Single Responsibility Principle)，代码更简洁，心情更舒畅，生活更美好。拿 Pinterest 来说，下面的页面就可以划分为 3 个 Section。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;use-objection-to-decouple-ios-project&amp;#x2F;demo_4_objection.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;use-objection-to-decouple-ios-project&amp;#x2F;demo_4_objection.png 160w,&amp;#x2F;posts&amp;#x2F;use-objection-to-decouple-ios-project&amp;#x2F;demo_4_objection.png 160w&quot;
    sizes=&quot;(max-width: 160px) 100vw, 160px&quot; width=&quot;160&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;各个 Section 可以由不同的人负责，然后串到一起就行，也能一定程度地避免 MVC(Mess View Controller)的出现。&lt;&#x2F;p&gt;
&lt;p&gt;总体来说，这个 lib 还是挺靠谱的，已经维护了两年多，也有一些项目在用，对于提高开发成员的效率也会有不少的帮助，可以考虑尝试下。&lt;&#x2F;p&gt;
&lt;p&gt;---- update (2014-04-30) ----&lt;&#x2F;p&gt;
&lt;p&gt;写了个壁纸的 demo，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>基于AFNetworking2.0和RAC的iOS REST Client</title>
            <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-rest-client-implementation/</link>
            <guid>https://limboy.me/posts/ios-rest-client-implementation/</guid>
            <description>&lt;p&gt;在开发 iOS App 时经常会遇到跟后端 REST API 通信的情况。这就涉及到错误处理，NSDictionary 与 Model 的映射，用户登录与登出，权限验证，Archive&#x2F;UnArchive，Copy，AccessToken 过期处理等等，如果没有很好地处理这些点，就容易出现代码复杂度增大，结构散乱，不方便后期维护的现象。&lt;&#x2F;p&gt;
&lt;p&gt;正好最近在看 AFNetworking2.0 和 ReactiveCocoa2.1，参考了 github 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;octokit&#x2F;octokit.objc&quot;&gt;octokit&lt;&#x2F;a&gt;，重写了花瓣的 iOS REST API，分享些心得。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-jie-gou&quot;&gt;基本结构&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPI.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Classes
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.h
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.m
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Models
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时，直接引用&lt;code&gt;HBPAPI.h&lt;&#x2F;code&gt;即可，里面包含了所有的 Class。因为使用了 AFNetworking2.0，所以不再是 HBPClient，而是 HBPManager。 HBPAPIManager 包含了所有的跟服务端通信的方法，通过 Category 来区分。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 内部统一使用这个方法来向服务端发送请求
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; resultClass - 从服务端获取到JSON数据后，使用哪个Class来将JSON转换为OC的Model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; listKey - 如果不指定，表示返回的是一个object，如user，如果指定表示返回的是一个数组，listKey就表示这个列表的keyname，如{&amp;#39;users&amp;#39;:[]}, 那么listName就为&amp;#39;user&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;relativePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resultClass:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;resultClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;listKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;listKey&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; signal会send user，如果没有user，就会sendError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 必须当前用户已经登录的情况下调用
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Friendship)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Models Group 包含了所有跟服务端 API 对应的 Model，比如&lt;code&gt;HBPComment&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HBPComment.h&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPObject.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; HBPUser;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPComment : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;HBPObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; commentID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;createdAt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;HBPComment.m&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPComment.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPComment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;commentID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;user_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;userID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;created_at&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;createdAt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;archive-unarchive-copy&quot;&gt;Archive &#x2F; UnArchive &#x2F; Copy&lt;&#x2F;h3&gt;
&lt;p&gt;每一个 Object 都要支持 Archive &#x2F; UnArchive &#x2F; Copy，也就是要实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;协议，这两个协议的内容其实就是对 Object 的 Property 做些处理，所以如果可以在基类里把这些事都统一处理，就会方便许多。octokit 使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MantleFramework&#x2F;Mantle&quot;&gt;Mantle&lt;&#x2F;a&gt;来做这些事情，不过我觉得 Mantle 还是有些麻烦，于是写了个通过运行时来获取 property，并实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt; 和 &lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;的基类，只有两个公共方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPObject : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;NSCopying, NSCoding&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 解析API返回的JSON，返回对应的Model
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithDictionary:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; JSON key到property的映射关系
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSON&lt;&#x2F;code&gt;的作用是遍历 Object 的 Property，如果 Property 的 Class 是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;，那么就调用&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSO&lt;&#x2F;code&gt;，不然就通过 KVC 的&lt;code&gt;setValue:forKey:&lt;&#x2F;code&gt;来设定值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;- (NSDictionary *)JSONKeysToPropertyKeys&lt;&#x2F;code&gt;的内容大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;nav_link&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;navLink&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样通过一个&lt;code&gt;HBPObject&lt;&#x2F;code&gt;基类就完成了 Archive &#x2F; UnArchive &#x2F; Copy 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-hu-de-deng-lu-yu-deng-chu&quot;&gt;用户的登录与登出&lt;&#x2F;h3&gt;
&lt;p&gt;先来说说登录，由于使用 RAC，在构造 API 时，就不需要传入 Block 了，随之而来的一个问题就是需要在注释中说明&lt;code&gt;sendNext&lt;&#x2F;code&gt;时会发送什么内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)signInUsingUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)username passowrd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)password
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(API_CLIENT_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; API_CLIENT_SECRET, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;API_CLIENT_ID and API_CLIENT_SECRET must be setted&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;grant_type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; username,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; password,
&lt;&#x2F;span&gt;&lt;span&gt;                                 };
&lt;&#x2F;span&gt;&lt;span&gt;    HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createManager&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchTokenWithParameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            setNameWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;+signInUsingUsername:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; password:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, username, password];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看着还挺简单的吧，因为主要工作都是&lt;code&gt;+fetchMoreData:parameters&lt;&#x2F;code&gt;在做，看看它的实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)fetchTokenWithParameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[[[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_POST:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oauth&#x2F;access_token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; reduceEach的作用是传入多个参数，返回单个参数，是基于`map`的一种实现
&lt;&#x2F;span&gt;&lt;span&gt;             reduceEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;response){
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 拿到token后，就设置token property
&lt;&#x2F;span&gt;&lt;span&gt;				 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setToken:方法会被触发，在那里会设置请求的头信息，如Authorization。
&lt;&#x2F;span&gt;&lt;span&gt;                 HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;response];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; token;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对Error进行处理，方便外部识别
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1001 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorConnectionFailed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorAuthenticatedFailed;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManagerErrorDomain code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;code userInfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:apiError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 一切正常的话，顺便获取用户信息
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doNext相当于一个钩子，是在sendNext时会被执行的一段代码
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; user;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把发送内容换成self
&lt;&#x2F;span&gt;&lt;span&gt;             mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 避免side effect
&lt;&#x2F;span&gt;&lt;span&gt;             replayLazily];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里对 signal 进行了 chain &#x2F; modify &#x2F; hook 等操作，主要作用是获取 access token 和用户信息。&lt;&#x2F;p&gt;
&lt;p&gt;用户的登出就简单了，直接设置&lt;code&gt;user&lt;&#x2F;code&gt;和&lt;code&gt;token&lt;&#x2F;code&gt;为&lt;code&gt;nil&lt;&#x2F;code&gt;就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-chao-shi-shi-jian-he-huan-cun-ce-lue&quot;&gt;设置超时时间和缓存策略&lt;&#x2F;h3&gt;
&lt;p&gt;因为 AF2.0 使用了新的架构，导致要设置 Request 的超时和缓存稍微有些麻烦，需要新建一个继承自&lt;code&gt;AFHTTPRequestSerializer&lt;&#x2F;code&gt;的 Class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AFHTTPRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;URLString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:method URLString:URLString parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;timeoutInterval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cachePolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSURLRequestReloadIgnoringLocalCacheData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; request;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后将这个 class 设置为 manager.requestSerializer&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithBaseURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLWithString:API_SERVER&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;requestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[HBPAPIRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就行了&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-xian-yan-zheng&quot;&gt;权限验证&lt;&#x2F;h3&gt;
&lt;p&gt;这个比较简单些，直接在方法里面加上判断&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)createCommentWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)pinID text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)text
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; authenticatedError]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;POST&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pins&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;comments&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, pinID] parameters:@{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; text} resultClass:[HBPComment class] listKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;accesstoken-guo-qi-de-chu-li&quot;&gt;AccessToken 过期的处理&lt;&#x2F;h3&gt;
&lt;p&gt;AccessToken 过期和获取新的 AccessToken 可以交给使用者来做，但是会比较麻烦，最好的方法是过期后自动去获取新的 AccessToken，拿到 Token 后自动去执行之前失败的请求，这块我是这么处理的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)requestWithMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)method relativePath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)relativePath parameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters resultClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)resultClass listKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)listKey
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;requestSignal;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create requestSignal
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;catch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManagerErrorInvalidAccessToken) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;refreshToken] ignoreValues] concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestSignal];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[RACSignal error:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hbpobject-subclass&quot;&gt;HBPObject SubClass&lt;&#x2F;h3&gt;
&lt;p&gt;那些继承自&lt;code&gt;HBPObject&lt;&#x2F;code&gt;的子类，有些事情是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;无法处理的，比如 NSArray 的 Property，因为 Objective-C 不支持 generic，所以无法知道这个数组包含的究竟是怎样的 Class，这时就需要在子类对这些 property 做处理。&lt;&#x2F;p&gt;
&lt;p&gt;比如画板(HBPBoard)有一个叫&lt;code&gt;pins&lt;&#x2F;code&gt;的 NSArray 属性，因为在&lt;code&gt;HBPObject&lt;&#x2F;code&gt;中使用了 KVC，所以如果子类有类似&lt;code&gt;setXXX:&lt;&#x2F;code&gt;的方法的话，那么该方法就会被调用，利用这一点，就可以处理那些特殊情况。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPBoard
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPins:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pins
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _pins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[pins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_sequence&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;value) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBPPin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;value];
&lt;&#x2F;span&gt;&lt;span&gt;    }] array];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再比如，返回的 JSON 内容中，有一个叫&lt;code&gt;content&lt;&#x2F;code&gt;的 key，其中有 type &#x2F; date &#x2F; color 等 sub key，而你只想要&lt;code&gt;type&lt;&#x2F;code&gt;信息，只需添加一个&lt;code&gt;type&lt;&#x2F;code&gt; property，然后在&lt;code&gt;setContent&lt;&#x2F;code&gt;时，设置一下&lt;code&gt;type&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)content
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; content[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;以上就是我在使用 AFNetworking2.0 和 ReactiveCocoa2.1 构建 iOS REST Client 时的一些小心得，确实能感觉到 RAC 带了不少方便，虽然也同时带来了一些弊端（如返回的内容不明确，学习成本高），但还是利大于弊。&lt;&#x2F;p&gt;
&lt;p&gt;有什么问题和想法，欢迎交流。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>类簇在iOS开发中的应用</title>
            <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/class-cluster/</link>
            <guid>https://limboy.me/posts/class-cluster/</guid>
            <description>&lt;p&gt;类簇(class cluster)是一种设计模式，在 Foundation Framework 中被广泛使用，举个简单的例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;arrayWithObjects:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;arr class:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, [arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output: __NSArrayI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;是一个私有类，来看看这个类的头文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;__NSArrayI : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; _used;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看出&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;继承了&lt;code&gt;NSArray&lt;&#x2F;code&gt;。为什么要这么设计呢？拿 NSNumber 来举个例子，我们都知道 NSNumber 可以存储多种类型的数字，如 Int&#x2F;Float&#x2F;Double 等等，一种方式是把 NSNumber 作为基类，然后分别去实现各自的子类，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;初看起来也没什么问题，但如果子类很多，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster2.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这对使用者来说显然不够方便，得记住这么多类。如果使用类簇，问题就变得简单了，把 Number 作为抽象基类，子类各自实现存取方式，然后在基类中定义多个初始化方式，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster3.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在只需要记住一个类就可以了。&lt;code&gt;NSNumber&lt;&#x2F;code&gt;的初始化伪代码大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithBool
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFBoolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithLong
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-ios-xiang-mu-zhong-de-ying-yong&quot;&gt;在 iOS 项目中的应用&lt;&#x2F;h3&gt;
&lt;p&gt;在开发 app 时经常会遇到表现和行为完全一样，但数据源不一样的情况。以花瓣 app 为例，同样是瀑布流，可能来自我喜欢的图片、某个画板下的图片、某个用户的图片等等。如果为每一种表现方式都新建一个 Controller，并且使用这个 Controller 来初始化，那么就会遇到最开始提到的问题：子类太多，使用不便。这正好可以通过类簇来很方便地搞定。比如这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBWaterfallViewController
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithLiked
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBLikedViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithBoardID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;boardID
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBBoardViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]initWithBoardID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;boardID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 通用的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (PSUICollectionViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionView:&lt;&#x2F;span&gt;&lt;span&gt;(PSUICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;collectionView
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cellForItemAtIndexPath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 每个子类需要实现的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchMoreData
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;子类需要实现此方法&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来类似这样&lt;code&gt;[[HBWaterfallViewController alloc]initWithBoardID:9527]&lt;&#x2F;code&gt; 或 &lt;code&gt;[[HBWaterfallViewController alloc]initWithLiked]&lt;&#x2F;code&gt;。如果有新的 DataSource，新加一个初始化方法即可，对于使用者来说，打开头文件，看下 init 开头的方法就行了。&lt;&#x2F;p&gt;
&lt;p&gt;再举个例子，现在很多应用需要同时兼顾 iOS6 和 iOS7，在表现上需要为不同的系统加载不同的图片资源，最简单粗暴的方法就是各种 if&#x2F;else 判断，像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;]systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 6 and previous versions *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 7 and above *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不够优雅，可以使用类簇的思想来去掉 if&#x2F;else 判断，把跟视图具体元素无关的代码放在基类，跟系统版本相关的代码拆成两个子类，然后在各自的类中加载相应的资源。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.h *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestView: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Common method *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;[TestView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;] systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里&lt;code&gt;alloc&lt;&#x2F;code&gt;时并没有返回&lt;code&gt;TestView&lt;&#x2F;code&gt;类，而是根据系统版本返回&lt;code&gt;TestViewIOS6&lt;&#x2F;code&gt; 或 &lt;code&gt;TestViewIOS7&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS6.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestViewIOS6: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS6 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS7.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@implementation TestViewIOS7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS7 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;类簇的本质其实是&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82&quot;&gt;抽象工厂&lt;&#x2F;a&gt;，类簇也可以有多个基类，如&lt;code&gt;NSArray&lt;&#x2F;code&gt;, &lt;code&gt;NSMutableArray&lt;&#x2F;code&gt;, 后者就是继承的前者。它对一些「大同小异」的问题，往往会有不错的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;mac&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;devpedia-cocoacore&#x2F;ClassCluster.html&quot;&gt;Cocoa Core Competencies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.noxeos.com&#x2F;2013&#x2F;06&#x2F;18&#x2F;strategies-support-ios7-ui&#x2F;&quot;&gt;Strategies to support iOS7 UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;ClassClusters&#x2F;ClassClusters.html&quot;&gt;Class Cluster Concepts in Objective-C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说ReactiveCocoa 2</title>
            <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reactivecocoa-2/</link>
            <guid>https://limboy.me/posts/reactivecocoa-2/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;a&gt;是&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1107-reactivecocoa-for-a-better-world&quot;&gt;Github&lt;&#x2F;a&gt;开源的一款 cocoa FRP 框架，我在&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;ios&#x2F;2013&#x2F;06&#x2F;19&#x2F;frp-reactivecocoa.html&quot;&gt;之前的文章&lt;&#x2F;a&gt;里有过介绍(当时还是 1.x 版本，2.x 版本有了新的变化，API 也有部分不兼容) 这里再简单地提一下。&lt;&#x2F;p&gt;
&lt;p&gt;Native app 有很大一部分的时间是在等待事件发生，然后响应事件，比如等待网络请求完成，等待用户的操作，等待某些状态值的改变等等，等这些事件发生后，再做进一步处理。 但是这些等待和响应，并没有一个统一的处理方式。Delegate, Notification, Block, KVO, 常常会不知道该用哪个最合适。有时需要 chain 或者 compose 某几个事件，就需要多个状态变量，而状态变量一多，复杂度也就上来了。为了解决这些问题，Github 的工程师们开发了 ReactiveCocoa。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-ge-chang-jian-de-gai-nian&quot;&gt;几个常见的概念&lt;&#x2F;h2&gt;
&lt;p&gt;在阅读 ReactiveCocoa(以下简称 RAC)的相关文章或代码时，经常会出现一些名词，理解它们对于理解 RAC 有很大的帮助，下面就简要来说说这些常见的概念。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signal-and-subscriber&quot;&gt;Signal and Subscriber&lt;&#x2F;h3&gt;
&lt;p&gt;这是 RAC 最核心的内容，这里我想用插头和插座来描述，插座是 Signal，插头是 Subscriber。想象某个遥远的星球，他们的电像某种物质一样被集中存储，且很珍贵。插座负责去获取电，插头负责使用电，而且一个插座可以插任意数量的插头。当一个插座(Signal)没有插头(Subscriber)时什么也不干，也就是处于冷(Cold)的状态，只有插了插头时才会去获取，这个时候就处于热(Hot)的状态。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 获取到数据后，会调用 Subscriber 的 sendNext, sendComplete, sendError 方法来传送数据给 Subscriber，Subscriber 自然也有方法来获取传过来的数据，如：[signal subscribeNext:error:completed]。这样只要没有 sendComplete 和 sendError，新的值就会通过 sendNext 源源不断地传送过来，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, username)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;newName:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RACObserve&lt;&#x2F;code&gt;使用了 KVO 来监听 property 的变化，只要 username 被自己或外部改变，block 就会被执行。但不是所有的 property 都可以被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;，该 property 必须支持 KVO，比如 NSURLCache 的 currentDiskUsage 就不能被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 是很灵活的，它可以被修改(map)，过滤(filter)，叠加(combine)，串联(chain)，这有助于应对更加复杂的情况，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;logInButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, enabled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;        combineLatest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@[
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usernameTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;passwordTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(LoginManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggingIn)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggedIn)
&lt;&#x2F;span&gt;&lt;span&gt;        ] reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggingIn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggedIn) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggingIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggedIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码看起来有点复杂，来细细说一下，首先是左边的&lt;code&gt;RAC(...)&lt;&#x2F;code&gt;，它的作用是将&lt;code&gt;self.logInButton.enabled&lt;&#x2F;code&gt;属性与右边的 signal 的 sendNext 值绑定。也就是如果右边的 reduce 的返回值为 NO，那么 enabled 就为 NO。右边的&lt;code&gt;combineLatest&lt;&#x2F;code&gt;是获取这 4 个 signal 的 next 值。其中可以看到&lt;code&gt;self.usernameTextField.rac_textSignal&lt;&#x2F;code&gt;这么个东东，&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是 RAC 为 UITextField 添加的 category，只要 usernameTextField 的值有变化，这个值就会被返回(sendNext)。combineLatest 需要每个 signal 至少都有过一次 sendNext。reduce 的作用是根据接收到的值，再返回一个新的值，这里是@(YES)和@(NO)，必须是 object。&lt;&#x2F;p&gt;
&lt;p&gt;上面这段代码用到了 Signal 的组合，想象一下，如果是传统的方式，写起来还是挺复杂的，而且随着功能的增加，调整起来会更加麻烦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leng-xin-hao-cold-he-re-xin-hao-hot&quot;&gt;冷信号(Cold)和热信号(Hot)&lt;&#x2F;h3&gt;
&lt;p&gt;上面提到过这两个概念，冷信号默认什么也不干，比如下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;triggered&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foobar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们创建了一个 Signal，但因为没有被 subscribe，所以什么也不会发生。加了下面这段代码后，signal 就处于 Hot 的状态了，block 里的代码就会被执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeCompleted:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;subscription &lt;&#x2F;span&gt;&lt;span&gt;%u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, subscriptions);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或许你会问，那如果这时又有一个新的 subscriber 了，signal 的 block 还会被执行吗？这就牵扯到了另一个概念：Side Effect&lt;&#x2F;p&gt;
&lt;h3 id=&quot;side-effect&quot;&gt;Side Effect&lt;&#x2F;h3&gt;
&lt;p&gt;还是上面那段代码，如果有多个 subscriber，那么 signal 就会又一次被触发，控制台里会输出两次&lt;code&gt;triggered&lt;&#x2F;code&gt;。这或许是你想要的，或许不是。如果要避免这种情况的发生，可以使用 &lt;code&gt;replay&lt;&#x2F;code&gt; 方法，它的作用是保证 signal 只被触发一次，然后把 sendNext 的 value 存起来，下次再有新的 subscriber 时，直接发送缓存的数据。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoa-categories&quot;&gt;Cocoa Categories&lt;&#x2F;h2&gt;
&lt;p&gt;为了更加方便地使用 RAC，RAC 给 Cocoa 添加了很多 category，与系统集成地越紧密，使用起来自然也就越方便。下面是我认为比较常用的 categories。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uiview-categories&quot;&gt;UIView Categories&lt;&#x2F;h3&gt;
&lt;p&gt;上面看到的&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是加在 UITextField 上的(UITextField+RACSignalSupport.h)，其他常用的 UIView 也都有添加相应的 category，比如 UIAlertView，就不需要再用 Delegate 了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Alert&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt; cancelButtonTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; otherButtonTitles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_buttonClickedSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexNumber) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([indexNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有了这些 Category，大部分的 Delegate 都可以使用 RAC 来做。或许你会想，可不可以 subscribe NSMutableArray.rac_sequence.signal，这样每次有新的 object 或旧的 object 被移除时都能知道，UITableViewController 就可以根据 dataSource 的变化，来 reloadData。但很可惜这样不行，因为 RAC 是基于 KVO 的，而 NSMutableArray 并不会在调用 addObject 或 removeObject 时发送通知，所以不可行。不过可以使用 NSArray 作为 UITableView 的 dataSource，只要 dataSource 有变动就换成新的 Array，这样就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;说到 UITableView，再说一下 UITableViewCell，RAC 给 UITableViewCell 提供了一个方法：&lt;code&gt;rac_prepareForReuseSignal&lt;&#x2F;code&gt;，它的作用是当 Cell 即将要被重用时，告诉 Cell。想象 Cell 上有多个 button，Cell 在初始化时给每个 button 都&lt;code&gt;addTarget:action:forControlEvents&lt;&#x2F;code&gt;，被重用时需要先移除这些 target，下面这段代码就可以很方便地解决这个问题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelButton
&lt;&#x2F;span&gt;&lt;span&gt;	rac_signalForControlEvents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UIControlEventTouchUpInside]
&lt;&#x2F;span&gt;&lt;span&gt;	takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_prepareForReuseSignal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do other things
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个很常用的 category 就是&lt;code&gt;UIButton+RACCommandSupport.h&lt;&#x2F;code&gt;，它提供了一个 property：&lt;code&gt;rac_command&lt;&#x2F;code&gt;，就是当 button 被按下时会执行的一个命令，命令被执行完后可以返回一个 signal，有了 signal 就有了灵活性。比如点击投票按钮，先判断一下有没有登录，如果有就发 HTTP 请求，没有就弹出登陆框，可以这么实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithEnabled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt; signalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assume that we&amp;#39;re logged in at first. We&amp;#39;ll replace this signal later if not.
&lt;&#x2F;span&gt;&lt;span&gt;	RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[PXRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiHelper&lt;&#x2F;span&gt;&lt;span&gt;] authMode] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; PXAPIHelperModeNoAuth) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Not logged in. Replace signal.
&lt;&#x2F;span&gt;&lt;span&gt;		authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			FRPLoginViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[FRPLoginViewController alloc] initWithNibName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;FRPLoginViewController&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; bundle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;navigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UINavigationController alloc] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;presentViewController:navigationController animated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completion:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;				[subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			}];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		}&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] ignoreValues];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		[SVProgressHUD showErrorWithStatus:[error localizedDescription]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码节选自 AshFurrow 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt;，有删减。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-structure-categories&quot;&gt;Data Structure Categories&lt;&#x2F;h3&gt;
&lt;p&gt;常用的数据结构，如 NSArray, NSDictionary 也都有添加相应的 category，比如&lt;code&gt;NSArray&lt;&#x2F;code&gt;添加了&lt;code&gt;rac_sequence&lt;&#x2F;code&gt;，可以将&lt;code&gt;NSArray&lt;&#x2F;code&gt;转换为&lt;code&gt;RACSequence&lt;&#x2F;code&gt;，顺便说一下&lt;code&gt;RACSequence&lt;&#x2F;code&gt;, &lt;code&gt;RACSequence&lt;&#x2F;code&gt;是一组 immutable 且有序的 values，不过这些 values 是运行时计算的，所以对性能提升有一定的帮助。&lt;code&gt;RACSequence&lt;&#x2F;code&gt;提供了一些方法，如&lt;code&gt;array&lt;&#x2F;code&gt;转换为&lt;code&gt;NSArray&lt;&#x2F;code&gt;，&lt;code&gt;any:&lt;&#x2F;code&gt;检查是否有 Value 符合要求，&lt;code&gt;all:&lt;&#x2F;code&gt;检查是不是所有的 value 都符合要求，这里的符合要求的，block 返回 YES，不符合要求的就返回 NO。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;notificationcenter-category&quot;&gt;NotificationCenter Category&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;, 默认情况下&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;使用&lt;code&gt;Target-Action&lt;&#x2F;code&gt;方式来处理 Notification，这样就需要另外定义一个方法，这就涉及到编程领域的两大难题之一：起名字。有了 RAC，就有 Signal，有了 Signal 就可以 subscribe，于是&lt;code&gt;NotificationCenter&lt;&#x2F;code&gt;就可以这么来处理，还不用担心移除 observer 的问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] rac_addObserverForName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;MyNotification&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;notification) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Notification Received&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nsobject-categories&quot;&gt;NSObject Categories&lt;&#x2F;h3&gt;
&lt;p&gt;NSObject 有不少的 Category，我觉得比较有用的有这么几个&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racdeallocating-h&quot;&gt;NSObject+RACDeallocating.h&lt;&#x2F;h4&gt;
&lt;p&gt;顾名思义就是在一个 object 的 dealloc 被触发时，执行的一段代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_willDeallocSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeCompleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oops, i will be gone&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsobject-raclifting-h&quot;&gt;NSObject+RACLifting.h&lt;&#x2F;h4&gt;
&lt;p&gt;有时我们希望满足一定条件时，自动触发某个方法，有了这个 category 就可以这么办&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)test
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        dispatch_time_t popTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(DISPATCH_TIME_NOW, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NSEC_PER_SEC));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(popTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Another B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_liftSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(doA:withB:) withSignals:signalA, signalB, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)doA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)A withB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)B
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; and B:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, A, B);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;rac_liftSelector:withSignals&lt;&#x2F;code&gt; 就是干这件事的，它的意思是当 signalA 和 signalB 都至少 sendNext 过一次，接下来只要其中任意一个 signal 有了新的内容，&lt;code&gt;doA:withB&lt;&#x2F;code&gt;这个方法就会自动被触发。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有兴趣，可以想想上面这段代码会输出什么。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racselectorsignal-h&quot;&gt;NSObject+RACSelectorSignal.h&lt;&#x2F;h4&gt;
&lt;p&gt;这个 category 有&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt;和&lt;code&gt;rac_signalForSelector:fromProtocol:&lt;&#x2F;code&gt; 这两个方法。先来看前一个，它的意思是当某个 selector 被调用时，再执行一段指定的代码，相当于 hook。比如点击某个按钮后，记个日志。后者表示该 selector 实现了某个协议，所以可以用它来实现 Delegate。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 带来的变化还不仅仅是这些，它还带来了架构层面的变化。我们都知道苹果推荐的是 MVC 架构，那 MVVM 又是什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;f.cloud.github.com&#x2F;assets&#x2F;432536&#x2F;867984&#x2F;291ed380-f760-11e2-9106-d3158320af39.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟 MVC 最大的区别是多了个&lt;code&gt;ViewModel&lt;&#x2F;code&gt;，它直接与 View 绑定，而且对 View 一无所知。拿做菜打比方的话，ViewModel 就是调料，它不关心做的到底是什么菜。这不是跟&lt;code&gt;Model&lt;&#x2F;code&gt;很像吗？是的，它可以扮演 Model 的职责，但其实它是 Model 的中介，这样当 Model 的 API 有变化，或者由本地存储变为远程 API 调用时，ViewModel 的 public API 可以保持不变。&lt;&#x2F;p&gt;
&lt;p&gt;使用 ViewModel 的好处是，可以让 Controller 更加简单和轻便，而且 ViewModel 相对独立，也更加方便测试和重用。那 Controller 这时又该做哪些事呢？在 MVVM 体系中，Controller 可以被看成 View，所以它的主要工作是处理布局、动画、接收系统事件、展示 UI。&lt;&#x2F;p&gt;
&lt;p&gt;MVVM 还有一个很重要的概念是 &lt;code&gt;data binding&lt;&#x2F;code&gt;，view 的呈现需要 data，这个 data 就是由 ViewModel 提供的，将 view 的 data 与 ViewModel 的 data 绑定后，将来双方的数据只要一方有变化，另一方就能收到。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveViewModel&quot;&gt;这里&lt;&#x2F;a&gt;有 Github 开源的一个 ViewModel Base Class。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 在使用时有一些注意事项，可以参考官方的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;DesignGuidelines.md&quot;&gt;DesignGuildLines&lt;&#x2F;a&gt;，这里简单说一下。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 signal 被一个 subscriber subscribe 后，这个 subscriber 何时会被移除？答案是当 subscriber 被 sendComplete 或 sendError 时，或者手动调用[disposable dispose]。&lt;&#x2F;p&gt;
&lt;p&gt;当 subscriber 被 dispose 后，所有该 subscriber 相关的工作都会被停止或取消，如 http 请求，资源也会被释放。&lt;&#x2F;p&gt;
&lt;p&gt;Signal events 是线性的，不会出现并发的情况，除非显示地指定 Scheduler。所以&lt;code&gt;-subscribeNext:error:completed:&lt;&#x2F;code&gt;里的 block 不需要锁定或者 synchronized 等操作，其他的 events 会依次排队，直到 block 处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;Errors 有优先权，如果有多个 signals 被同时监听，只要其中一个 signal sendError，那么 error 就会立刻被传送给 subscriber，并导致 signals 终止执行。相当于 Exception。&lt;&#x2F;p&gt;
&lt;p&gt;生成 Signal 时，最好指定 Name, &lt;code&gt;-setNameWithFormat:&lt;&#x2F;code&gt; 方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;block 代码中不要阻塞。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;尽管洋洋洒洒写了这么多，也只是对 RAC 有了个大概的了解，如果要更深入地了解 RAC 还是需要多读文档、代码和相关项目。&lt;&#x2F;p&gt;
&lt;p&gt;RAC 学习起来稍显吃力，且相关的文章目前还不多，中文的就更少了，希望这篇文章能带给你些帮助。&lt;&#x2F;p&gt;
&lt;p&gt;以下是我觉得还不错的 RAC 相关资源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt; 作者同时还出了一本 FRP 相关的书，个人觉得看源码就足够了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;GroceryList&quot;&gt;GroceryList&lt;&#x2F;a&gt; RAC 的作者之一 jspahrsummers 的一个项目&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;reactivecocoa-essentials-understanding-and-using-raccommand&#x2F;&quot;&gt;ReactiveCocoa Essentilas: Understanding and Using RACCommand&lt;&#x2F;a&gt; 介绍了 RACCommand 的使用，同时也涉及了 RAC 相关的一些点。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;02&#x2F;transparent-oauth-token-refresh-using-reactivecocoa&#x2F;&quot;&gt;Transparent OAuth Token Refresh Using ReactiveCocoa&lt;&#x2F;a&gt; 这篇文章讲了如何使用 RAC 来透明地获取 Access Token，然后继续发送请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;vimeo.com&#x2F;78749139&quot;&gt;BNR: An Introduction to ReactiveCocoa&lt;&#x2F;a&gt;(视频)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS项目的目录结构和开发流程</title>
            <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/build-ios-application/</link>
            <guid>https://limboy.me/posts/build-ios-application/</guid>
            <description>&lt;p&gt;网上相关的资源不多，开源的且质量还不错的 iOS 项目也是少之又少，最近正好跟同事合作了一个 iOS 项目，来说说自己的一些想法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;AppDelegate
&lt;&#x2F;span&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;Vendors
&lt;&#x2F;span&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;Resources
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 AppDelegate.h(.m)文件，是整个应用的入口文件，所以单独拿出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;models&quot;&gt;Models&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放一些与数据相关的 Model 文件，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;macro&quot;&gt;Macro&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放了整个应用会用到的宏定义，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;	|- AppMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- NotificationMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- VendorMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- UtilsMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;appmacro-h-li-fang-app-xiang-guan-de-hong-ding-yi-ru&quot;&gt;AppMacro.h 里放 app 相关的宏定义，如:&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 表情相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cachedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_RECENT_USED @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;recentusedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CATEGORIES @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;categoryemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_TOPICS @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;emotiontopics&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 收藏相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;COLLECT_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;collected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 配图相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_HEIGHT_MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;146
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;notificationmacro-h-li-fang-de-shi-tong-zhi-xiang-guan-de-hong-ding-yi&quot;&gt;NotificationMacro.h 里放的是通知相关的宏定义。&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;utilsmacro-h-li-fang-de-shi-yi-xie-fang-bian-shi-yong-de-hong-ding-yi-ru&quot;&gt;UtilsMacro.h 里放的是一些方便使用的宏定义，如：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIColorFromRGB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) [UIColor \
&lt;&#x2F;span&gt;&lt;span&gt;colorWithRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; alpha&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;) [NSString stringWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,intValue]
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### VendorMacro.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt; 里放一些第三方常量，如：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; highlight objc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_KEY @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxxxx&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_CHANNEL_ID @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxx&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有新的类型的宏定义，可以再新建一个相关的 Macro.h。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;general&quot;&gt;General&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放会被重用的 Views&#x2F;Classes 和 Categories。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;	|- Views
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKScollView
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKPullToRefresh
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	|- Classes
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKBaseViewController
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKHorizontalView
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	| - Categories
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIViewController+Sizzle
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIImageView+Downloader
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;TPK&lt;&#x2F;code&gt;是项目的首字母缩写。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;helpers&quot;&gt;Helpers&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放一些助手类，文件名与功能挂钩。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKShareHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPDBHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKEmotionHelper
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;助手类的主要作用是帮助 Controller 瘦身，也可以提供一定程度的复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vendors&quot;&gt;Vendors&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放第三方的类库&#x2F;SDK，如 UMeng、WeiboSDK、WeixinSDK 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sections&quot;&gt;Sections&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下面的文件对应的是 app 的具体单元，如导航、瀑布流等等。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;	|- Menu
&lt;&#x2F;span&gt;&lt;span&gt;	|- Setting
&lt;&#x2F;span&gt;&lt;span&gt;	|- Collection
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 app 会用到的一些资源，主要是图片。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoapods&quot;&gt;Cocoapods&lt;&#x2F;h2&gt;
&lt;p&gt;业务无关的类库可以通过 Cocoapods 来方便地管理，如&lt;code&gt;SDWebImage&lt;&#x2F;code&gt;, &lt;code&gt;Reachability&lt;&#x2F;code&gt;等等。还有一些是多个应用都会用到的基础模块，比如 HBAPI、HBSNS 、HBFoundation（HB 为公司名首字母）等等，可以建一个私有的 git repo，然后加到 podfile 中，这样如果 HBAPI 有更新，只需要&lt;code&gt;pod update&lt;&#x2F;code&gt;一下就行了。&lt;&#x2F;p&gt;
&lt;p&gt;顺便说一下&lt;code&gt;HBFoundation&lt;&#x2F;code&gt;，这个 git 仓库中可以放一些自己写的所有应用基本上都会用到的小模块。如很多 app 都会有隔一段时间跳出一个求好评的 alertView，就可以写一个&lt;code&gt;HBRating&lt;&#x2F;code&gt;类，这样需要使用该功能的 app 只需加上一句：&lt;code&gt;[HBRating checkIfShouldPopupWithAppID:(NSInteger)appID]&lt;&#x2F;code&gt;就行了。又比如 app 都有接受 push notification 的需求，可以写一个&lt;code&gt;HBAPNS&lt;&#x2F;code&gt;类，等等。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kai-fa-liu-cheng&quot;&gt;开发流程&lt;&#x2F;h2&gt;
&lt;p&gt;在拿到设计图后，就可以针对设计图抽离出可复用的 Classes&#x2F;Views&#x2F;Helpers，考虑一下某个效果的具体实现，使用合适的设计模式来避免大量的 if&#x2F;else 嵌套，等等。不要一下子就钻到 Sections 中去实现页面效果和功能，初看起来可能会快一点，但只要有点复杂度的项目，这种做法到后来只会吃尽苦头，代码会变的越来越难维护。所以前期一定要做好充足的准备工作。&lt;&#x2F;p&gt;
&lt;p&gt;经验有限，如果你有更好的想法，欢迎交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)KVO的内部实现</title>
            <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/internal-implementation-of-kvo/</link>
            <guid>https://limboy.me/posts/internal-implementation-of-kvo/</guid>
            <description>&lt;p&gt;09 年的&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;pyblog&#x2F;friday-qa-2009-01-23.html&quot;&gt;一篇文章&lt;&#x2F;a&gt;，比较深入地阐述了 KVO 的内部实现。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是实现 Cocoa Bindings 的基础，它提供了一种方法，当某个属性改变时，相应的 objects 会被通知到。在其他语言中，这种观察者模式通常需要单独实现，而在 Objective-C 中，通常无须增加额外代码即可使用。&lt;&#x2F;p&gt;
&lt;p&gt;###概览
这是怎么实现的呢？其实这都是通过 Objective-C 强大的运行时(runtime)实现的。当你第一次观察某个 object 时，runtime 会创建一个新的继承原先 class 的 subclass。在这个新的 class 中，它重写了所有被观察的 key，然后将 object 的&lt;code&gt;isa&lt;&#x2F;code&gt;指针指向新创建的 class（这个指针告诉 Objective-C 运行时某个 object 到底是哪种类型的 object）。所以 object 神奇地变成了新的子类的实例。&lt;&#x2F;p&gt;
&lt;p&gt;这些被重写的方法实现了如何通知观察者们。当改变一个 key 时，会触发&lt;code&gt;setKey&lt;&#x2F;code&gt;方法，但这个方法被重写了，并且在内部添加了发送通知机制。（当然也可以不走 setXXX 方法，比如直接修改 iVar，但不推荐这么做）。&lt;&#x2F;p&gt;
&lt;p&gt;有意思的是：苹果不希望这个机制暴露在外部。除了 setters，这个动态生成的子类同时也重写了&lt;code&gt;-class&lt;&#x2F;code&gt;方法，依旧返回原先的 class！如果不仔细看的话，被 KVO 过的 object 看起来和原先的 object 没什么两样。&lt;&#x2F;p&gt;
&lt;p&gt;###深入探究
下面来看看这些是如何实现的。我写了个程序来演示隐藏在 KVO 背后的机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; gcc -o kvoexplorer -framework Foundation kvoexplorer.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestClass : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestClass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@synthesize&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; methodCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Method \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;methodList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_copyMethodList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(c, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;methodCount)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; methodCount; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObject: NSStringFromSelector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(methodList[i]))&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free(methodList)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; array;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;libobjc class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;implements methods &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;name,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([obj class]),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa) componentsJoinedByString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, [str UTF8String])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSAutoreleasePool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;control &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:x forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:y forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;control&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, control)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, y)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;xy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, xy)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using NSObject methods, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[control methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[x methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using libobjc functions, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(control),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(x),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们从头到尾细细看来。&lt;&#x2F;p&gt;
&lt;p&gt;首先定义了一个&lt;code&gt;TestClass&lt;&#x2F;code&gt;的类，它有 3 个属性。&lt;&#x2F;p&gt;
&lt;p&gt;然后定义了一些方便调试的方法。&lt;code&gt;ClassMethodNames&lt;&#x2F;code&gt;使用 Objective-C 运行时方法来遍历一个 class，得到方法列表。注意，这些方法不包括父类的方法。&lt;code&gt;PrintDescription&lt;&#x2F;code&gt;打印 object 的所有信息，包括 class 信息（包括&lt;code&gt;-class&lt;&#x2F;code&gt;和通过运行时得到的 class），以及这个 class 实现的方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后创建了 4 个&lt;code&gt;TestClass&lt;&#x2F;code&gt;实例，每一个都使用了不同的观察方式。&lt;code&gt;x&lt;&#x2F;code&gt;实例有一个观察者观察&lt;code&gt;x&lt;&#x2F;code&gt;key，&lt;code&gt;y&lt;&#x2F;code&gt;, &lt;code&gt;xy&lt;&#x2F;code&gt;也类似。为了做比较，&lt;code&gt;z&lt;&#x2F;code&gt;key 没有观察者。最后&lt;code&gt;control&lt;&#x2F;code&gt;实例没有任何观察者。&lt;&#x2F;p&gt;
&lt;p&gt;然后打印出 4 个 objects 的 description。&lt;&#x2F;p&gt;
&lt;p&gt;之后继续打印被重写的 setter 内存地址，以及未被重写的 setter 的内存地址做比较。这里做了两次，是因为&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;没能得到重写的方法。KVO 试图掩盖它实际上创建了一个新的 subclass 这个事实！但是使用运行时的方法就原形毕露了。&lt;&#x2F;p&gt;
&lt;p&gt;###运行代码
看看这段代码的输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;control&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, x, setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, y, setZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x103280&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; methods, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e
&lt;&#x2F;span&gt;&lt;span&gt;Using libobjc functions, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，它输出了&lt;code&gt;control&lt;&#x2F;code&gt;object，没有任何问题，它的 class 是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，并且实现了 6 个 set&#x2F;get 方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后是 3 个被观察的 objects。注意&lt;code&gt;-class&lt;&#x2F;code&gt;仍然显示的是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，使用&lt;code&gt;object_getClass&lt;&#x2F;code&gt;显示了这个 object 的真面目：它是&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;的一个实例。这个&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;就是动态生成的 subclass！&lt;&#x2F;p&gt;
&lt;p&gt;注意，它是如何实现这两个被观察的 setters 的。你会发现，它很聪明，没有重写&lt;code&gt;-setZ:&lt;&#x2F;code&gt;，虽然它也是个 setter，因为它没有被观察。同时注意到，3 个实例对应的是同一个 class，也就是说两个 setters 都被重写了，尽管其中的两个实例只观察了一个属性。这会带来一点效率上的问题，因为即使没有被观察的 property 也会走被重写的 setter，但苹果显然觉得这比分开生成动态的 subclass 更好，我也觉得这是个正确的选择。&lt;&#x2F;p&gt;
&lt;p&gt;你会看到 3 个其他的方法。有之前提到过的被重写的&lt;code&gt;-class&lt;&#x2F;code&gt;方法，假装自己还是原来的 class。还有&lt;code&gt;-dealloc&lt;&#x2F;code&gt;方法处理一些收尾工作。还有一个&lt;code&gt;_isKVOA&lt;&#x2F;code&gt;方法，看起来像是一个私有方法。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，我们输出&lt;code&gt;-setX:&lt;&#x2F;code&gt;的实现。使用&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;返回的是相同的值。因为&lt;code&gt;-setX:&lt;&#x2F;code&gt;已经在子类被重写了，这也就意味着&lt;code&gt;methodForSelector:&lt;&#x2F;code&gt;在内部实现中使用了&lt;code&gt;-class&lt;&#x2F;code&gt;，于是得到了错误的结果。&lt;&#x2F;p&gt;
&lt;p&gt;最后我们通过运行时得到了不同的输出结果。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个优秀的探索者，我们进入 debugger 来看看这第二个方法的实现到底是怎样的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(gdb) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;\_NSSetIntValueAndNotify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是一个内部方法，对&lt;code&gt;Foundation&lt;&#x2F;code&gt;使用&lt;code&gt;nm -a&lt;&#x2F;code&gt;得到一个完整的私有方法列表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;df80&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetBoolValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;a0480&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e120&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetDoubleValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e1&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetFloatValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000e3550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e390&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e2&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;c0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;89df0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetObjectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e6&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetPointValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e7&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;d0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRangeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e8&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;b0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetShortValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;8ab20&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetSizeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e050&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fcd0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e470&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fc00&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e620&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedShortValueAndNotify
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个列表也能发现一些有趣的东西。比如苹果为每一种 primitive type 都写了对应的实现。Objective-C 的 object 会用到的其实只有&lt;code&gt;__NSSetObjectValueAndNotify&lt;&#x2F;code&gt;，但需要一整套来对应剩下的，而且看起来也没有实现完全，比如&lt;code&gt;long dobule&lt;&#x2F;code&gt;或&lt;code&gt;_Bool&lt;&#x2F;code&gt;都没有。甚至没有为通用指针类型(generic pointer type)提供方法。所以，不在这个方法列表里的属性其实是不支持 KVO 的。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是一个很强大的工具，有时候过于强大了，尤其是有了自动触发通知机制。现在你知道它内部是怎么实现的了，这些知识或许能帮助你更好地使用它，或在它出错时更方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;如果你打算使用 KVO，或许可以看一下我的另一篇文章&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;?page=pyblog&#x2F;key-value-observing-done-right.html&quot;&gt;Key-Value Observing Done Right&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说iOS的多线程Core Data</title>
            <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-multi-thread-core-data/</link>
            <guid>https://limboy.me/posts/ios-multi-thread-core-data/</guid>
            <description>&lt;p&gt;Core Data 是 iOS 中很重要的一个部分，可以理解为基于 SQLite(当然也可以是其他的 Storage，如 In-memory，只是 SQLite 比较常见)的一个 ORM 实现，所以有关系数据库的特性，又不用写 SQL。顺便吐一下槽，官方说法是使用 Core Data 能减少 50%-70%的代码量，但相信用过的人应该都心里明白，Core Data 使用起来还是比较麻烦的，这也是为什么有不少的第三方类库来代替&#x2F;二次包装 Core Data。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂的应用就有可能出现同时处理多份数据的情况，这就需要用到多线程 Core Data。在 iOS 5 之前，官方推荐的是使用「Thread Confinement」，就是每个线程使用独立的 MOC(managed object context)，然后共享一个 PSC(persistent store coordinator)。同时在线程之间传递数据时，要传递 objectID，而不是 object，因为前者是线程安全的，后者不是。&lt;&#x2F;p&gt;
&lt;p&gt;如果 A 线程里，对 PSC 执行了 CUD(create, update, delete)操作，其他线程如何感知呢？这就需要通过监听事件来实现。比如在线程 A 中监听「NSManagedObjectContextDidSaveNotification」事件，如果线程 B 中执行了 CUD 操作，线程 A 就能感知到，并触发响应的 action，虽然可以通过 noti userinfo 来获取 managed objects，但因为它们是关联到另一个 MOC，所以无法直接操作它们，解决方法就是调用「mergeChangesFromContextDidSaveNotification:」方法。&lt;&#x2F;p&gt;
&lt;p&gt;用一张图来形容的话，大体就是这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data.png 255w,&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data.png 255w&quot;
    sizes=&quot;(max-width: 255px) 100vw, 255px&quot; width=&quot;255&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_setupCoreDataStack
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup managed object model
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] URLForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; withExtension&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;momd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithContentsOfURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;modelURL];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup persistent store coordinator
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;storeURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fileURLWithPath:[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cachesPath] stringByAppendingPathComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database.db&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     _persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSPersistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithManagedObjectModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;_managedObjectModel];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[_persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addPersistentStoreWithType:NSSQLiteStoreType configuration:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URL:storeURL options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;amp;error&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;   	     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; handle error
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create MOC
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;     [_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPersistentStoreCoordinator:_persistentStoreCoordinator&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; subscribe to change notifications
&lt;&#x2F;span&gt;&lt;span&gt;     [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_mocDidSaveNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSManagedObjectContextDidSaveNotification object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来看看 Notification Handler，主要作用就是合并新的变化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_mocDidSaveNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)notification
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;savedContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[notification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ignore change notifications for the main MOC
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; savedContext) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      [_managedObjectContext mergeChangesFromContextDidSaveNotification:notification];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式实现起来和维护起来都有点麻烦，所以 iOS 5 中就出现了更加方便和灵活的实现，也就是「Nested MOC」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConcurrencyType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSMainQueueConcurrencyType];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在初始化时可以选择 ConcurrencyType，可选的有 3 个：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsconfinementconcurrencytype&quot;&gt;NSConfinementConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;这个是默认项，每个线程一个独立的 Context，主要是为了兼容之前的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsprivatequeueconcurrencytype&quot;&gt;NSPrivateQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 private queue(使用 GCD)，这样就不会阻塞主线程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsmainqueueconcurrencytype&quot;&gt;NSMainQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 main queue，使用主线程，会阻塞。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个重要的变化是 MOC 可以指定 parent。有了 parent 后，CUD 操作会冒泡到 parent。一个 parent 可以有多个 child。parent 还可以有 parent。&lt;&#x2F;p&gt;
&lt;p&gt;因为 UI 相关的数据必须在主线程获取，同时又要避免数据库的 I&#x2F;O 操作阻塞主线程，所以就有了下面这个模型：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data_nested.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data_nested.png 255.5w,&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data_nested.png 255.5w&quot;
    sizes=&quot;(max-width: 255.5px) 100vw, 255.5px&quot; width=&quot;255.5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我对这种实现方式的一个困惑是：child 无法得知 parent 的变化，也就是说，如果 NSFetchedResultsController 绑定了 Main MOC，当 Background Write MOC save 时，NSFetchedResultsController 为何能知晓？求指点。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式比「Thread Confinement」稍微简单了点，也更明了。不过个人还是推荐使用 MagicalRecord，因为实现起来更加简单，等有空再写一篇。&lt;&#x2F;p&gt;
&lt;p&gt;写了一个使用了这个模型的 demo，配合 TableView 和 NSFetchedResultsController，有兴趣的可以看下：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2013-06-17-geng-xin&quot;&gt;2013&#x2F;06&#x2F;17 更新&lt;&#x2F;h3&gt;
&lt;p&gt;之前的困惑已消除，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;跟 PSC 无关，只要绑定的 MOC 有了&lt;code&gt;save&lt;&#x2F;code&gt;动作，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;就会收到通知，无论这个&lt;code&gt;save&lt;&#x2F;code&gt;操作有没有写入到持久层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&quot;&gt;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>简单说说iOS的图形和动画</title>
            <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-graphic-animation/</link>
            <guid>https://limboy.me/posts/ios-graphic-animation/</guid>
            <description>&lt;h3 id=&quot;core-graphics&quot;&gt;Core Graphics&lt;&#x2F;h3&gt;
&lt;p&gt;Core Graphics 是一组用来绘制 2D 图形的 API，使用 CPU 进行计算。 新建一个项目时，模板已经自动载入了 CoreGraphics.framwork。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-animation&quot;&gt;Core Animation&lt;&#x2F;h3&gt;
&lt;p&gt;Core Animation 包含于 QuartzCore.framwork 中，是一组自由度更大的图形绘制和动画 API，但实现起来也会比 Core Graphics 麻烦一点。iOS 上的 UIKit 和动画效果大部分都是通过 Core Animation 实现的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-image&quot;&gt;Core Image&lt;&#x2F;h3&gt;
&lt;p&gt;Core Image 是一组用于图像、视频处理的 API，如添加滤镜之类的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;opengl-opengl-es&quot;&gt;OpenGL &#x2F; OpenGL ES&lt;&#x2F;h3&gt;
&lt;p&gt;底层的图形绘制 API，自由度最大，但学习成本也很高。如果不是做大型游戏，推荐使用更高层的 API。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-jian-jia-su&quot;&gt;硬件加速&lt;&#x2F;h3&gt;
&lt;p&gt;硬件加速是指用到了 GPU 的 API，以下这些情况不会用到硬件加速&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有在 drawRect 中完成的图形绘制。&lt;&#x2F;li&gt;
&lt;li&gt;shouldRasterize 属性为 YES 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;用到了 mask 或 drop shadow 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;Text (包括 UILabels, CATextLayers, Core Text, 等等)。&lt;&#x2F;li&gt;
&lt;li&gt;使用 CGContexts 绘制的图形&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;core-animation-1&quot;&gt;Core Animation&lt;&#x2F;h2&gt;
&lt;p&gt;虽然是 Animation，但实际上它也干 Drawing 的活，这就需要 CALayer 的帮助。iOS 中，所有的 UIView 都自带了一个 CALayer（可以通过 UIView.layer 访问），UIView 的渲染和动画最终也是通过 layer 来实现的。从这个意义上说，UIView 就是简单的一层壳，把图形绘制需要的信息传递给 layer。当然 UIView 还有一个重要的功能就是处理事件，如点击按钮，滑动等等。&lt;&#x2F;p&gt;
&lt;p&gt;事实上 layer 也是一层壳(Model Tree)，背后还有呈现树(Presenting Tree)和渲染树(Render Tree)，渲染树对呈现树的数据进行渲染。&lt;&#x2F;p&gt;
&lt;p&gt;跟 view 一样，layer 也存在着一个树状结构。可以直接创建，或通过 view.layer 获取。&lt;&#x2F;p&gt;
&lt;p&gt;layer 有很多的动画属性，如 anchorPoint(view 没有这个属性)、frame、transform 等等，详细的属性列表&lt;a href=&quot;http:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;#documentation&#x2F;Cocoa&#x2F;Conceptual&#x2F;CoreAnimation_guide&#x2F;AnimatableProperties&#x2F;AnimatableProperties.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40004514-CH11-SW1&quot;&gt;见此&lt;&#x2F;a&gt;。配合 Core Animation 的 API 可以实现很多 UIView Animation 无法实现的效果，比如 3D 动画。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uiview-animation&quot;&gt;UIView Animation&lt;&#x2F;h2&gt;
&lt;p&gt;这个是我们经常会用到的，它对 Core Animation 做了更高层的封装，方便使用，当然自由度也降低了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)animateWithDuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)duration delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)delay options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIViewAnimationOptions)options animations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;))animations completion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; finished))completion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;animation block 里可以设置 view 的动画属性的终止值，如 frame, rotation 等。options 可以设置动画的相关选项，如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionLayoutSubviews            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowUserInteraction      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionBeginFromCurrentState     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionRepeat                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAutoreverse               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedCurve    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowAnimatedContent      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionShowHideTransitionViews   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseInOut            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseIn               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseOut              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveLinear               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionNone            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromLeft    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromRight   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlUp          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlDown        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCrossDissolve   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromTop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromBottom  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger &lt;&#x2F;span&gt;&lt;span&gt;UIViewAnimationOptions;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以一般的动画 view animation 都可以应付。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tableview-you-hua&quot;&gt;TableView 优化&lt;&#x2F;h2&gt;
&lt;p&gt;TableView 是 iOS 中非常重要的组成部分，如果处理不当，就很容易出现不流畅的现象。比如一个 TableViewCell 中有多个 subview。上面说过一个 view 对应了一个 layer，多个 view 自然也就对应多个 layer，好比 photoshop 的图层。滑动时 GPU 需要分别对每一个 layer 进行处理，如果不能在短时间内完成，就容易掉帧。&lt;&#x2F;p&gt;
&lt;p&gt;要保证 TableView 的流畅，首先 TableViewCell 的生成时间要短（少于 1&#x2F;60 秒），其次移动时帧频尽量保持在 60（也就是每秒 60 帧）。前者取决于 CPU，后者取决于 GPU。&lt;&#x2F;p&gt;
&lt;p&gt;以 twitter 为例，可以通过 subviews 来实现，不过性能会有点影响，但实现起来简单。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_subviews.jpg&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_subviews.jpg 200w,&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_subviews.jpg 200w&quot;
    sizes=&quot;(max-width: 200px) 100vw, 200px&quot; width=&quot;200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为 cell 在形态上不会经常改变，所以也可以通过 drawRect 直接绘制，只要这个时间足够短就可以。好处是 layer 不用处理多个子 layer 的组合和叠加，就像一张 jpg 图片一样，滑动会更流畅。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_drawrect.png&quot;
    srcset=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_drawrect.png 200w,&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_drawrect.png 200w&quot;
    sizes=&quot;(max-width: 200px) 100vw, 200px&quot; width=&quot;200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&quot;&gt;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&quot;&gt;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&quot;&gt;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&quot;&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&quot;&gt;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&quot;&gt;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;floriankugler.com&#x2F;blog&#x2F;2013&#x2F;5&#x2F;24&#x2F;layer-trees-vs-flat-drawing-graphics-performance-across-ios-device-generations&quot;&gt;layer trees vs flat drawing graphics performance across ios device generations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说Core Foundation</title>
            <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/core-foundation/</link>
            <guid>https://limboy.me/posts/core-foundation/</guid>
            <description>&lt;p&gt;先来说说「Core Foundation」（以下简称 CF）的历史吧。当年乔布斯被自己创办的公司驱逐后，成立了「NeXT Computer」,其实做的还是老本行：卖电脑，但依旧不景气。好在 NeXTSTEP 系统表现还不错，亏损不至于太严重。正好此时苹果的市场份额大跌，急需一个新的操作系统，结果大家都知道了，乔布斯借此收购，重新回到了苹果。&lt;&#x2F;p&gt;
&lt;p&gt;这里就牵扯到了一个问题，如何让旧有的系统（Mac OS 9）和 NeXTSTEP 合成为一个新系统？这就需要一个更为底层的核心库可以供 Mac Toolbox 和 OPENSTEP 双方调用。CF 就这么诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;CF 是由 C 语言实现的，而不是 Objective-C，所以如果用到了 CF，就需要手动管理内存，ARC 是无能为力的。当然因为 CF 和 Foundation 之间的友好关系，它们之间的管理权也是可以移交的，这个后面再说。&lt;&#x2F;p&gt;
&lt;p&gt;CF 提供了基础功能，如 CFString,CFDate,CFNumber 等等，以 CFString 为例，CFString 和 NSString 之间是什么关系？NSString 其实是一个「类簇」，也就是抽象接口，所以 String Objects 并不是 NSString 实例，而是实现了 NSString 方法的私有类的实例，也就是 CFString。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromClass&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Some Class&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; class]));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# output __NSCFConstantString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时 NSStrings 和 CFStrings 之间可以自由转换，也就是「toll free bridging」。比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(CFStringRef)aNSString;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为编译器无法自动管理 CF 的内存，所以 CF 对象在使用完后，需要手动释放（CFRelease）。如果使用 ARC 来管理内存，苹果提供了 3 种方法来处理：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge&quot;&gt;__bridge&lt;&#x2F;h3&gt;
&lt;p&gt;__bridge 只是在 CF 和 OC 之间传递指针，其他的事啥也没干，所以转换成 CF 时，还是要手动释放内存。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFStringCreateWithCString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kCFStringEncodingASCII&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(__bridge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)aNSString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFRelease&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aCFString)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bridge-retained&quot;&gt;__bridge_retained&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_retained&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRetain()&lt;&#x2F;code&gt;，将 Objective-C 对象转换为 Core Foundation 对象，把对象所有权桥接给 Core Foundation 对象，同时剥夺 ARC 的管理权，后续需要开发者使用 CFRelease 或者相关方法手动来释放对象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge-transfer&quot;&gt;__bridge_transfer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_transfer&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRelease()&lt;&#x2F;code&gt; 将非 Objective-C 对象转换为 Objective-C 对象，同时将对象的管理权交给 ARC，开发者无需手动管理内存。&lt;&#x2F;p&gt;
&lt;p&gt;最后，因为 CF 是用 C 实现的，且处于下层，所以执行速度上会比 Foundation 稍微快一点，不过也就是一点点，几乎察觉不到。相比 Foundation 带来的 ARC 内存管理和更多的 API，开发上的效率会大幅提升，所以还是尽量多的使用 OC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&quot;&gt;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&quot;&gt;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
    </channel>
</rss>