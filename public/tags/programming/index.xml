<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Limboy - programming</title>
        <link>https://limboy.me</link>
        <description></description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://limboy.me/tags/programming/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 07 Apr 2022 00:00:00 +0000</lastBuildDate>
        
        <item>
            <title>刚好够用的简易前端工具集</title>
            <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/just-enough-toolkits-for-simple-frontend-project/</link>
            <guid>https://limboy.me/posts/just-enough-toolkits-for-simple-frontend-project/</guid>
            <description>&lt;p&gt;前端构建工具总给人一种很 magic 很复杂的感觉，理解它需要花一番工夫，不理解直接用的话，总觉得心里不踏实，出问题或者加需求不一定能搞定。我习惯用 React，官方推荐用 &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&#x2F;&quot;&gt;Create React App&lt;&#x2F;a&gt; 来创建项目，但它给我的感觉太黑盒了，而且新建一个项目就会添加 1000 多个 package，也不知道这 1000 多个 package 是干啥用的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;$ npx create-react-app demo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Creating a new React app in ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Installing packages. This might take a couple of minutes.
&lt;&#x2F;span&gt;&lt;span&gt;Installing react, react-dom, and react-scripts with cra-template...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;added 1354 packages in 18s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果用 webpack 的话，挑战也很大，首先要捋清它的工作模式就要费一番工夫，文档都啃下来也不简单，同时它又很灵活，提供了几十个 Hook，每个 Hook 都对应不同的时机，有自己的参数，文档上也没有详细说明这些 Hook 具体的时机和适合的使用场景。插件很丰富，但挑起来也很累，配置项很多，大约有 10086 个（当然，此处用了夸张手法），有些 Plugin 如 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jantimon&#x2F;html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;&#x2F;a&gt; 还有自己的 Plugin。对于前端新人真的很劝退。&lt;&#x2F;p&gt;
&lt;p&gt;如果是自己的前端项目，能实现以下几点就可以了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;js 这块能通过 &lt;code&gt;npm install&lt;&#x2F;code&gt; 安装依赖，打出一个 js 包（最好支持 tree-shaking）&lt;&#x2F;li&gt;
&lt;li&gt;css 这块能支持类似 tailwind 的使用姿势&lt;&#x2F;li&gt;
&lt;li&gt;维护方便，部署方便&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 1 点，可以使用 &lt;a href=&quot;https:&#x2F;&#x2F;esbuild.github.io&#x2F;&quot;&gt;esbuild&lt;&#x2F;a&gt;，这是一个用 go 写的 js bundler（可以把相关的 js 文件合并成一个浏览器可以识别和运行的 js 文件），足够快，功能也够用，虽然还未到 1.0，但已被一些知名项目使用（如 vite &#x2F; snowpack）。&lt;&#x2F;p&gt;
&lt;p&gt;对于第 2 点，可以使用 &lt;a href=&quot;https:&#x2F;&#x2F;windicss.org&#x2F;&quot;&gt;windicss&lt;&#x2F;a&gt;，相比 &lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;tailwind&lt;&#x2F;a&gt; 更轻量，性能也更好。&lt;&#x2F;p&gt;
&lt;p&gt;对于第 3 点，我预期的目录结构是这样的：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;|- dist&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- assets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- styles&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;|- layouts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  |- index.html
&lt;&#x2F;span&gt;&lt;span&gt;|- scripts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  |- index.jsx
&lt;&#x2F;span&gt;&lt;span&gt;  |- components&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    |- App.jsx
&lt;&#x2F;span&gt;&lt;span&gt;|- package.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dist&lt;&#x2F;code&gt; 是待发布的目录，运行 &lt;code&gt;npm build&lt;&#x2F;code&gt; 命令后所有的文件都会在这个目录下。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assets&lt;&#x2F;code&gt; 用来放资源文件（如图片）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;styles&lt;&#x2F;code&gt; css 文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;&#x2F;code&gt; html 文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;&#x2F;code&gt; react 等 js 文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;每个目录的职能都很清晰，也没有各种 config 文件，维护起来比较方便（为什么是按 function 来分，而不是 feature，可以看下&lt;a href=&quot;https:&#x2F;&#x2F;www.joshwcomeau.com&#x2F;react&#x2F;file-structure&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;），部署也很简单。&lt;&#x2F;p&gt;
&lt;aside class=&quot;info&quot; &gt;
  关于 HMR（Hot Module Replacement），我觉得是 Plus，不是 Essential，如果能在（几乎）不增加复杂度的前提下提供这个功能，自然可以有，但如果因此增加了复杂度和理解成本，那就先放一放。
&lt;&#x2F;aside&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;&#x2F;code&gt; 是入口页，这里会引用最终的 css 和 js 文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;stylesheet&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;assets&#x2F;index.css&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;icon&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;fav.farm&#x2F;👻&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;root&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;assets&#x2F;index.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;index.jsx&lt;&#x2F;code&gt; 是 js 的入口文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;react&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ReactDOM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;react-dom&#x2F;client&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&#x2F;components&#x2F;App&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ReactDOM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.createRoot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;document.getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;root&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;root.render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;&#x2F;code&gt; 的核心内容大概是这样的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;scripts&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev-js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cp -r layouts&#x2F;* dist &amp;amp;&amp;amp; cp -r assets dist &amp;amp;&amp;amp; esbuild scripts&#x2F;index.jsx --servedir=dist --outdir=dist&#x2F;assets --bundle&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev-css&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss &amp;#39;.&#x2F;layouts&#x2F;**&#x2F;*.html&amp;#39; &amp;#39;.&#x2F;scripts&#x2F;**&#x2F;*.{js,jsx}&amp;#39; -o dist&#x2F;assets&#x2F;index.css --dev&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dev&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently -g &amp;#39;npm:dev-*&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build-js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cp -r layouts&#x2F;* dist &amp;amp;&amp;amp; cp -r assets dist &amp;amp;&amp;amp; esbuild scripts&#x2F;index.jsx --bundle --minify --outfile=dist&#x2F;assets&#x2F;index.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build-css&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss &amp;#39;.&#x2F;layouts&#x2F;**&#x2F;*.html&amp;#39; &amp;#39;.&#x2F;scripts&#x2F;**&#x2F;*.{js,jsx}&amp;#39; -o dist&#x2F;assets&#x2F;index.css --minify&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;build&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently -g &amp;#39;npm:build-*&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;esbuild&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^0.14.32&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;react&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^18.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;react-dom&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^18.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;windicss&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^3.5.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;concurrently&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;^7.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单说明下 &lt;code&gt;scripts&lt;&#x2F;code&gt; 栏下的几个命令:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dev-js&lt;&#x2F;code&gt;: 把相关内容复制到 dist 目录下，然后让 &lt;code&gt;esbuild&lt;&#x2F;code&gt; 来 serve 这个目录，当 js 文件有变化时，再次请求页面，就会得到最新的 js 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dev-css&lt;&#x2F;code&gt;: &lt;code&gt;windicss&lt;&#x2F;code&gt; 监控特定目录下的文件，有变化时会自动生成新的 css 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;&#x2F;code&gt;: 通过 &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;concurrently&quot;&gt;concurrently&lt;&#x2F;a&gt; 一并执行 &lt;code&gt;dev-js&lt;&#x2F;code&gt; 和 &lt;code&gt;dev-css&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build-js&lt;&#x2F;code&gt;: 通过 &lt;code&gt;esbuild&lt;&#x2F;code&gt; 命令把 js 文件打包成一个（minify 之后）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build-css&lt;&#x2F;code&gt;: 通过 &lt;code&gt;windicss&lt;&#x2F;code&gt; 命令扫描项目中的关键字，并生成 minify 后的 css 文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build&lt;&#x2F;code&gt;: 通过 &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;concurrently&quot;&gt;concurrently&lt;&#x2F;a&gt; 一并执行 &lt;code&gt;build-js&lt;&#x2F;code&gt; 和 &lt;code&gt;build-css&lt;&#x2F;code&gt; 。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;之后如果想要新增依赖，用 &lt;code&gt;npm install&lt;&#x2F;code&gt; 或 &lt;code&gt;pnpm add&lt;&#x2F;code&gt; 就行了，相比 &lt;code&gt;create-react-app&lt;&#x2F;code&gt; 或者 &lt;code&gt;webpack&lt;&#x2F;code&gt;，能力上肯定会弱一些，但也更容易理解。&lt;&#x2F;p&gt;
&lt;p&gt;这就是我目前的「刚好够用的简易前端工具集」的尝试，用来写简单的页面应该够用了，如果你有别的想法，也欢迎交流～&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>我的前端学习路线</title>
            <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/frontend-learning/</link>
            <guid>https://limboy.me/posts/frontend-learning/</guid>
            <description>&lt;h2 id=&quot;wei-shi-yao-yao-xue-xi-qian-duan&quot;&gt;为什么要学习前端&lt;&#x2F;h2&gt;
&lt;p&gt;前端开发，开发的到底是什么呢？严格来说是运行于浏览器（或者与 Native 结合的混合式架构）之上的图形化交互页面（GUI）。可以是一个网站，也可以是一个单页面应用（如 &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;games&#x2F;wordle&#x2F;index.html&quot;&gt;Worlde&lt;&#x2F;a&gt;），基于 WegGL 还能做出很&lt;a href=&quot;https:&#x2F;&#x2F;stars.chromeexperiments.com&quot;&gt;炫酷的效果&lt;&#x2F;a&gt;，或者接近 Native 的体验（如 &lt;a href=&quot;https:&#x2F;&#x2F;figma.com&quot;&gt;Figma&lt;&#x2F;a&gt;），借助跨平台框架（如 &lt;a href=&quot;https:&#x2F;&#x2F;reactnative.dev&#x2F;&quot;&gt;React Native&lt;&#x2F;a&gt;，&lt;a href=&quot;https:&#x2F;&#x2F;www.electronjs.org&#x2F;&quot;&gt;Electron&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;&quot;&gt;Tarui&lt;&#x2F;a&gt;）能够让前端页面与 Native 深度结合。&lt;&#x2F;p&gt;
&lt;p&gt;所以前端开发有较多的落地场景，相比其他的编程类别，前端开发更贴近用户，门槛也相对低一些（仅仅是门槛，要做到出类拔萃难度还是挺高的），这让那些对创作有热情，但计算机基础又不是那么牢固的人（比如我）可以有一个不错的创作空间。除此之外以下几点也是选择前端开发的重要原因：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-ti-yan-jia&quot;&gt;开发体验佳&lt;&#x2F;h3&gt;
&lt;p&gt;得益于 IDE、包管理工具、浏览器及其他开发工具的持续迭代和优化，前端的开发体验已越发舒适。比如 &lt;a href=&quot;https:&#x2F;&#x2F;vitejs.dev&#x2F;&quot;&gt;vite&lt;&#x2F;a&gt; 让代码改动（即使代码量很大）能实时反映在浏览器（这不仅能提高开发效率，对于保持心流状态也很重要），VS Code 良好的代码编写体验和丰富的插件，&lt;a href=&quot;https:&#x2F;&#x2F;pnpm.io&quot;&gt;pnpm&lt;&#x2F;a&gt; 对 &lt;code&gt;node_modules&lt;&#x2F;code&gt; （如包的平行罗列，文件夹 size 大等）的改善，Chrome 在性能和调试能力上的不断优化和改进，TypeScript 也降低了编写易维护代码的门槛。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-ran-kua-ping-tai&quot;&gt;天然跨平台&lt;&#x2F;h3&gt;
&lt;p&gt;只要一个 URL，就能在不同的设备访问，而且保持相同的体验，这个感觉太棒了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shang-xian-kuai-qie-bu-hui-bei-qia&quot;&gt;上线快且不会被卡&lt;&#x2F;h3&gt;
&lt;p&gt;如果是移动端 App，不可避免地要与审核人员打交道，被打回也是常事。如果线上出了问题，iOS 平台只能重新发版走审核流程，前端则没有这个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-zhan-peng-bo&quot;&gt;发展蓬勃&lt;&#x2F;h3&gt;
&lt;p&gt;经常会看到有人吐槽前端开发变化太快了，一个工具还没玩明白，新的工具又出来了。我觉得这是好事，说明有活力又尚未完全成熟，这不就是进入这个行业的好时机么？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;2021.stateofjs.com&#x2F;en-US&#x2F;opinions&quot;&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frontend-learning&amp;#x2F;frontend-happiness.jpg&quot;
        width=&quot;2020&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gu-zhang-ying-xiang-xiao&quot;&gt;故障影响小&lt;&#x2F;h3&gt;
&lt;p&gt;当然这是相对的，前端也可以出现很严重的故障，只是相比后端，跟用户的数据打交道，前端犯错的可容忍性和可恢复性会高一些。我甚至觉得同是编程，前端和后端是两种类型的人，前者更 Creative，后者则更需要考虑细致和沉稳。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wo-de-qian-duan-xue-xi-lu-xian&quot;&gt;我的前端学习路线&lt;&#x2F;h2&gt;
&lt;p&gt;前端涉及到的内容会很多，如果没有 Roadmap 很容易迷失（尤其是对刚入门的新手），以下是我整理的一张表格，作为自己的 Roadmap。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;posts&#x2F;frontend-learning&#x2F;frontend-roadmap.jpg&quot;&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frontend-learning&amp;#x2F;frontend-roadmap.jpg&quot;
        width=&quot;1816&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;划分为 7 大板块：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Computer Science&lt;&#x2F;strong&gt; (基础，无论从事哪类编程都要了解)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Software Engineering&lt;&#x2F;strong&gt;（软件工程，也属于基础，但更贴近实战）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nice to Have&lt;&#x2F;strong&gt;（Optional，如果掌握这些技能可以加分）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Frontend Tooling&lt;&#x2F;strong&gt;（前端的工具集）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Framework &amp;amp; Libraries&lt;&#x2F;strong&gt;（前端相关的开发框架和类库）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Web Related&lt;&#x2F;strong&gt;（Web 相关的知识点）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Toolkit&lt;&#x2F;strong&gt;（开发环境相关）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;然后根据 &lt;strong&gt;Know in General&lt;&#x2F;strong&gt;（知道大概原理），&lt;strong&gt;Familiarity with Usage&lt;&#x2F;strong&gt;（熟练使用）和 &lt;strong&gt;Know in Detail&lt;&#x2F;strong&gt;（了解实现细节）来设置每一块的学习目标，比如对于 Computer Science 来说，知道大概原理即可，不需要牢记细节。而对于日常会使用的 Framework 和 Library 则需要深入了解实现，甚至能手动写一个。&lt;&#x2F;p&gt;
&lt;p&gt;每个板块里的内容，会按照我自己的喜好来学习，比如包管理工具我更喜欢 &lt;code&gt;pnpm&lt;&#x2F;code&gt;，Computer Science 里学习操作系统相关的内容会选择 &lt;a href=&quot;https:&#x2F;&#x2F;pages.cs.wisc.edu&#x2F;%7Eremzi&#x2F;OSTEP&#x2F;&quot;&gt;OSTEP&lt;&#x2F;a&gt; 这本书等等。&lt;&#x2F;p&gt;
&lt;p&gt;有了这张图，学习起来会更有底：自己目前大概到了哪个阶段，哪块需要重点补强一下，优先学习哪个（感觉跟「皇室战争」升级建筑一样一样的 😂）。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一个看起来不可能赢的游戏</title>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/impossible-win-game/</link>
            <guid>https://limboy.me/posts/impossible-win-game/</guid>
            <description>&lt;p&gt;游戏一共涉及三个人，你和一个小伙伴组成一队答题，另一人来出题。题目的内容是这样的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;有一块方形木板，上面共有 64 个格子（8x8)，旁边有 64 枚硬币&lt;&#x2F;li&gt;
&lt;li&gt;出题人会将所有硬币都放到格子上，但硬币是正面朝上还是反面朝上，完全看出题人的心情&lt;&#x2F;li&gt;
&lt;li&gt;全部摆放完后（每个格子上都有一枚硬币），出题人会将其中一枚硬币指定为魔币，当然会指哪个也全看出题人的心情&lt;&#x2F;li&gt;
&lt;li&gt;整个过程你作为旁观者只能看着。在叫队友进来答题（找出该魔币）之前，可以将这 64 个硬币中的任意一个进行翻转&lt;&#x2F;li&gt;
&lt;li&gt;队友进来之后，不能与他进行任何通信，他的目标是找到出题人指定的那个魔币（事先可以和队友商量策略）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhen-de-ke-neng-ma&quot;&gt;真的可能吗？&lt;&#x2F;h3&gt;
&lt;p&gt;信息量太少了，将一枚硬币翻转，只有 1 比特的信息，而且队友进来之后完全不知道哪个被翻转了（就算看到 63 个正面，一个反面，也不知道是不是这个反面被翻转过），更别说要找到出题人指定的魔币。&lt;&#x2F;p&gt;
&lt;p&gt;这个魔币可以出现在 64 个格子的任意位置，用二进制来表示的话，需要 6 位（$2^6$ = 64），同时硬币的翻转可以带来奇偶的改变，结合这两点能不能找到点思路呢？&lt;&#x2F;p&gt;
&lt;p&gt;发散一下，10 个老鼠从 1000 瓶水中找毒水是不是跟这个场景有点像？难道把 64 个数字用二进制表示会有什么不同？&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;000000 = 0
&lt;&#x2F;span&gt;&lt;span&gt;000001 = 1
&lt;&#x2F;span&gt;&lt;span&gt;000010 = 2
&lt;&#x2F;span&gt;&lt;span&gt;000011 = 3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;111111 = 63
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那个魔币一定是这组数中的一个，假设吃了它会死，只要找到 6 只老鼠，emmm···&lt;&#x2F;p&gt;
&lt;p&gt;那有没有可能棋盘本身就能组成 6 只老鼠呢？假如可以，就让每只老鼠分别代表一个二进制位&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;老鼠 A -&amp;gt; $2^0$&lt;br &#x2F;&gt;
老鼠 B -&amp;gt; $2^1$&lt;br &#x2F;&gt;
老鼠 C -&amp;gt; $2^2$&lt;br &#x2F;&gt;
老鼠 D -&amp;gt; $2^3$&lt;br &#x2F;&gt;
老鼠 E -&amp;gt; $2^4$&lt;br &#x2F;&gt;
老鼠 F -&amp;gt; $2^5$&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;然后通过硬币正面朝上数量的奇偶性来表示该位是 1 或 0，这样队友进来时，先按照某种约定的方式找到「老鼠 A」，然后判断它的奇偶性，这样就能知道第一位（最右边）是 0 还是 1，同理找到「老鼠 B」，判断奇偶，确定第二位。最后会形成一个完整的二进制数，比如 &lt;code&gt;001100&lt;&#x2F;code&gt;，也就是 12，那么魔币所在的位置就是 12。&lt;&#x2F;p&gt;
&lt;p&gt;因为翻转硬币就能改变奇偶性，如果能通过翻转硬币达到随意控制某一&#x2F;几位变成 0 或 1，就能把二进制调整为魔币对应的数字，按照该策略，计算出二进制数后，就能知道魔币所在位置。&lt;&#x2F;p&gt;
&lt;p&gt;接下来的问题是，如何让棋盘本身形成 6 个比特位？&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-0.png&quot;
        width=&quot;2492&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;ji-xu-si-suo&quot;&gt;继续思索&lt;&#x2F;h3&gt;
&lt;p&gt;假如你跟队友约定，左边四列代表第 1 位，右边四列代表第 2 位，上边四行代表第 3 位，下边四行代表第 4 位，中间四列代表第 5 位，中间四行代表第 6 位，也就是每 1 位都有特定的区域，然后数该区域里硬币为正面的个数，如果为奇数则表示该位为 1，偶数则为 0。而你可以通过翻转硬币来将这个二进制数变为魔币所在位置的二进制数，是不是就妥了？&lt;&#x2F;p&gt;
&lt;p&gt;那应该怎么分呢，如果按照上面的分法，该如何达到翻转某个硬币来调整各个组的奇偶性呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hua-fen-zu-de-ce-lue&quot;&gt;划分组的策略&lt;&#x2F;h3&gt;
&lt;p&gt;假设出题人摆放完硬币后，按照上面的分组查找，得出的二进制数为：&lt;code&gt;001100&lt;&#x2F;code&gt;，出题人指定魔币的位置为 42，也就是 &lt;code&gt;101010&lt;&#x2F;code&gt;，这个数的 $2^0$，$2^2$，$2^5$ 与得出的二进制不同，因此这 3 组需要翻转，其他组不动。&lt;&#x2F;p&gt;
&lt;p&gt;理想状态自然是每个组之间没有重叠，然后将各自组的其中一枚硬币翻转，但这样最多需要翻转 6 次（原始二进制数和目标二进制数各位都不相同）。所以一定会有交叉，那如何交叉才能使得所有可能的翻转组合都被覆盖到呢？如果用 1 表示翻转，那么二进制表示的 64 个数字，不就是所有可能的翻转组合么？&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-2.png&quot;
        width=&quot;1412&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 3，也就是 &lt;code&gt;000011&lt;&#x2F;code&gt; 表示翻转 $2^0$ 和 $2^1$ 所在的组，原先为奇数个正面的硬币，就变成偶数个，反之亦然，其他 4 个组维持原状。&lt;&#x2F;p&gt;
&lt;p&gt;好像有思路了。对于 $2^0$ 这一组，包含的数为末尾为 1 的二进制数，$2^1$ 这一组，则包含倒数第二位为 1 的二进制数，以此类推（下图可点击放大）：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-3.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样 6 个组就划分完了，假设经过计算后发现要调整 $2^5$, $2^3$, $2^1$ 这 3 个组硬币的奇偶性，也就是 &lt;code&gt;101010&lt;&#x2F;code&gt;，对应十进制就是 42，那么将 42 号硬币翻一面就行了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-4.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;是不是只影响了 $2^5$, $2^3$, $2^1$ 这 3 个组，$2^0$, $2^2$, $2^4$ 这 3 组安然无恙。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;p&gt;假设出题人最后的硬币摆放如下（白色为正面，灰色为反面，），指定魔币序号为 39。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-5.png&quot;
        width=&quot;2492&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照上面的分组规则，看看每个组包含的硬币正反面情况&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;impossible-win-game&amp;#x2F;impossible-win-6.png&quot;
        width=&quot;4460&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;分别为：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$2^0$ 正面数量为 23，奇数，该位为 1&lt;br &#x2F;&gt;
$2^1$ 正面数量为 20，偶数，该位为 0&lt;br &#x2F;&gt;
$2^2$ 正面数量为 22，偶数，该位为 0&lt;br &#x2F;&gt;
$2^3$ 正面数量为 22，偶数，该位为 0&lt;br &#x2F;&gt;
$2^4$ 正面数量为 19，奇数，该位为 1&lt;br &#x2F;&gt;
$2^5$ 正面数量为 22，偶数，该位为 0&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个二进制数就是：&lt;code&gt;010001&lt;&#x2F;code&gt;。目标数是 &lt;code&gt;39&lt;&#x2F;code&gt;，对应的二进制表示为：&lt;code&gt;100111&lt;&#x2F;code&gt;，需要调整的是 $2^5$, $2^4$, $2^2$, $2^1$ 这 4 个组。&lt;code&gt;110110&lt;&#x2F;code&gt; 这个数变成 10 进制就是 &lt;code&gt;54&lt;&#x2F;code&gt;，也就是将序号为 &lt;code&gt;54&lt;&#x2F;code&gt; 的硬币翻转一下。&lt;&#x2F;p&gt;
&lt;p&gt;答题人进来后，按照约定的分组规则，分别计算各个组的奇偶数：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$2^0$ 正面数量为 23，奇数（不变），该位为 1&lt;br &#x2F;&gt;
$2^1$ 正面数量为 21，奇数，该位为 1&lt;br &#x2F;&gt;
$2^2$ 正面数量为 23，奇数，该位为 1&lt;br &#x2F;&gt;
$2^3$ 正面数量为 22，偶数（不变），该位为 0&lt;br &#x2F;&gt;
$2^4$ 正面数量为 20，偶数，该位为 0&lt;br &#x2F;&gt;
$2^5$ 正面数量为 23，奇数，该位为 1&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最终得到的二进制位 &lt;code&gt;100111&lt;&#x2F;code&gt;，也就是十进制的 &lt;code&gt;39&lt;&#x2F;code&gt;，魔币的位置找到了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-san&quot;&gt;发散&lt;&#x2F;h3&gt;
&lt;p&gt;二进制操作中，让一部分保持不变，另一部分翻转，这个行为不就是异或(不变的部分为 0，变化的部分为 1)么，比如想让 &lt;code&gt;100111&lt;&#x2F;code&gt; 的最后一位变成 0，那么只要与 &lt;code&gt;000001&lt;&#x2F;code&gt; 执行异或操作就行了。异或还有一个性质是与同样的数再次异或可以得到原先的数，利用这个特性，也可以将异或用在一些加密场景。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datagenetics.com&#x2F;blog&#x2F;december12014&#x2F;index.html&quot;&gt;Impossible Escape?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;根据 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Phuker&quot;&gt;Phuker&lt;&#x2F;a&gt; 提供的 3B1B &lt;a href=&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1UD4y1U7or&quot;&gt;视频链接&lt;&#x2F;a&gt;，再进行一些延展。视频里提到如果不是 64 个硬币，而是 3 个硬币，就没有必胜的策略了。这就很有意思了，3 个硬币中找一个不是比从 64 中找一个简单么？还真不是。&lt;&#x2F;p&gt;
&lt;p&gt;视频中把「找硬币」映射为「顶点着色」问题，翻转硬币就是从某个顶点到相邻顶点（n 个硬币表示 n 维空间），3 个硬币（对应 3 位二进制）翻转任意一个，也就是从一个正方体（每个顶点是一个 3 维坐标，具体可以参见视频）8 个顶点的任意一点到相邻点。因为不知道这三个硬币会被如何摆放，也就是 8 个顶点都有可能（3 位二进制一共有 8 种摆放形式），需要从任意一个顶点出发，应用某种规则，让相邻的 3 个点对应 3 种状态，而这是无法做到的：把 3 种状态标记为红点、绿点、蓝点，每个顶点对应一种颜色，如果要满足需求，则在每个顶点看来，相邻的点一定有红色的点（其他点也一样，红色只是其中一种），也就是 8 个点，又因为 1 个点周围有 3 个点，所以每个点都被数了 3 次，这样的话红色的点就有 &lt;code&gt;8&#x2F;3&lt;&#x2F;code&gt; 个，自然无法实现。要能被整除，也就是 $2^n$&#x2F;n 为正整数，则 n 本身必须是 2 的次方，如 2，4，8，16... 才可以，题目中的 64 是 2 的 8 次方，因此可以实现。&lt;&#x2F;p&gt;
&lt;p&gt;视频中还提到了「海明码」，原理上跟这道题的解法很像，也是根据二进制的位数来切分区域，不同的是每个区域有一位（第一位）是校验位，可以是奇校验（该区域的 1 的个数为奇数，可以通过校验位来确保）或偶校验。如果其中某一位出错（比如 0 -&amp;gt; 1），那么不仅可以知道有错（只要是一位出错，奇偶性一定发生改变），还能知道第几位错了（就像这道题中找到那个魔币）。具体原理可以看 3B1B 的&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=X8jsijhllIA&quot;&gt;这个视频&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>从「创新者」看计算机发展史</title>
            <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/computer-history/</link>
            <guid>https://limboy.me/posts/computer-history/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247497-86309a00-db54-11eb-832e-b1dc310ebcae.jpg&quot; alt=&quot;computer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;计算机不是某一个人创造出来的，这其中有很多杰出的人物的参与，他们当中既有匠心独具的创新者，也有绝顶聪明的天才。本文主要根据「创新者」一书中提到的人物和发展轨迹，结合其他相关资料和自己的理解梳理了大概的脉络。（对计算机历史感兴趣的推荐看原书，会详细很多，也有不少精彩的故事）&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：巴贝奇和埃达在 19 世纪 40 年代就有了对计算机的构想（巴贝奇分析机），埃达也因为对巴贝奇分析机的注解，成为计算机历史上的一位重要人物。但因为跟现代计算机距离较远，就不展开了，感兴趣的可以看下「创新者」里的相关章节。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tu-ling-lun-ke-ji-suan-shu-ji-qi-zai-pan-ding-wen-ti-zhong-de-ying-yong&quot;&gt;图灵：论可计算数及其在判定问题中的应用&lt;&#x2F;h2&gt;
&lt;p&gt;1935 年，图灵对数理逻辑发生兴趣。1936 年发表「论可计算数及其在判定问题中的应用」一文。文章的主题是回答希尔伯特 (David Hilbert)在 1928 年提出的 3 个数学难题之一：系统是可判定的吗？有没有可以判定特定命题是否可证明的方法，会不会出现某些陈述存在不可判定状态的可能性？。图灵机器就是为此提出的一个概念。论文发表后引起美国科学家的重视，应邀到美国普林斯顿大学，1938 取得博士学位。&lt;&#x2F;p&gt;
&lt;p&gt;图灵机器是图灵在他的论文中提出的一个抽象的计算机模型，由下面几部分构成&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;n 个符号 S={s1,...,sn},其中有空格符号 b∈S ; m 个状态 Q={q1,...,qm}, 其中有初始状态 q1∈ Q&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一条两个方向或一个方向是潜在无穷长的由格子组成的带子。每个格子可以存放一个符号。带子边附有一个读写头，读写头处于某个状态并指向某个格子，可以读写所指格子上的符号，并在带子上左右移动。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247590-9ba5c400-db54-11eb-8d97-9d488827e324.png&quot; alt=&quot;5CDDDC9D-7BA4-49CD-B092-9726048E5E1A&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图灵的伟大贡献不仅是提出了图灵机器的概念，更重要的是还提出了通用图灵机 (Universal Turing Machine ) 的概念。 现代电子计算机的计算模型其实就是这样一种通用图灵机，它能接受一段描述其他图灵机的程序，并运行程序实现该程序所描述的算法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-nong-ji-dian-qi-kai-guan-dian-lu-de-fu-hao-fen-xi&quot;&gt;香农：继电器开关电路的符号分析&lt;&#x2F;h2&gt;
&lt;p&gt;1938 年香农在 MIT 获得电气工程硕士学位，硕士论文题目是「A Symbolic Analysis of Relay and Switching Circuits」（继电器与开关电路的符号分析），首次将电路和数学联系起来。他已经注意到电话交换电路与布尔代数之间的类似性，即把布尔代数的“真”与“假”和电路系统的“开”与“关”对应起来，并用 1 和 0 表示。于是他用布尔代数分析并优化开关电路，这就奠定了数字电路的理论基础。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：图灵还曾经在贝尔实验室与香农一起讨论过脑科学相关的话题，他们发现各自在 1937 年发表的论文之间存在一个共同点：它们都证明了采用简单二进制指令操作的机器不仅可以用于解决数学问题，同时也适用于所有的逻辑问题。由于逻辑是人脑思维的基础，因此机器在理论上可以模仿人类的智能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;huo-hua-de-ai-ken-ma-ke-1-hao&quot;&gt;霍华德·艾肯：马克 1 号&lt;&#x2F;h2&gt;
&lt;p&gt;在 1937 年，一位叫作霍华德·艾肯（Howard Aiken）的哈佛博士研究生正在准备自己的物理学论文。他发现论文中复杂冗长的计算很难使用加法机来完成，于是他游说学校建造一台更加先进的计算机。&lt;&#x2F;p&gt;
&lt;p&gt;哈佛的马克一号借鉴了巴贝奇的很多想法。这是一台数字化的机器，不过它没有采用二进制，它的齿轮表示的是十进制数字。它有一根 50 英尺长的转轴，上面装有 72 个计数器，每个计数器可以储存长达 23 位的数字。完整的机器重量为 5 吨，长 80 英尺，宽 50 英尺。机器的转轴和其他活动部件是通过电力驱动的，但它的计算速度并不快。这是因为它没有采用电磁继电器，而是使用了机械继电器，这种继电器的每次开关都是由电动马达完成的。它计算一次乘法大概要花六秒钟的时间，相比之下，斯蒂比兹的机器只需一秒钟。不过它确实具备了现代计算机的一个基本功能：它是完全自动化的。程序和数据的输入都通过纸带完成，而且它还可以在没有人为干预的情况下连续运作多日。因此艾肯对马克一号的评价是“巴贝奇的梦想实现了”。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mo-qi-li-ai-ke-te-eniac&quot;&gt;莫奇利&#x2F;埃克特：ENIAC&lt;&#x2F;h2&gt;
&lt;p&gt;莫奇利在华盛顿郊区的切维蔡斯镇长大，从小就受到了在这个地区不断增进的科学氛围的熏陶，富有人格魅力，而且十分擅长（和热衷于）解释事物，后来成为了一名教授。&lt;&#x2F;p&gt;
&lt;p&gt;跟其他需要在工作中进行大量复杂计算的人一样，莫奇利也希望发明一台可以完成这些计算的机器。作为一个善于社交的人，他开始四处了解其他人正在做的事情，并将了解到的想法融会贯通——这是伟大创新者之间的一个共同点。&lt;&#x2F;p&gt;
&lt;p&gt;当他决定要制造一台自己的真空管计算机之后，莫奇利做了一件表现出优秀创新者特点的事情：总结自己在四处考察期间所了解到的全部信息。他的信息收集来源包括斯沃斯摩尔学院、达特茅斯学院、贝尔实验室、美国无线电公司、世界博览会和艾奥瓦州州立大学等各种地方，然后他会把收集到的信息融合成为自己的想法。&lt;&#x2F;p&gt;
&lt;p&gt;他在当年的夏季课程中认识了一位非常适合参与这项工作的搭档：埃克特，一位对精密工程有着完美主义情节的研究生。&lt;&#x2F;p&gt;
&lt;p&gt;战争会促进科学的发展。美国在 1941 年 12 月正式加入“二战”，战争的需要使得美国有充足的动力为莫奇利和埃克特正在研发的机器提供资助。宾夕法尼亚大学和位于阿伯丁试验场的陆军军械部当时得到了一项军方指派的任务——为美国输送到欧洲的火炮武器制作记录发射角设置的说明书。为了实现精确的瞄准，这些火炮的弹道表需要考虑数百项发射条件，包括温度、湿度、风速、高度和火药的种类等。&lt;&#x2F;p&gt;
&lt;p&gt;仅仅针对一种火炮发射的一种炮弹，它的弹道表制作就需要通过微分方程组计算三千条弹道。这项工作通常会使用万尼瓦尔·布什在麻省理工学院发明的微分分析机来完成。这台机器的计算工作需要超过 170 个人的协助，这些被称为“计算员”（computer）的工作人员大多数都是女性。为了求解这些方程，他们需要在桌面加法机上进行繁复的操作。这项工作召集了全国各地的女性数学专业学生来完成。尽管如此，仅仅为了计算一个弹道表就要花费超过一个月的时间。到了 1942 年夏天，这样的计算进度显然已经越来越跟不上战事的需求，导致美军的部分火炮出现了无法使用的情况。&lt;&#x2F;p&gt;
&lt;p&gt;莫奇利在当年 8 月写了一份备忘录，他在其中提出了一个可以帮助军方解决这个难题的方法。这份将会改变计算机发展历史的备忘录的题目是“高速真空管设备的计算应用”。莫奇利在备忘录中为他和埃克特希望建造的机器请求资助：这是一台使用真空管电路的数字电子计算机，它可以求解微分方程和进行其他的数学计算。他表示，“如果这种机器能够采用电子元件，它们的计算速度将会得到大幅提升。” 美国陆军部在 1943 年 4 月 9 日正式决定资助建造这台电子计算机。&lt;&#x2F;p&gt;
&lt;p&gt;这台机器在不久后就被赋予了一个更容易被记住的名字：ENIAC，即电子数字积分计算机（Electronic Numerical Integrator andComputer）。尽管 ENIAC 的主要设计用途是求解微分方程，这是计算火炮弹道的关键所在，但是莫奇利在报告中表示它可以配有一个“编程设备”，这样它就可以用于完成其他的任务，成为一台更为通用的计算机。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 ENIAC 是一台数字化的计算机，但它没有采用二进制系统（只使用 0 和 1 两个数字），而是选择了十进制系统，它采用的计数器是带有十个数字的。ENIAC 在 1945 年 11 月开始全面投入运作。它当时可以在一秒钟之内进行 5 000 次加减法运算，这个运算速度要比之前发明的计算机快 100 倍。它的长度为 100 英尺，高为 8 英尺，占地面积相当于一间普通的三居室公寓。它的重量接近 30 吨，机器内部含有 17 468 个真空管。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;feng-nuo-yi-man-guan-yu-edvac-de-bao-gao-chu-gao&quot;&gt;冯·诺伊曼：关于 EDVAC 的报告初稿&lt;&#x2F;h2&gt;
&lt;p&gt;20 世纪 30 年代后期，身处高等研究院的冯·诺依曼开始将研究兴趣转向利用数学方式建模爆炸的冲击波。凭借这方面的研究经验，他在 1943 年加入了曼哈顿计划。作为曼哈顿计划的成员，他需要经常前往位于新墨西哥州洛斯阿拉莫斯的秘密设施，参与那里的原子弹研发工作。由于当时可用的铀–235 只足够制造一个原子弹，所以洛斯阿拉莫斯的科学家们也在尝试设计一种使用钚–239 的原子弹。冯·诺依曼的主要工作是研制能够将钚核装料压缩至临界质量的炸药透镜。&lt;&#x2F;p&gt;
&lt;p&gt;这种内爆式设计的评估需要求解大量的方程，用于计算爆炸产生的空气或其他物质的压缩流速。于是冯·诺依曼开始前往各地了解高速计算机的发展前景。在当年的夏天和秋天，他多次来回穿梭于哈佛大学、普林斯顿大学、贝尔实验室和阿伯丁之间，他就像是一只蜜蜂一样将自己在各个地方采集到的想法传播给不同的团队。约翰·莫奇利曾经利用自己在四处访问期间收集的想法创造了第一台可行的电子计算机，同样，冯·诺依曼也在不同的地方吸收到设计存储程序的计算机结构所需的资料和概念。&lt;&#x2F;p&gt;
&lt;p&gt;ENIAC 可以在一个小时之内求解一道偏微分方程，而哈佛马克一号则需要花费 80 个小时。这点深深地打动了冯·诺依曼。然而，为不同的任务重新编程 ENIAC 将需要数个小时的时间，冯·诺依曼意识到当需要处理大量各不相同的任务时，这将会是一个严重的缺点。冯·诺依曼后来成为 ENIAC 团队的顾问，他坚持计算机程序应该与数据保存在同一个存储器中的想法，因为这样可以在程序运行的过程中轻易地对其进行调整。&lt;&#x2F;p&gt;
&lt;p&gt;在宾夕法尼亚大学忙碌工作了 10 个月之后，他主动提出将他们的讨论内容以书面形式汇总起来。他在开往洛斯阿拉莫斯的长途列车上开始撰写这份报告。也就是著名的「First Draft of a Report on the EDVAC」，草案不仅详述了 EDVAC 的设计，还为现代计算机的发展指明了道路： 1. 机器内部使用二进制表示数据； 2. 像存储数据一样存储程序； 3. 计算机由运算器、控制器、存储器、输入模块和输出模块 5 部分组成。这份报告是计算机发展史上一个划时代的文献。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 十进制在计算机中表示是很麻烦的，计算机做的都是位运算，那该怎么用电路来模拟这十种状态呢？于是人们用电压来控制数字，每隔 0.5v 就代表一个数字，比方说 0.5v 代表 1,1.0v 代表 2，但由于当时的机能所限，真空电子管的精度堪忧，这就导致得出的结果往往不准确；最后设计者们也没办法了，干脆用十根电子管代替 0-9，这种简单粗暴的方式使让接线变得异常复杂，还造成了严重的硬件浪费，计算机的体积也是相当庞大。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;xiang-nong-xin-xi-lun&quot;&gt;香农：信息论&lt;&#x2F;h2&gt;
&lt;p&gt;是的，还是那个熟悉的香农，1948 年，香农发表论文《通信的数学理论》（A Mathematical Theory of Communication），信息论的伟大之处在于用数学描述信息，让信息变得可测，在信号处理、数据压缩、自然语言等许多领域，起着关键作用。文中他提出了现在熟知的比特（Bit）概念，以及著名的信息熵。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-ke-li-ba-ding-bu-la-dun-jing-ti-guan&quot;&gt;肖克利&#x2F;巴丁&#x2F;布拉顿：晶体管&lt;&#x2F;h2&gt;
&lt;p&gt;计算机的发明并没有立刻引起一场革命。这是因为它们需要依赖使用大体积、高成本、易损坏和高耗能的真空管才能运作，最初的计算机都是一些造价不菲的庞然大物，只有企业、研究性大学和军事设施才能拥有它们。&lt;&#x2F;p&gt;
&lt;p&gt;当时贝尔实验室越来越重视一个研究领域：固体物理学。这是一门研究电子如何在固体材料之中流动的学科，它尤其需要理论家和工程师之间的联合。20 世纪 30 年代，贝尔实验室的工程师们一直在测试包括硅在内的各种材料。硅是地壳中除了氧之外最常见的元素，同时也是沙子的主要成分。在这些测试当中，他们会将不同的材料通电，并尝试控制材料中的电流。与此同时，贝尔实验室的理论家们正在同一栋大楼里面埋头研究量子力学领域的惊人发现。&lt;&#x2F;p&gt;
&lt;p&gt;在量子理论不断发展的同时，贝尔实验室的冶金学家也在研究制作新型材料的方式，他们采用了全新的提纯技术、化学处理方法以及稀有矿物和普通矿物之间的合成配方。为了解决一些常见的问题，比如真空管的灯丝太容易烧坏，或者电话话筒膜片发出的声音太小等，他们尝试合成了一些新型合金，然后通过加热或冷却的方式来提升这些合金的性能。他们就像是厨房里的大厨一样，在不断的试错过程中掀起了一场材料科学的革命，它与量子力学领域正在进行的理论革命齐头并进。&lt;&#x2F;p&gt;
&lt;p&gt;在测试硅和锗的材料样本的过程中，贝尔实验室的化学工程师偶然证实了理论家们提出的大部分猜想。他们发现理论家、工程师和冶金学家之间有着许多可以互相学习的地方，于是贝尔实验室在 1936 年成立了一个固体物理研究小组，这支队伍聚集了一批实用和理论领域的重量级人物。他们会在每周举行一次的午后聚会上分享各自的发现，其间还会进行学院风格的互相质问环节。在正式的聚会过后，他们会继续参与一些持续到深夜的非正式讨论。与仅仅阅读各自的论文相比，亲自会面讨论是一种更有成效的做法：频繁的互动可以将人们的想法跃迁到更高的轨道上，就像是电子一样，偶尔挣脱束缚的想法也会引起一些连锁反应。&lt;&#x2F;p&gt;
&lt;p&gt;肖克利在 1936 年从麻省理工学院毕业，这时贝尔实验室的默文·凯利来到学校面试他，并当场为他提供了一份工作。他还向肖克利指派了一项任务：找出一种可以替代真空管的装置，它需要比真空管更加可靠、稳定和廉价。经过了三年的研究之后，肖克利开始确信自己可以找出这个问题的答案——利用包括硅在内的固体材料取代带有发光灯丝的真空管。&lt;&#x2F;p&gt;
&lt;p&gt;正如莫奇利需要埃克特一样。在贝尔实验室的大楼中有许多符合肖克利要求的人才，其中最突出的一位是来自西部的沃尔特·布拉顿，他是一个充满活力且争强好胜的人。&lt;&#x2F;p&gt;
&lt;p&gt;战争结束后，凯利（贝尔实验室真空管部门的主管）把布拉顿和肖克利分配到一个研究小组工作，这个小组的目标是“将固体物理学领域的理论和实践工作统一起来”。也就是说，他们要继续完成在战争之前遗留下来的任务：利用半导体制作出真空管的替代品。&lt;&#x2F;p&gt;
&lt;p&gt;虽然肖克利是这个小组的首席理论家，但由于他的职责是管理整个小组的工作（他在另外一个楼层办公），所以他们决定邀请另外一位理论家加入这个小组。他们的人选是约翰·巴丁，一位言语温和的量子理论专家。&lt;&#x2F;p&gt;
&lt;p&gt;这项研究在接下来的一年里都没有多大的进展，然而他们却在 1947 年 11 月取得了一系列重大的突破，因此这个月也被称为“奇迹之月”。巴丁完善了“光伏效应”（photovoltaic effect）的理论，光伏效应指的是光照可以使两种互相接触的材料之间产生电压。他推测这个过程或许可以移除部分形成屏障的电子。与巴丁并肩工作的布拉顿设计出了一些用于测试这个想法的实验。&lt;&#x2F;p&gt;
&lt;p&gt;之后肖克利又对晶体管做了改善，使用 PN 结取代金属点触。但由于他的好胜心和独断专行，把小组变成了实现自己想法的工具，无法继续升迁，因此选择离开，去开创自己的事业。后来在企业家阿诺德·贝克曼的帮助下，他在 Palo Alto （也就是后来的硅谷）建立了自己的部门，同时通过自己的威望，招募了一批行业内的杰出人才，包括诺伊斯、摩尔，这两人后来由于无法与肖克利共事，出来后创办了仙童半导体，以及后来的英特尔。从这个角度来说，虽然肖克利由于一些自身的缺陷没有成就更大的事业，但他确实对硅谷的发展起到了至关重要的作用。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 贝尔实验室是一个融合创新的大锅。除了晶体管以外，它在计算机电路、激光技术和蜂窝电话等领域都处于领先地位。但是它却不太善于利用自己的发明来获取利润。作为一家几乎垄断整个电话服务市场的规约公司，它对开发新产品的积极性并不高，而且法律也会限制它利用自己的垄断地位进入其他市场。为了避免公众的批评和反垄断行动的攻击，它向来都会慷慨地向其他公司提供自己的专利授权。它为晶体管设定了相当低的授权费用，任何公司只需向其支付 25 000 美元即可获得生产晶体管的许可，它甚至为这些公司开办了讲述晶体管制造技术的研习班。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;nuo-yi-si-ji-er-bi-ji-cheng-dian-lu&quot;&gt;诺伊斯&#x2F;基尔比：集成电路&lt;&#x2F;h2&gt;
&lt;p&gt;杰克·基尔比（Jack Kilby）也是那种来自中西部农村的男孩，小时候，他在工作间里和父亲一起捣鼓电子元件，组装业余无线电。基尔比的第一份工作是在密尔沃基的电子零件公司中心实验室（Centralab）。这家公司当时在尝试将助听器元件全部集中到一个陶瓷衬底上，这大致可以算是集成电路思想的前身。基尔比意识到，要想站在晶体管发展潮流的前列，就得进一家较大的公司工作。1958 年夏天，在权衡了多份工作邀约之后，他决定加入德州仪器。&lt;&#x2F;p&gt;
&lt;p&gt;德州仪器的政策是，7 月所有人都统一休假两周。因此，当没有累积假期的基尔比来到达拉斯时，半导体实验室里几乎没什么人。这就让他有时间思考这样一个问题：硅除了用来加工晶体管，还有什么其他用途？&lt;&#x2F;p&gt;
&lt;p&gt;基尔比知道，不含任何杂质的硅性质类似一个简单的电阻。他意识到，还有一种方法可以让硅片上形成 PN 结，充当能储存少量电荷的电容。事实上，硅只要经过不同处理，就可以制成任何电子元件。由此，他提出了所谓的“单片概念”：可以把所有元件集成到单个硅片上，而无须把不同元件焊接在一块电路板上。&lt;&#x2F;p&gt;
&lt;p&gt;差不多同一时间，诺伊斯和仙童半导体的同事们就在从另一个方向入手，探索开发集成电路的可能性。他们之所以着手展开这项研究，是因为遇到了一个棘手的问题，也就是公司做的晶体管不好用。有太多晶体管都发生了故障。只要遇到一丁点儿灰尘，甚至只要接触一些气体就会让晶体管无法正常工作。猛烈敲打或碰撞也会让晶体管出故障。&lt;&#x2F;p&gt;
&lt;p&gt;仙童半导体的物理学家、“八叛逆”之一的让·赫尔尼想出了一个新颖的解决方案。他想在硅晶体管表面敷置一层薄薄的氧化硅层，就像千层蛋糕表面的糖衣一样，这样就能对下面的硅起到保护作用。他在笔记中写道：“在晶体管表面为集成电路敷置氧化层，能使结点不致暴露在外，这样晶体管就不会受到污染。”&lt;&#x2F;p&gt;
&lt;p&gt;这种方法被称为“平面工艺”，因为硅的表面有一个氧化层。当时，赫尔尼只是想设计出可靠的晶体管。他们还没有意识到，可以借助这种在氧化层上开小口的平面工艺将许多种晶体管和其他元件蚀刻在单片硅片上。诺伊斯认识到的第一个问题是，有了平面工艺，就不需要那些从每一层晶体管上伸出的细线了，可以在氧化层顶部印上小铜线，以代替这些布线。这将使晶体管生产变得更快、更可靠。从这一点出发，诺伊斯又产生了下一个洞见：既然能用这些印刷铜线连接晶体管的不同区域，那就也能用它们连接同一块硅片上的两个或更多晶体管。运用开口技术的平面工艺能让杂质分散开来，这样就能把多个晶体管安装在同一块硅芯片上，而印刷铜线能将它们连接起来，形成一个电路。&lt;&#x2F;p&gt;
&lt;p&gt;集成电路最初面向的主要市场是军队。1962 年，战略空军司令部（the Strategic Air Command）设计了名为“民兵二号”（Minuteman Ⅱ）的新型陆基导弹，在每一枚导弹中，仅弹载导航系统就需要 2000 枚集成电路。&lt;&#x2F;p&gt;
&lt;p&gt;美国的民用航空项目成为推动集成电路生产的下一个主要动力。1961 年 5 月，美国总统约翰·F·肯尼迪宣布：“我认为美国应该致力于这样一个目标，我们要在 60 年代结束之前把人送上月球，再让他们安全返回地球。”&lt;&#x2F;p&gt;
&lt;p&gt;这种来自政府的海量稳定需求促使集成电路价格迅速下跌。阿波罗导航计算机的首枚原型芯片售价 1000 美元。到芯片投入常规生产时，每枚芯片的价格降到了 20 美元。1962 年，民兵导弹上每一枚集成电路的平均价格为 50 美元，到 1968 年就降到了 2 美元。这样一来，将集成电路用于普通消费设备的市场便应运而生。&lt;&#x2F;p&gt;
&lt;p&gt;之后仙童半导体（诺伊斯和摩尔共同创办，母公司为仙童，主营摄影器材）乃至帕洛阿尔托的半导体部门都已经变得太大、太官僚。诺伊斯渴望甩掉一些无关紧要的职责，回头去做实验室的一线工作。有一天，诺伊斯问摩尔：“我们办一家新公司怎么样？” 然后就有了后来的英特尔。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;te-de-huo-fu-wei-chu-li-qi&quot;&gt;特德·霍夫：微处理器&lt;&#x2F;h2&gt;
&lt;p&gt;霍夫曾是斯坦福一名年轻教师，他成为英特尔的第十二名员工，任务是设计芯片。他意识到，像英特尔这样设计许多种功能各不相同的芯片既浪费又笨拙。当时，常常有公司来要求英特尔做一种用于完成特定任务的芯片。霍夫（还有诺伊斯和其他人）设想了一种替代方案：发明一种能接受指令，即进行编程，从而按要求完成不同任务的通用芯片。换句话说，也就是在一枚芯片上做出通用计算机。这一设想恰好可以拿来解决 1969 年夏季霍夫负责处理的一个问题。&lt;&#x2F;p&gt;
&lt;p&gt;当时有一家名为“Busicom”的日本公司计划做一款强大的新型台式计算器，想让英特尔制作 12 枚专用集成电路（分别处理显示、运算和存储等任务），芯片的相关细节已经拟定。英特尔同意了，价格也敲定了。诺伊斯让霍夫负责管理该项目。很快，他们遇到了一项挑战。霍夫回忆道：“我对这项设计了解得越多，就越担心英特尔的投入会比原计划要大。芯片的数量和复杂程度都远远超出我的预想。”英特尔不可能以协议价格做出这些芯片。&lt;&#x2F;p&gt;
&lt;p&gt;到 1969 年 9 月，霍夫和他的同事斯坦·麦卓尔（Stan Mazor）已经设计出能遵循编程指令的通用逻辑芯片的架构。这种芯片能够完成 Busicom 所要求的 12 枚芯片中的 9 枚所承担的功能。诺伊斯和霍夫向 Busicom 的高管介绍了这一方案，并获得了后者的认可。&lt;&#x2F;p&gt;
&lt;p&gt;到了重新谈价格的时候，霍夫向诺伊斯提出一个至关重要的建议，正是这一建议为通用芯片创造出一个巨大的市场，并维持了英特尔在数字时代的领军地位。比尔·盖茨和微软效仿了这种做法，10 年之后，IBM 也效仿了这一做法。诺伊斯为 Busicom 提供了优惠的价格，但坚持让英特尔保留新型芯片的知识产权，而且英特尔有权将其授权给其他公司，用于计算器生产以外的其他用途。他意识到，能通过编程实现一切逻辑功能的芯片将成为电子设备的标准元件，就像两英寸厚、四英寸宽的木板是房屋建筑业的标准建材一样。这种芯片会取代专用芯片，这就意味着它们可以批量生产，价格也会不断下降。它们还会让电子行业产生一个比较微妙的变化：在电路板上设计元件配置的硬件工程师变得没那么重要了，取而代之的是新生的软件工程师，他们的工作是将一批指令写入系统。&lt;&#x2F;p&gt;
&lt;p&gt;这就是发生在 20 世纪 70 年代的故事。微处理器催生了数百家为个人电脑做硬件和软件的新公司。英特尔不仅开发了尖端芯片，而且创造了一种文化，激励在风险资本支持下成立的初创公司去改变经济。英特尔还让圣克拉拉谷（从旧金山南部经帕洛阿尔托到圣何塞的一片 40 英里的平坦土地）的杏树果园变身为高科技公司云集的硅谷。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dao-ge-la-si-en-ge-er-ba-te-yan-shi-zhi-mu&quot;&gt;道格拉斯·恩格尔巴特：演示之母&lt;&#x2F;h2&gt;
&lt;p&gt;恩格尔巴特的父亲是一位电气工程师，在俄勒冈州波特兰开了家出售和修理收音机的商店。他从海军退役后，在俄勒冈大学获得了工程学位，随后在 NASA 下属尖端技术研究机构——位于硅谷的埃姆斯研究中心任职。为了结识可以作为结婚对象的女性，羞涩木讷的恩格尔巴特加入了帕洛阿尔托社区活动中心的一个中级希腊民间舞蹈班，后来他果然在这里找到了人生伴侣。订婚的那天，恩格尔巴特在开车上班的路上突然产生了一种可怕的、足以改变他生活方向的忧虑感：“等到我开始工作时，我意识到自己已经失去了目标。”&lt;&#x2F;p&gt;
&lt;p&gt;在接下来的两个月里，恩格尔巴特开始努力为自己寻找有价值的生活目标。他说：“我考虑了所有人类可以为之奋斗的事业，想找到一条适合自己的再教育之路。”他意识到，任何改造世界的努力都是很复杂的。他想到那些努力防治疟疾或增加贫困地区粮食产量的人，结果发现，如果这些问题得到解决，又会引发其他一系列复杂问题，比如人口过剩和水土流失。要想成功地完成一个大项目，就必须对行动中所有错综复杂的细节进行评估，权衡各种可能性，共享信息，组织人力，等等。他回忆说：“然后有一天我突然领悟到，复杂性正是最根本的东西，我感到豁然开朗。如果能以某种方式让人类更好地处理复杂和紧急的问题，能为此做出重大贡献，那你就能够造福全人类。”[插图]这样一种努力不是单单解决世界上的某一个问题；而是能为人们提供解决任何问题的工具。&lt;&#x2F;p&gt;
&lt;p&gt;1968 年 12 月 9 日，恩格尔巴特在旧金山举办的计算机行业大会上进行了这场持续 90 分钟的演示，会场内有近千名观众，只有站的地方。恩格尔巴特身穿白色短袖衬衫，系着深色窄领带，坐在讲台右侧一个时髦的赫曼米勒“行动办公室”操作台边。他那台计算机终端的显示屏被投射到他背后一个 20 英尺的屏幕上。他的第一句话是：“我希望大家有朝一日能习惯这种相当不同寻常的环境。”&lt;&#x2F;p&gt;
&lt;p&gt;恩格尔巴特展示了我们现在司空见惯的众多技术：视频会议、现代桌面式用户界面、文字处理、超文本、鼠标、协作编辑等等。&lt;&#x2F;p&gt;
&lt;p&gt;他向与会者提出了一个对 21 世纪初的我们来说几乎并无意义的问题：“如果在你的办公室有一台带显示器的计算机，你能够以一种直观的方式操作它，得到你想要的结果，它会给你的工作带来多大的便利？”&lt;&#x2F;p&gt;
&lt;p&gt;当然，在那个时候，计算机还是占据整个房间的庞然大物。在恩格尔巴特构想的用户界面中，人们可以使用鼠标来移动光标并选取对象，这在当时属于革命性的想法。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247674-ad876700-db54-11eb-98b8-d3c00af7cb02.jpg&quot; alt=&quot;epub_908185_680&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当时参加「演示之母」的就有艾伦·凯，将利克莱德和恩格尔巴特的思想带入个人电脑之乐土的先驱者就是凯和一家复印机公司研究中心（PARC）一群无拘无束的同事。后来乔布斯就是从 PARC 吸收了很多了 GUI 的理念。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ken-tang-mu-xun-dan-ni-si-li-qi-unix-cao-zuo-xi-tong&quot;&gt;肯·汤姆逊&#x2F;丹尼斯·里奇：Unix 操作系统&lt;&#x2F;h2&gt;
&lt;p&gt;在 Unix 分时系统出现之前，人工和机器的交互简直就像「疯狂动物城」里面的树懒一样，慢是真慢，而且毫无交互体验，和现在相同的是，提交者都不希望有 bug 出现，不然就要重新打卡。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247710-b5470b80-db54-11eb-9765-75cc1aef8531.png&quot; alt=&quot;0B120688-617A-4A05-8CDB-4B671678F871&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;贝尔实验室的 Ken Thompson 和 Dennis Ritchie 开始了一个新的项目——Multics。这是个分时操作系统，在交互式方面有着重要的突破。它允许多人连接到计算机上，每个人都可以获得一部分时间，给用户一个独占整个计算机的感觉，不过计算机实际上还会在他们之间来回切换。如果你可以“独享”的话，你就可以使用电传打字机而不需要打孔卡了。电传打字机这个东西是打字机、打印机和电话线的结合体，你可以输入命令，通过电话线传给计算机，然后输出。这种原理和现在的 SSH 其实比较类似。&lt;&#x2F;p&gt;
&lt;p&gt;不过，Multics 实在是太贵了，尽管它能提供很好的计算环境，很多针对它的描述用到了”过度工程“这个词。 因此，贝尔实验室在 1969 年退出了项目，只有 MIT 和 AT&amp;amp;T 还在支持。&lt;&#x2F;p&gt;
&lt;p&gt;虽然贝尔实验室退出了 Multics 计划，Ken 可没闲着，实验室有一台 PDP-7，说是一台微型机，实际上也是需要一件屋子才能放得下，不过还好已经有显示器了。有一次，Ken 的爱人带着一岁的孩子去加州呆了三周度假。利用这三周的时间，Ken 完成了可以正常运行的系统，他命名为“Uniplexed Information and Computing System”，缩写为 UNICS ，这可以说是 Unix 的初代机了。&lt;&#x2F;p&gt;
&lt;p&gt;肯·汤普森开发出来的原型 Unix 系统，深得贝尔实验室这帮大佬们的青睐。Unix 的另一位热心开发参与者丹尼斯·里奇，他和肯都希望能购置一台比 PDP-7 更好的计算机。但贝尔实验室的管理层被失败的 Multics 搞得心有余悸，说什么也不肯批这个条子。不过大神们有的是暗渡陈仓的办法。因为贝尔实验室每年要编写提交许多专利文件，因此在文字处理上有着迫切需求。正是抓住了这个痛点，提出可以采购 PDP-11 用于编写专利材料，Unix 小组可以为其提供软件。&lt;&#x2F;p&gt;
&lt;p&gt;肯·汤普森和丹尼斯·里奇如愿以偿地拿到了比 PDP-7 更好的 PDP-11，两位大神立即在新机器上展开工作。由此，在 PDP-11 机器上 Unix 完成了从原型到初版的开发。&lt;&#x2F;p&gt;
&lt;p&gt;在此之后，Unix 就一直在实验室里迭代。1975 年 5 月，第六版 Unix 发布，从这一版本开始，Unix 逐渐为外界所知。&lt;&#x2F;p&gt;
&lt;p&gt;为什么这一版具有如此魅力？因为现代操作系统的设计哲学（套路）就此形成，并稳定下来了。这一哲学包含两个方面，第一是简洁，第二是专注。&lt;&#x2F;p&gt;
&lt;p&gt;先说简洁，Unix 的文件系统就是最佳示范。在 Unix 的世界里，一切皆文件。说到文件，我们首先想到的可能是打开一个文档，并在里面输入内容，最后保存关闭。这是一个关于普通文件的典型操作过程，只需要五个系统调用（creat, open, read, write, close）就可以全部完成。&lt;&#x2F;p&gt;
&lt;p&gt;那么，对于其他外接的设备，也可以将其视为一个特殊文件，只需要用五个系统调用组合使用，就能完成读写数据的工作。&lt;&#x2F;p&gt;
&lt;p&gt;再说专注，Unix 系统里有许多程序，这些程序各司其责，只将一件事做好。例如 echo 就是回显文本；cat 就是显示文件内容；ls 就是显示磁盘目录内容。那么，要实现复杂的功能怎么办？答案是借助于 shell、管道与重定向机制，将独立的小程序组合起来，实现想要的功能。这就是一种典型的分工合作思想。&lt;&#x2F;p&gt;
&lt;p&gt;这里面 shell 是供程序所运行的环境，管道是程序间数据流通的通道。管道机制是真正的神来之笔。道格·麦基尔罗伊最初有这个想法，但总是被实现问题所困扰，直到有一天启发了肯·汤普森的思考。如同被上帝亲吻了脑门，肯猛然省悟了管道的机理。他只用了一个小时就在系统调用中实现了管道。这就是将程序的孤岛给连接起来的竖线符：“|”。&lt;&#x2F;p&gt;
&lt;p&gt;UNIX 成功的另一个重要因素是它的可移植性。正是里奇竭尽全力开发了 C 语言，并把 UNIX 用 C 重写了一遍，这才使它具有了这一特性。汤普森是用汇编语言开发 UNIX 的，这种语言高度依赖于硬件，由它开发的软件只能在相同的硬件平台上运行。里奇在由剑桥大学的里查德（M．Richard）于 1969 年开发的 BCPL 语言（Basic Combined Programming Language）的基础上，巧妙地对它进行改进、改造，形成了既具有机器语言能直接操作二进制位和字符的能力，又具有高级语言许多复杂处理功能如循环、转移、分支等的一种简单易学而又灵活、高效的高级程序设计语言。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;heng-li-luo-bo-ci-di-yi-tai-ge-ren-dian-nao&quot;&gt;亨利·罗伯茨：第一台个人电脑&lt;&#x2F;h2&gt;
&lt;p&gt;罗伯茨是个无所畏惧的创业者，他一直都对计算机很感兴趣，他认为其他发烧友也一样。他兴致勃勃地对一位朋友说，他的目标是做一款面向大众，能够彻底清除“计算机圣职阶层”（Computer Priesthood）的电脑。在研究过英特尔 8080 的指令集之后，罗伯茨认为 MITS 能够生产出一款可组装出简陋计算机的 DIY 套件，价格可以卖得非常便宜，在 400 美元以下，让每个计算机爱好者都能买得起。&lt;&#x2F;p&gt;
&lt;p&gt;罗伯茨和他那支杂牌军制作的电脑不会给恩格尔巴特、凯和斯坦福周围实验室的其他人留下什么深刻印象。这款电脑内存只有 256 个字节，没有键盘，也没有其他输入设备。要想输入数据或指令，只能在一排开关之间进行切换。当时施乐 PARC 的专家正在开发可以显示信息的图形界面；而这款出自老魔法三明治店的机器却只能通过前置面板上几盏灯的闪灭来显示二进制码答案。这款电脑在技术方面虽然算不上有多成功，但仍然是一款发烧友向往的产品。发烧友群体中存在一种有待释放的需求，他们渴望有一款像业余无线电设备那样，让他们动手组装和拥有的电脑。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247740-bf690a00-db54-11eb-8182-cdf3be631417.png&quot; alt=&quot;F231040F-A65E-4712-AE05-2A3BBB2649EF&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;与当时其它的计算机相比，它并不是一台性能强劲的计算机（尽管它的成本要低得多），它也不是首个采用微处理器的通用计算机（在它之前已经至少有三个基于微处理器的计算机）。但是 Altair 是一种可供我们所有人使用的计算机。它是历史上我们所拥有的设备中首台流行的计算机，而早于 Altair 计算机都是完全不同的机器，那些大型机和笨重的迷你计算机由穿孔卡编程并且很少与之直接交互。不过 Altair 也是台极其简单的计算机，它没有附带任何操作系统甚至是引导程序。除非你为它购买外围设备，否则 Altair 就是一台装配了 RAM、前面板只有一组开关和灯泡的机器。由于 Altair 操作简单，使得重新理解基本的计算概念都成了十分简单的事情，正如模拟信号时代的人们第一次接触到数字设备一样。&lt;&#x2F;p&gt;
&lt;p&gt;「大众电子学」在一篇报道的导语中宣布：“电脑走进千家万户的时代（科幻小说作家最喜欢的主题）来临了！”一款价格适中而且实用的电脑第一次被推向大众市场。比尔·盖茨后来宣称：“在我看来，Altair 是第一台名副其实的个人电脑。”&lt;&#x2F;p&gt;
&lt;p&gt;1974 年 12 月，就在盖茨和艾伦第一次看到「大众电子学」封面的那一天，两人便决定为个人电脑制作软件了。不仅如此，他们还想改变这个新兴行业的利润分配格局，让硬件成为一种可以替代的商品，并让那些创造出操作系统和应用软件的人获得大部分利润。&lt;&#x2F;p&gt;
&lt;p&gt;盖茨和艾伦准备编写一个能让发烧友用 Altair 电脑自己动手写程序的软件。具体来说，他们决定为编程语言 BASIC 写一个能在 Altair 的英特尔 8080 微处理器上运行的解释器。这将成为针对微处理器的第一款商业化本地高级编程语言，并将开创个人电脑软件行业。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-di-fu-wo-zi-ni-ya-ke-apple-ii&quot;&gt;史蒂夫·沃兹尼亚克：Apple II&lt;&#x2F;h2&gt;
&lt;p&gt;家酿（homebrew）计算机俱乐部的首次会议是在戈登·弗伦奇的车库里举行的，其中有一位参加者叫史蒂夫·沃兹尼亚克，是一位不善与人打交道的年轻硬件工程师，他从大学退学后在位于硅谷小镇库比蒂诺的惠普计算器部门工作。从一位朋友那儿看到那张印着“你在自己组装电脑吗”的传单之后，他便鼓足勇气来参加聚会。他宣称：“那天晚上成为我生命中最重要的夜晚之一。”&lt;&#x2F;p&gt;
&lt;p&gt;当时沃兹尼亚克刚刚完成《打砖块》游戏的设计。聚会刚开始时，沃兹尼亚克感到自己与其他人格格不入。他是做计算器和家用电视游戏显示器的，但那次聚会上人们的主要兴奋点是那台新款 Altair 电脑，而他一开始对这台电脑并不太感兴趣。于是，很容易害羞的沃兹便躲到了角落里。他后来这样描述当时的场面：“那儿有人拿着《大众电子学》杂志，封面图片是一款叫 Altair 的电脑。我发现这些人其实都是 Altair 的粉丝，而不是像我想象的那样对电视终端感兴趣。”他们一个个轮番做自我介绍，轮到沃兹尼亚克的时候，他说：“我叫史蒂夫·沃兹尼亚克，我在惠普做计算器设计工作，我还设计过一个视频终端。”&lt;&#x2F;p&gt;
&lt;p&gt;但有一样东西激起了沃兹尼亚克的兴趣。聚会上有人给大家传阅了一份新款英特尔微处理器的规格表。他回忆说：“当晚我查阅了这份规格表，发现上面有一条将内存中一个位置的数据与 A 寄存器内容相加的指令。当时我想，等等，我再看看。然后我又看到一条让内存和 A 寄存器内容相减的指令。哇！在你眼中这些可能没有什么意义，但我可是清楚地知道这些指令的意义，这是我最兴奋的发现。”&lt;&#x2F;p&gt;
&lt;p&gt;沃兹尼亚克当时在设计一个带有视频显示器和键盘的终端。他本来想把它设计成一个“哑”终端，即自身不具备计算能力，而要通过电话线与其他地方的分时计算机相连的终端。但当他看到那份微处理器规格表时，他突然产生了一个灵感：可以利用微处理器（带有中央处理单元的芯片）赋予他正在制作的终端一些运算能力。这就在 Altair 的基础上迈进了一大步：这是一台集计算机、键盘和屏幕于一体的设备！他说：“这一整套有关个人电脑的设想就这样浮现在我的脑海中。那天晚上，我开始在纸上画草图，这就是苹果 I 型电脑的雏形。”&lt;&#x2F;p&gt;
&lt;p&gt;一位朋友把沃兹尼亚克介绍给了另一个也热衷电子学的孩子，这个孩子住在与他家相隔几个街区的地方，名叫史蒂夫·乔布斯。乔布斯比沃兹尼亚克小将近五岁，当时还在沃兹尼亚克的母校家园高中读书。两人坐在人行道上，交流着他们耍过的恶作剧、他们喜欢的鲍勃·迪伦的歌和做过的电子设计。沃兹尼亚克说：“一般来说，我很难跟人讲清我设计的东西，但史蒂夫立马就能明白。我喜欢他。他精瘦结实，活力四射。”而沃兹尼亚克也给乔布斯留下了很深的印象，乔布斯后来说：“沃兹是我遇到的第一个电子学懂得比我多的人。”&lt;&#x2F;p&gt;
&lt;p&gt;他们最大的一次恶作剧是“蓝盒子”事件，这件事为两人日后的电脑业务合作关系奠定了基础。乔布斯后来反思道：“如果没有蓝盒子，就没有苹果。通过蓝盒子，沃兹和我学会了如何合作。”沃兹尼亚克赞成这种说法：“它让我们体会到，如果把我的工程能力和他的想象力结合起来，我们就能做成一番大事。”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;124247782-c859db80-db54-11eb-8b5f-09241924bbb2.jpg&quot; alt=&quot;epub_908185_859&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;等到开发苹果 II 型电脑时，他就没再花太多时间研究微处理器规格了，而是到斯坦福购物城的梅西百货去研究 Cuisinart 牌电动厨具。他认为下一代个人电脑应该像家用电器一样：所有元件都装配妥当，带有时尚的外壳，用户买回家后无须再自己组装。从电源到软件，再从键盘到显示器，一切都应该紧密地集成为一体。他解释说：“我希望做出世界上第一台完全一体化的电脑。我们不再面向一小撮喜欢自己组装电脑，懂得如何选购变压器和键盘的发烧友。有数量相当于发烧友一千倍的人想要买回家就能用的电脑。”&lt;&#x2F;p&gt;
&lt;p&gt;苹果 II 型电脑是第一款操作简单且软硬件完全一体化的个人电脑。这款电脑于 1977 年 6 月上市，售价 1 298 美元，不到三年时间就卖出了 10 万台。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>软件设计的哲学</title>
            <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design-philosophy/</link>
            <guid>https://limboy.me/posts/software-design-philosophy/</guid>
            <description>&lt;p&gt;今天要推荐的书是「&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Philosophy-Software-Design-John-Ousterhout&#x2F;dp&#x2F;1732102201&quot;&gt;A Philosophy of Software Design&lt;&#x2F;a&gt;」，作者是 Tcl 语言的设计者，也是斯坦福大学的教授：John Ousterhou。他也在 Google 做了一个&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bmSAYlu0NcY&quot;&gt;相关的分享&lt;&#x2F;a&gt;。作为一个还在从事编程的大佬，看看他是怎么理解软件开发的哲学的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一切都是关于复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在作者看来，「复杂度」是核心，如果无法处理好复杂度，就很难构建大型&#x2F;复杂的系统。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-ding-yi&quot;&gt;复杂度的定义&lt;&#x2F;h3&gt;
&lt;p&gt;复杂度有没有简单的定义呢，作者认为复杂度就是理解和修改系统的成本。比如是否容易理解某一段代码是怎么工作的，如何跟上下游衔接的，处于架构中的哪个部分，改动它会对那些模块产生影响。如果这些都比较模糊，那就是复杂的。&lt;&#x2F;p&gt;
&lt;p&gt;还有一点是「Unknown unknowns」，比如为了完成某个 Feature，不知道哪些地方的代码需要做调整，或者需要知道哪些上下文，这种情况是最糟糕的。所以好的设计一定是「显式」的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-lai-yuan&quot;&gt;复杂度的来源&lt;&#x2F;h3&gt;
&lt;p&gt;依赖和模糊。依赖是指一段代码无法被独立理解和修改，必须参照&#x2F;修改相关代码。我们无法摆脱依赖，但可以让依赖尽量简单和显式。模糊就是一些重要的信息不够突出，比如用了一个通用的变量名，或者时间单位没有说明等。&lt;&#x2F;p&gt;
&lt;p&gt;复杂度也不是孤立的，平时如果不注意，日积月累之后想要再降下去就会比较难了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-xin-tai-zhan-zhu-bian-cheng-yu-zhan-lue-bian-cheng&quot;&gt;处理复杂度的心态：战术编程与战略编程&lt;&#x2F;h3&gt;
&lt;p&gt;战术编程就是只关注眼前需求，没有太考虑需求的本质和将来的演进。这样可能会让需求完成地更快，但也会给系统增加复杂度，进而带来更大的维护成本，于是就产生了「技术债」。&lt;&#x2F;p&gt;
&lt;p&gt;战略编程要意识到「Working code isn&#x27;t enough」，「a great design, which happens to work」才是目标，这需要投入时间去思考去雕琢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-shou-duan-fen-jie-yu-feng-zhuang&quot;&gt;处理复杂度的手段：分解与封装&lt;&#x2F;h3&gt;
&lt;p&gt;分解就是将一个复杂系统拆分为多个相对独立的子系统，子系统之间也会产生依赖，处理依赖的方式是将子系统拆分为 interface 和 implementation。interface 里的内容是供消费方使用的，也就是 what，implementation 对应的是 how。interface 尽量简洁，把复杂度包在 implementation 里内部消化，形成 Deep Module。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841170-d08dfd00-d941-11eb-9e3f-dc0b110bb040.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个 interface 的提炼就涉及到抽象能力了，抽象就是去掉不重要的细节，留下最核心的本质。比如一个文件系统，不需要在 interface 里把文件存储的 block 等细节暴露出来，这样会增加使用者的负担，也会增加复杂度（将来如果换了一种实现，就要修改接口了）。&lt;&#x2F;p&gt;
&lt;p&gt;作者在视频中举了一个 Unix file I&#x2F;O 的例子&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841203-da176500-d941-11eb-918f-82edd6bb9463.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;封装就是信息隐藏，将具体怎么实现的都放到 implementation 里，使用方不需要关心，甚至可以随时更换实现，这样即使内部很复杂，因为没有上游依赖，所以不会将复杂度扩散出去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-jiang-di-fu-za-du-de-fang-shi-you-ya-di-she-ji-cuo-wu&quot;&gt;其他降低复杂度的方式：优雅地设计错误&lt;&#x2F;h3&gt;
&lt;p&gt;只要不符合预期就抛一个 Exception，这是最简单的处理，但对使用方可能不太友好，比如取数组的 Range 时，Index 超过长度抛一个 Exception；文件在使用时请求删除抛一个 Exception；参数校验不通过抛一个 Exception。如果多为使用方想一下，这些 Exception 都是必须要抛的么？有没有可能通过改变语义或设计来避免 Error？&lt;&#x2F;p&gt;
&lt;p&gt;作者举了一个 &lt;code&gt;unset&lt;&#x2F;code&gt; 的例子，一个开始他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：移除一个变量，这样如果传入的变量不存在就要抛异常，这样导致外面使用方要通过 try catch 的方式去使用这个方法，后来他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：让一个变量不可用，如果传入的变量已经不可用了，那就不需要做处理。对比 Windows 和 Unix 对文件删除的不同处理方式（后者在运行时删除不抛出 error），也可以达到减少 Error 的效果。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;yi-ge-li-zi&quot;&gt;一个例子&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个程序，输出从 1 到 n 数字的字符串表示。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果  n  是 3 的倍数，输出“Fizz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  是 5 的倍数，输出“Buzz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  同时是 3 和 5 的倍数，输出 “FizzBuzz”。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果采用「战术编程」的话，很快就能写出一段可以 work 的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;FizzBuzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完全符合题意，也能正确运行，但调整空间太小了&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果条件变了，不是 5 而是 7 怎么办&lt;&#x2F;li&gt;
&lt;li&gt;如果不是输出 Fizz，Buzz 怎么办&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;考虑到这两点，我们再来调整下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;divisor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将变量抽了出来，这样将来调整时，不需要动实现，只需改参数即可。&lt;&#x2F;p&gt;
&lt;p&gt;如果又来了个新需求：小于 10 的都要在前面补 0。如果求快，采用战术编程的话，直接在方法内部加入这个判断分支即可。但可以有更好的解法，比如将计算逻辑放到外面，方法内部只需要判断计算结果即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.predicate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来还可以有更多的演变，比如要输出到文件而不是 console，要具备可测性等等。可以看到一个简单的需求，战术编程和战略编程会带来很大的差异。这种思维和能力上的转变对于写出优雅的代码也会有帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>工程师的成长</title>
            <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/eng-growth/</link>
            <guid>https://limboy.me/posts/eng-growth/</guid>
            <description>&lt;p&gt;我们都需要成长，工程师也不例外。以下是我感觉对工程师的成长比较有帮助的点，供参考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yao-dian&quot;&gt;要点&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;积累信用货币（先把手头的事情做好，再聊你想做什么）&lt;&#x2F;li&gt;
&lt;li&gt;提升影响力（注重输出；做能够影响更多部门&#x2F;使用方的事，并把它做好）&lt;&#x2F;li&gt;
&lt;li&gt;把工作当成内部创业（多研究手头&#x2F;部门的事情，寻找问题&#x2F;机会，把其他部门当作潜在合作伙伴）&lt;&#x2F;li&gt;
&lt;li&gt;清楚自己的强项（将自己的强项和正确的事情结合起来，才能发挥最大的作用）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;huan-jing&quot;&gt;环境&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;与优秀的人共事（学习他们的技能和做事方式，不要成为最聪明的那个）&lt;&#x2F;li&gt;
&lt;li&gt;做符合大趋势的事（ Focus 在某个领域可能是把双刃剑，多结合一些通用技能）&lt;&#x2F;li&gt;
&lt;li&gt;做事情有足够的空间（可以发挥自己的创造力，而不是偏流程化、对着操作手册就能做的事）&lt;&#x2F;li&gt;
&lt;li&gt;一个好的 Mentor（用旁观者视角给你反馈，指出问题和改进方案，帮助成长）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-ge-ti-de-ji-ben-su-zhi&quot;&gt;作为个体的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;自驱力（想在前头，不需要别人来 Push）&lt;&#x2F;li&gt;
&lt;li&gt;好奇心（不局限于自己的 Scope，多了解同事、Lead、行业的事情）&lt;&#x2F;li&gt;
&lt;li&gt;高标准（仅仅做完是不够的，一个问题往往有很多可以挖掘的点）&lt;&#x2F;li&gt;
&lt;li&gt;时间管理（不会疲于应付各种需求和问题，有优先级和 Plan）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-wei-gong-cheng-shi-de-ji-ben-su-zhi&quot;&gt;作为工程师的基本素质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;良好的编码能力（1 个月后的自己依然可以维护，出问题可以快速定位）&lt;&#x2F;li&gt;
&lt;li&gt;享受解决问题的乐趣，具备化繁为简的能力（抽象，分解，分层，分模块）&lt;&#x2F;li&gt;
&lt;li&gt;抗压能力（压力下，不变形）&lt;&#x2F;li&gt;
&lt;li&gt;数据意识（好了，坏了，用数据说话）&lt;&#x2F;li&gt;
&lt;li&gt;注重效率（不吝啬在工具上的投入）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kan-wen-ti-de-jiao-du&quot;&gt;看问题的角度&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;如果现状让我不舒服，我可以做什么来改变，而不是逃避和埋冤&lt;&#x2F;li&gt;
&lt;li&gt;如果觉得当前没什么问题，一定是了解得还不够深入&lt;&#x2F;li&gt;
&lt;li&gt;如果是 Ta（某个你欣赏的人）来做你手头的事，Ta 会怎么做&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zuo-shi-qing-de-fang-fa&quot;&gt;做事情的方法&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;设计方案时要考虑周到：竞品调研、上线策略、降级方案、回滚方案、出问题时如何排查等&lt;&#x2F;li&gt;
&lt;li&gt;事情推不动就上升，但要提供充足的上下文以便 Lead 做决策，Context not Control&lt;&#x2F;li&gt;
&lt;li&gt;汇报时要切换视角，有条理，把要点说清楚，同时提供了解细节的入口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>Contact Tracing 技术实现解析</title>
            <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/contact-tracing-tech-analyze/</link>
            <guid>https://limboy.me/posts/contact-tracing-tech-analyze/</guid>
            <description>&lt;p&gt;为了更好地应对 covid-19，&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;covid19&#x2F;contacttracing&quot;&gt;Apple&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.google&#x2F;inside-google&#x2F;company-announcements&#x2F;apple-and-google-partner-covid-19-contact-tracing-technology&#x2F;&quot;&gt;Google&lt;&#x2F;a&gt; 联合发布了一项技术：「 Privacy-Preserving Contact Tracing」，在保护用户隐私的前提下，追踪联系人。这里的联系人不是通讯录里的联系人，而是真实世界中有过联系的人，更确切地说是在蓝牙范围内的人，路上并肩的行人也属于这个范畴。「追踪」是为了当有人确诊后，可以找到有过近距离接触的人，以便告知该信息。&lt;&#x2F;p&gt;
&lt;p&gt;Apple 和 Google 给出的技术方案从宏观来看是：把设备信息通过蓝牙传递到其他手机上，当有人确诊后，将 ta 的设备信息上传到云端，再推到其他手机上，通过比对本地保存的其他设备信息和接收到的设备信息是否匹配，来判定手机 owner 是否存在被感染风险。&lt;&#x2F;p&gt;
&lt;p&gt;为什么选择低功耗蓝牙，一个是主流移动设备基本都配备了该能力，这样就方便跨设备，甚至跨操作系统通信；同时低功耗可以避免给手机带来性能影响；蓝牙属于近场通信，也非常适合 covid-19 的场景。&lt;&#x2F;p&gt;
&lt;p&gt;其次设备信息这么传递，如何保障隐私不被泄漏呢，我们来看下这个问题&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-bi-mian-she-bei-xin-xi-chuan-di-dai-lai-de-yin-si-xie-lou-feng-xian&quot;&gt;如何避免设备信息传递带来的隐私泄漏风险&lt;&#x2F;h2&gt;
&lt;p&gt;如果设备信息就是固定的手机的 udid，或者对应的映射，攻击者就可以利用这个指纹做文章（比如查看另一个人的手机，看是否有某台设备的 udid，以确定两个人是否近距离接触过，或者持续监控&#x2F;跟踪某台设备）。因此这里的 Key 应该是变的，同时又跟设备紧密相关，别人无法仿造和解密。白皮书里涉及到了 3 个 Key：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;74ae60e45645cb3745de5b164fe647178a993e8e.jpg&quot;
        width=&quot;820&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;tracing-key-yi-xia-jian-cheng-tk&quot;&gt;Tracing Key （以下简称 TK）&lt;&#x2F;h3&gt;
&lt;p&gt;一个设备只生成一次，保存在本地，不会被上传。它的目标是足够随机，不会与其他设备产生的 TK 冲突。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;daily-tracing-key-yi-xia-jian-cheng-dtk&quot;&gt;Daily Tracing Key（以下简称 DTK）:&lt;&#x2F;h3&gt;
&lt;p&gt;一天生成一次，一天内不变，从 Tracing Key 派生而来，使用 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HKDF&quot;&gt;HKDF&lt;&#x2F;a&gt; 密钥算法（将较短的密钥生成较长的密钥，同时保证随机性），这个算法使用原始的密钥（Tracing Key）作为输入，使用 &lt;code&gt;DayNumber&lt;&#x2F;code&gt; 作为变量，因为 &lt;code&gt;DayNumber&lt;&#x2F;code&gt; 一天内不变，所以 DTK 一天内也不会变。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;faa9b33a2cbe2d8caca14f5d9fe40488b0290982.png&quot;
        width=&quot;832&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个 Key 的设计目标是隐藏 TK（外部无法根据这个 Key 推测出 TK），同时不会与其他设备的 DTK 冲突。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rolling-proximity-identifier-yi-xia-jian-cheng-rpi&quot;&gt;Rolling Proximity Identifier（以下简称 RPI）&lt;&#x2F;h3&gt;
&lt;p&gt;一个广播周期内（比如 10 分钟）生成同一个 HMAC（密钥散列消息认证码）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;5b07e24e0ab6fc016cd36a5926ae1a659ac0fb19.png&quot;
        width=&quot;1124&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;dkt&lt;sub&gt;i&lt;&#x2F;sub&gt; 表示当天的 Daily Tracing Key，也就是 SHA-256 哈希函数的入参
TIN&lt;sub&gt;j&lt;&#x2F;sub&gt; 表示 TimeIntervalNumber，也就是当天第 j 轮广播周期，比如 10 分钟为一个周期（换一次 RPI）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;64fd3c7f5c0e0c9f4f3a6ff28227e8ddbe39113f.png&quot;
        width=&quot;992&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;j 的取值区间就是 &lt;code&gt;[0,143]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;RPI&lt;&#x2F;code&gt; 的设计目标是隐藏 DKT，同时支持 DKT 的验证（当某个人确诊后，可以通过 ta 的 DKT 计算 RPI 来验证）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-fa-song-rpi&quot;&gt;如何发送 RPI&lt;&#x2F;h3&gt;
&lt;p&gt;前面提到的 3 个 Key，只有最后一个 RPI 会发送到其他设备上（TK 永远不会离开设备，DTK 只有确诊后才会提取其中的一个子集作为 Diagnosis Key），RPI 通过蓝牙发送到其他设备（关于低功耗蓝牙协议的说明，可以参考&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;iini&#x2F;p&#x2F;8969828.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;发送（广播）流程如下：

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;c978802c2c011295dea09a857ca31ba24c56d004.jpg&quot;
        width=&quot;2208&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的通信双方分别是：advertiser（广播数据包）和 scanner（扫描响应包），前者在广播时间间隔内会不断广播数据，这些数据中会包含 RPI，scanner 接收到广播数据后会将 payload 中的 RPI 保存到本地。等切换到下一个时间窗口后，会生成并广播新的 RPI。跨天会以新的 DTK 为基础，生成并广播新的 RPI。&lt;&#x2F;p&gt;
&lt;p&gt;这个过程使用的是 Beaconing 协议，也就是接收方无需应答广播者的数据包，只要默默地把数据记下来就行。一个设备同时是广播者和扫描者。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;guan-yu-kong-jian-zhan-yong&quot;&gt;关于空间占用&lt;&#x2F;h4&gt;
&lt;p&gt;一个 RPI 的长度是 16 字节，所以空间消耗非常少，即使接收到了 10000 个 RPI，也只会占用 156 K 的空间。但还是要有一个 Rotation 的机制，毕竟时间太长的 RPI 意义已经不大了。&lt;&#x2F;p&gt;
&lt;p&gt;这里还有一个潜在的风险是攻击者可以伪造大量的 RPI 数据给 Scanner，虽然每个 RPI 只有 16 字节，但仍有潜在的存储风险。所以 Scanner 的 scan 行为持续时间不能过长&#x2F;过频繁，这同时也能节省电量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-jie-shou-rpi&quot;&gt;如何接收 RPI&lt;&#x2F;h3&gt;
&lt;p&gt;对于 Scanner 来说，流程更加简单，只要存储收到的 RPI 即可。如果云端有推送 Diagnosis Keys（确诊者上传的 DTK），就对它使用 SHA_256 算法（结合 TimeIntervalNumber）， 将结果与本地存储的 RPI 比对，如果 match，就有被感染的风险，系统会推送通知提醒。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;9b0d919706658c6c62ab9b9baab4f7adec60427a.jpg&quot;
        width=&quot;2208&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;guan-yu-api&quot;&gt;关于 API&lt;&#x2F;h2&gt;
&lt;p&gt;苹果和 Google 都放出了 API Interface，虽然没有具体的实现，但光是对比两家的 API 接口就能看出点门道，这个环节个人认为 Google 做得更好，苹果很「意外」地没有使用 Swift 来提供 API，OC 那冗长的语法和 Block，给 API 的友好度打了折扣&lt;&#x2F;p&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;covid19-static.cdn-apple.com&#x2F;applications&#x2F;covid19&#x2F;current&#x2F;static&#x2F;contact-tracing&#x2F;pdf&#x2F;ContactTracing-FrameworkDocumentation.pdf&quot;&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;2b1faeb610533f0fb6da0f92d2f907a272f5ebec.jpg&quot;
        width=&quot;709&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;
&lt;p&gt;相比之下 Google 的 API 看着就舒服多了&lt;&#x2F;p&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;blog.google&#x2F;documents&#x2F;55&#x2F;Android_Contact_Tracing_API.pdf&quot;&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;contact-tracing-tech-analyze&amp;#x2F;9dfa8c4a3c89e00c20b346c8fe6e06bfd02547d8.jpg&quot;
        width=&quot;619&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;这个设计非常巧妙，不仅保护了用户隐私，也减少了服务端的压力，对于服务端只需存储和下发 Diagnosis Keys，不需要计算 Key 与 Key，Key 与设备之间的关联。设备也不会有很大的存储和计算压力。从扩展性来看，将来如果有类似的近距离传播流行病，可以复用这套技术。但 Android 设备因为众所周知的原因在国内推行这套基建会比较困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fa-san-yi-xia&quot;&gt;发散一下&lt;&#x2F;h3&gt;
&lt;p&gt;这个设计中，主要用到了蓝牙和加密哈希算法，苹果在 iOS 13 中的 Find My 也是基于蓝牙和加密协议来实现的，使得手机即使处于离线状态（不要关机就行），依然可以被定位。原理是要拥有至少两台苹果设备（共享私钥），然后每台设备都以一定间隔发送不断变化的公钥，当被周边的苹果设备获取到后，该设备（就像一个跳板）会用这个公钥来加密当前的地理位置信息，上传到苹果服务器，另一台设备就可以用私钥来解开这个加密信息，得到地理位置。这个过程中上传地理位置的设备信息不会暴露（因为压根就没有上传），别人无法解密这个信息，因为基于蓝牙传输，也不需要依赖网络，不得不说也是非常精巧的设计。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>强大的可视化利器 Chrome Trace Viewer 使用详解</title>
            <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/chrome-trace-viewer/</link>
            <guid>https://limboy.me/posts/chrome-trace-viewer/</guid>
            <description>
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b580eea70090ee05b7c8885712df2b271395a8b4.png&quot;
        width=&quot;1390&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最近研究了下 Chrome 自带的 Trace Viewer，发现功能还挺强大的，用来做 Performance Profile，Timeline Tracing 等很方便，但官方的使用文档比较晦涩，资料也比较匮乏和分散，就专门整理了下。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：Trace Viewer 其实可以脱离 &lt;code&gt;chrome:&#x2F;&#x2F;tracing&lt;&#x2F;code&gt; 在线使用，具体操作后面会讲到&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;trace-viewer-jie-shao&quot;&gt;Trace Viewer 介绍&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Trace-Viewer is the javascript frontend for Chrome &lt;code&gt;about:tracing&lt;&#x2F;code&gt; and Android &lt;code&gt;systrace&lt;&#x2F;code&gt;. providing rich analysis and visualization capabilities for trace files, supporting both the linux kernel trace format and Chrome&#x27;s base&#x2F;trace_event.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;它是一个强大的可视化展示和分析工具，之前 google 有一个专门的 trace-viewer 项目，现在该项目合并到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;catapult-project&#x2F;catapult&#x2F;blob&#x2F;master&#x2F;tracing&#x2F;README.md&quot;&gt;catapult&lt;&#x2F;a&gt; 中, catapult 是 Chromium 工程师开发的一系列性能工具的合集，可以用来收集、展示、分析 Chrome、Website 甚至 Android 的性能。&lt;&#x2F;p&gt;
&lt;p&gt;catapult 源码里包含了很多 test case，git clone 下来后，运行 &lt;code&gt;$CATAPULT&#x2F;bin&#x2F;run_dev_server&lt;&#x2F;code&gt;. 然后在浏览器中打开 &lt;code&gt;http:&#x2F;&#x2F;localhost:8003&#x2F;tracing_examples&#x2F;trace_viewer.html&lt;&#x2F;code&gt; 能看到很多 Demo&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b45847555835cc49338b5d58c50fd5f656b4e681.jpg&quot;
        width=&quot;1377&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过 Google 目前正在开发另一套工具 &lt;a href=&quot;https:&#x2F;&#x2F;ui.perfetto.dev&#x2F;#!&#x2F;&quot;&gt;perfetto&lt;&#x2F;a&gt; 打算替换 Trace Viewer，我初步使用了下，感觉不如 Trace Viewer 简洁。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-kai-yuan-xiang-mu-zhong-de-shi-yong&quot;&gt;在开源项目中的使用&lt;&#x2F;h2&gt;
&lt;p&gt;Golang 用它来可视化展示执行过程 https:&#x2F;&#x2F;golang.org&#x2F;cmd&#x2F;trace&#x2F;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;go test -trace trace.out pkg
&lt;&#x2F;span&gt;&lt;span&gt;go tool trace trace.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;49df6cdfe957da75a44c5a074e02d5e7b80dedc1.jpg&quot;
        width=&quot;2098&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 的 Buck Build 系统，用它来展示 Build 时发生了什么&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;a3adb318505c4c13881b90eb2b031f8afb977da7.png&quot;
        width=&quot;900&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从这两个项目可以看出来 Trace Viewer 对于呈现「某段时间发生了什么」 还是有过人之处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trace-viewer-format&quot;&gt;Trace Viewer Format&lt;&#x2F;h2&gt;
&lt;p&gt;Trace Viewer 有一套自己的 &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU&#x2F;edit&quot;&gt;Trace Event Format&lt;&#x2F;a&gt;，只要文件遵循这个格式，就可以被展示。比如：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;23d3a314c8c47e6ea8bf35f46d0e58ea7c9a62be.png&quot;
        width=&quot;1630&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对应的 json 文件内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[ {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000}
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每一个 Event 主要由以下几部分组成：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;myName&amp;quot;, &#x2F;&#x2F; 事件名，会展示在 timeline 上
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;cat&amp;quot;: &amp;quot;category,list&amp;quot;, &#x2F;&#x2F; 事件分类，类似 Tag，但 UI 上不支持选择 Tag
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &#x2F;&#x2F; phase，后面着重会讲到
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ts&amp;quot;: 12345, &#x2F;&#x2F; 事件发生时的时间戳，以微秒表示
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;pid&amp;quot;: 123, &#x2F;&#x2F; 进程名
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;tid&amp;quot;: 456, &#x2F;&#x2F; 线程名
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;args&amp;quot;: { &#x2F;&#x2F; 额外参数，当选中某个 event 后，会在底部的面板展示
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;someArg&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;anotherArg&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;value&amp;quot;: &amp;quot;my value&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中最重要的是 &lt;code&gt;ph&lt;&#x2F;code&gt;，最常用的组合是 &lt;code&gt;B&lt;&#x2F;code&gt; 和 &lt;code&gt;E&lt;&#x2F;code&gt;，分别表示 &lt;code&gt;Begin&lt;&#x2F;code&gt; 和 &lt;code&gt;End&lt;&#x2F;code&gt;，有了这两个信息，Trace Viewer 就能在 timeline 上找到起止点，将它绘制出来。也可以简化为 &lt;code&gt;X&lt;&#x2F;code&gt;，然后加上 &lt;code&gt;dur&lt;&#x2F;code&gt; 表示 duration&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[ {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000, &amp;quot;dur&amp;quot;: 360000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 360000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000, &amp;quot;dur&amp;quot;: 180000000},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但颜色看起来有点随机，能不能自定义呢，可以的，这时就要用到 &lt;code&gt;cname&lt;&#x2F;code&gt; 这个参数：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt; {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将 &lt;code&gt;cname&lt;&#x2F;code&gt; 设置为 &lt;code&gt;good&lt;&#x2F;code&gt;，视觉上会看到绿色，在&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;catapult-project&#x2F;catapult&#x2F;blob&#x2F;master&#x2F;tracing&#x2F;tracing&#x2F;base&#x2F;color_scheme.html&quot;&gt;这里&lt;&#x2F;a&gt;有可选的 cname 列表（藏的真够深···）&lt;&#x2F;p&gt;
&lt;p&gt;左边的 &lt;code&gt;Process Main&lt;&#x2F;code&gt; 能不能也进行个性化定制以显得不那么突兀呢？比如将它改成「时间线」&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;2b199fda93a030e4ceaa09317e67bfd4407a08b1.png&quot;
        width=&quot;1478&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这就要使用 MetaData Phase 了&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;process_name&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;时间线&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它的表示方式是将 &lt;code&gt;ph&lt;&#x2F;code&gt; 设为 &lt;code&gt;M&lt;&#x2F;code&gt;，然后将 &lt;code&gt;name&lt;&#x2F;code&gt; 设为 &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU&#x2F;edit#heading=h.xqopa5m0e28f&quot;&gt;5 种可选值&lt;&#x2F;a&gt;中的一种，比如 &lt;code&gt;process_name&lt;&#x2F;code&gt; 则表示要对进程名做一些定制。metadata 主要是用来为某一类 event 提供更多的信息，比如自定义名字或重新设置排序优先级。&lt;&#x2F;p&gt;
&lt;p&gt;有一些事件，它不是执行耗时，但包含了其他事件，比如「我的一天」，它不是一个可被执行的事件，但将一天做的事情包含进来。这些被称为「异步事件」，表现上就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;b918640dca619c8e393599f7096a26043fd70f72.png&quot;
        width=&quot;1514&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;独占一栏，同时使用了斜体字，如果仔细看，还会发现顶部多了一条黑色的线。异步事件的 &lt;code&gt;ph&lt;&#x2F;code&gt; 为 &lt;code&gt;b&lt;&#x2F;code&gt; 和 &lt;code&gt;e&lt;&#x2F;code&gt; 也是 Begin 和 End，只不过变成了小写，同时还要提供 &lt;code&gt;id&lt;&#x2F;code&gt; 和 &lt;code&gt;cat&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;id 用来唯一标识两个异步事件是不是应该被作为同一个来看待（有可能多个异步事件名字都一样），cat 也是必选项，这个不太理解，可能等待的时间太孤独，需要一只猫来陪伴吧。&lt;&#x2F;p&gt;
&lt;p&gt;一件事可能会被拆分为更小的单元，然后执行过程中也会穿插着其他的事件，针对这样的场景，可以通过 &lt;code&gt;Flow Event&lt;&#x2F;code&gt; 来表示&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;7a54bb4d237b14089e5bc83a2f9329b686c941c8.jpg&quot;
        width=&quot;1434&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，在「出方案」和「写代码」之间多了一条线&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;,&amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;s&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;f&amp;quot;, &amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 3600000000},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Flow Event&lt;&#x2F;code&gt; ph 的开始和结束分别为 &lt;code&gt;s(start)&lt;&#x2F;code&gt; 和 &lt;code&gt;f(finish)&lt;&#x2F;code&gt;，跟 &lt;code&gt;Async Event&lt;&#x2F;code&gt; 有点像，但有几点不同：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;不需要带上 cat&lt;&#x2F;li&gt;
&lt;li&gt;同一个 Flow Event，除了 id 相同外，名字也必须相同&lt;&#x2F;li&gt;
&lt;li&gt;结束时用 &lt;code&gt;&amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;&lt;&#x2F;code&gt; 来表示&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Flow Event 需要依附在已有的 Event 上，依附的过程其实就是 ts 匹配，相同&#x2F;最近 ts 的 Event 会自动被匹配到。&lt;&#x2F;p&gt;
&lt;p&gt;出方案的过程中，可能会有纪念意义的事件需要记录下，比如想到了某个点子，这时可以用 &lt;code&gt;ph: &amp;quot;I&amp;quot;&lt;&#x2F;code&gt; 来表示（Instant）&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;想到一个点子&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;I&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 18800000000}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;9fafe4e26805bce1fde36f7970389735fa66ec5a.jpg&quot;
        width=&quot;1482&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中间那根红线就是我们刚加的事件，选中之后会在底部出现该事件的详细信息。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个上进的青年，一天下来之后，需要留一段时间反思今天做的好的和不好的，这可以通过 Snapshot 来体现，就像这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;chrome-trace-viewer&amp;#x2F;200ba2a883121853011e9e0c22757929ee257a84.png&quot;
        width=&quot;1272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;右上角那个圆点就是 Snapshot 在 Timeline 上的表现，点击之后可以在底部看到详细内容。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;name&amp;quot;: &amp;quot;反思&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;O&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;Ref&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;其他&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000, &amp;quot;args&amp;quot;: {&amp;quot;snapshot&amp;quot;: &amp;quot;充实的一天呢&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Snapshot 的 ph 为 &lt;code&gt;O&lt;&#x2F;code&gt; （字母 O），没有什么限制，详细的内容往 &lt;code&gt;args.snapshot&lt;&#x2F;code&gt; 里放就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;这些差不多就是常用的 ph 了，部分 ph 会有附带的规则，再简单总结下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;ph B&#x2F;E &#x2F;&#x2F; 正常的开始&#x2F;结束事件，最常见，也可以用 X + dur 来表示
&lt;&#x2F;span&gt;&lt;span&gt;ph M &#x2F;&#x2F; Metadata 用来对一类 Event 附加更详细的信息，可以带来 UI 上的变化
&lt;&#x2F;span&gt;&lt;span&gt;ph I &#x2F;&#x2F; 瞬时事件，类似 Mark 一下
&lt;&#x2F;span&gt;&lt;span&gt;ph s&#x2F;e &#x2F;&#x2F; 异步事件，表示自定义的一个事件，表现上跟正常事件会有区别
&lt;&#x2F;span&gt;&lt;span&gt;ph s&#x2F;f &#x2F;&#x2F; Flow 事件，会出现箭头，要通过 ts 匹配最近的 event，结束要使用 bp: e
&lt;&#x2F;span&gt;&lt;span&gt;ph O &#x2F;&#x2F; Snapshot，表现上是一个醒目的圆点，可以在 `args.snapshot` 里放任意数据
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下是 Demo 对应的 Event 内容，只要能生成这样的 JSON 文件，就可以使用 Trace Viewer 强大的可视化能力。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;我的一天1&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;cat&amp;quot;: &amp;quot;daily&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-day&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;出方案&amp;quot;, &amp;quot;cname&amp;quot;: &amp;quot;good&amp;quot;,&amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 0, &amp;quot;dur&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;想到一个点子&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;I&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 18800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;s&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;connect&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;f&amp;quot;, &amp;quot;bp&amp;quot;: &amp;quot;e&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;my-work&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;写代码&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000, &amp;quot;dur&amp;quot;: 3600000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;反思&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;O&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;Ref&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;其他&amp;quot;, &amp;quot;ts&amp;quot;: 37800000000, &amp;quot;args&amp;quot;: {&amp;quot;snapshot&amp;quot;: &amp;quot;充实的一天呢&amp;quot;}},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 28800000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;看电影&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;E&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 32400000000},
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;遛狗&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;X&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;休闲&amp;quot;, &amp;quot;ts&amp;quot;: 36000000000, &amp;quot;dur&amp;quot;: 1880000000},
&lt;&#x2F;span&gt;&lt;span&gt;  {&amp;quot;name&amp;quot;: &amp;quot;process_name&amp;quot;, &amp;quot;ph&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;pid&amp;quot;: &amp;quot;Main&amp;quot;, &amp;quot;tid&amp;quot;: &amp;quot;工作&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;时间线&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zai-xian-shi-yong-trace-viewer&quot;&gt;在线使用 Trace Viewer&lt;&#x2F;h2&gt;
&lt;p&gt;通过 &lt;code&gt;chrome:&#x2F;&#x2F;tracing&lt;&#x2F;code&gt; 的方式来使用 Tracer Viewer 还是不太方便，也不利于传播，Google 虽然在 catapult 里提供了 &lt;code&gt;trace2html&lt;&#x2F;code&gt;，但包含的文件很多，使用起来还是有点麻烦，于是参考了 &lt;code&gt;go trace&lt;&#x2F;code&gt; 的源码，把相关文件上传到了 CDN，然后在一个 html 文件里引用，这样只需一个文件即可。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!--
&lt;&#x2F;span&gt;&lt;span&gt;Copyright (c) 2014 The Chromium Authors. All rights reserved.
&lt;&#x2F;span&gt;&lt;span&gt;Use of this source code is governed by a BSD-style license that can be
&lt;&#x2F;span&gt;&lt;span&gt;found in the LICENSE file.
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text&#x2F;html; charset=UTF-8&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    body {
&lt;&#x2F;span&gt;&lt;span&gt;      font-family: arial, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script
&lt;&#x2F;span&gt;&lt;span&gt;    src=&amp;quot;https:&#x2F;&#x2F;sf1-ttcdn-tos.pstatp.com&#x2F;obj&#x2F;developer-baas&#x2F;baas&#x2F;ttnbrzs5vgcryya2z2&#x2F;7d1b75402231d1cd_1583755520315.js&amp;quot;&amp;gt;&amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;use strict&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    window.__hideTraceViewerPolyfillWarning = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    function onTraceViewerImportFail() {
&lt;&#x2F;span&gt;&lt;span&gt;      document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, function () {
&lt;&#x2F;span&gt;&lt;span&gt;        document.body.textContent =
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;#39;tracing&#x2F;bin&#x2F;trace_viewer_full.html is missing. &amp;#39; +
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;#39;Run vulcanize_trace_viewer from $TRACE_VIEWER and reload.&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;link rel=&amp;quot;import&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    href=&amp;quot;https:&#x2F;&#x2F;sf1-ttcdn-tos.pstatp.com&#x2F;obj&#x2F;developer-baas&#x2F;baas&#x2F;ttnbrzs5vgcryya2z2&#x2F;4b94a178762f4049_1583756222365.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    onerror=&amp;quot;onTraceViewerImportFail(event)&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    html,
&lt;&#x2F;span&gt;&lt;span&gt;    body {
&lt;&#x2F;span&gt;&lt;span&gt;      box-sizing: border-box;
&lt;&#x2F;span&gt;&lt;span&gt;      overflow: hidden;
&lt;&#x2F;span&gt;&lt;span&gt;      margin: 0px;
&lt;&#x2F;span&gt;&lt;span&gt;      padding: 0;
&lt;&#x2F;span&gt;&lt;span&gt;      width: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;      height: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #trace-viewer {
&lt;&#x2F;span&gt;&lt;span&gt;      width: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;      height: 100%;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #trace-viewer:focus {
&lt;&#x2F;span&gt;&lt;span&gt;      outline: none;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;style&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;use strict&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (function () {
&lt;&#x2F;span&gt;&lt;span&gt;      var viewer;
&lt;&#x2F;span&gt;&lt;span&gt;      var url;
&lt;&#x2F;span&gt;&lt;span&gt;      var model;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function load() {
&lt;&#x2F;span&gt;&lt;span&gt;        var req = new XMLHttpRequest();
&lt;&#x2F;span&gt;&lt;span&gt;        var isBinary = &#x2F;[.]gz$&#x2F;.test(url) || &#x2F;[.]zip$&#x2F;.test(url);
&lt;&#x2F;span&gt;&lt;span&gt;        req.overrideMimeType(&amp;#39;text&#x2F;plain; charset=x-user-defined&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        req.overrideMimeType(&amp;#39;contentType: &amp;quot;application&#x2F;x-www-form-urlencoded;charset=utf-8&amp;quot;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        console.log(url);
&lt;&#x2F;span&gt;&lt;span&gt;        req.open(&amp;#39;GET&amp;#39;, url, true);
&lt;&#x2F;span&gt;&lt;span&gt;        if (isBinary)
&lt;&#x2F;span&gt;&lt;span&gt;          req.responseType = &amp;#39;arraybuffer&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        req.onreadystatechange = function (event) {
&lt;&#x2F;span&gt;&lt;span&gt;          if (req.readyState !== 4)
&lt;&#x2F;span&gt;&lt;span&gt;            return;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          window.setTimeout(function () {
&lt;&#x2F;span&gt;&lt;span&gt;            if (req.status === 200)
&lt;&#x2F;span&gt;&lt;span&gt;              onResult(isBinary ? req.response : req.responseText);
&lt;&#x2F;span&gt;&lt;span&gt;            else
&lt;&#x2F;span&gt;&lt;span&gt;              onResultFail(req.status);
&lt;&#x2F;span&gt;&lt;span&gt;          }, 0);
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        req.send(null);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onResultFail(err) {
&lt;&#x2F;span&gt;&lt;span&gt;        var overlay = new tr.ui.b.Overlay();
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.textContent = err + &amp;#39;: &amp;#39; + url + &amp;#39; could not be loaded&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.title = &amp;#39;Failed to fetch data&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.visible = true;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onResult(result) {
&lt;&#x2F;span&gt;&lt;span&gt;        model = new tr.Model();
&lt;&#x2F;span&gt;&lt;span&gt;        var i = new tr.importer.Import(model);
&lt;&#x2F;span&gt;&lt;span&gt;        var p = i.importTracesWithProgressDialog([result]);
&lt;&#x2F;span&gt;&lt;span&gt;        p.then(onModelLoaded, onImportFail);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onModelLoaded() {
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.model = model;
&lt;&#x2F;span&gt;&lt;span&gt;        var urlParams = new URLSearchParams(window.location.search);
&lt;&#x2F;span&gt;&lt;span&gt;        var title = urlParams.get(&amp;quot;title&amp;quot;) || &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        document.getElementById(&amp;#39;title&amp;#39;).innerHTML = title;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      function onImportFail(err) {
&lt;&#x2F;span&gt;&lt;span&gt;        var overlay = new tr.ui.b.Overlay();
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.textContent = tr.b.normalizeException(err).message;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.title = &amp;#39;Import error&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        overlay.visible = true;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      document.addEventListener(&amp;#39;WebComponentsReady&amp;#39;, function () {
&lt;&#x2F;span&gt;&lt;span&gt;        var container = document.createElement(&amp;#39;track-view-container&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        container.id = &amp;#39;track_view_container&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer = document.createElement(&amp;#39;tr-ui-timeline-view&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.track_view_container = container;
&lt;&#x2F;span&gt;&lt;span&gt;        Polymer.dom(viewer).appendChild(container);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.id = &amp;#39;trace-viewer&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        viewer.globalMode = true;
&lt;&#x2F;span&gt;&lt;span&gt;        Polymer.dom(document.body).appendChild(viewer);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        var urlParams = new URLSearchParams(window.location.search);
&lt;&#x2F;span&gt;&lt;span&gt;        url = urlParams.get(&amp;quot;tracing_url&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        load();
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    }());
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用方式：&lt;code&gt;http:&#x2F;&#x2F;path&#x2F;to&#x2F;this.html?tracing_url=path&#x2F;to&#x2F;tracing.json&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cai-guo-de-keng&quot;&gt;踩过的坑&lt;&#x2F;h2&gt;
&lt;p&gt;JSON 文件里，如果出现 &lt;code&gt;AStart-BStart-AEnd-BEnd&lt;&#x2F;code&gt; 这样的交叉式多行数据，有可能会导致解析失败。解决方法就是拆解为正常的顺序 &lt;code&gt;AStart-AEnd-BStart-BEnd&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;还有，如果发现某个 Event 的 Start 和 End 明明在那里，但却还是报找不到 End 的话，通常是这个 End 被其他 Start 匹配了（即使名字不一样），所以 root cause 很可能是因为那个 solo Start。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;Trace Viewer 是一款强大的可视化利器，虽然通常被拿来做性能分析，但它的使用场景其实很广，至于能做出什么来，就看你的想象力咯。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>架构师思维</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/architect-mindset/</link>
            <guid>https://limboy.me/posts/architect-mindset/</guid>
            <description>&lt;p&gt;「架构师」是一个挺高端的 Title，印象中应该是那些技术特别出众的人。真正的架构师应该是怎样的我也不知道，不同公司对他的能力要求也不会一样，很多公司都不一定有架构师这个职位，但这并不影响拥有「架构师思维」。&lt;&#x2F;p&gt;
&lt;p&gt;什么是架构师思维？就是除了完成开发任务外，还操心着其他事情，而这些事情都围绕一个目标：打造高效的具有持续交付能力的团队。带着这个思维就会发现天花板变高了，自己的提升空间也更大了(当然前提是先把自己手头的活干好···)。&lt;&#x2F;p&gt;
&lt;p&gt;这跟管理者的职能是不是有点重合？是有点，但我觉得管理者应该把重心放到替团队排除障碍，关心团队成员的工作状态上。当然这两个角色也完全可以由一个人承担，也就是技术管理者。&lt;&#x2F;p&gt;
&lt;p&gt;因此除了专业技能过硬之外，还有很多需要考虑的点。我觉得从开发者和开发这两个方向切入会比较合适，开发占大部分。下图是我的总结，欢迎探讨 :)&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;architect-mindset&amp;#x2F;architect-mindset.png&quot;
        width=&quot;2087&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>关于 Flutter Layout 你应该知道的</title>
            <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/flutter-layout/</link>
            <guid>https://limboy.me/posts/flutter-layout/</guid>
            <description>&lt;p&gt;这篇文章首发于 &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@limboy&#x2F;flutter-layout-in-a-nutshell-f2ed3cb66d72&quot;&gt;Medium&lt;&#x2F;a&gt;，略显生硬的英文看来并不太妨碍理解。&lt;&#x2F;p&gt;
&lt;p&gt;与 Flutter 的布局系统搏斗一段时间之后，感觉终于找到了点门道，于是花了点时间整理了下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;he-xin-gai-nian&quot;&gt;核心概念&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;unbounded-constraints&quot;&gt;Unbounded Constraints&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;either the maximum width or the maximum height is set to double.INFINITY&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-scrollview.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ScrollView&lt;&#x2F;code&gt; 和它的子类比如 &lt;code&gt;ListView&lt;&#x2F;code&gt; 或 &lt;code&gt;GridView&lt;&#x2F;code&gt; 是常见的 Unbounded Constraints. 也就是在某一个方向没有限制大小。其他的 widget 只要能够设置 &lt;code&gt;width&lt;&#x2F;code&gt; 或 &lt;code&gt;height&lt;&#x2F;code&gt; 为 &lt;code&gt;double.INFINITY&lt;&#x2F;code&gt; 的也算。有时也会用 &lt;strong&gt;as big as possible&lt;&#x2F;strong&gt; 来描述这些 widgets。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;flex&quot;&gt;Flex&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;when in bounded constraints, try to be as big as possible in that direction.&lt;&#x2F;p&gt;
&lt;p&gt;when in unbounded constraints, try to fit their children in that direction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当在有限的空间内，会撑满整个空间；如果在一个 unbounded constraints 容器里，就匹配子 widget 的大小。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-row-column.png&quot;
        width=&quot;374&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最常见的是 &lt;code&gt;Row&lt;&#x2F;code&gt; 和 &lt;code&gt;Column&lt;&#x2F;code&gt;，如果不嫌麻烦的话，也可以使用 &lt;code&gt;Flex&lt;&#x2F;code&gt; widget。里面可以放 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widget，也可以不是。如果有 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widgets 会把剩余空间计算出来分配给这些 widgets。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;flexible&quot;&gt;Flexible&lt;&#x2F;h4&gt;
&lt;p&gt;跟 &lt;code&gt;Flex&lt;&#x2F;code&gt; 搭配使用，&lt;code&gt;Flexible&lt;&#x2F;code&gt; 可以用来声明使用百分之多少的空间。比如 &lt;code&gt;flex = 1&lt;&#x2F;code&gt; 也就是 &lt;code&gt;1&#x2F;all&lt;&#x2F;code&gt;，如果有两个 widgets，另一个也是 1，那么 &lt;code&gt;all = 2&lt;&#x2F;code&gt;，每个 widget 分配到 50% 的空间。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-expanded.png&quot;
        width=&quot;374&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Expanded&lt;&#x2F;code&gt; 是最常见的 &lt;code&gt;Flexible&lt;&#x2F;code&gt; widget，它会填满主方向上可用的空间（比如 Row 的水平空间或 Column 的垂直空间）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-yao-widgets&quot;&gt;主要 Widgets&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;container&quot;&gt;Container&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers with no children try to be as big as possible unless the incoming constraints are unbounded, in which case they try to be as small as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Containers with children size themselves to their children.&lt;&#x2F;p&gt;
&lt;p&gt;The width, height, and constraints arguments to the constructor override this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这是 Container 的三个主要表现：当没有子 widgets 且没有指定 constraints 时，尽可能地充满可用空间，如果有 constraints 就以 constraints 为准（除非跟 parent constraints 冲突）；如果有子 widgets 则以 children 的 size 为准；可以设置 &lt;code&gt;width&lt;&#x2F;code&gt;, &lt;code&gt;height&lt;&#x2F;code&gt;， &lt;code&gt;constraints&lt;&#x2F;code&gt; 来约束 size。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是一个没有孩子的 container，因此它会表现地尽量大，就像这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果设置了 &lt;code&gt;width&lt;&#x2F;code&gt; 或 &lt;code&gt;height&lt;&#x2F;code&gt;，则会根据设置的值来表现：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;      width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container-width.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果有 child，则会以 child 的 size 为准：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow,
&lt;&#x2F;span&gt;&lt;span&gt;      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-container-child.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，还可以设置 padding, margin, child 的对齐方式，等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;stack&quot;&gt;Stack&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Stack&lt;&#x2F;code&gt; 有点像 css 的绝对布局，可以在上面盖一些 widgets，比如 profile 页的背景图上放一些个人信息。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each child of a Stack widget is either positioned or non-positioned.&lt;&#x2F;p&gt;
&lt;p&gt;Positioned children are those wrapped in a Positioned widget that has at least one non-null property.&lt;&#x2F;p&gt;
&lt;p&gt;The stack sizes itself to contain all the non-positioned children, which are positioned according to alignment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Stack 的 children 如果没有用 &lt;code&gt;Positioned&lt;&#x2F;code&gt; 修饰的话，就会用 Stack 的 &lt;code&gt;fit&lt;&#x2F;code&gt; 和 &lt;code&gt;alighment&lt;&#x2F;code&gt; 来帮它们找到合适的位置。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  fit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StackFit&lt;&#x2F;span&gt;&lt;span&gt;.loose,
&lt;&#x2F;span&gt;&lt;span&gt;  alignment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Alignment&lt;&#x2F;span&gt;&lt;span&gt;.center,
&lt;&#x2F;span&gt;&lt;span&gt;  children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Positioned&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;     bottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;   )
&lt;&#x2F;span&gt;&lt;span&gt; ],
&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-stack-1.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;StackFit.loose&lt;&#x2F;code&gt; 的意思是，如果 child size 不比 Stack 的大，就用 child 的 size。而如果设置为 &lt;code&gt;StackFit.expand&lt;&#x2F;code&gt; 则会让所有非 &lt;code&gt;Positioned&lt;&#x2F;code&gt; 的 widgets 使用 Stack 的 size。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;flutter-stack-2.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Text(&#x27;world&#x27;)&lt;&#x2F;code&gt; 现在就跟 Stack 一样大了，所以看起来像是 &lt;code&gt;alignment.center&lt;&#x2F;code&gt; 没有生效。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;row-and-column&quot;&gt;Row and Column&lt;&#x2F;h4&gt;
&lt;p&gt;它们都是 Flex widgets，Row 可以将 children 横着放，column 可以将 children 竖着放。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;crossAxisAlignment&lt;&#x2F;code&gt; 表示要如何对齐另一侧，比如横着一排的 widgets，垂直方向上它们应该顶部对齐还是居中对齐呢。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mainAxisSize&lt;&#x2F;code&gt; 默认是 &lt;code&gt;MainAxisSize.max&lt;&#x2F;code&gt;，如果想让它变成 Row 或 Column 的真实高度，可以将它设置为 &lt;code&gt;MainAxisSize.min&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sizedbox&quot;&gt;SizedBox&lt;&#x2F;h4&gt;
&lt;p&gt;使用它可以得到一个确定尺寸的 widget。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;safearea&quot;&gt;SafeArea&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;SafeArea&lt;&#x2F;code&gt; 可以让 child widget 在顶部和底部腾出足够的空间方便处理 iPhoneX 这类的手机。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ze&quot;&gt;原则&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bu-yao-zai-flex-widget-li-fang-zhi-unbounded-constraints&quot;&gt;不要在 Flex widget 里放置 unbounded constraints&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Column&lt;&#x2F;code&gt; 是 Flex widget，所以在里面放 &lt;code&gt;ListView&lt;&#x2F;code&gt; 的话，系统不会答应的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ListView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        itemBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, index){
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        itemCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统会给出这样的 error&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;flutter: The following assertion was thrown during performResize():
&lt;&#x2F;span&gt;&lt;span&gt;flutter: Vertical viewport was given unbounded height.
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 Column 作为 Flex 它不知道应该如何安放一个 &lt;strong&gt;as big as possible&lt;&#x2F;strong&gt; 的 widget。解决方法也很简单，只要设置 ListView 的 &lt;code&gt;shrinkWrap=true&lt;&#x2F;code&gt; 即可。这就是告诉 ListView 把自己尽可能地缩小。&lt;&#x2F;p&gt;
&lt;p&gt;可以在 &lt;code&gt;Column&lt;&#x2F;code&gt; 或 &lt;code&gt;Row&lt;&#x2F;code&gt; 里使用 &lt;code&gt;Expanded&lt;&#x2F;code&gt;，因为它是 &lt;code&gt;Flexible&lt;&#x2F;code&gt;，就应该待在 Flex 里面。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-yao-zai-unbounded-widgets-li-she-zhi-flex-wei-bu-deng-yu-0-de-shu-zhi&quot;&gt;不要在 unbounded widgets 里设置 flex 为不等于 0 的数值&lt;&#x2F;h4&gt;
&lt;p&gt;因为空间无限，如果两个 &lt;code&gt;Flexible&lt;&#x2F;code&gt; 分别为 1 和 2，那么 &lt;code&gt;Flex&lt;&#x2F;code&gt; 根本不知道该如何将空间划分成 1:2。如果真这么做的话，会收到这样的 error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;RenderFlex children have non-zero flex but incoming height constraints are unbounded.
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-ce-yan&quot;&gt;小测验&lt;&#x2F;h3&gt;
&lt;p&gt;下面这段代码会让 &lt;code&gt;Hello World&lt;&#x2F;code&gt; 被包裹在中间的小方块里吗？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    alignment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Alignment&lt;&#x2F;span&gt;&lt;span&gt;.center,
&lt;&#x2F;span&gt;&lt;span&gt;    constraints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tight&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxDecoration&lt;&#x2F;span&gt;&lt;span&gt;(color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Colors&lt;&#x2F;span&gt;&lt;span&gt;.yellow),
&lt;&#x2F;span&gt;&lt;span&gt;    child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-squrebox.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;答案是，不会，它会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-layout&amp;#x2F;Flutter-squarebox-real.png&quot;
        width=&quot;146&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不是设置了 constraints 系统就要按着这个 constraints 来，在经过计算之后，系统会发现这个 constraints 无法满足需求，而被舍弃，具体过程如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Container&lt;&#x2F;code&gt; 的 &lt;code&gt;build&lt;&#x2F;code&gt; 方法里，发现有设置过 constraints，最终会返回一个 &lt;code&gt;BoxConstraints&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  minWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; minWidth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minWidth, constraints.maxWidth),
&lt;&#x2F;span&gt;&lt;span&gt;  maxWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; maxWidth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minWidth, constraints.maxWidth),
&lt;&#x2F;span&gt;&lt;span&gt;  minHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; minHeight.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minHeight, constraints.maxHeight),
&lt;&#x2F;span&gt;&lt;span&gt;  maxHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; maxHeight.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clamp&lt;&#x2F;span&gt;&lt;span&gt;(constraints.minHeight, constraints.maxHeight)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 &lt;code&gt;clamp&lt;&#x2F;code&gt; 方法指的是当 minWidth 值比左边的值小时，取左边值，比右边的值大时，取右边值。因为 parent 的 constraints 也就是 screen size 是固定的，因此，&lt;code&gt;minWidth&lt;&#x2F;code&gt; 在跟它们比较之后，还是使用了它们的值。&lt;&#x2F;p&gt;
&lt;p&gt;正确的做法是在外面套一层 &lt;code&gt;Center&lt;&#x2F;code&gt; 或 &lt;code&gt;Align&lt;&#x2F;code&gt; widget。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-de-dao-fu-widget-de-constraints&quot;&gt;如何得到父 widget 的 constraints？&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt;。有时会需要这些信息来做一些显示上的调整。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; borrowed from https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;41558369&#x2F;94962
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Toggling width from 100 to 300 will change what is rendered
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; in the child container
&lt;&#x2F;span&gt;&lt;span&gt;  width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; width: 300.0
&lt;&#x2F;span&gt;&lt;span&gt;  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LayoutBuilder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxConstraints&lt;&#x2F;span&gt;&lt;span&gt; constraints) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(constraints.maxWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;200.0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;BIG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SMALL&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ru-he-huo-qu-ping-mu-chi-cun&quot;&gt;如何获取屏幕尺寸&lt;&#x2F;h4&gt;
&lt;p&gt;使用 &lt;code&gt;MediaQuery&lt;&#x2F;code&gt;，除了 &lt;code&gt;size&lt;&#x2F;code&gt; 外，还能拿到 &lt;code&gt;devicePixelRatio&lt;&#x2F;code&gt; 之类的 device 信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;差不多就这些了，对于理解 Flutter 的布局应该够用了，希望能带来些帮助，如果有什么错误欢迎指出 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Architecture Flutter App the Bloc_Redux Way</title>
            <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/bloc-redux/</link>
            <guid>https://limboy.me/posts/bloc-redux/</guid>
            <description>&lt;p&gt;这是&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;bloc_redux&quot;&gt;项目地址&lt;&#x2F;a&gt;，下面来阐述下产生背景和它的一些特点。&lt;&#x2F;p&gt;
&lt;p&gt;接触 Flutter 也有一段时间了，在如何管理状态和处理数据流这块，并没有一个可以直接拿来用的现成方案。好吧，其实有，一个是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brianegan&#x2F;flutter_redux&quot;&gt;flutter_redux&lt;&#x2F;a&gt;，一个是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;felangel&#x2F;bloc&quot;&gt;flutter_bloc&lt;&#x2F;a&gt;。先来说说 flutter_redux，这个可以算是 redux 在 flutter 的官方实现了，主要由两部分组成: &lt;code&gt;StoreProvider&lt;&#x2F;code&gt; 和 &lt;code&gt;StoreConnector&lt;&#x2F;code&gt;，前者用来保存 store，后者用来响应新的 state，看一个代码片段：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Every time the button is tapped, an action is dispatched and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; run through the reducer. After the reducer updates the state,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the Widget will be automatically rebuilt with the latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; count. No need to manually manage subscriptions or Streams!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StoreConnector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  converter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (store) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; store.state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, count) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      count,
&lt;&#x2F;span&gt;&lt;span&gt;      style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Theme&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(context).textTheme.display1,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码的问题在于只要 reducer 有更新 state，那么所有消费该 Store 的 Connector 就会被 rebuild，哪怕这个 state 有 10 个属性，而 reducer 只是改了其中的一个 bool 值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Creates the base [NextDispatcher].
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; The base NextDispatcher will be called after all other middleware provided
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; by the user have been run. Its job is simple: Run the current state through
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the reducer, save the result, and notify any subscribers.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NextDispatcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_createReduceAndNotify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; distinct) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;dynamic&lt;&#x2F;span&gt;&lt;span&gt; action) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;reducer&lt;&#x2F;span&gt;&lt;span&gt;(_state, action);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (distinct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _state) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;    _changeController.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(state);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是 redux 这个 library 里的 Notify 机制，采用的是 &lt;code&gt;==&lt;&#x2F;code&gt; 判断，这就是问题。在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&quot;&gt;react-redux&lt;&#x2F;a&gt; 中，这块是有优化的，通过 &lt;code&gt;connect&lt;&#x2F;code&gt; 的 &lt;code&gt;mapStateToProps&lt;&#x2F;code&gt;，可以让 Component 指定关心 State 的哪些属性，然后在 react-redux 内部会对 &lt;code&gt;mapStateToProps&lt;&#x2F;code&gt; 的返回值和上次保存的进行比较，如果不一样再 rebuild，这样的好处是只有当 Component 关心的哪些属性真的变化时才进行 render。而 flutter_redux 无法做到这点(可能跟 flutter 不让用反射有关)，效率上就会打折扣。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;felangel&#x2F;bloc&quot;&gt;flutter_bloc&lt;&#x2F;a&gt;，这也是关注度蛮高的一个项目，说这个之前先说说 bloc，这是 flutter 提的一个概念，运行机制大致如下：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;bloc-redux&amp;#x2F;movie250-bloc.png&quot;
        width=&quot;561&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;它更像一个提案，缺少标准和实现。flutter_bloc 就是对这个提案的一个实现。这个实现本质上没觉得跟 flutter_redux 有太大的区别，而复杂度倒是增加了不少，还提出了一些新的概念(比如 BlocSupervisor, BlocDelegate, Transation)，增加了理解上的困难。在处理核心的 state 问题上依旧跟 flutter_redux 一样，甚至都没有做 &lt;code&gt;==&lt;&#x2F;code&gt; check。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_bindStateSubject&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt; currentEvent;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;(_eventSubject) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;concatMap&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt; event) {
&lt;&#x2F;span&gt;&lt;span&gt;    currentEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; event;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mapEventToState&lt;&#x2F;span&gt;&lt;span&gt;(_stateSubject.value, event);
&lt;&#x2F;span&gt;&lt;span&gt;  }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt; nextState) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; transition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Transition&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        currentState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; _stateSubject.value,
&lt;&#x2F;span&gt;&lt;span&gt;        event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; currentEvent,
&lt;&#x2F;span&gt;&lt;span&gt;        nextState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; nextState,
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocSupervisor&lt;&#x2F;span&gt;&lt;span&gt;().delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onTransition&lt;&#x2F;span&gt;&lt;span&gt;(transition);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onTransition&lt;&#x2F;span&gt;&lt;span&gt;(transition);
&lt;&#x2F;span&gt;&lt;span&gt;      _stateSubject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(nextState);
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在往 &lt;code&gt;_stateSubject&lt;&#x2F;code&gt; 里塞 nextState 时甚至都没有跟之前的 state 进行判断。同时从作者的意图上是希望多个 bloc 一起使用的，这也会造成使用上的不便（比如我这个 Event 到底应该 dispatch 给哪个 bloc？）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginEvent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; widget.loginBloc,
&lt;&#x2F;span&gt;&lt;span&gt;  builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoginState&lt;&#x2F;span&gt;&lt;span&gt; loginState,
&lt;&#x2F;span&gt;&lt;span&gt;  ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_loginSucceeded&lt;&#x2F;span&gt;&lt;span&gt;(loginState)) {
&lt;&#x2F;span&gt;&lt;span&gt;      widget.authBloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span&gt;(token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; loginState.token));
&lt;&#x2F;span&gt;&lt;span&gt;      widget.loginBloc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;LoggedIn&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;综上，这两格 Library 都无法满足我，只能再造一个轮子了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bloc-redux&quot;&gt;Bloc_Redux&lt;&#x2F;h2&gt;
&lt;p&gt;其实只要让 flutter_redux 能够更高效地把状态变化传递给 widgets，问题就解决了。那如何做呢？返回一个新的 state，也就是 reducer 之路，应该是行不通了，因为无法高效地找到变化过的属性，即使可以，还要维护一个属性跟 widgets 的 map，太复杂了。换一个想法，Flutter 不是提供了 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt; 么，那让 Widget 自己选择 listen 哪些 stream，然后当一个 action dispatch 过来后，这些 stream 获得相应的改变不就行了么？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;limboy&#x2F;bloc_redux&#x2F;master&#x2F;lib&#x2F;bloc_redux&#x2F;bloc_redux.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中处理 action 的 reducer 被替换成了 bloc，来看一下核心代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; every action should extends this class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; payload;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Input are used to change state.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; usually filled with StreamController &#x2F; BehaviorSubject.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; handled by blocs.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; implements disposable because stream controllers needs to be disposed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; they will be called within store&amp;#39;s dispose method.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Disposable&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Output are streams.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; followed by input. like someController.stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; UI will use it as data source.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Combine these two into one.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt; output;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Bloc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; like reducers in redux, but don&amp;#39;t return a new state.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; when they found something needs to change, just update state&amp;#39;s input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; then state&amp;#39;s output will change accordingly.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span&gt; action, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; input);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Store
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; widget use `store.dispatch` to send action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; store will iterate all blocs to handle this action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; if this is an async action, blocs can dispatch another action
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; after data has received from remote.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Disposable&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; blocs;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span&gt; action) {
&lt;&#x2F;span&gt;&lt;span&gt;    blocs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;((f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(action, state.input));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 State 被分成了 StateInput 和 StateOutput，其中 Input 部分给 Bloc，方便更新 Stream；Output 部分给 Widgets，方便接收最新数据。同时 Store 也有一个 dispose 方法，因为到时 store 会被放到 StoreProvider 里，当它被 dispose 时，可以让 store 也 dispose，让那些 stream 可以被 close。&lt;&#x2F;p&gt;
&lt;p&gt;就这么简单，我们来看一个 demo：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Actions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRAction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateInput&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; selectedColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStateOutput&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; selectedColor;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colors;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt; input) {
&lt;&#x2F;span&gt;&lt;span&gt;    selectedColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        input.selectedColor.stream, input.selectedColor.value);
&lt;&#x2F;span&gt;&lt;span&gt;    colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamWithInitialData&lt;&#x2F;span&gt;&lt;span&gt;(input.colors.stream, input.colors.value);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateOutput&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Blocs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colorSelectHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (action, input) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    input.selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(action.payload);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.colors.value
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((colorModel) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; colorModel
&lt;&#x2F;span&gt;&lt;span&gt;          ..isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; action.payload.value)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    input.colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(colors);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Store
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BRStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStateInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    blocs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [colorSelectHandler];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; init
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RandomColor&lt;&#x2F;span&gt;&lt;span&gt;(index).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;randomColor&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    _colors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(_colors);
&lt;&#x2F;span&gt;&lt;span&gt;    state.input.selectedColor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(_colors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].color);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Store 就像人的大脑，负责接收信息做出决策，而信息的处理者就是一个个的 Bloc。再来看看 Widget 是如何接收数据，发送 action 的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorsWidget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatelessWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; store &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StoreProvider&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; store.state.output.colors;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.stream,
&lt;&#x2F;span&gt;&lt;span&gt;      initialData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.initialData,
&lt;&#x2F;span&gt;&lt;span&gt;      builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, snapshot) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; snapshot.data;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGrid&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            crossAxisCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((colorModel) {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GestureDetector&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                onTap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; () {
&lt;&#x2F;span&gt;&lt;span&gt;                  store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dispatch&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ColorActionSelect&lt;&#x2F;span&gt;&lt;span&gt;()..payload &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color);
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                  decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BoxDecoration&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colorModel.color,
&lt;&#x2F;span&gt;&lt;span&gt;                      border&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Border&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; colorModel.isSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;              );
&lt;&#x2F;span&gt;&lt;span&gt;            }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt; 来消费 state output，通过 &lt;code&gt;store.dispatch&lt;&#x2F;code&gt; 来发送 action，It&#x27;s that simple.&lt;&#x2F;p&gt;
&lt;p&gt;最后，附上项目地址：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bloc_redux&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bloc_redux&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一个 Demo 入门 Flutter</title>
            <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/flutter-demo/</link>
            <guid>https://limboy.me/posts/flutter-demo/</guid>
            <description>&lt;p&gt;Flutter 是 Google 研发的一套移动端开发框架，也是 Google 正在研发的下一代操作系统 Fuchsia 的 App 开发框架（Web 和 Desktop 也都在进行积极的尝试），前几天刚发布了 1.0 正式版。关于 Flutter 的原理和介绍可以参考美团的&lt;a href=&quot;https:&#x2F;&#x2F;tech.meituan.com&#x2F;waimai_flutter_practice.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;本文希望通过一个 Demo 来更深入地了解 Flutter 的布局、状态管理等细节。这个 Demo 可以获取豆瓣的 Top 250 电影，以自定义列表形式呈现，可以收藏&#x2F;取消收藏，可以点击查看详情页。&lt;&#x2F;p&gt;
&lt;p&gt;源码: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;flutter-demo-topmovies&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;flutter-demo-topmovies&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;video.twimg.com&#x2F;ext_tw_video&#x2F;1070286725656662017&#x2F;pu&#x2F;vid&#x2F;360x640&#x2F;uoeUgoq2-EigTzi7.mp4?tag=6&quot;&gt;这里&lt;&#x2F;a&gt;可以查看最终的效果。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-demo.png&quot;
        width=&quot;964&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;mu-lu-hua-fen&quot;&gt;目录划分&lt;&#x2F;h3&gt;
&lt;p&gt;接到这个需求后首先要考虑的是目录结构应该怎么划分，这也是架构的一部分，我是这么分的:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;blocs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;widgets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;models&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;pages&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;routes&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;services&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;main.dart
&lt;&#x2F;span&gt;&lt;span&gt;env.dart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;bloc&quot;&gt;BLoC&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;BLoC&lt;&#x2F;code&gt; 是 Business Logic of Components 的缩写，也就是负责所有业务逻辑的，跟 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的职能挺像的。是一个纯洁的 Dart 类，跟 UI 完全解耦，更加详细的说明可以参见&lt;a href=&quot;https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5bb6f344f265da0aa664d68a&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;widgets&quot;&gt;Widgets&lt;&#x2F;h4&gt;
&lt;p&gt;这个目录下面放的是所有的 Widget，Widget 位于 Flutter Framework 的最上层，用来描述 UI 元素的 Layout &#x2F; Animation 等，或者非 UI 元素(如 DataProvider)，最终这些 Widget 会被组装起来形成 Page。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;models&quot;&gt;Models&lt;&#x2F;h4&gt;
&lt;p&gt;服务端的 JSON 过来后，需要转换成对应的 Model 方便使用，Model 不需要包含业务逻辑，但可以有一些简单的 Model 相关的操作，比如 CRUD。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pages&quot;&gt;Pages&lt;&#x2F;h4&gt;
&lt;p&gt;通常一个 App 会有多个页面组成，这些页面就可以放到这个目录下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;routes&quot;&gt;Routes&lt;&#x2F;h4&gt;
&lt;p&gt;虽然 Flutter 也支持直接 push 一个 Widget，但这样不方便页面管理，对于像「外部的 URL 可以直接跳转到某个页面」这样的功能处理起来也会麻烦些。因此，需要有一个地方可以对 URL 进行注册。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;services&quot;&gt;Services&lt;&#x2F;h4&gt;
&lt;p&gt;这个是放 Remote API 相关的，理论上来说，加一层 Repository 抽象会更加合适，出于方便，就去掉了这一层。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;main-dart&quot;&gt;main.dart&lt;&#x2F;h4&gt;
&lt;p&gt;入口文件，用来初始化 App&lt;&#x2F;p&gt;
&lt;h4 id=&quot;env-dart&quot;&gt;env.dart&lt;&#x2F;h4&gt;
&lt;p&gt;用来设置一些环境变量，类似于 Config。&lt;&#x2F;p&gt;
&lt;p&gt;设置好了目录后，接下来进行任务分解，首先要完成的就是布局，进行布局之前需要有数据源，方便模拟，最好跟正式接口一致，那就先来完成这一项工作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-shu-ju-jie-kou&quot;&gt;设置数据接口&lt;&#x2F;h3&gt;
&lt;p&gt;我们希望从模拟环境到真实环境只需改一个配置即可，为了达到这个目的，我们先把协议定好，到时只要换一个实现就行。这里会用到两个接口&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;package:topmovies&#x2F;models&#x2F;movie.dart&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后新建一个 Mock API 类来实现这个接口&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MockAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createMockMovieWithTitle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;我是电影 $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;movieID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 现在还用不着
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在 &lt;code&gt;env.dart&lt;&#x2F;code&gt; 里新建一个 Env 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;services&#x2F;api.dart&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; apiClient;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其实就是提供一个全局的 apiClient 注入接口，App 初始化时，设置好 apiClient，使用时不需要关心是哪个 apiClient 实例，这样也方便单元测试。&lt;&#x2F;p&gt;
&lt;p&gt;经过这两步后，数据接口就准备好了，接下来需要设置 BLoC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-shou-ye-de-bloc&quot;&gt;设置首页的 BLoC&lt;&#x2F;h3&gt;
&lt;p&gt;BLoC 其实就是 ViewModel，有了 API 实现之后，接下来就要让 Widget 可以用上这些数据，这就是 BLoC 做的事。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-bloc.png&quot;
        width=&quot;561&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Widget 告诉 BLoC 发生了什么，BLoC 告诉 Widget 哪些数据更新了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBase&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; _movieEnvelope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BehaviorSubject&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _currentStart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;movieEnvelope&lt;&#x2F;span&gt;&lt;span&gt; =&amp;gt; _movieEnvelope.stream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getMovies&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getMovies&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;.apiClient.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(_currentStart).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((movieEnvelope) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; newMovieEnvelope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; movieEnvelope;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_movieEnvelope.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        newMovieEnvelope.movies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _movieEnvelope.value.movies
&lt;&#x2F;span&gt;&lt;span&gt;          ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span&gt;(movieEnvelope.movies);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      _movieEnvelope.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(newMovieEnvelope);
&lt;&#x2F;span&gt;&lt;span&gt;      _currentStart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; movieEnvelope.movies.length;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 Widget 来说，只要 listen &lt;code&gt;bloc.movieEnvelope&lt;&#x2F;code&gt; 就能第一时间拿到最新的 movie 数据，然后把它们展示出来即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streambuilder&quot;&gt;StreamBuilder&lt;&#x2F;h3&gt;
&lt;p&gt;如果直接用 &lt;code&gt;setState&lt;&#x2F;code&gt; 的话，使用姿势是在 state 的 &lt;code&gt;initState&lt;&#x2F;code&gt; 时 listen &lt;code&gt;bloc.movieEnvelope&lt;&#x2F;code&gt;，当收到新的内容时，setState，这样系统就会 rebuild widget，然后用上最新的数据。Flutter 很贴心地提供了便捷的类 &lt;code&gt;StreamBuilder&lt;&#x2F;code&gt;，只要告诉它 &lt;code&gt;stream&lt;&#x2F;code&gt;，那么当这个 stream 有新数据时，&lt;code&gt;itemBuilder&lt;&#x2F;code&gt; 就会自动 rebuild。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatefulWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatefulWidget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_MoviesState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_MoviesState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; bloc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StreamBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; bloc.movieEnvelope,
&lt;&#x2F;span&gt;&lt;span&gt;        builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, snapshot) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; snapshot.data 就是最新的内容
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 返回一个新的 widget 即可
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到这里有一个 &lt;code&gt;BlocProvider&lt;&#x2F;code&gt;，这是何物？它其实也是个 Widget（是的，Flutter 的 Widget 并不局限于 UI）。&lt;&#x2F;p&gt;
&lt;p&gt;为什么通过&lt;code&gt;of&lt;&#x2F;code&gt;方法能拿到这个 bloc？因为在构建 Tree 时，&lt;code&gt;BlocProvider&lt;&#x2F;code&gt; 套在了当前视图的上层(只要从当前节点向上追溯能找到就行)，就像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MyApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;StatelessWidget&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviesBloc&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MaterialApp&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Douban Movie Top 250&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Home&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而这个 &lt;code&gt;of&lt;&#x2F;code&gt; 方法也很简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocBase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_typeOf&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这句话的意思就是从当前 context 向上找，找到第一个该类型的实例为止，找不到就返回 null
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ancestorWidgetOfExactType&lt;&#x2F;span&gt;&lt;span&gt;(type);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; provider.bloc;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;BLoC 差不多有了之后，接下来就可以进入布局阶段了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-ye-bu-ju&quot;&gt;首页布局&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;flutter-demo&amp;#x2F;movie250-home-layout.png&quot;
        width=&quot;255&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Flutter 提供了两种列表布局方式: &lt;code&gt;ListView&lt;&#x2F;code&gt; 和 &lt;code&gt;GridView&lt;&#x2F;code&gt;，如果页面里除了列表还有其他元素（比如顶部的 SlideView 等），就需要用到 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 或者 &lt;code&gt;NestedScrollView&lt;&#x2F;code&gt;，首页除了列表没有其他元素，同时一行可能包含多个视图，因此我们选择 &lt;a href=&quot;https:&#x2F;&#x2F;docs.flutter.io&#x2F;flutter&#x2F;widgets&#x2F;GridView-class.html&quot;&gt;GridView&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;GridView 的构建可以使用 &lt;code&gt;GridView.builder&lt;&#x2F;code&gt;, 它需要提供几个关键信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;GridView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  gridDelegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 提供最终的布局信息，x,y,width.height
&lt;&#x2F;span&gt;&lt;span&gt;  itemCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 一共有多少元素
&lt;&#x2F;span&gt;&lt;span&gt;  itemBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (context, index) {} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 每个 item 具体长啥样
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果是固定的每行几列或固定宽度，且每个 item 的呈现形式几乎一样，可以直接使用自带的 &lt;code&gt;SliverGridDelegateWithFixedCrossAxisCount&lt;&#x2F;code&gt; 或 &lt;code&gt;SliverGridDelegateWithMaxCrossAxisExtent&lt;&#x2F;code&gt;，我们这个 case 中，每一行的列表不都是一样的，因此不能直接拿来用，这就需要进入到高级模式了，自己实现 &lt;code&gt;gridDelegate&lt;&#x2F;code&gt;。 &lt;code&gt;SliverGridDelegate&lt;&#x2F;code&gt; 的核心方法是 &lt;code&gt;SliverGridLayout getLayout(SliverConstraints constraints);&lt;&#x2F;code&gt; 也就是返回一个 &lt;code&gt;SliverGridLayout&lt;&#x2F;code&gt;，系统拿到这个 layout 之后，就知道该怎么布局了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGridLayout&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 针对某个 scroll 的偏移量，最小的 index 是多少
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMinChildIndexForScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; scrollOffset);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 针对某个 scroll 的偏移量，最大的 index 是多少
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMaxChildIndexForScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; scrollOffset);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 给一个 index，告诉我它的 x,y,width,height
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverGridGeometry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getGeometryForChildIndex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 这些 childcount 一共能产生多大的偏移量
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; 知道了这个信息后，系统就可以展示滚动条的长短了
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;computeMaxScrollOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; childCount);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;具体实现这里就不贴出来了，感兴趣的可以在源码里看。还是有点小复杂的，尤其是加上 loadmore 的逻辑后，不过知道了系统想要什么，想尽办法满足它就是了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zai-ru-geng-duo&quot;&gt;载入更多&lt;&#x2F;h3&gt;
&lt;p&gt;第一次请求的布局是完成了，如何实现载入更多的效果呢？在 iOS 中会通过判断是否拉到了底部来触发加载更多的逻辑，在 Flutter 中我们可以换一种方式来达到效果。&lt;&#x2F;p&gt;
&lt;p&gt;什么时候需要加载更多？当前视图的 item 都展示完了的时候，而在展示 item 时，builder 会传入一个 &lt;code&gt;index&lt;&#x2F;code&gt;，用来告知当前 item 处于哪个 &lt;code&gt;index&lt;&#x2F;code&gt;，我们可以把这个信息告诉 BLoC。比如第一页一共展示 20 部电影，当 BLoC 收到 index 19 时，就知道这 20 部都已经被展示过了，就可以通过 API 去拿更多的数据，等拿到后，跟原先的数据进行合并，然后作为新的值告诉 widget，widget 的 StreamBuilder 发现有新数据后，自动刷新 widget，这样新的电影就被展示出来了。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂的一点是加载更多时，需要展示一个 indicator，当没有更多数据时，又是另一个样式，这又该如何处理呢？可以思考下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-api-jie-ru&quot;&gt;Real API 接入&lt;&#x2F;h3&gt;
&lt;p&gt;前面这几步都走完后，列表的布局应该没问题了，接下来就要接入真实的数据了。这个接入过程还是挺简单的，新建一个实现了 &lt;code&gt;API&lt;&#x2F;code&gt; 的类，然后在 App 入口处，用它替换掉 MockAPI&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RealAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovieList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;HttpClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getUrl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;top250?start=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;amp;count=40&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; responseBody &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span&gt; response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;(utf8.decoder).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;(responseBody);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieEnvelope&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fromJSON&lt;&#x2F;span&gt;&lt;span&gt;(data);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; movieID) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 暂时还用不到，先忽略
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dart 内置了对异步请求的支持，分为两大块，&lt;code&gt;async + await + Future&lt;&#x2F;code&gt; 和 &lt;code&gt;Stream + async* + yield&lt;&#x2F;code&gt;，前者用来处理单次或少量的异步请求，后者用来实现异步的 &lt;code&gt;iterator&lt;&#x2F;code&gt;，也就是数据可能会源源不断地冒出来。&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，通过 await 来拿异步数据就可以了，拿到之后把它转换为 model(方便起见，错误处理就先忽略)。 然后在入口处设置&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;.apiClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RealAPI&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;runApp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;item-de-nei-rong-zhan-shi&quot;&gt;item 的内容展示&lt;&#x2F;h3&gt;
&lt;p&gt;这块是个细致活，对于 Widget 元素的使用可以参考官方的&lt;a href=&quot;https:&#x2F;&#x2F;flutter.io&#x2F;docs&#x2F;development&#x2F;ui&#x2F;layout&quot;&gt;这个教程&lt;&#x2F;a&gt;，需要提一点的是 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt; 这个 widget，默认 child widget 是拿不到 parent 的布局信息的，但有时又需要拿它来进行一些计算，这时就可以在外面套一层 &lt;code&gt;LayoutBuilder&lt;&#x2F;code&gt;，它的 &lt;code&gt;builder&lt;&#x2F;code&gt; 属性是一个 function，会传一个 &lt;code&gt;BoxConstraints&lt;&#x2F;code&gt; 进来，通过它就能拿到 parent 的布局信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shou-cang-ying-pian&quot;&gt;收藏影片&lt;&#x2F;h3&gt;
&lt;p&gt;点击影片 title 旁边的 &lt;code&gt;...&lt;&#x2F;code&gt;， 如果是 iOS 平台，则弹出一个 &lt;code&gt;ActionSheet&lt;&#x2F;code&gt;，Android 则弹出 &lt;code&gt;BottomSheet&lt;&#x2F;code&gt;，选择收藏的话，这个 &lt;code&gt;...&lt;&#x2F;code&gt; 会变成红色。&lt;&#x2F;p&gt;
&lt;p&gt;如果要针对不同平台进行不同的展示，可以使用 &lt;code&gt;Platform.isIOS&lt;&#x2F;code&gt; 来区分(这个类在 &lt;code&gt;dart:io&lt;&#x2F;code&gt; package 下)，关于 &lt;code&gt;ActionSheet&lt;&#x2F;code&gt; 和 &lt;code&gt;BottomSheet&lt;&#x2F;code&gt; 的使用，查看相应的 API 即可。比较麻烦的是 &lt;code&gt;...&lt;&#x2F;code&gt; 的变色处理，倒不是变色麻烦，而是要让这个状态得到保持，不然下次再滑到该 item 时，又会回到原先的颜色。&lt;&#x2F;p&gt;
&lt;p&gt;大多数的教程里，对这部分的处理都是更新 list 中该 item 对应的 model，然后让更新后的 list 触发 StreamBuilder 重新渲染 widget，我觉得这样实在有点小题大做了。我的做法是给每个 item 配一个对应的 bloc，item 的 model 和状态都保存在这个 bloc 中，在这个例子中，当某个 movie item widget 需要更新状态时，从它对应的 bloc 中拿即可。&lt;&#x2F;p&gt;
&lt;p&gt;如果这时要新加一个 Feature，当收藏电影时，顶部 AppBar 的右边要有对应的数字显示。在 Google 官方的 &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=RS36gBEp8OI&quot;&gt;Demo&lt;&#x2F;a&gt; 里是直接在 widget 的 &lt;code&gt;onTap&lt;&#x2F;code&gt; callback 里调用另一个 bloc 的方法(&lt;code&gt;CartBloc.addition&lt;&#x2F;code&gt;)，这样其实把业务逻辑也耦合到了 UI 里面（如果 CartBloc 的 addition 逻辑变了，或者在添加到 Cart 的同时，还要更新用户状态等，就需要在这个 callback 里调整这些逻辑），因此更好的方法是自己的 bloc 处理完后向上抛 Notification，外层接收到 Notification 后再去更新其他 Bloc。就好像要进行跨部门沟通时，最好让共同的上级知道这件事，或者由他来协调。&lt;&#x2F;p&gt;
&lt;p&gt;这里简单说下 Flutter 里的 Notification 机制，它不像 iOS 里的 &lt;code&gt;NotificationCenter&lt;&#x2F;code&gt; 可以全局接收，而是只有在 widget 上层路径中的 &lt;code&gt;NotificationListener&lt;&#x2F;code&gt; 才能收到通知，这样可以避免通知泛滥的情况。而且使用时，必须继承系统的 &lt;code&gt;Notification&lt;&#x2F;code&gt;，这样每一个通知就是一个特定类，阅读代码或排查起来也会很方便。&lt;&#x2F;p&gt;
&lt;p&gt;至此，首页的电影列表页基本完成了，该进入详情页了，在这之前，还有一件事情要做，那就是 Router 的注册。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;router-zhu-ce&quot;&gt;Router 注册&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;MaterialApp&lt;&#x2F;code&gt; 自带了 Router 注册，乍一看还挺方便的，不过有一个坑就是不支持通过 URL 传递动态参数，比如 &lt;code&gt;&#x2F;movie&#x2F;1024&lt;&#x2F;code&gt;，必须完全匹配才可以。如果真要实现 pattern 匹配就要设置 &lt;code&gt;onGenerateRoute&lt;&#x2F;code&gt; 参数，当通过 Navigator 进行 push 时，这个参数对应的方法就会被触发，可以在这个方法里面进行 URL 的解析。&lt;&#x2F;p&gt;
&lt;p&gt;我在这里实现了个简单的通过 URL 注册 Widget 的方法，URL 支持 pattern，比如 &lt;code&gt;&#x2F;movie&#x2F;{id}&lt;&#x2F;code&gt; 就能匹配 &lt;code&gt;&#x2F;movie&#x2F;1024&lt;&#x2F;code&gt;，使用时，通过 URL 来拿 widget，再把这个 widget push 出去即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; param should wrap with {}, eg: &#x2F;movie&#x2F;{id}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; pattern, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;WidgetBuilder&lt;&#x2F;span&gt;&lt;span&gt; widgetBuilder) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; patternSections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; pattern.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; patternSections.length; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _pattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; patternSections[i];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _router &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; _pattern);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; patternSections.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        _router.widgetBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; widgetBuilder;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      routerEntry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addChild&lt;&#x2F;span&gt;&lt;span&gt;(_router);
&lt;&#x2F;span&gt;&lt;span&gt;      routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getWidget&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; urlSections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _routerEntry;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span&gt; widget;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; urlSections.length; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; _urlSection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; urlSections[i];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;_Router&lt;&#x2F;span&gt;&lt;span&gt; _router &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; routerEntry.children) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _urlSection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; _router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, _router.name.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            urlParams[param] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _urlSection;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          routerEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _router;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; urlSections.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (_router.widgetBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;              widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                  _router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;widgetBuilder&lt;&#x2F;span&gt;&lt;span&gt;(context, urlParams, params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; params);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;found) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; widget;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;路由的注册&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Routes&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; detail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;movie&#x2F;{id}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;configureRoutes&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(root, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Home&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(detail, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; urlParams,
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt; params}) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MoviePage&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        movieID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; urlParams[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;movie&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;movie&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiang-qing-ye-bu-ju-xuan-ze&quot;&gt;详情页-布局选择&lt;&#x2F;h3&gt;
&lt;p&gt;详情页主要分为 4 个部分，顶部的海报图，中间的概要、横向可滚动的影人列表页和 Tab 标签，以及最下面的列表页。有两个方案可以选，&lt;code&gt;NestedScrollView&lt;&#x2F;code&gt; 和 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt;，前者分为 header 和 body 两部分，可以在里面套 scrollView，最开始选择了这个方案，后来发现 &lt;code&gt;TabbarView&lt;&#x2F;code&gt; 怎么都处理不好，如果把它单独放到 body 里，那么所有剩下的部分就都要放到 header 里，虽然可行，但跑起来会发现，&lt;code&gt;TabbarView&lt;&#x2F;code&gt; 里的 scroll offset 是错的，一部分内容会「钻」进 Tabbar 里，而且底部空了很大一部分。如果把除了海报图，剩下的部分都放到 body 里，也不行，被迫只能选择 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 方案的一个难点是处理 &lt;code&gt;TabbarView&lt;&#x2F;code&gt;，因为不能直接把它放到 &lt;code&gt;slivers&lt;&#x2F;code&gt; 里，于是换了个思路，抛弃 &lt;code&gt;TabbarView&lt;&#x2F;code&gt; 手动实现 tabbar 点击之后，下面的内容切换效果。&lt;&#x2F;p&gt;
&lt;p&gt;详情页的核心代码大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dart&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-dart &quot;&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BuildContext&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Scaffold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      backgroundColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0xfff4f4f4&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BlocProvider&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        bloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; bloc,
&lt;&#x2F;span&gt;&lt;span&gt;        child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;loading&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NotificationListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TabSwitchNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              onNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; (notification) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setState&lt;&#x2F;span&gt;&lt;span&gt;(() {
&lt;&#x2F;span&gt;&lt;span&gt;                  currentTabType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notification.tabContentType;
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;              },
&lt;&#x2F;span&gt;&lt;span&gt;              child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DefaultTabController&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                  length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SafeArea&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                      top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CustomScrollView&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                        slivers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieHero&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverToBoxAdapter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieSummary&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverToBoxAdapter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieActors&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SliverPadding&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;EdgeInsets&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7.0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieReviewTabbar&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MovieReviewTabbarContent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            tabContentType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; currentTabType,
&lt;&#x2F;span&gt;&lt;span&gt;                          ),
&lt;&#x2F;span&gt;&lt;span&gt;                        ],
&lt;&#x2F;span&gt;&lt;span&gt;                      ))),
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }()),
&lt;&#x2F;span&gt;&lt;span&gt;      ));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 tabbar 来说，需要提供一个 controller，要么通过属性设置，要么外面包一层，这里选择了后者，所以可以看到最外面是 &lt;code&gt;DefaultTabController&lt;&#x2F;code&gt;，这样就可以在里面通过 &lt;code&gt;DefaultTabController.of(context)&lt;&#x2F;code&gt; 来拿到这个 controller，进而了解当前选中的 tab，以及控制 tab 的选中情况。&lt;&#x2F;p&gt;
&lt;p&gt;普通的 Widget 要通过 &lt;code&gt;SliverToBoxAdapter&lt;&#x2F;code&gt; 转换才能被放到 slivers 里面，slivers 其实就是 &lt;code&gt;CustomScrollView&lt;&#x2F;code&gt; 的组成部分。通过上面的代码，我们可以知道这个 scrollview 是由哪几部分组成的，非常清晰。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ding-bu-hai-bao-xiao-guo&quot;&gt;详情页-顶部海报效果&lt;&#x2F;h3&gt;
&lt;p&gt;这个效果看上去满复杂的，实现起来很简单，只要使用 &lt;a href=&quot;https:&#x2F;&#x2F;docs.flutter.io&#x2F;flutter&#x2F;material&#x2F;SliverAppBar-class.html&quot;&gt;SliverAppBar&lt;&#x2F;a&gt; 这个 Widget 即可。&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@diegoveloper&#x2F;flutter-collapsing-toolbar-sliver-app-bar-14b858e87abe&quot;&gt;这里&lt;&#x2F;a&gt; 有比较详细的介绍。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ying-pian-jie-shao&quot;&gt;详情页-影片介绍&lt;&#x2F;h3&gt;
&lt;p&gt;这里主要是使用 Text Widget，一个难点是默认内容是截断和收起的，当点击按钮后，展开。如果是在 iOS 里，需要分别计算两者的高度，然后调用 &lt;code&gt;reloadRowsAtIndexPaths&lt;&#x2F;code&gt; 方法，有点麻烦，Flutter 里很简单，widget 自己更新内容即可，不需要考虑高度的计算，也不要显式地调用 reload 方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-ying-ren-lie-biao&quot;&gt;详情页-影人列表&lt;&#x2F;h3&gt;
&lt;p&gt;这是一个横向滑动列表，把 &lt;code&gt;ListView&lt;&#x2F;code&gt; 的 &lt;code&gt;scrollDirection&lt;&#x2F;code&gt; 设置为 &lt;code&gt;horizontal&lt;&#x2F;code&gt; 即可&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-tabbar&quot;&gt;详情页-Tabbar&lt;&#x2F;h3&gt;
&lt;p&gt;Tabbar 需要有一个 controller，我们在外面包了一层 &lt;code&gt;DefaultTabController&lt;&#x2F;code&gt;，这里就不需要操心了。比较坑的一点是，&lt;code&gt;TabBar&lt;&#x2F;code&gt; 这个 Widget 没有提供 &lt;code&gt;onTap&lt;&#x2F;code&gt; 方法，只能通过监听 controller 来获取 tab 的变化，不过这样也好，管理起来更方便。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 这里的 Tabbar 是需要吸顶的，因此要用 &lt;code&gt;SliverPersistentHeader&lt;&#x2F;code&gt; 包一下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye-dian-ping-lie-biao&quot;&gt;详情页-点评列表&lt;&#x2F;h3&gt;
&lt;p&gt;点评列表是一个 &lt;code&gt;SliverList&lt;&#x2F;code&gt;，配置起来还算简单，那么点击 tab 切换内容这个该如何实现呢？可以思考下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;我个人很喜欢 Flutter， 用它来写 GUI 感觉非常自然和舒服。不需要借助 JSX 或 XML，用编程语言就能搞定，方便 Local Reasoning，不需要在 JSX &#x2F; XML 和 Code 之间来回切换。同时通过 Widget 来配置视图的方式也很方便，GUI 非常适合这种声明式编程。&lt;&#x2F;p&gt;
&lt;p&gt;刚开始接触 Flutter 时，容易被那一大堆的类搞晕，其实了解了核心理念后，啃透几个 Demo，就会慢慢找到感觉。自己再多写写，踩踩坑，就熟练了。&lt;&#x2F;p&gt;
&lt;p&gt;至于性能方面，debug 跟 release 模式还是会有些差距，因此如果在 debug 模式下发现不够流畅，可以切换到 release 模式再试下。&lt;&#x2F;p&gt;
&lt;p&gt;我也是接触 Flutter 不久，如果有不对的地方欢迎指正，如果能给你带来些帮助，备感荣幸。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>操作系统是如何管理内存的</title>
            <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/os-memory/</link>
            <guid>https://limboy.me/posts/os-memory/</guid>
            <description>&lt;p&gt;最近在看 &lt;a href=&quot;http:&#x2F;&#x2F;pages.cs.wisc.edu&#x2F;%7Eremzi&#x2F;OSTEP&#x2F;&quot;&gt;Operating Systems: Three Easy Pieces&lt;&#x2F;a&gt; 这本书，作者在这方面有 20 多年的积累，同时文风非常朴实，不会被各种术语绕晕。该书进从虚拟化、并发、持久化这三个方面来剖析操作系统，从要达到的目标到遇到的问题到解决方案到新的问题，一层层地告诉你为什么会变成现在这个样子。&lt;&#x2F;p&gt;
&lt;p&gt;今天要讲的内容主要是对该书里面关于内存管理这块的一个小结，由于看的是 0.8 版，跟最新的 1.0 版可能会有些许出入。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;每个进程创建的内存地址都是虚拟地址，操作系统使用了虚拟化技术，让进程觉得它拥有了大块可支配的内存的假象，操作系统拿到这个地址后会将它转变为真实的内存地址，从而拿到对应的信息。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of code : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) main)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of heap : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) malloc(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of stack : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;location of code : 0x10df2aec0
&lt;&#x2F;span&gt;&lt;span&gt;location of heap : 0x7fdeea400350
&lt;&#x2F;span&gt;&lt;span&gt;location of stack : 0x7ffee1cd560c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些都是虚拟地址。对于内存的虚拟化，有三个最重要的要素：透明（就像内存只为当前的进程所用）、高效（就像直接操作物理内存那样）、保护（进程之间不能随意读写各自的内存区域），伴随着这三个要素，就开始了探索之旅。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-gu-shi-dai&quot;&gt;远古时代&lt;&#x2F;h2&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;1.jpg&quot;
        width=&quot;222&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一开始，只有一个进程，一切都很美好，除了操作系统的自留地外，剩下的都给那个进程，想怎么折腾都行，只要别超出最大的容量。&lt;&#x2F;p&gt;
&lt;p&gt;但我们知道，那个时候，一台计算机是很贵的，比 iPhone XS Max 还贵，在这么昂贵的机器上同时只能运行一个程序实在浪费，于是就有了支持多进程的需求，所谓多进程，并不需要同时运行这些进程，只要它们都处于 ready 状态，操作系统快速地在它们之间切换，就能达到同时运行的假象。每个进程都需要内存，Context Switch 时，之前内存里的内容怎么办？简单粗暴的方式就是先 dump 到磁盘上，然后再从磁盘上 restore 之前 dump 的内容（如果有的话），但效果并不好，太慢了！&lt;&#x2F;p&gt;
&lt;p&gt;那怎么才能不慢呢？把进程对应的内存依旧留在物理内存中，需要的时候就切换到特定的区域。这就涉及到了内存的保护机制，毕竟进程之间可以随意读取、写入内容就乱套了，非常不安全。因此操作系统需要对物理内存做一层抽象，也就是「地址空间」(Address Space)，一个进程的地址空间包含了该进程所有相关内存，比如 code &#x2F; stack &#x2F; heap。一个 16 KB 的地址空间可能长这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;2.jpg&quot;
        width=&quot;363&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当程序运行时，heap 和 stack 共用中间 free 的区域，当然这只是 OS 层面的抽象。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; this is the line of code we are interested in
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;变成汇编指令后，大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;  ;load 0+ebx into eax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;132&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: addl $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;add 3 to eax register
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;135&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;store eax back to mem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最前面的是 PC (Program Counter)，用来表示当前 code 的索引，比如 CPU 执行到 128 时，进行了 Context Switch，那么在 Switch 回来后，还可以接着从 132 开始执行（当然需要先把 PC 存起来）。之后的就是汇编代码，告诉 CPU 该如何操作。&lt;&#x2F;p&gt;
&lt;p&gt;从进程的角度看，内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;3.jpg&quot;
        width=&quot;272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;真实的物理内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;4.jpg&quot;
        width=&quot;283&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从 32KB 处作为开始，48KB 作为结束。那 32 &#x2F; 48 可不可以动态设置呢，只要在 CPU 上整两个寄存器，base 和 bounds 就可以了，base 指明从哪里开始，bounds 指定哪里是边界。 因此真实物理地址和虚拟地址之间的关系是：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;physical address = virtual address + base
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有时，CPU 上用来做内存地址翻译的也会被叫做「内存管理单元 MMU」(Memory Management Unit)，随着功能越来越强大，MMU 也会变得越来越复杂。&lt;&#x2F;p&gt;
&lt;p&gt;base and bounds 这种做法最大的问题在于空间浪费，Stack 和 Heap 中间有一块 free space，即使没有用，也被占着，那如何才能解放这块区域呢，就有了下面的做法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-duan-segmentation&quot;&gt;分段（Segmentation）&lt;&#x2F;h2&gt;
&lt;p&gt;分段的思想很简单，之前不是一大块都是连在一起的么，现在要把你们都分开，code &#x2F; stack &#x2F; heap 各自成为一段，段内的空间是连续的，段与段之间不必连续，这样空间利用率上就更高了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;7.jpg&quot;
        width=&quot;505&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;5.jpg&quot;
        width=&quot;484&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来问题就来了，一个进程会有多个段，如何知道一个内存地址对应的是哪个段呢？一个方法是用地址的前两个字节来表示：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;6.jpg&quot;
        width=&quot;333&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;00&lt;&#x2F;code&gt; 表示 code, &lt;code&gt;01&lt;&#x2F;code&gt; 表示 heap。获取物理地址的过程大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取前两个比特
&lt;&#x2F;span&gt;&lt;span&gt;Segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; SEG_MASK) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SEG_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取 Offset
&lt;&#x2F;span&gt;&lt;span&gt;Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; Bounds[Segment])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RaiseException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Base[Segment] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; Offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可能有些同学已经忘了位操作，这里简单复习下，所谓掩码就是用来屏蔽指定位的一串二进制，结合 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作就可以让其他位都变为 0，需要保留的位保持原样，比如 &lt;code&gt;110110&lt;&#x2F;code&gt; 这串二进制，想要保留前三位，同时把后三位清零，只需要与 &lt;code&gt;111000&lt;&#x2F;code&gt; 执行 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作即可。如果只想要前 3 位，那么向右移 3 位，&lt;code&gt;&amp;gt;&amp;gt; 3&lt;&#x2F;code&gt;，因此上面那段代码 &lt;code&gt;Segment&lt;&#x2F;code&gt; 就变成了前两个比特。&lt;&#x2F;p&gt;
&lt;p&gt;拿到了 &lt;code&gt;Segment&lt;&#x2F;code&gt; 和 &lt;code&gt;Offset&lt;&#x2F;code&gt;，先判断下是否在安全区域内，如果超出则抛出异常，不然就去找到真实的物理地址。&lt;&#x2F;p&gt;
&lt;p&gt;每个段依旧会有 Base 和 Bounds，但注意到有些段是向上扩张，有些是向下扩张，这个信息也需要被额外记录：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;8.jpg&quot;
        width=&quot;624&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，还会有其他的信息需要记录，比如是否可读写等。&lt;&#x2F;p&gt;
&lt;p&gt;那这个做法有没有问题呢，有的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;当 Context Switch 时，Segment Registers 必须被存储起来方便下次使用。&lt;&#x2F;li&gt;
&lt;li&gt;更大的问题是，每个进程自带了好几个段，且大小不一，容易形成碎片化(之前申请的内存被释放了)，创建新的地址空间时，就不那么方便了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;9.jpg&quot;
        width=&quot;570&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，当一个进程想要申请 20KB 的段时，虽然有 24KB 的剩余空间，但并不连续，因此会申请失败。一种解决方法是让内存空间变得更紧凑，比如暂停正在运行的进程，把内存拷贝到连续的地址空间，修改 Segment Register，这样就可以变成右图那样了。但是代价有点大，拷贝段会花费显著的时间。无论使用何种算法，碎片化一定会存在，只是好点的算法能降低碎片化程度。&lt;&#x2F;p&gt;
&lt;p&gt;顺便提一下 C 里面的内存申请，当 &lt;code&gt;malloc(size_t size)&lt;&#x2F;code&gt; 时，会返回一个指针，当 &lt;code&gt;free(void *pointer)&lt;&#x2F;code&gt; 时，会释放指针对应的区域，也就是说 &lt;code&gt;free&lt;&#x2F;code&gt; 时，不需要知道 &lt;code&gt;size&lt;&#x2F;code&gt;，这是因为申请内存时，有一块额外的区域用来存储这些信息，比如当用户执行 &lt;code&gt;ptr = malloc(20)&lt;&#x2F;code&gt; 时&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;10.jpg&quot;
        width=&quot;611&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了那 20 个字节，头部还留了点空间用来放 &lt;code&gt;size&lt;&#x2F;code&gt; 和 &lt;code&gt;magic&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; __header_t {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; magic;
&lt;&#x2F;span&gt;&lt;span&gt;} header_t;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    header_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;hptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- sizeof&lt;&#x2F;span&gt;&lt;span&gt;(header_t);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;拿到指针后，可以判断 magic number 是否相等，然后计算需要 free 的 size (header + body)，这里有一个&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;%7Ebenson&#x2F;cs326&#x2F;pintos&#x2F;pintos&#x2F;src&#x2F;threads&#x2F;malloc.c&quot;&gt;简易的 malloc 实现&lt;&#x2F;a&gt;供参考。&lt;&#x2F;p&gt;
&lt;p&gt;既然段模式会有碎片化的问题，那如何才能避免呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-ye-paging&quot;&gt;分页（Paging）&lt;&#x2F;h2&gt;
&lt;p&gt;Paging 的思想是把地址空间切分成固定大小的单元。比如下面一个只有 64 字节的地址空间，每个 Page 16 个字节&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;11.jpg&quot;
        width=&quot;471&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对应到真实的物理地址：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;12.jpg&quot;
        width=&quot;441&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，虽然地址空间是连续的，但物理地址并不是。这样的好处是，不用去考虑 heap &#x2F; stack 会被申请多少 size，比如要申请 64 字节地址空间，只要给 4 个 free 的 page 即可，这样 OS 管理起来也很简单，比如只要维护一份 free pages list，然后给出前 4 个。为了记录虚拟页(Virtual Page)跟物理地址之间的关系，OS 需要维护给每个进程维护一份 Page Table，它的作用就是地址翻译。比如 &lt;code&gt;movl &amp;lt;virtual address&amp;gt;, %eax&lt;&#x2F;code&gt;，由于进程的地址空间是 64 字节，因此需要 6 个比特来表示（2^6 = 64）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;13.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于 Page Size 为 16 字节，因此 offset 为 4（4 个比特就能表示全一个 Page 里的任意位置），剩下的前两位作为 VPN (Virtual Page Number)&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;14.jpg&quot;
        width=&quot;275&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;movl 21, %eax&lt;&#x2F;code&gt;, 21 转成 2 进制就是 &lt;code&gt;010101&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;15.jpg&quot;
        width=&quot;285&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;经过地址翻译后，就能找到物理内存中的地址了&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;16.jpg&quot;
        width=&quot;345&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么问题又来了，Page Tables (用来将虚拟地址翻译成物理地址)存在哪里呢？在想这个问题前，先想下 Page Tables 大概有多大？&lt;&#x2F;p&gt;
&lt;p&gt;如果每个 Page Table Entry (PTE) 需要 4 个字节来保存 物理地址(PFN, Physical Frame Number)和其他的状态码，一个进程会有多少个 PTE 呢？假设地址空间为 32 位，Page Size 为 4KB，那么虚拟地址就可以被拆分成 20 bits 的 VPN 和 12 bits 的 Offset，有 2^20 个 VPN 可能需要翻译，就需要有对应数量的 PTE，因此一个进程大概需要 4MB 的内存来存储 Page Tables，想想如果有 100 个进程在运行，就需要 400MB，这个数量可不算小。&lt;&#x2F;p&gt;
&lt;p&gt;既然 Page Tables 如此之大，放 CPU 的寄存器里是不可能了，那就只能放内存了，因此在获取虚拟地址对应的物理内存地址时，需要先访问一次内存，这比直接访问 CPU 的寄存器会慢很多。&lt;&#x2F;p&gt;
&lt;p&gt;顺便来看一下 PTE 到底长啥样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;17.jpg&quot;
        width=&quot;599&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;前几位都是状态位，用来表示这段内存目前的状态，比如是否有效（Valid），是否可读，是否在 Swap 等。PFN 是真正的物理内存地址。&lt;&#x2F;p&gt;
&lt;p&gt;采用分页模式后，物理地址的获取过程就变成了这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; 把 VPN 摘出来
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 把 PTE 的地址组装好
&lt;&#x2F;span&gt;&lt;span&gt;PTEAddr = PTBR + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 访问地址，拿到内容，注意，这里访问了内存，会影响速度
&lt;&#x2F;span&gt;&lt;span&gt;PTE = AccessMemory(PTEAddr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 检查是否有效
&lt;&#x2F;span&gt;&lt;span&gt;if (PTE.Valid == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(SEGMENTATION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else if (CanAccess(PTE.ProtectBits) == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; 有效的话，再去拿真实的物理地址
&lt;&#x2F;span&gt;&lt;span&gt;  Offset = VirtualAddress &amp;amp; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr = (PTE.PFN &amp;lt;&amp;lt; PFN_SHIFT) | offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么如何对这个过程进行加速呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tlb-translation-lookaside-buffer&quot;&gt;TLB (Translation-Lookaside Buffer)&lt;&#x2F;h2&gt;
&lt;p&gt;如果要加速，最容易想到的就是加缓存，TLB 就是 CPU 芯片 MMU 的一部分，首先 check TLB 中有没有该虚拟地址对应的物理地址，有的话直接返回，这样就不用再访问内存了，自然也就快了。那这个 TLB 到底长怎样呢？可以认为是很简单的 Key-Value 对，再加上额外的一些状态码 &lt;code&gt;VPN | PFN | other bits&lt;&#x2F;code&gt;。注意这里也会有 valid bit，只不过这里表示的是当前这个是不是一个有效的翻译，而 Page Table 里的 valid 状态码表示的是该内存是否被初始化过，如果没有被初始化，那么 valid 就为 0。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 Context Switch。每个进程的 VPN 和 PFN 的对应关系是不一样的，因此上一个进程的对应关系对于下一个进程来说，完全无用。那怎么办？最简单粗暴的方式就是进程切换时，直接清空，这样虽然不会出问题，但也降低了缓存命中率，尤其是频繁切换的话。还有一种方法是多加一个字段来表示该段翻译对应的是哪个地址空间（ASID），有点像 PID。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;18.jpg&quot;
        width=&quot;362&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但 CPU 这寸土寸金的地方，不可能放很大的缓存，而且 size 越小，访问速度才会越快，当缓存满了之后怎么办？可以采用常见的策略，比如 LRU 或 Random。所以虽然内存被叫做 Random Access Memory，但也分是否命中缓存，那些命中 TLB 缓存的才是最快的。&lt;&#x2F;p&gt;
&lt;p&gt;OK，访问速度这个问题算是解决了，还有一个体积大的问题又该怎么处理呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smaller-tables&quot;&gt;Smaller Tables&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have two good and seemingly opposing ideas, you should always see if you can combine them into a hybrid that manages to achieve the best of both worlds.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回顾之前，我们采用段模式时，并没有体积大的问题，因为只需要 base and bounds 就可以了，那有没有可能把段和页结合起来呢？我们来试试，如果每个 Segment 对应一个 Table，这样就只需要 3 个 Table。对于 Segment 来说，现在 Bounds 变为了判断 Page Table 的边界（比如有多少个 Pages）。假设 32 位的地址空间，4KB Pages，就会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;20.jpg&quot;
        width=&quot;648&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果 TLB 没有命中的话，过程大概如此&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;SN = (VirtualAddress &amp;amp; SEG_MASK) &amp;gt;&amp;gt; SN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; VPN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;AddressOfPTE = Base[SN] + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这样 Segment 自带的碎片化问题依旧存在，到时 malloc 寻找可用空间时依旧会比较复杂。回过头来，我们再来看下，占用的这 4MB 空间真的是必须的么？&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;21.jpg&quot;
        width=&quot;444&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;22.jpg&quot;
        width=&quot;511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，中间的一大部分都是空的，但依旧会被填充（因为是采用数组的方式来访问），那有没有办法既能表达「无」的信息，又不占用空间呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multi-level-page-tables&quot;&gt;Multi-level Page Tables&lt;&#x2F;h3&gt;
&lt;p&gt;多级分页表。比如要去宿舍找同学玩，发现宿舍大楼门关着，那么就不用再到寝室了，多级分页表的思路也类似，在最前面先做一次粗检，如果粗检都不符合就直接打回，粗检通过之后再来一次细检，这样就能把空间给省下来，具体是怎么做的呢？&lt;&#x2F;p&gt;
&lt;p&gt;把 PTE(Page Table Entry, 包含了物理地址和状态码)放进 page-sized units（比如一个 Page 里放 16 个 PTE），如果该 Page 的 PTE 都无效，那么压根就不申请内存，然后外面包一层 Page Directory 用来表示里面是否有有效的 PTE。就像文件夹一样，如果文件夹里没有文件，自然就不会占用空间。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;23.jpg&quot;
        width=&quot;923&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边是单层 Page Table 的实现，可以看到，虽然只有最下面两层是 valid 的，但中间依旧会有很多被占用的空间（就像要访问数组的第 1000 个元素，必须先要把这 1000 个元素填满）。&lt;&#x2F;p&gt;
&lt;p&gt;右边是两层 Page Table 的实现，通过 Valid 状态码就可以知道是否有必要去物理地址拿内容，如果第一层的 Valid 为 1，那么地址转换后就可以拿到第二层 PTE 的内容，如果此时 Valid 为 0，抛出 Exception，为 1，那么继续去拿真正的存放在物理内存中的内容。 因此最外层的 Valid 为 1，只是表示里面至少有一个 Valid 的 PTE。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，空间上是不是节省了不少。但也有弊端，比如需要两次内存访问才能拿到真正的虚拟地址对应的内容，所以这是一个典型的时间换空间的做法。还有一个弊端就是复杂度，无论是硬件还是操作系统，处理起来肯定比一个线性的 Page Table 查找复杂，但为了省出来的内存，这个 tradeoff 还是可以接受的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设 CPU 在解析指令时，遇到了一个 14 位长的虚拟地址，现在要把它转换为真实地址，并取出其中的内容：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;25.jpg&quot;
        width=&quot;448&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Page Directory Index 告诉 CPU 去第几层找 PDE(Page Directory Entry)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;PDEAddr = PageDirBase + (PDIndex * sizeof(PDE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;PageDirBase 对应具体的物理地址。如果 PDE 的 valid 位为 0，则直接抛异常，不然就把 Page Table Index 拿出来，找到 PTE，看看它的 valid 状态码，如果为 0，抛异常，为 1 则去取最终的物理地址中的内容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;如果要看更详细的，最好还是阅读原著，会有更细致的描述和一些没提到的内容，比如跟磁盘的内存交换。&lt;&#x2F;p&gt;
&lt;p&gt;了解这些底层的运行机制除了满足好奇外，还可以学到不少复杂系统的应对策略，对于其他的项目也会有所启发。比如其中提到的 Mechanism 和 Policy，前者指定大方向，后者处理实现；时间&#x2F;空间上的取舍；当有两种看起来相反的思路时，如何有效地混合；复杂度和性能之间的取舍等等。这些对于设计、编写高质量的程序都大有裨益。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>如何设计一个配置中心的后端架构</title>
            <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-architecture-config/</link>
            <guid>https://limboy.me/posts/how-to-architecture-config/</guid>
            <description>&lt;p&gt;配置中心能够让 App 具有更好的动态性，通过在远程下发配置来动态改变 App 的行为。假如现在需要设计这么一套系统，该如何去考虑呢，以下是我的一些分析过程。&lt;&#x2F;p&gt;
&lt;p&gt;对「配置中心」这个需求进行分解就是：第一时间把配置发送给客户端。因此我们先来构想一个最简单的场景：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_01.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;客户端和服务端保持一个长链，当在后台操作配置时，会把这个配置以 K&#x2F;V 形式存储，然后通知 Procesor，后者拿到 K&#x2F;V 之后把它推给客户端，整个过程就完成了。这是最原始的形态，接下来会在这个基础上进行演化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pei-zhi-geng-xin-shi-ke-hu-duan-chu-yu-chi-xian-zhuang-tai-zen-yao-ban&quot;&gt;配置更新时，客户端处于离线状态怎么办&lt;&#x2F;h3&gt;
&lt;p&gt;长链只能保证(尽量)客户端在线时能第一时间拿到配置中心的值，处于离线状态（比如没有打开 App）时就无能为力了，因此需要想办法到用户下一次打开 App 时可以拿到最新的值，这个简单处理就是在保存 K&#x2F;V 时，额外存一个 flag 字段，用来表示这个 K&#x2F;V 是否已经成功发送给客户端。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_02.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;duo-fen-pei-zhi-de-chu-li&quot;&gt;多份配置的处理&lt;&#x2F;h3&gt;
&lt;p&gt;通常 K&#x2F;V 对不止一份，那么多份配置，也就是多个 K&#x2F;V 对，又会带来哪些变化呢。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_03.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这时就有三个问题需要我们考虑：存储、流量和同步策略。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cun-chu&quot;&gt;存储&lt;&#x2F;h4&gt;
&lt;p&gt;一个设备的 K&#x2F;V 对通常不会超过 100 项，每对 Size 不超过 1K，也就是一台设备对应的大小上限为 100K 左右，假如设备数为 100 万，就需要 100G 的磁盘空间。这个量还是有点大的，可以优化下。考虑到一些配置项会在多个设备共存，可以把这些配置单独存储，然后把 hash 值作为 Value。假设 Key 的 size 为 30 字节，Value 为 10 字节，这样就只需 40M 的 K&#x2F;V 存储空间。因此由于存储上的限制，我们的设计也要做一下调整:&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_04.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但这样还是有问题，Value 的组合会很多：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_05.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如原来 K1 的 Value 为 V1，更新之后变成了 V2，那么需要新建一组 Value，然后将其中的 V1 变为 V2，因为不知道之前的那一组 Value 是否还有其他设备在引用，这样就会逐渐累积下去，要降低这种累积的话，还要设计清除算法，复杂度就上来。&lt;&#x2F;p&gt;
&lt;p&gt;不妨参考一下 Go 语言里 Slice 的设计，Slice 内部使用了一个数组，但可以指定使用该数组的哪一部分，其实就是索引。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_06.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样某个 Key 如果有新的 Value 了，只需在对应的 Key 后面 append 即可。此时需要同步更新设备的索引，这块可能花一点时间，如果数据都在内存的话其实也还好（由于只是存索引，因此这些数据量内存 hold 得住），持久化可以异步进行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;liu-liang&quot;&gt;流量&lt;&#x2F;h4&gt;
&lt;p&gt;上面已经说过，单个设备的量可以达到 100K，如果每次配置有更新就发送 100K 的数据对到达率会有一定影响，尤其在设备网络情况不佳的情况下。因此这里的目标是如何减少数据传输量，同时尽量避免提升复杂度。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;dui-shu-ju-jin-xing-ya-suo&quot;&gt;对数据进行压缩&lt;&#x2F;h5&gt;
&lt;p&gt;这是比较简单同时效果也不错的方法，这里需要考虑的几个点是压缩比和压缩&#x2F;解压缩速率以及资源消耗。参考&lt;a href=&quot;https:&#x2F;&#x2F;catchchallenger.first-world.info&#x2F;wiki&#x2F;Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO&quot;&gt;这篇文章&lt;&#x2F;a&gt;，可以发现 &lt;code&gt;lz4&lt;&#x2F;code&gt; 在压缩&#x2F;解压缩时间上非常有优势，同时资源占用也很少，就是压缩比不太高。而 &lt;code&gt;lzma&lt;&#x2F;code&gt; 则有更高的压缩比，因此可以参考不同的场景来选择合适的压缩方案。&lt;&#x2F;p&gt;
&lt;p&gt;这还会有一个问题，如果每次请求都进行压缩，效率就太低了，因此需要缓存，缓存的 Key 其实就是 Config Indexes 的哈希(&lt;code&gt;hash(&#x27;1,2;2,0&#x27;)&lt;&#x2F;code&gt;)。这样就需要对所有的 Config Index 存一份哈希值，然后根据这个哈希值去找对应的压缩后的文件。&lt;&#x2F;p&gt;
&lt;p&gt;需要考虑下缓存命中率，如果设备之间很难利用缓存，意义就不大。初步估计一下，这块问题应该不大，除非每个设备都有一份独特的配置。&lt;&#x2F;p&gt;
&lt;p&gt;还有一种常见的减少流量方案，就是使用 Diff。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;shi-yong-diff&quot;&gt;使用 Diff&lt;&#x2F;h5&gt;
&lt;p&gt;Diff 的话一种处理方式是把 K&#x2F;V 的索引放到客户端，然后比对两个索引的 Diff，再把真正的 Value Diff 下发到客户端进行合并。这样就会有一个问题，客户端需要上报它当前的配置中心的索引值，这就涉及到上报时机，有两种方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端轮询。比较低效，也无法保证实时，但不需要维护长链，实现起来相对简单。&lt;&#x2F;li&gt;
&lt;li&gt;服务端在得知更新后，主动向客户端要当前保存在客户端的 Config Indexes，对比之后再发送 Diff。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于第 2) 种情况，相比直接推送会多了一轮通信，同时对于两端都会增加一些复杂度(处理 Diff)，但好处是可以最大成都节省数据传输。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-she-bei&quot;&gt;多设备&lt;&#x2F;h3&gt;
&lt;p&gt;多设备对服务端的挑战比较大，如果设备数比较多，而服务器资源比较有限，可以考虑客户端轮询的方案，不过同样要处理峰值的情况，比如某次促销可能会带来大量的瞬时并发请求。简单的处理可以用令牌桶算法：桶里的令牌数代表服务器当前的承载能力，每次请求进来消耗一个令牌，如果令牌消耗完了，请求直接拒绝，等服务器缓过来了，再往桶里加令牌。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-wei-du&quot;&gt;多维度&lt;&#x2F;h3&gt;
&lt;p&gt;维度也就是设备的特征，一个设备会有多个特征，比如 &lt;code&gt;iOS 11&lt;&#x2F;code&gt;，&lt;code&gt;v9.3.6&lt;&#x2F;code&gt; 等，同样一个维度也会包含多台设备。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_07.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;维度的设计使用 Set 会比较合适，因为顺序无关，且将来设备的维度改变后，查找起来也会很快(比如当设备升级了版本，就要把设备从旧版本的维度变为新版本的维度)。所以需要在一个合适的时机去检查设备的维度是否需要更新，同时检查是否需要发送配置，这个时机选择在连接建立完成后异步执行比较合适。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-du-geng-xin&quot;&gt;维度更新&lt;&#x2F;h4&gt;
&lt;p&gt;假如设备从「维度 1」更新到了「维度 2」，怎么知道需要更新哪些 K&#x2F;V ？要解决这个问题，可以给维度也建一张表，来保存 Config 信息，Key 为维度名，Value 为 Config Index。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;最终的流程和设计如下：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;how-to-architecture-config&amp;#x2F;design_config_08.jpg&quot;
        width=&quot;1200&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本文主要提供了一种架构设计的思路，从最核心的需求开始，随着场景的变化，来不断完善、调整设计。结合常见的考虑点和适当的数据评估，选择相对简单的方案。在细化的过程中，一些问题就会浮现出来，尽早发现，尽早解决，等到开发甚至上线才发现就麻烦了，这也是架构设计的重要性。&lt;&#x2F;p&gt;
&lt;p&gt;最后，请有限度吐槽图片质量，博主已经很努力了···&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>轻量级低风险 iOS Hotfix 方案</title>
            <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-lightweight-hotfix/</link>
            <guid>https://limboy.me/posts/ios-lightweight-hotfix/</guid>
            <description>&lt;p&gt;我们都知道苹果对 Hotfix 抓得比较严，强大好用的 JSPatch 也成为了过去式。但即使测试地再细致，也难保线上 App 不出问题，小问题还能忍忍，大问题就得重新走发布流程，然后等待审核通过，等待用户升级，周期长且麻烦。如果有一种方式相对比较安全，不需要 JSPatch 那么完善，但也足够应付一般场景，使用起来还比较轻量就好了，这也是本文要探讨的主题。&lt;&#x2F;p&gt;
&lt;p&gt;要达到这个目的，Native 层只要透出两种能力就基本可以了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在任意方法前后注入代码的能力，可能的话最好还能替换掉。&lt;&#x2F;li&gt;
&lt;li&gt;调用任意类&#x2F;实例方法的能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;第 2 点不难，只要把 &lt;code&gt;[NSObject performSelector:...]&lt;&#x2F;code&gt; 那一套通过 &lt;code&gt;JSContext&lt;&#x2F;code&gt; 暴露出来即可。难的是第 1 点。其实细想一下，这不就是 AOP 么，而 iOS 有一个很方便的 AOP Library: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt;，只要把它的几个方法通过 JSContext 暴露给 JS 不就可以了么？&lt;&#x2F;p&gt;
&lt;p&gt;选择 Aspects 的原因是它已经经过了验证，不光是功能上的，更重要的是可以通过 AppStore 的审核。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is stable and used in hundreds of apps since it&#x27;s part of PSPDFKit, an iOS PDF framework that ships with apps like Dropbox or Evernote.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Aspects 使用姿势：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前插、后插、替换某个方法都可以。使用类的方式很简单，&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt; 即可，Selector 也一样 &lt;code&gt;NSSelectorFromString&lt;&#x2F;code&gt;，这样就能通过外部传入 String，内部动态构造 Class 和 Selector 来达到 Fix 的效果了。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式的安全性在于：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;不需要中间 JS 文件，准备工作全部在 Native 端完成。&lt;&#x2F;li&gt;
&lt;li&gt;没有使用 App Store 不友好的类&#x2F;方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设线上运行这这样一个 Class，由于疏忽，没有对参数做检查，导致特定情况下会 Crash。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MightyCrash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 传一个 0 就 gg 了
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;denominator
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;denominator;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在我们要避免 Crash，就可以通过这种方式来修复&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixScriptString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;fixInstanceMethodReplace(&amp;#39;MightyCrash&amp;#39;, &amp;#39;divideUsingDenominator:&amp;#39;, function(instance, originInvocation, originArguments){ \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    if (originArguments[0] == 0) { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        console.log(&amp;#39;zero goes here&amp;#39;); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } else { \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        runInvocation(originInvocation); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    } \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}); \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:fixScriptString&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行一下看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MightyCrash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;result: &lt;&#x2F;span&gt;&lt;span&gt;%.3f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divideUsingDenominator:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;won&amp;#39;t crash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; result: 0.333
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Javascript log: zero goes here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; won&amp;#39;t crash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It Works, 是不是有那么点意思了。以下是可以正常运行的代码，仅供参考。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Aspects.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;JavaScriptCore&#x2F;JavaScriptCore.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;Felix: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;Felix
&lt;&#x2F;span&gt;&lt;span&gt;+ (Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; Felix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        sharedInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sharedInstance;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;evalString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;javascriptString
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;javascriptString];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_context;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; dispatch_once_t onceToken;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onceToken, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        _context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[JSContext alloc] init];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [_context setExceptionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(JSContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Oops: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _context;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;isClassMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:&lt;&#x2F;span&gt;&lt;span&gt;(AspectOptions)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instanceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectorName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selectorName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixImpl:&lt;&#x2F;span&gt;&lt;span&gt;(JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;fixImpl &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(instanceName);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(isClassMethod) {
&lt;&#x2F;span&gt;&lt;span&gt;        klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(klass)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt; sel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString&lt;&#x2F;span&gt;&lt;span&gt;(selectorName);
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:sel withOptions:option usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [fixImpl callWithArguments:@[aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;originalInvocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;className &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(className);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj1:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString(selector) withObject:obj1 withObject:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; clang diagnostic pop
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fixIt
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixInstanceMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionBefore instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodReplace&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionInstead instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;fixClassMethodAfter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;instanceName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, JSValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fixImpl) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_fixWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspectionOptions:AspectPositionAfter instanceName:instanceName selectorName:selectorName fixImpl:fixImpl&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidClassWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runClassWithClassName:className selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWithNoParamter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith1Paramter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runVoidInstanceWith2Paramters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;instance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectorName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_runInstanceWithInstance:instance selector:selectorName obj1:obj1 obj2:obj2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;runInvocation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInvocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;invocation) {
&lt;&#x2F;span&gt;&lt;span&gt;        [invocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; helper
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;] evaluateScript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;var console = {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;log&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;message) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Javascript log: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,message);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>App 图片体验指标</title>
            <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/app-img-metrics/</link>
            <guid>https://limboy.me/posts/app-img-metrics/</guid>
            <description>&lt;p&gt;网络图片作为 App 的一个重要组成，自然也需要一些关键指标来衡量，有了指标方便看到优化的效果。不过目前貌似没有比较广泛采用的指标，跟其他公司交流时，当聊到 Crash 率，大家都有统一的认知，但聊到图片体验，就很难进行比较了：我们这块一直都不错，用户反馈也不多。但事实可能并不如此。&lt;&#x2F;p&gt;
&lt;p&gt;为什么图片的指标不好定？因为环境比较复杂，边界也不太好确定（不像 Crash，判断条件非常清晰）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;网速比较慢，图片出不来或出来得很慢正不正常。&lt;&#x2F;li&gt;
&lt;li&gt;图片本身就比较大，下载过程自然就慢了，耗时长一点也正常。&lt;&#x2F;li&gt;
&lt;li&gt;即使下载速度比较快，如果是单线程的话，显示上也是一张一张出来，体验并不好。&lt;&#x2F;li&gt;
&lt;li&gt;有时图片即使下载成功了，也有可能无法显示。&lt;&#x2F;li&gt;
&lt;li&gt;···&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果把图片从请求到渲染完成作为一个任务，这个任务的成功跟很多因素有关，但核心阻碍只有一个，就是「图片请求」，其他可优化的空间不多或效果不那么明显，且相对成熟（比如后台多线程下载，滑出屏幕时取消下载等）。因此图片体验的指标可以缩小范围为「图片请求指标」。&lt;&#x2F;p&gt;
&lt;p&gt;跟图片请求最相关的几个因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CDN&lt;&#x2F;li&gt;
&lt;li&gt;客户端网络状况&lt;&#x2F;li&gt;
&lt;li&gt;图片大小&lt;&#x2F;li&gt;
&lt;li&gt;图片格式&lt;&#x2F;li&gt;
&lt;li&gt;请求协议（http&#x2F;1.1 http&#x2F;2）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些就好像汽车的离合、油门、刹车可以供我们控制，也需要一个仪表盘来看到控制的效果。那这个仪表盘里显示的是什么？&lt;&#x2F;p&gt;
&lt;p&gt;我们希望显示的内容能真实地体现用户的图片体验。在这个前提下，很多因素就不需要考虑了，比如网络环境、机型等。因为同样一张图，如果 3 秒后还没有出来，无论是 wifi 还是 2G，这个体验就是不好的。&lt;&#x2F;p&gt;
&lt;p&gt;接下来再来看图片请求会有哪些结果，很简单，请求成功和请求失败。请求失败比较好办，失败就是失败了，记录一下即可。那么请求成功该怎么细分呢？&lt;&#x2F;p&gt;
&lt;p&gt;我们知道在 web 时代，如果页面 3 秒没有出来，用户离开网页的可能性就会高很多。在图片领域没有相对权威的值，因此结合真实体验，拟定了以下的体验指标：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;图片请求失败率:
&lt;&#x2F;span&gt;&lt;span&gt;	图片请求失败次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;图片请求耗时：
&lt;&#x2F;span&gt;&lt;span&gt;	优: 耗时在 (0, 1] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	良: 耗时在 (1, 2] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	中: 耗时在 (2, 3] 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;span&gt;	差: 耗时在 (3, ∞) 的次数 &#x2F; 图片请求次数
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于真实环境下图片请求次数会很大，因此可以设置采样率，比如 &lt;code&gt;1&#x2F;1000&lt;&#x2F;code&gt;，也就是 1000 次图片请求记录 1 次，将样本量缩到恰当的范围。&lt;&#x2F;p&gt;
&lt;p&gt;有了这 5 份数据，对于线上的图片体验就能有一定的了解了，接下来可以针对每份数据进行不同维度的数据聚合，比如：城市、网络类型、页面 URL、error_code、CDN 等。如果某个城市的图片访问出了问题，就能很快知道，或者某个 CDN 调整也能快速定位。&lt;&#x2F;p&gt;
&lt;p&gt;同时可以对每份数据的前 N 位 Top 用户进行记录，因为有可能某几个用户发生异常，贡献了大部分的数据。&lt;&#x2F;p&gt;
&lt;p&gt;在这些指标的基础上，可以再从图片大小、尺寸、CDN、网络请求等维度进行优化，方便验证效果。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The Right Way to Architect iOS App with Swift</title>
            <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-right-way-to-ios-architecture/</link>
            <guid>https://limboy.me/posts/the-right-way-to-ios-architecture/</guid>
            <description>&lt;p&gt;关于 iOS 架构的文章感觉已经泛滥了，前一阵正好 Android 官方推了一套 &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;guide.html&quot;&gt;App Architecture&lt;&#x2F;a&gt; ，于是就在想，对于 iOS 来说，怎样的架构才是最适合的。带着这个问题，我开始了探索。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-architecture-matters&quot;&gt;Why Architecture Matters?&lt;&#x2F;h2&gt;
&lt;p&gt;这是第一个也是最重要的问题，为什么会出现各种 Architecture Pattern？真的那么重要么？&lt;&#x2F;p&gt;
&lt;p&gt;我们来想一下，无论是做一个 App 还是搭一套后台系统，如果是一次性的，今天用完明天就可以扔掉，那么怎么快怎么来，代码重复、代码逻辑、代码格式统统不重要。&lt;&#x2F;p&gt;
&lt;p&gt;这种场景比较适合黑客马拉松，而真实情况往往是我们的代码需要上线，要对用户负责，而一套好的架构会让这些事情变得更加容易。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-jian-ji-qie-zheng-ji&quot;&gt;好的架构简洁且整洁&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s3.mogucdn.com&#x2F;mlcdn&#x2F;c45406&#x2F;170619_4e7gif674kdad56l6iek5lj8i7dl9_984x329.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;说到架构，往往会想到建筑，软件架构跟建筑不同的点是软件架构会随着时间的推移进行演进，而实体建筑则没这个特性。抛开时间维度，这二者还是有一定的相似性的。&lt;&#x2F;p&gt;
&lt;p&gt;好的架构容易催生好的代码，就像住在干净整洁的房子里，会下意识地让其中的家具、电器、摆饰等也井井有条。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-rang-dai-ma-geng-jia-rong-yi-wei-hu&quot;&gt;好的架构让代码更加容易维护&lt;&#x2F;h3&gt;
&lt;p&gt;不容易维护的代码往往有这么几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;抽象程度低&lt;&#x2F;li&gt;
&lt;li&gt;职责不明确&lt;&#x2F;li&gt;
&lt;li&gt;喜欢走捷径&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;好的架构能对 2 和 3 有一定的作用，对于第 1 点还是要看程序员的能力和经验。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chou-xiang-cheng-du-di&quot;&gt;抽象程度低&lt;&#x2F;h4&gt;
&lt;p&gt;这样的代码往往是命令式编程产生的，也就是像 CPU 那样的思考方式，把产品经理的需求直观地翻译成代码，而不对其中的共性、本质进行抽离和抽象，时间一长就容易看不懂其中的逻辑，需求一变就要改核心代码。&lt;&#x2F;p&gt;
&lt;p&gt;比如下面这段代码，不知道具体要完成什么任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcs43v88j20nk0damzy.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze-bu-ming-que&quot;&gt;职责不明确&lt;&#x2F;h4&gt;
&lt;p&gt;这也是产生「一大坨代码」的原因之一，就像 MVC 模式里，没有说明用户的操作应该在哪里处理，业务逻辑放在什么地方，这样就容易走捷径，怎么方便怎么来，而越是方便到后来就越容易出问题。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xi-huan-zou-jie-jing&quot;&gt;喜欢走捷径&lt;&#x2F;h4&gt;
&lt;p&gt;这是我们的天性，毕竟能够更快更方便地达到目标，为什么不做呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如我们都知道「通知」用起来很方便，所有涉及到单向数据传递的地方都可以使用，比如 Cell 通过通知向 VC 传递点击事件信息、Model 通过通知向 VC 传递数据信息、VC 之间通过通知进行解耦等等。&lt;&#x2F;p&gt;
&lt;p&gt;又比如可以很方便地在 VC 存储状态信息，慢慢地 VC 里这些状态变量就多了起来，到后来要维护这些变量就变得非常困难，出了问题也不好排查。&lt;&#x2F;p&gt;
&lt;p&gt;Clojure 的作者 Rich Hickey 有一个非常著名的 &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt; 分享&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple is often erroneously mistaken for easy. &amp;quot;Easy&amp;quot; means &amp;quot;to be at hand&amp;quot;, &amp;quot;to be approachable&amp;quot;. &amp;quot;Simple&amp;quot; is the opposite of &amp;quot;complex&amp;quot; which means &amp;quot;being intertwined&amp;quot;, &amp;quot;being tied together&amp;quot;. Simple != easy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Simple 是我们所追求的，而 Easy 往往会让事情往反方向发展。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-fu-gai-da-duo-shu-chang-jing&quot;&gt;好的架构能够覆盖大多数场景&lt;&#x2F;h3&gt;
&lt;p&gt;产品经理：老板说要做一个插座，具体怎么实现我不管，下周一就要。拿到这个需求之后，你觉得很简单，完美符合需求，就像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctgc56dj206u06ujrp.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可是好景不长，老板新买了一个电脑，只支持两相的插座，而且现在就要，作为工程师，你不能被这么简单朴实的需求难倒，于是稍微动了下脑筋，就出了一个解决方案：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtctvnyggj206c065dhe.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然丑陋，但是可以工作。但我们的目标不只是可以工作（紧急情况除外），更要优雅地工作。&lt;&#x2F;p&gt;
&lt;p&gt;举一个现实的例子，比如页面间支持通过 Router 进行跳转，但有一天发现有页面间通信的需求，然后就会出来一些 trick 的解决方案，比如发通知或者给 Router 加一个 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt; 的方法，本质上跟上图的解决方案没什么区别。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-de-jia-gou-neng-gou-ti-sheng-kai-fa-xiao-lu-fang-bian-ding-wei-wen-ti&quot;&gt;好的架构能够提升开发效率，方便定位问题&lt;&#x2F;h3&gt;
&lt;p&gt;好的架构能够支持多人并行开发、一定程度的代码复用、单元测试，出了问题能比较方便地找到原因。这几点是架构要解决的主要问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dang-qian-de-zhuang-tai&quot;&gt;当前的状态&lt;&#x2F;h2&gt;
&lt;p&gt;目前主流的主要有 MVC 和 MVVM，VIPER 用的会少一些，它们之间的优劣对比这里就不展开了，可以查看这篇文章来了解：&lt;a href=&quot;https:&#x2F;&#x2F;blog.coding.net&#x2F;blog&#x2F;ios-architecture-patterns&quot;&gt;iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译) - Coding 博客&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单总结下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MVC 模式过于简单，定的标准过于粗放， 容易滋生捷径。&lt;&#x2F;li&gt;
&lt;li&gt;MVVM 会好很多，但场景的覆盖还不够全，比如缺少页面间跳转／通信、数据获取等。&lt;&#x2F;li&gt;
&lt;li&gt;VIPER 更加细致，但有点臃肿。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-define-right&quot;&gt;How to Define “Right”&lt;&#x2F;h2&gt;
&lt;p&gt;每种架构都有自己的特点，如果要定义「Right」的话，至少要符合一些标准，以下是我整理的觉得比较重要的几条：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;尽量简单&lt;&#x2F;li&gt;
&lt;li&gt;结构清晰&lt;&#x2F;li&gt;
&lt;li&gt;职责明确&lt;&#x2F;li&gt;
&lt;li&gt;符合 GUI 编程的特点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jin-liang-jian-dan&quot;&gt;尽量简单&lt;&#x2F;h3&gt;
&lt;p&gt;简单的事物容易理解，也比较容易接受，用爱因斯坦的话来说「尽量简单，但不要过于简单」。VIPER 其实已经挺完善的了，但就是有点复杂，可以看&lt;a href=&quot;https:&#x2F;&#x2F;www.objc.io&#x2F;issues&#x2F;13-architecture&#x2F;viper&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-gou-qing-xi&quot;&gt;结构清晰&lt;&#x2F;h3&gt;
&lt;p&gt;清晰的结构让外人也能很快地知道每个目录是做什么的，里面的文件起着怎样的作用，自己维护起来也方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-ze-ming-que&quot;&gt;职责明确&lt;&#x2F;h3&gt;
&lt;p&gt;也就是 &lt;code&gt;Separation of Concern&lt;&#x2F;code&gt; ，每个单元只需要关心自己的事情，跟外部尽量解耦，这样无论是对代码复用和测试都会很有帮助。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-he-gui-bian-cheng-de-te-dian&quot;&gt;符合 GUI 编程的特点&lt;&#x2F;h3&gt;
&lt;p&gt;GUI 编程和其他的非界面编程还是有差异的，对 GUI 编程的特点进行合适地抽象，并在此基础上形成的架构才更有「对」的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;我比较认同 &lt;code&gt;view = render(state) + handle(event)&lt;&#x2F;code&gt; 这个定义，view 本身只做两件事，给 state 包一层漂亮的外衣，同时对用户的操作做出响应。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inspiring&quot;&gt;Inspiring&lt;&#x2F;h2&gt;
&lt;p&gt;差不多心里有谱了，现在来看看相关领域的架构大概是怎样的，找点启发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;android-architecture&quot;&gt;Android Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;Android 最近出了一套官方推荐的&lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;index.html&quot;&gt;架构&lt;&#x2F;a&gt;，挺细致的，主要的流程如下图所示&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;topic&#x2F;libraries&#x2F;architecture&#x2F;images&#x2F;final-architecture.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大意就是 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 通过调用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 从 &lt;code&gt;Model&lt;&#x2F;code&gt; 或 &lt;code&gt;Remote&lt;&#x2F;code&gt; 中获取数据，然后放到内置的 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 里，而 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 在 &lt;code&gt;Activity&lt;&#x2F;code&gt; 初始化时即被绑定，因此当 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 变化时，可以马上反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;当用户操作界面时，&lt;code&gt;Activity&lt;&#x2F;code&gt; 会捕获到这些事件，然后调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法，这些方法最终会导致 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 发生改变，再次反馈到界面。&lt;&#x2F;p&gt;
&lt;p&gt;整体也是 MVVM 的模式，但也有自己的特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;LiveData&lt;&#x2F;code&gt; 来做单向绑定。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Repository&lt;&#x2F;code&gt; 来统一数据的交互。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;Room&lt;&#x2F;code&gt; 作为持久层。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 供使用。&lt;&#x2F;li&gt;
&lt;li&gt;内置 &lt;code&gt;LifeCycle&lt;&#x2F;code&gt; 来简化跟生命周期相关的对象的操作，避免内存泄漏。（比如 ViewModel）&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;Dagger2&lt;&#x2F;code&gt; 这个依赖注入工具来避免依赖。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;elm-architecture&quot;&gt;Elm Architecture&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Elm is a functional language that compiles to JavaScript. It competes with projects like React as a tool for creating websites and web apps. Elm has a very strong emphasis on simplicity, ease-of-use, and quality tooling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Elm 是一个主打函数式编程，同时通过强大的编译器来尽量确保没有 runtime error 的编程语言，著名的 Redux 就是受它启发。来感受下它的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Html&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Html.Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;beginnerProgram &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type Msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;Decrement
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;msg model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Decrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;toString model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick Increment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;+&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 4 块，&lt;code&gt;model&lt;&#x2F;code&gt; , &lt;code&gt;view&lt;&#x2F;code&gt; , &lt;code&gt;update&lt;&#x2F;code&gt; , &lt;code&gt;message&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;view 展示 model 数据，同时将用户的操作作为 message 抛出。&lt;&#x2F;li&gt;
&lt;li&gt;model 包含了页面所需的所有信息。&lt;&#x2F;li&gt;
&lt;li&gt;当 message 被抛出时，会自动进入到 update 方法，update 返回的新 model 自动进入到 view 里被展示。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcussf1ij20e00983yw.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟其他的前端框架不同，Elm 不喜欢 parent-child communication, 也不提倡 components，作为函数式编程语言，它在乎的就是创建 function，通过 &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;reuse&#x2F;&quot;&gt;helper function&lt;&#x2F;a&gt; 来达到类似的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vue-architecture&quot;&gt;Vue Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcv8rgczj20io09wq3l.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Vue 也是采用的 MVVM 模式，把数据绑定在内部处理了，对外部来说只要在 &lt;code&gt;data&lt;&#x2F;code&gt; 里声明特定的 key，在 &lt;code&gt;view&lt;&#x2F;code&gt; 里就可以直接使用，并且实时响应。对于 &lt;code&gt;view&lt;&#x2F;code&gt; 的事件，也会映射到 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的特定方法。&lt;&#x2F;p&gt;
&lt;p&gt;Vue 的 &lt;code&gt;Router&lt;&#x2F;code&gt; 是把 path 映射到 component 上，看着也比较清晰。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;user&#x2F;:id&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, component: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-right-way-imo&quot;&gt;The Right Way (IMO)&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcvlcjgyj20dw0xg76t.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;目录结构需要能够让不同职责的文件找到自己的归属，同时尽量清晰。这个是我目前觉得还不错的分类&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;External&lt;&#x2F;code&gt; ：一些第三方的 framework。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Extensions&lt;&#x2F;code&gt; : 针对当前 App 做的一些针对性扩展。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;&#x2F;code&gt; : 比较重要的基础组件，在前期就要管控起来。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Models&lt;&#x2F;code&gt; : 对应服务端的 Objects。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Views&lt;&#x2F;code&gt; : 页面。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Shared&lt;&#x2F;code&gt; : 会在 App 内部被公用的部分，方便统一管控。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Utilities&lt;&#x2F;code&gt; : 一些帮助类。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxzpz4yj218m0mw0vs.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本质上跟 MVVM 差不多，只是多补充了些细节。之前也有考虑过采用 ReSwift + RxSwift 的方式，也就是 Redux，后来写下来发现还是有点复杂：比如下拉刷新的 3 个 state （ loading &#x2F; loaded &#x2F; failed），action 要定义（毕竟获取数据的逻辑写在 Action 中），state 中也要定义（视图最终关心的是 state 的变化）；没有很方便的 diff 支持等。于是就回归到了 MVVM 模式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;p&gt;ViewModel 主要有 3 个职责：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Repository 获取&#x2F;修改数据。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 供 View 使用。&lt;&#x2F;li&gt;
&lt;li&gt;提供 &lt;code&gt;Functions&lt;&#x2F;code&gt; 供 View 调用，通常会导致 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 的改变。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这块也算是常规手法，需要注意的一点是 Repository 的初始化，如果要方便测试的话，最好提供注入点（比如初始化时注入或提供 set 方法注入）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;repository&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 的职责就是跟数据打交道，获取远程／本地数据，并将其转换成 Model 返回给 ViewModel。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ye-mian-jian-tiao-zhuan-he-tong-xin&quot;&gt;页面间跳转和通信&lt;&#x2F;h4&gt;
&lt;p&gt;使用 Router 即可，如果是内部的 VC 之间跳转，还可以携带 model 信息。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yong-de-xiao-mo-kuai-components&quot;&gt;通用的小模块( Components )&lt;&#x2F;h4&gt;
&lt;p&gt;我发现前端开发里，&lt;code&gt;Components&lt;&#x2F;code&gt; 用得还蛮多的，客户端开发倒不那么常见。这些小模块其实就是一些可在多个页面复用的业务相关的视图（Widget），可能带有业务逻辑，方便复用，比如「赞」按钮。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-wu-diao-yong&quot;&gt;服务调用&lt;&#x2F;h4&gt;
&lt;p&gt;比如在详情页要使用购物车的「加购」功能，通常做法是采用 &lt;code&gt;Register Procotol&lt;&#x2F;code&gt; 方式，维护一个 Protocol 和 Class 的注册表，并且在 App 启动时进行注册。我发现使用 Swift 的 POP 就不需要这么麻烦了，具体怎么做，我们后面讲。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;这个 Demo 演示了知乎日报的列表和详情页：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcx5hukwj20lt0ijq3x.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看起来蛮简单的，不过事实可能并非如此，我们来慢慢捋一下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;chu-shi-ye&quot;&gt;初始页&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fgtcxfxauej20af0ijwek.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;刚进来时，会处于原始的 loading 状态，这个状态不同于下拉刷新，可能是一个萌萌的 loading 图。&lt;&#x2F;p&gt;
&lt;p&gt;首先这个页面属于 &lt;code&gt;NewsFeed&lt;&#x2F;code&gt; 页，因此在该目录下新建 3 个文件&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;|- NewsFeedViewModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span&gt;|- NewsFeedRepository.swift
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;本着 view 只是展示 state 的原则，我们首先要处理的就是 state，那么怎么处理？ 这个 Event 是从 View 那边触发的，触发之后，对于 View 来说只能求助于 ViewModel，于是 VM 就提供了一个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 方法。&lt;&#x2F;p&gt;
&lt;p&gt;那这个 &lt;code&gt;initialLoading&lt;&#x2F;code&gt; 里该做些什么呢？其实也就是根据 repository 的不同结果，设置不同的 state，然后 view 来响应这些 state。同时考虑到之后的「下拉刷新」和「加载更多」，顺便分离出一个通用的 &lt;code&gt;loadData:&lt;&#x2F;code&gt; 方法&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-1&quot;&gt;ViewModel&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; todo
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么 &lt;code&gt;Observable Properties&lt;&#x2F;code&gt; 应该是怎样的呢？在 OC 时代，只要简单的暴露 readonly 的 property，外部无论是 KVO 还是 RAC 都能很方便地进行绑定，到了 swift 时代，如果要做 KVO 就要继承 &lt;code&gt;NSObject&lt;&#x2F;code&gt;，还要加一个 &lt;code&gt;@dynamic&lt;&#x2F;code&gt; 前缀，不优雅。比较理想的状态是使用 RxSwift 的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 作为属性，外部只要 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 就行了。不过在内部如何给这个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 塞数据又有点小问题。最终决定使用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 作为暴露的属性，它的好处是内部不需要再新建一个变量，直接设置这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的 &lt;code&gt;value&lt;&#x2F;code&gt; 即可，弊端就是对于使用方需要先通过 &lt;code&gt;asObservable()&lt;&#x2F;code&gt; 转一下再进行 subscribe，并且只要愿意，也可以设置 &lt;code&gt;value&lt;&#x2F;code&gt; 值，存在误操作的风险。在这里我们先简单起见用 &lt;code&gt;Variable&lt;&#x2F;code&gt; 来做。&lt;&#x2F;p&gt;
&lt;p&gt;接下来的问题就是这个 &lt;code&gt;Variable&lt;&#x2F;code&gt; 里应该放什么？肯定要放一些当前的 loading 状态，比如 loaded，failed，loading 这些，那么要不要带上 data？如果不一起带上 data，那么状态的改变和数据的改变就不是一个原子操作，有可能会带来一些异常（比如 view 发现 loading 状态变为 loaded，自动去取最新的 data，但此时 data 可能还没有改变）。因此，我把它们都放到了一起，首先来看一下 &lt;code&gt;ResultModel&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;model&quot;&gt;Model&lt;&#x2F;h4&gt;
&lt;p&gt;这是一个通用的数据结构&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ResultModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; initial, refresh, more
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; LoadingStatus: Equatable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loading
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; loaded
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; failure(Error)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;==(lhs: LoadingStatus, rhs: LoadingStatus) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; (lhs, rhs) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loading):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loaded):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingStatus: LoadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; loadingType: LoadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;initial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [T]()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsModel.swift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; news:Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ResultModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span&gt; Variable(ResultModel())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;initialLoading() {
&lt;&#x2F;span&gt;&lt;span&gt;        loadData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initial)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;loadData(_ loadingType: LoadingType, offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2 如果当前处于 loading 状态，就不继续处理了
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3 设置新的 loading 类型和状态
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loading
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loadingType
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4 接下来就是发网络请求，根据不同的请求结果设置 state
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里使用 &lt;code&gt;static&lt;&#x2F;code&gt; 主要是出于方便。&lt;&#x2F;li&gt;
&lt;li&gt;这里纠结了一段时间，之前是新建了 3 个 loading status（initial, refresh, loadmore），然后每个 status 再细分为 3 种状态(loading, loaded, error)，后来发现这样的话，「当前是哪个 loading status，该 status 目前处于什么状态」判断起来会比较麻烦。于是就按照现在这样进行了拆分。&lt;&#x2F;li&gt;
&lt;li&gt;在这里对状态进行更改之后，UI 那边可以自动收到更新。&lt;&#x2F;li&gt;
&lt;li&gt;这里会调用 Repository 来获取数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;repository-1&quot;&gt;Repository&lt;&#x2F;h4&gt;
&lt;p&gt;Repository 这块由于是异步交互，因此直接就上 RxSwift 了，返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; ，VM 作为消费方来订阅。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;RxSwift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedRepository {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;news(_ offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any]?&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create({ observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;characters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;before&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;api&#x2F;4&#x2F;news&#x2F;latest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Resource(path: path, method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;GET, requestBody: nil, headers: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;], parse: decodeJSON)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个用的是 chris 开源的简单的 API 请求封装 http:&#x2F;&#x2F;chris.eidhof.nl&#x2F;posts&#x2F;tiny-networking-in-swift.html
&lt;&#x2F;span&gt;&lt;span&gt;            apiRequest(baseURL: URL(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;news-at.zhihu.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;, resource: resource, failure: { (reason, result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(reason))
&lt;&#x2F;span&gt;&lt;span&gt;            }, success: { result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在这里直接返回解析后的 Model，这样 VM 那边就不用处理了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewmodel-diao-yong-repository&quot;&gt;ViewModel 调用 Repository&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 json 转换为 model
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsedResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_parseResult(result: result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 设置对应的 value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;more {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; (parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? [])
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news ?? []
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;loaded
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsedResult?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;date ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 统一设置 value，对外部 subscriber 来说就是原子操作
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }, onError: { (error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;failure(error)
&lt;&#x2F;span&gt;&lt;span&gt;    }, onCompleted: {
&lt;&#x2F;span&gt;&lt;span&gt;    }) {
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里你会注意到有一个 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; ，这个主要是提供灵活性，避免暴力的 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; ，比如获取到了更多的数据之后，可以只 reload 新的数据。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NewsFeedViewController.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController: UITableViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;        viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoading()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stopAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loaded {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这里调用 Diff 这个 framework 提供的 extension
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;animateRowChanges(oldData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;previousItems, newData: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;initial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadingStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;loading {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;initialLoadingIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;startAnimating()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;「正在加载」和「已经加载」的场景已经处理完了，「加载失败」的处理也类似，比如失败之后显示一个 reload button，点击 reload button 之后，再调用一下 &lt;code&gt;viewModel.initialLoading()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tableview&quot;&gt;TableView&lt;&#x2F;h4&gt;
&lt;p&gt;接下来就来看看如何处理 TableView 的数据展示，其实就是消费 VM 的 property&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里最基本的首页数据展示就基本完成了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jia-zai-geng-duo&quot;&gt;加载更多&lt;&#x2F;h3&gt;
&lt;p&gt;之前一直在纠结这块到底该怎么做才比较合适，如果直接把 newItems append 到原有的 items 列表，形成新的列表，UI 那边拿到之后就只能 &lt;code&gt;reloadData()&lt;&#x2F;code&gt; 了，最好能让 UI 那边知道新的和旧的之间发生了哪些变化，于是就找到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wokalski&#x2F;Diff.swift&quot;&gt;Diff&lt;&#x2F;a&gt; 这个 framework，它能够定位出两个 collection 之间的差异，但前提是 collection item 要实现 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议。于是就有了 &lt;code&gt;previousItems&lt;&#x2F;code&gt; 和 &lt;code&gt;currentItems&lt;&#x2F;code&gt; 的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-huan-gong-neng&quot;&gt;喜欢功能&lt;&#x2F;h3&gt;
&lt;p&gt;喜欢功能本质上是修改 NewsItem 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，然后让 UI 可以感知到这个变化。这里问题就来了：如何对列表中的一个 &lt;code&gt;struct&lt;&#x2F;code&gt; 进行调整？我们知道 &lt;code&gt;struct&lt;&#x2F;code&gt; 是值拷贝的，只要发生赋值行为，拿到的就不再是原先的那个 struct 了（比如把 items 通过参数传递，要修改的话就要进行拷贝，除非设置为 &lt;code&gt;inout&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;这个问题本质上是如何操作 Immutable Objects，然后就想到了 &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;immutable-js&#x2F;&quot;&gt;Immutable.js&lt;&#x2F;a&gt;，它也提供了一些修改 List 的方法，只不过都是返回一个新的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;immutable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;])]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setIn&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;999&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; List [ 0, 1, 2, List [ 999, 4 ] ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，这里简单的处理方式就是通过传进来的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 找到它在 list 中的 index（&lt;code&gt;newsItem&lt;&#x2F;code&gt; 已经实现了 &lt;code&gt;Equatable&lt;&#x2F;code&gt; 协议），然后把修改过 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性的新的 &lt;code&gt;newsItem&lt;&#x2F;code&gt; 放到 index 位置来达到替换的效果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;toggleFav(_ newsItem: NewsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; newsIndex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;index(of: newsItem) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; _newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex]
&lt;&#x2F;span&gt;&lt;span&gt;            _newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span&gt;_newsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[newsIndex] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _newsItem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;components&quot;&gt;Components&lt;&#x2F;h4&gt;
&lt;p&gt;由于新闻列表和喜欢的新闻列表表现上一致，那么就可以进行一些复用，比如可以把 Cell 作为 Component。&lt;&#x2F;p&gt;
&lt;p&gt;那对于一个 Component 来说，需要具备哪些特性呢？这个并没有什么约定，本质上就是一个或几个函数，外部调用后会返回一个 view，或者提供一些 block 回调，仅此而已。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;truth-and-computed-properties&quot;&gt;Truth and Computed Properties&lt;&#x2F;h4&gt;
&lt;p&gt;这里的 &lt;code&gt;Truth&lt;&#x2F;code&gt; 是指最源头的数据，比如一个数组，&lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 是指对源头数据进行消费可以得到的结果，比如数组的长度，或数组中的正数等。&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;Truth&lt;&#x2F;code&gt; 就是 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 列表，而喜欢的 &lt;code&gt;newsItems&lt;&#x2F;code&gt; 就是 &lt;code&gt;Computed Properties&lt;&#x2F;code&gt; 。因此只要 newsItems 发生变化，就重新计算喜欢的 NewsItems。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;filter { (item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xi-huan-gong-neng-de-view&quot;&gt;喜欢功能的 View&lt;&#x2F;h4&gt;
&lt;p&gt;主要就是两件事：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;点击 Fav 按钮时，调用 VM 的 &lt;code&gt;toggleFav&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;li&gt;当 Fav 列表更新时，刷新 TableView。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; FavedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UITableViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dequeueReusableCell(withIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as!&lt;&#x2F;span&gt;&lt;span&gt; NewsCell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favedNews&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configure(newsItem) { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] (button) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;                button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;normal)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ye-mian-tiao-zhuan&quot;&gt;页面跳转&lt;&#x2F;h3&gt;
&lt;p&gt;页面间的跳转用到了 &lt;code&gt;Router&lt;&#x2F;code&gt; ，也就是 open 一个 url 就能到达特定的页面，这么做的好处是可以和外部跳转进来的情况统一处理（因为从外部跳到某个 app 只能通过 openURL）。&lt;&#x2F;p&gt;
&lt;p&gt;但在内部直接输入 URL 总觉得不优雅，而且容易出错，将来如果要修改 URL 也不方便。因此做了一个简单的 &lt;code&gt;Router&lt;&#x2F;code&gt; 来达到这个效果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UIKit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; RouterTable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;home&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; detail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;detail&#x2F;:id&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;asController() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; UIViewController.Type {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span&gt;to(_ route: RouterTable, parameters: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, Any&amp;gt;?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asController()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2.1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (key, value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; parameters {
&lt;&#x2F;span&gt;&lt;span&gt;                viewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;putExtra(key, value)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: 添加 shouldBePushed 调用，比如有些页面需要先登录
&lt;&#x2F;span&gt;&lt;span&gt;        DispatchQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;async {
&lt;&#x2F;span&gt;&lt;span&gt;            UINavigationController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;pushViewController(viewController, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; Router {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;parseURL(_ url: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (RouterTable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;?) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;TODO: add implementation
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;home, nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要分为 3 部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;这个跟 vue-router 里定义 url 和 components 的关系一样，主要是为了方便统一管理。&lt;&#x2F;li&gt;
&lt;li&gt;这里主要是把 enum 转换为对应的 Controller，因为限制了类型，也就不会出现找不到 VC 的情况。&lt;&#x2F;li&gt;
&lt;li&gt;这个是用来应对外部跳转进来的 URL，把它解析成 &lt;code&gt;RouterTable&lt;&#x2F;code&gt;，统一逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对 2 重点说一下，这个是最简实现，真实场景会比这复杂得多，比如有些页面是 present 出来的，有些页面 push 前需要先判断是否登录等等。&lt;&#x2F;p&gt;
&lt;p&gt;注意到 &lt;code&gt;2.1&lt;&#x2F;code&gt; 的部分，这里有一个 &lt;code&gt;putExtra&lt;&#x2F;code&gt; 方法，这是新添加的一个扩展，参考了 Android 的 &lt;code&gt;Intent&lt;&#x2F;code&gt; &lt;code&gt;putExtra&lt;&#x2F;code&gt; 。实现如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any)
&lt;&#x2F;span&gt;&lt;span&gt;    func getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension UIViewController: ViewCotrollerIntent {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private struct&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; extra: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;:Any] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;putExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, _ value: Any) {
&lt;&#x2F;span&gt;&lt;span&gt;        IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;getExtra(_ key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IntentStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extra[key]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于 extension 不支持 associated properties，因此用 struct 做了个中转。这样，VC 之间的跳转如果要带上额外的参数，只要放到 extra 里即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qing-ye&quot;&gt;详情页&lt;&#x2F;h3&gt;
&lt;p&gt;详情页比较简单，只是展示一个 webview，这里比较棘手的问题是 model 数据的同步。由于详情页也可以修改 &lt;code&gt;NewsItem&lt;&#x2F;code&gt; 的 &lt;code&gt;hasFaved&lt;&#x2F;code&gt; 属性，这个改变需要能够实时同步到列表页，不然就会出现状态不同步的情况。&lt;&#x2F;p&gt;
&lt;p&gt;这块的设计也想了一段时间，Pinterest 采用的是&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@Pinterest_Engineering&#x2F;immutable-models-and-data-consistency-in-our-ios-app-d10e248bfef8&quot;&gt;通知的方式&lt;&#x2F;a&gt;，并且额外开发了一个用来支持这种方式的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pinterest&#x2F;plank&quot;&gt;库&lt;&#x2F;a&gt;，不想整的这么麻烦。本质需求是：当传过去的 model 发生变化时通知我。而 RxSwift 里的 &lt;code&gt;Variable&lt;&#x2F;code&gt; 不是正好可以达到这个效果么？于是就有了基于 &lt;code&gt;Variable&lt;&#x2F;code&gt; 的解决方案。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItem: NewsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewsFeedViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;news&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;currentItems[indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;row]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; newsItemVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;(newsItem)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 详情页可能会对这个 newsItemVariable 进行调整
&lt;&#x2F;span&gt;&lt;span&gt;        newsItemVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 找到这个 item 所在的 index，并进行替换
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;update(item: item)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reloadData()
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 带上这个 Variable 到新的 VC
&lt;&#x2F;span&gt;&lt;span&gt;        Router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;detail, parameters: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: newsItemVariable])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;xiang-qing-ye-view-de-chu-li&quot;&gt;详情页 View 的处理&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; NewsDetailViewController: UIViewController {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;viewDidLoad() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        navigationItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rightBarButtonItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; favButton
&lt;&#x2F;span&gt;&lt;span&gt;        favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tap
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toggleFav()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; viewModel.load(id)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;getExtra(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;model&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as?&lt;&#x2F;span&gt;&lt;span&gt; Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;NewsItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;load(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id))
&lt;&#x2F;span&gt;&lt;span&gt;            NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        handleDataChange()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleDataChange() {
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsDetail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URLRequest(url: URL(string: item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;shareURL)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;webView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadRequest(request)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NewsDetailViewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;newsItem?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unowned self&lt;&#x2F;span&gt;&lt;span&gt;] item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;favButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hasFaved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♥︎&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;♡&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里为通过外部 URL 进来的留一个入口。&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;code&gt;getExtra&lt;&#x2F;code&gt; 拿到 &lt;code&gt;Variable&lt;&#x2F;code&gt; 后，接下来就交给 VM 了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;handleDataChange&lt;&#x2F;code&gt; 做的事情就是响应 VM 的 properties 的变化，做一些 UI 上的调整。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;service&quot;&gt;Service&lt;&#x2F;h3&gt;
&lt;p&gt;之前说过使用 Swift 提供 Service 会比较方便，都不需要在 App 启动时进行注册，利用自带的 Protocol Extension 就能达到效果。这个例子中没有用到，就举个其他的例子吧，以购物车为例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 放在 Services 目录下的 Protocols.swift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt; Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 具体的实现可以放到对应的页面
&lt;&#x2F;span&gt;&lt;span&gt;extension Cart {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;add(_ item: Item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; business logic
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于想要使用这个功能的开发来说，只要看 &lt;code&gt;Services&#x2F;Protocols.swift&lt;&#x2F;code&gt; 就行了。跟 Objective-C 不同，extension 里如果有两个相同的方法，编译器会直接报错，这样就避免了运行期可能出现多个实现的问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;local-reasoning&quot;&gt;Local Reasoning&lt;&#x2F;h3&gt;
&lt;p&gt;Local Reasoning 的意思是对于数据的改动都发生在某一个特定的单元。这也是使用 Value Type 的好处，因为如果使用 Reference Type，只要把其中的一个 Reference 给了出去，就不知道什么时间什么场景下数据会在外部被改变，就像给了你一张银行卡，今天看还剩 1 万，可能明天再去看就只剩 1 千了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 VM 后，所有对数据的改动都发生在 VM 里面，同时对数据的消费也尽量在一个地方，方便维护。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;以上是我自己对「Right Architecture」的一些理解和实践，实际过程中肯定还有很多细节要调整，如果你有什么想法欢迎交流～&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Demo 在这里：https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;ZhihuDailyDemo&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>是时候学习 RxSwift 了</title>
            <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/time-to-learn-rxswift/</link>
            <guid>https://limboy.me/posts/time-to-learn-rxswift/</guid>
            <description>&lt;p&gt;相信在过去的一段时间里，对 RxSwift 多少有过接触或耳闻，或者已经积累了不少实战经验。此文主要针对那些在门口徘徊，想进又拍踩坑的同学。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-xue-xi-rxswift&quot;&gt;为什么要学习 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;当决定做一件事情时，至少要知道为什么。RxSwift 官网举了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;RxSwift&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;Why.md&quot;&gt;几个例子&lt;&#x2F;a&gt;，比如可以统一处理 &lt;code&gt;Delegate&lt;&#x2F;code&gt;, &lt;code&gt;KVO&lt;&#x2F;code&gt;, &lt;code&gt;Notification&lt;&#x2F;code&gt;，可以绑定 UI，方便网络请求的处理等等。但这些更多的是描述可以用 RxSwift 来做什么，跟为什么要使用 RxSwift 还是会有点不同。&lt;&#x2F;p&gt;
&lt;p&gt;我们先来分析下 GUI 编程的本质，我喜欢把它抽象为视图和数据的结合。其中视图负责两件事：展示和交互，展示什么由数据决定。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474678383.jpg&quot;
        width=&quot;1276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中单向数据流可以通过&lt;a href=&quot;http:&#x2F;&#x2F;limboy.me&#x2F;tech&#x2F;2016&#x2F;12&#x2F;04&#x2F;reswift-analyze.html&quot;&gt;之前介绍的 ReSwift&lt;&#x2F;a&gt; 完成。看起来好像没 RxSwift 什么事情，其实不然，RxSwift 可以在 UniDirectional Data Flow 的各个阶段都发挥作用，从而让 Data 的处理和流动更加简洁和清晰。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814474032179.jpg&quot;
        width=&quot;1272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过对 RxCocoa 的各种回调进行统一处理，方便了「Interact」的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的 transform 和 composite，方便了 &lt;code&gt;Action&lt;&#x2F;code&gt; 的生成（比如使用 &lt;code&gt;throttle&lt;&#x2F;code&gt; 来压缩 &lt;code&gt;Action&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;通过对网络请求以及其他异步数据的获取进行 &lt;code&gt;Observable&lt;&#x2F;code&gt; 封装，方便了异步数据的处理。&lt;&#x2F;li&gt;
&lt;li&gt;通过 RxCocoa 的 binding，方便了数据的渲染。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以 ReSwift 规范了数据流，RxSwift 为数据的处理提供了方便，这两个类库的结合，可以产生清晰的架构和易维护的代码。&lt;&#x2F;p&gt;
&lt;p&gt;当然，前提是对它们有足够的了解，尤其是 RxSwift，也就是我们今天的主角。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-rxswift&quot;&gt;什么是 RxSwift&lt;&#x2F;h3&gt;
&lt;p&gt;在 GUI 编程中，我认为比较复杂的有三个部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;非原生 UI 效果的实现（比如产品经理们经常冒出来的各种想法）。&lt;&#x2F;li&gt;
&lt;li&gt;大量状态的维护。&lt;&#x2F;li&gt;
&lt;li&gt;异步数据的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1）不在这次的讨论范畴（这里的学问也很多，比如流畅性和性能）。2) 可以通过单向数据流来解决（结合 Immutable Data）。3) 可以通过 RxSwift 来解决。那么 RxSwift 是如何处理异步数据的呢？&lt;&#x2F;p&gt;
&lt;p&gt;在说 RxSwift 之前，先来说下 Rx， &lt;a href=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;&quot;&gt;ReactiveX&lt;&#x2F;a&gt; 是一种编程模型，最初由微软开发，结合了观察者模式、迭代器模式和函数式编程的精华，来更方便地处理异步数据流。其中最重要的一个概念是 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;举个简单的例子，当别人在跟你说话时，你就是那个观察者，别人就是那个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，它有几个特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可能会不断地跟你说话。（&lt;code&gt;onNext:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;可能会说错话。（&lt;code&gt;onError:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;结束会说话。（&lt;code&gt;onCompleted&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;你在听到对方说的话后，也可以有几种反应：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;根据说的话，做相应的事，比如对方让你借本书给他。（&lt;code&gt;subscribe&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;把对方说的话，加工下再传达给其他人，比如对方说小张好像不太舒服，你传达给其他人时就变成了小张失恋了。（&lt;code&gt;map:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;参考其他人说的话再做处理，比如 A 说某家店很好吃，B 说某家店一般般，你需要结合两个人的意见再做定夺。（&lt;code&gt;zip:&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以，从生活中也能看到 Rx 的影子。「有些事情急不得，你得等它自己熟」，异步，其实就是跟时间打交道，不同的时间，拿到的数据也会不一样。可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&quot;&gt;在线感受下&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814518766811.jpg&quot;
        width=&quot;1626&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的核心是当数据有变化时，能够立刻知晓，并且通过组合和转换后，可以即时作出响应。有点像塔防，先在路上的各个节点埋好武器，然后等着小怪兽们过来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rxswift-workflow&quot;&gt;RxSwift Workflow&lt;&#x2F;h3&gt;
&lt;p&gt;大致分为这么几个阶段：先把 Native Object 变成 Observable，再通过 Observable 内置的各种强大的转换和组合能力变成新的 Observable，最后消费新的 Observable 的数据。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;time-to-learn-rxswift&amp;#x2F;14814540314644.jpg&quot;
        width=&quot;1448&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;native-object-observable&quot;&gt;Native Object -&amp;gt; Observable&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;rx-extension&quot;&gt;.rx extension&lt;&#x2F;h5&gt;
&lt;p&gt;假设需要处理点击事件，正常的做法是给 Tap Gesture 添加一个 Target-Action，然后在那里实现具体的逻辑，这样的问题在于需要重新取名字，而且丢失了上下文。RxSwift (确切说是 RxCocoa) 给系统的诸多原生控件（包括像 &lt;code&gt;URLSession&lt;&#x2F;code&gt;）提供了 rx 扩展，所以点击的处理就变成了这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tapBackground &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UITapGestureRecognizer()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tapBackground&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;event
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;endEditing(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addGestureRecognizer(tapBackground)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是简洁了很多。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;observable-create&quot;&gt;Observable.create&lt;&#x2F;h5&gt;
&lt;p&gt;通过这个方法，可以将 Native 的 object 包装成 &lt;code&gt;Observable&lt;&#x2F;code&gt;，比如对网络请求的封装：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;response(_ request: URLRequest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;(Data, HTTPURLResponse)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dataTaskWithRequest(request) { (data, response, error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(data, httpResponse))
&lt;&#x2F;span&gt;&lt;span&gt;			observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;resume()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create {
&lt;&#x2F;span&gt;&lt;span&gt;			task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;cancel()
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;出于代码的简洁，略去了对 error 的处理，使用姿势类似&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response(aRequest)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(data)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有两个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Observerable&lt;&#x2F;code&gt; 返回的是一个 &lt;code&gt;Disposable&lt;&#x2F;code&gt;，表示「可扔掉」的，扔哪里呢，就扔到刚刚创建的袋子里，这样当袋子被回收（&lt;code&gt;dealloc&lt;&#x2F;code&gt;）时，会顺便执行一下 &lt;code&gt;Disposable.dispose()&lt;&#x2F;code&gt;，之前创建 &lt;code&gt;Disposable&lt;&#x2F;code&gt; 时申请的资源就会被一并释放掉。&lt;&#x2F;li&gt;
&lt;li&gt;如果有多个 subscriber 来 subscribe &lt;code&gt;response(aRequest)&lt;&#x2F;code&gt; 那么会创建多个请求，从代码也可以看得出来，来一个 observer 就创建一个 task，然后执行。这很有可能不是我们想要的，如何让多个 subscriber 共享一个结果，这个后面会提到。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;variable&quot;&gt;Variable()&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Variable(value)&lt;&#x2F;code&gt; 可以把 value 变成一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，不过前提是使用新的赋值方式 &lt;code&gt;aVariable.value = newValue&lt;&#x2F;code&gt;，来看个 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; magicNumberVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Variable(magicNumber)
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;asObservable()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;magic number is &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;magicNumberVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;73
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; magic number is 73
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;起初看到时，觉得还蛮神奇的，跟进去看了下，发现是通过 &lt;code&gt;subject&lt;&#x2F;code&gt; 来做的，大意是把 &lt;code&gt;value&lt;&#x2F;code&gt; 存到一个内部变量 &lt;code&gt;_value&lt;&#x2F;code&gt; 里，当调用 &lt;code&gt;value&lt;&#x2F;code&gt; 方法时，先更新 &lt;code&gt;_value&lt;&#x2F;code&gt; 值，然后调用内部的 &lt;code&gt;_subject.on(.next(newValue))&lt;&#x2F;code&gt; 方法告知 subscriber。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;subject&quot;&gt;Subject&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;&#x2F;code&gt; 简单来说是一个可以主动发射数据的 &lt;code&gt;Observable&lt;&#x2F;code&gt;，多了 &lt;code&gt;onNext(value)&lt;&#x2F;code&gt;, &lt;code&gt;onError(error)&lt;&#x2F;code&gt;, &#x27;onCompleted&#x27; 方法，可谓全能型选手。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐶&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🐱&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;记得在 RAC 时代，subject 是一个不太推荐使用的功能，因为过于强大了，容易失控。RxSwift 里倒是没有太提及，但还是少用为佳。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;observable-new-observable&quot;&gt;Observable -&amp;gt; New Observable&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;&#x2F;code&gt; 的强大不仅在于它能实时更新 value，还在于它能被修改／过滤／组合等，这样就能随心所欲地构造自己想要的数据，还不用担心数据发生变化了却不知道的情况。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;combine&quot;&gt;Combine&lt;&#x2F;h5&gt;
&lt;p&gt;Combine 就是把多个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 组合起来使用，比如 &lt;code&gt;zip&lt;&#x2F;code&gt; (小提示：如果对这些函数不太敏感，可以&lt;a href=&quot;http:&#x2F;&#x2F;rxmarbles.com&#x2F;&quot;&gt;实际操作下&lt;&#x2F;a&gt;，体会会更深些)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zip&lt;&#x2F;code&gt; 对应现实中的例子就是拉链，拉链需要两个元素这样才能拉上去，这里也一样，只有当两个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都有了新的值时，subscribe 才会被触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stringSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; intSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PublishSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;zip(stringSubject, intSubject) { stringElement, intElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(stringElement) \(intElement)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅰️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;stringSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;🅱️&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;intSubject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅰️ 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 🅱️ 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果这里 &lt;code&gt;intSubject&lt;&#x2F;code&gt; 始终没有执行 &lt;code&gt;onNext&lt;&#x2F;code&gt;，那么将不会有输出，就像拉链掉了一边的链子就拉不上了。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;zip&lt;&#x2F;code&gt;，还有其他的 combine 的姿势，比如 &lt;code&gt;combineLatest&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;switchLatest&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;transform&quot;&gt;Transform&lt;&#x2F;h5&gt;
&lt;p&gt;这是最常见的操作了，对一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的数值做一些小改动，然后产出新的值，依旧是一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;of(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map { $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: { print($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是大致的实现（摘自官网）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; ObservableType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;myMap&amp;lt;R&amp;gt;(transform: E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; R) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Observable&amp;lt;R&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe { e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; e {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value):
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; transform(value)
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;next(result))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error):
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;error(error))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed:
&lt;&#x2F;span&gt;&lt;span&gt;                        observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;completed)
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; subscription
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接受一个 transform 闭包，然后返回一个 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因为接下来使用者将会对 &lt;code&gt;myMap&lt;&#x2F;code&gt; 的结果进行 subscribe，所以需要在 create 内部 subscribe 一下，不然最开始的那个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 就是个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt;，一个 &lt;code&gt;Cold Observable&lt;&#x2F;code&gt; 是不会产生新的数据的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;filter&quot;&gt;Filter&lt;&#x2F;h5&gt;
&lt;p&gt;Filter 的作用是对 &lt;code&gt;Observable&lt;&#x2F;code&gt; 传过来的数据进行过滤，只有符合条件的才有资格被 subscribe。写法上跟 map 差不多，就不赘述了。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;connect&quot;&gt;Connect&lt;&#x2F;h5&gt;
&lt;p&gt;这是挺有意思的一块，在之前介绍 &lt;code&gt;Observable.create&lt;&#x2F;code&gt; 时有提到过，一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被多次 subscribe 就会被多次触发，如果一个网络请求只想被触发一次，同时支持多个 subscriber，就可以使用 &lt;code&gt;publish&lt;&#x2F;code&gt; + &lt;code&gt;connect&lt;&#x2F;code&gt; 的组合。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 &lt;code&gt;Observable&lt;&#x2F;code&gt; 使用了 &lt;code&gt;publish()&lt;&#x2F;code&gt; 方法后，正常的 subscribe 就不会触发它了，除非 &lt;code&gt;connect()&lt;&#x2F;code&gt; 方法被调用。而且每次 subscribe 不会导致 &lt;code&gt;Observable&lt;&#x2F;code&gt; 重新针对 observer 处理一遍。看一下这张图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;reactivex.io&#x2F;documentation&#x2F;operators&#x2F;images&#x2F;publishConnect.c.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有两块需要注意：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之前的两次 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 并没有产生新的 value。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;&#x2F;code&gt; 之后 &lt;code&gt;subscribe&lt;&#x2F;code&gt; 的，只是等待新的 value，同时新的 value 还会分发给之前的 subscriber。&lt;&#x2F;li&gt;
&lt;li&gt;即使所有的 &lt;code&gt;subscription&lt;&#x2F;code&gt; 被 &lt;code&gt;dispose&lt;&#x2F;code&gt;, &lt;code&gt;Observable&lt;&#x2F;code&gt; 依旧处于 &lt;code&gt;hot&lt;&#x2F;code&gt; 状态，就好像还以为有人关心新的值一样。（这可能不是想要的结果）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对第 3 点，可以使用 &lt;code&gt;refcount()&lt;&#x2F;code&gt; 来代替 &lt;code&gt;connect()&lt;&#x2F;code&gt;，前者会在没有 subscriber 时自动「冷」下来，不会再产生新的值。（Demo 取自&lt;a href=&quot;http:&#x2F;&#x2F;www.tailec.com&#x2F;blog&#x2F;understanding-publish-connect-refcount-share&quot;&gt;这里&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myObservable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;interval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, scheduler: MainScheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;instance)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;publish()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;refCount() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mySubscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Disposing at 3 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    mySubscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dispose()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Subscribing again at 6 seconds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    myObservable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext: {
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Next: &lt;&#x2F;span&gt;&lt;span&gt;\($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Starting at 0 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;span&gt;Next: 2
&lt;&#x2F;span&gt;&lt;span&gt;Disposing at 3 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Subscribing again at 6 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Next: 0
&lt;&#x2F;span&gt;&lt;span&gt;Next: 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，3 秒后 subscription dispose，此时没有任何 subscriber 还关心 &lt;code&gt;Observable&lt;&#x2F;code&gt;，因此就重置了，所以 6 秒后又回到了初始状态（如果变成 &lt;code&gt;connect&lt;&#x2F;code&gt; 方法的话，会发现 6 秒后会输出 &lt;code&gt;Next: 6 &#x2F; Next: 7&lt;&#x2F;code&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;那如果后加入的 subscriber 想要之前的数据怎么办？可以对原始的 &lt;code&gt;Observable&lt;&#x2F;code&gt; 设置 &lt;code&gt;replay(n)&lt;&#x2F;code&gt;，表示最多返回 n 个元素给后加入的 subscriber。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;p&gt;上面介绍的是最基本的概念。顺便提一下比较常见的几个问题：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ru-he-chu-li-scheduler&quot;&gt;如何处理 Scheduler？&lt;&#x2F;h4&gt;
&lt;p&gt;默认代码都是在当前线程中执行的，如果要手动切换线程，可以使用 &lt;code&gt;subsribeOn&lt;&#x2F;code&gt; 和 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 两种方式，一般来说后者用得会多一些，那这两者有什么区别呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 跟位置无关，也就是无论在链式调用的什么地方，&lt;code&gt;Observable&lt;&#x2F;code&gt; 和 &lt;code&gt;subscription&lt;&#x2F;code&gt; 都会受影响；而 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 则仅对之后的调用产生影响，看个 Demo：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; observable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span&gt;create { (observer: AnyObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Disposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;observable thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onNext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onCompleted()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Disposables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;create()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; disposeBag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DisposeBag()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;observable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map1 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;observeOn(ConcurrentDispatchQueueScheduler(qos: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;userInteractive)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map({ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;map2 thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;subscribe(onNext:{ (e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;subscribe thread: &lt;&#x2F;span&gt;&lt;span&gt;\(Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;current)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDisposableTo(disposeBag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;observeOn&lt;&#x2F;code&gt;，那么输出如下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7f901cc0d510&amp;gt;{number = 1, name = main}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7f901ce15560&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 observable thread 和 map1 thread 依旧保持当前线程，但 &lt;code&gt;observeOn&lt;&#x2F;code&gt; 之后就变成了另一个线程。&lt;&#x2F;p&gt;
&lt;p&gt;如果 1) 是 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt;，那么会输出&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;observable thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map1 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;map2 thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;span&gt;subscribe thread: &amp;lt;NSThread: 0x7fbdf1e097a0&amp;gt;{number = 3, name = (null)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到全都变成了 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 指定的 Queue。所以 &lt;code&gt;subscribeOn&lt;&#x2F;code&gt; 的感染力很强，连 &lt;code&gt;Observable&lt;&#x2F;code&gt; 都能影响到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cold-observable-he-hot-observable&quot;&gt;Cold Observable 和 Hot Observable&lt;&#x2F;h4&gt;
&lt;p&gt;Cold 相当于 InActive，就像西部世界里，未被激活的机器人一样；Hot 就是处于工作状态的机器人。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;subscription-wei-shi-yao-yao-dispose&quot;&gt;Subscription 为什么要 Dispose？&lt;&#x2F;h4&gt;
&lt;p&gt;因为有了 &lt;code&gt;Subscriber&lt;&#x2F;code&gt; 所以 &lt;code&gt;Observable&lt;&#x2F;code&gt; 被激活，然后内部就会使用各种变量来保存资源，如果不 &lt;code&gt;dispose&lt;&#x2F;code&gt; 的话，这些资源就会一直被 keep，很容易造成内存泄漏。&lt;&#x2F;p&gt;
&lt;p&gt;同时手动 dispose 又嫌麻烦，所以就有了 &lt;code&gt;DisposeBag&lt;&#x2F;code&gt;，当这个 Bag 被回收时，Bag 里面的 subscription 会自动被 dispose，相当于从 MRC 变成了 ARC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;RxSwift 如果概念上整理清楚了，会发现其实并不难，多从 &lt;code&gt;Observable&lt;&#x2F;code&gt; 的角度去思考问题，多想着转换和组合，慢慢就会从命令式编程转到声明式编程，对于抽象能力和代码的可读性都会有提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>「无侵入页面加载完成检测」的一些思路</title>
            <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/page-open-detect/</link>
            <guid>https://limboy.me/posts/page-open-detect/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;在诸多的性能指标里，「页面加载完成耗时」是非常重要的一项，尤其是重点页面，如详情页，1 秒内打开和 3 秒内打开差别是很大的，直接影响 GMV。&lt;&#x2F;p&gt;
&lt;p&gt;再来说一下「页面加载完成」的定义，不是页面 layout 完成，不是请求完成，而是图片和文字都已被渲染完成。比较常见的做法是在页面的 &lt;code&gt;ViewDidAppear&lt;&#x2F;code&gt; 和请求完成且数据被转换成 Model 之后分别打点，前者表示页面出现的时间，后者表示数据获取的时间，基本可以体现出页面加载时间。但也有一些问题比如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;业务经常调整，所以埋点也需要调整，这个过程中很容易出现错埋、漏埋的问题。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面会有多个请求，只有这些请求全部完成后，页面才能渲染，这时数据请求埋点就会有点麻烦。&lt;&#x2F;li&gt;
&lt;li&gt;这几个时间点跟用户真正看到的时间还是会有差别，不够准确。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以一种无侵入的检测机制就很重要了。正好在&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&quot;&gt;掘金&lt;&#x2F;a&gt;上看到了&lt;a href=&quot;https:&#x2F;&#x2F;gold.xitu.io&#x2F;post&#x2F;58440e98128fe1006c4c951d&quot;&gt;用图像识别来自动确认网页加载成功&lt;&#x2F;a&gt;，受此启发，觉得此路有戏。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-an&quot;&gt;实现方案&lt;&#x2F;h3&gt;
&lt;p&gt;当 push／present 一个页面时，隔一段时间去截屏并分析当前页面的空白（纯色）部分占比，如果超过某个阈值，就认为页面未加载完成。这里会有几个注意点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;需要主动去截屏检测，而不能加载完成后告知。这其中的差别在于无法得知具体哪个时间加载完成了。&lt;&#x2F;li&gt;
&lt;li&gt;有些页面被故意设计成有较多留白，这时就不容易判断了。&lt;&#x2F;li&gt;
&lt;li&gt;「未加载完成」不同的页面会有不同的表现。&lt;&#x2F;li&gt;
&lt;li&gt;当用户滑动时，有可能之前的页面已经加载了&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;chun-se-zhan-bi&quot;&gt;纯色占比&lt;&#x2F;h3&gt;
&lt;p&gt;最简单的方案就是把图片上的每个像素点都取出来，放到一个字典里，之后如果有相同色值的像素，那么 &lt;code&gt;count++&lt;&#x2F;code&gt;。问题也很明显，一个屏幕几十万个点，这一轮都还没分析完，用户已经打开第二个页面了。&lt;&#x2F;p&gt;
&lt;p&gt;再回到想要达到的目标：纯色部分占比。那么将图片压缩到更小的 size 不就行了么。老套路，铺张画布，把图片浇上去。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)imageWithImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)image scaledToSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span&gt;)newSize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newSize, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawInRect:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, newSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIGraphicsEndImageContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; newImage;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就是真正的计算了，过程也比较简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把 UIImage 转换成 CGImage Data
&lt;&#x2F;span&gt;&lt;span&gt;CGDataProviderRef provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImageGetDataProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;CFDataRef pixelData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGDataProviderCopyData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(provider)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetBytePtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; dataLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFDataGetLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(pixelData)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; R,G,B, and A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 用来装 color ，key 为 R-G-B 字符串，value 为出现次数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; colorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(dataLength); i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; numberOfColorComponents) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		colorCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; green &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;UInt8&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 以 R-G-B 为 key
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, red, green, blue&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;colors[result]) {
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			colors[result] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @([colors[result] integerValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 按出现次数排序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[colors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allValues&lt;&#x2F;span&gt;&lt;span&gt; sortedArrayUsingComparator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSComparisonResult&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt; _Nonnull obj2) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[obj2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedDescending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSOrderedAscending&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 计算占比，并从高到低排序，取前 10 个
&lt;&#x2F;span&gt;&lt;span&gt;[sortedColorCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; _Nonnull stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[percent addObject:@([count intValue] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(colorCount))];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先把 &lt;code&gt;UIImage&lt;&#x2F;code&gt; 转换成 &lt;code&gt;CFDataRef&lt;&#x2F;code&gt;，再遍历获取 &lt;code&gt;Color&lt;&#x2F;code&gt;，对相同的的 &lt;code&gt;Color&lt;&#x2F;code&gt; 进行累加，最后排一下序即可。&lt;&#x2F;p&gt;
&lt;p&gt;返回的数据类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.4586517&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.06202247&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.02921348&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能拿到了颜色的占比。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;p&gt;假设设定纯色区域超过 30% 认为没有完全加载，来找几个 Demo 测试下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifqtcztfhbqwendcmmzdambqgyyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果符合「未加载完毕」定义&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4139326&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.05438202&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再换一个&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrgizrwme2wgndcmmzdambqmeyde_600x1036.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然没有加载完，但结果少于 30%&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.2788764&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06808989&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.04853933&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果把值设得小一些，那么有可能「误杀」，比如这个界面&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s17.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ifrdimlemfrggndcmmzdambqmeyde_600x1067.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4530337&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.06561798&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.02921348&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个界面已经加载完成了，但由于空白面积较多，因此纯色的占比也较多，如果按照之前的公式就会误伤，如何解决这个问题，之后再讨论。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看另一个未加载完毕的页面：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;s16.mogucdn.com&#x2F;p1&#x2F;161208&#x2F;idid_ie4tszldguytanlcmmzdambqgqyde_750x1278.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个页面的结果是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.3433708&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果中间部分加载出来（也就是面积最大的那一块），那么就变成了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1941573&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.1822472&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这也属于页面未加载完成，但又是一个新的规则了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;再来回顾一下「截图分析纯色占比」带来的问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;隔 N 秒去截图时，用户可能滑到第 2 屏了，这时第 1 屏加载完了，但 2 屏还没有加载完，不应该属于「页面加载未完成」范畴。&lt;&#x2F;li&gt;
&lt;li&gt;不同页面的纯色特性不一样，有的比较分散，有的正常状态下也会有比较多的纯色，这样就容易误判。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于场景 1 还没有想到特别好的处理方式，一种办法是通过判断 runloop 的 mode 是否等于 &lt;code&gt;UITrackingRunLoopMode&lt;&#x2F;code&gt; 来判断是否有滑动，不太优雅，但可能行得通。&lt;&#x2F;p&gt;
&lt;p&gt;对于场景 2 可以把数据发送到服务端，让服务端去计算某个页面的纯色分布情况，比如大部分都是 &amp;lt; 10%，有少部分在 20% 以上，那么就可以判定为未加载完成，不过成本还是有点高。&lt;&#x2F;p&gt;
&lt;p&gt;所以这个方案虽然可以做到无侵入，但在结果判定上还是存在些缺陷，期待有更成熟的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReSwift 介绍</title>
            <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reswift-analyze/</link>
            <guid>https://limboy.me/posts/reswift-analyze/</guid>
            <description>&lt;h3 id=&quot;shi-yao-shi-reswift&quot;&gt;什么是 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;ReSwift&lt;&#x2F;a&gt; 是基于 &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; 思想实现的 Swift 类库。基本的流程如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;14808452245719.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当用户点击了视图上的某个元素时，会发出一个 &lt;code&gt;Action&lt;&#x2F;code&gt;，这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 包含了两个基本元素：&lt;code&gt;Action Type&lt;&#x2F;code&gt; 和 &lt;code&gt;Action Payload&lt;&#x2F;code&gt;，比如「点击收藏按钮」这个 &lt;code&gt;Action&lt;&#x2F;code&gt;，可能会被描述为：&lt;code&gt;Action(&amp;quot;CollectButtonTapped&amp;quot;, [&amp;quot;itemID&amp;quot;: 189])&lt;&#x2F;code&gt;。然后这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 就会到达 &lt;code&gt;Store&lt;&#x2F;code&gt;，&lt;code&gt;Store&lt;&#x2F;code&gt; 也很简单，只做两件事：1. 接收 &lt;code&gt;Action&lt;&#x2F;code&gt;；2. 将 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;Reducer&lt;&#x2F;code&gt;。&lt;code&gt;Reducer&lt;&#x2F;code&gt; 做的事情就更简单了，接收 &lt;code&gt;Store&lt;&#x2F;code&gt; 发出的 &lt;code&gt;Action&lt;&#x2F;code&gt; 和 &lt;code&gt;State&lt;&#x2F;code&gt;，内部运算之后，返回一个新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;code&gt;Store&lt;&#x2F;code&gt; 拿到了新的 &lt;code&gt;State&lt;&#x2F;code&gt; 后，再把 &lt;code&gt;State&lt;&#x2F;code&gt; 发送给 &lt;code&gt;View&lt;&#x2F;code&gt;。&lt;code&gt;View&lt;&#x2F;code&gt; 渲染新的 &lt;code&gt;State&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;简单描述下各个模块的职责：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;view&quot;&gt;View&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;View&lt;&#x2F;code&gt; 可以理解为一个「壳」，所有的数据都由 &lt;code&gt;State&lt;&#x2F;code&gt; 提供，这样就把表现层和数据层分开了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;view = f(state)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;action&quot;&gt;Action&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Action&lt;&#x2F;code&gt; 用来描述发生了什么事情，比如不小心用脚踢到了椅子，神经系统就会把这个信息传递给大脑，这个信息就是 &lt;code&gt;Action&lt;&#x2F;code&gt;，而大脑就是之后要讲到的 &lt;code&gt;Store&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;store&quot;&gt;Store&lt;&#x2F;h4&gt;
&lt;p&gt;这是核心模块，就像大脑会不停地接受到各种 &lt;code&gt;Action&lt;&#x2F;code&gt;，并作出反应，只不过在这里 &lt;code&gt;Store&lt;&#x2F;code&gt; 并不具备「做决定」的能力，而是把这个 &lt;code&gt;Action&lt;&#x2F;code&gt; 交给了所有可能关心它的 &lt;code&gt;Reducers&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 推荐一个 App 只有一个 &lt;code&gt;Store&lt;&#x2F;code&gt;，在实际情况中，如果这么做的话，会带来不少的副作用，比如所有的模块都需要依赖 &lt;code&gt;Store&lt;&#x2F;code&gt;，这个 &lt;code&gt;State&lt;&#x2F;code&gt; 会很庞大，不可避免的会影响性能。所以，单个页面或模块有一个 &lt;code&gt;Store&lt;&#x2F;code&gt; 会比较合适。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;state&quot;&gt;State&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;State&lt;&#x2F;code&gt; 是一个隐形的杀手，因为使用它极其方便，而它的危害也不会瞬间爆发，就像温水煮青蛙一样，等发现问题越来越多、被各种多线程问题困扰时，就会感受到它的威力了。&lt;&#x2F;p&gt;
&lt;p&gt;所以把 &lt;code&gt;State&lt;&#x2F;code&gt; 单独拎出来，并且使用 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2015&#x2F;414&#x2F;&quot;&gt;Value Types&lt;&#x2F;a&gt; 来解决各种多线程或变量被修改导致的问题。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 的 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2016&#x2F;419&#x2F;&quot;&gt;Protocol and Value Oriented Programming in UIKit Apps&lt;&#x2F;a&gt; 中也推荐使用 Value Composition，而不是继承，同时把 State 集中到一个地方处理，也有助于 Local Reasoning。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-yao-shi-yong-reswift&quot;&gt;为什么要使用 ReSwift&lt;&#x2F;h3&gt;
&lt;p&gt;确切说来是为什么要使用「单向数据流」的架构模式，主要有这么几个好处：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;数据单向流动容易让结构变得清晰，出问题时也更容易排查。&lt;&#x2F;li&gt;
&lt;li&gt;使用了 「Value Types」作为流动的数据，避免各种诡异的「不小心被篡改」或多线程 bug。&lt;&#x2F;li&gt;
&lt;li&gt;在统一的入口处理数据（State），比起散落在各处更加容易控制。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift&quot;&gt;Readme&lt;&#x2F;a&gt; 里带了一个简单的 Demo，可以感受下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ma-yi-pie&quot;&gt;源码一瞥&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift (3.0.0) 的源码很精简，对 Swift 熟悉的话，很快就能看完。说下我自己在看源码的过程中学到的一些 tips 吧。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reduce-de-shi-yong&quot;&gt;Reduce 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;&#x2F;code&gt; 在函数式编程的领域里会经常被用到，甚至可以实现 &lt;code&gt;map&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;filter&lt;&#x2F;code&gt; 等功能，足见其强大。它的运行规则是以函数的处理结果作为初始值，再结合数组中的元素返回处理结果，不断循环，直到数组中的元素全部处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;在 Swift 中，它是 &lt;code&gt;Sequence&lt;&#x2F;code&gt; 协议扩展的一个方法，签名如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;reduce&amp;lt;Result&amp;gt;(_ initialResult: Result, _ nextPartialResult: (Result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Element) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Result) rethrows -&amp;gt; Result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ReSwift 中有好几个地方都用到了 &lt;code&gt;reduce&lt;&#x2F;code&gt;，比如通过它来达到 &lt;code&gt;combineReducer&lt;&#x2F;code&gt; 的效果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public struct&lt;&#x2F;span&gt;&lt;span&gt; CombinedReducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;	  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; self.reducers 包含了 AnyReducer 的实例
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;reduce(state) { (currentState, reducer) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: action, state: currentState)
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;按照入队列的先后，reducer 被依次执行，并且把生成的新的 &lt;code&gt;State&lt;&#x2F;code&gt; 作为下一个循环的初始值传递给下一个 reducer。&lt;&#x2F;p&gt;
&lt;p&gt;在处理 &lt;code&gt;middleware&lt;&#x2F;code&gt; 时，也有用到类似的技术，不过那个更加复杂些，涉及到&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;zh-hans&#x2F;%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0&quot;&gt;高阶函数&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhuang-shi-qi-mo-shi&quot;&gt;装饰器模式&lt;&#x2F;h4&gt;
&lt;p&gt;装饰器模式简单来说就是在不改变类／方法原有功能的前提下，提供了一些额外的能力。比较常见的有 validator，客户端提交的数据要入库前需要做一下校验，不通过的话直接返回。在 python 里装饰器非常常见，比如在一个方法上加一个 &lt;code&gt;@cached&lt;&#x2F;code&gt; 或者 &lt;code&gt;@validate&lt;&#x2F;code&gt; 等 annotation。&lt;&#x2F;p&gt;
&lt;p&gt;在实现 Reducer 时，有用到这个模式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public protocol Reducer: AnyReducer {
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;handleAction(action: Action, state: ReducerStateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ReducerStateType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;extension Reducer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public func &lt;&#x2F;span&gt;&lt;span&gt;_handleAction(action: Action, state: StateType?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StateType {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; withSpecificTypes(action, state: state, function: handleAction)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;_handleAction&lt;&#x2F;code&gt; 对 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 做了个校验，（&lt;code&gt;withSpecificTypes&lt;&#x2F;code&gt; 函数里如果校验不通过，&lt;code&gt;handleAction&lt;&#x2F;code&gt; 不会被执行），这样对于使用者，只需继承 Reducer 实现 &lt;code&gt;handleAction&lt;&#x2F;code&gt; 方法，ReSwift 内部调用时会使用 &lt;code&gt;_handleAction&lt;&#x2F;code&gt; 来做一些校验。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;StoreSubscriber&lt;&#x2F;code&gt; 里也有用到类似的技术。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;associatedtype-de-shi-yong&quot;&gt;associatedtype 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;通过 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;，可以让 protocol 使用 &lt;code&gt;generic&lt;&#x2F;code&gt;, Natasha 还写过一篇关于 &lt;a href=&quot;https:&#x2F;&#x2F;www.natashatherobot.com&#x2F;swift-what-are-protocols-with-associated-types&#x2F;&quot;&gt;PAT 使用的文章&lt;&#x2F;a&gt;，里面以宠物小精灵为例，通过 PAT 让不同的小精灵具备了不同的能力。不过使用了 &lt;code&gt;associatedtype&lt;&#x2F;code&gt; 或 &lt;code&gt;Self&lt;&#x2F;code&gt; 后，就不能作为变量的类型来声明了，比如 &lt;code&gt;var something: AProtoclWithAssociatedType&lt;&#x2F;code&gt; 这样编译器会报错，具体原因可以参考&lt;a href=&quot;http:&#x2F;&#x2F;krakendev.io&#x2F;blog&#x2F;generic-protocols-and-their-shortcomings&quot;&gt;这篇文章&lt;&#x2F;a&gt;，主要是因为无法指定 Generic 的类型，导致编译器无法在编译期间就确定具体的类型，对于强类型语言来说，这是不能接受的。&lt;&#x2F;p&gt;
&lt;p&gt;ReSwift 中，在定义 StoreType 时，有用到 &lt;code&gt;associatedtype&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public protocol&lt;&#x2F;span&gt;&lt;span&gt; StoreType {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    associatedtype State: StateType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Initializes the store with a reducer and an intial state.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(reducer: AnyReducer, state: State?)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在定义 reducer protocol 时，也有用到（也是关联了 StateType）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dui-wai-zhi-du-dui-nei-ke-du-xie&quot;&gt;对外只读，对内可读写&lt;&#x2F;h4&gt;
&lt;p&gt;在 OC 时代，通常的做法是在 .h 里声明为 &lt;code&gt;readonly&lt;&#x2F;code&gt;，然后在 .m 的 class extension 里，将同名的属性声明为 &lt;code&gt;readwrite&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Swift 没有头文件的概念，直接一句话搞定 &lt;code&gt;private(set)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; Subscription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;State: StateType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private(set) weak var&lt;&#x2F;span&gt;&lt;span&gt; subscriber: AnyStoreSubscriber? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; selector: ((State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Any)?
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;subscription 希望外部可以拿到 subscriber，但不要修改它，于是在前面加了 &lt;code&gt;private(set)&lt;&#x2F;code&gt;，也就是把 &lt;code&gt;set&lt;&#x2F;code&gt; 方法标记为 private。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;ReSwift 还是挺值的一试的，一方面是因为单向数据流确实对程序的清晰度有帮助，另一方面 ReSwift 的代码很简洁，内部实现比较容易搞明白，这样即使出问题也比较容易定位。&lt;a href=&quot;https:&#x2F;&#x2F;realm.io&#x2F;news&#x2F;benji-encz-unidirectional-data-flow-swift&#x2F;&quot;&gt;Realm&lt;&#x2F;a&gt; 上有作者分享的案例，可以参考下。不足嘛肯定也有，比如功能比较简单，只是做了数据流，缺少 Diff 支持，在做列表更新／删除时会比较痛苦；如何与 MVVM 等比较成熟的架构有效地结合起来等。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，由于数据都通过 State 来传递，可以在出 bug 时，上传当时的 state 内容方便定位；还可以基于 State 来做&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReSwift&#x2F;ReSwift#demo&quot;&gt;时光机&lt;&#x2F;a&gt;。不妨在 Side Project 中尝试下。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>做一个 App 前需要考虑的几件事</title>
            <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/starting-an-app/</link>
            <guid>https://limboy.me/posts/starting-an-app/</guid>
            <description>&lt;p&gt;随着工具链的完善，语言的升级以及各种优质教程的涌现，做一个 App 的成本也越来越低了。尽管如此，有些事情最好前期就做起来，避免当 App 有了一定规模后，再感慨当初为什么没有多留点心。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wan-shan-de-ri-zhi-xi-tong&quot;&gt;完善的日志系统&lt;&#x2F;h3&gt;
&lt;p&gt;以 iOS 为例，有时图方便，就直接用 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 了，甚至线上都一直开着。一方面会影响性能，尤其是输出比较频繁的时候，另一方面也容易泄露敏感信息，所以一般做法是在 Release 模式下禁用 &lt;code&gt;NSLog&lt;&#x2F;code&gt;，比如在 &lt;code&gt;pch&lt;&#x2F;code&gt; 文件中，通过对环境的判断，对 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 做不同的处理。&lt;&#x2F;p&gt;
&lt;p&gt;但这样仍会有问题，比如我们发现线上的 App 在特定场景下会有某种异常的表现，这时就很希望能有日志来提供更多的信息。可以考虑使用像 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CocoaLumberjack&#x2F;CocoaLumberjack&quot;&gt;cocoalumberjack&lt;&#x2F;a&gt; 这样功能更完善的第三方日志工具，在线上仍然开着日志，但不消费，这样就不会泄露敏感信息。当我们需要看日志时，可以通过「调试模式」打开它，然后连上 &lt;a href=&quot;http:&#x2F;&#x2F;lemonjar.com&#x2F;iosconsole&#x2F;&quot;&gt;iOS Console&lt;&#x2F;a&gt; 来看。&lt;&#x2F;p&gt;
&lt;p&gt;因为 Log 是一个很普遍的行为，所以最好前期就规范起来，后期遍地都是 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 时，再要改动会有点麻烦，当然也可以偷懒点，直接把 &lt;code&gt;NSLog&lt;&#x2F;code&gt; 的宏定义改了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;commit-message-gui-fan&quot;&gt;Commit Message 规范&lt;&#x2F;h3&gt;
&lt;p&gt;在前期开发的时候，往往为了快速实现功能，而忽略了 Commit Message 的规范，然后就会出现很随意的 Commit 信息。这样别人在 Review 代码时就会很累，写某个版本的 Release Notes 也会变得艰辛，甚至过一段时间自己都不知道这些 Commit 代表的意思。而如果自己也讲不清这次改动究竟该怎么描述时，往往是这次改动混杂了较多的信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erlang&#x2F;otp&#x2F;wiki&#x2F;Writing-good-commit-messages&quot;&gt;这篇文章&lt;&#x2F;a&gt; 简洁精确地描述了为什么要写好 Commit Message，以及如何写。遵守这些规范后，就很方便产出这样的 Release Notes 了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-ma-gui-fan&quot;&gt;代码规范&lt;&#x2F;h3&gt;
&lt;p&gt;这个最好在前期就抓起来，如果前期不做约束，每个人的风格往往会有比较大的差异，导致代码看起来会比较累，甚至有些人是从其他语言转过来的，还会保留之前语言的一些书写习惯，就容易有「出戏」的感觉。一致的代码规范不仅看起来舒服，而且让团队更像一个整体。&lt;&#x2F;p&gt;
&lt;p&gt;这个实施起来会有一定难度，尤其是团队中有一些「老人」的时候，他们往往积累了一套自己的编程习惯，而且不容易被说服。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhun-bei-yi-fen-bian-cheng-shou-ze&quot;&gt;准备一份编程守则&lt;&#x2F;h3&gt;
&lt;p&gt;里面包含了「最佳实践」和「不要踩的坑」，这个可以一定程度上提高开发效率，避免一些低级错误。比如以 iOS 为例，「不要随便使用通知」，因为通知使用起来太方便了，用得多了调试起来就会很累，而且也不好管理；「通知用完之后记得 remove observer」；不要使用&lt;code&gt;containsString&lt;&#x2F;code&gt; (如果还需要支持 iOS 7 的话)。随着时间的累积，这份守则里的内容会越来越多，也是一件挺宝贵的财富。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-mian-bu-ju-gui-fan&quot;&gt;页面布局规范&lt;&#x2F;h3&gt;
&lt;p&gt;这个在 Android 相对还好，基本都是通过 xml 来进行布局。在 iOS 里玩法就多了，有用 storyboard 的，有用 xib 的，有直接计算坐标和大小的，有用原生 autolayout 的，有用第三方布局类的。总之就是各显神通，尽量用同一种布局规范（但不建议直接计算坐标和大小），看起来也会方便些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-ji-mai-dian&quot;&gt;统计埋点&lt;&#x2F;h3&gt;
&lt;p&gt;这是很重要的一块，客户端所有的数据基本就靠它了，所以尽量选择一个灵活、稳定的数据方案，同时最好在他们提供的 SDK 上再封一层，方便做一些额外的事情（比如想同时接入另一家服务作对比）。&lt;&#x2F;p&gt;
&lt;p&gt;统计埋点还有很重要的一点是「验证」，是否有错打、漏打等现象；iOS &#x2F; Android 是否有用同一个点；有些点还需要额外的参数，这些参数的格式是否正确等。这些工具往往只能自己来做了，这也是比较花时间的一部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;app-jia-gou&quot;&gt;App 架构&lt;&#x2F;h3&gt;
&lt;p&gt;App 架构会随着业务、人员的增长而演进，所以当发现当前的架构无法满足日常的业务迭代时，就需要考虑对它做调整了。一般来说，大方向上也就是 MVP &#x2F; MVVM，等人员多起来时，基本就是组件化开发，当然组件化也会有它的问题（比如资源 &#x2F; 类重用、组件间通信等），这里就不展开了。&lt;&#x2F;p&gt;
&lt;p&gt;在前期选择一个相对轻量级，但比较清晰的架构（尽量不要选择 MVC），大家都遵守这个架构开发，也能一定程度上提高效率。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ye-mian-tiao-zhuan-ji-zhi&quot;&gt;页面跳转机制&lt;&#x2F;h3&gt;
&lt;p&gt;虽然 Android、iOS 都原生支持 open 特定 scheme 的 url，不过可能的话，还是通过 router 统一处理会比较方便，也更灵活。比如可以知道注册了哪些 URL；可以知道页面的跳转成功率；方便处理一些奇奇怪怪的需求等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zai-xian-pei-zhi&quot;&gt;在线配置&lt;&#x2F;h3&gt;
&lt;p&gt;在线配置可以赋予 App 极大的灵活性，比如运营的一些活动、banner 位调整、首页弹窗等；还可以针对特定机型、系统分发特定的内容，结合规则引擎甚至可以给一部分有相同特征的用户发推送；可以做流量切分等。所以一个强大&#x2F;稳定的配置中心就显得尤为重要，A&#x2F;B Test 也可以基于配置中心来做。&lt;&#x2F;p&gt;
&lt;p&gt;这里有些注意事项，因为不少配置的值是运营填的，她们对 value 不那么敏感，所以会出现 value 为空，或者不是想要的类型，或者配了张图片，但是体积超大等，有可能造成客户端 crash &#x2F; OOM 等异常表现，所以客户端要有足够强大的容错能力。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xuan-ze-he-gua-de-crash-ping-tai&quot;&gt;选择合适的 Crash 平台&lt;&#x2F;h3&gt;
&lt;p&gt;Crash 会给用户造成极大的负面体验，所以需要经常关注 Crash 情况，尤其是刚发版的那段时间。这块 &lt;a href=&quot;http:&#x2F;&#x2F;fabric.io&quot;&gt;fabric&lt;&#x2F;a&gt; 做的比较好，只是由于是国外的服务，会有些许数据上的丢失，不过问题倒也不是很大，也可以考虑国内的一些服务，如 bugly，毕竟腾讯自己也在用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-review&quot;&gt;Code Review&lt;&#x2F;h3&gt;
&lt;p&gt;这也是容易忽视的一点，当业务需求压过来时，先把功能实现了再说，而且在初期往往人手也不够，抽不出时间来做 Code Review。如果是这样的话，可以先 Review 一些核心的点，保证重要的代码是经过 Review 的，不太重要的业务代码可以先放放，等人员充足后再覆盖更大的范围。&lt;&#x2F;p&gt;
&lt;p&gt;Code Review 的主要作用是保障代码质量，同时促进双方成长，一个担心点是质量偏低的代码比例如果较大的话，会影响开发者的心情，增加维护成本，日积月累就成了重重的「历史包袱」。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xuan-ze-he-gua-de-kai-fa-mo-shi&quot;&gt;选择合适的开发模式&lt;&#x2F;h3&gt;
&lt;p&gt;如果是使用 git 来做源码管理的话，可以采用 &lt;a href=&quot;http:&#x2F;&#x2F;jeffkreeftmeijer.com&#x2F;2010&#x2F;why-arent-you-using-git-flow&#x2F;&quot;&gt;flow&lt;&#x2F;a&gt; 模式，基本能满足大部分的需求，而且不少 git 工具也内置了 flow 的支持。这样当需要处理 feature &#x2F; hotfix &#x2F; 发版等场景时，就会很方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-xu-ji-cheng&quot;&gt;持续集成&lt;&#x2F;h3&gt;
&lt;p&gt;持续集成的目的是让产品在快速迭代的过程中还能保证质量，当有错误发生时，可以第一时间被检查出来，方便修复。如果想偷懒的话，可以直接使用成熟的服务，如 &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;travis&lt;&#x2F;a&gt;，也可以自己基于 Jenkins 来搭，iOS 的话，配合 fastlane 效果会更好。自己搭的好处是灵活度更大，可以加入一些个性化需求。&lt;&#x2F;p&gt;
&lt;p&gt;如果有打包平台的话，还可以定时出一个包，这样当发现某个功能使用起来有问题，代码上又没什么头绪时，可以对比以前的包来定位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-guan-li-xi-tong&quot;&gt;Bug 管理系统&lt;&#x2F;h3&gt;
&lt;p&gt;这个 Bug 包括测试阶段和线上的 Bug，Bug 管理工具有很多，使用在线服务或自己搭都可以，但要有，不然很有可能忘了还有哪些问题需要修复，哪些已经修复了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-mu-guan-li-gong-ju&quot;&gt;项目管理工具&lt;&#x2F;h3&gt;
&lt;p&gt;在 App 开发初期，人员较少，沟通起来比较方便，所以很多需求当面就说了，一些原型&#x2F;设计图可能也是直接 AirDrop 过来的，这样效率自然高，但不便管理。比如没有 prd，产品、开发的理解可能不一致，到头来发现做的不是产品想要的，或者一些细节不符合要求；设计图有更新，但没有同步到所有的开发；需求有变更，但当时在专心做某个 feature，可能就忘了，或者没有理解全面等。所以最好还是有一个项目管理工具来统一处理，再结合敏捷开发，项目的质量和进度就容易得到保障。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;checklist&quot;&gt;Checklist&lt;&#x2F;h3&gt;
&lt;p&gt;一个 App 发布上线之后，要保证不出大的问题，就要在发布之前，先检查一下「一定不能出问题」的点是否正常，就像飞机起飞之前一定会走一遍 checklist 一样。比如推送是否正常、log 是否关闭、组件版本是否正确等，随着 App 功能的增加，这个 list 也会越来越长，虽然过一遍 checklist 会花费些时间，但跟收益相比还是值得的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;以上这些点是在感受不过不同量级的 App 开发后整理的，肯定还会有疏漏，不过如果真能做到这些，就已经很不错了，至少当有新人进来时，不会背上沉重的「历史包袱」。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路·续</title>
            <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components-continued/</link>
            <guid>https://limboy.me/posts/mgj-components-continued/</guid>
            <description>&lt;p&gt;前几天在「移动学习分享群」分享了关于蘑菇街组件化方面的一点经验，由于时间和文字描述方面的限制，很多东西表述的不是很清楚，让一些同学产生了疑惑，casatwy 老师也写了篇&lt;a href=&quot;http:&#x2F;&#x2F;casatwy.com&#x2F;iOS-Modulization.html&quot;&gt;文章&lt;&#x2F;a&gt;来纠正其中的一些实现，看完之后确实有不少启发。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-yi-de-diao-yong-shi-xian&quot;&gt;统一的调用实现&lt;&#x2F;h4&gt;
&lt;p&gt;将「URL 调用」和「组件间调用」通过 runtime 达到统一，通过 prefix 的方式来避免安全上的一些漏洞。看起来确实会舒服些，也比较灵活。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-guo-category-lai-tong-yi-zu-jian-dui-wai-bao-lu-de-jie-kou&quot;&gt;通过 Category 来统一组件对外暴露的接口&lt;&#x2F;h4&gt;
&lt;p&gt;支持 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 但最终还是走的 target-action，跟内部调用无差别。
这也是我们目前有待提升的点，想知道某个组件支持哪些 URL 或 哪些 Protocol 不够方便，URL 的参数传递也是个问题，将来 URL 发生变动的话，调整起来也比较麻烦。后续会在这块再加强下。&lt;&#x2F;p&gt;
&lt;p&gt;当初决定使用 &lt;code&gt;openURL:&lt;&#x2F;code&gt; 来做页面间的跳转，而不是方法调用，主要是考虑到我们的大部分场景都可以通过这种方式解决，因此就这么定了。&lt;code&gt;openURL:&lt;&#x2F;code&gt; 更像 Android 里的 「隐式 Intent」，不关心谁来处理这个 URL，由系统（MGJRouter）来决定。而方法调用更像「显式 Intent」或者 RPC，明确地知道应该由谁来处理。前者的好处是可以更少地关心业务逻辑，后者的好处是可以很方便地完成参数传递。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geng-ming-que-de-biao-shu&quot;&gt;更明确的表述&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;openURL&lt;&#x2F;code&gt; 只是页面间的调用方式&lt;&#x2F;li&gt;
&lt;li&gt;组件间的调用通过 protocol 来实现&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每个组件都有一个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，这个 &lt;code&gt;Entry&lt;&#x2F;code&gt;，主要做了三件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;注册这个组件关心的 URL&lt;&#x2F;li&gt;
&lt;li&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;li&gt;
&lt;li&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-guan-xin-de-url&quot;&gt;注册这个组件关心的 URL&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;MGJRouter.png&quot;
        width=&quot;432&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;URL 的注册会有对应的 block，拿到这个 URL 后，想怎么折腾就怎么折腾。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhu-ce-zhe-ge-zu-jian-neng-gou-bei-diao-yong-de-fang-fa-shu-xing&quot;&gt;注册这个组件能够被调用的方法&#x2F;属性&lt;&#x2F;h4&gt;
&lt;p&gt;当有一些场景不适合用 URL 的方式时，就可以通过注册 protocol 来实现&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components-continued&amp;#x2F;ModuleManager.png&quot;
        width=&quot;432&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager registerClass:ClassA forProtocol:ProtocolA]&lt;&#x2F;code&gt; 的结果就是在 MM 内部维护的 dict 里新加了一个映射关系。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;[ModuleManager classForProtocol:ProtocolA]&lt;&#x2F;code&gt; 的返回结果就是之前在 MM 内部 dict 里 protocol 对应的 class，使用方不需要关心这个 class 是个什么东东，反正实现了 &lt;code&gt;ProtocolA&lt;&#x2F;code&gt; 协议，拿来用就行。&lt;&#x2F;p&gt;
&lt;p&gt;这里需要有一个公共的地方来容纳这些 public protocl，也就是图中的 &lt;code&gt;PublicProtocl.h&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zai-app-sheng-ming-zhou-qi-de-bu-tong-jie-duan-zuo-bu-tong-de-xiang-ying&quot;&gt;在 App 生命周期的不同阶段做不同的响应&lt;&#x2F;h4&gt;
&lt;p&gt;上一篇文章中有提到，这里简单说下，&lt;code&gt;ModuleEntry&lt;&#x2F;code&gt;，实现某个特定的协议(该协议继承自 &lt;code&gt;UIApplicationDelegate&lt;&#x2F;code&gt; )，然后实现对应的方法即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhen-dui-casatwy-na-pian-wen-zhang-de-yi-xie-hui-ying&quot;&gt;针对 casatwy 那篇文章的一些回应&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单纯以 openURL 的方式是无法胜任让一个 App 去实施组件化架构的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同意，所以我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;根本无法表达非常规对象&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;单纯地通过 &lt;code&gt;openURL&lt;&#x2F;code&gt; 确实不太好表达，但我们并不只有 &lt;code&gt;openURL&lt;&#x2F;code&gt; 一种方式&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册 URL 的目的其实是一个服务发现的过程，在 iOS 领域中，服务发现的方式是不需要通过主动注册的，使用 runtime 就可以了。另外，注册部分的代码的维护是一个相对麻烦的事情，每一次支持新调用时，都要去维护一次注册列表。如果有调用被弃用了，是经常会忘记删项目的。runtime 由于不存在注册过程，那就也不会产生维护的操作，维护成本就降低了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于通过 runtime 做到了服务的自动发现，拓展调用接口的任务就仅在于各自的模块，任何一次新接口添加，新业务添加，都不必去主工程做操作，十分透明。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;尽管通过 runtime 可以做到这些，但最终还是要通过维护 &lt;code&gt;Category&lt;&#x2F;code&gt; 来暴露新增的 Target-Action，所以 runtime 虽然不存在注册过程，但实际使用过程中，还是会有注册过程，还是需要去维护。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有拆分远程调用和本地间调用&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;从上面的图可以看到，我们其实是分为「组件间调用」和「页面间跳转」两个维度，只要 app 响应某个 URL，无论是 app 内还是 app 外都可以，而「组件间」调用走的完全是另一条路，所以也不会有安全上的问题。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;以远程调用的方式为本地间调用提供服务&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地间调用无法传递非常规参数，复杂参数的传递方式非常丑陋&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同上，使用 Protocol&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须要在 app 启动时注册 URL 响应者&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;是的，就蘑菇街的方案来说，这步不可避免。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个不必要的操作会导致不必要的维护成本&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;维护只是在组件内部做调整，并不需要在主工程里做修改。如果采用 Category 的方式，好处是不用在启动时注册，但当组件的接口有变动时，依然要维护 Category，这个成本是免不了的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;新增组件化的调用路径时，蘑菇街的操作相对复杂
在本文给出的组件化方案中，响应者唯一要做的事情就是提供 Target 和 Action，并不需要再做其它的事情&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提供了 Target-Action 之后，还是要在 Category 里添加一个 wrapper 的吧?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有针对 target 层做封装
这种做法使得所有的跨组件调用请求直接 hit 到业务模块，业务模块必然因此变得臃肿难以维护，属于侵入式架构。应该将原本属于调用相应的部分拿出来放在 target-action 中，才能尽可能保证不将无关代码侵入到原有业务组件中，才能保证业务组件未来的迁移和修改不受组件调用的影响，以及降低为项目的组件化实施而带来的时间成本。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「将原本属于调用相应的部分拿出来放在 target-action 中」并不是唯一可行的方式，使用 Protocol&#x2F;URL 注册也可以达到效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;casatwy 的一些思路和思考问题的角度挺不错的，也从他的文章中收获了不少，希望这篇文章能把之前模糊的一些观念说得足够清楚，还有问题的话欢迎继续交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>蘑菇街 App 的组件化之路</title>
            <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mgj-components/</link>
            <guid>https://limboy.me/posts/mgj-components/</guid>
            <description>&lt;p&gt;在组件化之前，蘑菇街 App 的代码都是在一个工程里开发的，在人比较少，业务发展不是很快的时候，这样是比较合适的，能一定程度地保证开发效率。&lt;&#x2F;p&gt;
&lt;p&gt;慢慢地代码量多了起来，开发人员也多了起来，业务发展也快了起来，这时单一工程开发模式就会显露出一些弊端&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;耦合比较严重（因为没有明确的约束，「组件」间引用的现象会比较多）&lt;&#x2F;li&gt;
&lt;li&gt;容易出现冲突（尤其是使用 Xib，还有就是 Xcode Project，虽说有&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;truebit&#x2F;xUnique&quot;&gt;脚本&lt;&#x2F;a&gt;可以改善）&lt;&#x2F;li&gt;
&lt;li&gt;业务方的开发效率不够高（只关心自己的组件，却要编译整个项目，与其他不相干的代码糅合在一起）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了解决这些问题，就采取了「组件化」策略。它能带来这些好处&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;加快编译速度（不用编译主客那一大坨代码了）&lt;&#x2F;li&gt;
&lt;li&gt;自由选择开发姿势（MVC &#x2F; MVVM &#x2F; FRP）&lt;&#x2F;li&gt;
&lt;li&gt;方便 QA 有针对性地测试&lt;&#x2F;li&gt;
&lt;li&gt;提高业务开发效率&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先来看下，组件化之后的一个大概架构&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575533415332.jpg&quot;
        width=&quot;1624&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;「组件化」顾名思义就是把一个大的 App 拆成一个个小的组件，相互之间不直接引用。那如何做呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-fang-shi&quot;&gt;实现方式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zu-jian-jian-tong-xin&quot;&gt;组件间通信&lt;&#x2F;h4&gt;
&lt;p&gt;以 iOS 为例，由于之前就是采用的 URL 跳转模式，理论上页面之间的跳转只需 open 一个 URL 即可。所以对于一个组件来说，只要定义「支持哪些 URL」即可，比如详情页，大概可以这么做的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;detail?id=:id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; routerParameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create view controller with id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; push view controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首页只需调用 &lt;code&gt;[MGJRouter openURL:@&amp;quot;mgj:&#x2F;&#x2F;detail?id=404&amp;quot;]&lt;&#x2F;code&gt; 就可以打开相应的详情页。&lt;&#x2F;p&gt;
&lt;p&gt;那问题又来了，我怎么知道有哪些可用的 URL？为此，我们做了一个后台专门来管理。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575445324533.jpg&quot;
        width=&quot;2330&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后可以把这些短链生成不同平台所需的文件，iOS 平台生成 .{h,m} 文件，Android 平台生成 .java 文件，并注入到项目中。这样开发人员只需在项目中打开该文件就知道所有的可用 URL 了。&lt;&#x2F;p&gt;
&lt;p&gt;目前还有一块没有做，就是参数这块，虽然描述了短链，但真想要生成完整的 URL，还需要知道如何传参数，这个正在开发中。&lt;&#x2F;p&gt;
&lt;p&gt;还有一种情况会稍微麻烦点，就是「组件 A」要调用「组件 B」的某个方法，比如在商品详情页要展示购物车的商品数量，就涉及到向购物车组件拿数据。&lt;&#x2F;p&gt;
&lt;p&gt;类似这种同步调用，iOS 之前采用了比较简单的方案，还是依托于 &lt;code&gt;MGJRouter&lt;&#x2F;code&gt;，不过添加了新的方法 &lt;code&gt;- (id)objectForURL:&lt;&#x2F;code&gt;，注册时也使用新的方法进行注册&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[MGJRouter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;registerURLPattern:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;toObjectHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;routerParamters){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some calculation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时 &lt;code&gt;NSNumber *orderCount = [MGJRouter objectForURL:@&amp;quot;mgj:&#x2F;&#x2F;cart&#x2F;ordercount&amp;quot;]&lt;&#x2F;code&gt; 这样就拿到了购物车里的商品数。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂但更具通用性的方法是使用「协议」 &amp;lt;-&amp;gt; 「类」绑定的方式，还是以购物车为例，购物车组件可以提供这么个 Protocol&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;MGJCart &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;orderCount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到通过协议可以直接指定返回的数据类型。然后在购物车组件内再新建个类实现这个协议，假设这个类名为&lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，接着就可以把它与协议关联起来 &lt;code&gt;[ModuleManager registerClass:MGJCartImpl forProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;，对于使用方来说，要拿到这个 &lt;code&gt;MGJCartImpl&lt;&#x2F;code&gt;，需要调用 &lt;code&gt;[ModuleManager classForProtocol:@protocol(MGJCart)]&lt;&#x2F;code&gt;。拿到之后再调用 &lt;code&gt;+ (NSInteger)orderCount&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;那么，这个协议放在哪里比较合适呢？如果跟组件放在一起，使用时还是要先引入组件，如果有多个这样的组件就会比较麻烦了。所以我们把这些公共的协议统一放到了 &lt;code&gt;PublicProtocolDomain.h&lt;&#x2F;code&gt; 下，到时只依赖这一个文件就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;Android 也是采用类似的方式。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zu-jian-sheng-ming-zhou-qi-guan-li&quot;&gt;组件生命周期管理&lt;&#x2F;h4&gt;
&lt;p&gt;理想中的组件可以很方便地集成到主客中，并且有跟 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 一致的回调方法。这也是 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看现在的入口方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didFinishLaunchingWithOptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)launchOptions
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [MGJApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;startApp&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] loadModuleFromPlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] pathForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;modules&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; ofType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;plist&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didFinishLaunchingWithOptions:launchOptions&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackLaunchTime&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 &lt;code&gt;[MGJApp startApp]&lt;&#x2F;code&gt; 主要负责一些 SDK 的初始化。&lt;code&gt;[self trackLaunchTime]&lt;&#x2F;code&gt; 是我们打的一个点，用来监测从 &lt;code&gt;main&lt;&#x2F;code&gt; 方法开始到入口方法调用结束花了多长时间。其他的都由 &lt;code&gt;ModuleManager&lt;&#x2F;code&gt; 搞定，&lt;code&gt;loadModuleFromPlist:pathForResource:&lt;&#x2F;code&gt; 方法会读取 bundle 里的一个 plist 文件，这个文件的内容大概是这样的&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575489295366.jpg&quot;
        width=&quot;906&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个 &lt;code&gt;Module&lt;&#x2F;code&gt; 都实现了 &lt;code&gt;ModuleProtocol&lt;&#x2F;code&gt;，其中有一个 &lt;code&gt;- (BOOL)applicaiton:didFinishLaunchingWithOptions:&lt;&#x2F;code&gt; 方法，如果实现了的话，就会被调用。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题就是，系统的一些事件会有通知，比如 &lt;code&gt;applicationDidBecomeActive&lt;&#x2F;code&gt; 会有对应的 &lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;&#x2F;code&gt;，组件如果要做响应的话，只需监听这个系统通知即可。但也有一些事件是没有通知的，比如 &lt;code&gt;- application:didRegisterUserNotificationSettings:&lt;&#x2F;code&gt;，这时组件如果也要做点事情，怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;一个简单的解决方法是在 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 的各个方法里，手动调一遍组件的对应的方法，如果有就执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)application&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIApplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)application didRegisterForRemoteNotificationsWithDeviceToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)deviceToken
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ModuleManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;] allModules];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ModuleProtocol&amp;gt; module in modules) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;respondsToSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ke-gong-cheng&quot;&gt;壳工程&lt;&#x2F;h4&gt;
&lt;p&gt;既然已经拆出去了，那拆出去的组件总得有个载体，这个载体就是壳工程，壳工程主要包含一些基础组件和业务 SDK，这也是主工程包含的一些内容，所以如果在壳工程可以正常运行的话，到了主工程也没什么问题。不过这里存在版本同步问题，之后会说到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yu-dao-de-wen-ti&quot;&gt;遇到的问题&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zu-jian-chai-fen&quot;&gt;组件拆分&lt;&#x2F;h5&gt;
&lt;p&gt;由于之前的代码都是在一个工程下的，所以要单独拿出来作为一个组件就会遇到不少问题。首先是组件的划分，当时在定义组件粒度时也花了些时间讨论，究竟是粒度粗点好，还是细点好。粗点的话比较有利于拆分，细点的话灵活度比较高。最终还是选择粗一点的粒度，先拆出来再说。&lt;&#x2F;p&gt;
&lt;p&gt;假如要把详情页迁出来，就会发现它依赖了一些其他部分的代码，那最快的方式就是直接把代码拷过来，改个名使用。比较简单暴力。说起来比较简单，做的时候也是挺有挑战的，因为正常的业务并不会因为「组件化」而停止，所以开发同学们需要同时兼顾正常的业务和组件的拆分。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ban-ben-guan-li&quot;&gt;版本管理&lt;&#x2F;h5&gt;
&lt;p&gt;我们的组件包括第三方库都是通过 Cocoapods 来管理的，其中组件使用了私有库。之所以选择 Cocoapods，一个是因为它比较方便，还有就是用户基数比较大，且社区也比较活跃（活跃到了会时不时地触发 Github 的 rate limit，导致长时间 clone 不下来··· &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;4989#issuecomment-193772935&quot;&gt;见此&lt;&#x2F;a&gt;），当然也有其他的管理方式，比如 submodule &#x2F; subtree，在开发人员比较多的情况下，方便、灵活的方案容易占上风，虽然它也有自己的问题。主要有版本同步和更新&#x2F;编译慢的问题。&lt;&#x2F;p&gt;
&lt;p&gt;假如基础组件做了个 API 接口升级，这个升级会对原有的接口做改动，自然就会升一个中位的版本号，比如原先是 1.6.19，那么现在就变成 1.7.0 了。而我们在 Podfile 里都是用 &lt;code&gt;~&lt;&#x2F;code&gt; 指定的，这样就会出现主工程的 pod 版本升上去了，但是壳工程没有同步到，然后群里就会各种反馈编译不过，而且这个编译不过的长尾有时能拖上两三天。&lt;&#x2F;p&gt;
&lt;p&gt;然后我们就想了个办法，如果不在壳工程里指定基础库的版本，只在主工程里指定呢，理论上应该可行，只要不出现某个基础库要同时维护多个版本的情况。但实践中发现，壳工程有时会莫名其妙地升不上去，在 podfile 里指定最新的版本又可以升上去，所以此路不通。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个问题是 &lt;code&gt;pod update&lt;&#x2F;code&gt; 时间过长，经常会在 &lt;code&gt;Analyzing Dependency&lt;&#x2F;code&gt; 上卡 10 多分钟，非常影响效率。后来排查下来是跟组件的 Podspec 有关，配置了 subspec，且依赖比较多。&lt;&#x2F;p&gt;
&lt;p&gt;然后就是 pod update 之后的编译，由于是源码编译，所以这块的时间花费也不少，接下去会考虑 framework 的方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chi-xu-ji-cheng&quot;&gt;持续集成&lt;&#x2F;h3&gt;
&lt;p&gt;在刚开始，持续集成还不是很完善，业务方升级组件，直接把 podspec 扔到 private repo 里就完事了。这样最简单，但也经常会带来编译通不过的问题。而且这种随意的版本升级也不太能保证质量。于是我们就搭建了一套持续集成系统，大概如此&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575538180893.jpg&quot;
        width=&quot;1714&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个组件升级之前都需要先通过编译，然后再决定是否升级。这套体系看起来不复杂，但在实施过程中经常会遇到后端的并发问题，导致业务方要么集成失败，要么要等不少时间。而且也没有一个地方可以呈现当前版本的组件版本信息。还有就是业务方对于这种命令行的升级方式接受度也不是很高。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547778269.jpg&quot;
        width=&quot;1944&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于此，在经过了几轮讨论之后，有了新版的持续集成平台，升级操作通过网页端来完成。&lt;&#x2F;p&gt;
&lt;p&gt;大致思路是，业务方如果要升级组件，假设现在的版本是 0.1.7，添加了一些 feature 之后，壳工程测试通过，想集成到主工程里看看效果，或者其他组件也想引用这个最新的，就可以在后台手动把版本升到 0.1.8-rc.1，这样的话，原先依赖 &lt;code&gt;~&amp;gt; 0.1.7&lt;&#x2F;code&gt; 的组件，不会升到 0.1.8，同时想要测试这个组件的话，只要手动把版本调到 0.1.8-rc.1 就可以了。这个过程不会触发 CI 的编译检查。&lt;&#x2F;p&gt;
&lt;p&gt;当测试通过后，就可以把尾部的 &lt;code&gt;-rc.n&lt;&#x2F;code&gt; 去掉，然后点击「集成」，就会走 CI 编译检查，通过的话，会在主工程的 podfile 里写上固定的版本号 0.1.8。也就是说，podfile 里所有的组件版本号都是固定的。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575547304396.jpg&quot;
        width=&quot;1986&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;zhou-bian-she-shi&quot;&gt;周边设施&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ji-chu-zu-jian-ji-zu-jian-de-wen-dang-demo-dan-yuan-ce-shi&quot;&gt;基础组件及组件的文档 &#x2F; Demo &#x2F; 单元测试&lt;&#x2F;h4&gt;
&lt;p&gt;无线基础的职能是为集团提供解决方案，只是在蘑菇街 App 里能 work 是远远不够的，所以就需要提供入口，知道有哪些可用组件，并且如何使用，就像这样（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575551851317.jpg&quot;
        width=&quot;2234&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这就要求组件的负责人需要及时地更新 README &#x2F; CHANGELOG &#x2F; API，并且当发生 API 变更时，能够快速通知到使用方。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gong-gong-ui-zu-jian&quot;&gt;公共 UI 组件&lt;&#x2F;h4&gt;
&lt;p&gt;组件化之后还有一个问题就是资源的重复性，以前在一个工程里的时候，资源都可以很方便地拿到，现在独立出去了，也不知道哪些是公用的，哪些是独有的，索性都放到自己的组件里，这样就会导致包变大。还有一个问题是每个组件可能是不同的产品经理在跟，而他们很可能只关注于自己关心的页面长什么样，而忽略了整体的样式。公共 UI 组件就是用来解决这些问题的，这些组件甚至可以跨 App 使用。（目前还未实现）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;mgj-components&amp;#x2F;14575557095716.jpg&quot;
        width=&quot;1992&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;「组件化」是 App 膨胀到一定体积后的解决方案，能一定程度上解决问题，在提高开发效率的过程中，采坑是难免的，希望这篇文章能够带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>不可变对象的魅力</title>
            <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-power-of-immutable-objects/</link>
            <guid>https://limboy.me/posts/the-power-of-immutable-objects/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;10x Engineer: a developer who incurs technical debt so fast he appears more productive than the 10 developers tasked w&#x2F; cleaning his mess up&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我们都知道，全局变量应该尽量少用或不用，因为它会带来两个明显的问题：耦合和不确定性。有了它，单元测试就不好进行，即使通过了测试，也不能确保这个全局变量变了之后是否能通过测试。 我们经常使用的单例就有全局变量的意味：外部可以直接拿来用，并且可以在任何地方被修改。&lt;&#x2F;p&gt;
&lt;p&gt;为了加快开发速度，往往会以功能实现优先，其中的一个「方法」就是提供可变对象，比如像 OC 里的 &lt;code&gt;NSMutableDictionary&lt;&#x2F;code&gt;。前两天正好遇到一个与此有关的 case，可以拿出来说一下。&lt;&#x2F;p&gt;
&lt;p&gt;我们的网络层发送请求时，默认会带上一些系统参数，比如 iOS 系统版本，app 版本等。同时如果用户已经登录了，也会带上一些用户信息，比如 &lt;code&gt;token&lt;&#x2F;code&gt;。为了方便复用，我们每次请求都会把已有的参数放在一个自定义的网络请求类，假设这个类的名字叫&lt;code&gt;APIClient&lt;&#x2F;code&gt;。同时又允许外部动态添加一些请求参数，比如用户信息，是否启用调试等。&lt;&#x2F;p&gt;
&lt;p&gt;出于方便考虑，我们给 &lt;code&gt;APIClient&lt;&#x2F;code&gt; 类加了一个 &lt;code&gt;NSMutableDictionary&lt;&#x2F;code&gt; 属性 &lt;code&gt;builtinParameters&lt;&#x2F;code&gt;，这样外部只要拿到 &lt;code&gt;APIClient&lt;&#x2F;code&gt; 的单例，然后往这个属性里面添加额外的参数就可以了。&lt;code&gt;APIClient&lt;&#x2F;code&gt; 里会把这些参数组装成 &lt;code&gt;querystring&lt;&#x2F;code&gt; 发送给服务端。&lt;&#x2F;p&gt;
&lt;p&gt;就这样正常运行了一段时间，忽然有一天发现用户登出后，Ta 原先的一些登录信息还是被发送给了服务端。因为这个网络请求类并没有做过改动，所以排查起来没什么头绪。经过多次抓包和跟踪后，终于定位到了问题的原因：&lt;code&gt;builtinParameters&lt;&#x2F;code&gt; 这个属性在外部被改变了。更细致的原因跟一次重构有关，这里就不展开了。&lt;&#x2F;p&gt;
&lt;p&gt;所以可变对象会给调试和维护带来麻烦，尤其是这些对象多起来后，更是不好处理。&lt;&#x2F;p&gt;
&lt;p&gt;「可变对象」就像男人的承诺：不可信，不知道什么时候会因为什么原因发生改变。&lt;&#x2F;p&gt;
&lt;p&gt;「不可变对象」就不一样了，拿到的是什么，就是什么，不会改变，除非被换成了一个新的。&lt;&#x2F;p&gt;
&lt;p&gt;但「这世界唯一不变的就是变化」，不可变对象如何来应对这个充满变数的环境呢？&lt;&#x2F;p&gt;
&lt;p&gt;先来看一下这个「动画」&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;31.media.tumblr.com&#x2F;fe521bb54c25c173355632a3f5e029fe&#x2F;tumblr_nmobaa6IQa1ruhxczo1_500.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过连续快速地翻页来形成动画的假象，这主要是利用了人眼的&lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;zh-hant&#x2F;%E8%A6%96%E8%A6%BA%E6%9A%AB%E7%95%99&quot;&gt;视觉停留&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;有点扯远了，但这跟「不可变对象」可变化，还挺像的，这些图像是静态的，不变的，但这本书让这些图像变了起来。这本书可以是一个类，其中的图片可以是一个 ivar，外部可以给这个 ivar 设置新的 value，这样对于 class 来说，就可以放心地使用这个 ivar，不用担心什么时候这个 ivar 自身会发生变化，比如 &lt;code&gt;[dict addObject:]&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 ReactJS+Flux 是如何使用 Immutable Objects 的。&lt;&#x2F;p&gt;
&lt;p&gt;先来说说 Flux，用一张图就能差不多描述清楚了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;flux&#x2F;img&#x2F;flux-simple-f8-diagram-with-client-action-1300w.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Flux 的一个特点是，数据是单向流动的，就像漏斗一样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Dispatcher&lt;&#x2F;code&gt; 是一个「分发器」，它的职责是接受所有的 Action，简单组装后，扔给 Store，其他的事情就不管了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Store&lt;&#x2F;code&gt; 是一个数据中心，当 Store 接收到 Dispatcher 过来的 Action 时，会根据这些 Action，生成新的 States，然后再把它传给 View。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;View&lt;&#x2F;code&gt; 拿到这些新的 States 后，会有选择的进行组件的更新。&lt;&#x2F;p&gt;
&lt;p&gt;这里的 States 就是一个不可变对象，Store 不会去修改 States 的某个属性，而是生成一个新的。但是生成一个新的成本不是会很大？是的，所以可以利用 &lt;a href=&quot;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;Copy-on-write&quot;&gt;Copy on Write&lt;&#x2F;a&gt; 等技术进行优化。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看看 ReactJS 拿到这个新的 property 后会如何处理，先来看一张图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-power-of-immutable-objects&amp;#x2F;should-component-update.png&quot;
        width=&quot;555&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;View 会对新的 property 和当前的 property 做比较，如果数据是一致的，那就什么也不做（就像 C2 一样），它下面的节点也不用比较了；如果数据不一致，再往下找，一直找到那[几]个需要更新的节点。&lt;&#x2F;p&gt;
&lt;p&gt;这整个过程没有使用到 Mutable Objects，但照样 Getting Things Done。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;Immutable Objects 和 Mutable Objects 有各自的使用场景，后者可以作为前者的容器。比如 Facebook 在&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2014&#x2F;10&#x2F;Facebook-ios-architecture&quot;&gt;他们的架构文章&lt;&#x2F;a&gt;中提到，他们的 Model 类是只读的，但 Model 寄生的对象可以更新 Model。我们可能习惯了使用可变对象，因为各种教程&#x2F;编程书籍上都是这么写的，但合理地使用「不可变对象」有时会带来更好的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2014&#x2F;10&#x2F;Facebook-ios-architecture&quot;&gt;How Immutable State Helped Facebook to Improve Its iOS App Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realm.io&#x2F;news&#x2F;andy-matuschak-controlling-complexity&#x2F;&quot;&gt;Controlling Complexity in Swift&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;minibooks&#x2F;domain-driven-design-quickly&quot;&gt;Domain Driven Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>MVVM without ReactiveCocoa</title>
            <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</link>
            <guid>https://limboy.me/posts/ios-mvvm-without-reactivecocoa/</guid>
            <description>&lt;p&gt;MVVM 是 MVC 模式的一种演进，它主要解决了 ViewController 过于臃肿带来的不易维护和测试的问题。其中 ViewModel 的主要职责是处理业务逻辑并提供 View 所需的数据，这样 VC 就不用关心业务，自然也就瘦了下来。ViewModel 只关心业务数据不关心 View，所以不会与 View 产生耦合，也就更方便进行单元测试。&lt;&#x2F;p&gt;
&lt;p&gt;View 是一个壳，它所呈现的内容都需要由 ViewModel 来提供，而 View 又不与 ViewModel 直接沟通，这时就需要 ViewController 来做中间的协调者。&lt;&#x2F;p&gt;
&lt;p&gt;ViewController 持有 View 和 ViewModel，当 VC 初始化时，会让 ViewModel 去取数据，简单来说就是调用 VM 的某个获取数据的方法。&lt;&#x2F;p&gt;
&lt;p&gt;使用 MVVM 最舒服的姿势是搭配 ReactiveCocoa。不过它的问题在于学习成本和维护成本比较高，在小团队中或许还可以尝试，当开发人员数量较多时就很难推起来了。这也是我们今天要讲的主题：如何不借助 ReactiveCocoa 来实现 MVVM。&lt;&#x2F;p&gt;
&lt;p&gt;先从数据的获取开始说起吧。在 ReactiveCocoa 里有一个类叫「RACCommand」，它的主要作用是执行某个会改变数据的操作，然后提供获取数据的方法，跟我们想要达到的目的很像，所以可以借鉴这个思路，写一个简单的 Command。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCompletionBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandConsumeBlock)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;MGJCommandCancelBlock)();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommandResult : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;content;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;MGJCommand : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; executing;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) MGJCommandResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithConsumeHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandConsumeBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;consumeHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelHandler:&lt;&#x2F;span&gt;&lt;span&gt;(MGJCommandCancelBlock )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cancelHandler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 8
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 9
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;input&lt;&#x2F;code&gt; 是外部传过来的值，比如 user_id，当拿到数据后，调用下 completionHandler，这样 &lt;code&gt;result&lt;&#x2F;code&gt; 属性就会变化&lt;&#x2F;li&gt;
&lt;li&gt;有些操作，如 http 请求，需要手动取消&lt;&#x2F;li&gt;
&lt;li&gt;单独把 &lt;code&gt;error&lt;&#x2F;code&gt; 作为一个属性放出来，是因为很多数据请求操作都可能出错，当出错后，只需改变这个 error 属性即可。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;content&lt;&#x2F;code&gt; 存放了这个 Command 的数据处理结果。&lt;&#x2F;li&gt;
&lt;li&gt;标识了这个 Command 目前的运行状态，比如可以根据这个状态来显示 loading。&lt;&#x2F;li&gt;
&lt;li&gt;每次 Command 执行完一个任务后，result 都会改变，外部可以 KVO 这个 result，然后就可以实时获取最新的结果了。&lt;&#x2F;li&gt;
&lt;li&gt;Command 的执行逻辑，如果实现了 &lt;code&gt;cancelHandler&lt;&#x2F;code&gt; 的话，外部调用 &lt;code&gt;cancel&lt;&#x2F;code&gt;，这个 Handler 就会被触发。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来触发 Command 的执行，同时可以传一个参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;外部可以调用这个方法来取消 Command 的执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;实现起来也蛮简单的，这里就不多说了。用起来大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewModel.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[MGJCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConsumeHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input, MGJCommandCompletionBlock completionHandler) {
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [FollowRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getFollowList:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)input success:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;users) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usersToFollow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kFollowExpertSearchSucceedSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } failure:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(StatusEntity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;completionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 ViewController 里的用法大概像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didTapFollowButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 根据 button 找到 userID
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followCommand&lt;&#x2F;span&gt;&lt;span&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;userID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是这样，VC 本身不处理业务逻辑，都交给 ViewModel 去处理，而这些数据请求的结果处理又有不同的处理方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;delegate&quot;&gt;Delegate&lt;&#x2F;h3&gt;
&lt;p&gt;当 ViewModel 拿到数据后，可以把结果以 Delegate 的方式通知 VC，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)didFollowUserWithResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)result
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;followButton&lt;&#x2F;span&gt;&lt;span&gt; doSomeAnimation];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样做的好处是比较符合苹果既有的设计模式，而且也可以通过查看 Delegate 协议来知道 VM 暴露了哪些接口供外部使用。&lt;&#x2F;p&gt;
&lt;p&gt;不过这种方法少了点灵活性，比如需要联合多个属性的变化来做一些事情时，处理起来就会比较麻烦，这也是 RAC 强大的地方。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kvo&quot;&gt;KVO&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 是基于 KVO 构建的，所以也可以用 KVO 来让 VC 获取 VM 的变化。&lt;&#x2F;p&gt;
&lt;p&gt;但我们都知道 KVO 的槽点比较多，比如使用起来不方便，用完还要记得移除等。这里可以使用 Facebook 开源的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;KVOController&quot;&gt;KVOController&lt;&#x2F;a&gt;，它比较好的处理了 KVO 存在的一些问题，同时又能发挥 KVO 带来的便捷性。&lt;&#x2F;p&gt;
&lt;p&gt;有了它我们就能在一个地方把 VM 的更新处理掉了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;KVOController&lt;&#x2F;span&gt;&lt;span&gt; observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt; keyPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSKeyValueObservingOptionNew&lt;&#x2F;span&gt;&lt;span&gt; block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;observer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;target, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;change) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;newValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; change[NSKeyValueChangeNewKey];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doSomething with the newValue
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对 VM 其他 keyPath 的处理也都可以放到这里
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果觉得这样的写法还是太麻烦，可以做一层简单的封装，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)handleViewModelUpdate
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;followCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; use newValue to update view
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是会好一点，使用 KVO 比 Delegate 好的一点是不用再额外声明协议和方法，而且支持 block，使用起来也会方便些。&lt;&#x2F;p&gt;
&lt;p&gt;对于像 &lt;code&gt;error&lt;&#x2F;code&gt; 这样很多操作都会产生同样结果的场景，可以单独拿出来，作为 ViewModel 的一个属性，使用时，直接 KVO 这个属性即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-jie-chu-li&quot;&gt;细节处理&lt;&#x2F;h3&gt;
&lt;p&gt;如果不涉及到 TableView 等会出现复用场景的地方，MVVM 使用起来还是比较方便的。如果有了 TableView，又要做一些额外的处理。&lt;&#x2F;p&gt;
&lt;p&gt;一般来说，VC 可以带一个 VM，那如果出现 Cell 时怎么办，Cell 里又包含了按钮，按钮又需要数据请求又怎么处理？这些都是比较常见的场景，也可以通过 MVVM 来解决。&lt;&#x2F;p&gt;
&lt;p&gt;我们知道 VM 的职责是为 View 提供数据支持，Cell 也是一个 View，那么为 Cell 配备一个 VM
不就可以了么。&lt;&#x2F;p&gt;
&lt;p&gt;这样的话，VC 的 VM 需要包含一个数组，里面的元素是 CellVM，使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView cellForRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[tableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dequeueReusableCellWithIdentifier:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Cell&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forIndexPath:indexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; cell 可能会用到 cellVM 里的 Command，所以在这里处理 command 的执行结果
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observe:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newValue){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; update cell after like
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然仅仅如此是不够的，我们需要找个恰当的时机把 KVO 移除，避免多次监听。&lt;code&gt;UITableViewDelegate&lt;&#x2F;code&gt; 里的这个方法就很适合。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SomeViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)tableView didEndDisplayingCell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UITableViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)cell forRowAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unobserve:cell keyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;likeCommand.result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不过这里也要讲究一个平衡，如果 Cell 的类型比较多，且涉及 Command 的地方不多，只是做呈现方面的工作，直接使用 Entity 会更方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 尽量不涉及业务逻辑，让 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 去做这些事情。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewController&lt;&#x2F;code&gt; 只是一个中间人，接收 &lt;code&gt;View&lt;&#x2F;code&gt; 的事件、调用 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的方法、响应 &lt;code&gt;ViewModel&lt;&#x2F;code&gt; 的变化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 不能包含 View，不然就跟 View 产生了耦合，不方便复用和测试。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 之间可以有依赖。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewModel&lt;&#x2F;code&gt; 避免过于臃肿，不然维护起来也是个问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;MVVM 并不复杂，跟 MVC 也是兼容的，只是多了一个 ViewModel 层，但就是这么一个小改动，就能让代码变得更加容易阅读和维护，不妨试一下吧。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS 统计打点那些事</title>
            <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-analytics/</link>
            <guid>https://limboy.me/posts/ios-analytics/</guid>
            <description>&lt;p&gt;一个环节，App 的运行状态、改版后的效果、用户的各种行为等都需要打点，市面上也有不少可供选择的第三方库。 假设产品有这么个需求：当用户在详情页点击购买按钮时，记录一下事件。我们实现起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    [XXXAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个需求就这样轻松搞定了，但细细想想还是有不少问题的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;页面上会有其他的 Button，可能每个 Button 都要放上这么一段代码。&lt;&#x2F;li&gt;
&lt;li&gt;这些统计其实跟具体的业务无关，没必要跟业务代码混杂在一起，不优雅。&lt;&#x2F;li&gt;
&lt;li&gt;当改版或者重构时，有可能忘了把相应的打点代码迁移过去。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以需要一种更好的方式来做这件事，这就是使用 AOP(&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Aspect-oriented_programming&quot;&gt;Aspect-Oriented-Programming&lt;&#x2F;a&gt;)，翻译过来就是「面向切面编程」&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;简单来说，就是可以动态的在函数调用的前后插一段代码。iOS 可以使用 Pete Steinberger 开发的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt; 这个库，大致原理是在 runtime 层，通过 swizzle method 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;来看一个小 Demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;View Controller &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; will appear animated: &lt;&#x2F;span&gt;&lt;span&gt;%tu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aspectInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, animated);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样在 &lt;code&gt;UIViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewWillAppear:&lt;&#x2F;code&gt; 被调用后，还会再调一下我们定义的 Block，这段日志就会被输出。而打点正好符合这种场景：正事干完之后，额外干一些跟业务无关的事情。&lt;&#x2F;p&gt;
&lt;p&gt;上面的例子，我们通过 AOP 来做的话，大概就是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; DetailViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)button
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some stuff, maybe send a request to server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; no need to call [XXXAnalytics event:]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; AppDelegate.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [DetailViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped:) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样统计代码就从业务代码中剥离出来了。但是又产生了一个新问题，多个 Button Event，岂不是要写很多行这样的代码，「重复」这样的事情，作为一个程序员怎么能忍，简单，造一个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)event
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [XXXAnalytics event:event];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kSomeEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:ListViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(followButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) event:&lt;&#x2F;span&gt;&lt;span&gt;kAnotherEventYouDefined];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来又干净了些。这时，产品经理又提了个需求：当这个按钮点击时，如果已经登录了，发送 EventA，如果没有登录则发送 EventB，也就是说，不再只是 &lt;code&gt;[XXXAnalytics event:]&lt;&#x2F;code&gt; 这么简单了，还需要加上额外的逻辑，这也难不倒我们，加上一个 &lt;code&gt;block&lt;&#x2F;code&gt; 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)trackEventWithClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)klass
&lt;&#x2F;span&gt;&lt;span&gt;                   selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)selector
&lt;&#x2F;span&gt;&lt;span&gt;               eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo))eventHandler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aspect_hookSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(selector) withOptions:AspectPositionAfter usingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; animated) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(eventHandler) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eventHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aspectInfo);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    } error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 使用
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:DetailViewController selector:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;seletor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(onBuyButtonTapped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) eventHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;AspectInfo&amp;gt; aspectInfo){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loggedIn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventA] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[XXXAnalytics event:EventB];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好了，现在只要不是太复杂的打点逻辑(那些需要方法上下文变量的)我们都能应付了，接下来就该等产品来验收了。产品搬了个凳子坐在身边，然后点一下 Button，看一下 Console，被几轮蹂躏后，产品也慢慢地接受了这种验收方式。后来某一天，忽然发现某一项或某几项数据有异常，然后找到开发，瞄了一眼：哦，这个方法被重构了。或者新加的方法忘了加统计了。只能等到下个版本再加上了，如果只是一般的统计数据倒还好，跟钱相关的就麻烦了。&lt;&#x2F;p&gt;
&lt;p&gt;那么有没有一种直观的验证方式呢？当然，程序员是万能的呀。一个理想的状况是，产品打开 App 后，开启某个开关就能看到所有会发送 Event 的按钮，就像这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-analytics&amp;#x2F;analytics_highlight.jpg&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中数字代表了 &lt;code&gt;EventID&lt;&#x2F;code&gt;。如何实现呢？还记得注册事件时，我们有传入 &lt;code&gt;class&lt;&#x2F;code&gt; 和 &lt;code&gt;selector&lt;&#x2F;code&gt; 么，一般我们都会有一个 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt;，那么就可以在 &lt;code&gt;BaseViewController&lt;&#x2F;code&gt; 的 &lt;code&gt;viewDidAppear:&lt;&#x2F;code&gt; 里做点文章了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; BaseViewController.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidAppear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)animated
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidAppear:animated&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取已经注册过的 classes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[OurAnalytics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;registeredClasses&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [registeredClasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateKeysAndObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;className, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectors, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isKindOfClass:NSClassFromString(className)]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 如何根据 selector 找到它的宿主？
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以现在问题就剩下，如何根据 &lt;code&gt;selector&lt;&#x2F;code&gt; 找到对应的 Button，这里要注意，有些 Button 可能要等网络请求完成才会出现，比如 &lt;code&gt;TableViewCell&lt;&#x2F;code&gt; 里的 Button。&lt;&#x2F;p&gt;
&lt;p&gt;没有想到太方便的方法，简单粗暴点就是设置个 Timer 每隔一段时间扫一下 subviews，如果是 button 或 包含 tapGesture 的，就拿它们的 action 对比一下，如果 match 就可以高亮那个 button &#x2F; view 了。&lt;&#x2F;p&gt;
&lt;p&gt;EventID 也一样，之前在注册时也会传一个 EventID 过来，这里直接显示出来即可。对于那些传 &lt;code&gt;eventHandler&lt;&#x2F;code&gt; 的就不行了。&lt;&#x2F;p&gt;
&lt;p&gt;所以理论上是可行的，性能上会稍微有点损耗，尤其是当 subViews 的结构比较复杂时，不过只是内部用来做验证，所以这也不是什么问题。&lt;&#x2F;p&gt;
&lt;p&gt;看起来效果已经不错了，有没有可能让这套体系再灵活一些？比如可以从后端制定打点规则？客户端只是读取一个配置文件，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupAnalytics
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; analyticsRules 是从配置文件中读取出来的
&lt;&#x2F;span&gt;&lt;span&gt;    [analyticsRules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerateObjectsUsingBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rules, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; klass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;class&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSSelectorFromString(rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;selector&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eventID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rules[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;eventID&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trackEventWithClass:klass seletor:seletor event: eventID];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那如果在后台的时候填错了 Class 或 Selector 怎么办？还好有 &lt;code&gt;objc_getClassList&lt;&#x2F;code&gt; 和 &lt;code&gt;class_copyMethodList&lt;&#x2F;code&gt; 这两个运行时方法，有了它们就可以在 App 启动时扫一遍已注册的类（过滤掉 UI &#x2F; NS 开头的），然后将它们的 seletor 也一并保存下来发送给服务端，当然这种操作只需在适当的时机做一下就可以了，比如集成打包时。&lt;&#x2F;p&gt;
&lt;p&gt;现在，这套体系就比较完整了。当然这只是我的一些构想，并没有在实践中尝试过，所以肯定会踩到各种各样的坑，不过至少看起来是个可行的方案。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Advanced NSOperation</title>
            <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/advanced-nsoperation/</link>
            <guid>https://limboy.me/posts/advanced-nsoperation/</guid>
            <description>&lt;h3 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h3&gt;
&lt;p&gt;这篇文章是对 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2015&#x2F;?id=226&quot;&gt;WWDC 2015 Session 226: Advanced NSOperations&lt;&#x2F;a&gt; 的一个小结，在那个视频中，&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;davedelong&quot;&gt;Dave DeLong&lt;&#x2F;a&gt; 分享了 NSOperation 的高级玩法，WWDC App 就是基于这套玩法做的，还是挺开阔思路的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsoperation-he-nsoperationqueue-jian-jie&quot;&gt;NSOperation 和 NSOperationQueue 简介&lt;&#x2F;h3&gt;
&lt;p&gt;我们知道 NSOperation 可以执行一些后台操作，如 HTTP 请求，在 iOS 4.0 之前是基于 NSThread 来实现的，iOS 4.0 带了 GCD，NSOperation 底层也基于 GCD 重写了底层实现。&lt;&#x2F;p&gt;
&lt;p&gt;所以 NSOperation 是 GCD 的高层封装，同时也带来了一些更加便利的功能，比如取消任务，设置依赖等。在进入高级玩法前，先简单的介绍下 NSOperation 和 NSOperationQueue。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsoperationqueue-maxconcurrentoperationcount&quot;&gt;NSOperationQueue maxConcurrentOperationCount&lt;&#x2F;h4&gt;
&lt;p&gt;这个属性表示的是 NSOperationQueue 最多可以同时处理几个任务，假如我们希望它一次只处理一个，也就是线性 Queue，可以设置 &lt;code&gt;maxConcurrentOperationCount = 1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-1.png&quot;
        width=&quot;674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中间的点表示任务的状态，在上一个任务完成前，下一个任务不会被执行，因为只有一个 worker。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望一次能处理多个，将这个值设置为大于 1 即可，或者直接使用默认值，系统会自动设置一个合理的最大值。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-2.png&quot;
        width=&quot;674&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;nsoperation-cancel&quot;&gt;NSOperation cancel&lt;&#x2F;h4&gt;
&lt;p&gt;从上面的图可以看到，正在被执行的任务的状态跟在后面排队的状态是不一样的，有这么几种状态：pending, ready, executing, finished, cancelled。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-3.png&quot;
        width=&quot;297&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之前提到过 NSOperation 一个很重要的特性是可以被取消，但不同状态的取消处理也不一样。比如当 Operation 处于 pending, ready 状态时，系统可以去看一下这个 Operation 是否已经被取消了(判断 self.cancelled)，如果是的话，就不执行任务了。但是当 Operation 处于 executing 状态时，取消的操作就只能自己处理了，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyOperation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSOperation
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelled&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; executing
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsoperation-dependency&quot;&gt;NSOperation dependency&lt;&#x2F;h4&gt;
&lt;p&gt;NSOperation 还有一个很重要的特性是可以设置依赖&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-4.png&quot;
        width=&quot;301&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;任务 A 需要等待 任务 B 和 任务 C 完成，才能被执行，而任务 B 需要等到 任务 D 完成才能被执行。&lt;&#x2F;p&gt;
&lt;p&gt;当然前提是这些 Operation 都需要被放到某个 Queue 里，这样它们的状态才会发生改变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ji-wan-fa&quot;&gt;高级玩法&lt;&#x2F;h3&gt;
&lt;p&gt;开发 App 的过程中，有一些逻辑是可以共用的，比如登录、网络状况等，最好可以组装起来，就像超能陆战队里的 megabot 一样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;megabot.jpg&quot;
        width=&quot;480&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于前面提到的 NSOperation &#x2F; NSOperationQueue 的一些特点，苹果的工程师们想到了他们的解决方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;condition&quot;&gt;Condition&lt;&#x2F;h4&gt;
&lt;p&gt;Condition，也就是条件，它可以被附加到 Operation 上，只有当 Condition 被满足时，Operation 才能被执行。比如只有在有网络的情况下才能进行交易，这时「网络状况」就是附加给「交易」的 Condition。&lt;&#x2F;p&gt;
&lt;p&gt;一个 Condition 主要包含了 3 个方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation?
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;func evaluateForOperation(operation: Operation, completion: OperationConditionResult -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这个属性用来表明这个 Condtion 是否是排他的，如果是的话，同一时间只能出现一个该类型的实例，类型的指定是通过设置 &lt;code&gt;name&lt;&#x2F;code&gt; 来实现的。&lt;&#x2F;li&gt;
&lt;li&gt;为传入的 operation 返回一个依赖的 operation，比如「喜欢」这个 Operation 需要用户已处于登录状态，那么「登录」这个 Condition 的这个方法就可以返回一个「登录」的 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;这个方法是查看这个 Condition 的执行结果，比如前面的「登录」Operation 结束后，系统将要执行「喜欢」这个 Operation，然后这个方法就会被触发，如果没有错误发生的话，就执行「喜欢」，如果有错误发生「喜欢」就会自动结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以总结起来 Condition 主要干了这么三件事&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;advanced-nsoperation&amp;#x2F;nsoperation-condition.png&quot;
        width=&quot;412&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;来看一个简单的 Condition (来自 WWDC Sample)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ReachabilityCondition: OperationCondition {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; hostKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Host&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Reachability&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static let&lt;&#x2F;span&gt;&lt;span&gt; isMutuallyExclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(host: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; host
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(operation: Operation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NSOperation? {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;evaluateForOperation(operation: Operation, completion: OperationConditionResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        ReachabilityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;requestReachability(host) { reachable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; reachable {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Satisfied)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSError(code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ConditionFailed, userInfo: [
&lt;&#x2F;span&gt;&lt;span&gt;                    OperationConditionKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hostKey: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;host
&lt;&#x2F;span&gt;&lt;span&gt;                ])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;                completion(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Failed(error))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Condtion 初始化时可以传参数进来。&lt;&#x2F;li&gt;
&lt;li&gt;这个 Condition 没有生成一个 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;，因为生成依赖 Operation 的目的是当这个 Operation 运行完后，可以在 evaluateForOperation 时获取之前的运行结果，而这里直接调用 ReachabilityController 的 requestReachability 方法就可以了，所以就免去了这一步。&lt;&#x2F;li&gt;
&lt;li&gt;当结果符合预期时，调用 &lt;code&gt;completion(.Satisfied)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;当出现异常时，调用 &lt;code&gt;completion(.Failed(error))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;operation&quot;&gt;Operation&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Operation&lt;&#x2F;code&gt; 继承自 &lt;code&gt;NSOperation&lt;&#x2F;code&gt;，同时添加了一些方法，主要可以分为 4 部分&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;li&gt;
&lt;li&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;li&gt;
&lt;li&gt;添加 Observer&lt;&#x2F;li&gt;
&lt;li&gt;添加 Condtion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;she-zhi-zhuang-tai-bian-liang-tong-shi-shou-dong-she-zhi-kvo&quot;&gt;设置状态变量，同时手动设置 KVO&lt;&#x2F;h5&gt;
&lt;p&gt;在系统提供的状态的基础上，又添加了一些新的状态，如 &lt;code&gt;EvaluatingConditions&lt;&#x2F;code&gt;, &lt;code&gt;Pending&lt;&#x2F;code&gt; 等，这些状态的改变都需要触发内置状态的 KVO，如 &lt;code&gt;isExecuting&lt;&#x2F;code&gt;, &lt;code&gt;isFinished&lt;&#x2F;code&gt;, &lt;code&gt;isReady&lt;&#x2F;code&gt; 等。通常的做法会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;willChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Executing;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didChangeValueForKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;isExecuting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当只有少量的状态改变时，在前后包一层还可以接受，但如果多了的话，就不美观了，这时可以使用 KVO 的一个方法 &lt;code&gt;+ keyPathsForValuesAffectingValueForKey:&lt;&#x2F;code&gt;，它的意思是，哪些 keyPaths 的改变会导致 &lt;code&gt;Key&lt;&#x2F;code&gt; 发生变化。所以可以定义这几个方法，然后正常设置 &lt;code&gt;state&lt;&#x2F;code&gt; 就可以了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsReady() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsExecuting() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class func &lt;&#x2F;span&gt;&lt;span&gt;keyPathsForValuesAffectingIsFinished() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Set&amp;lt;NSObject&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然，这只是完成了一半，系统知道 state 变了后， &lt;code&gt;isReady&lt;&#x2F;code&gt; 会变，然后就会调用 &lt;code&gt;ready&lt;&#x2F;code&gt; 方法，所以这三个方法我们也要一并覆盖掉。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; executing: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; finished: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Finished
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override var&lt;&#x2F;span&gt;&lt;span&gt; ready: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Bool&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; state {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Pending:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省去不相关的代码
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;                evaluateConditions()
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Until conditions have been evaluated, &amp;quot;isReady&amp;quot; returns false
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;Ready:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ready &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; cancelled
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;可以看到，当系统在问某个 Operation 是否 ready 时，&lt;code&gt;evaluateConditions&lt;&#x2F;code&gt; 方法会被触发，这里包含了该 Operation 的所有 Conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 的执行结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;zhi-xing-conditions-de-evaluateforoperation-fang-fa&quot;&gt;执行 conditions 的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;evaluateConditions() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Pending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;evaluateConditions() was called out-of-order&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;EvaluatingConditions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    OperationConditionEvaluator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;evaluate(conditions, operation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) { failures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;extend(failures)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Ready
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;遍历当前 Operation 的 conditions，执行它们的 &lt;code&gt;evaluateForOperation&lt;&#x2F;code&gt; 方法，然后将错误保存在 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 里，同时将当前的状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;或许你会问，如果出现错误，是不是表示条件不满足，如果条件不满足，为什么还要将状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt;？ 这是因为当状态设置为 &lt;code&gt;.Ready&lt;&#x2F;code&gt; 后，就会执行 &lt;code&gt;main&lt;&#x2F;code&gt; 方法，在那里会对 &lt;code&gt;_internalErrors&lt;&#x2F;code&gt; 做统一判断。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override final func &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;    assert(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== .&lt;&#x2F;span&gt;&lt;span&gt;Ready, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;This operation must be performed on an operation queue.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; _internalErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;cancelled {
&lt;&#x2F;span&gt;&lt;span&gt;        state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= .&lt;&#x2F;span&gt;&lt;span&gt;Executing
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; observers {
&lt;&#x2F;span&gt;&lt;span&gt;            observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationDidStart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        execute()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        finish()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;这里出现了 observer，当 Operation 处于不同状态时，会调用 observers 的不同方法&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;tian-jia-observers&quot;&gt;添加 Observers&lt;&#x2F;h5&gt;
&lt;p&gt;observer 的实现还是比较简单的，首先定义一个 Protocol，所有的 observer 都需要实现这个 Protocol 里的方法，然后 Operation 内置一个数组作为容器，&lt;code&gt;addObserver&lt;&#x2F;code&gt; 时，将 observer 添加到容器，当处于不同状态时，遍历容器里的 observer，调用相应的方法。&lt;&#x2F;p&gt;
&lt;p&gt;这不免让我们想起了 delegate，跟 delegate 相比，observer 的好处就在于可以指定多个观察者，而 delegate 只能指定一个。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;tian-jia-condtions&quot;&gt;添加 Condtions&lt;&#x2F;h5&gt;
&lt;p&gt;跟 observer 的实现思路基本一致。你或许会问，添加的这些 Conditions 什么时候会被触发呢？没错，就是在将 Operation 添加到 OperationQueue 时。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operationqueue&quot;&gt;OperationQueue&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;OperationQueue&lt;&#x2F;code&gt; 也是继承自系统的 &lt;code&gt;NSOperationQueue&lt;&#x2F;code&gt;，同时重写了 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法，这个方法主要做了 3 件事&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;给 Operation 添加 observer&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;gei-operation-tian-jia-observer&quot;&gt;给 Operation 添加 observer&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver(
&lt;&#x2F;span&gt;&lt;span&gt;    startHandler: nil,
&lt;&#x2F;span&gt;&lt;span&gt;    produceHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    finishHandler: { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;weak self&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;operationQueue?(q, operationDidFinish: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, withErrors: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(delegate)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;我们前面说过，一个 Operation 可以生成一个新的 Operation，这个 Operation 生成后也需要被放到 Queue 里，这个放置的过程就是在这个 delegate 里实现的。&lt;&#x2F;li&gt;
&lt;li&gt;operationQueue 自己有一个 delegate，当 queue 里的一个 operation 执行完时，会向 delegate 报告。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-dependencyforoperation&quot;&gt;处理 Operation 的 dependencies 的 dependencyForOperation&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Extract any dependencies needed by this operation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dependencies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;    $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dependencyForOperation(op)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; dependency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; dependencies {
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addDependency(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(dependency)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就很简单了，调用 &lt;code&gt;dependencyForOperation&lt;&#x2F;code&gt; 方法，拿到 operation，然后将当前的 op 依赖该 operation，同时将这个 operation 放到 queue 里，所以在 conditions 的 operations 执行完之前，op 是不会执行的。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;chu-li-operation-de-dependencies-de-pai-ta-xing&quot;&gt;处理 Operation 的 dependencies 的排他性&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; concurrencyCategories: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;conditions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flatMap { condition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isMutuallyExclusive { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nil }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;\(condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;dynamicType&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;concurrencyCategories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Set up the mutual exclusivity dependencies.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; exclusivityController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ExclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedExclusivityController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(op, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(BlockObserver { operation, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        exclusivityController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;removeOperation(operation, categories: concurrencyCategories)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这里可能看不出「排他」的实现，因为是在 &lt;code&gt;exclusivityController&lt;&#x2F;code&gt; 里面实现的，调用了它的 &lt;code&gt;addOperation&lt;&#x2F;code&gt; 方法后，它会去查看这个类型的数组是否为空，如果不为空，就让这个 operation 依赖数组的最后一个。这样在之前的 operation 执行完之前，这个 operation 是不会被执行的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;p&gt;有了 Operation 和 OperationQueue 之后，就可以开始生产 megabot 了，来看一个「查看原网页」的 Operation，这个 Operation 的作用就是展示传入的 URL。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SafariServices
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; An `Operation` to display an `NSURL` in an app-modal `SFSafariViewController`.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: Operation {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; URL: NSURL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(URL: NSURL) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;URL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URL
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;execute() {
&lt;&#x2F;span&gt;&lt;span&gt;        dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private func &lt;&#x2F;span&gt;&lt;span&gt;showSafariViewController() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; UIApplication&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sharedApplication()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;keyWindow?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rootViewController {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; safari &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; SFSafariViewController(URL: URL, entersReaderIfAvailable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            safari&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;presentViewController(safari, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, completion: nil)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt; MoreInformationOperation: SFSafariViewControllerDelegate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;safariViewControllerDidFinish(controller: SFSafariViewController) {
&lt;&#x2F;span&gt;&lt;span&gt;        controller&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dismissViewControllerAnimated(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;finish()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;因为这是一个 &lt;code&gt;ViewController&lt;&#x2F;code&gt; 相关的 Operation，所以其他同类型的 Operation，需要等我完成后才能被执行。&lt;&#x2F;li&gt;
&lt;li&gt;当这个 controller 被关闭时，表示这个 Operation 结束，调用一下 &lt;code&gt;finish&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果需要的话，可以给这个 Operation 再加一个 &lt;code&gt;ReachabilityCondition&lt;&#x2F;code&gt;，当没有网络时就不打开了。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看在 VC 层面的使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override func &lt;&#x2F;span&gt;&lt;span&gt;tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockOperation {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;performSegueWithIdentifier(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;showEarthquake&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sender: nil)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addCondition(MutuallyExclusive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UIViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; blockObserver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BlockObserver { _, errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            If the operation errored (ex: a condition failed) then the segue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;            isn&amp;#39;t going to happen. We shouldn&amp;#39;t leave the row selected.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;        *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isEmpty {
&lt;&#x2F;span&gt;&lt;span&gt;            dispatch_async(dispatch_get_main_queue()) {
&lt;&#x2F;span&gt;&lt;span&gt;                tableView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;deselectRowAtIndexPath(indexPath, animated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addObserver(blockObserver)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    operationQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;addOperation(operation)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;类似 &lt;code&gt;NSBlockOperation&lt;&#x2F;code&gt;， &lt;code&gt;BlockOperation&lt;&#x2F;code&gt; 也可以快速生成一个 Operation。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;BlockObserver&lt;&#x2F;code&gt; 也是一个快速生成 observer 的方法，这里描述了当 Operation 完成后的处理。&lt;&#x2F;li&gt;
&lt;li&gt;调用方需要新建一个 queue，然后把 Operation 放到这个 queue 里。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;相比起正常的调用，还是会多了些步骤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;基于 Operation 来架构的思想还是蛮新颖的，可以将复杂的任务拆分成粒度更细的 Operation，然后再组装。但实际使用起来也会有不少问题，比如之前提到的写起来会复杂些，调试时看 backtrace 会很累，不确定是否会带来更好的可维护性等等。不过既然苹果都已经把它用到了线上的 App，至少说明是可行的，至于与已有的架构相比会带来怎样的提升，可能需要实际写起来才知道。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>Builder Pattern 在 Objective-C 中的使用</title>
            <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/builder-pattern/</link>
            <guid>https://limboy.me/posts/builder-pattern/</guid>
            <description>&lt;p&gt;在说 Builder Pattern 之前，我们先来看看一个场景。假设我们要预定一个 iPhone 6，要 64G 的，金色的，用代码表述大概是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFX 是一个前缀，因为直接写 iPhone6 不符合类名大写的习惯，写成 IPhone6 更是怪异 ╮(╯▽╰)╭
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;iphone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以是另一种方式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一种方式可扩展性好些，但无法约束必须设置某些 property。第二种方式修正了这个问题，但扩展性也差了。&lt;&#x2F;p&gt;
&lt;p&gt;假如又有了新需求，要让客户可以选择发售区域，比如港行，国行，美版等等。对于第一种，自然可以新增一个属性，但使用者很可能完全不知道新增了这么个属性。对于第二种，则只能再新建一个初始化方式，如 &lt;code&gt;-[initWithStorage:color:place]&lt;&#x2F;code&gt;。那如果又有新的需求，比如选择是否刻字，以及刻哪些字呢？或者可以选择外壳的种类等等。这两种方式都不能很好地处理需求的变更。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们来说说 Builder Pattern，这个模式可以在各种语言里被很方便地实现，比如 javascript&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6Builder()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;golden&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.setPlace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;HK&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当有新的属性时，再加一个 &lt;code&gt;setProperty&lt;&#x2F;code&gt; 即可。如果漏写了某个属性，可以在 &lt;code&gt;build&lt;&#x2F;code&gt; 里检查。&lt;&#x2F;p&gt;
&lt;p&gt;在 Objective-C 里，这样的链式写法不是很流行（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Masonry&#x2F;Masonry&quot;&gt;Masonry&lt;&#x2F;a&gt;里这种写法用的比较多），所以，在 OC 里写起来大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;goldenColor&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果少了什么属性，在 &lt;code&gt;build&lt;&#x2F;code&gt; 时检查下即可。这样既解决了不方便扩展的问题，当有新的属性时也可以知道。&lt;&#x2F;p&gt;
&lt;p&gt;不过看起来还是不够优雅，这个 builder 只是一个临时工具，用完了就扔掉了，既然这样，那有没有可能写法上符合 OC 的传统，又让这个 builder 「临时出现」一下？且看下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor goldenColor];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;HK&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是看起来舒服多了。builder 只是在 block 范围内起作用，不会影响当前 context 的变量。这个 &lt;code&gt;+[createWithBuilder:]&lt;&#x2F;code&gt; 的代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)createWithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(BuilderBlock)block {
&lt;&#x2F;span&gt;&lt;span&gt;	NSParameterAssert(block);
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(builder)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里 &lt;code&gt;build&lt;&#x2F;code&gt; 方法，也有两种实现，第一种&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)initwithBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)builder
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		_storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		_place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外一种是把两个过程合并为一个过程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PFXiPhone6Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)build
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以在这里对 property 做检查
&lt;&#x2F;span&gt;&lt;span&gt;	NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;发行区别忘了填哦&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;iphone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[PFXiPhone6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	iPhone6.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; iPhone6;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这两种方式的区别在于对参数的处理，前一个是在目标 Class 中处理，后一种是在 Builder 中处理。&lt;&#x2F;p&gt;
&lt;p&gt;在 Facebook 的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;pop&quot;&gt;pop&lt;&#x2F;a&gt; 中也有类似的使用，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;animatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[POPAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;propertyWithName:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;property&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initializer:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(POPMutableAnimatableProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;prop) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;writeBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    prop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;readBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; values[]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 &lt;code&gt;initializer&lt;&#x2F;code&gt; 其实就是 &lt;code&gt;builder&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我在写蘑菇街的基础框架时，也有用到过几处，觉得还是蛮方便的，尤其对使用者来说。比如这个可以横向或纵向滚动的包含可点击 Items 的 collectionView。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MGJFlowCollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionViewWithBuilder:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(MGJFlowCollectionViewBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;builder) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollDirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; UICollectionViewScrollDirectionHorizontal;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumInteritemSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;minimumLineSpacing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sectionInset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;UIEdgeInsetsMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGSizeMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;itemSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; itemSize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellBuilder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;number){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UIView alloc] initWithFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, itemSize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[UIColor mgj_random];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; view;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就能通过简单的配置来生成一个水平的或垂直的 collectionView 了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 Builder Pattern 还有一个好处，就是可以将零散的配置统一起来。比如要创建一个 CollectionView，我们需要设置 layout，还要设置 layout 的一些属性，还要设置 DataSource &#x2F; Delegate 等，现在可以在一个地方统一设置，可读性上也会好一些。&lt;&#x2F;p&gt;
&lt;p&gt;所以如果遇到需要多个参数，甚至某个参数自己还包含了各种参数时，可以考虑下 Builder Pattern。&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&quot;&gt;http:&#x2F;&#x2F;www.annema.me&#x2F;the-builder-pattern-in-objective-c&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>阅读源码的乐趣</title>
            <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-pleasure-of-reading-source/</link>
            <guid>https://limboy.me/posts/the-pleasure-of-reading-source/</guid>
            <description>&lt;p&gt;阅读源码尤其是优秀的源码是一件很有乐趣的事情，可以拓宽视野，提高品位，锻炼思维，就像间接地在跟作者沟通一样。Quora 上有一个问题是：&lt;a href=&quot;http:&#x2F;&#x2F;www.quora.com&#x2F;How-did-TJ-Holowaychuk-learn-to-program&quot;&gt;TJ-Holowaychunk 是如何学习编程的&lt;&#x2F;a&gt;，他的回答是&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&#x27;t read books, never went to school, I just read other people&#x27;s code and always wonder how things work&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果有足够的好奇心，并且总想知道「How Things Work」，那么阅读源码就是个不错的途径。&lt;&#x2F;p&gt;
&lt;p&gt;源码的复杂度不同，需要投入的时间、使用的方法也不同，以一个中等复杂度的项目为例，简单分享下我阅读源码的一些经验。&lt;&#x2F;p&gt;
&lt;p&gt;WWDC 2014，有一个 Session 是讲&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;wwdc&#x2F;2014&#x2F;#232&quot;&gt;「Advanced User Interfaces with Collection Views」&lt;&#x2F;a&gt;，之所以选择这个，是因为它是我们还算熟悉的对象（Collection View），但苹果用了一些「特殊」的架构来做到代码复用，并且减少 VC 的体积，而且使用了部分 iTunes Connect 的源码，而不是简单的演示代码。所以决定一窥究竟。&lt;&#x2F;p&gt;
&lt;p&gt;为了有一个大概的感受，先看一遍视频，不需要领会每个要点，先记录一些关键信息，方便到时翻源码。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;这套结构可以处理复杂的 DataSource&lt;&#x2F;li&gt;
&lt;li&gt;可以同时适配 iPhone &#x2F; iPad&lt;&#x2F;li&gt;
&lt;li&gt;有一个统一的 loading indicator&lt;&#x2F;li&gt;
&lt;li&gt;可以设置某个 Header 是否置顶&lt;&#x2F;li&gt;
&lt;li&gt;可以有一个全局的 Header&lt;&#x2F;li&gt;
&lt;li&gt;通过聚合 DataSource 的方法来达到代码复用，并且只有一个 VC&lt;&#x2F;li&gt;
&lt;li&gt;可以设置聚合形式为 Segmented &#x2F; Composed&lt;&#x2F;li&gt;
&lt;li&gt;layout 信息可以配置，且可以覆盖&lt;&#x2F;li&gt;
&lt;li&gt;使用了有限状态机&lt;&#x2F;li&gt;
&lt;li&gt;子 DataSource 在数据载入完成后会有一个 block，所需的 DataSource 都载入完成时，这些 block 会被统一执行&lt;&#x2F;li&gt;
&lt;li&gt;Section Metrics 可以设置 Section 的具体表现&lt;&#x2F;li&gt;
&lt;li&gt;layout 的信息会在内部被保存，避免重复计算 (Snapshot Metrics)&lt;&#x2F;li&gt;
&lt;li&gt;Optional Layout Methods 会有意想不到的好效果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;产生了一些疑问，比如&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;多个子 DataSource 被组合成一个 Composed DataSource 时，如何通过 IndexPath 找到对应的 DataSource？&lt;&#x2F;li&gt;
&lt;li&gt;找到之后如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;是否置顶是如何实现的？&lt;&#x2F;li&gt;
&lt;li&gt;如何通过有限状态机来管理 Loading 状态？&lt;&#x2F;li&gt;
&lt;li&gt;如果有按钮，那么按钮的点击事件如何处理？&lt;&#x2F;li&gt;
&lt;li&gt;Collection View 没有 headerView，这又是怎么实现的？&lt;&#x2F;li&gt;
&lt;li&gt;数据是怎么载入的？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;大概有了些概念和疑问之后，就可以打开源码痛快看了，先来看看目录结构 (可以在这里&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zwaldowski&#x2F;AAPLAdvancedCollectionView&quot;&gt;在线浏览&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Framework
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Categories
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; DataSources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Layouts
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; ViewControllers
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Views
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|-&lt;&#x2F;span&gt;&lt;span&gt; Application
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来关键的信息都在 Framework 里了，那如何切入呢？反其道而行之，先来看看这些 Framework 是怎么用的，最直接的就从 ViewController 入手。那就先来看看 AAPLCatListViewController 这个类吧，如果没猜错的话，应该是展示喵咪列表（直观的名字很重要）。&lt;&#x2F;p&gt;
&lt;p&gt;果然很小，居然只有 140 行，如果不分离的话，1400 行也是可以轻松达到的。看到定义了一个 AAPLSegmentedDataSource，脑海里大概可以想象出是一个可以切换 Tag 的页面，接着又看到了两个 DataSource，那这两个页面的数据源应该就是它们了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;APPLCatListViewController ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLSegmentedDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;segmentedDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;catsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;favoriteCatsDataSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;selectedIndexPath;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;selectedDataSourceObserver;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后又看到这么一行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)dealloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;segmentedDataSource&lt;&#x2F;span&gt;&lt;span&gt; aapl_removeObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;selectedDataSourceObserver&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是苹果自己实现了一个 KVO Wrapper，果然他们自己也无法忍受原生的 KVO，哈哈。接着到了 ViewDidLoad，新建了两个 DataSource，那新建的时候都干了些什么？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newAllCatsDataSource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;dataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title for available cats list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;All the big ...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The message to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noContentTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;No Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;The title to show when no cats are available&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorMessage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A problem with the network ....&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    dataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errorTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSLocalizedString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Unable To Load Cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Title of message to show when unable to load cats&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; dataSource;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以只是初始化，然后设置一些信息，Nothing Special。然后看到了 AAPLLayoutSectionMetrics ，看起来是设置 Layout 的一些显示信息，如 height &#x2F; backgroundColor 之类的。&lt;&#x2F;p&gt;
&lt;p&gt;最后创建了一个 KVO 来监测 selectedDataSource 的变化，界面上做相应的调整。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看看 AAPLCatListDataSource 的实现，一进去发现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLCatListDataSource : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AAPLBasicDataSource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Is this list showing the favorites or all available cats?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来 AAPLBasicDataSource 一定做了很多事，进入到 AAPLBasicDataSource.m 文件，看到这个方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setShowingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)showingFavorites
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; _showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _showingFavorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; showingFavorites;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resetContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNeedsLoadContent&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(showingFavorites)
&lt;&#x2F;span&gt;&lt;span&gt;        [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;observeFavoriteToggledNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;AAPLCatFavoriteToggledNotificationName object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到有一个 &lt;code&gt;setNeedsLoadContent&lt;&#x2F;code&gt; 方法，看起来数据的载入应该是通过这个方法来触发的，进去看看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setNeedsLoadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cancelPreviousPerformRequestsWithTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) object:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loadContent) withObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;afterDelay:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一个方法没怎么接触过，查一下文档先，原来是可以取消之前通过 &lt;code&gt;performSelector:withObject:afterDelay:&lt;&#x2F;code&gt; 触发的方法，为了加深印象，顺便 Google 一下这个方法，原来 &lt;code&gt;performSelector:withObject:afterDelay&lt;&#x2F;code&gt; 在方法被执行前，会持有 Object，方法执行后在解除对 Object 的持有，如果不小心多次调用这个方法就有可能导致内存泄露，所以在调用此方法前先 cancel 一下是个好习惯。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看这个 &lt;code&gt;loadContent&lt;&#x2F;code&gt; 都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; To be implemented by subclasses…
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看来需要在子类实现这个方法，那就到 AAPLCatListDataSource 里看看这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadContentWithBlock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Check to make certain a more recent call to load content hasn&amp;#39;t superceded this one…
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading ignore];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading doneWithError:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(cats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; cats;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [loading updateWithNoContent:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AAPLCatListDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;showingFavorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchFavoriteCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [[AAPLDataAccessManager manager] fetchCatListWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handler];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用了 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; 方法，进去看看，这个方法做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)loadContentWithBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingBlock)block
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;beginLoading&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    __weak &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; weakself &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadingWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error, AAPLLoadingUpdateBlock update){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newState)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Tell previous loading instance it&amp;#39;s no longer current and remember this loading instance
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Call the provided block to actually do the load
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(loading)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单说来就是生成了一个 loading，然后把 loading 传给 block，那 &lt;code&gt;loadingWithCompletionHandler:&lt;&#x2F;code&gt; 这个方法又做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)loadingWithCompletionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update))handler
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSParameterAssert(handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    AAPLLoading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; handler;
&lt;&#x2F;span&gt;&lt;span&gt;    loading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; loading;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以就是生成一个 loading 实例，然后把 handler 存到 block 属性里。既然存了，那将来某个时候一定会用到，从名字上来看，应该是 loading 完成时会被调用，搜索 block 关键字，发现只有在下面这个方法中 block 才会被调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_doneWithNewState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)newState error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLLoadingUpdateBlock)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#if&lt;&#x2F;span&gt;&lt;span&gt; DEBUG
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;OSAtomicCompareAndSwap32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_complete)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NSAssert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completion method called more than once&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;block)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error, AAPLLoadingUpdateBlock update) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _block;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(newState, error, update);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;既然是 _ 开头，那应该是内部方法，对外封装了几种状态，如 &lt;code&gt;ignore&lt;&#x2F;code&gt;, &lt;code&gt;done&lt;&#x2F;code&gt;, &lt;code&gt;updateWithContent:&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;p&gt;咦，这里为什么要先把 _block 赋给一个临时变量 block，然后再把 _block 设为 nil 呢？看起来像是为了解决某种内存问题。如果直接 &lt;code&gt;_block(newState, error, update)&lt;&#x2F;code&gt; 会怎样？哦，虽然这里没有出现 self，但 _block 是一个 instance 变量，所以在 ^{} 里会对 self 进行强引用。而如果赋给一个临时变量，那么只会对这个临时变量强引用，就不会出现循环引用的情况。&lt;&#x2F;p&gt;
&lt;p&gt;AAPLLoading 看的差不多了，再出来看 &lt;code&gt;loadContentWithBlock:&lt;&#x2F;code&gt; ，注意到在 CompletionHandler 里，有这么一段&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;endLoadingWithState:newState error:error update:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	AAPLDataSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; weakself;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; me)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(me);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 self 是 AAPLDataSource （Block 嵌套多了，还真是容易晕啊），来看看 &lt;code&gt;endLoadingWithState:error:update&lt;&#x2F;code&gt; 这个方法都做了什么&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)endLoadingWithState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)state error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)error update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(dispatch_block_t)update
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;shouldDisplayPlaceholder&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(update)
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enqueuePendingUpdateBlock:update&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyBatchUpdate:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Run pending updates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;executePendingUpdates];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(update)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;loadingComplete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;notifyContentLoadedWithError:error&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;设置一些状态，然后在恰当的时机调用 update block，咦，这里有个 dispatch_block_t 没怎么见过，查了一下原来是一个内置的空传值和空返回的 block。&lt;&#x2F;p&gt;
&lt;p&gt;看了下 &lt;code&gt;enqueuePendingUpdateBlock&lt;&#x2F;code&gt;，会把现在的这个 update 结合之前的 updateBlock，形成一个新的 updateBlock，应该就是视频里提到的当所有的 DataSource 都载入完时，统一执行之前的 update block&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;notifyBatchUpdate:&lt;&#x2F;code&gt; 所做的是看一下 Delegate 是否响应 &lt;code&gt;dataSource:performBatchUpdate:complete:&lt;&#x2F;code&gt; 如果响应则走你，不然挨个执行 update &#x2F; complete。&lt;&#x2F;p&gt;
&lt;p&gt;看完了 &lt;code&gt;loadContentWithBlock&lt;&#x2F;code&gt; 再来看看这个 Block 里面都做了什么，大意是根据 self.showingFavorites 来切换不同的数据源，这里看到了一个新的类 AAPLDataAccessManager，看起来像是统一的数据层，瞄一眼&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; AAPLCat;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;AAPLDataAccessManager : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (AAPLDataAccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;manager&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchFavoriteCatListWithCompletionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cats, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchDetailForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cat, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchSightingsForCat:&lt;&#x2F;span&gt;&lt;span&gt;(AAPLCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completionHandler:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sightings, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然如此，将来数据的载入形式有变化，或需要做缓存啥的，都可以在这一层处理，其他部分不会感觉到变化。&lt;&#x2F;p&gt;
&lt;p&gt;这一轮看下来已经有不少信息量了，来简单捋一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[SegmentedDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; setNeedsLoadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[CatListDataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContent]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[DataSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentWithBlock:]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;创建&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loading，设置 loading 完成后要做的事 → 拿到数据后放到 updateQueue 里，等全部拿到再执行 batchUpdate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;↓
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;执行&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; loadContentBlock → 使用 DataAccessManager 去获取数据，拿到后交给 loading
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到这里，我们还没有运行 Project 看效果，因为我觉得代码包含的信息会更丰富，而且这么看下来后，对于界面会长啥样也有个大概的了解。&lt;&#x2F;p&gt;
&lt;p&gt;这只是开始，继续挖掘下去还会有不少好东西，比如 Favorite 按钮的处理，它是通过 Responder Chain 而不是 Delegate 来实现的，也是一个思路。通过有限状态机来管理 loading 状态也是很有意思的实现。&lt;&#x2F;p&gt;
&lt;p&gt;如果有兴趣，可以看下 ComposedDataSource，先不看实现，如果要自己写大概会是什么思路，比如当调用 &lt;code&gt;[UICollectionView cellForItemAtIndexPath:]&lt;&#x2F;code&gt; 时，如何找到对应的 DataSource，找到之后如何渲染对应的 Cell 等。&lt;&#x2F;p&gt;
&lt;p&gt;所以看源码真的是一件很有意思的事情，像一场冒险，总是会有意外收获，可能在不知不觉中，能力就得到了提升。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>读 Facebook App 头文件的一些收获</title>
            <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/facebook-app-headers/</link>
            <guid>https://limboy.me/posts/facebook-app-headers/</guid>
            <description>&lt;p&gt;最近在看一些 App 架构相关的文章，也看了 Facebook 分享的两个不同时期的架构（2013 和 2014），于是就想一窥 Facebook App 的头文件，看看会不会有更多的收获，确实有，还不少。由于在选择 ipa 上的失误，下了个 7.0 版的 Facebook（最新的是 18.1），会稍有过时，不过后来又下了个 18.1 的看了下，发现变动其实不大。以下是我从头文件中获取到的一些信息（20 多万行，浏览起来还是挺累的）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rang-shi-tu-zu-jian-ke-yi-fang-bian-di-pei-zhi&quot;&gt;让视图组件可以方便地配置&lt;&#x2F;h3&gt;
&lt;p&gt;这个在 Facebook 的演讲中也提到过，自定义的 UI 组件在初始化时可以传一些数值来表示想要呈现的效果，就像 HTML 和 CSS 一样，Dom 结构表示这是什么，CSS 对该结构进行个性化定制。 Facebook 是通过 Struct 来做这件事的，比如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FBActionSheetButtonMetrics {
&lt;&#x2F;span&gt;&lt;span&gt;    CDUnknownFunctionPointerType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;_vptr$FBMetrics;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;_Bool&lt;&#x2F;span&gt;&lt;span&gt; _initialized;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; leftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; textLeftMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorSideMargin;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bottomSeperatorHeight;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; detailMaxNumLines;
&lt;&#x2F;span&gt;&lt;span&gt;    UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;titleColor;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好处是减少了代码量，而且直观，方便复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-liang-shi-yong-zu-he-gua-du-shi-yong-ji-cheng&quot;&gt;尽量使用组合，适度使用继承&lt;&#x2F;h3&gt;
&lt;p&gt;如果过度使用继承，尤其是继承层次过深，往往会带来更大的维护成本。有新需求或需求变更时，会花很多时间在「是否需要在基类&#x2F;子类增加一个方法」，「是否需要新建一个子类」等设计相关的问题上。而组合则没有这个问题，大不了换一个组件。&lt;&#x2F;p&gt;
&lt;p&gt;不过 Objective-C 对于组合并没有特别的支持，所以实现起来会略麻烦&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;People {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;People
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithVehicle: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Vehicle&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vehicle;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vehicle&lt;&#x2F;span&gt;&lt;span&gt; move];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有很多类似 move 这样需要交给外部的 object 来做的方法，就会显得冗余，尽管如此，比起继承来还是更方便维护的。&lt;&#x2F;p&gt;
&lt;p&gt;使用组合的话，一般会使用「依赖注入」，比如这里的 Vehicle，并不需要特别指出是 Bike 还是 Car，只要有 move 方法就可以，这样就可以很方便地替换，对于 People 来说不需要做任何改动。在 Objective-C 里是通过 protocol 来实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所以 Facebook 定义了一大堆的接口，包括 Delegate, DataSource 和 Protocol，ViewController 有 Protocol，也有 Delegate(如 FBMediaGalleryViewControllerDelegate)，View &#x2F; Cell 也有 Delegate(如 FBMediaGalleryViewDelegate)，还有各种零零碎碎的 Protocol，如 FBDiscoveryCardProtocol, FBEventProtocol 等。&lt;&#x2F;p&gt;
&lt;p&gt;定义接口的过程也是梳理架构的过程，如果对架构理解不够深刻，是很难将接口恰当地抽象出来的。很多人放弃使用组合，有一部分原因也是架构上的不合理。&lt;&#x2F;p&gt;
&lt;p&gt;组件的粒度也是个问题，过细会导致组件过多，组合的过程就会花去很多时间；过粗又导致组件臃肿，难以复用。&lt;&#x2F;p&gt;
&lt;p&gt;当组件的接口定义完之后，使用起来大概会是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBResponseHandler : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBTestable, FBReceivedDataBufferDelegate, FBResponseHandlerProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@interface FBPhotoViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; UIViewController &amp;lt;FBPagingViewDelegate, FBPagingViewDataSource, FBPresentableViewController&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样一眼就大概能看出来这个 Class 大概会有哪些功能，如果某个组件要作调整，只需修改一处，就可以全局通用。&lt;&#x2F;p&gt;
&lt;p&gt;适度使用继承，可以在易维护和便利上达到平衡，比如 FBTableViewController, FBDialog 等，自定义的组件可以在它们的基础上进行开发。继承的层次一般不超过 2 层，比如 UITableViewController &amp;lt;- FBTableViewController &amp;lt;- FBFriendsNearbyTableViewController&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;前面讲过，组合往往和依赖注入搭配使用，Facebook 主要是通过 FBProvider, FBProviderMapData, FBProviderMap 来实现依赖注入的。&lt;&#x2F;p&gt;
&lt;p&gt;Provider 会产生一个 Object，比如 CameraControllerProvider 调用 get 方法后，会生成一个 MNCameraController 的实例。同时 Provider 还有两个子类 SingletonProvider 和 BlockProvider，前者用来生成一个单例，后者用在需要初始化参数的情景。&lt;&#x2F;p&gt;
&lt;p&gt;ProviderMap 跟 ProviderMapData 有些重复，它们之间的关系我也没有捋清，感觉 ProviderMap 像是一个 Manager，注册了一堆 Provider，然后可以通过 Provider 的 ID 来找到之前注册的 Provider。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-hua&quot;&gt;模块化&lt;&#x2F;h3&gt;
&lt;p&gt;不光是在 Cocoa 开发领域，其他的编程领域也一样，模块化是一个理想的状态，高内聚，低耦合。像 shell 命令一样，接受参数或标准输入，生成格式化的标准输出，通过管道传递给其他支持标准输入的命令行工具。&lt;&#x2F;p&gt;
&lt;p&gt;但现实场景要复杂的多，模块化的实现也更加困难。Facebook 有一个 FBAppModule 协议&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBAppModule &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBAppModule&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;instanceForSession:&lt;&#x2F;span&gt;&lt;span&gt;(FBSession &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;providerMap:&lt;&#x2F;span&gt;&lt;span&gt;(FBProviderMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedURLSchemes;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;supportedKeys;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt; activeMenuItem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;defaultIcon;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ID;
&lt;&#x2F;span&gt;&lt;span&gt;- (UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewControllerForMenuItem:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBMenuItem&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初始化时传入一个 FBSession (后面会讲到) 和 ProviderMap，然后设置支持的 url schemes，keys(具体作用未知)，对应的 menuItem，icon(用于在 menuItem 显示) 和 ID&lt;&#x2F;p&gt;
&lt;p&gt;有了 Module ，自然还有 ModuleManager，它的作用是注册 Module，当一个 url 过来时，可以遍历 Module，看看是不是有模块可以处理这个 url，有的话，就调用该 Module 的 openURL: 方法。当然也可以根据 ModuleID 来获取 Module。&lt;&#x2F;p&gt;
&lt;p&gt;FBAppModule 是一个 Protocol，FBNativeAppModule 是对该协议的实现，所以具体的模块都继承该类。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dao-hang-guan-li&quot;&gt;导航管理&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说系统的 UINavigationController 已经够使用了，如果需要更大的自由度和更高的可定制性，可以自定义一个导航管理器，Facebook 使用了 FBUINavigationController (Protocol) 来实现自定义导航的管理，属性和方法跟系统的差不多。 它有多个实现：FBTariffedNavigationController, FBSwipeNavigationController, FBCustomNavigationController, FBNavigationController。前面讲过继承一般不超过 2 层，这里是一般之外的情况，有 3 层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h3&gt;
&lt;p&gt;MVVM 是解决 Massive View Controller 的一个有效方法，独立出一个 ViewModel 作为 View 的数据源，以及处理 View 的一些交互操作，而 VC 只需要将 ViewModel 和 View 关联起来即可。一般会搭配某种绑定的实现，KVO 或 ReactiveCocoa 都可以，这样 ViewModel 的数据有变化就可以自动映射到 View 上。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 也采用了这种方式，有一个 FBViewModel 基类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBViewModel : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 省略了一些相关性不大的属性和方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelManager; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelManager=_viewModelManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelSource; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelSource=_viewModelSource;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBViewModelConfiguration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelConfiguration; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelConfiguration=_viewModelConfiguration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; viewModelVersion; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelVersion=_viewModelVersion;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModelUUID; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize viewModelUUID=_viewModelUUID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBMemModelObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;memModel; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize memModel=_memModel;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setNilValueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithViewModelUUID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setViewModelVersion:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;humanDescription&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadPermanentDataModelObjectIDFromDataModelObjectID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;block:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;didUpdateWithChangedProperties:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt; __weak FBViewModelController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; loadState;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Facebook 自己实现了一套 ViewModel 的更新通知机制，因为 ViewModel 都是 Immutable 的，所以无法改变，那么就需要有一个地方去集中管理这些 ViewModel，有更新时可以及时通知到， FBViewModelController 应该就是干这事的，里面有一个方法 &lt;code&gt;- (void)_notifyViewModel:(id)arg1 didUpdateWithChanges:(id)arg2;&lt;&#x2F;code&gt; 。但 FBViewModelManager 看起来更合适，二者的功能没有太理清楚。&lt;&#x2F;p&gt;
&lt;p&gt;FBViewModelController 还有一个 Delegate，主要有 3 个方法 &lt;code&gt;didUpdate[Delegate][Insert]ViewModel:&lt;&#x2F;code&gt;，可以做一些事后的操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;builder-pattern&quot;&gt;Builder Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;在定义一个 ViewController 时，往往需要接收很多个参数，以 &lt;code&gt;initWith:&lt;&#x2F;code&gt; 这种形式出现不太合适，除非你能容忍一个 10 行的方法声明。通常的做法是把这些参数声明为 property，然后在初始化 VC 后，对这些 property 赋值，然后在 ViewDidLoad 里使用这些 property。这样做有几个问题：1) 不知道哪些是需要在 ViewDidLoad 前设置的，会出现忘了设置的现象。2) 这些属性可以在外部被改动。 3) 代码不够优雅。&lt;&#x2F;p&gt;
&lt;p&gt;Builder Pattern 就是用来解决这个问题的，它跟工厂模式有点像。Facebook 也用到了这个模式，比如有一个 FBMUserFetchStatus 类，该类初始化时需要一些参数，于是就有了 FBMUserFetchStatusBuilder 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBMUserFetchStatusBuilder : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatusFromExistingMUserFetchStatus:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;aMUserFetchStatus&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIdentifiers:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withImageUrls:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasVerifiedPhone:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withCanInstallMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withHasMessenger:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withIsFriend:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withNickname:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withPhoneticName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withName:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withUserId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后的 build 方法会生成一个 FBMUserFetchStatus 实例，有了这个 Builder 就知道有哪些参数是可以在初始化时进行设置的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-manager&quot;&gt;Data Manager&lt;&#x2F;h3&gt;
&lt;p&gt;这是重头戏，所以看起来略累，东西很多，很可能推断错误。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看实体类，首先是 FBEntityRequest&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntityRequestParse
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;canParse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;syncError;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isSyncing) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; syncing;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以实体都是可以被解析和同步的，还自带了一个 Request。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 FBEntity&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;FBEntity &amp;lt;FBEntityRequestParse, NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityURLForFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityURL;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isDataStale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; dataStale;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;lastSyncTime;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;fbid;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@optional
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collection:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parse:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBRequest&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionRequest:&lt;&#x2F;span&gt;&lt;span&gt;(FBEntityCollection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBEntityDownloader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;entityDownloader;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentEdges&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parentCollections&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;entityInitializeWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每个 Entity 都有一个 entityURL，或许可以用来同步？ dataStale 应该是用来表示数据是否 dirty，如果是的话，可能需要同步。 还可以请求 Collection。&lt;&#x2F;p&gt;
&lt;p&gt;FBEntityCollection 跟 FBEntity 类似，不过多了 syncAll &#x2F; memberClass &#x2F; allObjects 这些属性&#x2F;方法。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看数据请求，首先是 FBRequest，不太明白这个 Class 的具体功能，因为没有 URL，一个没有 URL 的 Request 能做什么？ 然后看到了 FBRequester，这个看起来是一个数据请求类，有 URL, responseHandler, connection 状态, delegate 等。但这只是单个的请求，如何对多个请求进行管理呢，这时看到了 FBNetworker，它有 +sharedNetworker, requestQueue, cancelRequests:, addRequest: 所以就是它了。等等，为什么下面还有一个 FBNetworkerRequest ？看起来像是 FBNetworker 的 Delegate，但不确定。&lt;&#x2F;p&gt;
&lt;p&gt;为了避免 URI 散落在各处，Facebook 还专门为 NSURL 写了个 Category 来统一管理 URI。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;NSURL (FBFoundation)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;friendsNearbyURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;codeGeneratorURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURLWithTagId:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tagApprovalURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pokesURL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;personExpandedAboutURLWithFBID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个 URL 生成类，FBURLRequestGenerator，该类保存了 appSecret 和 appVersion，生成的 URL 会自动带上这些属性。&lt;&#x2F;p&gt;
&lt;p&gt;其实还有很多，实在看不下来了···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smarter-views&quot;&gt;Smarter Views&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道 ViewController 自带了一个 view，可以直接在这个 view 上 addSubview，正是由于这个便利性，很多创建 View 的代码也挤在了 VC 里，实在是不雅观。&lt;&#x2F;p&gt;
&lt;p&gt;更好的方法是替换 VC 的 view 为自定义的 View，然后把这个自定义 View 独立出去。比如在 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 时覆盖 view&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;MyProfileViewController
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;loadView &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[MyProfileView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以同时重定义 view 的类型，如 &lt;code&gt;@property (nonatomic) MyProfileView *view&lt;&#x2F;code&gt;，让编译器明白 view 的类型已经变了。&lt;&#x2F;p&gt;
&lt;p&gt;因为看到了不少 VC 中都有 &lt;code&gt;-loadView&lt;&#x2F;code&gt; 方法，所以推断可能使用了这项技术。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fbsession&quot;&gt;FBSession&lt;&#x2F;h3&gt;
&lt;p&gt;在 Web 开发领域，Session 是用来保存用户相关的信息的，FBSession 自然也不例外，不过它保存的内容还真是多呢。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;FBSession : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FBInvalidating&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setCurrentSession:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_globalSessionForDebugging&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDcurrentSession&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBAPISessionStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiSessionStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize apiSessionStore=_apiSessionStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBSessionDiskStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionDiskStore; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize sessionDiskStore=_sessionDiskStore;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) FBStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;store; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize store=_store;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSecret; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; @synthesize appSecret=_appSecret;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;=isValid) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; valid;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; hasUser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userFBID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBViewerContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewerContext;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBUserPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;userPreferences;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;) FBPreferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;sessionPreferences;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateAccessToken:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateActingViewer:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clearPreferences&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invalidate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DO_NOT_USE_OR_YOU_WILL_BE_FIREDvalueForKeyRequiresUser:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withInitializer:&lt;&#x2F;span&gt;&lt;span&gt;(CDUnknownBlockType)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;valueForKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithAppSecret:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiSessionStore:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBReactionController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;reactionController;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBLocationPingback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;locationPingback;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBAppSectionManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;appSectionManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;readonly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) FBBookmarkManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;bookmarkManager;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and many more...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Session 是可以保存到本地的，有一个状态变量用来标识是否有效(valid)，是否已登录(hasUser)，用户的一些设置(这些设置会保存到本地)，可以更新 AccessToken，还带了各种 Controller 和 Manager，所以东西还是挺多的。&lt;&#x2F;p&gt;
&lt;p&gt;这里有两个特殊方法，使用后会被 Fire···&lt;&#x2F;p&gt;
&lt;h3 id=&quot;services&quot;&gt;Services&lt;&#x2F;h3&gt;
&lt;p&gt;Service 顾名思义，提供某种服务，往往跟界面无关。从目录层级上看，Service 并不在 Module 里面，也就是说这二者是独立的，比如 FBTimelineModule 并不包含 FBTimelineService。&lt;&#x2F;p&gt;
&lt;p&gt;Service 之间可以有依赖，这里是通过 &lt;code&gt;startAppServiceWithDependencies:&lt;&#x2F;code&gt; 来实现的，不过不清楚 Service 自身如何声明依赖哪些其他的 Services。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;style&quot;&gt;Style&lt;&#x2F;h3&gt;
&lt;p&gt;App 的 Style 是一个容易被忽视的地方，开发往往看着设计图就开始写了，这样很容易造成样式不统一，且将来调整起来也不方便。&lt;&#x2F;p&gt;
&lt;p&gt;Facebook 是通过 Category 来自定义样式的，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBMediaKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonTypeSystemWithTitle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithNormalImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;highlightedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;selectedImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithTemplateImage:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_buttonWithStyle:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (FBUIKit)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_moreOptionsNavBarButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithText&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButtonWithRightPadding:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fb_backArrowButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;UIButton (MNLoginFormAppearanceHelpers)
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;phoneFormHeaderButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;singleSignOnButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;skipButton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;formFieldButtonInvertedColors&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样也不用关心 fontColor，margin，backgroundColor 等，直接拿来用即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;从目录结构上来看，Facebook 有 FBUIKit, FBFoundation, FBAppKit, Module。其中 FBUIKit 和 FBFoundation 是业务无关的，可以用在其他 App 上，FBAppKit 和 Module 是业务相关的。&lt;&#x2F;p&gt;
&lt;p&gt;Module 自带资源，可以看成是一个 mini app。&lt;&#x2F;p&gt;
&lt;p&gt;使用了 EGODatabase, SDWebImage, SSZipArchive, CocoaLumberjack 这几个开源类库（可能还有更多）。&lt;&#x2F;p&gt;
&lt;p&gt;时间和能力有限，只能挖掘出这些信息，希望能带来些帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReactiveCocoa2实战</title>
            <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/deep-into-reactivecocoa2/</link>
            <guid>https://limboy.me/posts/deep-into-reactivecocoa2/</guid>
            <description>&lt;p&gt;之前已经写过两篇关于 ReactiveCocoa(以下简称 RAC)的文章了，但主要也是在阐述基本的概念和使用，这篇文章将会从实战的角度来看看 RAC 到底解决了哪些问题，带来了哪些方便，以及遇到的一些坑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;wei-shi-yao-yao-shi-yong-rac&quot;&gt;为什么要使用 RAC？&lt;&#x2F;h4&gt;
&lt;p&gt;一个怪怪的东西，从 Demo 看也没有让代码变得更好、更短，相反还造成理解上的困难，真的有必要去学它么？相信这是大多数人在接触 RAC 时的想法。RAC 不是单一功能的模块，它是一个 Framework，提供了一整套解决方案。其核心思想是「响应数据的变化」，在这个基础上有了 Signal 的概念，进而可以帮助减少状态变量(可以参考 jspahrsummers 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;enemy-of-the-state&quot;&gt;PPT&lt;&#x2F;a&gt;)，使用 MVVM 架构，统一的异步编程模型等等。&lt;&#x2F;p&gt;
&lt;p&gt;为什么 RAC 更加适合编写 Cocoa App？说这个之前，我们先来看下 Web 前端编程，因为有些相似之处。目前很火的 AngularJS 有一个很重要的特性：数据与视图绑定。就是当数据变化时，视图不需要额外的处理，便可正确地呈现最新的数据。而这也是 RAC 的亮点之一。RAC 与 Cocoa 的编程模式，有点像 AngularJS 和 jQuery。所以要了解 RAC，需要先在观念上做调整。&lt;&#x2F;p&gt;
&lt;p&gt;以下面这个 Cell 为例&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-demo.png&quot;
        width=&quot;321&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;正常的写法可能是这样，很直观。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)configureWithItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(HBItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)item
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarImageView&lt;&#x2F;span&gt;&lt;span&gt; setImageWithURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarURL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其他的一些设置
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但如果用 RAC，可能就是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;		@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(HBItemViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;viewModel) {
&lt;&#x2F;span&gt;&lt;span&gt;			@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarImageView&lt;&#x2F;span&gt;&lt;span&gt; setImageWithURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;avatarURL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其他的一些设置
&lt;&#x2F;span&gt;&lt;span&gt;		}];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是先把数据绑定，接下来只要数据有变化，就会自动响应变化。在这里，每次 viewModel 改变时，内容就会自动变成该 viewModel 的内容。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;signal&quot;&gt;Signal&lt;&#x2F;h4&gt;
&lt;p&gt;Signal 是 RAC 的核心，为了帮助理解，画了这张简化图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-signal.png&quot;
        width=&quot;743&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里的数据源和 sendXXX，可以理解为函数的参数和返回值。当 Signal 处理完数据后，可以向下一个 Signal 或 Subscriber 传送数据。可以看到上半部分的两个 Signal 是冷的(cold)，相当于实现了某个函数，但该函数没有被调用。同时也说明了 Signal 可以被组合使用，比如&lt;code&gt;RACSignal *signalB = [signalA map:^id(id x){return x}]&lt;&#x2F;code&gt;，或&lt;code&gt;RACSignal *signalB = [signalA take:1]&lt;&#x2F;code&gt;等等。&lt;&#x2F;p&gt;
&lt;p&gt;当 signal 被 subscribe 时，就会处于热(hot)的状态，也就是该函数会被执行。比如上面的第二张图，首先 signalA 可能发了一个网络请求，拿到结果后，把数据通过&lt;code&gt;sendNext&lt;&#x2F;code&gt;方法传递到下一个 signal，signalB 可以根据需要做进一步处理，比如转换成相应的 Model，转换完后再&lt;code&gt;sendNext&lt;&#x2F;code&gt;到 subscriber，subscriber 拿到数据后，再改变 ViewModel，同时因为 View 已经绑定了 ViewModel，所以拿到的数据会自动在 View 里呈现。&lt;&#x2F;p&gt;
&lt;p&gt;还有，一个 signal 可以被多个 subscriber 订阅，这里怕显得太乱就没有画出来，但每次被新的 subscriber 订阅时，都会导致数据源的处理逻辑被触发一次，这很有可能导致意想不到的结果，需要注意一下。&lt;&#x2F;p&gt;
&lt;p&gt;当数据从 signal 传送到 subscriber 时，还可以通过&lt;code&gt;doXXX&lt;&#x2F;code&gt;来做点事情，比如打印数据。&lt;&#x2F;p&gt;
&lt;p&gt;通过这张图可以看到，这非常像中学时学的函数，比如 &lt;code&gt;f(x) = y&lt;&#x2F;code&gt;，某一个函数的输出又可以作为另一个函数的输入，比如 &lt;code&gt;f(f(x)) = z&lt;&#x2F;code&gt;，这也正是「函数响应式编程」(FRP)的核心。&lt;&#x2F;p&gt;
&lt;p&gt;有些地方需要注意下，比如把 signal 作为 local 变量时，如果没有被 subscribe，那么方法执行完后，该变量会被 dealloc。但如果 signal 有被 subscribe，那么 subscriber 会持有该 signal，直到 signal sendCompleted 或 sendError 时，才会解除持有关系，signal 才会被 dealloc。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;raccommand&quot;&gt;RACCommand&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;RACCommand&lt;&#x2F;code&gt;是 RAC 很重要的组成部分，可以节省很多时间并且让你的 App 变得更 Robust，&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;reactivecocoa-essentials-understanding-and-using-raccommand&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;可以帮助你更深入的理解，这里简单做一下介绍。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;RACCommand&lt;&#x2F;code&gt; 通常用来表示某个 Action 的执行，比如点击 Button。它有几个比较重要的属性：executionSignals &#x2F; errors &#x2F; executing。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;executionSignals&lt;&#x2F;code&gt;是 signal of signals，如果直接 subscribe 的话会得到一个 signal，而不是我们想要的 value，所以一般会配合&lt;code&gt;switchToLatest&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;errors&lt;&#x2F;code&gt;。跟正常的 signal 不一样，&lt;code&gt;RACCommand&lt;&#x2F;code&gt;的错误不是通过&lt;code&gt;sendError&lt;&#x2F;code&gt;来实现的，而是通过&lt;code&gt;errors&lt;&#x2F;code&gt;属性传递出来的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;executing&lt;&#x2F;code&gt;表示该 command 当前是否正在执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设有这么个需求：当图片载入完后，分享按钮才可用。那么可以这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;imageAvailableSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, imageView.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;shareButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithEnabled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;imageAvailableSignal signalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do share logic
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了与&lt;code&gt;UIControl&lt;&#x2F;code&gt;绑定之外，也可以手动执行某个 command，比如双击图片点赞，就可以这么实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ViewModel.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;updatePinLikeStatus)() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= ^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        _likeCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 先展示效果，再发送请求
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;updatePinLikeStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span&gt;] likePinWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinID&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        [_likeCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发生错误时，回滚
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;updatePinLikeStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x){
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinLikedCountLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likedCount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likePinImageView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;imageNamed:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hasLiked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pin_liked&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pin_like&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UITapGestureRecognizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tapGesture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UITapGestureRecognizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    tapGesture.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;numberOfTapsRequired &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[tapGesture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_gestureSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;likeCommand&lt;&#x2F;span&gt;&lt;span&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再比如某个 App 要通过 Twitter 登录，同时允许取消登录，就可以这么做 (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1326&quot;&gt;source&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;_twitterLoginCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_) {
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;          twitterSignInSignal]
&lt;&#x2F;span&gt;&lt;span&gt;          takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;executionSignals&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;authenticatedUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;twitterLoginCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;executionSignals&lt;&#x2F;span&gt;&lt;span&gt; switchToLatest];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chang-yong-de-mo-shi&quot;&gt;常用的模式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;map-switchtolatest&quot;&gt;map + switchToLatest&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;switchToLatest:&lt;&#x2F;code&gt; 的作用是自动切换 signal of signals 到最后一个，比如之前的 command.executionSignals 就可以使用&lt;code&gt;switchToLatest:&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;map:&lt;&#x2F;code&gt;的作用很简单，对&lt;code&gt;sendNext&lt;&#x2F;code&gt;的 value 做一下处理，返回一个新的值。&lt;&#x2F;p&gt;
&lt;p&gt;如果把这两个结合起来就有意思了，想象这么个场景，当用户在搜索框输入文字时，需要通过网络请求返回相应的 hints，每当文字有变动时，需要取消上一次的请求，就可以使用这个配搭。这里用另一个 Demo，简单演示一下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;pins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @[@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230988&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230947&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230899&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230777&lt;&#x2F;span&gt;&lt;span&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;172230707&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;__block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;onScheduler:[RACScheduler scheduler]&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;						take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;pins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;						map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;value) {
&lt;&#x2F;span&gt;&lt;span&gt;							&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[HBAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span&gt;] fetchPinWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[pins[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] intValue]] doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;								&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;这里只会执行一次&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;							}];
&lt;&#x2F;span&gt;&lt;span&gt;						}]
&lt;&#x2F;span&gt;&lt;span&gt;						switchToLatest];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(HBPin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pin) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pinID:&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, pin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} completed:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completed&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 这里只会执行一次
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 pinID:172230707
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2014-06-05 17:40:49.851 completed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;takeuntil&quot;&gt;takeUntil&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;takeUntil:someSignal&lt;&#x2F;code&gt; 的作用是当 someSignal sendNext 时，当前的 signal 就&lt;code&gt;sendCompleted&lt;&#x2F;code&gt;，someSignal 就像一个拳击裁判，哨声响起就意味着比赛终止。&lt;&#x2F;p&gt;
&lt;p&gt;它的常用场景之一是处理 cell 的 button 的点击事件，比如点击 Cell 的详情按钮，需要 push 一个 VC，就可以这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;detailButton
&lt;&#x2F;span&gt;&lt;span&gt;	rac_signalForControlEvents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UIControlEventTouchUpInside]
&lt;&#x2F;span&gt;&lt;span&gt;	takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_prepareForReuseSignal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; generate and push ViewController
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果不加&lt;code&gt;takeUntil:cell.rac_prepareForReuseSignal&lt;&#x2F;code&gt;，那么每次 Cell 被重用时，该 button 都会被&lt;code&gt;addTarget:selector&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ti-huan-delegate&quot;&gt;替换 Delegate&lt;&#x2F;h4&gt;
&lt;p&gt;出现这种需求，通常是因为需要对 Delegate 的多个方法做统一的处理，这时就可以造一个 signal 出来，每次该 Delegate 的某些方法被触发时，该 signal 就会&lt;code&gt;sendNext&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;UISearchDisplayController (RAC)
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_isActiveSignal &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_getAssociatedObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; signal;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Create two signals and merge them *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;didBeginEditing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(searchDisplayControllerDidBeginSearch:)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                        fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UISearchDisplayDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;didEndEditing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(searchDisplayControllerDidEndSearch:)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                      fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UISearchDisplayDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;merge:@[didBeginEditing, didEndEditing]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_setAssociatedObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, signal, OBJC_ASSOCIATION_RETAIN_NONATOMIC)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; signal;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码源于&lt;a href=&quot;http:&#x2F;&#x2F;spin.atomicobject.com&#x2F;2014&#x2F;02&#x2F;03&#x2F;objective-c-delegate-pattern&#x2F;&quot;&gt;此文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-reactiveviewmodel-de-didbecomactivesignal&quot;&gt;使用 ReactiveViewModel 的 didBecomActiveSignal&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveViewModel&quot;&gt;ReactiveViewModel&lt;&#x2F;a&gt;是另一个 project， 后面的 MVVM 中会讲到，通常的做法是在 VC 里设置 VM 的&lt;code&gt;active&lt;&#x2F;code&gt;属性(RVMViewModel 自带该属性)，然后在 VM 里 subscribeNext &lt;code&gt;didBecomActiveSignal&lt;&#x2F;code&gt;，比如当 Active 时，获取 TableView 的最新数据。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;racsubject-de-shi-yong-chang-jing&quot;&gt;RACSubject 的使用场景&lt;&#x2F;h4&gt;
&lt;p&gt;一般不推荐使用&lt;code&gt;RACSubject&lt;&#x2F;code&gt;，因为它过于灵活，滥用的话容易导致复杂度的增加。但有一些场景用一下还是比较方便的，比如 ViewModel 的 errors。&lt;&#x2F;p&gt;
&lt;p&gt;ViewModel 一般会有多个&lt;code&gt;RACCommand&lt;&#x2F;code&gt;，那这些 commands 如果出现 error 了该如何处理呢？比较方便的方法如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; HBCViewModel.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;RVMViewModel.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; RACSubject;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBCViewModel : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;RVMViewModel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;errors;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; HBCViewModel.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBCViewModel.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;ReactiveCocoa.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBCViewModel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (instancetype)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        _errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dealloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [_errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendCompleted&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Some Other ViewModel inherit HBCViewModel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(instancetype)init
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	_fetchLatestCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input){
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch latest data
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	_fetchMoreCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithSignalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input){
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch more data
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;didBecomeActiveSignal&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;		[_fetchLatestCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	[[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;		merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@[
&lt;&#x2F;span&gt;&lt;span&gt;				_fetchMoreCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				_fetchLatestCommand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors
&lt;&#x2F;span&gt;&lt;span&gt;				]] subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;rac-signalforselector&quot;&gt;rac_signalForSelector&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt; 这个方法会返回一个 signal，当 selector 执行完时，会 sendNext，也就是当某个方法调用完后再额外做一些事情。用在 category 会比较方便，因为 Category 重写父类的方法时，不能再通过&lt;code&gt;[super XXX]&lt;&#x2F;code&gt;来调用父类的方法，当然也可以手写 Swizzle 来实现，不过有了&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt;就方便多了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;rac_signalForSelector: fromProtocol:&lt;&#x2F;code&gt; 可以直接实现对 protocol 的某个方法的实现（听着有点别扭呢），比如，我们想实现 UIScrollViewDelegate 的某些方法，可以这么写&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(scrollViewDidEndDecelerating:) fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UIScrollViewDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(RACTuple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tuple) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_signalForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(scrollViewDidScroll:) fromProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(UIScrollViewDelegate)&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(RACTuple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tuple) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;scrollView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;delegate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意，这里的 delegate 需要先设置为 nil，再设置为 self，而不能直接设置为 self，如果 self 已经是该 scrollView 的 Delegate 的话。&lt;&#x2F;p&gt;
&lt;p&gt;有时，我们想对 selector 的返回值做一些处理，但很遗憾 RAC 不支持，如果真的有需要的话，可以使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steipete&#x2F;Aspects&quot;&gt;Aspects&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h3&gt;
&lt;p&gt;这是一个大话题，如果有耐心，且英文还不错的话，可以看一下 Cocoa Samurai 的这&lt;a href=&quot;http:&#x2F;&#x2F;cocoasamurai.blogspot.fr&#x2F;2013&#x2F;03&#x2F;basic-mvvm-with-reactivecocoa.html&quot;&gt;两篇&lt;&#x2F;a&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cocoamanifest.net&#x2F;articles&#x2F;2013&#x2F;10&#x2F;mvc-mvvm-frp-and-building-bridges.html&quot;&gt;文章&lt;&#x2F;a&gt;。PS: Facebook Paper 就是基于 MVVM 构建的。&lt;&#x2F;p&gt;
&lt;p&gt;MVVM 是 Model-View-ViewModel 的简称，它们之间的关系如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;camo.githubusercontent.com&#x2F;3999b9fdff783edb6cee9117a08524f3b2e7c653&#x2F;68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3433323533362f3836373938342f32393165643338302d663736302d313165322d393130362d6433313538333230616633392e706e67&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到 View(其实是 ViewController)持有 ViewModel，这样做的好处是 ViewModel 更加独立且可测试，ViewModel 里不应包含任何 View 相关的元素，哪怕换了一个 View 也能正常工作。而且这样也能让 View&#x2F;ViewController「瘦」下来。&lt;&#x2F;p&gt;
&lt;p&gt;ViewModel 主要做的事情是作为 View 的数据源，所以通常会包含网络请求。&lt;&#x2F;p&gt;
&lt;p&gt;或许你会疑惑，ViewController 哪去了？在 MVVM 的世界里，ViewController 已经成为了 View 的一部分。它的主要职责是将 VM 与 View 绑定、响应 VM 数据的变化、调用 VM 的某个方法、与其他的 VC 打交道。&lt;&#x2F;p&gt;
&lt;p&gt;而 RAC 为 MVVM 带来很大的便利，比如&lt;code&gt;RACCommand&lt;&#x2F;code&gt;, UIKit 的 RAC Extension 等等。使用 MVVM 不一定能减少代码量，但能降低代码的复杂度。&lt;&#x2F;p&gt;
&lt;p&gt;以下面这个需求为例，要求大图滑动结束时，底部的缩略图滚动到对应的位置，并高亮该缩略图；同时底部的缩略图被选中时，大图也要变成该缩略图的大图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-mvvm.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的思路是横向滚动的大图是一个 collectionView，该 collectionView 是当前页面 VC 的一个 property。底部可以滑动的缩略图是一个 childVC 的 collectionView，这两个 collectionView 共用一套 VM，并且各自 RACObserve 感兴趣的 property。&lt;&#x2F;p&gt;
&lt;p&gt;比如大图滑到下一页时，会改变 VM 的 indexPath 属性，而底部的 collectionView 所在的 VC 正好对该 indexPath 感兴趣，只要 indexPath 变化就滚动到相应的 Item&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; childVC
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index) {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;scrollToIndexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)scrollToIndexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subviews&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; scrollToItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath atScrollPosition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UICollectionViewScrollPositionCenteredHorizontally animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subviews&lt;&#x2F;span&gt;&lt;span&gt; enumerateObjectsUsingBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;view, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span&gt; idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;stop) {
&lt;&#x2F;span&gt;&lt;span&gt;            view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;        UIView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; cellForItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath];
&lt;&#x2F;span&gt;&lt;span&gt;        view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;kHBPinsNaviThumbnailPadding;
&lt;&#x2F;span&gt;&lt;span&gt;        view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borderColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;whiteColor&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGColor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当点击底部的缩略图时，上面的大图也要做出变化，也同样可以通过 RACObserve indexPath 来实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; PinsViewController.m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;weakify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, viewModel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;indexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexPath) {
&lt;&#x2F;span&gt;&lt;span&gt;            @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;collectionView&lt;&#x2F;span&gt;&lt;span&gt; scrollToItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;indexPath atScrollPosition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UICollectionViewScrollPositionCenteredHorizontally animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有一个小技巧，当 Cell 里的元素比较复杂时，我们可以给 Cell 也准备一个 ViewModel，这个 CellViewModel 可以由上一层的 ViewModel 提供，这样 Cell 如果需要相应的数据，直接跟 CellViewModel 要即可，CellViewModel 也可以包含一些 command，比如 likeCommand。假如点击 Cell 时，要做一些处理，也很方便。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; CellViewModel已经在ViewModel里准备好了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(UICollectionViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView cellForItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    HBPinsCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[collectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dequeueReusableCellWithReuseIdentifier:cellIdentifier forIndexPath:indexPath&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cell;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)collectionView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)collectionView didSelectItemAtIndexPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    HBCellViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cellViewModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cellViewModels&lt;&#x2F;span&gt;&lt;span&gt;[indexPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对cellViewModel执行某些操作，因为Cell已经与cellViewModel绑定，所以cellViewModel的改变也会反映到Cell上
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 或拿到cellViewModel的数据来执行某些操作
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;viewmodel-zhong-signal-property-command-de-shi-yong&quot;&gt;ViewModel 中 signal, property, command 的使用&lt;&#x2F;h4&gt;
&lt;p&gt;初次使用 RAC+MVVM 时，往往会疑惑，什么时候用 signal，什么时候用 property，什么时候用 command？&lt;&#x2F;p&gt;
&lt;p&gt;一般来说可以使用 property 的就直接使用，没必要再转换成 signal，外部 RACObserve 即可。使用 signal 的场景一般是涉及到多个 property 或多个 signal 合并为一个 signal。command 往往与 UIControl&#x2F;网络请求挂钩。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chang-jian-chang-jing-de-chu-li&quot;&gt;常见场景的处理&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;jian-cha-ben-di-huan-cun-ru-guo-shi-xiao-ze-qu-qing-qiu-wang-luo-shu-ju-bing-huan-cun-dao-ben-di&quot;&gt;检查本地缓存，如果失效则去请求网络数据并缓存到本地&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1166&quot;&gt;来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)loadData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;        createSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; If the cache is valid then we can just immediately send the
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; cached data and be done.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacheValid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cachedData&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendCompleted&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                [subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendError:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;staleCacheError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do the subscription work on some random scheduler, off the main
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; thread.
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeOn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[RACScheduler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;scheduler&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)update {
&lt;&#x2F;span&gt;&lt;span&gt;    [[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        loadData]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Catch the error from -loadData. It means our cache is stale. Update
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; our cache and save it.
&lt;&#x2F;span&gt;&lt;span&gt;        catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;updateCachedData&lt;&#x2F;span&gt;&lt;span&gt;] doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data) {
&lt;&#x2F;span&gt;&lt;span&gt;                [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacheData:data&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }];
&lt;&#x2F;span&gt;&lt;span&gt;        }]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Our work up until now has been on a background scheduler. Get our
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; results delivered on the main thread so we can do UI work.
&lt;&#x2F;span&gt;&lt;span&gt;        deliverOn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;RACScheduler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mainThreadScheduler&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Update your UI based on `data`.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Update again after `updateInterval` seconds have passed.
&lt;&#x2F;span&gt;&lt;span&gt;            [[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:updateInterval&lt;&#x2F;span&gt;&lt;span&gt;] take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_) {
&lt;&#x2F;span&gt;&lt;span&gt;                [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            }];
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;jian-ce-yong-hu-ming-shi-fou-ke-yong&quot;&gt;检测用户名是否可用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;issues&#x2F;1236&quot;&gt;来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setupUsernameAvailabilityChecking {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, availabilityStatus) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;userTemplate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, username)
&lt;&#x2F;span&gt;&lt;span&gt;                                      throttle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;kUsernameCheckThrottleInterval] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;throttle表示interval时间内如果有sendNext，则放弃该nextValue
&lt;&#x2F;span&gt;&lt;span&gt;                                      map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;username) {
&lt;&#x2F;span&gt;&lt;span&gt;                                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return:@(UsernameAvailabilityCheckStatusEmpty)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[[[FIBAPIClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sharedInstance&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                                                getUsernameAvailabilityFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;username ignoreCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                                              map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result) {
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;existsNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;exists&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;existsNumber) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(UsernameAvailabilityCheckStatusFailed);
&lt;&#x2F;span&gt;&lt;span&gt;                                                  UsernameAvailabilityCheckStatus status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[existsNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;boolValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; UsernameAvailabilityCheckStatusUnavailable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; UsernameAvailabilityCheckStatusAvailable;
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(status);
&lt;&#x2F;span&gt;&lt;span&gt;                                              }]
&lt;&#x2F;span&gt;&lt;span&gt;                                             catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;                                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;return:@(UsernameAvailabilityCheckStatusFailed)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                                              }] startWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@(UsernameAvailabilityCheckStatusChecking)];
&lt;&#x2F;span&gt;&lt;span&gt;                                      }]
&lt;&#x2F;span&gt;&lt;span&gt;                                      switchToLatest];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到这里也使用了&lt;code&gt;map&lt;&#x2F;code&gt; + &lt;code&gt;switchToLatest&lt;&#x2F;code&gt;模式，这样就可以自动取消上一次的网络请求。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;startWith&lt;&#x2F;code&gt;的内部实现是&lt;code&gt;concat&lt;&#x2F;code&gt;，这里表示先将状态置为 checking，然后再根据网络请求的结果设置状态。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-takeuntil-lai-chu-li-cell-de-button-dian-ji&quot;&gt;使用 takeUntil:来处理 Cell 的 button 点击&lt;&#x2F;h4&gt;
&lt;p&gt;这个上面已经提到过了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;token-guo-qi-hou-zi-dong-huo-qu-xin-de&quot;&gt;token 过期后自动获取新的&lt;&#x2F;h4&gt;
&lt;p&gt;开发 APIClient 时，会用到 AccessToken，这个 Token 过一段时间会过期，需要去请求新的 Token。比较好的用户体验是当 token 过期后，自动去获取新的 Token，拿到后继续上一次的请求，这样对用户是透明的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; suppose first time send request, access token is expired or invalid
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and next time it is correct.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the block will be triggered twice.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static BOOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; isFirstTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isFirstTime) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;http:&#x2F;&#x2F;nonexists.com&#x2F;error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            isFirstTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;url:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, url);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [[AFHTTPRequestOperationManager manager] GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;url parameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;responseObject) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendNext:responseObject];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        } failure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendError:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;sending request...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [[requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;catch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oops, invalid access token&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; simulate network request, and we fetch the right access token
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[RACSignal createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            dispatch_time_t popTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(DISPATCH_TIME_NOW, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NSEC_PER_SEC));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(popTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [subscriber sendNext:@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }] concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestSignal];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isKindOfClass:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class]&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;statusLabel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;result:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;origin&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } completed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;completed&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 我自己感觉遇到的几个难点是: 1) 理解 RAC 的理念。 2) 熟悉常用的 API。3) 针对某些特定的场景，想出比较合理的 RAC 处理方式。不过看多了，写多了，想多了就会慢慢适应。下面是我在实践过程中遇到的一些小坑。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reactivecocoalayout&quot;&gt;ReactiveCocoaLayout&lt;&#x2F;h4&gt;
&lt;p&gt;有时 Cell 的内容涉及到动态的高度，就会想到用 Autolayout 来布局，但 RAC 已经为我们准备好了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoaLayout&quot;&gt;ReactiveCocoaLayout&lt;&#x2F;a&gt;，所以我想不妨就拿来用一下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ReactiveCocoaLayout&lt;&#x2F;code&gt;的使用好比「批地」和「盖房」，先通过&lt;code&gt;insetWidth:height:nullRect&lt;&#x2F;code&gt;从某个 View 中划出一小块，拿到之后还可以通过&lt;code&gt;divideWithAmount:padding:fromEdge&lt;&#x2F;code&gt; 再分成两块，或&lt;code&gt;sliceWithAmount:fromEdge&lt;&#x2F;code&gt;再分出一块。这些方法返回的都是 signal，所以可以通过&lt;code&gt;RAC(self.view, frame) = someRectSignal&lt;&#x2F;code&gt; 这样来实现绑定。但在实践中发现性能不是很好，多批了几块地就容易造成主线程卡顿。&lt;&#x2F;p&gt;
&lt;p&gt;所以&lt;code&gt;ReactiveCocoaLayout&lt;&#x2F;code&gt;最好不用或少用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;diao-shi&quot;&gt;调试&lt;&#x2F;h4&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;deep-into-reactivecocoa2&amp;#x2F;rac-debug.png&quot;
        width=&quot;276&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;刚开始写 RAC 时，往往会遇到这种情况，满屏的调用栈信息都是 RAC 的，要找出真正出现问题的地方不容易。曾经有一次在使用&lt;code&gt;[RACSignal combineLatest: reduce:^id{}]&lt;&#x2F;code&gt;时，忘了在 Block 里返回 value，而 Xcode 也没有提示 warning，然后就是莫名其妙地挂起了，跳到了汇编上，也没有调用栈信息，这时就只能通过最古老的注释代码的方式来找到问题的根源。&lt;&#x2F;p&gt;
&lt;p&gt;不过写多了之后，一般不太会犯这种低级错误。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;strongify-weakify-dance&quot;&gt;strongify &#x2F; weakify dance&lt;&#x2F;h4&gt;
&lt;p&gt;因为 RAC 很多操作都是在 Block 中完成的，这块最常见的问题就是在 block 直接把 self 拿来用，造成 block 和 self 的 retain cycle。所以需要通过&lt;code&gt;@strongify&lt;&#x2F;code&gt;和&lt;code&gt;@weakify&lt;&#x2F;code&gt;来消除循环引用。&lt;&#x2F;p&gt;
&lt;p&gt;有些地方很容易被忽略，比如&lt;code&gt;RACObserve(thing, keypath)&lt;&#x2F;code&gt;，看上去并没有引用 self，所以在&lt;code&gt;subscribeNext&lt;&#x2F;code&gt;时就忘记了 weakify&#x2F;strongify。但事实上&lt;code&gt;RACObserve&lt;&#x2F;code&gt;总是会引用 self，即使 target 不是 self，所以只要有&lt;code&gt;RACObserve&lt;&#x2F;code&gt;的地方都要使用 weakify&#x2F;strongify。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;以上是我在做花瓣客户端和 side project 时总结的一些经验，但愿能带来一些帮助，有误的地方也欢迎指正和探讨。&lt;&#x2F;p&gt;
&lt;p&gt;推荐一下 jspahrsummers 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;GroceryList&quot;&gt;这个 project&lt;&#x2F;a&gt;，虽然是用 RAC3.0 写的，但很多理念也可以用到 RAC2 上面。&lt;&#x2F;p&gt;
&lt;p&gt;最后感谢 Github 的 iOS 工程师们，感谢你们带来了 RAC，以及在 Issues 里的耐心解答。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>使用objection来模块化开发iOS项目</title>
            <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/use-objection-to-decouple-ios-project/</link>
            <guid>https://limboy.me/posts/use-objection-to-decouple-ios-project/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atomicobject&#x2F;objection&quot;&gt;objection&lt;&#x2F;a&gt; 是一个轻量级的依赖注入框架，受&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-guice&#x2F;&quot;&gt;Guice&lt;&#x2F;a&gt;的启发，&lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;wallet&#x2F;&quot;&gt;Google Wallet&lt;&#x2F;a&gt; 也是使用的该项目。「依赖注入」是面向对象编程的一种设计模式，用来减少代码之间的耦合度。通常基于接口来实现，也就是说不需要 new 一个对象，而是通过相关的控制器来获取对象。2013 年最火的 PHP 框架 &lt;a href=&quot;http:&#x2F;&#x2F;laravel.com&quot;&gt;laravel&lt;&#x2F;a&gt; 就是其中的典型。&lt;&#x2F;p&gt;
&lt;p&gt;假设有以下场景：ViewControllerA.view 里有一个 button，点击之后 push 一个 ViewControllerB，最简单的写法类似这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)viewDidLoad
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewDidLoad&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;buttonWithType:UIButtonTypeSystem&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CGRectMake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTitle:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Button&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forState:UIControlStateNormal&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addTarget:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(buttonTapped) forControlEvents:UIControlEventTouchUpInside&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt; addSubview&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;button];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)buttonTapped
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[ViewControllerB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;navigationController&lt;&#x2F;span&gt;&lt;span&gt; pushViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc animated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样写的一个问题是，ViewControllerA 需要 import ViewControllerB，也就是对 ViewControllerB 产生了依赖。依赖的东西越多，维护起来就越麻烦，也容易出现循环依赖的问题，而 objection 正好可以处理这些问题。&lt;&#x2F;p&gt;
&lt;p&gt;实现方法是：先定义一个协议(protocol)，然后通过 objection 来注册这个协议对应的 class，需要的时候，可以获取该协议对应的 object。对于使用方无需关心到底使用的是哪个 Class，反正该有的方法、属性都有了(在协议中指定)。这样就去除了对某个特定 Class 的依赖。也就是通常所说的「面向接口编程」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;UIViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; *&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getObject:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;vc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;backgroundColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lightGrayColor&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;nc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;vc];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rootViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector，这个 injector 已经注册过&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;了。&lt;&#x2F;li&gt;
&lt;li&gt;[2] 获取&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;对应的 Object。&lt;&#x2F;li&gt;
&lt;li&gt;[3] 拿到 VC 后，设置它的某些属性，比如这里的 backgroundColor，因为在&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;里有定义这个属性，所以不会有 warning。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以看到这里没有引用 ViewControllerA。再来看看这个&lt;code&gt;ViewControllerAProtocol&lt;&#x2F;code&gt;是如何注册到 injector 中的，这里涉及到了&lt;code&gt;Module&lt;&#x2F;code&gt;，对 Protocol 的注册都是在 Module 中完成的。Module 只要继承&lt;code&gt;JSObjectionModule&lt;&#x2F;code&gt;这个 Class 即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;JSObjectionModule
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAModule
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;configure
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bindClass:[ViewControllerA class] toProtocol:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ViewControllerAProtocol)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;绑定操作是在&lt;code&gt;configure&lt;&#x2F;code&gt;方法里进行的，这个方法在被添加到 injector 里时会被自动触发。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;JSObjectionInjector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? : &lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createInjector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [2]
&lt;&#x2F;span&gt;&lt;span&gt;injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[injector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;withModule:[[ViewControllerAModule alloc] init]&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [3]
&lt;&#x2F;span&gt;&lt;span&gt;[JSObjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setDefaultInjector:injector&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [4]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;[1] 获取默认的 injector&lt;&#x2F;li&gt;
&lt;li&gt;[2] 如果默认的 injector 不存在，就新建一个&lt;&#x2F;li&gt;
&lt;li&gt;[3] 往这个 injector 里注册我们的 Module&lt;&#x2F;li&gt;
&lt;li&gt;[4] 设置该 injector 为默认的 injector&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这段代码可以直接放到 &lt;code&gt;+ (void)load&lt;&#x2F;code&gt;里执行，这样就可以避免在 AppDelegate 里 import 各种 Module。&lt;&#x2F;p&gt;
&lt;p&gt;因为我们无法直接获得对应的 Class，所以必须要在协议里定义好对外暴露的方法和属性，然后该 Class 也要实现该协议。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@protocol &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerAProtocol &amp;lt;NSObject&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger&lt;&#x2F;span&gt;&lt;span&gt; currentIndex;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;) UIColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;backgroundColor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;ViewControllerA : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIViewController &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ViewControllerAProtocol&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 objection 实现依赖注入后，就能更好地实现 SRP(Single Responsibility Principle)，代码更简洁，心情更舒畅，生活更美好。拿 Pinterest 来说，下面的页面就可以划分为 3 个 Section。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;use-objection-to-decouple-ios-project&amp;#x2F;demo_4_objection.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;各个 Section 可以由不同的人负责，然后串到一起就行，也能一定程度地避免 MVC(Mess View Controller)的出现。&lt;&#x2F;p&gt;
&lt;p&gt;总体来说，这个 lib 还是挺靠谱的，已经维护了两年多，也有一些项目在用，对于提高开发成员的效率也会有不少的帮助，可以考虑尝试下。&lt;&#x2F;p&gt;
&lt;p&gt;---- update (2014-04-30) ----&lt;&#x2F;p&gt;
&lt;p&gt;写了个壁纸的 demo，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;bizhi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>开发新版花瓣iPhone客户端</title>
            <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/huaban-app-redesign/</link>
            <guid>https://limboy.me/posts/huaban-app-redesign/</guid>
            <description>&lt;p&gt;花瓣主客户端已经有些日子没有更新了，这次的新版 iPhone 客户端会带来不少的变动和改进，于是索性重新开个项目，从头开始。虽还没开发完成，但有些东西还是想跟大家分享下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-rang-duo-ren-kai-fa-geng-jia-gao-xiao&quot;&gt;如何让多人开发更加高效&lt;&#x2F;h3&gt;
&lt;p&gt;如果是一个人开发，那怎么折腾都行。不用考虑冲突、不用考虑代码风格的差异、完全按自己的喜好设置目录结构、甚至在接口的设计上也可以自由一些。但参与的人一多这些问题就会暴露出来，如果处理不好，有可能会出现 1+1&amp;lt;2，甚至 1+1&amp;lt;1 的情况。&lt;&#x2F;p&gt;
&lt;p&gt;正好在前些日子看到了这篇「&lt;a href=&quot;http:&#x2F;&#x2F;dev.hubspot.com&#x2F;blog&#x2F;architecting-a-large-ios-app-with-cocoapods&quot;&gt;使用 CocoaPods 来进行模块化开发&lt;&#x2F;a&gt;」文章，细细品了几遍，发现通过这种方式确实可以弥补多人开发带来的一些问题。简单说来就是把一个大项目按照功能模块划分为多个子项目，然后在一个主项目里，通过 CocoaPods 把这些子项目串起来，就变成了一个完整的 Project。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-jia-gou&quot;&gt;基本架构&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-arch.png&quot;
        width=&quot;700&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中最底层是其他项目也会引用的基础类库。&lt;code&gt;HBToolkit&lt;&#x2F;code&gt;包含了一些常用、好用的 Categories，如图片缩放、UIView Layout 等等；&lt;code&gt;HBBussiness&lt;&#x2F;code&gt;是跟业务相关的一些类库，如弹出新版本提示、登录等等；&lt;code&gt;HBAPI&lt;&#x2F;code&gt;是花瓣主站点的 API 接口。这些类库都是私有的 pod 源，可以通过&lt;code&gt;pod install&lt;&#x2F;code&gt;安装。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;AppCommon&lt;&#x2F;code&gt;是一个 xcode project，包含了该项目会用到的一些公共内容，如颜色值、按钮样式、图片、APIKey 等等，同样，也是私有 pod 源。&lt;&#x2F;p&gt;
&lt;p&gt;再上层就是各个 sub app 了。所谓 sub app，就是功能单一，可独立运行的 app。同样，每个 sub app 会提供相应的 podspec 文件，可以在这个 podspec 里指定最后会用到的 Classes。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-subapps.png&quot;
        width=&quot;320&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进去之后会是这样&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;huaban-app-redesign&amp;#x2F;huaban-app-subapp-index.png&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于使用者来说，可以通过查看 demo，很快地了解接口的使用。对测试人员，也可以在 App 还没有开发完成的情况下，对各个子模块进行测试。&lt;&#x2F;p&gt;
&lt;p&gt;各个 sub app 都完成了的话，就可以组装成最终的 App 了，这里用到了一个 URL Route 类：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joeldev&#x2F;JLRoutes&quot;&gt;JLRoutes&lt;&#x2F;a&gt;，它的作用是让按钮的点击像网页里的链接一样，只是触发了某个 URL，而没有像 pushViewController 这样的行为。这样如果点击 A 模块的某个按钮，会 push 一个 B 模块的 ViewController，也不需要在 A 模块里 import 模块 B 的 ViewController，而只是&lt;code&gt;[JLRoutes routeURL:parameters]&lt;&#x2F;code&gt;即可，也就实现了解耦。&lt;&#x2F;p&gt;
&lt;p&gt;每个 sub app 需要注册自己感兴趣的 URL，这样当某个 URL 被触发时，就能捕获到并做适当的处理。如果注册的行为统一放到最终的 App 里去做，会不够灵活，且显得杂乱。所以最好是在类加载的过程中就完成注册。 而 Class 正好有一个&lt;code&gt;+ (void)load&lt;&#x2F;code&gt;方法，会在该 Class 被加入到运行时触发，且只触发一次。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;&#x2F;h4&gt;
&lt;p&gt;每次新建一个 sub project 还蛮麻烦的，比如要新建 podfile，然后执行&lt;code&gt;pod install&lt;&#x2F;code&gt;(真心慢啊)，然后要写&lt;code&gt;XXX.podspec&lt;&#x2F;code&gt;，等等。于是写了一个 template project，并提供了脚本安装，然后每次要新建一个 project 时，只需执行&lt;code&gt;genproj XXX&lt;&#x2F;code&gt;就好了。&lt;&#x2F;p&gt;
&lt;p&gt;开发过程中，经常会出现依赖的 pod 有更新（比如 Common 又添加了一些图片素材），然后就得再执行一次&lt;code&gt;pod update&lt;&#x2F;code&gt;，于是所有依赖的 pod 都得 update 一下，这个过程有点慢，目前还没想到太好的办法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2014-03-25-geng-xin&quot;&gt;2014&#x2F;03&#x2F;25 更新&lt;&#x2F;h4&gt;
&lt;p&gt;用&lt;code&gt;pod update --verbose&lt;&#x2F;code&gt; 看了下，主要的时间都是花在了获取第三方 pod 的 meta 信息上，所以，使用时加上&lt;code&gt; --no-repo-update&lt;&#x2F;code&gt;就很快了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reactivecocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;h3&gt;
&lt;p&gt;这次改版的另一个尝试就是使用 RAC 和 MVVM，还是挺有些挑战的。之前的学习更多的是理论，并没有太多实际的使用，所以也遇到了不少问题。比如何时使用 property，何时使用 signal；多个 Controller 共用一个 VM，但其中一个又有一些独有的 property；潜意识里会使用原有的 cocoa 编程模式；出现问题，调试起来有点麻烦等等。尽管如此，RAC 还是很值得尝试的，就像一匹烈马，很难被驯服，但一旦被驾驭，这种成就感也是无可比拟的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 levelDB 来做持久化，放弃 CoreData。&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;ios&#x2F;2014&#x2F;01&#x2F;04&#x2F;class-cluster.html&quot;&gt;类族(class cluster)&lt;&#x2F;a&gt;来实现结构和功能基本一样，但数据源不同的场景。&lt;&#x2F;li&gt;
&lt;li&gt;无意中发现&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=OJ94KqmsxiI&quot;&gt;Facebook&lt;&#x2F;a&gt;也用了类似的架构，不过是通过 workspace 来实现的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>基于AFNetworking2.0和RAC的iOS REST Client</title>
            <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-rest-client-implementation/</link>
            <guid>https://limboy.me/posts/ios-rest-client-implementation/</guid>
            <description>&lt;p&gt;在开发 iOS App 时经常会遇到跟后端 REST API 通信的情况。这就涉及到错误处理，NSDictionary 与 Model 的映射，用户登录与登出，权限验证，Archive&#x2F;UnArchive，Copy，AccessToken 过期处理等等，如果没有很好地处理这些点，就容易出现代码复杂度增大，结构散乱，不方便后期维护的现象。&lt;&#x2F;p&gt;
&lt;p&gt;正好最近在看 AFNetworking2.0 和 ReactiveCocoa2.1，参考了 github 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;octokit&#x2F;octokit.objc&quot;&gt;octokit&lt;&#x2F;a&gt;，重写了花瓣的 iOS REST API，分享些心得。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-jie-gou&quot;&gt;基本结构&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPI.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Classes
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.h
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManager.m
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Models
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPObject.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.h
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPUser.m
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时，直接引用&lt;code&gt;HBPAPI.h&lt;&#x2F;code&gt;即可，里面包含了所有的 Class。因为使用了 AFNetworking2.0，所以不再是 HBPClient，而是 HBPManager。 HBPAPIManager 包含了所有的跟服务端通信的方法，通过 Category 来区分。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (Private)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 内部统一使用这个方法来向服务端发送请求
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; resultClass - 从服务端获取到JSON数据后，使用哪个Class来将JSON转换为OC的Model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; listKey - 如果不指定，表示返回的是一个object，如user，如果指定表示返回的是一个数组，listKey就表示这个列表的keyname，如{&amp;#39;users&amp;#39;:[]}, 那么listName就为&amp;#39;user&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;relativePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resultClass:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;resultClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;listKey:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;listKey&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManager (User)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; signal会send user，如果没有user，就会sendError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 必须当前用户已经登录的情况下调用
&lt;&#x2F;span&gt;&lt;span&gt;- (RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- HBPAPIManager (Friendship)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Models Group 包含了所有跟服务端 API 对应的 Model，比如&lt;code&gt;HBPComment&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HBPComment.h&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPObject.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@class&lt;&#x2F;span&gt;&lt;span&gt; HBPUser;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPComment : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;HBPObject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; commentID;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;createdAt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;nonatomic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;) HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;HBPComment.m&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HBPComment.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPComment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;commentID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;user_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;userID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;created_at&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;createdAt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;archive-unarchive-copy&quot;&gt;Archive &#x2F; UnArchive &#x2F; Copy&lt;&#x2F;h3&gt;
&lt;p&gt;每一个 Object 都要支持 Archive &#x2F; UnArchive &#x2F; Copy，也就是要实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;协议，这两个协议的内容其实就是对 Object 的 Property 做些处理，所以如果可以在基类里把这些事都统一处理，就会方便许多。octokit 使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MantleFramework&#x2F;Mantle&quot;&gt;Mantle&lt;&#x2F;a&gt;来做这些事情，不过我觉得 Mantle 还是有些麻烦，于是写了个通过运行时来获取 property，并实现&lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;&#x2F;code&gt; 和 &lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;&#x2F;code&gt;的基类，只有两个公共方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPObject : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;NSCopying, NSCoding&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 解析API返回的JSON，返回对应的Model
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithDictionary:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; JSON key到property的映射关系
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;JSONKeysToPropertyKeys&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSON&lt;&#x2F;code&gt;的作用是遍历 Object 的 Property，如果 Property 的 Class 是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;，那么就调用&lt;code&gt;- (id)initWithDictionary:(NSDictionary *)JSO&lt;&#x2F;code&gt;，不然就通过 KVC 的&lt;code&gt;setValue:forKey:&lt;&#x2F;code&gt;来设定值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;- (NSDictionary *)JSONKeysToPropertyKeys&lt;&#x2F;code&gt;的内容大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)JSONKeysToPropertyKeys
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;nav_link&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;navLink&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样通过一个&lt;code&gt;HBPObject&lt;&#x2F;code&gt;基类就完成了 Archive &#x2F; UnArchive &#x2F; Copy 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-hu-de-deng-lu-yu-deng-chu&quot;&gt;用户的登录与登出&lt;&#x2F;h3&gt;
&lt;p&gt;先来说说登录，由于使用 RAC，在构造 API 时，就不需要传入 Block 了，随之而来的一个问题就是需要在注释中说明&lt;code&gt;sendNext&lt;&#x2F;code&gt;时会发送什么内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)signInUsingUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)username passowrd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)password
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(API_CLIENT_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; API_CLIENT_SECRET, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;API_CLIENT_ID and API_CLIENT_SECRET must be setted&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @{
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;grant_type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; username,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; password,
&lt;&#x2F;span&gt;&lt;span&gt;                                 };
&lt;&#x2F;span&gt;&lt;span&gt;    HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createManager&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchTokenWithParameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            setNameWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;+signInUsingUsername:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; password:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, username, password];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看着还挺简单的吧，因为主要工作都是&lt;code&gt;+fetchMoreData:parameters&lt;&#x2F;code&gt;在做，看看它的实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)fetchTokenWithParameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[[[[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_POST:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oauth&#x2F;access_token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; reduceEach的作用是传入多个参数，返回单个参数，是基于`map`的一种实现
&lt;&#x2F;span&gt;&lt;span&gt;             reduceEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(AFHTTPRequestOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;operation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;response){
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 拿到token后，就设置token property
&lt;&#x2F;span&gt;&lt;span&gt;				 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setToken:方法会被触发，在那里会设置请求的头信息，如Authorization。
&lt;&#x2F;span&gt;&lt;span&gt;                 HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAccessToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;response];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; token;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对Error进行处理，方便外部识别
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt; code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1001 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorConnectionFailed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; HBPAPIManagerErrorAuthenticatedFailed;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;apiError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;HBPAPIManagerErrorDomain code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;code userInfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:apiError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 一切正常的话，顺便获取用户信息
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchUserInfo&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;             doNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(HBPUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;user) {
&lt;&#x2F;span&gt;&lt;span&gt;			     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; doNext相当于一个钩子，是在sendNext时会被执行的一段代码
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; user;
&lt;&#x2F;span&gt;&lt;span&gt;             }]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 把发送内容换成self
&lt;&#x2F;span&gt;&lt;span&gt;             mapReplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;			 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 避免side effect
&lt;&#x2F;span&gt;&lt;span&gt;             replayLazily];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里对 signal 进行了 chain &#x2F; modify &#x2F; hook 等操作，主要作用是获取 access token 和用户信息。&lt;&#x2F;p&gt;
&lt;p&gt;用户的登出就简单了，直接设置&lt;code&gt;user&lt;&#x2F;code&gt;和&lt;code&gt;token&lt;&#x2F;code&gt;为&lt;code&gt;nil&lt;&#x2F;code&gt;就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;she-zhi-chao-shi-shi-jian-he-huan-cun-ce-lue&quot;&gt;设置超时时间和缓存策略&lt;&#x2F;h3&gt;
&lt;p&gt;因为 AF2.0 使用了新的架构，导致要设置 Request 的超时和缓存稍微有些麻烦，需要新建一个继承自&lt;code&gt;AFHTTPRequestSerializer&lt;&#x2F;code&gt;的 Class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;AFHTTPRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPAPIRequestSerializer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLString:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;URLString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parameters:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;parameters
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableURLRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:method URLString:URLString parameters:parameters&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;timeoutInterval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cachePolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NSURLRequestReloadIgnoringLocalCacheData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; request;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后将这个 class 设置为 manager.requestSerializer&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[HBPAPIManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithBaseURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URLWithString:API_SERVER&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;requestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[HBPAPIRequestSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就行了&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-xian-yan-zheng&quot;&gt;权限验证&lt;&#x2F;h3&gt;
&lt;p&gt;这个比较简单些，直接在方法里面加上判断&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)createCommentWithPinID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)pinID text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)text
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;isAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; authenticatedError]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestWithMethod:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;POST&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;relativePath:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;pins&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;comments&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, pinID] parameters:@{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; text} resultClass:[HBPComment class] listKey:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;comment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;accesstoken-guo-qi-de-chu-li&quot;&gt;AccessToken 过期的处理&lt;&#x2F;h3&gt;
&lt;p&gt;AccessToken 过期和获取新的 AccessToken 可以交给使用者来做，但是会比较麻烦，最好的方法是过期后自动去获取新的 AccessToken，拿到 Token 后自动去执行之前失败的请求，这块我是这么处理的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)requestWithMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)method relativePath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)relativePath parameters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)parameters resultClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;)resultClass listKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)listKey
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;requestSignal;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create requestSignal
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[requestSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;catch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HBPAPIManagerErrorInvalidAccessToken) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;refreshToken] ignoreValues] concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requestSignal];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[RACSignal error:error];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hbpobject-subclass&quot;&gt;HBPObject SubClass&lt;&#x2F;h3&gt;
&lt;p&gt;那些继承自&lt;code&gt;HBPObject&lt;&#x2F;code&gt;的子类，有些事情是&lt;code&gt;HBPObject&lt;&#x2F;code&gt;无法处理的，比如 NSArray 的 Property，因为 Objective-C 不支持 generic，所以无法知道这个数组包含的究竟是怎样的 Class，这时就需要在子类对这些 property 做处理。&lt;&#x2F;p&gt;
&lt;p&gt;比如画板(HBPBoard)有一个叫&lt;code&gt;pins&lt;&#x2F;code&gt;的 NSArray 属性，因为在&lt;code&gt;HBPObject&lt;&#x2F;code&gt;中使用了 KVC，所以如果子类有类似&lt;code&gt;setXXX:&lt;&#x2F;code&gt;的方法的话，那么该方法就会被调用，利用这一点，就可以处理那些特殊情况。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBPBoard
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPins:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pins
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _pins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[pins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_sequence&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;value) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBPPin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithDictionary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;value];
&lt;&#x2F;span&gt;&lt;span&gt;    }] array];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再比如，返回的 JSON 内容中，有一个叫&lt;code&gt;content&lt;&#x2F;code&gt;的 key，其中有 type &#x2F; date &#x2F; color 等 sub key，而你只想要&lt;code&gt;type&lt;&#x2F;code&gt;信息，只需添加一个&lt;code&gt;type&lt;&#x2F;code&gt; property，然后在&lt;code&gt;setContent&lt;&#x2F;code&gt;时，设置一下&lt;code&gt;type&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)setContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSDictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)content
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; content[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;以上就是我在使用 AFNetworking2.0 和 ReactiveCocoa2.1 构建 iOS REST Client 时的一些小心得，确实能感觉到 RAC 带了不少方便，虽然也同时带来了一些弊端（如返回的内容不明确，学习成本高），但还是利大于弊。&lt;&#x2F;p&gt;
&lt;p&gt;有什么问题和想法，欢迎交流。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>类簇在iOS开发中的应用</title>
            <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/class-cluster/</link>
            <guid>https://limboy.me/posts/class-cluster/</guid>
            <description>&lt;p&gt;类簇(class cluster)是一种设计模式，在 Foundation Framework 中被广泛使用，举个简单的例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;arrayWithObjects:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;arr class:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, [arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output: __NSArrayI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;是一个私有类，来看看这个类的头文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;__NSArrayI : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; _used;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看出&lt;code&gt;__NSArrayI&lt;&#x2F;code&gt;继承了&lt;code&gt;NSArray&lt;&#x2F;code&gt;。为什么要这么设计呢？拿 NSNumber 来举个例子，我们都知道 NSNumber 可以存储多种类型的数字，如 Int&#x2F;Float&#x2F;Double 等等，一种方式是把 NSNumber 作为基类，然后分别去实现各自的子类，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;初看起来也没什么问题，但如果子类很多，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster2.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这对使用者来说显然不够方便，得记住这么多类。如果使用类簇，问题就变得简单了，把 Number 作为抽象基类，子类各自实现存取方式，然后在基类中定义多个初始化方式，像这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;Art&#x2F;cluster3.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在只需要记住一个类就可以了。&lt;code&gt;NSNumber&lt;&#x2F;code&gt;的初始化伪代码大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithBool
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFBoolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)initWithLong
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[__NSCFNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-ios-xiang-mu-zhong-de-ying-yong&quot;&gt;在 iOS 项目中的应用&lt;&#x2F;h3&gt;
&lt;p&gt;在开发 app 时经常会遇到表现和行为完全一样，但数据源不一样的情况。以花瓣 app 为例，同样是瀑布流，可能来自我喜欢的图片、某个画板下的图片、某个用户的图片等等。如果为每一种表现方式都新建一个 Controller，并且使用这个 Controller 来初始化，那么就会遇到最开始提到的问题：子类太多，使用不便。这正好可以通过类簇来很方便地搞定。比如这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;HBWaterfallViewController
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithLiked
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBLikedViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]init];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;initWithBoardID:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSInteger&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;boardID
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[[HBBoardViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;]initWithBoardID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;boardID];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 通用的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (PSUICollectionViewCell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collectionView:&lt;&#x2F;span&gt;&lt;span&gt;(PSUICollectionView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;collectionView
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cellForItemAtIndexPath:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSIndexPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;indexPath
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#pragma mark &lt;&#x2F;span&gt;&lt;span&gt;- 每个子类需要实现的方法
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetchMoreData
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NSAssert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;子类需要实现此方法&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来类似这样&lt;code&gt;[[HBWaterfallViewController alloc]initWithBoardID:9527]&lt;&#x2F;code&gt; 或 &lt;code&gt;[[HBWaterfallViewController alloc]initWithLiked]&lt;&#x2F;code&gt;。如果有新的 DataSource，新加一个初始化方法即可，对于使用者来说，打开头文件，看下 init 开头的方法就行了。&lt;&#x2F;p&gt;
&lt;p&gt;再举个例子，现在很多应用需要同时兼顾 iOS6 和 iOS7，在表现上需要为不同的系统加载不同的图片资源，最简单粗暴的方法就是各种 if&#x2F;else 判断，像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;]systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 6 and previous versions *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* iOS 7 and above *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不够优雅，可以使用类簇的思想来去掉 if&#x2F;else 判断，把跟视图具体元素无关的代码放在基类，跟系统版本相关的代码拆成两个子类，然后在各自的类中加载相应的资源。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.h *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestView: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;UIView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Common method *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestView.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;[TestView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[UIDevice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;currentDevice&lt;&#x2F;span&gt;&lt;span&gt;] systemMajorVersion] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[TestViewIOS7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里&lt;code&gt;alloc&lt;&#x2F;code&gt;时并没有返回&lt;code&gt;TestView&lt;&#x2F;code&gt;类，而是根据系统版本返回&lt;code&gt;TestViewIOS6&lt;&#x2F;code&gt; 或 &lt;code&gt;TestViewIOS7&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS6.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestViewIOS6: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;TestView
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS6 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* TestViewIOS7.m *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@implementation TestViewIOS7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;drawRect: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;CGRect&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;rect
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* Custom iOS7 drawing code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;类簇的本质其实是&lt;a href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82&quot;&gt;抽象工厂&lt;&#x2F;a&gt;，类簇也可以有多个基类，如&lt;code&gt;NSArray&lt;&#x2F;code&gt;, &lt;code&gt;NSMutableArray&lt;&#x2F;code&gt;, 后者就是继承的前者。它对一些「大同小异」的问题，往往会有不错的效果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;mac&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;devpedia-cocoacore&#x2F;ClassCluster.html&quot;&gt;Cocoa Core Competencies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.noxeos.com&#x2F;2013&#x2F;06&#x2F;18&#x2F;strategies-support-ios7-ui&#x2F;&quot;&gt;Strategies to support iOS7 UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;documentation&#x2F;general&#x2F;conceptual&#x2F;CocoaEncyclopedia&#x2F;ClassClusters&#x2F;ClassClusters.html&quot;&gt;Class Cluster Concepts in Objective-C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说ReactiveCocoa 2</title>
            <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/reactivecocoa-2/</link>
            <guid>https://limboy.me/posts/reactivecocoa-2/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;a&gt;是&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1107-reactivecocoa-for-a-better-world&quot;&gt;Github&lt;&#x2F;a&gt;开源的一款 cocoa FRP 框架，我在&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;ios&#x2F;2013&#x2F;06&#x2F;19&#x2F;frp-reactivecocoa.html&quot;&gt;之前的文章&lt;&#x2F;a&gt;里有过介绍(当时还是 1.x 版本，2.x 版本有了新的变化，API 也有部分不兼容) 这里再简单地提一下。&lt;&#x2F;p&gt;
&lt;p&gt;Native app 有很大一部分的时间是在等待事件发生，然后响应事件，比如等待网络请求完成，等待用户的操作，等待某些状态值的改变等等，等这些事件发生后，再做进一步处理。 但是这些等待和响应，并没有一个统一的处理方式。Delegate, Notification, Block, KVO, 常常会不知道该用哪个最合适。有时需要 chain 或者 compose 某几个事件，就需要多个状态变量，而状态变量一多，复杂度也就上来了。为了解决这些问题，Github 的工程师们开发了 ReactiveCocoa。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-ge-chang-jian-de-gai-nian&quot;&gt;几个常见的概念&lt;&#x2F;h2&gt;
&lt;p&gt;在阅读 ReactiveCocoa(以下简称 RAC)的相关文章或代码时，经常会出现一些名词，理解它们对于理解 RAC 有很大的帮助，下面就简要来说说这些常见的概念。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signal-and-subscriber&quot;&gt;Signal and Subscriber&lt;&#x2F;h3&gt;
&lt;p&gt;这是 RAC 最核心的内容，这里我想用插头和插座来描述，插座是 Signal，插头是 Subscriber。想象某个遥远的星球，他们的电像某种物质一样被集中存储，且很珍贵。插座负责去获取电，插头负责使用电，而且一个插座可以插任意数量的插头。当一个插座(Signal)没有插头(Subscriber)时什么也不干，也就是处于冷(Cold)的状态，只有插了插头时才会去获取，这个时候就处于热(Hot)的状态。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 获取到数据后，会调用 Subscriber 的 sendNext, sendComplete, sendError 方法来传送数据给 Subscriber，Subscriber 自然也有方法来获取传过来的数据，如：[signal subscribeNext:error:completed]。这样只要没有 sendComplete 和 sendError，新的值就会通过 sendNext 源源不断地传送过来，举个简单的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, username)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: ^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;newName:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RACObserve&lt;&#x2F;code&gt;使用了 KVO 来监听 property 的变化，只要 username 被自己或外部改变，block 就会被执行。但不是所有的 property 都可以被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;，该 property 必须支持 KVO，比如 NSURLCache 的 currentDiskUsage 就不能被&lt;code&gt;RACObserve&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Signal 是很灵活的，它可以被修改(map)，过滤(filter)，叠加(combine)，串联(chain)，这有助于应对更加复杂的情况，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;logInButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, enabled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal
&lt;&#x2F;span&gt;&lt;span&gt;        combineLatest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@[
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usernameTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;passwordTextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(LoginManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sharedManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggingIn)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACObserve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, loggedIn)
&lt;&#x2F;span&gt;&lt;span&gt;        ] reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggingIn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;loggedIn) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; @(username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggingIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span&gt;loggedIn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;boolValue&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码看起来有点复杂，来细细说一下，首先是左边的&lt;code&gt;RAC(...)&lt;&#x2F;code&gt;，它的作用是将&lt;code&gt;self.logInButton.enabled&lt;&#x2F;code&gt;属性与右边的 signal 的 sendNext 值绑定。也就是如果右边的 reduce 的返回值为 NO，那么 enabled 就为 NO。右边的&lt;code&gt;combineLatest&lt;&#x2F;code&gt;是获取这 4 个 signal 的 next 值。其中可以看到&lt;code&gt;self.usernameTextField.rac_textSignal&lt;&#x2F;code&gt;这么个东东，&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是 RAC 为 UITextField 添加的 category，只要 usernameTextField 的值有变化，这个值就会被返回(sendNext)。combineLatest 需要每个 signal 至少都有过一次 sendNext。reduce 的作用是根据接收到的值，再返回一个新的值，这里是@(YES)和@(NO)，必须是 object。&lt;&#x2F;p&gt;
&lt;p&gt;上面这段代码用到了 Signal 的组合，想象一下，如果是传统的方式，写起来还是挺复杂的，而且随着功能的增加，调整起来会更加麻烦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leng-xin-hao-cold-he-re-xin-hao-hot&quot;&gt;冷信号(Cold)和热信号(Hot)&lt;&#x2F;h3&gt;
&lt;p&gt;上面提到过这两个概念，冷信号默认什么也不干，比如下面这段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;triggered&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	[subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foobar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们创建了一个 Signal，但因为没有被 subscribe，所以什么也不会发生。加了下面这段代码后，signal 就处于 Hot 的状态了，block 里的代码就会被执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeCompleted:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;subscription &lt;&#x2F;span&gt;&lt;span&gt;%u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, subscriptions);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或许你会问，那如果这时又有一个新的 subscriber 了，signal 的 block 还会被执行吗？这就牵扯到了另一个概念：Side Effect&lt;&#x2F;p&gt;
&lt;h3 id=&quot;side-effect&quot;&gt;Side Effect&lt;&#x2F;h3&gt;
&lt;p&gt;还是上面那段代码，如果有多个 subscriber，那么 signal 就会又一次被触发，控制台里会输出两次&lt;code&gt;triggered&lt;&#x2F;code&gt;。这或许是你想要的，或许不是。如果要避免这种情况的发生，可以使用 &lt;code&gt;replay&lt;&#x2F;code&gt; 方法，它的作用是保证 signal 只被触发一次，然后把 sendNext 的 value 存起来，下次再有新的 subscriber 时，直接发送缓存的数据。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoa-categories&quot;&gt;Cocoa Categories&lt;&#x2F;h2&gt;
&lt;p&gt;为了更加方便地使用 RAC，RAC 给 Cocoa 添加了很多 category，与系统集成地越紧密，使用起来自然也就越方便。下面是我认为比较常用的 categories。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uiview-categories&quot;&gt;UIView Categories&lt;&#x2F;h3&gt;
&lt;p&gt;上面看到的&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;是加在 UITextField 上的(UITextField+RACSignalSupport.h)，其他常用的 UIView 也都有添加相应的 category，比如 UIAlertView，就不需要再用 Delegate 了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[UIAlertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Alert&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt; cancelButtonTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; otherButtonTitles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_buttonClickedSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;indexNumber) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([indexNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched NO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;you touched YES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[alertView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有了这些 Category，大部分的 Delegate 都可以使用 RAC 来做。或许你会想，可不可以 subscribe NSMutableArray.rac_sequence.signal，这样每次有新的 object 或旧的 object 被移除时都能知道，UITableViewController 就可以根据 dataSource 的变化，来 reloadData。但很可惜这样不行，因为 RAC 是基于 KVO 的，而 NSMutableArray 并不会在调用 addObject 或 removeObject 时发送通知，所以不可行。不过可以使用 NSArray 作为 UITableView 的 dataSource，只要 dataSource 有变动就换成新的 Array，这样就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;说到 UITableView，再说一下 UITableViewCell，RAC 给 UITableViewCell 提供了一个方法：&lt;code&gt;rac_prepareForReuseSignal&lt;&#x2F;code&gt;，它的作用是当 Cell 即将要被重用时，告诉 Cell。想象 Cell 上有多个 button，Cell 在初始化时给每个 button 都&lt;code&gt;addTarget:action:forControlEvents&lt;&#x2F;code&gt;，被重用时需要先移除这些 target，下面这段代码就可以很方便地解决这个问题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cancelButton
&lt;&#x2F;span&gt;&lt;span&gt;	rac_signalForControlEvents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;UIControlEventTouchUpInside]
&lt;&#x2F;span&gt;&lt;span&gt;	takeUntil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_prepareForReuseSignal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(UIButton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do other things
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个很常用的 category 就是&lt;code&gt;UIButton+RACCommandSupport.h&lt;&#x2F;code&gt;，它提供了一个 property：&lt;code&gt;rac_command&lt;&#x2F;code&gt;，就是当 button 被按下时会执行的一个命令，命令被执行完后可以返回一个 signal，有了 signal 就有了灵活性。比如点击投票按钮，先判断一下有没有登录，如果有就发 HTTP 请求，没有就弹出登陆框，可以这么实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithEnabled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt; signalBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;input) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assume that we&amp;#39;re logged in at first. We&amp;#39;ll replace this signal later if not.
&lt;&#x2F;span&gt;&lt;span&gt;	RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[PXRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;apiHelper&lt;&#x2F;span&gt;&lt;span&gt;] authMode] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; PXAPIHelperModeNoAuth) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Not logged in. Replace signal.
&lt;&#x2F;span&gt;&lt;span&gt;		authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			FRPLoginViewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[FRPLoginViewController alloc] initWithNibName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;FRPLoginViewController&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; bundle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			UINavigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;navigationController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[UINavigationController alloc] initWithRootViewController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;viewController];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;presentViewController:navigationController animated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;completion:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;				[subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			}];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		}&lt;&#x2F;span&gt;&lt;span&gt;]];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[authSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;strongify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;viewModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;voteCommand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] ignoreValues];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;[voteButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_command&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;x) {
&lt;&#x2F;span&gt;&lt;span&gt;	[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		[SVProgressHUD showErrorWithStatus:[error localizedDescription]];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码节选自 AshFurrow 的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt;，有删减。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-structure-categories&quot;&gt;Data Structure Categories&lt;&#x2F;h3&gt;
&lt;p&gt;常用的数据结构，如 NSArray, NSDictionary 也都有添加相应的 category，比如&lt;code&gt;NSArray&lt;&#x2F;code&gt;添加了&lt;code&gt;rac_sequence&lt;&#x2F;code&gt;，可以将&lt;code&gt;NSArray&lt;&#x2F;code&gt;转换为&lt;code&gt;RACSequence&lt;&#x2F;code&gt;，顺便说一下&lt;code&gt;RACSequence&lt;&#x2F;code&gt;, &lt;code&gt;RACSequence&lt;&#x2F;code&gt;是一组 immutable 且有序的 values，不过这些 values 是运行时计算的，所以对性能提升有一定的帮助。&lt;code&gt;RACSequence&lt;&#x2F;code&gt;提供了一些方法，如&lt;code&gt;array&lt;&#x2F;code&gt;转换为&lt;code&gt;NSArray&lt;&#x2F;code&gt;，&lt;code&gt;any:&lt;&#x2F;code&gt;检查是否有 Value 符合要求，&lt;code&gt;all:&lt;&#x2F;code&gt;检查是不是所有的 value 都符合要求，这里的符合要求的，block 返回 YES，不符合要求的就返回 NO。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;notificationcenter-category&quot;&gt;NotificationCenter Category&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;, 默认情况下&lt;code&gt;NSNotificationCenter&lt;&#x2F;code&gt;使用&lt;code&gt;Target-Action&lt;&#x2F;code&gt;方式来处理 Notification，这样就需要另外定义一个方法，这就涉及到编程领域的两大难题之一：起名字。有了 RAC，就有 Signal，有了 Signal 就可以 subscribe，于是&lt;code&gt;NotificationCenter&lt;&#x2F;code&gt;就可以这么来处理，还不用担心移除 observer 的问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] rac_addObserverForName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;MyNotification&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;notification) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Notification Received&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nsobject-categories&quot;&gt;NSObject Categories&lt;&#x2F;h3&gt;
&lt;p&gt;NSObject 有不少的 Category，我觉得比较有用的有这么几个&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racdeallocating-h&quot;&gt;NSObject+RACDeallocating.h&lt;&#x2F;h4&gt;
&lt;p&gt;顾名思义就是在一个 object 的 dealloc 被触发时，执行的一段代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; @[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_willDeallocSignal&lt;&#x2F;span&gt;&lt;span&gt;] subscribeCompleted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;oops, i will be gone&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nsobject-raclifting-h&quot;&gt;NSObject+RACLifting.h&lt;&#x2F;h4&gt;
&lt;p&gt;有时我们希望满足一定条件时，自动触发某个方法，有了这个 category 就可以这么办&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)test
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        dispatch_time_t popTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(DISPATCH_TIME_NOW, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)(delayInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NSEC_PER_SEC));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(popTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;signalB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;createSignal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;RACDisposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Another B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        [subscriber sendCompleted];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;rac_liftSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(doA:withB:) withSignals:signalA, signalB, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)doA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)A withB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)B
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;A:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; and B:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, A, B);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;rac_liftSelector:withSignals&lt;&#x2F;code&gt; 就是干这件事的，它的意思是当 signalA 和 signalB 都至少 sendNext 过一次，接下来只要其中任意一个 signal 有了新的内容，&lt;code&gt;doA:withB&lt;&#x2F;code&gt;这个方法就会自动被触发。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有兴趣，可以想想上面这段代码会输出什么。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nsobject-racselectorsignal-h&quot;&gt;NSObject+RACSelectorSignal.h&lt;&#x2F;h4&gt;
&lt;p&gt;这个 category 有&lt;code&gt;rac_signalForSelector:&lt;&#x2F;code&gt;和&lt;code&gt;rac_signalForSelector:fromProtocol:&lt;&#x2F;code&gt; 这两个方法。先来看前一个，它的意思是当某个 selector 被调用时，再执行一段指定的代码，相当于 hook。比如点击某个按钮后，记个日志。后者表示该 selector 实现了某个协议，所以可以用它来实现 Delegate。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mvvm&quot;&gt;MVVM&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 带来的变化还不仅仅是这些，它还带来了架构层面的变化。我们都知道苹果推荐的是 MVC 架构，那 MVVM 又是什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;f.cloud.github.com&#x2F;assets&#x2F;432536&#x2F;867984&#x2F;291ed380-f760-11e2-9106-d3158320af39.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跟 MVC 最大的区别是多了个&lt;code&gt;ViewModel&lt;&#x2F;code&gt;，它直接与 View 绑定，而且对 View 一无所知。拿做菜打比方的话，ViewModel 就是调料，它不关心做的到底是什么菜。这不是跟&lt;code&gt;Model&lt;&#x2F;code&gt;很像吗？是的，它可以扮演 Model 的职责，但其实它是 Model 的中介，这样当 Model 的 API 有变化，或者由本地存储变为远程 API 调用时，ViewModel 的 public API 可以保持不变。&lt;&#x2F;p&gt;
&lt;p&gt;使用 ViewModel 的好处是，可以让 Controller 更加简单和轻便，而且 ViewModel 相对独立，也更加方便测试和重用。那 Controller 这时又该做哪些事呢？在 MVVM 体系中，Controller 可以被看成 View，所以它的主要工作是处理布局、动画、接收系统事件、展示 UI。&lt;&#x2F;p&gt;
&lt;p&gt;MVVM 还有一个很重要的概念是 &lt;code&gt;data binding&lt;&#x2F;code&gt;，view 的呈现需要 data，这个 data 就是由 ViewModel 提供的，将 view 的 data 与 ViewModel 的 data 绑定后，将来双方的数据只要一方有变化，另一方就能收到。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveViewModel&quot;&gt;这里&lt;&#x2F;a&gt;有 Github 开源的一个 ViewModel Base Class。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 在使用时有一些注意事项，可以参考官方的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;DesignGuidelines.md&quot;&gt;DesignGuildLines&lt;&#x2F;a&gt;，这里简单说一下。&lt;&#x2F;p&gt;
&lt;p&gt;当一个 signal 被一个 subscriber subscribe 后，这个 subscriber 何时会被移除？答案是当 subscriber 被 sendComplete 或 sendError 时，或者手动调用[disposable dispose]。&lt;&#x2F;p&gt;
&lt;p&gt;当 subscriber 被 dispose 后，所有该 subscriber 相关的工作都会被停止或取消，如 http 请求，资源也会被释放。&lt;&#x2F;p&gt;
&lt;p&gt;Signal events 是线性的，不会出现并发的情况，除非显示地指定 Scheduler。所以&lt;code&gt;-subscribeNext:error:completed:&lt;&#x2F;code&gt;里的 block 不需要锁定或者 synchronized 等操作，其他的 events 会依次排队，直到 block 处理完成。&lt;&#x2F;p&gt;
&lt;p&gt;Errors 有优先权，如果有多个 signals 被同时监听，只要其中一个 signal sendError，那么 error 就会立刻被传送给 subscriber，并导致 signals 终止执行。相当于 Exception。&lt;&#x2F;p&gt;
&lt;p&gt;生成 Signal 时，最好指定 Name, &lt;code&gt;-setNameWithFormat:&lt;&#x2F;code&gt; 方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;block 代码中不要阻塞。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;尽管洋洋洒洒写了这么多，也只是对 RAC 有了个大概的了解，如果要更深入地了解 RAC 还是需要多读文档、代码和相关项目。&lt;&#x2F;p&gt;
&lt;p&gt;RAC 学习起来稍显吃力，且相关的文章目前还不多，中文的就更少了，希望这篇文章能带给你些帮助。&lt;&#x2F;p&gt;
&lt;p&gt;以下是我觉得还不错的 RAC 相关资源&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AshFurrow&#x2F;FunctionalReactivePixels&quot;&gt;FunctionalReactivePixels&lt;&#x2F;a&gt; 作者同时还出了一本 FRP 相关的书，个人觉得看源码就足够了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jspahrsummers&#x2F;GroceryList&quot;&gt;GroceryList&lt;&#x2F;a&gt; RAC 的作者之一 jspahrsummers 的一个项目&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;reactivecocoa-essentials-understanding-and-using-raccommand&#x2F;&quot;&gt;ReactiveCocoa Essentilas: Understanding and Using RACCommand&lt;&#x2F;a&gt; 介绍了 RACCommand 的使用，同时也涉及了 RAC 相关的一些点。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codeblog.shape.dk&#x2F;blog&#x2F;2013&#x2F;12&#x2F;02&#x2F;transparent-oauth-token-refresh-using-reactivecocoa&#x2F;&quot;&gt;Transparent OAuth Token Refresh Using ReactiveCocoa&lt;&#x2F;a&gt; 这篇文章讲了如何使用 RAC 来透明地获取 Access Token，然后继续发送请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;vimeo.com&#x2F;78749139&quot;&gt;BNR: An Introduction to ReactiveCocoa&lt;&#x2F;a&gt;(视频)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>读《程序员的思维修炼》</title>
            <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pragmatic-thinking-and-learning/</link>
            <guid>https://limboy.me/posts/pragmatic-thinking-and-learning/</guid>
            <description>&lt;p&gt;虽然冠以「程序员」的名头，但其实也适用于非程序员。这本书主要围绕「如何提升元学习能力」展开，所谓「元学习」就是学习如何学习。掌握了这种能力后在其他领域也可以如鱼得水。还介绍了 L 型和 R 型双 CPU 模式，阅读的技巧，目标的设定等等。读起来不累，同时又会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;简单摘录了几句：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;培养幽默感，以建立更强大的隐喻。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;两个想法相距越远，越难以通过有效的隐喻联系起来。但我们遇到一个格外具有创造性的隐喻，且两参照系距离适中，我们就不得不几百年来一直歌颂这位作者。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;增加感官体验，以促进大脑的使用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;直觉和模式匹配能力超越了显性知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你的价值取决于你为团队带来的价值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是软件，软件不会老化，不会退化。但是大脑必须刷新，必须使用，否则就会丢失记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型在存储输入方面非常卖力，事实上可能你的每次经历，无论多么平淡乏味，都会被存储。但是它不一定被索引。当你努力解决一个问题时，R 型进程会搜索你的所有记忆以寻找解决方案。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型处理语言、分析、符号、抽象、时间、推理、数字、逻辑、现象思维。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型处理直觉、综合、想象。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;积极的情感对学习和创造性思维非常关键。当你充满了消极情绪时，你的大脑就开始停止提供多余的资源。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择或桌面的整理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你努力解决一个问题时，你的所有记忆都会被扫描——甚至那些你无法主动唤醒的记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;养成一种收集思维鹅卵石的习惯，一旦有了积累，造墙的过程就会很容易。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你是否注意到伟大的想法或者领悟可能会在最出乎意料的时候降临？比如洗澡、刷盘子或其他一些枯燥、琐碎的工作时。这是因为 L 型有点厌倦了这种常规任务，走了神，这才让 R 型得以自由地展示自己地发现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;改变解决问题的角度（角色扮演）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;培养快速的洞察力，寻找不相关事物之间的关系或类比。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是一个用于填充的容器，而是一束需要点燃的火焰。这不是别人可以帮你做的，而是一件你必须自己做的事情。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;建立 SMART 任务实现你的目标。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所有的知识投资都有价值。即使你从来不会在工作中使用某项技术，它也会影响你思考和解决问题的方式。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;考虑投资的回报率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你种菜时，如果菜长的不好，你不会怪责菜，你会寻找其他理由。菜可能需要更多的肥料或者水，或者少晒太阳，你决不会怪责菜。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SQ3R 主动学习法(Survy, Question, Read, Recite, Review)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用思维导图做笔记。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;以教代学（橡皮鸭调试法），向你所在领域之外的人解释。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把事物分成大脑足以容纳的几部分。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型模式的 CPU 有一种「空闲循环」程序，如果没有更紧迫的事情值得你去注意，闲置程序将会停留在一些低等级的困扰或紧急的问题上，而这会干扰 R 型的处理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大部分冥想、瑜伽以及类似的练习都是为了这个相同的目标：缓和大脑里 L 型嘈杂的声音所带来的痛苦，生活在此刻，不要将你的精力不必要的分散，因为内心中喋喋不休的事情会击倒我们。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 wiki 来管理信息和知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;「不作为」是敌人，「错误」不是。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;给新习惯适应的时间。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;制定一段时间计划，然后努力实现。跟踪你的进度，当你感觉做得不够时，重新审视你的成果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;信念是真实的，你必须相信这种改变是可能的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;采取步步为营的细小步骤。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;新手的大脑有很多可能性，但是专家的却很少。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;抓住方向盘，不要自动驾驶。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>iOS项目的目录结构和开发流程</title>
            <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/build-ios-application/</link>
            <guid>https://limboy.me/posts/build-ios-application/</guid>
            <description>&lt;p&gt;网上相关的资源不多，开源的且质量还不错的 iOS 项目也是少之又少，最近正好跟同事合作了一个 iOS 项目，来说说自己的一些想法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;AppDelegate
&lt;&#x2F;span&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;Vendors
&lt;&#x2F;span&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;Resources
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 AppDelegate.h(.m)文件，是整个应用的入口文件，所以单独拿出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;models&quot;&gt;Models&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放一些与数据相关的 Model 文件，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Models
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- BaseModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- CollectionModel.m
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;macro&quot;&gt;Macro&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放了整个应用会用到的宏定义，里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Macro
&lt;&#x2F;span&gt;&lt;span&gt;	|- AppMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- NotificationMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- VendorMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	|- UtilsMacro.h
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;appmacro-h-li-fang-app-xiang-guan-de-hong-ding-yi-ru&quot;&gt;AppMacro.h 里放 app 相关的宏定义，如:&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 表情相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;cachedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_RECENT_USED @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;recentusedemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_CATEGORIES @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;categoryemotions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EMOTION_TOPICS @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;emotiontopics&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 收藏相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;COLLECT_CACHE_PATH @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;collected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 配图相关
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_HEIGHT_MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WATERFALL_ITEM_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;146
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;notificationmacro-h-li-fang-de-shi-tong-zhi-xiang-guan-de-hong-ding-yi&quot;&gt;NotificationMacro.h 里放的是通知相关的宏定义。&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;utilsmacro-h-li-fang-de-shi-yi-xie-fang-bian-shi-yong-de-hong-ding-yi-ru&quot;&gt;UtilsMacro.h 里放的是一些方便使用的宏定义，如：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;UIColorFromRGB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) [UIColor \
&lt;&#x2F;span&gt;&lt;span&gt;colorWithRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span&gt; alpha&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;intValue&lt;&#x2F;span&gt;&lt;span&gt;) [NSString stringWithFormat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,intValue]
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### VendorMacro.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt; 里放一些第三方常量，如：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; highlight objc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_KEY @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxxxx&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;UMENG_CHANNEL_ID @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xxx&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有新的类型的宏定义，可以再新建一个相关的 Macro.h。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;general&quot;&gt;General&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放会被重用的 Views&#x2F;Classes 和 Categories。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;General
&lt;&#x2F;span&gt;&lt;span&gt;	|- Views
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKScollView
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKPullToRefresh
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	|- Classes
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKBaseViewController
&lt;&#x2F;span&gt;&lt;span&gt;		|- TPKHorizontalView
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;	| - Categories
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIViewController+Sizzle
&lt;&#x2F;span&gt;&lt;span&gt;		|- UIImageView+Downloader
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;TPK&lt;&#x2F;code&gt;是项目的首字母缩写。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;helpers&quot;&gt;Helpers&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放一些助手类，文件名与功能挂钩。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Helpers
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKShareHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPDBHelper
&lt;&#x2F;span&gt;&lt;span&gt;	|- TPKEmotionHelper
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;助手类的主要作用是帮助 Controller 瘦身，也可以提供一定程度的复用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vendors&quot;&gt;Vendors&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录放第三方的类库&#x2F;SDK，如 UMeng、WeiboSDK、WeixinSDK 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sections&quot;&gt;Sections&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下面的文件对应的是 app 的具体单元，如导航、瀑布流等等。里面大概是这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Sections
&lt;&#x2F;span&gt;&lt;span&gt;	|- Menu
&lt;&#x2F;span&gt;&lt;span&gt;	|- Setting
&lt;&#x2F;span&gt;&lt;span&gt;	|- Collection
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h3&gt;
&lt;p&gt;这个目录下放的是 app 会用到的一些资源，主要是图片。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cocoapods&quot;&gt;Cocoapods&lt;&#x2F;h2&gt;
&lt;p&gt;业务无关的类库可以通过 Cocoapods 来方便地管理，如&lt;code&gt;SDWebImage&lt;&#x2F;code&gt;, &lt;code&gt;Reachability&lt;&#x2F;code&gt;等等。还有一些是多个应用都会用到的基础模块，比如 HBAPI、HBSNS 、HBFoundation（HB 为公司名首字母）等等，可以建一个私有的 git repo，然后加到 podfile 中，这样如果 HBAPI 有更新，只需要&lt;code&gt;pod update&lt;&#x2F;code&gt;一下就行了。&lt;&#x2F;p&gt;
&lt;p&gt;顺便说一下&lt;code&gt;HBFoundation&lt;&#x2F;code&gt;，这个 git 仓库中可以放一些自己写的所有应用基本上都会用到的小模块。如很多 app 都会有隔一段时间跳出一个求好评的 alertView，就可以写一个&lt;code&gt;HBRating&lt;&#x2F;code&gt;类，这样需要使用该功能的 app 只需加上一句：&lt;code&gt;[HBRating checkIfShouldPopupWithAppID:(NSInteger)appID]&lt;&#x2F;code&gt;就行了。又比如 app 都有接受 push notification 的需求，可以写一个&lt;code&gt;HBAPNS&lt;&#x2F;code&gt;类，等等。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kai-fa-liu-cheng&quot;&gt;开发流程&lt;&#x2F;h2&gt;
&lt;p&gt;在拿到设计图后，就可以针对设计图抽离出可复用的 Classes&#x2F;Views&#x2F;Helpers，考虑一下某个效果的具体实现，使用合适的设计模式来避免大量的 if&#x2F;else 嵌套，等等。不要一下子就钻到 Sections 中去实现页面效果和功能，初看起来可能会快一点，但只要有点复杂度的项目，这种做法到后来只会吃尽苦头，代码会变的越来越难维护。所以前期一定要做好充足的准备工作。&lt;&#x2F;p&gt;
&lt;p&gt;经验有限，如果你有更好的想法，欢迎交流：）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)KVO的内部实现</title>
            <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/internal-implementation-of-kvo/</link>
            <guid>https://limboy.me/posts/internal-implementation-of-kvo/</guid>
            <description>&lt;p&gt;09 年的&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;pyblog&#x2F;friday-qa-2009-01-23.html&quot;&gt;一篇文章&lt;&#x2F;a&gt;，比较深入地阐述了 KVO 的内部实现。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是实现 Cocoa Bindings 的基础，它提供了一种方法，当某个属性改变时，相应的 objects 会被通知到。在其他语言中，这种观察者模式通常需要单独实现，而在 Objective-C 中，通常无须增加额外代码即可使用。&lt;&#x2F;p&gt;
&lt;p&gt;###概览
这是怎么实现的呢？其实这都是通过 Objective-C 强大的运行时(runtime)实现的。当你第一次观察某个 object 时，runtime 会创建一个新的继承原先 class 的 subclass。在这个新的 class 中，它重写了所有被观察的 key，然后将 object 的&lt;code&gt;isa&lt;&#x2F;code&gt;指针指向新创建的 class（这个指针告诉 Objective-C 运行时某个 object 到底是哪种类型的 object）。所以 object 神奇地变成了新的子类的实例。&lt;&#x2F;p&gt;
&lt;p&gt;这些被重写的方法实现了如何通知观察者们。当改变一个 key 时，会触发&lt;code&gt;setKey&lt;&#x2F;code&gt;方法，但这个方法被重写了，并且在内部添加了发送通知机制。（当然也可以不走 setXXX 方法，比如直接修改 iVar，但不推荐这么做）。&lt;&#x2F;p&gt;
&lt;p&gt;有意思的是：苹果不希望这个机制暴露在外部。除了 setters，这个动态生成的子类同时也重写了&lt;code&gt;-class&lt;&#x2F;code&gt;方法，依旧返回原先的 class！如果不仔细看的话，被 KVO 过的 object 看起来和原先的 object 没什么两样。&lt;&#x2F;p&gt;
&lt;p&gt;###深入探究
下面来看看这些是如何实现的。我写了个程序来演示隐藏在 KVO 背后的机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; gcc -o kvoexplorer -framework Foundation kvoexplorer.m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TestClass : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@property int&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TestClass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@synthesize&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSMutableArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; methodCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Method \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;methodList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_copyMethodList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(c, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;methodCount)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; methodCount; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObject: NSStringFromSelector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(methodList[i]))&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free(methodList)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; array;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;NSObject class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;libobjc class &lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;implements methods &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;name,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;obj,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([obj class]),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ClassMethodNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(obj-&amp;gt;isa) componentsJoinedByString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, [str UTF8String])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSAutoreleasePool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;TestClass \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;control &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[TestClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:x forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:y forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;[xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addObserver:xy forKeyPath:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;control&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, control)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, y)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PrintDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;xy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, xy)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using NSObject methods, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[control methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[x methodForSelector:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:)])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Using libobjc functions, normal setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, overridden setX: is &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(control),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_getImplementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_getClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(x),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(setX:))))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们从头到尾细细看来。&lt;&#x2F;p&gt;
&lt;p&gt;首先定义了一个&lt;code&gt;TestClass&lt;&#x2F;code&gt;的类，它有 3 个属性。&lt;&#x2F;p&gt;
&lt;p&gt;然后定义了一些方便调试的方法。&lt;code&gt;ClassMethodNames&lt;&#x2F;code&gt;使用 Objective-C 运行时方法来遍历一个 class，得到方法列表。注意，这些方法不包括父类的方法。&lt;code&gt;PrintDescription&lt;&#x2F;code&gt;打印 object 的所有信息，包括 class 信息（包括&lt;code&gt;-class&lt;&#x2F;code&gt;和通过运行时得到的 class），以及这个 class 实现的方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后创建了 4 个&lt;code&gt;TestClass&lt;&#x2F;code&gt;实例，每一个都使用了不同的观察方式。&lt;code&gt;x&lt;&#x2F;code&gt;实例有一个观察者观察&lt;code&gt;x&lt;&#x2F;code&gt;key，&lt;code&gt;y&lt;&#x2F;code&gt;, &lt;code&gt;xy&lt;&#x2F;code&gt;也类似。为了做比较，&lt;code&gt;z&lt;&#x2F;code&gt;key 没有观察者。最后&lt;code&gt;control&lt;&#x2F;code&gt;实例没有任何观察者。&lt;&#x2F;p&gt;
&lt;p&gt;然后打印出 4 个 objects 的 description。&lt;&#x2F;p&gt;
&lt;p&gt;之后继续打印被重写的 setter 内存地址，以及未被重写的 setter 的内存地址做比较。这里做了两次，是因为&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;没能得到重写的方法。KVO 试图掩盖它实际上创建了一个新的 subclass 这个事实！但是使用运行时的方法就原形毕露了。&lt;&#x2F;p&gt;
&lt;p&gt;###运行代码
看看这段代码的输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;control&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, x, setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, y, setZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x103280&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;TestClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x104b10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; class TestClass
&lt;&#x2F;span&gt;&lt;span&gt;libobjc class NSKVONotifying_TestClass
&lt;&#x2F;span&gt;&lt;span&gt;implements methods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;, class, dealloc, \_isKVOA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSObject&lt;&#x2F;span&gt;&lt;span&gt; methods, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e
&lt;&#x2F;span&gt;&lt;span&gt;Using libobjc functions, normal setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x195e&lt;&#x2F;span&gt;&lt;span&gt;, overridden setX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，它输出了&lt;code&gt;control&lt;&#x2F;code&gt;object，没有任何问题，它的 class 是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，并且实现了 6 个 set&#x2F;get 方法。&lt;&#x2F;p&gt;
&lt;p&gt;然后是 3 个被观察的 objects。注意&lt;code&gt;-class&lt;&#x2F;code&gt;仍然显示的是&lt;code&gt;TestClass&lt;&#x2F;code&gt;，使用&lt;code&gt;object_getClass&lt;&#x2F;code&gt;显示了这个 object 的真面目：它是&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;的一个实例。这个&lt;code&gt;NSKVONotifying_TestClass&lt;&#x2F;code&gt;就是动态生成的 subclass！&lt;&#x2F;p&gt;
&lt;p&gt;注意，它是如何实现这两个被观察的 setters 的。你会发现，它很聪明，没有重写&lt;code&gt;-setZ:&lt;&#x2F;code&gt;，虽然它也是个 setter，因为它没有被观察。同时注意到，3 个实例对应的是同一个 class，也就是说两个 setters 都被重写了，尽管其中的两个实例只观察了一个属性。这会带来一点效率上的问题，因为即使没有被观察的 property 也会走被重写的 setter，但苹果显然觉得这比分开生成动态的 subclass 更好，我也觉得这是个正确的选择。&lt;&#x2F;p&gt;
&lt;p&gt;你会看到 3 个其他的方法。有之前提到过的被重写的&lt;code&gt;-class&lt;&#x2F;code&gt;方法，假装自己还是原来的 class。还有&lt;code&gt;-dealloc&lt;&#x2F;code&gt;方法处理一些收尾工作。还有一个&lt;code&gt;_isKVOA&lt;&#x2F;code&gt;方法，看起来像是一个私有方法。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，我们输出&lt;code&gt;-setX:&lt;&#x2F;code&gt;的实现。使用&lt;code&gt;-methodForSelector:&lt;&#x2F;code&gt;返回的是相同的值。因为&lt;code&gt;-setX:&lt;&#x2F;code&gt;已经在子类被重写了，这也就意味着&lt;code&gt;methodForSelector:&lt;&#x2F;code&gt;在内部实现中使用了&lt;code&gt;-class&lt;&#x2F;code&gt;，于是得到了错误的结果。&lt;&#x2F;p&gt;
&lt;p&gt;最后我们通过运行时得到了不同的输出结果。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个优秀的探索者，我们进入 debugger 来看看这第二个方法的实现到底是怎样的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;(gdb) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x96a1a550 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;\_NSSetIntValueAndNotify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看起来是一个内部方法，对&lt;code&gt;Foundation&lt;&#x2F;code&gt;使用&lt;code&gt;nm -a&lt;&#x2F;code&gt;得到一个完整的私有方法列表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;df80&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetBoolValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;a0480&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e120&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetDoubleValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e1&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetFloatValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000e3550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e390&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e2&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;c0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;89df0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetObjectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e6&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;f0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetPointValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e7&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;d0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRangeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e8&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;b0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetRectValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e550&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetShortValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;8ab20&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetSizeValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e050&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedCharValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fcd0&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedIntValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e470&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;9fc00&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedLongValueAndNotify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0013e620&lt;&#x2F;span&gt;&lt;span&gt; t __NSSetUnsignedShortValueAndNotify
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个列表也能发现一些有趣的东西。比如苹果为每一种 primitive type 都写了对应的实现。Objective-C 的 object 会用到的其实只有&lt;code&gt;__NSSetObjectValueAndNotify&lt;&#x2F;code&gt;，但需要一整套来对应剩下的，而且看起来也没有实现完全，比如&lt;code&gt;long dobule&lt;&#x2F;code&gt;或&lt;code&gt;_Bool&lt;&#x2F;code&gt;都没有。甚至没有为通用指针类型(generic pointer type)提供方法。所以，不在这个方法列表里的属性其实是不支持 KVO 的。&lt;&#x2F;p&gt;
&lt;p&gt;KVO 是一个很强大的工具，有时候过于强大了，尤其是有了自动触发通知机制。现在你知道它内部是怎么实现的了，这些知识或许能帮助你更好地使用它，或在它出错时更方便调试。&lt;&#x2F;p&gt;
&lt;p&gt;如果你打算使用 KVO，或许可以看一下我的另一篇文章&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;?page=pyblog&#x2F;key-value-observing-done-right.html&quot;&gt;Key-Value Observing Done Right&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)Objective-C的动态特性</title>
            <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/dynamic-tips-and-tricks-with-objective-c/</link>
            <guid>https://limboy.me/posts/dynamic-tips-and-tricks-with-objective-c/</guid>
            <description>&lt;p&gt;这是一篇译文，原文&lt;a href=&quot;http:&#x2F;&#x2F;pilky.me&#x2F;view&#x2F;21&quot;&gt;在此&lt;&#x2F;a&gt;，上一篇文章就是受这篇文章启发，这次干脆都翻译过来。&lt;&#x2F;p&gt;
&lt;p&gt;过去的几年中涌现了大量的 Objective-C 开发者。有些是从动态语言转过来的，比如 Ruby 或 Python，有些是从强类型语言转过来的，如 Java 或 C#，当然也有直接以 Objective-C 作为入门语言的。也就是说有很大一部分开发者都没有使用 Objective-C 太长时间。当你接触一门新语言时，更多地会关注基础知识，如语法和特性等。但通常有一些更高级的，更鲜为人知又有强大功能的特性等待你去开拓。&lt;&#x2F;p&gt;
&lt;p&gt;这篇文章主要是来领略下 Objective-C 的运行时(runtime)，同时解释是什么让 Objective-C 如此动态，然后感受下这些动态化的技术细节。希望这回让你对 Objective-C 和 Cocoa 是如何运行的有更好的了解。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-runtime&quot;&gt;The Runtime&lt;&#x2F;h2&gt;
&lt;p&gt;Objective-C 是一门简单的语言，95%是 C。只是在语言层面上加了些关键字和语法。真正让 Objective-C 如此强大的是它的运行时。它很小但却很强大。它的核心是消息分发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;messages&quot;&gt;Messages&lt;&#x2F;h3&gt;
&lt;p&gt;如果你是从动态语言如 Ruby 或 Python 转过来的，可能知道什么是消息，可以直接跳过进入下一节。那些从其他语言转过来的，继续看。&lt;&#x2F;p&gt;
&lt;p&gt;执行一个方法，有些语言，编译器会执行一些额外的优化和错误检查，因为调用关系很直接也很明显。但对于消息分发来说，就不那么明显了。在发消息前不必知道某个对象是否能够处理消息。你把消息发给它，它可能会处理，也可能转给其他的 Object 来处理。一个消息不必对应一个方法，一个对象可能实现一个方法来处理多条消息。&lt;&#x2F;p&gt;
&lt;p&gt;在 Objective-C 中，消息是通过&lt;code&gt;objc_msgSend()&lt;&#x2F;code&gt;这个 runtime 方法及相近的方法来实现的。这个方法需要一个 target，selector，还有一些参数。理论上来说，编译器只是把消息分发变成&lt;code&gt;objc_msgSend&lt;&#x2F;code&gt;来执行。比如下面这两行代码是等价的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;insertObject:foo atIndex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;objc_msgSend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(insertObject:atIndex:), foo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;objects-classes-metaclasses&quot;&gt;Objects, Classes, MetaClasses&lt;&#x2F;h3&gt;
&lt;p&gt;大多数面向对象的语言里有 classes 和 objects 的概念。Objects 通过 Classes 生成。但是在 Objective-C 中，classes 本身也是 objects(译者注：这点跟 python 很像)，也可以处理消息，这也是为什么会有类方法和实例方法。具体来说，Objective-C 中的 Object 是一个结构体(struct)，第一个成员是&lt;code&gt;isa&lt;&#x2F;code&gt;，指向自己的 class。这是在 objc&#x2F;objc.h 中定义的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; objc_object {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; isa;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;object 的 class 保存了方法列表，还有指向父类的指针。但 classes 也是 objects，也会有&lt;code&gt;isa&lt;&#x2F;code&gt;变量，那么它又指向哪儿呢？这里就引出了第三个类型: &lt;code&gt;metaclasses&lt;&#x2F;code&gt;。一个 metaclass 被指向 class，class 被指向 object。它保存了所有实现的方法列表，以及父类的 metaclass。如果想更清楚地了解 objects,classes 以及 metaclasses 是如何一起工作地，可以阅读&lt;a href=&quot;http:&#x2F;&#x2F;www.sealiesoftware.com&#x2F;blog&#x2F;archive&#x2F;2009&#x2F;04&#x2F;14&#x2F;objc_explain_Classes_and_metaclasses.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;methods-selectors-and-imps&quot;&gt;Methods, Selectors and IMPs&lt;&#x2F;h3&gt;
&lt;p&gt;我们知道了运行时会发消息给对象。我们也知道一个对象的 class 保存了方法列表。那么这些消息是如何映射到方法的，这些方法又是如何被执行的呢？&lt;&#x2F;p&gt;
&lt;p&gt;第一个问题的答案很简单。class 的方法列表其实是一个字典，key 为 selectors，IMPs 为 value。一个 IMP 是指向方法在内存中的实现。很重要的一点是，selector 和 IMP 之间的关系是在运行时才决定的，而不是编译时。这样我们就能玩出些花样。&lt;&#x2F;p&gt;
&lt;p&gt;IMP 通常是指向方法的指针，第一个参数是 self，类型为 id，第二个参数是_cmd，类型为 SEL，余下的是方法的参数。这也是&lt;code&gt;self&lt;&#x2F;code&gt;和&lt;code&gt;_cmd&lt;&#x2F;code&gt;被定义的地方。下面演示了 Method 和 IMP&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)doSomethingWithInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)aInt{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;doSomethingWithInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; aInt)&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta-yun-xing-shi-de-fang-fa&quot;&gt;其他运行时的方法&lt;&#x2F;h3&gt;
&lt;p&gt;现在我们知道了 objects,classes,selectors,IMPs 以及消息分发，那么运行时到底能做什么呢？主要有两个作用：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;创建、修改、自省 classes 和 objects&lt;&#x2F;li&gt;
&lt;li&gt;消息分发&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;之前已经提过消息分发，不过这只是一小部分功能。所有的运行时方法都有特定的前缀。下面是一些有意思的方法：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;class&quot;&gt;class&lt;&#x2F;h4&gt;
&lt;p&gt;class 开头的方法是用来修改和自省 classes。方法如&lt;code&gt;class_addIvar&lt;&#x2F;code&gt;, &lt;code&gt;class_addMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_addProperty&lt;&#x2F;code&gt;和&lt;code&gt;class_addProtocol&lt;&#x2F;code&gt;允许重建 classes。&lt;code&gt;class_copyIvarList&lt;&#x2F;code&gt;, &lt;code&gt;class_copyMethodList&lt;&#x2F;code&gt;, &lt;code&gt;class_copyProtocolList&lt;&#x2F;code&gt;和&lt;code&gt;class_copyPropertyList&lt;&#x2F;code&gt;能拿到一个 class 的所有内容。而&lt;code&gt;class_getClassMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_getClassVariable&lt;&#x2F;code&gt;, &lt;code&gt;class_getInstanceMethod&lt;&#x2F;code&gt;, &lt;code&gt;class_getInstanceVariable&lt;&#x2F;code&gt;, &lt;code&gt;class_getMethodImplementation&lt;&#x2F;code&gt;和&lt;code&gt;class_getProperty&lt;&#x2F;code&gt;返回单个内容。&lt;&#x2F;p&gt;
&lt;p&gt;也有一些通用的自省方法，如&lt;code&gt;class_conformsToProtocol&lt;&#x2F;code&gt;, &lt;code&gt;class_respondsToSelector&lt;&#x2F;code&gt;, &lt;code&gt;class_getSuperclass&lt;&#x2F;code&gt;。最后，你可以使用&lt;code&gt;class_createInstance&lt;&#x2F;code&gt;来创建一个 object。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ivar&quot;&gt;ivar&lt;&#x2F;h4&gt;
&lt;p&gt;这些方法能让你得到名字，内存地址和 Objective-C type encoding。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;method&quot;&gt;method&lt;&#x2F;h4&gt;
&lt;p&gt;这些方法主要用来自省，比如&lt;code&gt;method_getName&lt;&#x2F;code&gt;, &lt;code&gt;method_getImplementation&lt;&#x2F;code&gt;, &lt;code&gt;method_getReturnType&lt;&#x2F;code&gt;等等。也有一些修改的方法，包括&lt;code&gt;method_setImplementation&lt;&#x2F;code&gt;和&lt;code&gt;method_exchangeImplementations&lt;&#x2F;code&gt;，这些我们后面会讲到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;objc&quot;&gt;objc&lt;&#x2F;h4&gt;
&lt;p&gt;一旦拿到了 object，你就可以对它做一些自省和修改。你可以 get&#x2F;set ivar, 使用&lt;code&gt;object_copy&lt;&#x2F;code&gt;和&lt;code&gt;object_dispose&lt;&#x2F;code&gt;来 copy 和 free object 的内存。最 NB 的不仅是拿到一个 class，而是可以使用&lt;code&gt;object_setClass&lt;&#x2F;code&gt;来改变一个 object 的 class。待会就能看到使用场景。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;property&quot;&gt;property&lt;&#x2F;h4&gt;
&lt;p&gt;属性保存了很大一部分信息。除了拿到名字，你还可以使用&lt;code&gt;property_getAttributes&lt;&#x2F;code&gt;来发现 property 的更多信息，如返回值、是否为 atomic、getter&#x2F;setter 名字、是否为 dynamic、背后使用的 ivar 名字、是否为弱引用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;protocol&quot;&gt;protocol&lt;&#x2F;h4&gt;
&lt;p&gt;Protocols 有点像 classes，但是精简版的，运行时的方法是一样的。你可以获取 method, property, protocol 列表, 检查是否实现了其他的 protocol。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sel&quot;&gt;sel&lt;&#x2F;h4&gt;
&lt;p&gt;最后我们有一些方法可以处理 selectors，比如获取名字，注册一个 selector 等等。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们对 Objective-C 的运行时有了大概的了解，来看看它们能做哪些有趣的事情。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classes-and-selectors-from-strings&quot;&gt;Classes And Selectors From Strings&lt;&#x2F;h2&gt;
&lt;p&gt;比较基础的一个动态特性是通过 String 来生成 Classes 和 Selectors。Cocoa 提供了&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt;和&lt;code&gt;NSSelectorFromString&lt;&#x2F;code&gt;方法，使用起来很简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; stringclass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSClassFromString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;NSString&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;于是我们就得到了一个 string class。接下来：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;myString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[stringclass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithString:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Hello World&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为什么要这么做呢？直接使用 Class 不是更方便？通常情况下是，但有些场景下这个方法会很有用。首先，可以得知是否存在某个 class，&lt;code&gt;NSClassFromString&lt;&#x2F;code&gt; 会返回 nil，如果运行时不存在该 class 的话。比如可以检查&lt;code&gt;NSClassFromString(@&amp;quot;NSRegularExpression&amp;quot;)&lt;&#x2F;code&gt;是否为 nil 来判断是否为 iOS4.0+。&lt;&#x2F;p&gt;
&lt;p&gt;另一个使用场景是根据不同的输入返回不同的 class 或 method。比如你在解析一些数据，每个数据项都有要解析的字符串以及自身的类型（String，Number，Array）。你可以在一个方法里搞定这些，也可以使用多个方法。其中一个方法是获取 type，然后使用 if 来调用匹配的方法。另一种是根据 type 来生成一个 selector，然后调用之。以下是两种实现方式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)object {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data in object) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;String&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseString:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseNumber:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;([[data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;] isEqualToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Array&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseArray:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseObjectDynamic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)object {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;data in object) {
&lt;&#x2F;span&gt;&lt;span&gt;    	[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;performSelector:NSSelectorFromString([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;stringWithFormat:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;parse&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, [data type]]) withObject:[data value]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aString {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aNumber {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)parseArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aArray {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可一看到，你可以把 7 行带 if 的代码变成 1 行。将来如果有新的类型，只需增加实现方法即可，而不用再去添加新的 else if。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;method-swizzling&quot;&gt;Method Swizzling&lt;&#x2F;h2&gt;
&lt;p&gt;之前我们讲过，方法由两个部分组成。Selector 相当于一个方法的 id；IMP 是方法的实现。这样分开的一个便利之处是 selector 和 IMP 之间的对应关系可以被改变。比如一个 IMP 可以有多个 selectors 指向它。&lt;&#x2F;p&gt;
&lt;p&gt;而 Method Swizzling 可以交换两个方法的实现。或许你会问“什么情况下会需要这个呢？”。我们先来看下 Objective-C 中，两种扩展 class 的途径。首先是 subclassing。你可以重写某个方法，调用父类的实现，这也意味着你必须使用这个 subclass 的实例，但如果继承了某个 Cocoa class，而 Cocoa 又返回了原先的 class(比如 NSArray)。这种情况下，你会想添加一个方法到 NSArray，也就是使用 Category。99%的情况下这是 OK 的，但如果你重写了某个方法，就没有机会再调用原先的实现了。&lt;&#x2F;p&gt;
&lt;p&gt;Method Swizzling 可以搞定这个问题。你可以重写某个方法而不用继承，同时还可以调用原先的实现。通常的做法是在 category 中添加一个方法(当然也可以是一个全新的 class)。可以通过&lt;code&gt;method_exchangeImplementations&lt;&#x2F;code&gt;这个运行时方法来交换实现。来看一个 demo，这个 demo 演示了如何重写&lt;code&gt;addObject:&lt;&#x2F;code&gt;方法来纪录每一个新添加的对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#import  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;objc&#x2F;runtime.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;NSMutableArray (LoggingAddObject)
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;aObject&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;NSMutableArray (LoggingAddObject)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Method addobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(addObject:))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Method logAddobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_getInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(logAddObject:))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;method_exchangeImplementations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(addObject, logAddObject)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;aobject &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;logAddObject:aObject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Added object &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; to array &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, aObject, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们把方法交换放到了&lt;code&gt;load&lt;&#x2F;code&gt;中，这个方法只会被调用一次，而且是运行时载入。如果指向临时用一下，可以放到别的地方。注意到一个很明显的递归调用&lt;code&gt;logAddObject:&lt;&#x2F;code&gt;。这也是 Method Swizzling 容易把我们搞混的地方，因为我们已经交换了方法的实现，所以其实调用的是&lt;code&gt;addObject:&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;pilky.me&#x2F;static&#x2F;blogmedia&#x2F;objcdynamictips_methodswizzling.png&quot; alt=&quot;Method Swizzling&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dong-tai-ji-cheng-jiao-huan&quot;&gt;动态继承、交换&lt;&#x2F;h2&gt;
&lt;p&gt;我们可以在运行时创建新的 class，这个特性用得不多，但其实它还是很强大的。你能通过它创建新的子类，并添加新的方法。&lt;&#x2F;p&gt;
&lt;p&gt;但这样的一个子类有什么用呢？别忘了 Objective-C 的一个关键点：object 内部有一个叫做&lt;code&gt;isa&lt;&#x2F;code&gt;的变量指向它的 class。这个变量可以被改变，而不需要重新创建。然后就可以添加新的 ivar 和方法了。可以通过以下命令来修改一个 object 的 class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;object_setClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(myObject, [MySubclass class])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这可以用在 Key Value Observing。当你开始 observing an object 时，Cocoa 会创建这个 object 的 class 的 subclass，然后将这个 object 的 isa 指向新创建的 subclass。点击&lt;a href=&quot;http:&#x2F;&#x2F;www.mikeash.com&#x2F;pyblog&#x2F;friday-qa-2009-01-23.html&quot;&gt;这里&lt;&#x2F;a&gt;查看更详细的解释。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dong-tai-fang-fa-chu-li&quot;&gt;动态方法处理&lt;&#x2F;h2&gt;
&lt;p&gt;目前为止，我们讨论了方法交换，以及已有方法的处理。那么当你发送了一个 object 无法处理的消息时会发生什么呢？很明显，&amp;quot;it breaks&amp;quot;。大多数情况下确实如此，但 Cocoa 和 runtime 也提供了一些应对方法。&lt;&#x2F;p&gt;
&lt;p&gt;首先是&lt;strong&gt;动态方法处理&lt;&#x2F;strong&gt;。通常来说，处理一个方法，运行时寻找匹配的 selector 然后执行之。有时，你只想在运行时才创建某个方法，比如有些信息只有在运行时才能得到。要实现这个效果，你需要重写&lt;code&gt;+resolveInstanceMethod:&lt;&#x2F;code&gt; 和&#x2F;或 &lt;code&gt;+resolveClassMethod:&lt;&#x2F;code&gt;。如果确实增加了一个方法，记得返回 YES。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt;)resolveInstanceMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SEL&lt;&#x2F;span&gt;&lt;span&gt;)aSelector {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(aSelector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myDynamicMethod&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_addMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, aSelector, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)myDynamicIMP, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;v@:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;super &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resolveInstanceMethod:aSelector&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那 Cocoa 在什么场景下会使用这些方法呢？Core Data 用得很多。NSManagedObjects 有许多在运行时添加的属性用来处理 get&#x2F;set 属性和关系。那如果 Model 在运行时被改变了呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-xi-zhuan-fa&quot;&gt;消息转发&lt;&#x2F;h2&gt;
&lt;p&gt;如果 resolve method 返回 NO，运行时就进入下一步骤：消息转发。有两种常见用例。1) 将消息转发到另一个可以处理该消息的 object。2) 将多个消息转发到同一个方法。&lt;&#x2F;p&gt;
&lt;p&gt;消息转发分两步。首先，运行时调用&lt;code&gt;-forwardingTargetForSelector:&lt;&#x2F;code&gt;，如果只是想把消息发送到另一个 object，那么就使用这个方法，因为更高效。如果想要修改消息，那么就要使用&lt;code&gt;-forwardInvocation:&lt;&#x2F;code&gt;，运行时将消息打包成 NSInvocation，然后返回给你处理。处理完之后，调用&lt;code&gt;invokeWithTarget:&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;Cocoa 有几处地方用到了消息转发，主要的两个地方是代理(Proxies)和响应链(Responder Chain)。NSProxy 是一个轻量级的 class，它的作用就是转发消息到另一个 object。如果想要惰性加载 object 的某个属性会很有用。NSUndoManager 也有用到，不过是截取消息，之后再执行，而不是转发到其他的地方。&lt;&#x2F;p&gt;
&lt;p&gt;响应链是关于 Cocoa 如何处理与发送事件与行为到对应的对象。比如说，使用 Cmd+C 执行了 copy 命令，会发送&lt;code&gt;-copy:&lt;&#x2F;code&gt;到响应链。首先是 First Responder，通常是当前的 UI。如果没有处理该消息，则转发到下一个&lt;code&gt;-nextResponder&lt;&#x2F;code&gt;。这么一直下去直到找到能够处理该消息的 object，或者没有找到，报错。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-block-zuo-wei-method-imp&quot;&gt;使用 Block 作为 Method IMP&lt;&#x2F;h2&gt;
&lt;p&gt;iOS 4.3 带来了很多新的 runtime 方法。除了对 properties 和 protocols 的加强，还带来一组新的以 imp 开头的方法。通常一个 IMP 是一个指向方法实现的指针，头两个参数为 object(self)和 selector(_cmd)。iOS 4.0 和 Mac OS X 10.6 带来了 block，&lt;code&gt;imp_implementationWithBlock()&lt;&#x2F;code&gt; 能让我们使用 block 作为 IMP，下面这个代码片段展示了如何使用 block 来添加新的方法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;IMP&lt;&#x2F;span&gt;&lt;span&gt; myIMP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;imp_implementationWithBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_self, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;string) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, string);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;class_addMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;([MYclass class], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(sayHello:), myIMP, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;v@:@&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果想知道这是如何实现的，可以查看&lt;a href=&quot;http:&#x2F;&#x2F;www.friday.com&#x2F;bbum&#x2F;2011&#x2F;03&#x2F;17&#x2F;ios-4-3-imp_implementationwithblock&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，Objective-C 表面看起来挺简单，但还是很灵活的，可以带来很多可能性。动态语言的优势在于在不扩展语言本身的情况下做很多很灵巧的事情。比如 Key Value Observing，提供了优雅的 API 可以与已有的代码无缝结合，而不需要新增语言级别的特性。&lt;&#x2F;p&gt;
&lt;p&gt;希望这篇文章能让你更深入地了解 Objective-C，在开发 app 时也能开阔思路，考虑更多的可能性。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>ReactiveCocoa与Functional Reactive Programming</title>
            <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/frp-reactivecocoa/</link>
            <guid>https://limboy.me/posts/frp-reactivecocoa/</guid>
            <description>&lt;h2 id=&quot;shi-yao-shi-functional-reactive-programming&quot;&gt;什么是 Functional Reactive Programming&lt;&#x2F;h2&gt;
&lt;p&gt;Functional Reactive Programming(以下简称 FRP)是一种响应变化的编程范式。先来看一小段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; c is 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; now what is the value of c?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果使用 FRP，&lt;code&gt;c&lt;&#x2F;code&gt;的值将会随着&lt;code&gt;b&lt;&#x2F;code&gt;的值改变而改变，所以叫做「响应式编程」。比较直观的例子就是 Excel，当改变某一个单元格的内容时，该单元格相关的计算结果也会随之改变。&lt;&#x2F;p&gt;
&lt;p&gt;FRP 提供了一种信号机制来实现这样的效果，通过信号来记录值的变化。信号可以被叠加、分割或合并。通过对信号的组合，就不需要去监听某个值或事件。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_demo.png&quot;
        width=&quot;706&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这在重交互的应用里是非常有用的。以注册为例：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_register_demo.png&quot;
        width=&quot;396&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;提交按钮的状态要跟输入框的状态绑定，比如必选的输入框没有填完时，提交按钮是灰色的，也就是不可点；如果提交按钮不可点，那么文字变成灰色，不然变成蓝色；如果正在提交，那么输入框的文字颜色变成灰色，且不可点，不然变成默认色且可点；如果注册成功就在状态栏显示成功信息，不然显示错误信息，等等。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到光是注册页就有这么多的联动，在 javascript 中可以采用事件监听来处理，iOS 中更多的是 delegate 模式，本质上都是事件的分发和响应。这种做法的缺点是不够直观，尤其在逻辑比较复杂的情况下。这也是为什么尽管 nodejs 很高效，但由于 javascript 的 callback style 和异步模式不符合正常的编程习惯，让很多人望而却步。&lt;&#x2F;p&gt;
&lt;p&gt;使用 FRP 主要有两个好处：直观和灵活。直观的代码容易编写、阅读和维护，灵活的特性便于应对变态的需求。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reactivecocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;&#x2F;a&gt;是 github 去年开源的一个项目，是在 iOS 平台上对 FRP 的实现。FRP 的核心是信号，信号在 ReactiveCocoa(以下简称 RAC)中是通过&lt;code&gt;RACSignal&lt;&#x2F;code&gt;来表示的，信号是数据流，可以被绑定和传递。&lt;&#x2F;p&gt;
&lt;p&gt;可以把信号想象成水龙头，只不过里面不是水，而是玻璃球(value)，直径跟水管的内径一样，这样就能保证玻璃球是依次排列，不会出现并排的情况(数据都是线性处理的，不会出现并发情况)。水龙头的开关默认是关的，除非有了接收方(subscriber)，才会打开。这样只要有新的玻璃球进来，就会自动传送给接收方。可以在水龙头上加一个过滤嘴(filter)，不符合的不让通过，也可以加一个改动装置，把球改变成符合自己的需求(map)。也可以把多个水龙头合并成一个新的水龙头(combineLatest:reduce:)，这样只要其中的一个水龙头有玻璃球出来，这个新合并的水龙头就会得到这个球。&lt;&#x2F;p&gt;
&lt;p&gt;下面通过一个简单的 demo 来演示这个模型。&lt;&#x2F;p&gt;
&lt;p&gt;假如对象的某个属性想绑定某个消息，可以使用&lt;code&gt;RAC&lt;&#x2F;code&gt;这个宏，相当于给玻璃球套了一个水龙头。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RAC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;submitButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, enabled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;combineLatest:@[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;usernameField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;passwordField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rac_textSignal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;] reduce:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;userName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;password) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @(userName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，如果用户名和密码框的长度都超过 6，提交按钮就 enable 了。反之，如果没符合要求，就会处于非开启状态。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到&lt;code&gt;usernameField&lt;&#x2F;code&gt;有了一个新的属性&lt;code&gt;rac_textSignal&lt;&#x2F;code&gt;，这是 RAC 在&lt;code&gt;UITextField&lt;&#x2F;code&gt;category 中添加的，直接用即可。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_combine.png&quot;
        width=&quot;407&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h2 id=&quot;rac-de-da-tong-yi&quot;&gt;RAC 的大统一&lt;&#x2F;h2&gt;
&lt;p&gt;RAC 统一了对 KVO、UI Event、Network request、Async work 的处理，因为它们本质上都是值的变化(Values over time)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kvo&quot;&gt;KVO&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 可以用来监测属性的改变，这点跟 KVO 很像，不过使用了 block，而不是&lt;code&gt;-observeValueForKeyPath:ofObject:change:context:&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACAble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;}];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用起来是不是比 KVO 舒服多了。比 KVO 更加强大的是信号可以被链起来(chain)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 只有当名字以&amp;#39;j&amp;#39;开头，才会被记录
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RACAble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[newName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hasPrefix:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;j&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;   }]
&lt;&#x2F;span&gt;&lt;span&gt;   subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;newName) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, newName);
&lt;&#x2F;span&gt;&lt;span&gt;   }];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ui-event&quot;&gt;UI Event&lt;&#x2F;h3&gt;
&lt;p&gt;RAC 还为系统 UI 提供了很多 category，来方便消息的创建和传递，比如按钮被点击或文本框有改动等等，上面的例子中&lt;code&gt;self.firstNameField.rac_textSignal&lt;&#x2F;code&gt;，在对应的文本框有改动时，会自动向数据流中添加新的数据，绑定该消息的其他消息就会收到新的数据，如果有 subscriber 的话，会自动触发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;network-request-async-work&quot;&gt;Network Request &amp;amp;&amp;amp; Async work&lt;&#x2F;h3&gt;
&lt;p&gt;这些可以通过自定义信号，也就是&lt;code&gt;RACSubject&lt;&#x2F;code&gt;(继承自&lt;code&gt;RACSignal&lt;&#x2F;code&gt;，可以理解为自由度更高的 signal)来搞定。比如一个异步网络操作，可以返回一个 subject，然后将这个 subject 绑定到一个 subscriber 或另一个信号。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)doTest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;doRequest&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribeNext:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;value){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        NSLog(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;value:&lt;&#x2F;span&gt;&lt;span&gt;%@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)doRequest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[RACSubject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 模拟2秒后得到请求内容
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 只触发1次
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 尽管subscribeNext什么也没做，但如果没有的话map是不会执行的
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; subscribeNext就是定义了一个接收体
&lt;&#x2F;span&gt;&lt;span&gt;    [[[[RACSignal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;interval:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the value is from url request
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;content fetched from web&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        [subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sendNext:value&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }] subscribeNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:^&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;_){}];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; subject;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;简单画了下关系图，罗列了些要点&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;frp-reactivecocoa&amp;#x2F;FRP_ReactiveCocoa_large.png&quot;
        width=&quot;1632&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面只是大概说了一下 RAC 的使用情景和用法，更多的例子可以到&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveCocoa&#x2F;ReactiveCocoa&quot;&gt;项目主页&lt;&#x2F;a&gt;中查看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.teehanlax.com&#x2F;blog&#x2F;getting-started-with-reactivecocoa&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.teehanlax.com&#x2F;blog&#x2F;getting-started-with-reactivecocoa&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;andrewsardone&#x2F;reactivecocoa-at-mobidevday-2013&quot;&gt;https:&#x2F;&#x2F;speakerdeck.com&#x2F;andrewsardone&#x2F;reactivecocoa-at-mobidevday-2013&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说iOS的多线程Core Data</title>
            <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-multi-thread-core-data/</link>
            <guid>https://limboy.me/posts/ios-multi-thread-core-data/</guid>
            <description>&lt;p&gt;Core Data 是 iOS 中很重要的一个部分，可以理解为基于 SQLite(当然也可以是其他的 Storage，如 In-memory，只是 SQLite 比较常见)的一个 ORM 实现，所以有关系数据库的特性，又不用写 SQL。顺便吐一下槽，官方说法是使用 Core Data 能减少 50%-70%的代码量，但相信用过的人应该都心里明白，Core Data 使用起来还是比较麻烦的，这也是为什么有不少的第三方类库来代替&#x2F;二次包装 Core Data。&lt;&#x2F;p&gt;
&lt;p&gt;稍微复杂的应用就有可能出现同时处理多份数据的情况，这就需要用到多线程 Core Data。在 iOS 5 之前，官方推荐的是使用「Thread Confinement」，就是每个线程使用独立的 MOC(managed object context)，然后共享一个 PSC(persistent store coordinator)。同时在线程之间传递数据时，要传递 objectID，而不是 object，因为前者是线程安全的，后者不是。&lt;&#x2F;p&gt;
&lt;p&gt;如果 A 线程里，对 PSC 执行了 CUD(create, update, delete)操作，其他线程如何感知呢？这就需要通过监听事件来实现。比如在线程 A 中监听「NSManagedObjectContextDidSaveNotification」事件，如果线程 B 中执行了 CUD 操作，线程 A 就能感知到，并触发响应的 action，虽然可以通过 noti userinfo 来获取 managed objects，但因为它们是关联到另一个 MOC，所以无法直接操作它们，解决方法就是调用「mergeChangesFromContextDidSaveNotification:」方法。&lt;&#x2F;p&gt;
&lt;p&gt;用一张图来形容的话，大体就是这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data.png&quot;
        width=&quot;510&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_setupCoreDataStack
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup managed object model
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;modelURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mainBundle&lt;&#x2F;span&gt;&lt;span&gt;] URLForResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; withExtension&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;momd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithContentsOfURL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;modelURL];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; setup persistent store coordinator
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;storeURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fileURLWithPath:[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cachesPath] stringByAppendingPathComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Database.db&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     _persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSPersistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithManagedObjectModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;_managedObjectModel];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[_persistentStoreCoordinator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addPersistentStoreWithType:NSSQLiteStoreType configuration:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;URL:storeURL options:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;amp;error&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;   	     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; handle error
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create MOC
&lt;&#x2F;span&gt;&lt;span&gt;     _managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] init];
&lt;&#x2F;span&gt;&lt;span&gt;     [_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setPersistentStoreCoordinator:_persistentStoreCoordinator&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; subscribe to change notifications
&lt;&#x2F;span&gt;&lt;span&gt;     [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSNotificationCenter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;defaultCenter&lt;&#x2F;span&gt;&lt;span&gt;] addObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; selector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@selector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_mocDidSaveNotification:&lt;&#x2F;span&gt;&lt;span&gt;) name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSManagedObjectContextDidSaveNotification object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来看看 Notification Handler，主要作用就是合并新的变化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)_mocDidSaveNotification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NSNotification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)notification
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;savedContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[notification &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ignore change notifications for the main MOC
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(_managedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; savedContext) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dispatch_get_main_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      [_managedObjectContext mergeChangesFromContextDidSaveNotification:notification];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式实现起来和维护起来都有点麻烦，所以 iOS 5 中就出现了更加方便和灵活的实现，也就是「Nested MOC」。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;[[NSManagedObjectContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;] initWithConcurrencyType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;NSMainQueueConcurrencyType];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在初始化时可以选择 ConcurrencyType，可选的有 3 个：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsconfinementconcurrencytype&quot;&gt;NSConfinementConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;这个是默认项，每个线程一个独立的 Context，主要是为了兼容之前的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsprivatequeueconcurrencytype&quot;&gt;NSPrivateQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 private queue(使用 GCD)，这样就不会阻塞主线程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsmainqueueconcurrencytype&quot;&gt;NSMainQueueConcurrencyType&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个 main queue，使用主线程，会阻塞。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个重要的变化是 MOC 可以指定 parent。有了 parent 后，CUD 操作会冒泡到 parent。一个 parent 可以有多个 child。parent 还可以有 parent。&lt;&#x2F;p&gt;
&lt;p&gt;因为 UI 相关的数据必须在主线程获取，同时又要避免数据库的 I&#x2F;O 操作阻塞主线程，所以就有了下面这个模型：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-multi-thread-core-data&amp;#x2F;multi_thread_core_data_nested.png&quot;
        width=&quot;511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我对这种实现方式的一个困惑是：child 无法得知 parent 的变化，也就是说，如果 NSFetchedResultsController 绑定了 Main MOC，当 Background Write MOC save 时，NSFetchedResultsController 为何能知晓？求指点。&lt;&#x2F;p&gt;
&lt;p&gt;这种方式比「Thread Confinement」稍微简单了点，也更明了。不过个人还是推荐使用 MagicalRecord，因为实现起来更加简单，等有空再写一篇。&lt;&#x2F;p&gt;
&lt;p&gt;写了一个使用了这个模型的 demo，配合 TableView 和 NSFetchedResultsController，有兴趣的可以看下：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;coredata-with-tableview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2013-06-17-geng-xin&quot;&gt;2013&#x2F;06&#x2F;17 更新&lt;&#x2F;h3&gt;
&lt;p&gt;之前的困惑已消除，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;跟 PSC 无关，只要绑定的 MOC 有了&lt;code&gt;save&lt;&#x2F;code&gt;动作，&lt;code&gt;NSFetchedResultsController&lt;&#x2F;code&gt;就会收到通知，无论这个&lt;code&gt;save&lt;&#x2F;code&gt;操作有没有写入到持久层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.cocoanetics.com&#x2F;2012&#x2F;07&#x2F;multi-context-coredata&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&quot;&gt;http:&#x2F;&#x2F;www.slideshare.net&#x2F;Inferis&#x2F;adventures-in-multithreaded-core-data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>简单说说iOS的图形和动画</title>
            <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ios-graphic-animation/</link>
            <guid>https://limboy.me/posts/ios-graphic-animation/</guid>
            <description>&lt;h3 id=&quot;core-graphics&quot;&gt;Core Graphics&lt;&#x2F;h3&gt;
&lt;p&gt;Core Graphics 是一组用来绘制 2D 图形的 API，使用 CPU 进行计算。 新建一个项目时，模板已经自动载入了 CoreGraphics.framwork。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-animation&quot;&gt;Core Animation&lt;&#x2F;h3&gt;
&lt;p&gt;Core Animation 包含于 QuartzCore.framwork 中，是一组自由度更大的图形绘制和动画 API，但实现起来也会比 Core Graphics 麻烦一点。iOS 上的 UIKit 和动画效果大部分都是通过 Core Animation 实现的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-image&quot;&gt;Core Image&lt;&#x2F;h3&gt;
&lt;p&gt;Core Image 是一组用于图像、视频处理的 API，如添加滤镜之类的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;opengl-opengl-es&quot;&gt;OpenGL &#x2F; OpenGL ES&lt;&#x2F;h3&gt;
&lt;p&gt;底层的图形绘制 API，自由度最大，但学习成本也很高。如果不是做大型游戏，推荐使用更高层的 API。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-jian-jia-su&quot;&gt;硬件加速&lt;&#x2F;h3&gt;
&lt;p&gt;硬件加速是指用到了 GPU 的 API，以下这些情况不会用到硬件加速&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有在 drawRect 中完成的图形绘制。&lt;&#x2F;li&gt;
&lt;li&gt;shouldRasterize 属性为 YES 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;用到了 mask 或 drop shadow 的 CALayer。&lt;&#x2F;li&gt;
&lt;li&gt;Text (包括 UILabels, CATextLayers, Core Text, 等等)。&lt;&#x2F;li&gt;
&lt;li&gt;使用 CGContexts 绘制的图形&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;core-animation-1&quot;&gt;Core Animation&lt;&#x2F;h2&gt;
&lt;p&gt;虽然是 Animation，但实际上它也干 Drawing 的活，这就需要 CALayer 的帮助。iOS 中，所有的 UIView 都自带了一个 CALayer（可以通过 UIView.layer 访问），UIView 的渲染和动画最终也是通过 layer 来实现的。从这个意义上说，UIView 就是简单的一层壳，把图形绘制需要的信息传递给 layer。当然 UIView 还有一个重要的功能就是处理事件，如点击按钮，滑动等等。&lt;&#x2F;p&gt;
&lt;p&gt;事实上 layer 也是一层壳(Model Tree)，背后还有呈现树(Presenting Tree)和渲染树(Render Tree)，渲染树对呈现树的数据进行渲染。&lt;&#x2F;p&gt;
&lt;p&gt;跟 view 一样，layer 也存在着一个树状结构。可以直接创建，或通过 view.layer 获取。&lt;&#x2F;p&gt;
&lt;p&gt;layer 有很多的动画属性，如 anchorPoint(view 没有这个属性)、frame、transform 等等，详细的属性列表&lt;a href=&quot;http:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;ios&#x2F;#documentation&#x2F;Cocoa&#x2F;Conceptual&#x2F;CoreAnimation_guide&#x2F;AnimatableProperties&#x2F;AnimatableProperties.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40004514-CH11-SW1&quot;&gt;见此&lt;&#x2F;a&gt;。配合 Core Animation 的 API 可以实现很多 UIView Animation 无法实现的效果，比如 3D 动画。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uiview-animation&quot;&gt;UIView Animation&lt;&#x2F;h2&gt;
&lt;p&gt;这个是我们经常会用到的，它对 Core Animation 做了更高层的封装，方便使用，当然自由度也降低了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)animateWithDuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)duration delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSTimeInterval&lt;&#x2F;span&gt;&lt;span&gt;)delay options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(UIViewAnimationOptions)options animations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;))animations completion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BOOL&lt;&#x2F;span&gt;&lt;span&gt; finished))completion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;animation block 里可以设置 view 的动画属性的终止值，如 frame, rotation 等。options 可以设置动画的相关选项，如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionLayoutSubviews            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowUserInteraction      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionBeginFromCurrentState     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionRepeat                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAutoreverse               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionOverrideInheritedCurve    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionAllowAnimatedContent      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionShowHideTransitionViews   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseInOut            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseIn               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveEaseOut              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionCurveLinear               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionNone            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromLeft    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromRight   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlUp          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCurlDown        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionCrossDissolve   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromTop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    UIViewAnimationOptionTransitionFlipFromBottom  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSUInteger &lt;&#x2F;span&gt;&lt;span&gt;UIViewAnimationOptions;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以一般的动画 view animation 都可以应付。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tableview-you-hua&quot;&gt;TableView 优化&lt;&#x2F;h2&gt;
&lt;p&gt;TableView 是 iOS 中非常重要的组成部分，如果处理不当，就很容易出现不流畅的现象。比如一个 TableViewCell 中有多个 subview。上面说过一个 view 对应了一个 layer，多个 view 自然也就对应多个 layer，好比 photoshop 的图层。滑动时 GPU 需要分别对每一个 layer 进行处理，如果不能在短时间内完成，就容易掉帧。&lt;&#x2F;p&gt;
&lt;p&gt;要保证 TableView 的流畅，首先 TableViewCell 的生成时间要短（少于 1&#x2F;60 秒），其次移动时帧频尽量保持在 60（也就是每秒 60 帧）。前者取决于 CPU，后者取决于 GPU。&lt;&#x2F;p&gt;
&lt;p&gt;以 twitter 为例，可以通过 subviews 来实现，不过性能会有点影响，但实现起来简单。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_subviews.jpg&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为 cell 在形态上不会经常改变，所以也可以通过 drawRect 直接绘制，只要这个时间足够短就可以。好处是 layer 不用处理多个子 layer 的组合和叠加，就像一张 jpg 图片一样，滑动会更流畅。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;ios-graphic-animation&amp;#x2F;twitter_tvc_drawrect.png&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&quot;&gt;http:&#x2F;&#x2F;geeklu.com&#x2F;2012&#x2F;09&#x2F;animation-in-ios&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&quot;&gt;http:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;post&#x2F;33427366406&#x2F;designing-for-ios-taming-uibutton&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&quot;&gt;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=4645585&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&quot;&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;6731545&#x2F;94962&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&quot;&gt;http:&#x2F;&#x2F;giorgiocalderolla.com&#x2F;blog.html#customizing-uitableviewcells-a-better-way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&quot;&gt;https:&#x2F;&#x2F;blog.twitter.com&#x2F;2012&#x2F;simple-strategies-smooth-animation-iphone&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;floriankugler.com&#x2F;blog&#x2F;2013&#x2F;5&#x2F;24&#x2F;layer-trees-vs-flat-drawing-graphics-performance-across-ios-device-generations&quot;&gt;layer trees vs flat drawing graphics performance across ios device generations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说Core Foundation</title>
            <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/core-foundation/</link>
            <guid>https://limboy.me/posts/core-foundation/</guid>
            <description>&lt;p&gt;先来说说「Core Foundation」（以下简称 CF）的历史吧。当年乔布斯被自己创办的公司驱逐后，成立了「NeXT Computer」,其实做的还是老本行：卖电脑，但依旧不景气。好在 NeXTSTEP 系统表现还不错，亏损不至于太严重。正好此时苹果的市场份额大跌，急需一个新的操作系统，结果大家都知道了，乔布斯借此收购，重新回到了苹果。&lt;&#x2F;p&gt;
&lt;p&gt;这里就牵扯到了一个问题，如何让旧有的系统（Mac OS 9）和 NeXTSTEP 合成为一个新系统？这就需要一个更为底层的核心库可以供 Mac Toolbox 和 OPENSTEP 双方调用。CF 就这么诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;CF 是由 C 语言实现的，而不是 Objective-C，所以如果用到了 CF，就需要手动管理内存，ARC 是无能为力的。当然因为 CF 和 Foundation 之间的友好关系，它们之间的管理权也是可以移交的，这个后面再说。&lt;&#x2F;p&gt;
&lt;p&gt;CF 提供了基础功能，如 CFString,CFDate,CFNumber 等等，以 CFString 为例，CFString 和 NSString 之间是什么关系？NSString 其实是一个「类簇」，也就是抽象接口，所以 String Objects 并不是 NSString 实例，而是实现了 NSString 方法的私有类的实例，也就是 CFString。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSLog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;NSStringFromClass&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;@&amp;quot;Some Class&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; class]));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# output __NSCFConstantString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时 NSStrings 和 CFStrings 之间可以自由转换，也就是「toll free bridging」。比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(CFStringRef)aNSString;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为编译器无法自动管理 CF 的内存，所以 CF 对象在使用完后，需要手动释放（CFRelease）。如果使用 ARC 来管理内存，苹果提供了 3 种方法来处理：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge&quot;&gt;__bridge&lt;&#x2F;h3&gt;
&lt;p&gt;__bridge 只是在 CF 和 OC 之间传递指针，其他的事啥也没干，所以转换成 CF 时，还是要手动释放内存。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span&gt;CFStringRef aCFString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFStringCreateWithCString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kCFStringEncodingASCII&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;aNSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(__bridge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NSString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)aCFString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)aNSString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CFRelease&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(aCFString)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bridge-retained&quot;&gt;__bridge_retained&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_retained&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRetain()&lt;&#x2F;code&gt;，将 Objective-C 对象转换为 Core Foundation 对象，把对象所有权桥接给 Core Foundation 对象，同时剥夺 ARC 的管理权，后续需要开发者使用 CFRelease 或者相关方法手动来释放对象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge-transfer&quot;&gt;__bridge_transfer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__bridge_transfer&lt;&#x2F;code&gt; 或者 &lt;code&gt;CFBridgingRelease()&lt;&#x2F;code&gt; 将非 Objective-C 对象转换为 Objective-C 对象，同时将对象的管理权交给 ARC，开发者无需手动管理内存。&lt;&#x2F;p&gt;
&lt;p&gt;最后，因为 CF 是用 C 实现的，且处于下层，所以执行速度上会比 Foundation 稍微快一点，不过也就是一点点，几乎察觉不到。相比 Foundation 带来的 ARC 内存管理和更多的 API，开发上的效率会大幅提升，所以还是尽量多的使用 OC。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&quot;&gt;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;bridge.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&quot;&gt;http:&#x2F;&#x2F;blog.csdn.net&#x2F;yiyaaixuexi&#x2F;article&#x2F;details&#x2F;8553659&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>写了个基于SQLAlchemy的ORM</title>
            <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/introduce-thing-an-sqlalchemy-based-orm/</link>
            <guid>https://limboy.me/posts/introduce-thing-an-sqlalchemy-based-orm/</guid>
            <description>&lt;p&gt;看 Rails 时，觉得 Rails 的 ORM 用起来好方便，就想找找 python 有没有类似的，没发现太尽如人意的，就按照自己的意愿，基于 SQLAlchemy Core 重新写了个，取名为 Thing，项目主页: &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;thing&amp;quot;:https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;thing&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-yao-te-xing&quot;&gt;主要特性&lt;&#x2F;h3&gt;
&lt;h1 id=&quot;shi-yong-fang-bian-ling-huo&quot;&gt;使用方便，灵活&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-yan-zheng&quot;&gt;支持验证&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-shi-jian-hong-fa&quot;&gt;支持事件触发&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;zhi-chi-duo-shu-ju-ku-lian-jie&quot;&gt;支持多数据库连接&lt;&#x2F;h1&gt;
&lt;p&gt;不想把 ORM 做得太 magic，将来优化起来会不太方便，所以只是简单地封装了下，既保证了使用起来比较方便，将来涉及到分库分表或缓存时也可以从容应付。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h3&gt;
&lt;p&gt;推荐使用 virtualenvwrapper&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;mkvirtualenv thing
&lt;&#x2F;span&gt;&lt;span&gt;cdvirtualenv
&lt;&#x2F;span&gt;&lt;span&gt;pip install &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;git+git:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;thing.git&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chuang-jian-mo-xing&quot;&gt;创建模型&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个继承 Thing 的基类，主要是设置数据库连接&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sqlalchemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;create_engine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;thing
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;master_engine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;create_engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:&#x2F;&#x2F;root:123456@localhost:3306&#x2F;test&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;slave_engine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;create_engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:&#x2F;&#x2F;root:123456@localhost:3307&#x2F;test&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;thing.Thing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;thing.Thing.__init__(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;master&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: master_engine,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;slave&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: slave_engine})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;h5. 注意事项：&lt;&#x2F;p&gt;
&lt;h1 id=&quot;suo-you-de-mo-xing-lei-du-yao-ji-cheng-basething&quot;&gt;所有的模型类都要继承 BaseThing&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;ru-guo-mei-you-zai-zi-lei-li-ding-yi-tablename-ze-mo-ren-shi-yong-xiao-xie-de-zi-lei-ming-zuo-wei-biao-ming&quot;&gt;如果没有在子类里定义_tablename，则默认使用小写的子类名作为表名&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;biao-zi-duan-hui-bei-zi-dong-huo-qu&quot;&gt;表字段会被自动获取&lt;&#x2F;h1&gt;
&lt;p&gt;假设有这么个场景：一个用户有多个答案，每个答案可以被多人投票。我们可以新建 3 个 Model&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;thing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sqlalchemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;create_engine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;formencode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;validators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;blinker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;signal
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vote_before_insert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;vote.before_insert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 验证email字段
&lt;&#x2F;span&gt;&lt;span&gt;    email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validators.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;noAt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;invalid email&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;answers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;member_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;votes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Vote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;answer_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @vote_before_insert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_vote_before_insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;vote&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;vote.answer.title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            vote.errors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;answer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;signal test&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vote&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;BaseThing&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.member_id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;answer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Answer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.answer_id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用户与答案是一对多的关系，这里通过@property 装饰器来实现，在 answers 方法内，可以很灵活地实现答案获取的方法。&lt;&#x2F;p&gt;
&lt;p&gt;在 Answer 模型里有一个 vote_before_insert 装饰器，在 vote 执行 insert 操作前_vote_before_insert 方法会被触发，可以在这里做很多事，如缓存的处理，数据的验证等等。如果验证不通过，可以设置 sender 的 errors 属性，该属性一旦被设置，后续的操作将被中断，在这里 vote 就不会执行 insert 操作。&lt;&#x2F;p&gt;
&lt;p&gt;h5. 注意事项：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;# 验证使用的是formencode，这个库支持很多的验证操作，&amp;quot;http:&#x2F;&#x2F;www.formencode.org&#x2F;en&#x2F;latest&#x2F;Validator.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 一共有6类事件：model.before_validation &#x2F; after_validation &#x2F; before_insert &#x2F; after_insert &#x2F; before_update &#x2F; after_update
&lt;&#x2F;span&gt;&lt;span&gt;# 事件触发时第一个参数为model本身，第二个参数为数据，如果在某个事件响应函数处，设置了model.errors属性，则此次事件之后的代码都不会执行。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;lie-chu-yi-ge-yong-hu-de-id-10-de-suo-you-hui-da-mei-ci-qu-10-ge&quot;&gt;列出一个用户的 id&amp;gt;10 的所有回答，每次取 10 个&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;answer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.answers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;answer.title
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;chuang-jian-xin-yong-hu&quot;&gt;创建新用户&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo@bar.com&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;member.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.saved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# foo@bar.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;geng-xin-yong-hu-xin-xi&quot;&gt;更新用户信息&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo@bar.com&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.saved &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# foo@bar.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;yan-zheng-xin-xi&quot;&gt;验证信息&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;member.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;member.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;member.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;member.errors[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;email&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# invalid email
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;duo-shu-ju-ku-lian-jie&quot;&gt;多数据库连接&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;member &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Member&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;slave&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在执行 find &#x2F; findall &#x2F; save 操作时，有一个 db_section 选项，如果忽略，则默认使用初始化时传入的 engide dict 的第一项，在这里就是 master，如果想选择其他的数据库，传入该数据库对应的 key 就行，比如 slave&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;# 查看某次插入或更新是否成功，可以检查errors属性，如果为空表示执行成功
&lt;&#x2F;span&gt;&lt;span&gt;# 如果model的key中包含主键，如id，则执行save时是一个更新操作，否则为插入
&lt;&#x2F;span&gt;&lt;span&gt;# 欢迎fork &#x2F; test &#x2F; feedback
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>python的简单MapReduce实现：计算π</title>
            <pubDate>Sat, 10 Sep 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/python-mapreduce-pi/</link>
            <guid>https://limboy.me/posts/python-mapreduce-pi/</guid>
            <description>&lt;p&gt;MapReduce 是 Google 提出的一个软件架构，一般用于大规模数据集的并行运算。核心概念就是&amp;quot;Map（映射）&amp;quot;和&amp;quot;Reduce（化简）&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;简单说来就是把一个任务分割成多个独立的子任务，子任务的分发由 map 实现，子任务计算结果的合并由 reduce 实现。&lt;&#x2F;p&gt;
&lt;p&gt;mapreduce 的应用场景多是那种互不依赖，上下文无关的任务。所以类似 Fibonacci 数列这种对输入有依赖的就不适合使用 mapreduce。&lt;&#x2F;p&gt;
&lt;p&gt;回到正题，要计算圆周率，我们先构建这么个模型&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;img&#x2F;inscribe.png&quot; &#x2F;&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 外面的正方形面积
&lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(2r)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(2r) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; 4r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 里面的圆的面积
&lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r)
&lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 4r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;As &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;Ac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;As
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是说只要算出圆的面积与正方形面积的比，就可以求出圆周率。&lt;&#x2F;p&gt;
&lt;p&gt;可以通过以下步骤计算 Ac &#x2F; As：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;随机在正方形里生成许多点&lt;&#x2F;li&gt;
&lt;li&gt;计算点在圆内与在正方形内的比例&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;测试的随机点越多，结果越精确&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#coding=utf-8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Process
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;MapReduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;map_func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;reduce_func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;workers_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.map_func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;map_func
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.reduce_func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reduce_func
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.workers_num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;workers_num
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;workers_num:
&lt;&#x2F;span&gt;&lt;span&gt;            workers_num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cpu_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Pool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(workers_num)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__call__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        map_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.pool.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.map_func, inputs)
&lt;&#x2F;span&gt;&lt;span&gt;        reduce_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;reduce_func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(map_result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;reduce_result
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;multiprocessing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;current_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.name,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; processing&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    points, circle_round &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(points)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 这里其实只取了1&#x2F;4圆
&lt;&#x2F;span&gt;&lt;span&gt;        x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;circle_round
&lt;&#x2F;span&gt;&lt;span&gt;        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;circle_round
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;circle_round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;points_in_circle
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count_circle_points&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;points_list&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sum(points_list)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;__main__&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 半径
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CIRCLE_ROUND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 总点数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10000000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 总进程数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    map_reduce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;MapReduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(calculator, count_circle_points, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    inputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CIRCLE_ROUND&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;WORKERS_NUM
&lt;&#x2F;span&gt;&lt;span&gt;    all_points_in_circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map_reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(inputs)
&lt;&#x2F;span&gt;&lt;span&gt;    ac_as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(all_points_in_circle)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POINTS
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;pi approach to:&lt;&#x2F;span&gt;&lt;span&gt;%7f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ac_as)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是比较简单的单机 mapreduce，用多进程就可以实现。如果是多机运算的话，就麻烦多了，类似这张图：&lt;&#x2F;p&gt;
&lt;img src=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;img&#x2F;mrfigure.png&quot; width=&#x27;700px&#x27;&#x2F;&gt;
&lt;p&gt;参考链接[2]有对这张图的解释&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;http:&#x2F;&#x2F;blog.doughellmann.com&#x2F;2009&#x2F;04&#x2F;implementing-mapreduce-with.html&quot;&gt;http:&#x2F;&#x2F;blog.doughellmann.com&#x2F;2009&#x2F;04&#x2F;implementing-mapreduce-with.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[2] &lt;a href=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;mapreduce-tutorial.html&quot;&gt;http:&#x2F;&#x2F;code.google.com&#x2F;edu&#x2F;parallel&#x2F;mapreduce-tutorial.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>小心PHP的类定义顺序与继承的问题</title>
            <pubDate>Wed, 15 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/be-careful-with-php-extends/</link>
            <guid>https://limboy.me/posts/be-careful-with-php-extends/</guid>
            <description>&lt;p&gt;以下代码的运行环境均为 PHP5.3.4&lt;&#x2F;p&gt;
&lt;p&gt;先来看一段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码很简单，也可以正常运行。看起来 PHP 的类定义与顺序无关。&lt;&#x2F;p&gt;
&lt;p&gt;再来看下面一段代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;猜猜结果会怎样？有点出乎意料，代码报 Fatal Error。&lt;&#x2F;p&gt;
&lt;p&gt;这就奇怪了，上一段代码也是在后面声明的类 B，正常。多了一层继承关系后，就报错了，错误信息是&amp;quot;Fatal Error: class &#x27;B&#x27; not found &amp;quot;。 这又不能理解了，为什么会说找不到类 B 呢。&lt;&#x2F;p&gt;
&lt;p&gt;再来尝试一下新的组合&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好了，又正常了。&lt;&#x2F;p&gt;
&lt;p&gt;再来尝试一下 namespace&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\B\B &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;B {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;\C\C&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;C {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果跟不是用 ns 是一样的。&lt;&#x2F;p&gt;
&lt;p&gt;这种时候，只能看看官方是怎么说的了 &lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;keyword.extends.php&quot;&gt;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;keyword.extends.php&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;bq. Classes must be defined before they are used! If you want the class Named_Cart to extend the class Cart, you will have to define the class Cart first. If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart first. To make it short: the order in which the classes are defined is important.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;说得很明确，类必须先定义后使用，哪怕是在一个文件里。但这又无法解释第一段代码为什么可以正常运行。所以基本可以认为这是一个 php 的 bug。&lt;&#x2F;p&gt;
&lt;p&gt;好在有 autoload 机制，这种情况完全可以避免。不过对那些想通过把许多类文件合并成一个来提高 PHP 运行效率的童鞋们来说，这就有点麻烦咯。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>缩进输出目录结构并计算文件&#x2F;文件夹大小</title>
            <pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/calc-tree/</link>
            <guid>https://limboy.me/posts/calc-tree/</guid>
            <description>&lt;p&gt;如果把这个命题分开来实现会方便点，比如缩进输出目录结构可以通过先序遍历实现，计算文件夹大小可以通过后续遍历实现，但结合到一块就稍微有点麻烦了。比如我们要得到如下的输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;LICENSE (1.040K)
&lt;&#x2F;span&gt;&lt;span&gt;README.md (0.951K)
&lt;&#x2F;span&gt;&lt;span&gt;UPDATE.ja.md (23.951K)
&lt;&#x2F;span&gt;&lt;span&gt;UPDATE.md (19.390K)
&lt;&#x2F;span&gt;&lt;span&gt;autoload.php.dist (0.875K)
&lt;&#x2F;span&gt;&lt;span&gt;check_cs (3.312K)
&lt;&#x2F;span&gt;&lt;span&gt;phpunit.xml.dist (1.160K)
&lt;&#x2F;span&gt;&lt;span&gt;src (8302.127K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;    Symfony (8302.127K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;        Bridge (84.567K) &#x2F;&#x2F; 文件夹
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我首先想到的方法是把文件&#x2F;文件夹的计算和输出分开来实现，不过这样效率不高，因为有些文件会被多次使用 filesize 方法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;glob(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filesize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$prefix&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 每次输出都计算一次，如果是文件夹的话，文件夹下的文件会被多次计算，浪费也就在此
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pad_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;opendir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pad_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file_or_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;readdir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;..&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				{
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;				}
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，假如 a&#x2F;b&#x2F;c.txt 这个文件，在获取 c.txt 文件大小时会计算 c.txt 一次，获取 b 文件夹大小时还会计算一次，获取 a 文件夹时仍然会计算一次。也就是说文件的重复计算次数跟目录深度成正比。&lt;&#x2F;p&gt;
&lt;p&gt;后来又想了一个方法可以避免重复计算，且占用不多的内存，自认为效率还算高。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$padding&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strrpos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;glob(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$f_pad&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个只用了一个函数，更短，更快。引用数组负责数据的存储，递归返回值负责文件的大小，为了减少内存的使用，在文件夹的 size 后面加了&amp;quot;&lt;em&gt;&amp;quot;来表示这是一个文件夹，输出时去掉&amp;quot;&lt;&#x2F;em&gt;&amp;quot;就行了。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有更好的想法，欢迎交流 :)&lt;&#x2F;p&gt;
&lt;p&gt;github 地址：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;cacl_tree&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;cacl_tree&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>一道面试题的思考</title>
            <pubDate>Fri, 03 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-xor-find-num/</link>
            <guid>https://limboy.me/posts/php-xor-find-num/</guid>
            <description>&lt;p&gt;前几天下班途中跟同事聊到了一道面试题，大意是，给你 1-1000 个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。&lt;&#x2F;p&gt;
&lt;p&gt;这题其实挺为面试者的，因为要求 1 分钟内说出解法，且不能使用计算机、纸和笔。如果之前没有遇到过类似的题目，加上面试时的紧张心情，很难能在那么短的时间里想到解决方案，至少我做不到。&lt;&#x2F;p&gt;
&lt;p&gt;好在我有时间，上网看了一下，比较常见的有两种方法&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qiu-fang-cheng-zu-de-jie&quot;&gt;求方程组的解&lt;&#x2F;h3&gt;
&lt;p&gt;遍历被打乱的数组时，计算 value 的累加值和 value 平方的累加值。结合未打乱之前的数组，这样就能得出 x+y = m 与 x&lt;em&gt;x+y&lt;&#x2F;em&gt;y = n 两个方程，解这组方程即可算出被去掉的两个数。这种方法比较容易理解，实现起来也比较简单&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-yi-huo&quot;&gt;使用异或&lt;&#x2F;h3&gt;
&lt;p&gt;这个就麻烦点了。先来说说异或的定义：两个二进制位不同的取 1。再来说说异或的两个特性：顺序无关 &#x2F; 对一个数异或两次等于没有异或。顺序无关就是说异或的元素可以随意交换顺序，而不会影响结果。异或两次可以理解为+x 和-x。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-suan-chu-x-y-de-zhi&quot;&gt;计算出 x^y 的值&lt;&#x2F;h4&gt;
&lt;p&gt;首先，这两个数组(打乱前和打乱后)各自异或，也就是 1^2^...^1000，得到两个异或值。再对这两个异或值进行一次异或，这样就得到了 x^y 的指(重复部分互相抵消了)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 其实就是把数组的所有元素进行异或，重复部分互相抵消
&lt;&#x2F;span&gt;&lt;span&gt;result = 1^2^...^1000^1^2...^1000;
&lt;&#x2F;span&gt;&lt;span&gt;result = 1^1^2^2...^x...^y...^1000^1000;
&lt;&#x2F;span&gt;&lt;span&gt;result = x^y;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;huo-qu-ji-suan-chu-de-yi-huo-zhi-de-1-suo-zai-de-wei-zhi-bing-ji-xu-yi-huo&quot;&gt;获取计算出的异或值的 1 所在的位置，并继续异或&lt;&#x2F;h4&gt;
&lt;p&gt;因为 x 和 y 是两个不同的整数，所以这两个数的异或结果，转化为二进制的话，一定在某位是 1，假设在第 3 位。也就是说如果把原始数组按第 3 位是否为 0 进行划分，就可以分成两个数组，每个数组各包含一个被抽取的数。如果打乱后的数组也按这个规则划分为两个数组，这样就得到了 4 个数组，其中两组是第 3 位为 0，另外两组是第 3 位为 1。把第 3 位为 0 的两个数组所有元素进行异或就能得到被抽取的一个数，同理也就能获得另外一个被抽取的数，于是问题解决。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;php-de-shi-xian&quot;&gt;PHP 的实现&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 起始长度
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 将要被移除的两个数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 两个数组异或再互相异或的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 存放被pos分割的数字
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取一个数字转化为二进制后1所在的位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_pos&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$num&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pow(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 进行异或计算
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;do_xor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mt_rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mt_rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取两个随机数，然后去掉从数组中去掉它们
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rand_index_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cacl_num1_num2_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;divide_by_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取两个数组各自异或再互相异或的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cacl_num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1_num2_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 根据pos将两个数组再各自细分成两个数组
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其中$arr_copy_0和$arr_copy_1各自包含了一个被抽取的数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;divide_by_pos&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pow(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 对这4个数组进行对应的异或操作，就出结果了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_num&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_0_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_0_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1_xor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;do_xor&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_1_xor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr_copy_1_xor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &#x2F; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cacl_num2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;PHP_EOL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &#x2F; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$num2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>iframe无刷新跨域上传文件并获取返回值</title>
            <pubDate>Fri, 06 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/crossdomain-upload/</link>
            <guid>https://limboy.me/posts/crossdomain-upload/</guid>
            <description>&lt;p&gt;通常我们会有一个统一的上传接口，这个接口会被其他的服务调用。如果出现不同域，还需要无刷新上传文件，并且获取返回值，这就有点麻烦了。比如，新浪微博启用了新域名www.weibo.com，但接口还是使用原来的域：picupload.t.sina.com.cn。&lt;&#x2F;p&gt;
&lt;p&gt;研究了一下新浪微博的处理方法，这里大概演示一下。&lt;&#x2F;p&gt;
&lt;p&gt;首先是一个正常的上传页面 upload.html&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个函数将来会被iframe用到
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getIframeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 我把upload.com指向了127.0.0.1 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  method=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  target=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  enctype=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;multipart&#x2F;form-data&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  action=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;upload.com&#x2F;playground&#x2F;js&#x2F;deal.php?cb=http:&#x2F;&#x2F;localhost&#x2F;playground&#x2F;js&#x2F;deal_cd.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;input type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;input type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;SUBMIT&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;value=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;upload&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;if&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;about:blank&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;frameborder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里有一个关键点是 form 的 target 要指向 iframe，同时把 iframe 隐藏起来，这样上传的处理结果就会显示在该 iframe 里。action 里的 cb(callback)参数表示处理完成后要跳转的 url，因为我们的目标是 iframe，所以只会把跳转的页面输出到 iframe，而不会让当前页面跳转。&lt;&#x2F;p&gt;
&lt;p&gt;还有一点，callback url 要和当前页面同域。跨域的 iframe 无法调用父页面的内容。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 deal.php，也就是 form 的 action&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; deal upload file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and get file id, you can pass other params either
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;location:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;cb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?file_id=123&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里可以处理文件，然后入库。操作完成后，把文件的 id 及其他信息都放在 url 里，最后跳转到这个 url。&lt;&#x2F;p&gt;
&lt;p&gt;最后来看看 deal_cd.html，也就是刚刚 deal.php 跳转到的 url，这个文件的内容会填充到页面的 iframe 里。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.location.search.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.parent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getIframeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.toString().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里调用了父窗口的 getIframeVal 方法，这样父页面就获得了文件的 id。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>API的返回值形式</title>
            <pubDate>Wed, 04 May 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/api-return-format/</link>
            <guid>https://limboy.me/posts/api-return-format/</guid>
            <description>&lt;p&gt;假设我们有一个 rest 服务，该 rest 服务会返回 json 格式的信息，以 twitter 为例：访问&lt;code&gt;http:&#x2F;&#x2F;api.twitter.com&#x2F;1&#x2F;users&#x2F;show.json?user_id=12345&lt;&#x2F;code&gt;会得到如下结果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	id_str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;12345&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	is_translator: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;	following: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;	profile_text_color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;333333&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ID 12345&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	status: {
&lt;&#x2F;span&gt;&lt;span&gt;		coordinates: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;		text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Follow @h&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是一个正常用户的信息，如果访问一个不存在用户，会返回类似下面的结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;1&#x2F;users&#x2F;show.json?user_id=12345111&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Not found&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有没有发现，两次请求只是 userid 不一样，但返回形式却截然不同，这其实也不是什么大问题，客户端只要先检查一下是否有 error 这个 key，就能知道这次请求是否出错。不过我想了个另一个方法，能让返回形式有相同的结构。&lt;&#x2F;p&gt;
&lt;p&gt;借鉴了一下 http 协议，把返回结果分为 header 和 body 两部分，一个正常的请求会返回如下的信息&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;status&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ok&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;status 相当于 http 的 status 头信息，通过检查该信息可以知道请求是否正常，如果是&#x27;ok&#x27;则为正常，如为&#x27;error&#x27;则不正常，如果返回出错，则会在 content 字段里包含足够的错误信息&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;status&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;...&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;code&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;message&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file not found&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里只包含了最基本的 3 项信息，request 指代的是本次请求的 url，code 类似 http 状态码，message 指代出错信息。&lt;&#x2F;p&gt;
&lt;p&gt;这样是不是更优雅些？&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>用php5.3的namespace实现类的无痛继承</title>
            <pubDate>Thu, 24 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-namespace-class-extend/</link>
            <guid>https://limboy.me/posts/php-namespace-class-extend/</guid>
            <description>&lt;p&gt;标题有点怪异，先来说说正常的继承会有什么问题。假设你一个应用的 Controller 多次用到了 View 类，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Hello
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_index&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;index.tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_edit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;edit.tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个 View 是框架提供的，假如某一天发现 View 类需要新添加一个方法，最常用的就是新建一个自定义的 View 类继承框架的 View 类&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;My_View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newMethod&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时以前使用 View 类的地方就要全部变成 My_View，这是比较恐怖的。很多框架也都提供了解决方法，大体有三种&lt;&#x2F;p&gt;
&lt;h3 id=&quot;eval&quot;&gt;eval&lt;&#x2F;h3&gt;
&lt;p&gt;这是 Kohana2 采用的方法，就是系统类命名为 XXX_Core，然后调用的时候在 autoload 处，动态 eval 出一个 XXX class，就像这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View_Core
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; autoload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;autoload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; first look into app dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; then look into modules dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; last look into system dir
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;class &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; extends &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_Core&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果用户需要对该类添加新的方法，可以在 app&#x2F;classes 里定义新的 View 类，同时继承 View_Core 类，这样使用时，因为优先级的原因，View 类名可以保持不变&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;View_Core
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;newMethod&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为使用了 eval，所以不够优雅，而且有安全隐患&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kong-ke-fa&quot;&gt;空壳法&lt;&#x2F;h3&gt;
&lt;p&gt;这是 Kohana3 的做法，具体如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system&#x2F;classes&#x2F;view.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 是的，就这么一句话
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Kohana_View &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; system&#x2F;classes&#x2F;kohana&#x2F;view.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Kohana_View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据优先级，最后会找到 system&#x2F;classes&#x2F;view.php 定义的 View 类。如果需要自己扩展 Kohana_View 类，可以在 app&#x2F;classes 目录里新建一个 view.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Kohana_View
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; add your method
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样框架就会先找到 app&#x2F;classes&#x2F;view.php 而不是 system&#x2F;classes&#x2F;view.php，自定义 View 类生效，同时原先使用的 View 类也不需要做调整&lt;&#x2F;p&gt;
&lt;p&gt;这么做的缺点就是 system&#x2F;classes 目录下会有大量的空壳类，有点累赘&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attach-behavior&quot;&gt;attach behavior&lt;&#x2F;h3&gt;
&lt;p&gt;这是 yii 采用的方法，简单说来就是通过 attachBehavior 方法，动态地给某个类添加新的功能&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Component
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeBehavior &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;CBehavior
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;addWidth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Owner&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;SomeComponent&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;attachBehavior&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SomeBehavior&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;addWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;需要实例化后动态调用 attachBehavior 方法，有点麻烦。而且不能使用父类的 protected 属性和方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-namespace-shi-xian-wu-tong-ji-cheng&quot;&gt;用 namespace 实现无痛继承&lt;&#x2F;h3&gt;
&lt;p&gt;所谓的无痛继承就是不用修改原先的类名，没有多余的空壳类，没有 eval，不用 attachBehavior，只要修改&#x27;use&#x27;就行了。代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; app&#x2F;lib1.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Lib1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;s before&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;定义了一个 Controller 类，使用时：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib1.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Lib1\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output: lib1&amp;#39;s before
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在要有一个新的 controller 继承 lib1.php 的 Controller，如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Lib2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Lib1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Lib1\Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;s before&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用时，只要将 use App\Lib1\Controller 改为 use App\Lib2\Controller 就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 可以通过设置autoload来解决require的问题
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib1.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;lib&#x2F;lib2.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Lib2\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很方便&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php实现实时通信</title>
            <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-comet/</link>
            <guid>https://limboy.me/posts/php-comet/</guid>
            <description>&lt;p&gt;如果英文 ok 的话，可以直接看&lt;a href=&quot;http:&#x2F;&#x2F;gonzalo123.wordpress.com&#x2F;2011&#x2F;03&#x2F;14&#x2F;real-time-notifications-with-php&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;实现实时通信一般有两种方式:
socket 或 comet。socket 是比较好的解决方案，问题在于不是所有的浏览器都兼容，服务器端实现起来也稍微有点麻烦。相比之下，comet(基于 HTTP 长连接的&amp;quot;服务器推&amp;quot;)实现起来更加方便，而且兼容所有的浏览器。所以这次就来说说 comet 的 php 实现。&lt;&#x2F;p&gt;
&lt;p&gt;comet 也有好几种实现方式，如 iframe, http long request，二者的区别可以参考&lt;a href=&quot;http:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;cn&#x2F;web&#x2F;wa-lo-comet&#x2F;&quot;&gt;这篇文章&lt;&#x2F;a&gt;。本文主要探讨 http long request 实现实时通信。&lt;&#x2F;p&gt;
&lt;p&gt;先说说 http 长链接是怎么回事，通俗点讲就是服务器不是一收到请求就直接吐数据，而是在那憋啊憋，一直憋到憋不住了，才告诉你执行结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$count&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do something ...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;憋死我了&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;至于憋多长时间，就看具体应用了，如果憋太久的话，服务器资源的占用也会是个问题。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们就要通过这种方法来实现实时通信(其实是准实时)，先说一下原理：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起一个 ajax 长链接查询，然后服务端就开始执行代码，主要是检查某个文件是否被更新，如果没有，睡一会(sleep)，醒来接着检查&lt;&#x2F;li&gt;
&lt;li&gt;如果客户端又发起了一个查询链接(正常请求)，服务端收到后，处理请求，处理完毕后更新某个特定文件的 modify time&lt;&#x2F;li&gt;
&lt;li&gt;这时第一次 ajax 查询的后台代码还在执行，发现某个文件被更新，说明来了新请求，输出对应的结果&lt;&#x2F;li&gt;
&lt;li&gt;第一次 ajax 查询的 callback 被触发，更新页面，然后再发起一个新的 ajax 长链接&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;shi-zhan&quot;&gt;实战&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ke-hu-duan&quot;&gt;客户端&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;meta http-equiv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Type&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;html; charset=utf-8&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Comet Test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;customAlert&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;publish customAlert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;customAlert2&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;publish customAlert2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;      src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1.5&#x2F;jquery.min.js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;      type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;NovComet.js&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;console.log(data);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;console.log(data);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a.customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a.customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;customAlert2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码说的是，有个 NovComet 的 Object，注册了 customAlert 和 customAlert2 事件，当页面载入完成时，对两个按钮又加了监听事件，当点击时 NovComet 会发布 customAlert 或 customAlert2 事件，然后 NovComet 执行了 run 方法。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;novcomet&quot;&gt;NovComet&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;NovComet.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  sleepTime: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _subscribed: {},
&lt;&#x2F;span&gt;&lt;span&gt;  _timeout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _baseurl: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comet.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  _urlParam: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;subscribed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      cbk: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      timestamp: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_refresh&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_timeout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sleepTime&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;baseurl&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;baseurl&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.round&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Date()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getTime&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_args&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;currentTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timestamp&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_urlParam &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;[&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;]=&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;currentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._getCurrentTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometCheckUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; sin cambios
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._refresh&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; trigger
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timestamp&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_subscribed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.cbk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;._refresh&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_baseurl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_args&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;amp;publish=&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cometPublishUrl&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NovComet 的 run 方法首先把之前注册的几个事件串成一个 url，并且很狡猾地使用了&amp;quot;[]&amp;quot;，类似:
?subscribed[customAlert]=1300016814&amp;amp;subscribed[customAlert2]=1300016814&amp;amp;1300016825，这样 php 收到后，就会得到$_GET[subscribed]数组，最后那个时间戳是为了避免请求被缓存。如果收到后台传过来的数据 data 的 s 值为 0，说明什么也没发生，隔 1 秒后继续执行；如果 data.s 的值为 1，说明 NovComet 的 publish 事件被触发，则调用对应的 callback。&lt;&#x2F;p&gt;
&lt;p&gt;publish 方法执行后，会构造一个类似: ?publish=customAlert 这样一个 url 发送到后台。后台检测到 pubish 参数，则获取该参数的值，并更新对应文件的 mtime。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fu-wu-duan&quot;&gt;服务端&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; comet.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;NovComet.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter_input(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;INPUT_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;publish&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FILTER_SANITIZE_STRING&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter_var_array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_GET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;subscribed&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FILTER_SANITIZE_NUMBER_INT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;setVar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果收到 publish 参数，直接输出，否则执行 run 方法，至于 run 是怎么回事，且看下码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NovComet.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;NovComet &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;COMET_OK &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;COMET_CHANGED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_var&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setVar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_vars&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setTries&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tries&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setSleepTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sleep&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;setCallbackCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$callback&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;DEFAULT_COMET_PATH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;dev&#x2F;shm&#x2F;%s.comet&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_null(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$defaultCometPAth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;::DEFAULT_COMET_PATH;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$defaultCometPAth&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$defaultCometPAth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filemtime(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cometFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_callback&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_tries&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_vars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$timestamp&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fileTimestamp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clearstatcache()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;s&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;COMET_CHANGED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;k&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;s&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;COMET_OK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json_encode(touch(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;DEFAULT_COMET_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 publish 时，创建了一个以$id命名的文件。run时，如果发现该$id 文件存在，且时间戳大于之前保存的该$id对应的时间戳(通过setVar设置的)，说明$id 事件被触发，处理完后把$id放到$out 数组中，然后判断一下$out 数组是否为空，如果不为空，则输出一段 json。&lt;&#x2F;p&gt;
&lt;p&gt;如果一段时间内都没有触发事件(for 循环执行完毕)，也输出一段 json，告诉前端执行完了，但是没有任何新情况。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shuo-ming&quot;&gt;说明&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;可以在客户端监听&#x2F;发布多个事件&lt;&#x2F;li&gt;
&lt;li&gt;监听事件时，可以传一个 callback，这样收到数据时就会出发该 callback&lt;&#x2F;li&gt;
&lt;li&gt;当监听事件时，会传一个时间戳&lt;&#x2F;li&gt;
&lt;li&gt;当事件被 publish 时，会向后台发一个请求，并传递一个新的时间戳&lt;&#x2F;li&gt;
&lt;li&gt;服务端不会一直执行，如果指定时间内，没有任何请求被触发，则结束运行&lt;&#x2F;li&gt;
&lt;li&gt;客户端会重复上述过程(setTimeout &amp;amp; NovComet.run())&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最后来一张图说明一下&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;php-comet&amp;#x2F;comet-firebug.png&quot;
        width=&quot;640&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;运行一段时间后，没有收到任何 publish 事件，服务端结束执行&lt;&#x2F;li&gt;
&lt;li&gt;服务端返回一段 json&lt;&#x2F;li&gt;
&lt;li&gt;客户端触发了一个事件，服务端收到事件，返回一段新的 json&lt;&#x2F;li&gt;
&lt;li&gt;callback 被触发&lt;&#x2F;li&gt;
&lt;li&gt;客户端进入下一次的 ajax 长链接查询&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
        
        
        <item>
            <title>javascript大杂烩</title>
            <pubDate>Fri, 04 Mar 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/javascript/</link>
            <guid>https://limboy.me/posts/javascript/</guid>
            <description>&lt;p&gt;花了点时间学习了下 js 基础，跟大家分享一下，有不到之处，欢迎指出 :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-yu-dui-xiang&quot;&gt;关于对象&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dui-xiang-de-chuang-jian&quot;&gt;对象的创建&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Object();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; var newObj = {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newObj&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;someValue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;val&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;yi-qie-jie-dui-xiang&quot;&gt;一切皆对象&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但也有些特殊的对象，如 3, &#x27;str&#x27;, true 等等，但如果用 instanceof 测试的话，会发现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;Object; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但它们真的也是对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;3.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个理由&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.times&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 5 .times(print); &#x2F;&#x2F;also works
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 加上括号是为了避免出现解析错误(js引擎会以为是小数点)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就连函数也是一个对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dui-xiang-de-chu-shi-hua&quot;&gt;对象的初始化&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;John&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; var user = User(&amp;#39;John&amp;#39;, &amp;#39;Resig&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个 function，可以看成是一个 Class，也可以看成是一个正常的函数，这就麻烦了，因为无论加不加上 new 这个关键字，function 都能正常运行，虽然结果会不一样。&lt;&#x2F;p&gt;
&lt;p&gt;如果看成 Class，使用 new 关键字初始化，那么 function 里的 this 指向当前的 function。如果不使用 new 关键字，则 function 里的 this 默认指向 Window&lt;&#x2F;p&gt;
&lt;p&gt;有两种解决方法，一个是将 Class function 的首字母大写，如 User，这样就能清楚地知道哪些 function 是 Class。但这样还是避免不了写程序时粗心，忘了加 new 关键字。&lt;&#x2F;p&gt;
&lt;p&gt;另一种方法就是不是用 new 关键字，在 function 里自动判断，保证返回的一定是当前对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;User) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更通用的方法是创建一个 makeClass 方法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; makeClass - By John Resig (MIT Licensed)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;makeClass&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span&gt;arguments.callee) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;function&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.callee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;arguments.callee(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为函数名未知，所以使用了 arguments.callee 来实现。&lt;&#x2F;p&gt;
&lt;p&gt;makeClass 的使用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;makeClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;John&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; =&amp;gt; &amp;quot;John Resig&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dui-xiang-de-ji-cheng&quot;&gt;对象的继承&lt;&#x2F;h4&gt;
&lt;p&gt;每个 function 都有一个特殊的变量&amp;quot;prototype&amp;quot;，当实例化对象时，这个变量上的各个属性也会被附加到对象上&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;.prototype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Car(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Benz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.info&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果不使用 new 关键字，prototype 就失效了&lt;&#x2F;p&gt;
&lt;p&gt;prototype 属性也有一个特殊的属性&amp;quot;constructor&amp;quot;，通过它我们就能实现继承了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inAProto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;A(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Hook up A into B&amp;#39;s prototype chain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype.constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inBProto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;B();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bi-bao-yu-mo-kuai-hua&quot;&gt;闭包与模块化&lt;&#x2F;h3&gt;
&lt;p&gt;闭包是一种现象，通常是因为一个 function 返回了一个内部的 function，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2011&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2011
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到内部 function f2 成功地得到了 f1 的 local 变量，又因为 n 被 f2 使用，所以变量 n 就常驻内存了
从这个角度上说，如果把 f1 看成一个 class，n 就变成了私有变量，而 f2 成为了公共方法，所以就有了模块化的概念&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myNamespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myPrivateVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPrivateMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;someText&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;someText&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    myPublicVar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPublicFunction&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myPrivateVar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myPrivateMethod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;})();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bi-mian-ming-ming-wu-ran-de-fang-fa&quot;&gt;避免命名污染的方法&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; self executing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; if you want some var global accessable, put &amp;quot;window.&amp;quot; ahead
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;myVar&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;globalVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;qiang-da-de-prototype&quot;&gt;强大的 prototype&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;contains &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.length; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;stringArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foobar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;stringArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foobar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;fang-bian-de&quot;&gt;方便的&amp;quot;+&amp;quot;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Quick hex to dec conversion:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;0xFF&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 255
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Get a timestamp for now, the equivalent of `new Date().getTime()`:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+new &lt;&#x2F;span&gt;&lt;span&gt;Date();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Safer parsing than parseFloat()&#x2F;parseInt()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1,000&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 1, not 1000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1,000&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; NaN, much better for testing user input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;010&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 8, because of the octal literal prefix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;010&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 10, `Number()` doesn&amp;#39;t parse octal literals
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; A use case for this would be rare, but still useful in cases
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; for shortening something like if (someVar === null) someVar = 0;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Boolean to integer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Other useful tidbits:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1e10&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 10000000000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;1e-4&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0.0001
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-12&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; -&amp;gt; -12
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意：如果是字符串与数字相加的话，结果还是字符串，如&amp;quot;hello&amp;quot; + 3，结果为&amp;quot;hello3&amp;quot;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tong-guo-lai-huo-qu-she-zhi-object-de-shu-xing&quot;&gt;通过[]来获取&#x2F;设置 Object 的属性&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;class&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; access reversed property
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;have space&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; has space
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.class .subclass&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;value&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; can have .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;string-de-split-he-replace-ke-yi-bao-han-zheng-ze&quot;&gt;String 的 split 和 replace 可以包含正则&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world   with  spaces&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;returns an array: [&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;with&amp;quot;, &amp;quot;spaces&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo bar baz &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;returns &amp;quot;foo1bar2baz3&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;han-shu-ding-yi-shi-yu-han-shu-biao-da-shi&quot;&gt;函数定义式与函数表达式&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;walle&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:undefined
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;函数定义式
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;I am Laruence&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;walle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;函数表达式
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;walle&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;结果:function
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于函数定义式，会将函数定义提前，而对于函数表达式，只有在执行过程中才会计算&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zuo-yong-yu&quot;&gt;作用域&lt;&#x2F;h4&gt;
&lt;p&gt;对于下面的 demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;laruence&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;eve&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出结果为&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eve&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ReferenceError&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;原因是 js 在执行函数之前，会有一个预编译的过程，这个过程中会把局部变量提取出来，放到 scope chain 中，value 都为 undefined(不包括传递过来的参数)，所以在执行 echo 函数时，name 的值在设置为&amp;quot;eve&amp;quot;前，为 undefined&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ejohn.org&#x2F;blog&#x2F;simple-class-instantiation&#x2F;&quot;&gt;simple class instantiation&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;61088&#x2F;94962&quot;&gt;hidden features of javascript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mckoss.com&#x2F;jscript&#x2F;object.htm&quot;&gt;Object Oriented Programming in JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;yuiblog.com&#x2F;blog&#x2F;2007&#x2F;06&#x2F;12&#x2F;module-pattern&#x2F;&quot;&gt;module pattern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.laruence.com&#x2F;2009&#x2F;05&#x2F;28&#x2F;863.html&quot;&gt;javascript 的作用域原理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>git多人协作开发流程(以blog为例)</title>
            <pubDate>Fri, 25 Feb 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/git-workflow-with-blog-demo/</link>
            <guid>https://limboy.me/posts/git-workflow-with-blog-demo/</guid>
            <description>&lt;p&gt;时间仓促，能力有限，错误难免(代码没有经过实际验证，所以可能会有问题)，欢迎指正 :)&lt;&#x2F;p&gt;
&lt;p&gt;这个开发流程就是基于&lt;a href=&quot;http:&#x2F;&#x2F;nvie.com&#x2F;posts&#x2F;a-successful-git-branching-model&#x2F;&quot;&gt;a successful git model&lt;&#x2F;a&gt;这篇文章而来的，如果对英文不感冒的话，我这有&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;translate&#x2F;2010&#x2F;10&#x2F;30&#x2F;a-successful-git-branch.html&quot;&gt;翻译版&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;项目背景：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;张三 &#x2F; 李四 &#x2F; 王五 打算共同协作，开发一套博客系统
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;项目分工：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;张三 &#x2F; 李四 负责文章系统
&lt;&#x2F;span&gt;&lt;span&gt;王五负责评论系统
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jian-li-fu-wu-duan-cang-ku&quot;&gt;建立服务端仓库&lt;&#x2F;h3&gt;
&lt;p&gt;git 虽然是分布式版本管理工具，但为了方便管理，我们需要建立一个中心仓库，先在服务端建立两条分支&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;master 保存稳定版(production ready)，开发人员平时的代码都提交到 develop 分支上&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-zhe-de-git-fen-zhi&quot;&gt;开发者的 Git 分支&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhang-san-de-git-fen-zhi&quot;&gt;张三的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;因为张三和李四同时开发文章系统，所以就有了下面的分支&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 张三的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lisi&#x2F;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add lisi http:&#x2F;&#x2F;lisi-server&#x2F;lisi.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;li-si-de-git-fen-zhi&quot;&gt;李四的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;跟张三类似，不过 article server 变成了张三的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 李四的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;zhangsan&#x2F;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add zhangsan http:&#x2F;&#x2F;zhangsan-server&#x2F;zhangsan.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;wang-wu-de-git-fen-zhi&quot;&gt;王五的 Git 分支&lt;&#x2F;h4&gt;
&lt;p&gt;因为只有王五一个人开发评论系统，所以只要一条远程分支就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 王五的Git分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;comment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (via git remote add origin http:&#x2F;&#x2F;remote-server&#x2F;blog.git&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kai-fa-guo-cheng&quot;&gt;开发过程&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;zhang-san-he-li-si&quot;&gt;张三和李四&lt;&#x2F;h4&gt;
&lt;p&gt;假设张三负责文章的管理，及前端显示。李四负责文章的分类和标签系统。&lt;&#x2F;p&gt;
&lt;p&gt;张三开发完一部分后(n 次本地 commit)，提交到本地的 git server(也就是李四添加的 http:&#x2F;&#x2F;zhangsan-server&#x2F;zhangsan.git)。&lt;&#x2F;p&gt;
&lt;p&gt;李四开发完一部分后，因为要与张三开发的部分合并，所以需要执行一下 rebase 或 merge&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 当前在article分支中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase zhangsan&#x2F;article
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 提交到本地的git server (也就是张三添加的http:&#x2F;&#x2F;lisi-server&#x2F;lisi.git)。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push local&#x2F;article master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时张三又开发完了一部分，他也会走跟李四一样的流程，rebase &amp;amp; push (如果有冲突，解决之)。&lt;&#x2F;p&gt;
&lt;p&gt;假设由张三统一负责将每日的开发进度提交到 remote develop 分支上，张三在执行了上面所说的流程后，提交到服务端的 develop 分支。但这时很可能王五已经把他写的代码提交了，所以要先执行一下 rebase&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样张三和李四的代码就都提交到了服务端的 develop 分支上。王五那边的流程也一样，只是少了本地同步的过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-fa-wan-bi-jin-ru-ce-shi-jie-duan&quot;&gt;开发完毕，进入测试阶段&lt;&#x2F;h3&gt;
&lt;p&gt;经过几天的开发，各个功能都已基本完成，下面就要进入测试阶段。具体做法是在服务端新添加一个分支，命名为 release，所以这时服务端就有 3 个分支了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;三位同学都在本地新建一个 branch，对应服务端的 release 分支&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; release origin&#x2F;release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;分别进行测试，如果发现问题，则执行 pull &amp;amp; push&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 当前在release分支下
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pull origin release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;经过几天的测试后，发现没什么问题了，就可以发布稳定版了，假设为 0.1&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tag 0.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时别忘了把 release 分支上的代码与 develop 分支合并，保证 develop 分支上不会有遗留的 bug。(没有找到如何直接 merge 两个服务端 branch 的方法)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 删除服务端的release分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin :release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就可以继续在 develop 分支上进行开发了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tian-jia-xin-te-xing&quot;&gt;添加新特性&lt;&#x2F;h3&gt;
&lt;p&gt;博客系统需要添加 archives 功能，这个功能的开发就交给了新来的赵六。此时，在服务端新开一个分支，命名为 feature，这时服务端的分支就变成了这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;develop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;赵六也在本地建立一个 archive 分支，每天提交到服务端的 feature&#x2F;archive，赵六的 Git 分支是这样的(不相关的服务端 Git 已省去)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;origin&#x2F;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等到这个 feature 开发完了，与服务端的 develop 分支执行一下 rebase，然后再提交到服务端的 develop，这样博客的 archive 功能就有了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase origin&#x2F;feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 如果要删除服务端的feature&#x2F;archive分支的话
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin :feature&#x2F;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来的流程跟上面的一样：开发完毕后，新建 release 分支，在那上面进行 bug 修复，修复完毕后，merge 到服务端的 master 和 develop&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-ji-xiu-fu-lou-dong&quot;&gt;紧急修复漏洞&lt;&#x2F;h3&gt;
&lt;p&gt;博客出现了一个 xss 漏洞，需要尽快修复，这时新建一个 hotfix 分支(现在本地建，然后提交到服务端)，然后对漏洞进行修复，修复完后，提交到服务端的 master 和 develop&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pull origin master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 漏洞修复...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 修复完后
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase hotfix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>图解HTTPS</title>
            <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/https-workflow/</link>
            <guid>https://limboy.me/posts/https-workflow/</guid>
            <description>&lt;p&gt;我们都知道 HTTPS 能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用 HTTPS 协议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;https-jian-jie&quot;&gt;HTTPS 简介&lt;&#x2F;h3&gt;
&lt;p&gt;HTTPS 其实是有两部分组成：HTTP + SSL &#x2F; TLS，也就是在 HTTP 上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;https-workflow&amp;#x2F;https.png&quot;
        width=&quot;648&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h3 id=&quot;1-ke-hu-duan-fa-qi-https-qing-qiu&quot;&gt;1. 客户端发起 HTTPS 请求&lt;&#x2F;h3&gt;
&lt;p&gt;这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-fu-wu-duan-de-pei-zhi&quot;&gt;2. 服务端的配置&lt;&#x2F;h3&gt;
&lt;p&gt;采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-chuan-song-zheng-shu&quot;&gt;3. 传送证书&lt;&#x2F;h3&gt;
&lt;p&gt;这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-ke-hu-duan-jie-xi-zheng-shu&quot;&gt;4. 客户端解析证书&lt;&#x2F;h3&gt;
&lt;p&gt;这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-chuan-song-jia-mi-xin-xi&quot;&gt;5. 传送加密信息&lt;&#x2F;h3&gt;
&lt;p&gt;这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-fu-wu-duan-jie-mi-xin-xi&quot;&gt;6. 服务端解密信息&lt;&#x2F;h3&gt;
&lt;p&gt;服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-chuan-shu-jia-mi-hou-de-xin-xi&quot;&gt;7. 传输加密后的信息&lt;&#x2F;h3&gt;
&lt;p&gt;这部分信息是服务段用私钥加密后的信息，可以在客户端被还原&lt;&#x2F;p&gt;
&lt;h3 id=&quot;8-ke-hu-duan-jie-mi-xin-xi&quot;&gt;8. 客户端解密信息&lt;&#x2F;h3&gt;
&lt;p&gt;客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>《软件随想录》小记</title>
            <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/more-joel-on-software/</link>
            <guid>https://limboy.me/posts/more-joel-on-software/</guid>
            <description>&lt;p&gt;非常感谢&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2009&#x2F;12&#x2F;chinese_version_of_mjos_is_on_sale.html&quot;&gt;阮一峰老师&lt;&#x2F;a&gt;用心的翻译。读起来完全没有生硬感，专有名词翻译地也很到位，还有很多贴心的脚注。&lt;&#x2F;p&gt;
&lt;p&gt;读完此书，对 Joel 的文章最大的感触是：观点鲜明，语言风趣，见解独到，(虽然有点拖泥带水的感觉，XDD)。简单摘录几段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果要让程序员高效地工作，你就必须要给予他们安静和宽敞的工作环境，比如私人办公室&lt;&#x2F;li&gt;
&lt;li&gt;让程序员干有趣的活是吸引优秀程序员最好的方法之一&lt;&#x2F;li&gt;
&lt;li&gt;让一流的新员工挑选自己的喜欢的项目&lt;&#x2F;li&gt;
&lt;li&gt;思考你得公司代表了怎样的追求，这种追求是怎样形成的，又是怎样被别人感受到的&lt;&#x2F;li&gt;
&lt;li&gt;程序员其实不在乎钱，除非你在其他事情上搞杂了。如果有人在抱怨薪水，而以前并没有出现这种情况，这经常是一种信号，表明人们并不真正喜欢他们的工作&lt;&#x2F;li&gt;
&lt;li&gt;大家坐在一起吃饭，感觉像个大家庭。创造一个有凝聚力的像胶水粘在一起的团队&lt;&#x2F;li&gt;
&lt;li&gt;指针和递归的真正价值在于那种你在学习它们的过程中所得到的思维深度&lt;&#x2F;li&gt;
&lt;li&gt;公司之所以需要管理，就是为了不影响聪明人的工作，让他们把事情做完&lt;&#x2F;li&gt;
&lt;li&gt;能不能清晰地写出技术文章，决定了你是一个口齿不清的程序员还是一个领袖。如果不是 Linus Torvalds 不断地散步福音，请问 Linux 操作系统会成功吗？虽然他是一个非常聪明的计算机天才。但是 Linux 吸引来全世界一大批志愿者的真正原因是 Linus Torvalds 的表达能力&lt;&#x2F;li&gt;
&lt;li&gt;当你改正了一个又一个小细节后，当你磨光，定型，擦亮，修饰你的产品的每一个小边角后，就会有神奇的事发生。你最后拿出来的是一件真正优秀的作品。它第一眼就让人觉得震撼，出类拔萃，工作起来完全符合直觉&lt;&#x2F;li&gt;
&lt;li&gt;世界上只有一件事比你自己设计软件更困难，那就是一个团队一起设计软件&lt;&#x2F;li&gt;
&lt;li&gt;最让我抓狂的就是有些开发团队养成了一个坏习惯，每次需要做决定时就开会&lt;&#x2F;li&gt;
&lt;li&gt;太多的选择最终限制了我们的自由，而不是解放了我们&lt;&#x2F;li&gt;
&lt;li&gt;避开攻击的最好方法之一，是让它看上去好像获得了成功&lt;&#x2F;li&gt;
&lt;li&gt;良好的社会化界面设计会创造更多的价值&lt;&#x2F;li&gt;
&lt;li&gt;如果你让某个功能很容易操作，人们就愿意使用它。通过这种方式，你能够暗中鼓励人们按预想的方式使用&lt;&#x2F;li&gt;
&lt;li&gt;空酒馆效应&lt;&#x2F;li&gt;
&lt;li&gt;解决轻而易举的事情是拿不到钱的，要挣钱，就别怕脏&lt;&#x2F;li&gt;
&lt;li&gt;如果你想保持增长，不管是个人，还是公司。唯一的方法就是扩张自己擅长处理的业务边界，除非故意要保持公司的小型化&lt;&#x2F;li&gt;
&lt;li&gt;如果日程规划是以&amp;quot;天&amp;quot;为单位，甚至以&amp;quot;周&amp;quot;为单位，我就认定它是没用的，你必须将日程规划分解成一些非常小的任务，这些任务能够在以&amp;quot;小时&amp;quot;为单位的时间段中完成，不能有任何任务所需的时间超过 16 小时&lt;&#x2F;li&gt;
&lt;li&gt;最好的工作条件 -&amp;gt; 最好的程序员 -&amp;gt; 最好的软件 -&amp;gt; 利润&lt;&#x2F;li&gt;
&lt;li&gt;如果你想压低程序员的工资，那你就会得到质量很垃圾的软件，而这实际上也不会为你省下很多钱&lt;&#x2F;li&gt;
&lt;li&gt;布鲁克斯法则：向一个已经延误的软件项目中增加人手，只会使他更加延误&lt;&#x2F;li&gt;
&lt;li&gt;一个优秀的程序员独自完成一项任务，就不需要额外的沟通和协调。如果同样的任务让 5 个程序员一起完成，他们之间就必须沟通和协调，这会花掉大量时间&lt;&#x2F;li&gt;
&lt;li&gt;用许多平庸的程序员取代少数优秀的程序员，这种做法的真正问题在于不管平庸的程序员工作多长时间，他们做出来的东西无法像优秀程序员做得那样好&lt;&#x2F;li&gt;
&lt;li&gt;你的公司的成功，依赖于程序员真正以办公室为家的程度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>(译)facebook是如何管理代码的</title>
            <pubDate>Tue, 18 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-facebook-ships-code/</link>
            <guid>https://limboy.me/posts/how-facebook-ships-code/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;framethink.wordpress.com&#x2F;2011&#x2F;01&#x2F;17&#x2F;how-facebook-ships-code&#x2F;&quot;&gt;原文在此&lt;&#x2F;a&gt;，看完之后，终于明白为什么优秀的工程师都去了&#x2F;想去 facebook，因为那里是工程师们的天堂。&lt;&#x2F;p&gt;
&lt;p&gt;译文:&lt;&#x2F;p&gt;
&lt;p&gt;我对 facebook 的运转着迷。这是一个很独特的环境，不容易被复制（他们的体系并不适合所有的公司，即使他们努力尝试过）。下面是我和 facebook 的朋友们关于他们如何开发和管理项目的记录。&lt;&#x2F;p&gt;
&lt;p&gt;现在距离我收集的这些信息又过去 6 个月了，我相信 facebook 肯定又对他们的项目开发实践进行了改进。所以这些记录可能会有点过时。同时 facebook 的工程师驱动文化也越来越为大众所知。非常感谢那些帮助我整理这篇文章的 facebook 的朋友们。&lt;&#x2F;p&gt;
&lt;p&gt;记录：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;截止到 2010 年 6 月，facebook 有将近 2000 名员工，10 个月前只有 1100 名，一年之间差不多翻了一番。&lt;&#x2F;li&gt;
&lt;li&gt;两个最大的部门是工程师和运维，每个部门大概都是 400-500 人。这两个部门人数大约占了公司的一半。&lt;&#x2F;li&gt;
&lt;li&gt;产品经理与工程师的比例大约为 1-7 到 1-10。&lt;&#x2F;li&gt;
&lt;li&gt;每个工程师入职时，都要接收 4-6 周的培训，通过修补 bugs 和听高级开发工程师的课程来熟悉 facebook。&lt;&#x2F;li&gt;
&lt;li&gt;培训结束后，每个工程师都可以接触线上的数据库(更大的权力意味着更大的责任，也有一份&amp;quot;勿做清单&amp;quot;，不然可能会被开，比如共享用户的隐私数据)。&lt;&#x2F;li&gt;
&lt;li&gt;有非常牢靠的安全体系，以免有人不小心&#x2F;故意做了些不好的事。&lt;&#x2F;li&gt;
&lt;li&gt;每个工程师可以修改 facebook 的任何代码，随时可以迁入。&lt;&#x2F;li&gt;
&lt;li&gt;浓厚的工程师驱动文化。&amp;quot;产品经理基本可以被忽略&amp;quot;，这是 facebook 一名员工的话。工程师可以修改流程的细节，重新安排工作任务，随时植入自己的想法。&lt;&#x2F;li&gt;
&lt;li&gt;在每月的跨部门会议上，由工程师来汇报工作进度，市场部和产品经理会出席会议，也可以做些简短的发言，但如果说得太多，很可能就会被打小报告。他们确实想让工程师来主导产品的开发，对自己的产品负责。&lt;&#x2F;li&gt;
&lt;li&gt;项目需要的资源都是自愿的
** 一个产品经理把工程师们召集到一起，让他们对他的想法产生兴趣。
** 工程师们决定开发那些让他们感兴趣的特性。
** 工程师跟他们的经理说：&amp;quot;我下周想开发这 5 个新特性&amp;quot;。
** 经理会让工程师独立开发，可能有时会让他优先完成一些特性。
** 工程师独立完成所有的特性——前端&#x2F;后端&#x2F;数据库，等等所有相关的部分。如果需要得到设计人员的帮助，需要先让设计人员对你的想法产生兴趣。其他如架构之类的也一样。但总体来说，工程师要独立完成所有的任务。&lt;&#x2F;li&gt;
&lt;li&gt;对于某个特性是否值得开发的争论，通常是这么解决的：花一个星期的时间完成他，并在小部分人群中(如 1%)进行测试。&lt;&#x2F;li&gt;
&lt;li&gt;工程师常常希望解决难题，这能获得声望和尊敬。他们很难对前端项目或 UI 设计产生太大的兴趣。这跟其他公司可能正好相反。在 facebook，后端任务，比如新的 feed 算法，广告投放算法，memcache 优化等等，是工程师真正感兴趣的。&lt;&#x2F;li&gt;
&lt;li&gt;所有的代码修改都要进行审核(通过一个或多个工程师)，但 News Feed 是个例外，因为太重要了，Zuckerberg 会亲自 review。&lt;&#x2F;li&gt;
&lt;li&gt;所有的修改至少要被一个人审核，而且这个系统可以让任何人很方便地审核其他人的代码，即使你没有邀请他&lt;&#x2F;li&gt;
&lt;li&gt;工程师负责测试，代码修复，和维护自己的项目。&lt;&#x2F;li&gt;
&lt;li&gt;每个办公室或通过 VPN 连接的员工会使用下一版的 facebook，这个版本的 facebook 会经常更新，通常比公开的早 1-12 小时。所有的员工被强烈建议提交 bugs，而且通常会很快被修复。&lt;&#x2F;li&gt;
&lt;li&gt;很奇怪只有很少的 QA 或自动测试——&amp;quot;大部分工程师都能写出基本没有 bug 的代码，只是在其他公司他们不需要这么做。如果有 QA 部门，他们只要把代码写完，扔给他们就行了&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;[针对上一条]我们有自动测试，代码发布前必须要通过测试。我们不相信&amp;quot;所有的工程师都能写出没有 bug 的代码&amp;quot;，毕竟这是一个商业公司。&lt;&#x2F;li&gt;
&lt;li&gt;很奇怪，缺少产品经理的影响和控制——产品经理是很独立的和自由的。产生影响力的关键是与工程师和工程师的领导们们搞好关系。需要大致了解技术，不要提一些愚蠢的想法。&lt;&#x2F;li&gt;
&lt;li&gt;所有提交的代码每周二打包一次。&lt;&#x2F;li&gt;
&lt;li&gt;只要多一分努力，终于一天会发生改变。&lt;&#x2F;li&gt;
&lt;li&gt;星期二的代码发布，需要所有的提交过代码的工程师在场。&lt;&#x2F;li&gt;
&lt;li&gt;代码打包前，工程师必须在一个特殊的 IRC channel 上。&lt;&#x2F;li&gt;
&lt;li&gt;运维执行打包过程
** facebook 有大约 60000 台服务器
** 有 9 个代码发布级别
** 最小的级别只有 6 台服务器
** 星期二的代码发布会先发布到 6 台服务器上，运维组会检测这 6 台服务器的反应，保证代码正常工作，然后再提交到下一级
** 如果发布出现了一些问题（如报错等等），那么就停止下一级的部署，提交出错代码的工程师负责修复问题，然后从头继续发布。
** 所以一次发布可能会经历几次重复：1-2-3-fix. 回到 1. 1-2-3-4-5-fix. 回到 1. 1-2-3-4-5-6-7-8-9&lt;&#x2F;li&gt;
&lt;li&gt;运维组是受过严格训练，倍受尊敬，而且有商业意识的。他们的工作包括分析错误日志，负载和内存状态等等。还包括用户行为。&lt;&#x2F;li&gt;
&lt;li&gt;代码发布期间，运维组使用 IRC-based 页面系统，可以通过 facebook&#x2F;email&#x2F;irc&#x2F;im&#x2F;sms ping 每一个工程师，如果需要他们注意的话。对运维组不做回应是一件很羞愧的事。&lt;&#x2F;li&gt;
&lt;li&gt;代码一旦发布到第 9 级，并且稳定运行，就算发布成功了。&lt;&#x2F;li&gt;
&lt;li&gt;如果一个特性没有按时完成，也没什么大不了的，下次完成时一并发布即可。&lt;&#x2F;li&gt;
&lt;li&gt;如果被 svn-blamed,public shamed 或工作经常疏忽就很可能被开除。&amp;quot;这是一个高效的文化&amp;quot;。不够高效或者不够聪明的员工会被剔除。管理层会在 6 个月的时间里观察你表现，如果不合格，只能说再见。每一级都是这个待遇，即使是 C 级别和 VP 级别，如果不够高效，也会被开除。&lt;&#x2F;li&gt;
&lt;li&gt;被责骂不会导致解雇。我们特别尊重别人，原谅别人。大部分高级工程师都或多或少犯过一些严重的错误，包括我。但没有人因此被解雇。&lt;&#x2F;li&gt;
&lt;li&gt;我也没有遇到过因为上面提到过的犯错误而被解雇。有些人犯了错，他们会非常努力地去修复，也让其他人得到了学习。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说数据库架构，ORM缓存和路由</title>
            <pubDate>Tue, 18 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/orm-cache/</link>
            <guid>https://limboy.me/posts/orm-cache/</guid>
            <description>&lt;h3 id=&quot;wei-shi-yao-zai-orm-ceng-zuo-huan-cun-er-bu-shi-db-ceng&quot;&gt;为什么在 ORM 层做缓存，而不是 DB 层&lt;&#x2F;h3&gt;
&lt;p&gt;ORM 能有效地提高程序员的开发效率，程序员更喜欢操作对象而不是数据库，他们不关心也不想手写一堆 SQL 语句，毕竟一个公司里普通程序员要占多数，他们并不是非常熟悉数据库，写出来的 SQL 执行效率也肯定会有这样那样的问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果让程序员去操作对象，这就是他们的强项了：定义关系、使用 ORM 的方法和属性、获取&#x2F;遍历结果等等。同时 ORM 又可以在内部对 SQL 语句及对象之间的关系进行优化，尽量保证 SQL 高效地执行，甚至可以透明地加个缓存。这样一个双赢的结果，何乐而不为呢。&lt;&#x2F;p&gt;
&lt;p&gt;如果是一些比较复杂的查询语句，只能通过写 SQL 语句来实现，这样的话，可以在语句的执行段外面套一层缓存判断，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;isobamapresident&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; fetch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; do some database heavy stuff
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$votes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; VOTES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; vote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;OBAMA&amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$votes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(USA_CITIZEN_COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Sure is!&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Nope.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; well, ideally
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;isobamapresident&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tou-ming-di-cha-ru-huan-cun&quot;&gt;透明地插入缓存&lt;&#x2F;h3&gt;
&lt;p&gt;所谓透明缓存，就是用户正常使用 ORM，获取 ORM 的查询结果。而事实上 ORM 的结果集很可能是来自缓存而不是数据库。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;获取1小时前发布的文章
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;正常的结果是通过执行以下SQL语句返回的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;SELECT * FROM article WHERE created &amp;gt; $time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;但实际上可能是从Memcache中读取的结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Memcache&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;memcache_host&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;some_key&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样一来，php 代码不用改变，但因为是从缓存中读取，所以数据的获取速度有保障，同时也减轻了数据库的压力，又是一个双赢的局面。&lt;&#x2F;p&gt;
&lt;p&gt;当然愿望是美好的，现实是残酷的，如果要达到上面所说的效果，需要费不少周折。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-ku-jia-gou&quot;&gt;数据库架构&lt;&#x2F;h3&gt;
&lt;p&gt;在设计 ORM 的缓存前，先了解以下数据库的大致架构。以 netlog 的数据库架构变迁为例：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;单数据库&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache1.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;主库+从库&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache2.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;保持主库+从库的架构，把读写最频繁的几个表分到单独的数据库服务器&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache3.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;把那几个读写最频繁的表也分成主从&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache4.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;出现了 1040 too many connections&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache5.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Sharding(水平分区)&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache6.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;数据库服务器&#x2F;数据库&#x2F;分区&lt;&#x2F;strong&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;orm-cache&amp;#x2F;orm-cache7.jpg&quot;
        width=&quot;500&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样基本上就可以应付正常的访问了，如果哪个表数据量过大或连接过多，就 Sharding 一下。但随之而来的问题也很明显，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;没有分区之前，可以通过下面几段代码来获取数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; title, message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; BLOG_MESSAGES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; userid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; {userID}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;assignInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;userID&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$userID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getResults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;假设将BLOG_MESSAGES按照用户id分配到了不同的分区上，上面的代码就需要做一些改动
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;最简单的就是在getInstance时把用户的id传过去，让ORM内部去找分区，相当于路由
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$userID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ru-he-dui-shu-ju-jin-xing-fen-pian&quot;&gt;如何对数据进行分片&lt;&#x2F;h3&gt;
&lt;p&gt;当要对数据进行分片时，应该考虑这两个问题：使用表的哪一列(sharding key)作为分割的依据；使用怎样的分割算法(sharding scheme)。使用哪个 key 要看具体的应用。以博客为例，如果想要现实每个用户的博客，那么 userID 就可以作为 sharding key。如何根据 sharding key 来找到对应的分区一般有三种方法：取模(求余)、数据量、映射表。假设采用映射表的方法，如果要获取用户的博客，先要到映射表里找到该 userID 对应的分区，再从分区中找到 userID 对应的博客列表。随之而来的问题是：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-neng-zhi-xing-kua-fen-qu-cha-xun&quot;&gt;不能执行跨分区查询&lt;&#x2F;h4&gt;
&lt;p&gt;如果要从不同的分区获取数据，就不能通过 JOIN&#x2F;GROUP BY&#x2F;ORDER BY&#x2F;LIMIT 来实现了。比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F;获取最新的10条博客
&lt;&#x2F;span&gt;&lt;span&gt;SELECT * FROM BLOG_MESSAGES ORDER BY created DESC LIMIT 0, 10;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;如果数据在多个分区中，上面这条查询就失效了
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要解决这个问题，最好从设计上就避免这些查询语句。也可以通过冗余来实现。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-yi-zhi-xing-de-bu-dao-bao-zhang&quot;&gt;数据一致性得不到保障&lt;&#x2F;h4&gt;
&lt;p&gt;因为会在多个数据库之间更新数据，如果要保证数据一致性，就要实现分布式事务。&lt;&#x2F;p&gt;
&lt;p&gt;也可以通过一个小技巧来模拟分布式事务，比如有两台数据库服务器，这时可以先开启一个事务，但只在保证两台服务器都正常的情况下才一一提交事务。当然两次事务的提交也会有延迟，但相对来说更加靠谱。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bao-chi-fen-qu-ping-heng&quot;&gt;保持分区平衡&lt;&#x2F;h4&gt;
&lt;p&gt;如果基于用户 ID 进行分区，可能会出现分区之间的不平衡，比如一些活跃的用户都被分到了同一分区，而沉默用户被分到了另一个分区，这时量贩额分区的压力明显不一样。所以分区的算法很重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-fen-ce-lue&quot;&gt;备份策略&lt;&#x2F;h4&gt;
&lt;p&gt;因为数据在不同的分区中，备份策略就不想以前那么简单了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;orm-de-huan-cun-shi-xian&quot;&gt;ORM 的缓存实现&lt;&#x2F;h3&gt;
&lt;p&gt;先声明一下，ORM 的缓存不能解决 JOIN 或者复杂的 SQL 查询，其实如果考虑到将来会有分区的可能，就应该在设计表时避免 JOIN 语句。因为复杂的 SQL 相对来说占的少数，甚至可以对这些 SQL 单独制定缓存策略。&lt;&#x2F;p&gt;
&lt;p&gt;先不考虑分区，假设有一个用户表和博客表，要达到以下目标：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存每一条博客记录，更新博客时，更新缓存&lt;&#x2F;li&gt;
&lt;li&gt;缓存每个用户的博客列表，用户更新博客时，更新该列表&lt;&#x2F;li&gt;
&lt;li&gt;程序员使用 ORM 时不需要考虑缓存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;huan-cun-xing-shi-xian&quot;&gt;缓存行实现&lt;&#x2F;h4&gt;
&lt;p&gt;缓存行还是比较简单的，用户查询某个 id 时，缓存该行内容，下次就可以直接读取缓存了。&lt;&#x2F;p&gt;
&lt;p&gt;如果内容被更新&#x2F;删除了，缓存也同时更新&#x2F;删除。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huan-cun-lie-shi-xian&quot;&gt;缓存列实现&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果在find&#x2F;findAll里传入了参数，则该参数即为key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user_id&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;and_where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, time() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;上面的代码会在Model内部生成一个结构化的字符串，该字符串及对应的值将被放入缓存中
&lt;&#x2F;span&gt;&lt;span&gt;{table_name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{key}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span&gt;sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;类似这样
&lt;&#x2F;span&gt;&lt;span&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c81e728d9d4c2f636f067f89cc14862c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果没有传参数，{key}就不会被替代
&lt;&#x2F;span&gt;&lt;span&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;{key}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c81e728d9d4c2f636f067f89cc14862c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;首次执行此代码时，ORM内部会先去缓存中找上面的结构化字符串，没有找到，就会执行SQL语句，然后把返回的结果的id放到缓存中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这就是要放到缓存中的数据，下次如果再执行此SQL，直接从缓存中获取id(1,43,50)，然后再从缓存中获取这些id对应的行内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;注意到这里有个revision，这是将来要判断该缓存是否已过期的关键。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476790&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;data&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;同时还会生成另一组数据，就是revision
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476777&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果作者又更新了一篇博客，则上面的查询语句结果就发生了变化。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;ORM会找到缓存中的一组revision数据，同时更新它
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-2-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476888&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果没有提供key，那就是
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;article-{key}-revision&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1294476888&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;下次再执行上面的ORM查询代码时，会先去查找&amp;#39;article-2-revision&amp;#39;的版本，然后跟&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39;的版本号比较，如果前一个版本号&amp;gt;后一个版本号，表示数据有改变，缓存已过期，这时就需要重新执行SQL语句，并更新&amp;#39;article-2-c81e728d9d4c2f636f067f89cc14862c&amp;#39;这个字符串的版本号。如果比较结果是前一个版本号&amp;lt;=后一个版本号，那就直接从缓存中读取。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;orm-de-lu-you&quot;&gt;ORM 的路由&lt;&#x2F;h3&gt;
&lt;p&gt;上面说的是数据没有分区的情况，如果数据被分区了的话，还要在 ORM 内部实现路由功能。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;articles&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;created&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, time()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;86400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;假设文章通过某种算法，被分在了不同的分区上，上面这个 ORM 编译出来的 SQL 是无法运行的。但又不能让程序员来关心分库分表的事，这时就可以在 ORM 内部实现路由机制，在具体的 Model 层实现路由算法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Model_Article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;ORM
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里可以实现具体算法，改变ORM的一些属性，从而影响SQL的编译
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.netlog.com&#x2F;developers&#x2F;blog&#x2F;blogid=3071854&quot;&gt;Database Sharding at Netlog, with MySQL and PHP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;cn&#x2F;articles&#x2F;yupoo-partition-database&quot;&gt;又拍网架构中的分库设计&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>发布一款PHP模块系统——Witty</title>
            <pubDate>Mon, 17 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/witty/</link>
            <guid>https://limboy.me/posts/witty/</guid>
            <description>&lt;p&gt;关于&lt;a href=&quot;http:&#x2F;&#x2F;witty.leezhong.com&quot;&gt;Witty&lt;&#x2F;a&gt;，有太多想说的了。&lt;&#x2F;p&gt;
&lt;p&gt;先来说说名字。本来一直想往 KISS 上靠，但是 KISSPHP 已经有了，Kissy 也被淘宝前端团队用了，绞尽脑汁也想不出优雅的跟 KISS 相关的名字，于是先作罢。后来在看书时，无意中看到了&amp;quot;Witty&amp;quot;，看着，念着都很舒服，意思也挺靠谱(风趣的；巧妙的；机智的)，就决定用她了。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说开发 Witty 的初衷。这个是受 python 启发，python 可以把自己开发的类库上传到&lt;a href=&quot;http:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&quot;&gt;pypi&lt;&#x2F;a&gt;，这样就可以通过 easy_install 或 pip 安装了，甚是方便。而且这些库都可以独立使用(即使有依赖关系，easy_install&#x2F;pip 也会自动处理)。本来这件事应该是 pear 来做的，但 pear 的开发规范太复杂，安装也比较麻烦，略显重量级。很多框架其实自带了很多好用的类库，但一般都需要依赖框架本身。Zend Framework 可以把类库单独拿出来，但也有不少问题，比如配置不统一、没有统一的初始化方法、每个模块没有放到单独的文件夹里、没有命令行安装功能等等。于是创建 Witty 的想法就这么诞生了。&lt;&#x2F;p&gt;
&lt;p&gt;Witty 官网架在 GAE 上，这也是我第一次使用 GAE，python+gae 的组合开发一些小项目真是太方便了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-witty&quot;&gt;什么是 Witty&lt;&#x2F;h3&gt;
&lt;p&gt;Witty 想做的事很简单：方便模块开发，方便上传，方便安装，方便使用。&lt;&#x2F;p&gt;
&lt;p&gt;Witty 提供了一些简单的模块开发标准，程序员可以按照这些标准写自己的模块，然后上传到网站，这样其他用户就可以通过简单的命令下载，使用该模块了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;witty-de-an-zhuang-he-shi-yong&quot;&gt;Witty 的安装和使用&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;# install
&lt;&#x2F;span&gt;&lt;span&gt;wget http:&#x2F;&#x2F;witty.leezhong.com&#x2F;static&#x2F;witty
&lt;&#x2F;span&gt;&lt;span&gt;chmod +x witty
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;witty install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# install module
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;witty install http
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# usage
&lt;&#x2F;span&gt;&lt;span&gt;require_once &amp;#39;&#x2F;path&#x2F;to&#x2F;witty.php&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Witty::init();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$http = Witty::instance(&amp;#39;Http&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$http-&amp;gt;execute(&amp;#39;http:&#x2F;&#x2F;www.douban.com&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Witty 类提供了两个初始化方法 instance 和 factory，所以模块不需要自己实现单例和工厂。&lt;&#x2F;p&gt;
&lt;p&gt;如果模块有一些配置参数，可以在 instance 或 factory 时传入，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;redirect&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Http&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;只要 Http 类继承了 Config 类就行了。&lt;&#x2F;p&gt;
&lt;p&gt;也可以指定文件夹，让 Witty 自己去找 config 文件，然后传入参数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;require_once &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;witty.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_config_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;config&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &#x2F;path&#x2F;to&#x2F;config&#x2F;http.PHP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; return array(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 	&amp;#39;Http&amp;#39; =&amp;gt; array( &#x2F;&#x2F;Http为类名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 		&amp;#39;redirect&amp;#39; =&amp;gt; false,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 	),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 虽然没有传参数，但因为设置了config文件夹，Witty会先找到config&#x2F;http.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 然后找到Http key，传入该key对应的value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Witty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Http&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更多详情，请浏览&lt;a href=&quot;http:&#x2F;&#x2F;witty.leezhong.com&#x2F;doc&quot;&gt;Witty 官网&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;PS: E 文水平有限，欢迎指出有语病的语句，如果太多的话，可以 Email(healdream#gmail.com)我。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>高性能MySQL小结</title>
            <pubDate>Wed, 05 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mysql-high-performance-tips/</link>
            <guid>https://limboy.me/posts/mysql-high-performance-tips/</guid>
            <description>&lt;p&gt;其实只看到了 1&#x2F;3，先记录一下，等以后有空了再补上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiang-cha-xun-jie-guo-dao-chu-dao-wen-jian&quot;&gt;将查询结果导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL QUERY INTO OUTFILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;sql&#x2F;file&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jiang-mei-ci-cao-zuo-du-dao-chu-dao-wen-jian&quot;&gt;将每次操作都导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... &#x2F;&#x2F;这些操作，及操作的结果都会输出到对应的文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;文件内容大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(none)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; use noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table information for completion of table and column names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; can turn off this feature to get a quicker startup with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; changed
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show tables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Tables_in_noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_category  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_comment   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_post      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_res       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_res  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_tag       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_user      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.00 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; from test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bar  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.02 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-zhuang-tai-ji-qi-ta-xin-xi&quot;&gt;显示 MySQL 当前状态及其他信息&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL当前状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL的变量信息，如version&#x2F;data_dir等等
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES LIKE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%home%&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取包含home的变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;&#x2F;显示当前表的状态，注意后面的&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;，垂直显示结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DESCRIBE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取表结构
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FULL COLUMNS FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;类似上面
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-de-lian-jie-zhuang-kuang&quot;&gt;显示 MySQL 当前的连接状况&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 使用mysqladmin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysqladmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 或进入到mysql cli后执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show processlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 结果大概是这样
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Id  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Host      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;db   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Info             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;409 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;localhost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NULL  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-timestamp&quot;&gt;关于 TIMESTAMP&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个 TIMESTAMP 字段会随着表其他字段的更新而自动更新，之后的 TIMESTAMP 字段则不会。&lt;&#x2F;li&gt;
&lt;li&gt;TIMESTAMP 的范围是：1970-2037；而 DATETIME 的范围是：1000-9999&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yi-chu-zhong-fu-de-xing&quot;&gt;移除重复的行&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 注意这个IGNORE参数，如果没加的话会报错，且执行失败
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 假设要去除a,b项重复的行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ALTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; IGNORE TABLE tbl ADD UNIQUE INDEX(a,b&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-kan-dang-qian-zai-cao-zuo-de-shu-ju-ku&quot;&gt;查看当前在操作的数据库&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; DATABASE(&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在 mysql 的提示符上动点手脚&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# edit &#x2F;etc&#x2F;mysql&#x2F;my.cnf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[mysql]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#no-auto-rehash	# faster start of mysql but no tab completition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;u@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;d]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fu-zhi-yi-ge-biao&quot;&gt;复制一个表&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CREATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE tbl1 LIKE tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INSERT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; INTO tbl1 SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 也可以先用mysqladmin导出数据，再导入
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ding-chang-biao-yu-bian-chang-biao&quot;&gt;定长表与变长表&lt;&#x2F;h3&gt;
&lt;p&gt;包含任何 varchar、text 等变长字段的数据表，即为变长表，反之则为定长表。所以 CHAR 和 VARCHAR 不共存&lt;&#x2F;p&gt;
&lt;p&gt;CHAR(30)，最多可以容纳 30 个字符，但如果字符数不到 30 个的话，也会占用这些空间，只不过会在后面补上空格，但我们查询时又会发现尾部没有空格，这是因为空格已经被 CHAR 处理掉了。&lt;&#x2F;p&gt;
&lt;p&gt;VARCHAR(30)，也是最多可以容纳 30 个字符，但如果不足 30 个的话，有多少字符占多少空间，不会浪费。&lt;&#x2F;p&gt;
&lt;p&gt;变长表的优势在于有效利用空间，但由于记录大小不同，在其上进行许多删除或更新操作会使表中的碎片增多，需要定期 OPTIMIZE TABLE 以保持性能。&lt;&#x2F;p&gt;
&lt;p&gt;定长表的查询，检索和更新速度都比变长表快，但占用的空间也大。&lt;&#x2F;p&gt;
&lt;p&gt;PS:MySQL 5.0.3 之后 VARCHAR 的最大字符数为 65535&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-huan-bian-ma&quot;&gt;转换编码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NAMES utf8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# CHARSET utf8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ju-he-han-shu&quot;&gt;聚合函数&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; + HAVING + GROUP BY (HAVING可以看作后置WHERE语句&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;MIN&#x2F;MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SUM&#x2F;AVG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DISTINCT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;所有的这些聚合函数加上GROUP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; BY之后，都只对GROUP BY部分有效。(不好理解，忽略&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bing-fa-kong-zhi&quot;&gt;并发控制&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;du-suo-gong-xiang-suo-xie-suo-pai-ta-suo&quot;&gt;读锁(共享锁)&#x2F;写锁(排他锁)&lt;&#x2F;h4&gt;
&lt;p&gt;当某一用户修改一部分数据时，MySQL 会禁止其他用户读取同一数据。大多数时，MySQL 都是以透明的方式实现锁的内部管理&lt;&#x2F;p&gt;
&lt;h4 id=&quot;suo-li-du&quot;&gt;锁粒度&lt;&#x2F;h4&gt;
&lt;p&gt;只锁定部分修改的数据，而不是所有的资源，或者只对要修改的数据片精确加锁。任何时间，在给定的资源上，被加锁的数据量越小，就可以允许更多的并发修改，只要相互之间互不冲突即可&lt;&#x2F;p&gt;
&lt;p&gt;这么做的问题是加锁也会消耗系统资源。如获得锁，检查锁是否已解除，以及释放锁等，都会增加系统开销。如果系统花费大量时间来管理锁，而不是读&#x2F;写数据，那么系统整体性能都可能会受到影响&lt;&#x2F;p&gt;
&lt;p&gt;所谓的锁策略，就是在锁开销和数据安全之间寻求一种平衡。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;biao-suo-myisam&quot;&gt;表锁(MyISAM)&lt;&#x2F;h4&gt;
&lt;p&gt;开销最小，但不适合频繁写操作&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-suo-innodb&quot;&gt;行锁(InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;可以支持最大的并发处理，但同时也会增加开销（InnoDb），由存储引擎实现，而不是 MySQL 服务器&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-wu&quot;&gt;事务&lt;&#x2F;h4&gt;
&lt;p&gt;一组原子性的 SQL 语句。要么全部执行(commit)，要么全部不执行(rollback)&lt;&#x2F;p&gt;
&lt;p&gt;正像锁粒度的增加会导致锁开销的增加一样，这种事务处理中的额外安全措施，也会导致数据库服务器要完成更多的额外工作&lt;&#x2F;p&gt;
&lt;p&gt;MySQL 默认操作是 AutoCommit，这意味着除非显示地开始一个事务，否则将把每个 SQL 操作视为一个单独事务自动执行&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-suo&quot;&gt;死锁&lt;&#x2F;h4&gt;
&lt;p&gt;两个或多个事务在同一资源上相互占用，并请求加锁时，导致的恶性循环现象&lt;&#x2F;p&gt;
&lt;p&gt;解决办法：死锁检测&#x2F;死锁超时机制。InnoDb 处理死锁的方法是，回滚拥有最少排他行级锁的事务。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yin-shi-he-xian-shi-suo-ding&quot;&gt;隐式和显式锁定&lt;&#x2F;h4&gt;
&lt;p&gt;InnoDb: 一个事务在执行过程中的任何时候，都可以获得锁，但只有在执行 COMMIT 或 ROLLBACK 语句后，才可以释放这些锁。&lt;&#x2F;p&gt;
&lt;p&gt;InnoDb 也支持显式锁定，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... LOCK IN SHARE MODE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... FOR UPDATE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;duo-ban-ben-bing-fa-kong-zhi&quot;&gt;多版本并发控制&lt;&#x2F;h4&gt;
&lt;p&gt;MySQL 事务性存储引擎，如 InnoDb，不是简单使用行加锁机制，而是 MVCC 和行加锁机制关联使用。&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 不是 MySQL 独有的技术，其他如 Oracle, Postgresql 等都在使用&lt;&#x2F;p&gt;
&lt;p&gt;可以将 MVCC 设想成一种行级加锁的变形，它避免了很多情况下的锁操作，大大降低了系统的开销&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 是通过及时保存在某些时刻的数据快照，而得以实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所谓&amp;quot;版本号&amp;quot;，其实是 InnoDb 维护的一个计数器，每启动一个事务，计数器随着递增，并将该号作为事务的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[INSERT]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为新增行的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[DELETE]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为被删除行的删除号，该行并未立即被物理删除&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE]&lt;&#x2F;strong&gt;
INSERT+DELETE&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[SELECT]&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;行版本号不大于事务版本号。这确保了该行在事务开始时已存在，或者由当前事务创建、更新&lt;&#x2F;li&gt;
&lt;li&gt;行删除号不存在，或者删除号大于事务版本号。这确保事务开始前行未被删除&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于被标记为删除的行，InnoDb 有专门的线程负责物理删除，当行满足如下条件时认为可以将其物理删除：当前不存在版本号小于该行删除号的事务，这样可以确保不会有事务再引用到该行&lt;&#x2F;p&gt;
&lt;p&gt;保存这些额外记录的好处，是使大多数读操作都不必申请加锁&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-yu-myisam&quot;&gt;关于 MyISAM&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;表加锁。并发低&#x2F;开销少&lt;&#x2F;li&gt;
&lt;li&gt;将每个表存储成两个文件：数据文件(.MYD)和索引文件(.MYI)&lt;&#x2F;li&gt;
&lt;li&gt;使用 CHECK TABLE mytable 和 REPAIR TABLE mytable 来修复表，也可以使用 myisamchk 命令&lt;&#x2F;li&gt;
&lt;li&gt;索引长度不能超过 1000(注意，如果是 utf8 的话，长度 x3)，InnoDb 没有此限制&lt;&#x2F;li&gt;
&lt;li&gt;可以延迟索引。使用表创建选项 DELAY_KEY_WRITE 创建的 MyISAM 表，在 SQL 结束之后，不会将索引的改变数据写入磁盘，而是在内存的键缓冲区中缓存索引改变数据，只有在清理缓冲区或关闭表时才将索引块转到磁盘。对于数据经常改变，并且频繁使用的表，这种模式大大提高了表的处理性能。不过，如果服务器或系统崩溃，索引将肯定损坏，并需要修复&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;guan-yu-innodb&quot;&gt;关于 InnoDb&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;行级锁。并发高&#x2F;开销相对高&lt;&#x2F;li&gt;
&lt;li&gt;高性能&lt;&#x2F;li&gt;
&lt;li&gt;崩溃后自动恢复&lt;&#x2F;li&gt;
&lt;li&gt;主键聚簇索引，辅助索引非聚簇索引(单独索引树)，辅助索引也会包含主键列，所以如果主键列较大，则它的辅助索引也会较大&lt;&#x2F;li&gt;
&lt;li&gt;任何改变 InnoDb 表结构的操作会导致整个表的重建，包括重建所有索引&lt;&#x2F;li&gt;
&lt;li&gt;外键约束&lt;&#x2F;li&gt;
&lt;li&gt;自动提交性能差？&lt;&#x2F;li&gt;
&lt;li&gt;可以显示锁定&lt;&#x2F;li&gt;
&lt;li&gt;不要对 InnoDb 使用不带 WHERE 语句的 count(*)，这会导致 InnoDb 执行全表扫描或索引扫描，而 MyISAM 只需要从相关记录中读取该值即可。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xing-neng-jian-ce&quot;&gt;性能检测&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SET PROFILING = 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;会把执行的语句和执行时间都打印出来，如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Duration   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00011700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00033500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.59868300 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.51746400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00846700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table status like &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还可以针对某个 query 进行更细致的分析&lt;&#x2F;p&gt;
&lt;p&gt;也可以使用 FLUSH STATUS + SHOW SESSION STATUS&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILE FOR QUERY 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-xun-huan-cun&quot;&gt;查询缓存&lt;&#x2F;h3&gt;
&lt;p&gt;MySQL 在第二次执行相同的 SQL 查询语句时，默认会使用查询缓存。加上&amp;quot;SQL_NO_CACHE&amp;quot;不使用查询缓存&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL_NO_CACHE username, ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-null&quot;&gt;关于 NULL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免 NULL&lt;&#x2F;li&gt;
&lt;li&gt;MySQL 难以优化引用了可空列的查询，它会使索引，索引统计和值更加复杂&lt;&#x2F;li&gt;
&lt;li&gt;即使要在表中存储&amp;quot;没有值&amp;quot;的字段，还是有可能不使用 NULL 的，考虑使用 0 或空字符来代替它。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;suo-yin&quot;&gt;索引&lt;&#x2F;h3&gt;
&lt;p&gt;索引是性能问题的首要原因，先搞定索引，再去搞查询优化&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b-tree-suo-yin&quot;&gt;B-Tree 索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;根节点保存了指向子节点的指针，存储引擎根据指针寻找数据&lt;&#x2F;li&gt;
&lt;li&gt;当一个数据块不能放下所有索引字段数据时，就会形成树形的根节点或分支节点，所以树的深度和广度是由数据量决定的&lt;&#x2F;li&gt;
&lt;li&gt;每个节点包含了下层节点的链接，(没有相邻节点链接，上层链接可有可没有)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设建立了一个(last_name, first_name, birth)的索引，此索引对于以下类型可用&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;匹配全名 (例如可以找到一个叫Cuba Allen，并且出生于1960-01-01的人)
&lt;&#x2F;span&gt;&lt;span&gt;匹配最左前缀 (例如可以找到姓为Allen的人，仅适用于索引中的第一列)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于树的节点是排好序的，它们可以用于查找和 ORDER BY 查询&lt;&#x2F;p&gt;
&lt;p&gt;B-Tree 的局限在于如果查询不是从索引列的最左边开始，就无法使用索引。所以索引列的顺序至关重要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-xing-neng-suo-yin-ce-lue&quot;&gt;高性能索引策略&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ge-chi-lie&quot;&gt;隔离列&lt;&#x2F;h4&gt;
&lt;p&gt;如果在查询中没有隔离索引的列，MySQL 通常不会是使用索引。&amp;quot;隔离&amp;quot;列意味着它不是表达式的一部分，也没有位于函数中。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-zhui-suo-yin&quot;&gt;前缀索引&lt;&#x2F;h4&gt;
&lt;p&gt;找到合适的前缀长度(计算全列的选择性，并使前缀的选择性接近于它)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCT city&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCE LEFT(city, 4&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也要注意如果数据分布非常不均匀，可能就会有问题&lt;&#x2F;p&gt;
&lt;p&gt;前缀索引能很好的减少索引的大小及提高速度，但 MySQL 不能在 ORDER BY 和 GROUP BY 中使用索引&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ju-ji-suo-yin-innodb&quot;&gt;聚集索引 (InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;当表有聚集索引时，它的数据行实际保存在索引的叶子页(而不是指针)，所谓&amp;quot;聚集&amp;quot;就是指实际的数据行和相关的键值都保存在一起，每个表只能由一个聚集索引(主索引)，因为不能以此把行保存在两个地方&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以把相关数据保存在一起。如果没有使用聚集，读取每个邮件都会访问磁盘&lt;&#x2F;li&gt;
&lt;li&gt;数据访问快。聚集索引把索引和数据都保存到了同一棵 B-Tree 中，因此从聚集索引中取得的数据通常比在非聚集索引进行查找要快&lt;&#x2F;li&gt;
&lt;li&gt;聚集索引能最大限度地提升 I&#x2F;O 密集负载的性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;更新索引列代价是庞大的，因为它强制 InnoDb 把每个更新的行移到新位置&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引会比较大，因为它们的叶子包含了被引用行的主键列&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引访问需要两次索引查找&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;fu-gai-suo-yin&quot;&gt;覆盖索引&lt;&#x2F;h4&gt;
&lt;p&gt;所有满足查询需要的数据的索引(只需要读取索引，不需要再读取行数据)，比如这条 SQL 语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; state_id, city, address FROM userinfo WHERE state_id = 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果只在 state_id 上建索引，则 city,address 都要从表里读取行数据&lt;&#x2F;p&gt;
&lt;p&gt;如果建立 index (state_id, city, address)，既能使用 state_id 索引，同时又可以使用覆盖索引，速度就快多了&lt;&#x2F;p&gt;
&lt;h4 id=&quot;duo-yu-he-zhong-fu-suo-yin&quot;&gt;多余和重复索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 允许你在统一列上创建多个索引，所以 MySQL 不得不单独维护每一个索引&lt;&#x2F;li&gt;
&lt;li&gt;如果列(A,B)上有索引，那么另外一个列(A)上的索引就是多余的(B-Tree)&lt;&#x2F;li&gt;
&lt;li&gt;大多数情况下，多余索引都是不好的，为了避免它，应该扩展已有索引，而不是添加新索引&lt;&#x2F;li&gt;
&lt;li&gt;索引越多，更新索引的开销越大，尤其是在数据很多的情况下&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>Unix编程艺术——Unix哲学</title>
            <pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-art-of-unix-programming/</link>
            <guid>https://limboy.me/posts/the-art-of-unix-programming/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1467587&#x2F;&quot;&gt;Unix 编程艺术&lt;&#x2F;a&gt;主要介绍了 Unix 系统领域中的设计和开发哲学、思想文化体系、原则与经验。此文大致摘录了 Unix 的哲学。&lt;&#x2F;p&gt;
&lt;p&gt;web 程序员也应该看看此书，软件开发和 web 开发很多地方都是相通的。看完之后，我甚至觉得 Unix 哲学对于做人也有很大的参考价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-yuan-ze-shi-yong-jian-ji-de-jie-kou-pin-he-jian-dan-de-bu-jian&quot;&gt;模块原则 (使用简洁的接口拼合简单的部件)&lt;&#x2F;h3&gt;
&lt;p&gt;计算机编程的本质就是控制复杂度&lt;&#x2F;p&gt;
&lt;p&gt;要编写复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂的软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-xi-yuan-ze-qing-xi-sheng-yu-ji-qiao&quot;&gt;清晰原则 (清晰胜于技巧)&lt;&#x2F;h3&gt;
&lt;p&gt;维护成本是高昂的，在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己看的。&lt;&#x2F;p&gt;
&lt;p&gt;在 Unix 传统中，这个建议不仅意味着代码注释。良好的 Unix 实践同样信奉在选择算法和实现时就应该考虑到将来的可扩展性。为了取得程序一丁点性能的提升就大幅增加技术的复杂性和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zu-he-yuan-ze-she-ji-shi-kao-lu-pin-jie-zu-he&quot;&gt;组合原则 (设计时考虑拼接组合)&lt;&#x2F;h3&gt;
&lt;p&gt;如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。&lt;&#x2F;p&gt;
&lt;p&gt;在输入方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。在经典的 Unix 下，多数程序都尽可能采用简单过滤器的形式，即将一个简单的文本输入流处理为一个简单的文本流输出。&lt;&#x2F;p&gt;
&lt;p&gt;Unix 程序员偏爱这种做法并不是因为它们仇视视图界面，而是因为如果程序不采用简单的文本输入输出流，它们就极难衔接。&lt;&#x2F;p&gt;
&lt;p&gt;要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑到文本流另一端的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-chi-yuan-ze-ce-lue-tong-ji-zhi-fen-chi-jie-kou-tong-yin-qing-fen-chi&quot;&gt;分离原则 (策略同机制分离，接口同引擎分离)&lt;&#x2F;h3&gt;
&lt;p&gt;把策略同机制揉成一团有两个负面影响：一来会使策略变得死板，难以适应用户需求的改变，二来也意味着任何策略的改变都可能会动摇机制。&lt;&#x2F;p&gt;
&lt;p&gt;可以将应用程序分成可以协作的前端和后端进程，通过 socket 专用应用协议进行通讯。这种双端设计方法大大降低了整体复杂度，bug 有望减少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-ji-yuan-ze-she-ji-yao-jian-ji-fu-za-du-neng-di-jiu-di&quot;&gt;简洁原则 (设计要简洁，复杂度能低就低)&lt;&#x2F;h3&gt;
&lt;p&gt;来自多方面的压力常常会让程序变得复杂(bug 更多)，其中一种压力就是来自技术上的虚荣心理。Unix 程序员相互比的是谁能够做到&amp;quot;简洁而漂亮&amp;quot;并以此为荣。&lt;&#x2F;p&gt;
&lt;p&gt;更为常见的是，过度的复杂性往往来自于项目的需求，要避免这种状况，就需要鼓励一种软件文化，以简洁为美，人人对庞大复杂的东西群起而攻之。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lin-se-yuan-ze-chu-fei-que-wu-ta-fa-bu-yao-bian-xie-pang-da-de-cheng-xu&quot;&gt;吝啬原则 (除非确无它法，不要编写庞大的程序)&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;大&amp;quot;有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。由于人们对花费了大量精力才做出来的东西难以割舍，结果导致在庞大的程序中把投资浪费的注定要失败或者并非最佳的方案上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tou-ming-yuan-ze-she-ji-yao-ke-jian-yi-bian-shen-cha-he-diao-shi&quot;&gt;透明原则 (设计要可见，以便审查和调试)&lt;&#x2F;h3&gt;
&lt;p&gt;软件系统的透明性是指你一眼就能够看出软件是在做什么以及怎样做的。显示性是指程序带有监视和显示内部状态的功能。&lt;&#x2F;p&gt;
&lt;p&gt;设计时如果充分考虑到这些要求会给整个项目全过程都带来好处。至少，调试选项的设置应该尽量不要在事后，而应该在设计之初便考虑进去。这是考虑到程序不但应该能够展示其正确性，也应该能够把原开发者解决问题的思维模型告诉后来者。&lt;&#x2F;p&gt;
&lt;p&gt;程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。&lt;&#x2F;p&gt;
&lt;p&gt;出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对它进行操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-zhuang-yuan-ze-jian-zhuang-yuan-yu-tou-ming-yu-jian-ji&quot;&gt;健壮原则 (健壮源于透明与简洁)&lt;&#x2F;h3&gt;
&lt;p&gt;软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。&lt;&#x2F;p&gt;
&lt;p&gt;大多数软件禁不起磕碰，毛病很多，就是因为过于复杂，很难通盘考虑。如果不能够正确理解一个程序的逻辑，就不能确信其是否正确，也就不能在出错时修复它。&lt;&#x2F;p&gt;
&lt;p&gt;这也就带来了让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要有两种方法：透明化和简洁化。&lt;&#x2F;p&gt;
&lt;p&gt;上面曾说过，软件的透明性就是指一眼就能够看出是怎么回事，即人们不需要绞尽脑汁就能够推断出所有可能的情况，那么这个程序就是简洁的。程序越简洁，越透明，也就越健壮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;biao-shi-yuan-ze-ba-zhi-shi-dai-ru-shu-ju-yi-qiu-luo-ji-zhi-po-er-jian-zhuang&quot;&gt;表示原则 (把知识代入数据以求逻辑质朴而健壮)&lt;&#x2F;h3&gt;
&lt;p&gt;数据要比程序逻辑更容易驾驭。所以如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，应该主动将代码的复杂度转移到数据中去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-su-yuan-ze-jie-kou-bi-mian-biao-xin-li-yi&quot;&gt;通俗原则 (接口避免标新立异)&lt;&#x2F;h3&gt;
&lt;p&gt;最易用的程序就是用户需要学习新东西最少的程序，换句话说最易用的程序就是最切合用户已有知识的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-mo-yuan-ze-wu-hua-ke-shuo-na-jiu-chen-mo&quot;&gt;缄默原则 (无话可说？那就沉默)&lt;&#x2F;h3&gt;
&lt;p&gt;行为良好的程序应该默默工作，绝不唠唠叨叨，碍手碍脚。沉默是金。&lt;&#x2F;p&gt;
&lt;p&gt;简洁是 Unix 程序的核心风格。一旦程序的输出成为另一个程序的输入，就要很容易把需要的数据挑出来。站在人的角度上来说，重要的信息不应该混杂在冗长的程序内部行为信息中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-jiu-yuan-ze-chu-xian-yi-chang-shi-ma-shang-tui-chu-bing-gei-chu-zu-gou-cuo-wu-xin-xi&quot;&gt;补救原则 (出现异常时，马上退出并给出足够错误信息)&lt;&#x2F;h3&gt;
&lt;p&gt;软件在发生错误时也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，这就是最坏的情况了。&lt;&#x2F;p&gt;
&lt;p&gt;宽容地收，谨慎地发。就算输入的数据很不规范，一个设计良好的程序也会尽量领会其中的意义，以尽量与别的程序协作。然后要么抛出异常，要么为工作链的下一环程序输出一个严谨干净正确的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-ji-yuan-ze-zhu-hua-ji-qi-yi-fen-bu-hua-cheng-xu-yuan-yi-miao&quot;&gt;经济原则 (宁花机器一分，不花程序员一秒)&lt;&#x2F;h3&gt;
&lt;p&gt;随着技术的发展，开发公司和大多数用户都能得到廉价的机器，所以这一准则的合理性就显然不用多说了。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们在软件开发中严格遵循这条原则的话，大多数的应用场合应该使用高级语言，如 Perl,Python,Java,Php,甚至 Shell——这些语言可以将程序员从自行管理内存的负担中释放出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-cheng-yuan-ze-bi-mian-shou-gong-hack-jin-liang-bian-xie-cheng-xu-qu-sheng-cheng-cheng-xu&quot;&gt;生成原则 (避免手工 hack,尽量编写程序去生成程序)&lt;&#x2F;h3&gt;
&lt;p&gt;人类很不善于干辛苦的细节工作。因此程序中任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单越抽象，设计者就越容易做对。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-hua-yuan-ze-guo-zao-you-hua-shi-mo-e-zhi-yuan&quot;&gt;优化原则 (过早优化是万恶之源)&lt;&#x2F;h3&gt;
&lt;p&gt;还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更加损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。&lt;&#x2F;p&gt;
&lt;p&gt;先制作原型，再精雕细琢。优化之前先确保能用。&amp;quot;极限编程&amp;quot;宗师 Kent Beck 从另一种不同的文化将这点有效地扩展为：先求运行，再求正确，最后求快。&lt;&#x2F;p&gt;
&lt;p&gt;借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无须优化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-yang-yuan-ze-jue-bu-xiang-xin-suo-wei-bu-er-fa-men-de-duan-yan&quot;&gt;多样原则 (绝不相信所谓&amp;quot;不二法门&amp;quot;的断言)&lt;&#x2F;h3&gt;
&lt;p&gt;Unix 传统有一点很好，即从不相信任何所谓的&amp;quot;不二法门&amp;quot;。Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kuo-zhan-yuan-ze-she-ji-zhao-yan-wei-lai-wei-lai-zong-bi-yu-xiang-lai-de-kuai&quot;&gt;扩展原则 (设计着眼未来，未来总比预想来得快)&lt;&#x2F;h3&gt;
&lt;p&gt;要为数据格式和代码留下扩展的空间，否则就会发现自己常常被原先不明智选择捆住了手脚，因为你无法既要改变它们又要维持对原来的兼容性。&lt;&#x2F;p&gt;
&lt;p&gt;设计协议或是文本格式时，应使其具有充分的自描述性以便可以扩展。要么包含进一个版本号，要么采用独立、自描述的语句、按照可以随时插入新的而不会搞乱格式读取代码的方法组织格式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unix-zhe-xue-yi-yan-yi-bi-zhi&quot;&gt;Unix 哲学一言以蔽之&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-art-of-unix-programming&amp;#x2F;kiss.png&quot;
        width=&quot;468&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>web开发从小工到大家</title>
            <pubDate>Sat, 18 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-development-journeyman-master/</link>
            <guid>https://limboy.me/posts/web-development-journeyman-master/</guid>
            <description>&lt;p&gt;大致总结了一下 web 程序员从小工到大家所需的基础知识，语言，工具，及应该阅读的书籍。&lt;&#x2F;p&gt;
&lt;p&gt;路漫漫其修远兮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fundamental-books&quot;&gt;fundamental (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;code complete 2&lt;&#x2F;li&gt;
&lt;li&gt;the programic programmer&lt;&#x2F;li&gt;
&lt;li&gt;the c programming language 2&lt;&#x2F;li&gt;
&lt;li&gt;linux kernel development&lt;&#x2F;li&gt;
&lt;li&gt;introduction to algorithms 3&lt;&#x2F;li&gt;
&lt;li&gt;head first design patterns&lt;&#x2F;li&gt;
&lt;li&gt;the art of unix programming&lt;&#x2F;li&gt;
&lt;li&gt;http: the definitive guide&lt;&#x2F;li&gt;
&lt;li&gt;refactoring improving the design of existing code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language&quot;&gt;language&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;C&lt;&#x2F;li&gt;
&lt;li&gt;javascript&#x2F;nodejs&lt;&#x2F;li&gt;
&lt;li&gt;php&lt;&#x2F;li&gt;
&lt;li&gt;python&lt;&#x2F;li&gt;
&lt;li&gt;ruby&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tool&quot;&gt;tool&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;version control: git&lt;&#x2F;li&gt;
&lt;li&gt;web server: nginx apache&lt;&#x2F;li&gt;
&lt;li&gt;proxy: haproxy nginx&lt;&#x2F;li&gt;
&lt;li&gt;database: mysql&lt;&#x2F;li&gt;
&lt;li&gt;nosql: mongodb redis&lt;&#x2F;li&gt;
&lt;li&gt;project managment: redmine&lt;&#x2F;li&gt;
&lt;li&gt;bash: rsync iptables curl sed awk&lt;&#x2F;li&gt;
&lt;li&gt;test: ab siege http_load&lt;&#x2F;li&gt;
&lt;li&gt;fulltext search: sphinx lucene xapian coreseek&lt;&#x2F;li&gt;
&lt;li&gt;misc: gearman, jQuery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;master-books&quot;&gt;master (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;rapid development&lt;&#x2F;li&gt;
&lt;li&gt;Agile Software Development, Principles, Patterns, and Practices&lt;&#x2F;li&gt;
&lt;li&gt;peopleware 2&lt;&#x2F;li&gt;
&lt;li&gt;the mythical man-month&lt;&#x2F;li&gt;
&lt;li&gt;getting real&lt;&#x2F;li&gt;
&lt;li&gt;rework&lt;&#x2F;li&gt;
&lt;li&gt;building scalable web sites&lt;&#x2F;li&gt;
&lt;li&gt;high performance mysql&lt;&#x2F;li&gt;
&lt;li&gt;high performance web sites&lt;&#x2F;li&gt;
&lt;li&gt;97 Things Every Programmer Should Know&lt;&#x2F;li&gt;
&lt;li&gt;构建高性能 web 站点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>我对web系统架构的一些思考</title>
            <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-system-architecture/</link>
            <guid>https://limboy.me/posts/web-system-architecture/</guid>
            <description>&lt;p&gt;能力&#x2F;经验有限，不足之处还请指点 :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-zai-jun-heng&quot;&gt;负载均衡&lt;&#x2F;h3&gt;
&lt;p&gt;这里把多台 nginx 反向代理服务器顶在最前面，可以通过 DNS 简单轮循或绑定虚拟 IP 的方法来实现分流。之所以用 nginx 是因为它的稳定、强大、高性能、低开销、以及对高并发的支持。也可以换成 LVS，从效率上来说肯定会比 nginx 高，因为工作在 OSI 的第四层(传输层)，可以修改目标 IP。甚至可以在第二层(数据链路层)修改 MAC 地址(DR 模式，相当于路由器)，让数据包直接到达目标服务器。不过工作在下层虽然效率提高了，但相应的控制能力也少了，比如无法根据 http url 来进行负载均衡，缓存页面执行结果等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-ceng&quot;&gt;应用层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层是 web 服务器，主要任务是从服务层获取需要的数据，然后渲染到模板，返回给前端服务器。可以理解为 Controller-View，没有 Model，因为 Model 被移到了一下层，用来单独提供服务。这么做的原因是方便分布式部署，单元测试，避免单点故障。所以这层是相对较轻松的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-wu-ceng&quot;&gt;服务层&lt;&#x2F;h3&gt;
&lt;p&gt;这一层的任务是提供模块的接口，供上层调用。如相册模块，需要有创建相册&#x2F;显示相册图片&#x2F;删除图片等等功能。至于服务的形式就很灵活了，如 REST&#x2F;RPC&#x2F;SOAP 等等。&lt;&#x2F;p&gt;
&lt;p&gt;这一层的任务就比较艰巨了，要保证接口的稳定性，要处理复杂的逻辑，实现算法，与存储层交互等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cun-chu-ceng&quot;&gt;存储层&lt;&#x2F;h3&gt;
&lt;p&gt;存储层是整个系统的核心，一旦数据丢失，网站就成了空架子了，所以一定要及时备份。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;huan-cun-ceng&quot;&gt;缓存层&lt;&#x2F;h4&gt;
&lt;p&gt;在网站流量不大时，缓存是可选层。随着流量的增大，缓存的重要性也越来越突出，甚至可以把内存当硬盘来用，以保证快速响应。如何提高缓存命中率，设置缓存失效时间等等缓存的处理就变得尤为重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-ku-ceng&quot;&gt;数据库层&lt;&#x2F;h4&gt;
&lt;p&gt;这个可以讲的就太多了，多数系统的瓶颈也在这。总体说来会经历主从服务器，垂直分区和水平分区这三个过程。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fen-bu-shi-cun-chu&quot;&gt;分布式存储&lt;&#x2F;h4&gt;
&lt;p&gt;这里会遇到的问题是文件的同步，如何分配给用户最合适的服务器，磁盘 I&#x2F;O 等等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dui-lie-fu-wu-qi&quot;&gt;队列服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这也是大型网站的标配，处理日志&#x2F;分析用户行为&#x2F;发送邮件等等都会用到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-kong-fu-wu-qi&quot;&gt;监控服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这么多的服务器，我们需要知道各个服务器当前的运行状况，如磁盘 I&#x2F;O，CPU 使用率，内存使用率，负载等等，一旦发现异常可以及时处理。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ri-zhi-fu-wu-qi&quot;&gt;日志服务器&lt;&#x2F;h4&gt;
&lt;p&gt;排查故障就靠它了，比如有骇客入侵，某个页面访问很慢，出现 500 错误，慢查询等等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bei-fen-fu-wu-qi&quot;&gt;备份服务器&lt;&#x2F;h4&gt;
&lt;p&gt;这个重要性不言而喻，比如数据库宕机，某张表损坏，数据库磁盘错误等等。没有了它，辛辛苦苦积攒下来的数据就这么一去不复返了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>浅谈分布式存储的路由设置</title>
            <pubDate>Tue, 14 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/distributed-storage-route/</link>
            <guid>https://limboy.me/posts/distributed-storage-route/</guid>
            <description>&lt;p&gt;程序设计中很重要的一个思想是：隔离变化的部分。在开发之前就应该想到哪些部分在不远的将来是可能会变的或一定会变的，开发时，就应该将这些部分隔离出来，同时可以优雅地进行控制。&lt;&#x2F;p&gt;
&lt;p&gt;对于大数据量高并发的网站，存储经常会有变动：添加&#x2F;移除数据库服务器、分表分库、添加&#x2F;移除缓存服务器、添加&#x2F;移除文件存储服务器等等。怎样才能在这些存储设施调整后，代码上只要进行局部的修改就行了，这就是本文要探讨的主题：分布式存储的路由设置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-jian-cun-chu-lu-you&quot;&gt;文件存储路由&lt;&#x2F;h3&gt;
&lt;p&gt;平时我们操作文件时，一般都会用 file_put_contents&#x2F;file_get_contents&#x2F;fopen 之类的文件操作函数，这就需要给出文件的路径，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_get_contents(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;destfile.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_put_contents(dirname(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;destfile.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确实挺方便，但随着文件数的增多，需要对文件重新规划，如原来是&#x27;dir&#x2F;abcd.txt&#x27;，要调整为&#x27;dir&#x2F;ab&#x2F;abcd.txt&#x27;。这时就只能去手动修改代码，结果很有可能改了这，忘了那。比如有些是通过 file_put_contents 方法；有些是通过 fopen 方法；有些不需要调整，有些需要调整等等。&lt;&#x2F;p&gt;
&lt;p&gt;如果有文件路由机制，事情就好办了，看看下面的使用代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;basepath&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;DATA_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;file&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;test.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;实例化 File 类后，只需传入文件名，加上要执行的操作，最后 execute()一下就行了，不必关心文件的存储状态。如果要重新调整文件的存储结构，对客户端是透明的，也就是说不用对代码进行任何调整。&lt;&#x2F;p&gt;
&lt;p&gt;调整的规则写在 File 类里&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_File
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 自定义文件存储规则，对使用者是透明的。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 将abcd.txt保存为ab&#x2F;cd&#x2F;abcd.txt
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pathinfo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$extension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;extension&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt; ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pathinfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;filename&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;basepath&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;DIRECTORY_SEPARATOR&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mkdir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0777&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$filepath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fhn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$extension&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果要改规则，只要修改_route 方法就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huan-cun-lu-you&quot;&gt;缓存路由&lt;&#x2F;h3&gt;
&lt;p&gt;以 memcached 为例，可能会有多个 memcached 服务器，每个 memcached 服务器的职责可能还不一样，还可能经常变动。如果在代码里强行指定连接某台 memcached 服务器，一旦变动，事情就麻烦了。这时可以做个 memcached 路由，如果业务逻辑或 memcached 服务器有变，就在这个路由里做文章。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Cache_Adapter_Memcache&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;servers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;persistent&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;array (&amp;#39;server2&amp;#39; =&amp;gt; array(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.1.100&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;port&amp;#39; =&amp;gt; 11211,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;persistent&amp;#39; =&amp;gt; false,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;自定义路由&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Cache_Adapter_Memcache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_Cache_Adapter_Memcache
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 自定义规则，根据key来指定memcache服务器，如果不指定的话，memcache会自动从连接池中取一个连接。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; demo
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;substr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sess&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_memcache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$server1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timeout&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将来只要调整_route 方法即可，调用代码不变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-ku-lu-you&quot;&gt;数据库路由&lt;&#x2F;h3&gt;
&lt;p&gt;数据库是应用的核心，随着数据量和并发的增大，分表分库是早晚的事，通过路由机制可以实现只修改路由方法，而保持调用的代码不变。为了方便演示，简单封装了一下 PDO。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Database&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;servers&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;server1&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;dsn&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mysql:dbname=test;host=127.0.0.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;root&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;password&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;123456&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&amp;#39;server2&amp;#39; =&amp;gt; array(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;dsn&amp;#39; =&amp;gt; &amp;#39;mysql:dbname=test;host=192.168.1.100&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;user&amp;#39; =&amp;gt; &amp;#39;root&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;	&amp;#39;password&amp;#39; =&amp;gt; &amp;#39;123456&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 实际情况中，SQL都是通过Query Builder或ORM在内部拼接而成的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$row&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$row&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;username&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看上去我们好像执行了 query 里的 SQL 语句，但经过_route 方法转换后就不一定了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;自定义路由&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Core_Database
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 根据SQL的内容，选择不同的数据库服务器，不同的数据库，不同的表
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_route&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strtolower(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strpos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;preg_match(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;`id` = (&lt;&#x2F;span&gt;&lt;span&gt;[0-9]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;empty(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$match&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				{
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$tbl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;				}
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;from user1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 如果需要连接到其他的数据库服务器，重写_conn方法
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_conn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sql&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里直接解析 SQL 确实暴力了点，实际使用中应该是解析 Query Builder 或 ORM，不过能够说明问题就行了。这样，业务逻辑改变或者数据库服务器变动都可以在_route 方法里修改，使用时，代码无须任何改动。&lt;&#x2F;p&gt;
&lt;p&gt;如果规则很复杂，可以单独写一个 route 类，在_route 方法里调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-ma-xia-zai&quot;&gt;源码下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;storage-route&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;storage-route&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>inotify-rsync实时同步脚本</title>
            <pubDate>Mon, 13 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/inotify-rsync/</link>
            <guid>https://limboy.me/posts/inotify-rsync/</guid>
            <description>&lt;h3 id=&quot;wei-shi-yao-yao-xie-zhe-ge-jiao-ben&quot;&gt;为什么要写这个脚本&lt;&#x2F;h3&gt;
&lt;p&gt;rsync 是 linux 下一款非常强大的同步工具，采用差异同步的方法，只上传文件&#x2F;文件夹的不同部分，同时可以对上传部分先进行压缩，所以 rsync 的传输效率是很高的。&lt;&#x2F;p&gt;
&lt;p&gt;但 rsync 也有缺点，最大的问题就是每次执行 rsync 命令都会遍历目标目录，当文件不多时，这没什么问题，一旦文件数到了一定规模，那么每次遍历都会消耗很多资源。但事实上改动的文件并不多，如果可以只 sync 改动的文件，问题就迎刃而解了。&lt;&#x2F;p&gt;
&lt;p&gt;这时就得请出本文的另一个主角：inotify。inotify 是一种文件系统的变化通知机制，如文件增加、删除等事件可以立刻让用户态得知。要使用 inotify，linux 的内核版本不能低于 2.6.13&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lzyy-laptop 2.6.32-26-generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#48-Ubuntu SMP Wed Nov 24 09:00:03 UTC 2010 i686 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但 inotify 只提供了 C 语言接口，不方便调用，所以我们需要先安装&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rvoicilas&#x2F;inotify-tools&#x2F;wiki&#x2F;&quot;&gt;inotify-tools&lt;&#x2F;a&gt;，大多数的 linux 发行版应该都可以直接通过 apt-get 或 yum 来安装。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiao-ben-shuo-ming-yu-shi-yong&quot;&gt;脚本说明与使用&lt;&#x2F;h3&gt;
&lt;p&gt;其实&lt;a href=&quot;http:&#x2F;&#x2F;blog.chinaunix.net&#x2F;u&#x2F;32831&#x2F;showart_1289758.html&quot;&gt;前人&lt;&#x2F;a&gt;已经做了类似的工作，不过有些地方尚未完善(如删除文件的同步)，于是我改进和简化了一下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-wu-duan&quot;&gt;服务端&lt;&#x2F;h3&gt;
&lt;p&gt;以下是服务端脚本，运行这段脚本后，这个机器上对应的文件夹将会同步到其他机器上&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;###########################
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 在这里配置本地文件夹,目标host,目标的rsync_module。rsync_module在同步机器的&#x2F;etc&#x2F;rsyncd.conf文件中配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 逗号前后不要有空格
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sync[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;local&#x2F;dir,1.2.3.4,test&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# localdir,host,rsync_module
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# sync[1]=&amp;#39;&#x2F;path&#x2F;to&#x2F;local&#x2F;dir,host,rsync_module&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;###########################
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sync[@]&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $2}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;,&amp;quot; &amp;#39;{print $3}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inotifywait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -mrq --timefmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%d&#x2F;%m&#x2F;%y %H:%M&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --format  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%T %w%f %e&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; CLOSE_WRITE,create,move,delete  $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read  date time file event
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;			MODIFY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;CREATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MOVE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MODIFY,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;CREATE,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MODIFY,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;4913&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;~&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;rsync -avz --exclude=&amp;#39;*&amp;#39; --include=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;::$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# echo $cmd
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;				;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			MOVED_FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;MOVED_FROM,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;DELETE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;DELETE,ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;4913&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;~&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;rsync -avz --delete-excluded --exclude=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;::$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# echo $cmd
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;				;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;esac
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行脚本&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;cd &#x2F;path&#x2F;to&#x2F;inotify-rsync
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; +x inotify-rsync.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.&#x2F;inotify-rsync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以把这个脚本设置为开机启动，这样就可以自动同步了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-bu-duan&quot;&gt;同步端&lt;&#x2F;h3&gt;
&lt;p&gt;同步机器上要做两件事&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. 设置&#x2F;etc&#x2F;rsyncd.conf 文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# vim &#x2F;etc&#x2F;rsyncd.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 这个test就是上面脚本中用到的rsync_module名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# path指定同步过来的文件存放的路径
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 如果只允许部分ip的机器进行同步的话，设置allow为 192.168.1.1&#x2F;100 类似的格式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[test]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;path&#x2F;to&#x2F;your&#x2F;dir
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;allow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F; highlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;**2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 启动rsync daemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; highlight console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --daemon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;金山的周洋同学用 C++写了个&lt;a href=&quot;http:&#x2F;&#x2F;hi.baidu.com&#x2F;johntech&#x2F;blog&#x2F;item&#x2F;f8bdaec8fb3c268dc81768c0.html&quot;&gt;Sersync&lt;&#x2F;a&gt;，也是利用的 inotify+rsync 来实现实时同步，有兴趣的可以关注一下&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>看了Solar框架的几点感触</title>
            <pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/solar/</link>
            <guid>https://limboy.me/posts/solar/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;solarphp.com&#x2F;&quot;&gt;Solar 框架&lt;&#x2F;a&gt;，大家可能不是很熟悉，我也是看了这篇文章:&lt;a href=&quot;http:&#x2F;&#x2F;paul-m-jones.com&#x2F;archives&#x2F;1113&quot;&gt;The Future of Zend Framework is Solar&lt;&#x2F;a&gt;后，眼前一亮，就花了点时间了解了一下。标题很吸引眼球，不过确实也把 Solar 的一些特性通过对比的方式很好地展现出来了，下面是我总结的几点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-gou-jian-fang-fa&quot;&gt;全局构建方法&lt;&#x2F;h3&gt;
&lt;p&gt;很多框架都没有做到这点，或者说没有意识到这点，要实例化一个类时，可以 new，可以 getInstance()，可以 factory，参数的传递也没有统一的规范。Solar 这点做得很好&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Solar_Base &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; note that the config property is named for the class
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; with an underscore prefix.  this lets us collect the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; parent config defaults as well.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_Solar_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;one&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;two&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;three&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 Solar 在实例化一个类时是通过一个全局的 factory 方法来实现的，同时参数的传递也很讲究，只能传递一个 config 数组，当然这个 config 可以从配置中读取。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-yi-de-config-diao-yong&quot;&gt;统一的 config 调用&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 在运行时只调用一个 config 文件，这个跟 yii 有点类似，Kohana 则是把配置文件打得很散。这样做的好处是可以避免在运行时多次读取配置文件，影响效率，而且配置文件一多的话也容易乱。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 的 config 配置里有几项是特殊项，如 ini_set,registry_set。还有一个很重要的特性是将类名作为 key，然后将该类的属性作为值，运行时这些值将自动覆盖类的默认值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * ini_set values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ini_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error_reporting&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_ALL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;E_STRICT&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;display_errors&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;html_errors&amp;#39;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;session.save_path&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;tmp&#x2F;session&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;date.timezone&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;UTC&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * auto-register some default objects for common use. note that these are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * lazy-loaded and only get created when called for the first time.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;registry_set&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;sql&amp;#39;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_User&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;model_catalog&amp;#39;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Model_Catalog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mail_transport&amp;#39;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Mail_Transport&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;controller_front&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * sql adapter to use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Sql_Adapter_Sqlite&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * front controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Controller_Front&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;classes&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_App&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;disable&amp;#39;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;base&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;default&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;routing&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有一点我觉得 Solar 做得不太好，就是把类的属性的默认值放在了类里，而不是配置文件里。将来如果因为某个属性导致系统出问题，调试起来将会很困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quan-ju-zhu-ce-qi-xiao-mie-dan-li&quot;&gt;全局注册器(消灭单例)&lt;&#x2F;h3&gt;
&lt;p&gt;通过全局注册器就可以在整个应用程序中共享内容，这个内容可以是字符串&#x2F;数组&#x2F;对象等等。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; script 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个就是最简单的存取，也可以设置为 lazy-loading，就是不直接存对象，而是类名和 config，这样只有到真正需要时才实例化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar_Registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Example&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过这种方法，其实就实现了单例。现在很多框架都在大力打压单例，Zend Framework 更是在 2.0 的 roadmap 里提出要尽可能地消灭单例，不在类的内部实现单例方法，因为这样的话子类就很难扩展，尤其是在单例里又加入了一些特有的逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-chang-ji-zhi&quot;&gt;异常机制&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 的异常机制也有自己的特点，做得很细致。自带了 16 个常用异常，如 DirNotFound&#x2F;FileNotReadable 等等，不过感觉这块有点过设计了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;My_Example_Class&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错的类名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ERR_SOMETHING_WRONG&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;Exception类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Something is wrong.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;出错信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;附加信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Solar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$exception&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yi-lai-zhu-ru&quot;&gt;依赖注入&lt;&#x2F;h3&gt;
&lt;p&gt;所谓依赖注入(dependency injection)，就是某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 一般是把要注入的类定义在 config 里，比如 Auth 类要用到 Cache，但不确定具体使用时会用到哪个 Cache，此时可以通过配置 config 文件来实现&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Auth_Adapter&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;cache&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;adapter&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Solar_Cache_Adapter_Memcache&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;port&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11211&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;timeout&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样 Auth 类就会使用 Memcache 作为缓存引擎。可以在类内部定义多个注入点，这样就可以使用不同的类来完成同样的目的，只要该类有特定的方法。Zend Framework 在 2.0 的 roadmap 中也提到&amp;quot;All components &lt;strong&gt;MUST&lt;&#x2F;strong&gt; allow for dependency injection&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;依赖注入可以让模块之间更加松耦合，比如之前用的是 XCache 缓存殷勤，后来由于业务变动要使用 Memcache 引擎，这时只需在配置文件里修改一下缓存类型就行了，多省事啊。&lt;&#x2F;p&gt;
&lt;p&gt;我们学习各种设计模式，最终都是为了一个目的：应对变化。而依赖注入可以让我们更加从容地应对变化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gua-pei-qi&quot;&gt;适配器&lt;&#x2F;h3&gt;
&lt;p&gt;使用适配器是依赖注入的基础，适配器其实就是一个抽象基类，所有的子类都必须继承该抽象基类。这样才能保证在使用依赖注入时，一定存在某个特定方法。比如上面说到的 Auth 引用缓存问题，因为所有的缓存都是继承 Solar_Cache_Adapter 而来，所以一定会有 save 方法，Auth 在调用缓存时就可以放心地 save 了。&lt;&#x2F;p&gt;
&lt;p&gt;Solar 内部使用了大量的 Adapter，目的就是为了方便依赖注入。可能系统提供的几个类都不适合具体应用，这时只要继承 Adapter，自己写一个类，然后加到配置文件里就行了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;Solar 框架还是值得看一看的，即使不打算拿他来做应用。也可以关注一下 Zend Framework 2.0，如果真的实现了&lt;a href=&quot;http:&#x2F;&#x2F;framework.zend.com&#x2F;wiki&#x2F;display&#x2F;ZFDEV2&#x2F;Zend+Framework+2.0+Requirements&quot;&gt;roadmap&lt;&#x2F;a&gt;里所说的种种，相信一定会给其他的 php 框架带来巨大的冲击。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>同步twitter到新浪微博的php脚本(不需要twitter密码)</title>
            <pubDate>Wed, 08 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/twitter2weibo/</link>
            <guid>https://limboy.me/posts/twitter2weibo/</guid>
            <description>&lt;p&gt;我不用新浪微博，有好友想要此功能，于是就上网看了下有没有现成的，果然有一个&lt;a href=&quot;http:&#x2F;&#x2F;iamsure.org&#x2F;archives&#x2F;169&quot;&gt;twitter2weibo 的 php 脚本&lt;&#x2F;a&gt;，但打开一看还是基于 Basic Auth 的，自然不能用，只能自己写一个了。(发布新浪微博部分，借鉴了原先的 twitter2weibo)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-shuo-ming&quot;&gt;使用说明&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;打开 config.php，在里面填入一组或多组信息(twitter_username&#x2F;sina_email&#x2F;sina_pwd)&lt;&#x2F;li&gt;
&lt;li&gt;在当前目录下新建一个 data 文件夹，并设置为可写入&lt;&#x2F;li&gt;
&lt;li&gt;设置 cron 为每 3 分钟执行一次脚本&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;crontab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;*&#x2F;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* * * *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; php &#x2F;path&#x2F;to&#x2F;twitter2weibo.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以先试运行一下看看是否正常&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-jia-de-te-xing&quot;&gt;新加的特性&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;支持多用户(在 config.php 里配置)&lt;&#x2F;li&gt;
&lt;li&gt;多线程同步(只支持 linux)。如果是 windows 主机，可以去掉 pcntl_fork 方法，直接调用 sync 方法&lt;&#x2F;li&gt;
&lt;li&gt;保存用户 cookie，避免多次读取&lt;&#x2F;li&gt;
&lt;li&gt;用户删除某条&#x2F;某些 tweet 后，不会出现异常同步&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xia-zai&quot;&gt;下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;twitter2weibo&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;twitter2weibo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说 pubnub</title>
            <pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/about-pubnub/</link>
            <guid>https://limboy.me/posts/about-pubnub/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.pubnub.com&#x2F;&quot;&gt;pubnub&lt;&#x2F;a&gt;是一个云端即时消息服务，通过它我们可以很方便地创建自己的即时应用。&lt;&#x2F;p&gt;
&lt;p&gt;我们只需在客户端&#x2F;服务端调用 subscribe 和 publish 方法即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; LISTEN FOR MESSAGES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PUBNUB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.subscribe&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  channel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello_world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; SEND MESSAGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PUBNUB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  channel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello_world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;pubnub 有以下几大特点&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-yu-yan-kua-ping-tai&quot;&gt;多语言，跨平台&lt;&#x2F;h3&gt;
&lt;p&gt;pubnub 支持多种语言：&lt;code&gt;php&#x2F;ruby&#x2F;python&#x2F;perl&#x2F;erlang&#x2F;js&lt;&#x2F;code&gt;。支持多种客户端：Mobile&#x2F;Browser&#x2F;XBOX 等等。你在本地运行一段 js publish 脚本，服务器端如果正在监听这个 channel，就会收到 js 传送的信息，然后作进一步处理。也可以在本地命令行运行一段 python subscribe 程序，等服务器端有更新时，publish 一下，python 程序就会收到结果，而且是即时的。可以是多个程序&#x2F;多种语言向同一个 channel 发送&#x2F;接收信息。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-quan&quot;&gt;安全&lt;&#x2F;h3&gt;
&lt;p&gt;前面说了，每个应用程序都可以向特定的 channel 发送消息，那如何才能保证 channel 的私密性呢？&lt;&#x2F;p&gt;
&lt;p&gt;如果要使用 pubnub 服务，就需要先注册，注册完后会有 pub key&#x2F;sub key&#x2F;secret key，如果要使用相应的服务，则需使用相应的 key。比如要发送消息，要使用 pub key，此时的 channel 只对该 pub key 有效。如果有其他的应用也使用了该 channel 名称，但因为 pub key 不同，所以不会互相干扰。&lt;&#x2F;p&gt;
&lt;p&gt;此外，pubnub 也支持 SSL，保证数据的安全性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-lu&quot;&gt;效率&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;pubnub 是用 C 写的，运行在 Amazon EC2 和 Rackspace 上，通过 GAE 来远程监控。&lt;&#x2F;li&gt;
&lt;li&gt;pubnub 的消息传送速度是纳妙级的，当断网重连后，消息会重新传递&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;可惜的是这么好的服务是收费的，庆幸的是有免费版，每天可以免费发送 5000 条消息，对于个人的应用来说应该够用了。如果不够用，也可以买消息，5$可以买 100,000 条消息。&lt;&#x2F;p&gt;
&lt;p&gt;PS:pubnub 规定每条消息不能超过 1800 字节，所以不要指望传送大量数据。&lt;&#x2F;p&gt;
&lt;p&gt;因为有被 Qiáng 的风险，所以国内的企业可以自己实现一套类似的即时消息系统，对于应用之间的解耦也大有帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>说说php的异步请求</title>
            <pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-async/</link>
            <guid>https://limboy.me/posts/php-async/</guid>
            <description>&lt;p&gt;很多情况下我们需要让 php 在后台执行某个程序，同时又不影响页面的输出，以下是我总结的几种实现方式&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exec&quot;&gt;exec&lt;&#x2F;h3&gt;
&lt;p&gt;这是最简单的方式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;%s &amp;gt; %s 2&amp;gt;&amp;amp;1 &amp;amp; echo $! &amp;gt; %s&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$outputfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pidfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调用$cmd命令，将输出重定向到$outputfile，不显示错误信息，同时将进程 id 输出到$pidfile。&lt;&#x2F;p&gt;
&lt;p&gt;这样也方便监控，比如判断该进程是否还在运行&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isRunning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;shell_exec(sprintf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ps %d&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;count(preg_split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$e&lt;&#x2F;span&gt;&lt;span&gt;){}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意：如果直接调用 exec 来运行某个命令，或者在该命令后面加个&amp;quot;&amp;amp;&amp;quot;，php 还是会等待该命令运行完成再执行下面的操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proc-open-proc-close&quot;&gt;proc_open&#x2F;proc_close&lt;&#x2F;h3&gt;
&lt;p&gt;这个方法很有意思，先用 proc_open 运行一段后台程序，然后用 proc_close 来关闭 proc_open，结果程序就在后台运行了，同时 php 也会继续执行下去&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;proc_close(proc_open (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ping www.baidu.com -c 10 &amp;gt; &#x2F;path&#x2F;to&#x2F;output &amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pcntl-fork&quot;&gt;pcntl_fork&lt;&#x2F;h3&gt;
&lt;p&gt;使用 php 的多线程来达到目的，原理就是复制一个子线程，同时杀死父线程(不支持 windows)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_fork()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;();     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Parent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;posix_kill(posix_getpid(), &lt;&#x2F;span&gt;&lt;span&gt;SIGHUP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_level()&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_clean()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Discard the output buffer and close
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Close all of the standard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; file descriptors as we
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;STDERR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; are running as a daemon.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register_shutdown_function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;shutdown&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;posix_setsid() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &amp;lt;- This is an error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do your stuff here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;bash&#x2F;command &amp;gt; &#x2F;path&#x2F;to&#x2F;output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;header&quot;&gt;header&lt;&#x2F;h3&gt;
&lt;p&gt;使用这个方法的前提是使用 http 协议，同时目标文件可控，最好在一个域下。因为必须要建立 http 连接才行，所以稍微有点费时。原理是通过 header 输出&#x27;Connection:close&#x27;头，中断 http 连接，同时后面的代码继续执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_level()&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_clean()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Connection: close&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ignore_user_abort()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_start()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Connection Closed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_get_length()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Content-Length: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-shu-ju-ku-zuo-zhong-zhuan&quot;&gt;使用数据库作中转&lt;&#x2F;h3&gt;
&lt;p&gt;把要执行的命令和参数先存到缓存或数据库，接下来的事就不用 php 操心了。&lt;&#x2F;p&gt;
&lt;p&gt;如果还有其他的方法，欢迎交流 :)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>写了一款REST框架——RESTY</title>
            <pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/resty/</link>
            <guid>https://limboy.me/posts/resty/</guid>
            <description>&lt;p&gt;关于 REST 的介绍可以参考&lt;a href=&quot;http:&#x2F;&#x2F;blog.leezhong.com&#x2F;tech&#x2F;2010&#x2F;11&#x2F;14&#x2F;rest.html&quot;&gt;我之前的文章&lt;&#x2F;a&gt;，总体说来，REST 是 web 发展的趋势，而 PHP 是 web 开发的利器，但我找了一遍，只找到了两个 PHP REST 框架(不包括那些以 MVC 为核心，同时又支持 REST 的框架)，一个是&lt;a href=&quot;http:&#x2F;&#x2F;peej.github.com&#x2F;tonic&#x2F;&quot;&gt;Tonic&lt;&#x2F;a&gt;，架构理念我比较认同，但代码质量实在不敢恭维。还有一个是&lt;a href=&quot;http:&#x2F;&#x2F;www.recessframework.org&#x2F;&quot;&gt;Recess&lt;&#x2F;a&gt;，在我看来，它有点复杂化了，把不该 rest 做的事也做了。在这种情况下，我只能自己动手，丰衣足食了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resty-jian-jie&quot;&gt;RESTY 简介&lt;&#x2F;h3&gt;
&lt;p&gt;RESTY 的流程很简单，获取 Request 单例，然后执行 exec 方法，该方法里会调用 Route 来解析 URI 获取相应的 Resource，然后实例化 Resource，触发相应的 HTTP 方法，最后返回一个 Response 对象，Response 执行 output 方法就输出了结果。听起来好像一点都不简单，哈哈，还是来大概看一下代码吧&lt;&#x2F;p&gt;
&lt;p&gt;index.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Route_Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(array(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resource Not Found&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;REQUEST_URI&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;		))
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;request.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Resource_&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ReflectionClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class_name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;before&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;request_method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;after&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;set_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$response&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;response.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_content_encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Content-type:application&#x2F;json;charset=utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Status:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_messages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Content-Length: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strlen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;foreach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_header &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;header(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;resty-te-xing&quot;&gt;RESTY 特性&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;qing-liang-ji&quot;&gt;轻量级&lt;&#x2F;h3&gt;
&lt;p&gt;RESTY 包含了核心的 Request&#x2F;Resource&#x2F;Response&#x2F;Route&#x2F;Config&#x2F;Validation 功能，没有其他多余的部件，如 Controller&#x2F;View 等等，很纯粹。一个工具应该把一件事做好，同时提供接口，这也是 RESTY 的哲学。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-fang-bian&quot;&gt;使用方便&lt;&#x2F;h3&gt;
&lt;p&gt;使用时，只需定义好 uri 对应的 Resource，然后编写 Resource 就行了，其他的事 RESTY 会帮你搞定。&lt;&#x2F;p&gt;
&lt;p&gt;config&#x2F;resource.php demo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;example&#x2F;(?&amp;lt;id&amp;gt;[0-9]+)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;example&#x2F;foo&#x2F;(?&amp;lt;name&amp;gt;[a-zA-Z_0-9]+)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&#x2F;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到 uri 支持正则，没错，原生的 php 正则。resource 部分对应 resource 文件的路径(不包括后缀)&lt;&#x2F;p&gt;
&lt;p&gt;resource&#x2F;example.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Resource_Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Resource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* set etag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;		Response::instance()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			-&amp;gt;if_none_match(md5(&amp;#39;hello&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			-&amp;gt;add_etag(md5(&amp;#39;hello&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;			;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;		&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;error&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;implode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;getErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;request&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;REQUEST_URI&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_merge(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;type&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每一个资源对应 4 个 http 方法。RESTY 还很贴心地提供了 Validation 部件(基本上是直接从 Kohana 中 K 过来的)，方便对数据进行校验。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-kuo-zhan&quot;&gt;易扩展&lt;&#x2F;h3&gt;
&lt;p&gt;system&#x2F;classes 文件夹下的类文件，都可以在 app&#x2F;classes 文件夹下扩展，而且使用时不用做任何修改。假设你之前已经写了不少 Resource，忽然想到要扩展系统的 Resource 类，正常的做法是定义一个 MY_Resource 之类的类文件来扩展系统的 Resource 类，然后使用时使用 MY_Resource 而不是 Resource。但这样就会有个问题，之前使用的 Resource 类都要做修改了，可谓牵一发而动全身。RESTY 就方便了，同样要扩展 Resource 类，只要在 app&#x2F;classes 下新建一个 resource.php 文件，然后扩展 Resty_Resource 类即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Resty_Resource
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样使用时还是一样的 Resource 类，但却多了 foo 方法。这也是从 Kohana 学到的无缝扩展大法（题外话：Kohana 真是个不错的框架，各位不妨一试）。原理就是在类自动加载时会先去 app&#x2F;classes 文件夹下去找，如果没找到的话再去 system&#x2F;classes 下找。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yan-zheng-gong-neng&quot;&gt;验证功能&lt;&#x2F;h3&gt;
&lt;p&gt;作为一个比较完整的 REST 框架，Validation 还是不能少的，为了不重复制造轮子，直接把 Kohana 的验证类搬了过来，稍作修改。&lt;&#x2F;p&gt;
&lt;p&gt;配置：config&#x2F;validation.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;get&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;filters&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;trim&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				),
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;rules&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not_empty&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;min_length&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;digit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;				),
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;错误提示：config&#x2F;message.php&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;digit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id必须是数字&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not_empty&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id不能为空&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;min_length&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;id长度至少为:value&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	),
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;config-gong-neng&quot;&gt;Config 功能&lt;&#x2F;h3&gt;
&lt;p&gt;config 文件如上面所示，就是返回一个数组。使用也很简单:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 获取config&#x2F;message.php文件的example key对应的内容
&lt;&#x2F;span&gt;&lt;span&gt;Config::get(&amp;#39;message.example&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 设置config(不会写入到文件，只在一个http request有效)
&lt;&#x2F;span&gt;&lt;span&gt;Config::set(&amp;#39;message.example.id.digit&amp;#39;, &amp;#39;id can be anything&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xia-zai&quot;&gt;下载&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;resty&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;limboy&#x2F;resty&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;欢迎使用，并反馈:)&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>大型应用的javascript架构</title>
            <pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/javascript-arch/</link>
            <guid>https://limboy.me/posts/javascript-arch/</guid>
            <description>&lt;p&gt;目前很多网站基本没有明确的前端架构，大多是服务端渲染视图页，输出到浏览器，再配合一些 js，来进行交互。如果只是实现一些简单的效果，没有较复杂的逻辑，那么这种处理是合理的，尤其是有了 jQuery 之类的利器，js 代码写起来甚至有种随心所欲的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;但一旦网站要改版，或者随着网站的发展，逻辑变得越来越复杂，或者为了更好的用户体验，js 要承担更多的任务，这时如果维持现状不变，那 js 就会变得越来越臃肿，越来越难维护。&lt;&#x2F;p&gt;
&lt;p&gt;解决之道就是采用模块化编程，将页面分成多个模块，模块之间互相独立，通过发布&#x2F;订阅方式来进行模块间交互，从而使模块与模块解耦，也就是说移除一个模块不会对当前页面造成影响。&lt;&#x2F;p&gt;
&lt;p&gt;配合模板的话，可以让前端和后端程序员更高效地配合。前端只负责数据的显示与页面的交互，开发时，可以拟造数据，而不需要服务端程序。后端程序员也可以专注于提供更易用，稳定的接口，而不需要关心数据的展示。&lt;&#x2F;p&gt;
&lt;p&gt;yahoo 的&lt;a href=&quot;http:&#x2F;&#x2F;developer.yahoo.com&#x2F;yui&#x2F;theater&#x2F;video.php?v=zakas-architecture&quot;&gt;这个视频&lt;&#x2F;a&gt;详细地阐述了前端模块化编程，大致摘录如下：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;js-jia-gou-de-4-ge-zu-cheng-bu-fen&quot;&gt;js 架构的 4 个组成部分&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;模块(Modules)&lt;&#x2F;li&gt;
&lt;li&gt;沙箱(Sandbox)&lt;&#x2F;li&gt;
&lt;li&gt;应用(App Core)&lt;&#x2F;li&gt;
&lt;li&gt;类库(Base Lib)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mo-kuai-yi-qie-jie-mo-kuai&quot;&gt;模块(一切皆模块)&lt;&#x2F;h3&gt;
&lt;p&gt;模块就像孩子一样，他们需要遵守一些规则才能保证不会到处惹麻烦&lt;&#x2F;p&gt;
&lt;p&gt;模块必须在沙箱里，无论条件多么苛刻&lt;&#x2F;p&gt;
&lt;p&gt;模块不知道页面到底是怎样的，他们只知道沙箱&lt;&#x2F;p&gt;
&lt;p&gt;模块之间要解耦&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-de-gui-ze&quot;&gt;模块的规则&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;管好自己
** 只能调用自己的或沙箱的方法
** 不要访问不属于自己的 DOM 节点
** 不要访问非内置全局变量&lt;&#x2F;li&gt;
&lt;li&gt;先申请，再使用
** 你需要的任何东西，要向沙箱提出申请&lt;&#x2F;li&gt;
&lt;li&gt;不要把玩具放得到处都是
** 不要创建全局变量&lt;&#x2F;li&gt;
&lt;li&gt;不要和陌生人说话
** 不要直接引用其他模块&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;an-quan-sha-xiang&quot;&gt;安全沙箱&lt;&#x2F;h3&gt;
&lt;p&gt;沙箱要保证接口的一致性，模块调用时一定要有&lt;&#x2F;p&gt;
&lt;p&gt;模块只知道沙箱，其他的架构对模块而言是不存在的&lt;&#x2F;p&gt;
&lt;p&gt;沙箱就像一个安保员，知道哪些是模块可以调用的&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sha-xiang-de-zhi-ze&quot;&gt;沙箱的职责&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;一致性
** 接口一定要可靠&lt;&#x2F;li&gt;
&lt;li&gt;安全性
** 检测哪一部分是模块可以访问的&lt;&#x2F;li&gt;
&lt;li&gt;交互
** 将模块的请求发送到系统&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;多花些时间来设计沙箱接口，可以添加新方法，但不能移除，也不能修改已有方法&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-he-xin&quot;&gt;应用核心&lt;&#x2F;h3&gt;
&lt;p&gt;应用核心负责模块间的交互&lt;&#x2F;p&gt;
&lt;p&gt;应用核心通知一个模块何时该初始化，何时该注销&lt;&#x2F;p&gt;
&lt;p&gt;应用核心处理错误&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-he-xin-de-ren-wu&quot;&gt;应用核心的任务&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;管理模块的生存周期
** 通知一个模块何时该初始化，何时该注销&lt;&#x2F;li&gt;
&lt;li&gt;内部模块间的交互
** 让模块尽可能解耦&lt;&#x2F;li&gt;
&lt;li&gt;错误处理
** 检测，报告错误&lt;&#x2F;li&gt;
&lt;li&gt;可扩展
** 任何可扩展的东西都不会过时&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ji-ben-lei-ku&quot;&gt;基本类库&lt;&#x2F;h3&gt;
&lt;p&gt;理想状态下，只有应用核心知道使用了哪个类库&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-lei-ku-de-ren-wu&quot;&gt;基本类库的任务&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器兼容性&lt;&#x2F;li&gt;
&lt;li&gt;常用的工具
** 解析&#x2F;序列化 XML，JSON 等等
** 对象操作
** DOM 操作
** Ajax 操作&lt;&#x2F;li&gt;
&lt;li&gt;提供底层的可扩展性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shi-jian&quot;&gt;实践&lt;&#x2F;h3&gt;
&lt;p&gt;我没有全部按照上面说的来实现，而是借鉴了部分&lt;a href=&quot;http:&#x2F;&#x2F;dothanhlam.files.wordpress.com&#x2F;2009&#x2F;02&#x2F;puremvc-conceptual-diagram.jpg&quot;&gt;pureMVC 的思想&lt;&#x2F;a&gt;，这样似乎更简单些。&lt;&#x2F;p&gt;
&lt;p&gt;概述&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个模块对应页面的某一部分&lt;&#x2F;li&gt;
&lt;li&gt;模块提供了所有 Mediator 可以调用的方法&lt;&#x2F;li&gt;
&lt;li&gt;一个 Mediator 管理一个特定的模块&lt;&#x2F;li&gt;
&lt;li&gt;模块只被 Mediator 调用，模块甚至不知道 Mediator 的存在&lt;&#x2F;li&gt;
&lt;li&gt;Mediator 之间通过发布&#x2F;订阅的方式进行交互&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;js-arch&#x2F;&quot;&gt;demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-ji-lei-zhe-li-shi-yong-liao-john-resig-de-simple-javascript-inheritance&quot;&gt;模块基类(这里使用了 John Resig 的&lt;a href=&quot;http:&#x2F;&#x2F;ejohn.org&#x2F;blog&#x2F;simple-javascript-inheritance&#x2F;&quot;&gt;simple javascript inheritance&lt;&#x2F;a&gt;)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;-tpl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;el &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;el&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getTplData&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tplData&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;renderTpl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tplData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;使用了Mustache模板引擎
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Mustache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.to_html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tpl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lie-biao-mo-kuai&quot;&gt;列表模块&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Module 提供方法供Mediator调用
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$lis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$lis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.each&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.removeClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.addClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;locked&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.addClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unhl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.removeClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前面说了模块就是准备好方法，让 Mediator 调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lie-biao-mediator&quot;&gt;列表 Mediator&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ListMediator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Mediator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 初始化Module
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;List({
&lt;&#x2F;span&gt;&lt;span&gt;      name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;list&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 绑定事件
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;click&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.preventDefault&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 调用Module方法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.hl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$el&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发布消息，所有监听该事件的方法将被触发
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 参数为object，方便以后添加键值对
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:click&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;          content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getTplData&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;].content,
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mouseover&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.hl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.delegate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;li&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;mouseout&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.unhl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取源数据，使用了$.proxy，创建特定的context
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.getJSON&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;data.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.proxy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 调用Module的方法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.renderTpl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 发布数据已载入消息
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:loaded&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以把模块想像成 Model，Mediator 想像成 Controller，这样就实现了高内聚，低耦合。每一个单元(模块+Mediator)都可以单独使用，也可以被移除，而不影响现有架构。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;demo.leezhong.com&#x2F;js-arch&#x2F;&quot;&gt;demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzyy&#x2F;js-arch&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>软件构建设计</title>
            <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design/</link>
            <guid>https://limboy.me/posts/software-design/</guid>
            <description>&lt;p&gt;这是《代码大全 2》的软件设计篇章，花了两天时间啃下来的，不得不感慨讲得很细致很到位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-design-concepts&quot;&gt;Key Design Concepts&lt;&#x2F;h3&gt;
&lt;p&gt;Managing complexity is the most important technical topic in software development.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of all software-design techniques is to break acomplicated problem into simple pieces. The more independent the subsystems are, the more you make it safe to focus on one bit of complexity at a time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-characteristics&quot;&gt;design characteristics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimal complexity
&lt;ul&gt;
&lt;li&gt;Avoid making &amp;quot;clever&amp;quot; designs. clever designs are usually hard to understand. Instead make &amp;quot;simple&amp;quot; and &amp;quot;easy-to-understand&amp;quot; designs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ease of maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Loose coupling&lt;&#x2F;li&gt;
&lt;li&gt;Extensibility&lt;&#x2F;li&gt;
&lt;li&gt;Reusability&lt;&#x2F;li&gt;
&lt;li&gt;High fan-in
&lt;ul&gt;
&lt;li&gt;having a high number of classes that use a given class. High fan-in implies that a system has been designed to make good use of utility classes at the lower levels in the system.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Low-to-medium fan-outside
&lt;ul&gt;
&lt;li&gt;having a given class use a low-to-medium number of other classes (&amp;lt;7)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Portability&lt;&#x2F;li&gt;
&lt;li&gt;Leanness
&lt;ul&gt;
&lt;li&gt;designing the system so that it has no extra parts. a book is finished not when nothing more can be added but when nothing more can be taken away.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stratification
&lt;ul&gt;
&lt;li&gt;trying to keep the levels of decomposition stratified so that you can view the system at any single level and get a consistent view.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Standard techniques&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-steps-in-designing-with-objects&quot;&gt;The steps in designing with objects&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Identify the objects and their attributes (methods and data)&lt;&#x2F;li&gt;
&lt;li&gt;Determine what can be done to each object&lt;&#x2F;li&gt;
&lt;li&gt;Determine what each object is allowed to do to other objects&lt;&#x2F;li&gt;
&lt;li&gt;Determine the parts of each object that will be visible to other objects-which parts will be public and which will be private.&lt;&#x2F;li&gt;
&lt;li&gt;Define each object&#x27;s public interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;form-consistent-abstractions&quot;&gt;Form Consistent Abstractions&lt;&#x2F;h3&gt;
&lt;p&gt;Abstraction is the ability to engage with a concept while safely ignoring some of its details - handling different details at different levels.&lt;&#x2F;p&gt;
&lt;p&gt;A good class interface is an abstraction that allows you to focus on the interface without needing to worry about the internal workings of the class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-building-blocks-heuristics&quot;&gt;Design Building Blocks: Heuristics&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;encapsulate-implementation-details&quot;&gt;Encapsulate Implementation Details&lt;&#x2F;h3&gt;
&lt;p&gt;Encapsulate picks up where abstraction leaves off. you aren&#x27;t allowed to look at an object at any level of detail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inherit-when-inheritance-simplifies-the-design&quot;&gt;Inherit - When Inheritance Simplifies the Design&lt;&#x2F;h3&gt;
&lt;p&gt;Inheritance simplifies programming because you write a general routine to handle anything that depends on a door&#x27;s general properties and then write specific routines to handle specific operations on specific kinds of doors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hide-secrets-information-hiding&quot;&gt;Hide Secrets (Information Hiding)&lt;&#x2F;h3&gt;
&lt;p&gt;Information hiding is part of the foundation of both structured design and object-oriented design. In structured design, the notion of &amp;quot;black boxes&amp;quot; comes from information hiding. In object-oriented design, it gives rise to the concepts of encapsulation and modularity and it is associated with the concept of abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;One key task in designing a class is deciding which features should be known outside the class and which should remain secret.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identify-areas-likey-to-change&quot;&gt;Identify Areas Likey to Change&lt;&#x2F;h3&gt;
&lt;p&gt;Accommodating changes is one of the most chanllenging aspects of good program design. The goal is to isolate unstable areas so that the effect of a change will be limited to one routine, class, or package.&lt;&#x2F;p&gt;
&lt;p&gt;areas that are likely to change:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Business rules&lt;&#x2F;li&gt;
&lt;li&gt;Hardware dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Input and output&lt;&#x2F;li&gt;
&lt;li&gt;Nonstandard language features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keep-coupling-loose&quot;&gt;Keep Coupling Loose&lt;&#x2F;h3&gt;
&lt;p&gt;Coupling describes how tightly a class or routing is related to other classes or routines. The goal is to create classes and routines with small, direct, visible and flexible relations to other classes and routines.&lt;&#x2F;p&gt;
&lt;p&gt;Classes and routines are first and foremost intellectual tools for reducing complexity. If they&#x27;re not making your job simpler, they&#x27;re not doing thier jobs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;look-for-common-design-patterns&quot;&gt;Look for Common Design Patterns&lt;&#x2F;h3&gt;
&lt;p&gt;Popular Design Patterns&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract Factory&lt;&#x2F;li&gt;
&lt;li&gt;Adapter&lt;&#x2F;li&gt;
&lt;li&gt;Bridge&lt;&#x2F;li&gt;
&lt;li&gt;Composite&lt;&#x2F;li&gt;
&lt;li&gt;Decorator&lt;&#x2F;li&gt;
&lt;li&gt;Facade&lt;&#x2F;li&gt;
&lt;li&gt;Factory Method&lt;&#x2F;li&gt;
&lt;li&gt;Iterator&lt;&#x2F;li&gt;
&lt;li&gt;Observer&lt;&#x2F;li&gt;
&lt;li&gt;Singleton&lt;&#x2F;li&gt;
&lt;li&gt;Strategy&lt;&#x2F;li&gt;
&lt;li&gt;Template Method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-practices&quot;&gt;Design Practices&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;iterate&quot;&gt;Iterate&lt;&#x2F;h3&gt;
&lt;p&gt;Design is an iterative process. You don&#x27;t usually go from point A only to point B; you go from point A to point B and back to point A.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;divide-and-conquer&quot;&gt;Divide and Conquer&lt;&#x2F;h3&gt;
&lt;p&gt;no one&#x27;s skill is big enough to contain all the details of a complex program, and that applies just as well to design. Divide the program into different areas of concern, and then tackle each of those area individually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;top-down-and-bottom-up-design-approaches&quot;&gt;Top-Down and Bottom-Up Design Approaches&lt;&#x2F;h3&gt;
&lt;p&gt;Top-down design begins at a high level of abstraction. You define base classes or other nonspecific design elements. As you develop the design, you increase the level of detail, identifying derived classes, collaborating classes, and other detailed design elements.&lt;&#x2F;p&gt;
&lt;p&gt;Bottom-up design starts with specifics and works toward genealities. It typically begins by identifying concrete objects and then generalizes aggregations of objects and base classes from those specifics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;experimental-prototyping&quot;&gt;Experimental Prototyping&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;collaborative-design&quot;&gt;Collaborative Design&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;capturing-your-design-work&quot;&gt;Capturing Your Design Work&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Insert design documentation into the code itself&lt;&#x2F;li&gt;
&lt;li&gt;Capture design discussions and decisions on a wiki&lt;&#x2F;li&gt;
&lt;li&gt;Write e-mail summaries&lt;&#x2F;li&gt;
&lt;li&gt;Use a digital camera&lt;&#x2F;li&gt;
&lt;li&gt;Save design flip charts&lt;&#x2F;li&gt;
&lt;li&gt;Use CRC(Class, Responsibility, Collaborator) cards&lt;&#x2F;li&gt;
&lt;li&gt;Create UML diagrams at appropriate levels of detail&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>说说REST</title>
            <pubDate>Sun, 14 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/rest/</link>
            <guid>https://limboy.me/posts/rest/</guid>
            <description>&lt;h3 id=&quot;rest-jiu-jing-shi-shi-yao-dong-dong&quot;&gt;REST 究竟是什么东东&lt;&#x2F;h3&gt;
&lt;p&gt;REST(Representational State Transfer)是 Roy Fielding 在他的博士论文中提出来的。他也是 HTTP 协议的制定者之一。REST 是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-de-te-xing&quot;&gt;REST 的特性&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;c-s-jia-gou&quot;&gt;C&#x2F;S 架构&lt;&#x2F;h3&gt;
&lt;p&gt;客户端主动向服务端发起请求，服务端收到请求后，返回格式化的结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-zhuang-tai&quot;&gt;无状态&lt;&#x2F;h3&gt;
&lt;p&gt;每个请求必须包含服务端所需的所有信息，不要指望从服务端&amp;quot;借&amp;quot;点数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-kuo-zhan&quot;&gt;易扩展&lt;&#x2F;h3&gt;
&lt;p&gt;如果因为业务需要，要新添加几个资源，可以横向扩展，而不需要改变原来的结构。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-yi-qing-qiu-lei-xing&quot;&gt;统一请求类型&lt;&#x2F;h3&gt;
&lt;p&gt;GET&#x2F;POST&#x2F;PUT&#x2F;DELETE，实际中以 GET 和 POST 用的最多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-yuan&quot;&gt;资源&lt;&#x2F;h3&gt;
&lt;p&gt;服务端要提供资源供客户端调用，每个资源都有独立的 URL。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-liang-ji&quot;&gt;轻量级&lt;&#x2F;h3&gt;
&lt;p&gt;使用标准的 http 请求，各个语言几乎都支持，所以由丰富的客户端。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fang-bian-tian-jia-zhong-jian-ceng&quot;&gt;方便添加中间层&lt;&#x2F;h3&gt;
&lt;p&gt;如代理&#x2F;集群&#x2F;缓存等等，对客户端而言它们是透明的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fang-bian-ce-shi&quot;&gt;方便测试&lt;&#x2F;h3&gt;
&lt;p&gt;不牵扯具体的业务逻辑，而且格式化的数据很容易解析&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;DEMO&lt;&#x2F;h3&gt;
&lt;p&gt;以 twitter 为例(请自动切换到翻|墙模式)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huo-qu-xin-xi-get&quot;&gt;获取信息(GET)&lt;&#x2F;h3&gt;
&lt;p&gt;如果要获得某条 tweet 的信息，直接访问 api 即可，如 http:&#x2F;&#x2F;api.twitter.com&#x2F;1&#x2F;statuses&#x2F;show&#x2F;3657615682838528.json，将会返回如下结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;geo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;created_at&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Sun Nov 14 03:56:58 +0000 2010&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;in_reply_to_status_id_str&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;profile_image_url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;a2.twimg.com&#x2F;profile_images&#x2F;259632038&#x2F;DuanziLogoBig_normal.jpg
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;官网：www.JokeCook.com | When that happens.当下那些事儿 | 欢迎回复@duanzi 投稿。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;truncated&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3657615682838528
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;in_reply_to_user_id_str&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Via @ruoxiaosu: 有时候吧，取消对一个人的关注，...via琦殿&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;省略了部分结果，可以看到是一个包含了很多信息的 json，想怎样展现那就是客户端的事情了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ti-jiao-xin-xi-post&quot;&gt;提交信息(POST)&lt;&#x2F;h3&gt;
&lt;p&gt;这个就要复杂一点了，因为涉及到用户验证，前面说过了，REST 是无状态的。也就是说，服务端不知道你到底有没有登录，除非出示证件。是的，每次请求都得出示。服务端验证通过后，查询到用户 id，保存 POST 数据，返回提交结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;1&#x2F;statuses&#x2F;update.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; api.twitter.com
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;blahblah...&amp;amp;oauth_consumer_key=GDdmIQH6jhtm...&amp;amp;oauth_nonce=oElnnMTQIZvqvlfXM56aB...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到除了 status，还有 oauth_consumer_key 和 oauth_nonce(还有其他 oauth 相关的参数)，这些就是用来进行身份验证的，如果验证通过了，tweet 就会被正常发布，同时返回该 tweet 的相关信息。&lt;&#x2F;p&gt;
&lt;p&gt;顺便说说用户验证，一般有三种验证方式：Basic Auth&#x2F;Digest Auth&#x2F;OAuth(XAuth)，就安全性来说 OAuth 是最高的，用户无须输入密码，但部署起来难度也最大。Basic Auth 安全性最低，部署起来也最方便，用户只需提供用户名和密码即可，但如果第三方记录了这些信息，那就... Digest Auth 的安全性和部署成本介于两者之间。&lt;&#x2F;p&gt;
&lt;p&gt;其他更新内容和删除内容也类似，都是先进行用户验证，再进行权限验证，最后返回执行结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-de-yuan-ze&quot;&gt;REST 的原则&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;chou-xiang-chu-suo-you-ke-gong-diao-yong-de-zi-yuan-yue-jing-que-yue-hao&quot;&gt;抽象出所有可供调用的资源，越精确越好&lt;&#x2F;h3&gt;
&lt;p&gt;如果一个事物可以抽象成资源，那它就是 RESTful，可以通过 URL 进行调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-mei-ge-zi-yuan-ti-gong-yi-ge-url-qie-zi-yuan-ying-gai-shi-ming-ci-er-bu-shi-dong-ci&quot;&gt;为每个资源提供一个 URL，且资源应该是名词而不是动词&lt;&#x2F;h3&gt;
&lt;p&gt;如，下面这个 url 是不建议采用的&lt;&#x2F;p&gt;
&lt;p&gt;bq. http:&#x2F;&#x2F;www.twitter.com&#x2F;getUser&#x2F;10&lt;&#x2F;p&gt;
&lt;p&gt;应该改为这样&lt;&#x2F;p&gt;
&lt;p&gt;bq. http:&#x2F;&#x2F;www.twitter.com&#x2F;user&#x2F;10&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiang-zi-yuan-fen-lei&quot;&gt;将资源分类&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Tweets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;show&#x2F;:id
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;update
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;destroy&#x2F;:id
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Timeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status&#x2F;public_timeline
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;suo-you-get-qing-qiu-du-bu-ying-gai-ying-xiang-shu-ju-ku-nei-rong&quot;&gt;所有 GET 请求都不应该影响数据库内容&lt;&#x2F;h3&gt;
&lt;p&gt;GET 顾名思义，就是用来获取某个资源，如果要修改，则应该执行 POST&#x2F;PUT&#x2F;DELETE。千万不要因为偷懒，而给 GET 留下后门。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fan-hui-jie-guo-bu-yi-ding-shi-dan-du-de-nei-rong-ke-yi-bao-han-xiang-guan-lian-jie&quot;&gt;返回结果不一定是单独的内容，可以包含相关链接&lt;&#x2F;h3&gt;
&lt;p&gt;有时候，这是一种双输的局面：用户不想要那么多的数据，服务端又多了不必要的运算。只要包含可以获取信息的链接即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-que-fan-hui-ge-shi&quot;&gt;明确返回格式&lt;&#x2F;h3&gt;
&lt;p&gt;如 json&#x2F;xml&#x2F;html 等等，不过目前来看 json 基本是主流。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ru-he-shi-yong-rest&quot;&gt;如何使用 REST&lt;&#x2F;h3&gt;
&lt;p&gt;REST 不仅仅是一种崭新的架构，它带来的更是一种全新的 Web 开发过程中的思维方式：通过 URL 来设计系统结构。在 REST 中，所有的 URL 都对应着资源，只要 URL 的设计是良好的，那么其呈现的系统结构也就是良好的。这点和 TDD (Test Driven Development)很相似，他是通过测试用例来设计系统的接口，每一个测试用例都表示一系列用户的需求。开发人员不应该一开始就编写功能，而是先细分资源。对资源抽象地越精确，对 REST 的应用来说就更好，这个和传统的 MVC 中基于 Action 的思想差别很大。设计良好的 URL， 不但对于开发人员来说可以更明确的认识系统结构，对使用者来说也方便记忆和识别资源，因为 URL 足够简单和有意义。&lt;&#x2F;p&gt;
&lt;p&gt;REST 对开发者友好。Amazon 和 Ebay 的 service 结果显示：60%的用户使用 REST。提供 REST 服务，开发者可以很容易通过各种语言各种平台来开发一个 app，手机&#x2F;ipad&#x2F;网站&#x2F;cli 等等，这也是 web2.0 的一大特征，想想如果 flickr&#x2F;twitter&#x2F;delicious 没有开放简洁易用的 api，其火爆程度肯定大打折扣。&lt;&#x2F;p&gt;
&lt;p&gt;使用 REST 还有一个好处是，可以避免 Controller 直接操作数据。假如是 MVC 模式，Controller 很可能途省事，直接把 ORM 拿过来就开始进行数据操作了，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;actionAdd&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;title&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;content&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有一天保存的操作改了，如加了一个 status 字段，那就很糟糕了。&lt;&#x2F;p&gt;
&lt;p&gt;实际使用中，可能会发现不是所有的需求都可以抽象为资源，这时可以混用 MVC&#x2F;MVVM。尽可能地抽象成资源，对其他需求使用 MVC&#x2F;MVVM 开发。&lt;&#x2F;p&gt;
&lt;p&gt;目前已经有&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_State_Transfer&quot;&gt;不少&lt;&#x2F;a&gt;基于&#x2F;支持 REST 的框架，有兴趣的话不妨尝试一下。也可以看一下&lt;a href=&quot;http:&#x2F;&#x2F;www.peej.co.uk&#x2F;articles&#x2F;rmr-architecture.html&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;REST 和 MVC 的关系就好像 Div 和 Table 的关系。在 web 标准没推广前，都是使用 Table 布局，Table 原本是用来做数据展示的，不知是哪一位天才发现对 Table 进行各种改造后，可以用作前端展示，于是就这么流传开了。&lt;&#x2F;li&gt;
&lt;li&gt;REST 是一种架构风格，不是标准。但使用了很多标准：http&#x2F;url&#x2F;mime 等等。&lt;&#x2F;li&gt;
&lt;li&gt;REST 概念从提出到现在已经有 10 年了，越来越趋于成熟。它是为 http 而生的，而 MVC 最开始是用来开发桌面软件的。&lt;&#x2F;li&gt;
&lt;li&gt;如果你的网站有提供 API 的打算，推荐使用 REST 架构，开始可能会麻烦一点，但将来会发现这些付出是值得的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>关于代码的注释</title>
            <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/code-comments/</link>
            <guid>https://limboy.me/posts/code-comments/</guid>
            <description>&lt;p&gt;怎样的注释才是合理的？关于这个问题，首先要回答的问题是：为什么要注释？&lt;&#x2F;p&gt;
&lt;p&gt;注释通常是为了方便其他程序员阅读源码，让他能够明白这个变量是做什么用的，这段代码是为了完成什么任务等等，不至于三更半夜系统出现了 bug，结果在程序里翻山越岭，跋山涉水，还没有找到出问题的代码，好不容易找到了，又不知道如何修改。&lt;&#x2F;p&gt;
&lt;p&gt;那是不是注释越多越详细越好呢？也不是。因为程序是会经常变动的，这加个参数，那改个变量是很正常的，稍不注意就会忘了更新注释。而且从程序员的角度来说，也不愿去更新注释，一个是因为懒，另一个是因为知道将来还可能会变，索性等将来再说。以后维护该程序的人，看着注释和程序就会很纠结。&lt;&#x2F;p&gt;
&lt;p&gt;所以不愿写注释是程序员的天性，行云流水地写完一段代码，这种感觉多爽啊。时时刻刻想着要写注释，就不能全身心地投入到代码的实现上。不过倒是可以等爽完之后，再把注释加上，这就牵扯到一个问题: 应该在哪些地方加注释？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;先来看这段代码&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; a, b, c; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码很简洁，但就是不知道 a,b,c 代表什么，将来如果要维护这样的程序，会抑郁的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;再来看看这段代码&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;gravitational force
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;time in seconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;multiply the time and gravity together to get displacement.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是好一点，至少知道这些变量代表着什么。但如果下面还会用到这些代码，依旧会崩溃。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;再改进一下&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这就好多了，每个变量名都是自解释类型，看着名就知道什么意思，阅读起来也不会有障碍。但最后的公式还是有点不知所云。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;加上合理的注释&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* compute displacement with Newton&amp;#39;s equation x = vₒt + ½at² *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; gravitationalForce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;当然也可以再从命名上作文章，避免注释，同时又不影响阅读&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;m&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-m &quot;&gt;&lt;code class=&quot;language-m&quot; data-lang=&quot;m&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span&gt; accelerationDueToGravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; timeInSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; displacement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewtonianPhysics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CalculateDisplacement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(accelerationDueToGravity, timeInSeconds)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以合格的代码应该是自解释的，再加上合理的注释。所谓合理的注释就是在可能会引起混淆或不太好理解的地方加上说明。如果你的程序太依赖注释，那就该重构了。&lt;&#x2F;p&gt;
&lt;p&gt;PS: 如果你对 comment 文化有兴趣的话，可以看看 stackoverflow 上的&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;184618&#x2F;94962&quot;&gt;这篇文章&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php程序员是否该学习python</title>
            <pubDate>Wed, 08 Sep 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-vs-python/</link>
            <guid>https://limboy.me/posts/php-vs-python/</guid>
            <description>&lt;p&gt;其实标题可以变为&amp;quot;xx 程序员是否该学习 yy&amp;quot;，xx 和 yy 可以是任何编程语言，而答案总是&amp;quot;应该&amp;quot;。因为我本身跟 php 打了不少年的交道，同时 python 也学习了一段时间，所以就把这两种语言串起来了。&lt;&#x2F;p&gt;
&lt;p&gt;php 和 python 上手都很容易，php 基本上是&amp;quot;大把函数任你抓，抓来就能做项目&amp;quot;，python 是&amp;quot;大把模块任你选，事半功倍全靠它&amp;quot;。双方都有强大的第三方扩展，很少需要自己费力去写一个，除非进行二次封装。&lt;&#x2F;p&gt;
&lt;p&gt;先来看看 PHP 比较爽的几个特性&lt;&#x2F;p&gt;
&lt;h3 id=&quot;array&quot;&gt;array&lt;&#x2F;h3&gt;
&lt;p&gt;php 的&lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;language.types.array.php&quot;&gt;数组&lt;&#x2F;a&gt;几乎是所有语言中最强大的，同时扮演了 list, dictionary, stack, queue 甚至更多(相信这也是许多人喜欢 PHP 的一个重要原因)。而且使用还挺方便，提供了&lt;a href=&quot;http:&#x2F;&#x2F;cn2.php.net&#x2F;manual&#x2F;en&#x2F;ref.array.php&quot;&gt;77 个数组相关方法&lt;&#x2F;a&gt;(这也不可避免地产生了另一个问题，下面会提到)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-html-de-qin-mi-jie-he&quot;&gt;与 html 的亲密结合&lt;&#x2F;h3&gt;
&lt;p&gt;这也是其他语言少有的特性，php 本身就是一个模板引擎，可以与 html 天然融合。不过也有弊端，如 html 不应该包含复杂的业务逻辑，而且 php 与 html 混杂实在不够美观。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-quan-de-han-shu-he-feng-fu-de-di-san-fang-lei-ku&quot;&gt;齐全的函数和丰富的第三方类库&lt;&#x2F;h3&gt;
&lt;p&gt;函数是 php 的核心，这也是 php 容易上手的一个重要原因。要完成什么功能，只要找到该函数即可，从这个方面来说，php 更适合脚本化编程(貌似这也是 php 的初衷)。随着 php 的流行，第三方类库也开始丰富起来，甚至可以为 php 写插件来增强 php 的功能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-oop-de-wan-mei-zhi-chi&quot;&gt;对 OOP 的完美支持&lt;&#x2F;h3&gt;
&lt;p&gt;php4 虽然也可以进行 oop 编程，但语言本身不给力，只能努力往 OOP 方向去靠。到了 php5，情况就有了很大的好转，支持 PPP(private, protected, public) method 和 property，以及 static&#x2F;final 等语法。php5.3 还支持 LSB(late static bindings)，虽然我觉得支持得很不到位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-zhu-fang-fa&quot;&gt;魔术方法&lt;&#x2F;h3&gt;
&lt;pre&gt;__get&#x2F;__set&#x2F;__call&#x2F;__toString&lt;&#x2F;pre&gt;等等，这些魔术方法给类带来了很大的便利，随便找个流行的框架，查看源码都会发现这些魔术方法的影踪，仿佛一下子变得无所不能。
&lt;p&gt;再来看看 PHP 几个让人不爽的地方&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-liang-bei-fu-zhi-dan-que-bu-shi-yong&quot;&gt;变量被赋值，但却不使用&lt;&#x2F;h3&gt;
&lt;p&gt;不太好理解，写段代码就知道了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error_reporting(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下面这段代码会报NOTICE ERROR，但事实上$str_arr已经被赋值，只是current方法没有使用这个变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这段代码的运行过程是执行explode方法，然后将结果赋给$str_arr，然后将结果作为参数传递给current方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 也就是说整个过程没$str_arr什么事，$str_arr收到结果后就被踢走了
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 但有时候，只能使用变量而不能使用函数的返回值，如empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;current(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str_arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;explode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bu-neng-zai-han-shu-fang-fa-hou-gen&quot;&gt;不能在函数&#x2F;方法后跟[]&lt;&#x2F;h3&gt;
&lt;p&gt;还是不太好理解，继续上代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 会报错，于是只能先把结果赋给变量，再从这个变量去获取相应值，用完之后再unset该变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hun-luan-de-ming-ming&quot;&gt;混乱的命名&lt;&#x2F;h3&gt;
&lt;p&gt;上面说的几点只是小问题，这个就严重了。php 的命名几乎没有规律可循，随便举几个例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 其中一个单词缩写，中间没有分割符
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strpos()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tempnam()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 两个单词没有缩写，其中有一个分割符
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;str_repeat()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_exists()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 驼峰命名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;__toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下划线连接
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;__set_state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个太恐怖了，强烈怀疑是酒后编程
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mysql_real_escape_string()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nan-ji-de-can-shu&quot;&gt;难记的参数&lt;&#x2F;h3&gt;
&lt;p&gt;这个是很要命的，有些方法，我是用一次，看一次手册，比如 strpos&#x2F;in_array&#x2F;basename&#x2F;...，完全没有套路可循。有些把$needle放到前面，$haystack 放到后面(如 explode)，有些正好倒过来(如 strpos)，太影响写程序的效率了。怪不得写 PHP 的基本都需要一个强大的 IDE(如 Zend&#x2F;NetBeans)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-ming-kong-jian-de-que-shi&quot;&gt;命名空间的缺失&lt;&#x2F;h3&gt;
&lt;p&gt;就好像一大堆能人异士挤在一个房子里，要用到什么功能了，就抓一个出来，如果要往这个房间加人的话，还得保证不能跟已有的重名。如果有命名空间的话，就方便了，新建一个屋子，只要这个屋子不跟别的屋子重名就行，屋子里的人爱起什么名起什么名，完全不用担心冲突。好在 php5.3 加入了命名空间，虽然用起来还是挺别扭。&lt;&#x2F;p&gt;
&lt;p&gt;下面来说说 python 吧，其实 python 的职能是跨平台软件开发，但也可以用做 web 开发，而且出现了不少优秀的 web 框架，所以就不可避免地与 php 正面交锋(php 虽然也可以用来开发 gui 软件，但多少有点旁门左道的感觉)。&lt;&#x2F;p&gt;
&lt;p&gt;python 给我的感觉是简洁，强大且优雅。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-ji&quot;&gt;简洁&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;半个单词能搞定的就不用整个单词，如 def&#x2F;elif&#x2F;iter&lt;&#x2F;li&gt;
&lt;li&gt;一行能搞定的就不用多行&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#generator expressions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sum(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;同时对多个变量赋值&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;a, b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qiang-da&quot;&gt;强大&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;内置了 3 种常用数据结构：tuple&#x2F;list&#x2F;dictionary&lt;&#x2F;li&gt;
&lt;li&gt;支持匿名函数&lt;&#x2F;li&gt;
&lt;li&gt;多线程&lt;&#x2F;li&gt;
&lt;li&gt;函数的参数(可以不按顺序传参，这是个亮点)&lt;&#x2F;li&gt;
&lt;li&gt;...(php 有的，python 基本也少不了)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;you-ya&quot;&gt;优雅&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;一切皆对象&lt;&#x2F;li&gt;
&lt;li&gt;一切皆引用&lt;&#x2F;li&gt;
&lt;li&gt;模块机制&lt;&#x2F;li&gt;
&lt;li&gt;独特的书写风格(这个因人而异吧，觉得换行+tab 很别扭的也大有人在)&lt;&#x2F;li&gt;
&lt;li&gt;自我说明(docstring+pydoc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然 python 也非完美，不爽的地方也挺多的，如参数的默认值如果是 mutable(可变的)，只会在第一次调用时初始化；class 的方法至少要传一个 self 参数等等。但瑕不掩瑜，php 程序员还是应该了解一下 python，即使不是全面转向 python。&lt;&#x2F;p&gt;
&lt;p&gt;对了，使用 python 还有一个很重要的原因是：GAE(我知道有 SAE，但~~~)&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;ioreader.com&#x2F;2007&#x2F;08&#x2F;19&#x2F;12-things-you-should-dislike-about-php&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;ioreader.com&#x2F;2007&#x2F;08&#x2F;17&#x2F;11-cool-things-about-php-that-most-people-overlook&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;PythonVsPhp&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1486608&#x2F;is-switching-from-php-to-python-worth-the-trouble&lt;&#x2F;li&gt;
&lt;li&gt;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;3319261&#x2F;php-devs-that-moved-to-python-is-the-experience-better&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>数据分离并快速显示网页</title>
            <pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/rest-flush-template/</link>
            <guid>https://limboy.me/posts/rest-flush-template/</guid>
            <description>&lt;p&gt;传统网站一般都是用户发出一个 http 请求，服务端接收到请求后开始业务逻辑的处理，然后把处理后的数据渲染到模板页，最后把内容输出到用户的浏览器。&lt;&#x2F;p&gt;
&lt;p&gt;这个过程有个问题: 如果服务端处理的时间过长(比如某个费时的 SQL 语句)，那么用户将看不到任何内容，即使有些数据已经处理完毕。&lt;&#x2F;p&gt;
&lt;p&gt;解决办法很简单，就是使用 php 的&lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;flush&quot;&gt;flush&lt;&#x2F;a&gt;方法，它可以将内容立刻输出到用户的浏览器。也就是处理完哪些就输出哪些，这样即使卡在了某个操作，用户也能看到已经处理完的结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flush-de-shi-xian-yuan-li&quot;&gt;flush 的实现原理&lt;&#x2F;h3&gt;
&lt;p&gt;正常的 http 返回头信息里会包含&amp;quot;Content-Length&amp;quot;一项，标明本次传输的字节数。http 1.1 新增了&amp;quot;Transfer-Encoding&amp;quot;选项，可以指定为&amp;quot;chunked&amp;quot;，这样就不用理会&amp;quot;Content-Length&amp;quot;选项了(因为不知道到底会传输多少字节)。服务端按照 chunked 标准输出内容，客户端收到&amp;quot;Transfer-Encoding:chunked&amp;quot;头信息后，也会按照 chunked 标准去解析内容。&lt;&#x2F;p&gt;
&lt;p&gt;举个例子，有一条河，河的一边着火了，需要到河的另一边找人救火，然后你迅速架了一座桥(TCP&#x2F;IP)，然后跑到对岸(发送 http 请求)，跟那里的村长说明了情况(服务器收到 http 请求)，以前的做法是村长到各家各户召集劳动力(服务器集群)，等把劳动力都召集完了，统一过河去救火(发送处理完的结果)。但在召集的过程中，某家正在干架，这时村长得先苦口婆心地做思想工作，等工作做完了，再把男人召集出来，但这段时间里，河对岸的火依旧在着(用户漫长的等待，可能真的要火了)，所以很可能由于某家或某几家的特殊情况导致延误了救火的最佳时机。现在的做法是只要召集到人了，马上过河去救火，把平常最容易出状况的几户人家留到最后去召集(负担比较重的几台服务器)，这样火被扑灭的可能性就大大增加了。&lt;&#x2F;p&gt;
&lt;p&gt;flush 就好比是服务端推(push)，ajax 是客户端拉(pull)。推的话可以利用已经建立的 http 连接，如果是拉的话，每拉一次就要建立一次 http 连接，代价还是比较大的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-rest-he-client-template&quot;&gt;使用 REST 和 Client Template&lt;&#x2F;h3&gt;
&lt;p&gt;flush 解决了内容的即时显示问题，如果要做到数据与结构分离，可以使用 REST(当然其他的 web service 也没有问题，REST 只是个人喜好)。REST 作为数据源，Controller 收到请求后，先通过 REST 去取数据，取到数据后，封装到一段 js 里，然后 flush 给客户端，循环此过程，直到客户端需要的所有数据都传输完毕。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Controller_Post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 显示某篇具体的文章
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;action_index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 输出页面模板
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post_index&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 开始获取REST数据，并flush
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;REST_Post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, json_encode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$post_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取该文章的评论
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;REST_Comment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comments&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, json_encode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$comments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;js_render方法，定义在其他文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; string $id 页面的dom id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; array $data 使用到的数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;js_render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 模板页已经定义了js的render方法
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;lt;script&amp;gt;render(&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;)&amp;lt;&#x2F;script&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来看看模板页&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1&#x2F;jquery.min.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 模板引擎 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script src=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;trimpath.googlecode.com&#x2F;files&#x2F;trimpath-template-1.0.38.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 这个就是在js_render方法里用到的render方法
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;TrimPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;processDOMTemplate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;#&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;replaceWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;${title}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9ae5;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;${content}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个模板页没有&lt;code&gt;&amp;lt;&#x2F;body&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;code&gt;，因为我们之后还要往这个页面里输入内容，最后渲染完的页面大概是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- &#x2F;&#x2F;... --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; template here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;textarea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- more textarea template --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&amp;lt;!-- 这些是flush出来的 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;post&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;what a wonderful life&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      })&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;comments&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, {[&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah blah&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2010-09-20&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;], [&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah blah&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;2010-09-30&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5d9be5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样服务端只提供数据，客户端负责解析这些数据，并显示到页面。将来如果开放 API，或者要针对手机开发，也很方便了，因为网站本身用的就是 API，而手机的话，只要换个显示的模板就行了。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>SSH小技巧</title>
            <pubDate>Sat, 28 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ssh-tips/</link>
            <guid>https://limboy.me/posts/ssh-tips/</guid>
            <description>&lt;p&gt;参考：
&lt;a href=&quot;http:&#x2F;&#x2F;blog.ksplice.com&#x2F;2010&#x2F;08&#x2F;six-things-i-wish-mom-told-me-about-ssh&#x2F;&quot;&gt;Six Things I wish Mom told me(about ssh)&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;troy.jdmz.net&#x2F;rsync&#x2F;index.html&quot;&gt;Using Rsync and Ssh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;用过 linux 的，对 SSH 应该就比较熟悉了，但有些技巧可能你未必知道。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lian-jie-cheng-gong-hou-yun-xing-ming-ling&quot;&gt;连接成功后运行命令&lt;&#x2F;h3&gt;
&lt;p&gt;我们都知道可以通过 SSH 获取远程 shell，然后运行命令。如果只想运行单个命令的话，直接把命令附加在 SSH 命令之后即可，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; bebop 2.6.32-24-generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#39-Ubuntu SMP Wed Jul 28 05:14:15 UTC 2010 x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个最好结合无须输入密码的 SSH 登录。如果想获取 python 版本，直接&amp;quot;ssh hostname python -V&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;但有些命令可能会报错，如&amp;quot;top&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop top
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TERM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; environment variable not set.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时只需加上&amp;quot;-t&amp;quot;参数就行了。&lt;&#x2F;p&gt;
&lt;p&gt;这里我们执行 ssh 连接时并没有指定具体的主机名(ip)和用户，而只是&amp;quot;bebop&amp;quot;，这是如何做到的呢？且看下文&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-bie-ming&quot;&gt;使用别名&lt;&#x2F;h3&gt;
&lt;p&gt;假如在一个主机上为不同用户分别开通了不同的 ssh 账号，连接时就得这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 2222 bob.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8183 waseem@alice.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 31337&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; waseemio wsd.example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很麻烦，而且端口或者其他参数有变动的话，不一定记得住。其实只要配置一下.ssh&#x2F;config 文件就可以了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Host bob
&lt;&#x2F;span&gt;&lt;span&gt;    HostName bob.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 2222
&lt;&#x2F;span&gt;&lt;span&gt;    User wdaher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host alice
&lt;&#x2F;span&gt;&lt;span&gt;    HostName alice.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 8183
&lt;&#x2F;span&gt;&lt;span&gt;    User waseem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host self
&lt;&#x2F;span&gt;&lt;span&gt;    HostName wsd.example.com
&lt;&#x2F;span&gt;&lt;span&gt;    Port 31337
&lt;&#x2F;span&gt;&lt;span&gt;    User waseemio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;连接时，就变成这样了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh alice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh self
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很方便，如果 SSH 的参数改变的话，修改配置文件就行了，命令不变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duan-kou-zhuan-fa&quot;&gt;端口转发&lt;&#x2F;h3&gt;
&lt;p&gt;假设有这么个情况：你已下班回家，这时想要查看公司内网(analytics)的某个 web 页，但只能 SSH 到自己在公司的电脑(desktop)，desktop 和 analytics 在一个局域网。&lt;&#x2F;p&gt;
&lt;p&gt;先来看一段命令&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080:desktop:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段命令表示的是 ssh 连到 desktop 后，转发本地 8080 端口到 desktop 的 80 端口，这时，如果访问&amp;quot;http:&#x2F;&#x2F;localhost:8080&amp;quot;，就会转发到 desktop 的 80 端口。这样的话，把 desktop:80 换成 analytics:80 不就大功告成了吗&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080:analytics:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样访问本地的 8080 端口，就会转到 analytics 的 80 端口，通过 desktop 这个跳板。&lt;&#x2F;p&gt;
&lt;p&gt;更加一劳永逸的方法是使用-D 参数，将 desktop 变成一个&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;490489.htm?fr=ala0_1&quot;&gt;socks5&lt;&#x2F;a&gt;代理服务器(对这个-D 命令，大家应该都很熟悉了吧)，然后在浏览器中配置代理为&amp;quot;localhost:8080&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; desktop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 8080 desktop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样所有的浏览器访问都会通过 desktop 进行转发，也就是说直接访问 http:&#x2F;&#x2F;analytics 就可以了。(analytics 地址在 hosts 里配置，如 192.168.1.110 analytics)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&amp;quot;~&amp;quot;&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;~&amp;quot;(不包括引号)是 ssh 保留字符，在新行输入&amp;quot;~&amp;quot;后，可以配合很多键，其中最常用的就是&amp;quot;~.&amp;quot;和&amp;quot;~^Z&amp;quot;(Ctrl+Z)&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;~.&amp;quot;会终止 ssh 连接，如果中断了连接，又不想等 ssh session 过期，就可以使用这个快捷键。&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;~^Z&amp;quot;会把当前的 ssh 连接放到后台，等完成了其他工作后，再把这个连接取出来。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ssh bebop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@bebop:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; sleep 10000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@bebop:~$ ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;^Z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;suspend ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[1]+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  Stopped                 ssh bebop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Do something else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wdaher@rocksteady:~$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; fg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# and you&amp;#39;re back!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tong-guo-authorized-keys-zhi-ding-deng-lu-hou-yao-zhi-xing-de-ming-ling&quot;&gt;通过 authorized_keys 指定登录后要执行的命令&lt;&#x2F;h3&gt;
&lt;p&gt;这个跟前面提到的&amp;quot;连接成功后运行命令&amp;quot;不一样，这个命令是定义在 authorized_keys 里的，ssh 连上后，只能执行该命令，并且执行完后立即退出。&lt;&#x2F;p&gt;
&lt;p&gt;先看看正常的 authorized_keys&lt;&#x2F;p&gt;
&lt;pre&gt;
ssh-dss AAAAB3NzaC1kc3MAAAEBAKYJenaYvMG3nHwWxKwlWLjHb77CT2hXwmC8Ap+fG8wjlaY&#x2F;9t4u
A+2qx9JNorgdrWKhHSKHokFFlWRj+qk3q+lGHS+hsXuvta44W0yD0y0sW62wrEVegz+JVmntxeYc0nDz
5tVGfZe6ydlgomzj1bhfdpYe+BAwop8L+EMqKLS4iSacNjoPlHsmqHMnbibn3tBqJEq2QJjEPaiYj1iP
5IaCuYBhuTKQGa+oyH3mXEif5CKdsIKBj46B0tCy0&#x2F;GC7oWcUN92QdLrUyTeRJZsTWsxKpRbMliD2pBh
4oyX&#x2F;aXEf8+HZBrO5vQjDBCfTFQA+35Xrd3eTVEjkGkncI0SAeUAAAAVAMZSASmQ9Pi38mdm6oiVXD55
Kk2rAAABAE&#x2F;bA402VuCsOLg9YS0NKxugT+o4UuIjyl6b2&#x2F;cMmBVWO39lWAjcsKK&#x2F;zEdJbrOdt&#x2F;sKsxIK
1&#x2F;ZIvtl92DLlMhci5c4tBjCODey4yjLhApjWgvX9D5OPp89qhah4zu509uNX7uH58Zw&#x2F;+m6ZOLHN28mV
5KLUl7FTL2KZ583KrcWkUA0Id4ptUa9CAkcqn&#x2F;gWkHMptgVwaZKlqZ+QtEa0V2IwUDWS097p3SlLvozw
46+ucWxwTJttCHLzUmNN7w1cIv0w&#x2F;OHh5IGh+wWjV9pbO0VT3&#x2F;r2jxkzqksKOYAb5CYzSNRyEwp+NIKr
Y+aJz7myu4Unn9de4cYsuXoAB6FQ5I8AAAEBAJSmDndXJCm7G66qdu3ElsLT0Jlz&#x2F;es9F27r+xrg5pZ5
GjfBCRvHNo2DF4YW9MKdUQiv+ILMY8OISduTeu32nyA7dwx7z5M8b+DtasRAa1U03EfpvRQps6ovu79m
bt1OE8LS9ql8trx8qyIpYmJxmzIdBQ+kzkY+9ZlaXsaU0Ssuda7xPrX4405CbnKcpvM6q6okMP86Ejjn
75Cfzhv65hJkCjbiF7FZxosCRIuYbhEEKu2Z9Dgh+ZbsZ+9FETZVzKBs4fySA6dIw6zmGINd+KY6umMW
yJNej2Sia70fu3XLHj2yBgN5cy8arlZ80q1Mcy763RjYGkR&#x2F;FkLJ611HWIA= thisuser@thishost
&lt;&#x2F;pre&gt;
&lt;p&gt;修改之后，就是这样&lt;&#x2F;p&gt;
&lt;pre&gt;
from=&quot;10.1.1.1&quot;,command=&quot;&#x2F;home&#x2F;remoteuser&#x2F;command&quot; ssh-dss AAAA...
&lt;&#x2F;pre&gt;
&lt;p&gt;其实就是在最前面加了 from 和 command，from 表明从哪个 ip 连过来的，如果是用 adsl 拨号上网，ip 会经常变动，可以把这个参数去掉。command 表明连接成功后要执行的命令，可以在 command 里限制该用户可以执行的命令(别忘了加上可执行权限)，假设限制该用户只能执行 rsync 命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SSH_ORIGINAL_COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span&gt;rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span&gt;--server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$SSH_ORIGINAL_COMMAND
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Rejected&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;esac
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$SSH_ORIGINAL_COMMAND 表示的是用户实际执行的命令&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-ji-qiao&quot;&gt;其他技巧&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;jin-zhi-root-yong-hu-deng-lu&quot;&gt;禁止 Root 用户登录&lt;&#x2F;h3&gt;
&lt;p&gt;允许 root 用户登录太危险了(虽然很方便)，因为可以删除任何文件，可以在&#x27;&#x2F;etc&#x2F;ssh&#x2F;sshd_config&#x27;里配置一下。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PermitRootLogin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; no
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#或者只允许执行有限的命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PermitRootLogin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; forced-commands-only
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mian-mi-ma-deng-lu&quot;&gt;免密码登录&lt;&#x2F;h3&gt;
&lt;p&gt;先用 ssh-keygen 生成一对私钥和公钥，然后把公钥添加到远程主机的 authorized_keys 里就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#生成私钥和公钥，默认放在~&#x2F;.ssh&#x2F;文件夹下，也可以自定义，提示输入passphare时，直接回车
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#顺利的话就会在~&#x2F;.ssh&#x2F;文件夹下生成id_rsa.pub和id_rsa两个文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-keygen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rsa
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#把id_rsa.pub上传到远程主机，方法很多，ssh-copy-id只是其中一种
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-copy-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; username@hostname
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#如果id_rsa.pub在其他文件夹下
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ssh-copy-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;id_rsa.pub username@hostname
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样下次就可以直接登录了&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>PHP特性小结</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/hidden-php-features/</link>
            <guid>https://limboy.me/posts/hidden-php-features/</guid>
            <description>&lt;p&gt;其实就是总结了一下&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;61401&#x2F;hidden-features-of-php&quot;&gt;这个帖子&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-dang&quot;&gt;文档&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 文档的特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;浏览方便&lt;&#x2F;li&gt;
&lt;li&gt;用户评论是一大亮点&lt;&#x2F;li&gt;
&lt;li&gt;要查询某个函数，输入：www.php.net&#x2F;function 就会跳转到该函数的具体页&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shu-zu&quot;&gt;数组&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 的数组是我用过的语言中最强大的，其实就是个有序映射表(ordered map)，并为各种使用作了优化。可以看作列表、哈希表、字典、集合、栈、队列。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liu-chu-li&quot;&gt;流处理&lt;&#x2F;h3&gt;
&lt;p&gt;可以扩展文件流，比如&lt;a href=&quot;http:&#x2F;&#x2F;www.phpclasses.org&#x2F;browse&#x2F;package&#x2F;1919.html&quot;&gt;excel 流处理&lt;&#x2F;a&gt;，可以通过下面的语句来创建一个 excel 文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fopen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xlsfile:&#x2F;&#x2F;tmp&#x2F;test.xls&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;wb&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_resource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Cannot open excel file&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Bob Loblaw&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Popo Jijo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Tiny Tim&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Age&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fwrite(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, serialize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mo-zhu-fang-fa&quot;&gt;魔术方法&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$func&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__toString&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;or-and&quot;&gt;or&#x2F;and&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;OR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;$foo is not defined&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;spl-autoload-register&quot;&gt;spl_autoload_register&lt;&#x2F;h3&gt;
&lt;p&gt;使用 spl_autoload_register，而不是__autoload，因为 spl_autoload_register 允许设置多个实例，而不会覆盖。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spl_autoload_register(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;autoloader&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;autoloader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里可以对$class进行处理
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;set-include-path&quot;&gt;set_include_path&lt;&#x2F;h3&gt;
&lt;p&gt;设置引用路径，比如引用 zend 的 libraries 时。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;set_include_path(get_include_path() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;PATH_SEPARATOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;..&#x2F;libs&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chu-li-yuan-cheng-wen-jian-url&quot;&gt;处理远程文件&#x2F;url&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fopen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;example.com&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;file_get_contents(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;example.com&#x2F;file&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$imageInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;getimagesize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;ftp:&#x2F;&#x2F;user:password@ftp.example.com&#x2F;image&#x2F;name.jpg&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然这些函数的健壮性和稳定性不如 curl，但毕竟使用方便。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strtr&quot;&gt;strtr&lt;&#x2F;h3&gt;
&lt;p&gt;使用方便，效率高，用来替换字符串内的特定值。有点类似 str_replace，但更灵活。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo strtr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hello world&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;world&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hell&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;extract&quot;&gt;extract&lt;&#x2F;h3&gt;
&lt;p&gt;顾名思义，释放一个数组内的元素，构造模板引擎的时候尤为有用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;extract(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$foo&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; output &amp;#39;bar&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;func-get-args&quot;&gt;func_get_args&lt;&#x2F;h3&gt;
&lt;p&gt;获取传递过来的参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func_get_args()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; will print &amp;#39;d&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; will print 3
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;d&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cli&quot;&gt;cli&lt;&#x2F;h3&gt;
&lt;p&gt;command line interface，可以在命令行里运行 php 脚本，用来处理日常任务也非常方便。对了别忘了一个非常有用的参数 -a，进入交互模式&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Interactive shell
&lt;&#x2F;span&gt;&lt;span&gt;php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-ru-de-wen-jian-ke-yi-you-fan-hui-zhi&quot;&gt;载入的文件可以有返回值&lt;&#x2F;h3&gt;
&lt;p&gt;这个比.ini 文件更加灵活，你可以在文件里运行一段程序后，返回运行结果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; config.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;db&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$_SERVER&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;HTTP_HOST&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;localhost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;example.org&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;usr&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; index.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;config.php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$config&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;db&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;host&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; example.org
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zai-han-shu-nei-ding-yi-jing-tai-bian-liang&quot;&gt;在函数内定义静态变量&lt;&#x2F;h3&gt;
&lt;p&gt;把类的特性移植到函数里了，比如有一些运算量较大的函数，可以把运算结果放到这个静态变量，下次调用时检查一下该变量是否已经被赋值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;isset(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Do the work here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$results&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cache&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;md5(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;heredoc&quot;&gt;heredoc&lt;&#x2F;h3&gt;
&lt;p&gt;不用再为引号发愁了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;EOM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  &amp;lt;div id=&amp;quot;someblock&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    &amp;lt;img src=&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;EOM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ba-zi-fu-chuan-dang-zuo-shu-zu&quot;&gt;把字符串&amp;quot;当作&amp;quot;数组&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;hell o World&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;hell o World&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;H&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;Hell o World&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;outputs: &amp;quot;Hello World&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kuai-su-zhu-shi-fan-zhu-shi-yi-duan-dai-ma&quot;&gt;快速注释&#x2F;反注释一段代码&lt;&#x2F;h3&gt;
&lt;p&gt;这个确实很有意思&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;blah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;die&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;not commented&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	echo &amp;#39;blah&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	die(&amp;#39;commented&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;*&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;han-shu-can-shu-lei-xing-ti-shi&quot;&gt;函数参数类型提示&lt;&#x2F;h3&gt;
&lt;p&gt;相对于其他编程语言(java&#x2F;c#)，php 这块比较弱，只能判断数组和对象&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$param0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;stdClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$param1 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shu-zu-he-bing&quot;&gt;数组合并&lt;&#x2F;h3&gt;
&lt;p&gt;不用 array_merge，而是使用&#x27;+&#x27;，使用更方便，也更易理解。在处理默认值和用户定义值时尤为方便。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Set the normal defaults.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control_defaults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;type&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;text&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;size&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$control_defaults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;name&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;surname&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;size&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;40 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shu-chu-huan-chong&quot;&gt;输出缓冲&lt;&#x2F;h3&gt;
&lt;p&gt;使用 ob_start，关键是 ob_start 还支持 callback，真是太贴心了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;censor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strtr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;胡萝卜&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;***&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_start(&lt;&#x2F;span&gt;&lt;span&gt;censor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;小白兔最爱吃胡萝卜&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ob_end_flush()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;输出：小白兔最爱吃***
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fan-she&quot;&gt;反射&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ca.php.net&#x2F;manual&#x2F;en&#x2F;book.reflection.php&quot;&gt;reflection&lt;&#x2F;a&gt;，很强大，基本上能还原一个类的实际面貌。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ctype-function&quot;&gt;ctype function&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;ctype_alnum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为字母和数字的组合
&lt;&#x2F;span&gt;&lt;span&gt;ctype_digit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为数字
&lt;&#x2F;span&gt;&lt;span&gt;ctype_alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;是否为字母
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kuai-su-xiang-shu-zu-tian-jia-yuan-su&quot;&gt;快速向数组添加元素&lt;&#x2F;h3&gt;
&lt;p&gt;如果是追加一个元素的话，推荐使用这种方法，而不是 array_push&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;foo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$arr&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;xu-lie-hua-fan-xu-lie-hua&quot;&gt;序列化&#x2F;反序列化&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;serialize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;unserialize
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;json-zhi-chi&quot;&gt;json 支持&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;json_encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;json_decode
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;huo-qu-dui-xiang-de-lei&quot;&gt;获取对象的类&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_class(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dong-tai-diao-yong-han-shu-fang-fa&quot;&gt;动态调用函数&#x2F;方法&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;call_user_func_array
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cuo-wu-yi-chang-chu-li&quot;&gt;错误&#x2F;异常处理&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;set_error_handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;set_exception_handler
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br &#x2F;&gt;
&lt;h3 id=&quot;wang-you-ti-gong&quot;&gt;网友提供&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;array-walk-via-cloudchen&quot;&gt;array_walk (via cloudchen)&lt;&#x2F;h3&gt;
&lt;p&gt;array_walk() 能让结构化数据的处理逻辑更清晰.
实现接近 js 的传入函数 as 参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;create_sth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$walked_value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;delete_sth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$walked_value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fetch_directory_contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_walk(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;create_sth&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;array_walk(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;delete_sth&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$other_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        
        
        <item>
            <title>嵌套评论的一个数据库设计技巧</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/nested-comments/</link>
            <guid>https://limboy.me/posts/nested-comments/</guid>
            <description>&lt;p&gt;前些日子看 drupal 源码时学到的。要实现嵌套评论，只要在表里加一个 parent_id 字段即可，添加评论的时候很方便，不过显示起来就会慢&#x2F;麻烦一点。其实只要在表里再添加一个字段，就可以高效&#x2F;快速的显示评论了，这个字段就是 thread。看一下 SQL 构造语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT EXISTS `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;comments&lt;&#x2F;span&gt;&lt;span&gt;` (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt; AUTO_INCREMENT,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`parent_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`topic_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`user_id` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`username` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`created` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`changed` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`status` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`content` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`thread` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`id`&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;) ENGINE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;MyISAM  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DEFAULT&lt;&#x2F;span&gt;&lt;span&gt; CHARSET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;utf8;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;thread 类似这样&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;存储在thread字段中的数据类似下面
&lt;&#x2F;span&gt;&lt;span&gt;1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.2&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;1.a&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;2&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;加上&amp;quot;&#x2F;&amp;quot;是因为&amp;quot;&#x2F;&amp;quot;的 ascii 值小于任何数字，但大于&amp;quot;.&amp;quot;，这样如果把主回复按时间倒序排序的话，直接&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`comments` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; topic_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ORDER BY&lt;&#x2F;span&gt;&lt;span&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;DESC
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果把主回复按时间正序排序(从小到大)的话，就有问题了，因为&amp;quot;1&#x2F;&amp;quot; &amp;gt; &amp;quot;1.1&#x2F;&amp;quot;，结果就是&amp;quot;1.1&#x2F;&amp;quot;在&amp;quot;1&#x2F;&amp;quot;前面，这当然是不合理的，只要把最后的&amp;quot;&#x2F;&amp;quot;去掉就行了，这样&amp;quot;1&amp;quot;就小于&amp;quot;1.1&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;`comments` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; topic_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ORDER BY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;SUBSTRING&lt;&#x2F;span&gt;&lt;span&gt;(c.thread, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, (LENGTH(c.thread) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ASC
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显示时，可以根据 thread 里&amp;quot;.&amp;quot;的数量处理缩进(回复的回复)&lt;&#x2F;p&gt;
&lt;p&gt;如果你还有更好的方法，欢迎交流&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>php 的多进程</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/php-process-control/</link>
            <guid>https://limboy.me/posts/php-process-control/</guid>
            <description>&lt;p&gt;一般有两种方法，一种是使用 PHP 自带的 pcntl_*函数(仅限 linux)，另一种就是使用 popen&#x2F;proc_open，然后在 php 内部控制进程数量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-pcntl-han-shu&quot;&gt;使用 pcntl_*函数&lt;&#x2F;h3&gt;
&lt;p&gt;PHP 提供了一系列的 pcntl_*函数，顾名思义就是 process control functions，专门用来管理进程的。最常用的就是 pcntl_fork 和 pcntl_wait。&lt;&#x2F;p&gt;
&lt;p&gt;pcntl_fork 的作用就是从当前的进程再派生出一个子进程。pcntl_wait 的作用是挂起当前进程，直到一个子进程中止。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;配合pcntl_signal使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(ticks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;最大的子进程数量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;当前的子进程数量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;当子进程退出时，会触发该函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sig_handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$sig&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$sig&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;SIGCHLD:
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;SIGCHLD received&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;注册子进程退出时调用的函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_signal(&lt;&#x2F;span&gt;&lt;span&gt;SIGCHLD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;sig_handler&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 这个函数会返回两个值，一个为0，表示子进程；一个为正整数表示子进程的id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * 所以if和else里的两段代码都会执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * if里的代码是父进程执行的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 * else里的代码是子进程执行的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_fork()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$pid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里是父进程执行的代码
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果子进程数超过了最大值，则挂起父进程
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;也就是说while语句不会继续执行
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$max&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pcntl_wait(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;这里是子进程执行的代码
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;如果要执行其他命令的话，使用pcntl_exec
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;starting new child | now we have &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; child process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(rand(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面这段代码就是保证有 5 个子进程一直在干活，如果$child数量大于$max，就等子进程结束后再继续运行。子进程结束后会调用 sig_handler 函数，sig_handler 会将$child 数量减 1，那边 while 继续执行。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-popen-proc-open&quot;&gt;使用 popen&#x2F;proc_open&lt;&#x2F;h3&gt;
&lt;p&gt;popen 会创建一个管道来连接该进程，然后使用 fread&#x2F;fgets&#x2F;stream_get_contents 来读取该进程返回的结果。跟 exec 或 system 之类的函数不同的是，exec 会等待命令执行完成，再运行下面的代码，但 popen 不会。proc_open 又更加强大一些，支持 stdin 和 stdout，路径设置等等。&lt;&#x2F;p&gt;
&lt;p&gt;因为这些函数只负责创建，没有相应的管理方法，所以只能在 PHP 文件内部自己来实现。
demo(引用自张宴——&lt;a href=&quot;http:&#x2F;&#x2F;blog.s135.com&#x2F;post&#x2F;311&#x2F;&quot;&gt;PHP 多进程并发控制的测试用例&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;worker_processes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;popen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;bin&#x2F;sh &#x2F;opt&#x2F;zhangyan.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; &amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;worker_processes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$limit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;允许推到后台的最大进程数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;popen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ps -ef | grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;opt&#x2F;zhangyan.sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; | grep -v grep | wc -l&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fread(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;512&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pclose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$limit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$line&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;暂停1秒钟
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;blog.s135.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;模拟从队列文件中读取到的数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Idle process number: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$p_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cheng-xu-de-luo-ji&quot;&gt;程序的逻辑：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置&#x2F;opt&#x2F;zhangyan.php 最多允许生成 500 个子进程；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当&#x2F;opt&#x2F;zhangyan.php 读取到一条数据后，将允许生成的子进程数减 1（空闲进程数$p_number=500-1=499），然后将数据交给&#x2F;opt&#x2F;zhangyan.sh 去后台处理，不等待&#x2F;opt&#x2F;zhangyan.sh 处理结束，继续读取下一条数据；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当允许生成的子进程数减至 0 时（空闲进程数$p_number=0），&#x2F;opt&#x2F;zhangyan.php 会等待 1 秒钟，然后检查后台还有多少个&#x2F;opt &#x2F;zhangyan.sh 子进程尚未处理结束；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果 1 秒钟之后&#x2F;opt&#x2F;zhangyan.php 发现后台的&#x2F;opt &#x2F;zhangyan.sh 子进程数还是 500（空闲进程数$p_number=0），会继续等待 1 秒钟，如此反复；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果&#x2F;opt &#x2F;zhangyan.php 发现后台尚未处理结束的&#x2F;opt&#x2F;zhangyan.sh 子进程数减少到 300 个了（空闲进程数$p_number=500-300=200），那么&#x2F;opt&#x2F;zhangyan.php 会再往后台推送 200 个&#x2F;opt&#x2F;zhangyan.sh 子进程；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;总体来说还是使用 pcntl_*系函数更方便一些，逻辑也更清楚。&lt;&#x2F;p&gt;
</description>
        </item>
        
    </channel>
</rss>