<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Limboy - book</title>
        <link>https://limboy.me</link>
        <description></description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://limboy.me/tags/book/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate>
        
        <item>
            <title>十分钟冥想</title>
            <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/ten-minutes-a-day-mindfulness/</link>
            <guid>https://limboy.me/posts/ten-minutes-a-day-mindfulness/</guid>
            <description>&lt;p&gt;对于冥想，我们经常听到的一句话是：把注意力集中在呼吸上。可这样做到底有什么用，走神了怎么办？&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;34888157&#x2F;&quot;&gt;十分钟冥想&lt;&#x2F;a&gt;这本书带来了一些解答。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;一点题外话，比尔·盖茨把这本书加入到了他的推荐书单中，但是在 &lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;34888157&#x2F;&quot;&gt;GoodReads&lt;&#x2F;a&gt; 上打了三星···&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;书中对冥想的体验做了很多比喻，如路边看车，蓝天白云，池塘，舞台。我更喜欢路边看车的比喻，在冥想过程中，各种念头就像车一样在路上开过，你就在路边看着，但不上车。不过我想对这个比喻做一点改造，还是在路边，但不是看车，而是看路边的树，就像把注意力集中在呼吸上，想法就像车子一样会在路上穿梭，有一些车可能特别好看，就多看两眼，有人在车里向你打招呼可能还会上去坐一会儿，这些都没问题，只是要记得及时回来，继续看树。&lt;&#x2F;p&gt;
&lt;p&gt;树上会有鸟，也会有虫，抛去给事物加上的标签（如美丽的，丑陋的），按照最直接的方式去观察，去体验，每棵树看起来都差不多，但细看之下也会各有不同。&lt;&#x2F;p&gt;
&lt;p&gt;这其中有两个很重要的点：专注和觉察。冥想既是手段也是目的，当我们越来越擅长冥想后，就更容易做到专注和觉察，并将这两个技能运用到生活中，从这个角度来讲，冥想是一种技能。冥想本身也能对大脑产生潜移默化的影响，比如帮助缓解精神压力，维持大脑健康等等，因此冥想本身也可以是目标。&lt;&#x2F;p&gt;
&lt;p&gt;书中提到了「头脑空间」的概念，它是一种深层的宁静感和满足感，无关乎当时的情绪，一种你知道一切都安好的状态。这就是冥想可以达到的结果。再来说说「正念」，正念是在做任何事情时心在当下，安定在当下的能力，通过冥想练习，可以帮助习得这个能力。&lt;&#x2F;p&gt;
&lt;p&gt;还有很重要的一点是「适度好奇」，去好奇情绪的源头到底在哪里，比如感到悲伤时，试着去寻找悲伤的源头，它是怎样的一件事，在身体的哪个部位，是不是可以将情绪与之分离？就像超人眼睛发射射线，把这辆车给销毁了。&lt;&#x2F;p&gt;
&lt;p&gt;不仅可以对情绪适度好奇，还可以对各种念头&#x2F;想法进行好奇，或者说凝视，经过这番凝视后，原本很强烈的想法，会变得不那么强烈。就好像一辆车在路上不断地按着喇叭不停地招呼你上车，而你就这么看着它，然后它会出于某种羞愧的感觉，慢慢地降低按喇叭的频率，默默开走。比如文章写了一半，想玩会游戏，就让这个想法自然地出来，而你就审视这个想法：这个想法是怎么冒出来的？是锋利的还是枯燥的？之前玩游戏的体验是怎样的？玩后的状态又是怎样的？审视的时间越长，这个想法就越不像自己的。（这一部分参考了「洞见」，还有待实践）&lt;&#x2F;p&gt;
&lt;p&gt;我自己在实践过程中发现，冥想 10 分钟还比较可控，但拉长到 30 分钟后，路上的车（各种想法）就越来越多，在看对面的房子（专注于呼吸）和看车（跟随想法）之间不断地切换，可能跟当时的状态也有关：晚上睡不着，就试了下卧式冥想。&lt;&#x2F;p&gt;
&lt;p&gt;把冥想的技能运用到生活中，就是正念，这时的冥想客体是当前在做的事情，而那些车子可能是想法或者情绪，保持觉察就是要知道路上有车子（比如要意识到自己目前的生气状态），同时不上车（不被这些情感支配，做出下意识的行为）。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说对应的工具，我目前在用的是 &lt;a href=&quot;https:&#x2F;&#x2F;endel.io&quot;&gt;Endel&lt;&#x2F;a&gt;，在声音上下了一番功夫，设计上也很有特点，使用起来还不错。但不能写入 Health 的 Mindfulness，App 内部也没有统计（如每天冥想多长时间），这点上稍有欠缺。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;根据「洞见：佛学为什么是真的」再补充一些，归纳起来还是两点：专注本体；觉察并审视想法和情绪。从进化论的角度来说，「人」这个系统，为了适应环境，提高基因传播率，会给各种事物贴上标签来提高效率，比如常见的树木，美丽的蝴蝶，丑陋的蟑螂，烦人的喇叭声等等，在这些情绪的包裹下再去观察事物，就像戴上了有色眼镜一样，容易失真。人也一样，不按好人和坏人来分，而是在不同场景下做的好事和坏事。充分调动感官，摘掉标签，去体验事物的本性，进而感受到更深层次的平静与安宁。&lt;&#x2F;p&gt;
&lt;p&gt;觉察并审视想法和情绪：想刷一会手机，玩会儿游戏，感到悲伤、紧张，当这些想法或情绪出现时（就像在上面例子中的车），通常会诱导你采取一些行动，或者让你陷入某种状态，这时需要先意识到它们，也就是觉察，然后再对它们进行审视，通常来说这些想法或情绪就会慢慢消解了（有待尝试和体验）。&lt;&#x2F;p&gt;
&lt;p&gt;这两点，都可以在冥想的过程中体验，并在现实生活中应用，所以每天多花些时间用来冥想，应该会不错。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>如何生活（How to Live）</title>
            <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/how-to-live/</link>
            <guid>https://limboy.me/posts/how-to-live/</guid>
            <description>&lt;p&gt;Derek Sivers 最近出了一本新书：&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&#x2F;h&quot;&gt;How to Live&lt;&#x2F;a&gt;，花了两年时间写作，两年时间修改，也是他认为迄今最好的作品，（目前还未对外开放，感兴趣的可以花 $15 在他的博客上购买）。&lt;&#x2F;p&gt;
&lt;p&gt;在讲书的内容前，先简单介绍下作者，我关注 Sivers 还是从他的&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&quot;&gt;博客&lt;&#x2F;a&gt;开始，他是一个音乐家，企业家，也是一个程序员，喜欢创作（Saying no to almost everything, so I can have lots of time for making.）。2008 年卖掉公司后，全身心投入到学习和创作中，&lt;a href=&quot;https:&#x2F;&#x2F;sive.rs&#x2F;about&quot;&gt;这里&lt;&#x2F;a&gt;有关于他自己的详细介绍。他的博客文章一般都不长，但往往挺有启发。我最感兴趣的是他的生活方式和处世哲学。&lt;&#x2F;p&gt;
&lt;p&gt;这本书中，作者罗列了 27 条有冲突的答案，看看哪些最能击中你，以下是击中我的部分：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-nuo-commit&quot;&gt;承诺（Commit）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;你一直在追寻最好的人、地方或职业&lt;br &#x2F;&gt;
但「追寻最好的」就是问题本身&lt;br &#x2F;&gt;
没有哪个选择是天然最好的&lt;br &#x2F;&gt;
成就最好选择的是你自己&lt;br &#x2F;&gt;
你通过承诺让选择成为了最好的选择&lt;br &#x2F;&gt;
你的信念和行动让选择变得更好&lt;&#x2F;p&gt;
&lt;p&gt;选择一个没有退路的承诺&lt;br &#x2F;&gt;
然后它就成了你最好的选择&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ve been looking for the best person, place, or career.&lt;br &#x2F;&gt;
But seeking the best is the problem.&lt;br &#x2F;&gt;
No choice is inherently the best.&lt;br &#x2F;&gt;
What makes something the best choice?
You
You make it the best through your commitment to it.&lt;br &#x2F;&gt;
You dedication and actions make any choice great.&lt;&#x2F;p&gt;
&lt;p&gt;Pick one and irreversibly commit.&lt;br &#x2F;&gt;
Then it becomes the best choice for you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生活中那些不重要的就让它去吧&lt;br &#x2F;&gt;
看起来可能微小，但加一起就会压垮你的灵魂&lt;br &#x2F;&gt;
将注意力集中在少数几个你承诺的事情上，其他的就别管了&lt;&#x2F;p&gt;
&lt;p&gt;不重要的事情不做&lt;br &#x2F;&gt;
重要的事情天天做&lt;&#x2F;p&gt;
&lt;p&gt;Ignore other aspects of your life
Let go of every unnecessary obligation
Each one seems small, but together, they&#x27;ll drain your soul.&lt;br &#x2F;&gt;
Focus your attention on the few things you&#x27;re committed to, and nothing else.&lt;&#x2F;p&gt;
&lt;p&gt;If it&#x27;s not important, never do it.&lt;br &#x2F;&gt;
If it&#x27;s important, do it every day.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;选择一个职业&lt;br &#x2F;&gt;
建立信誉和专业度&lt;br &#x2F;&gt;
因为切断了其他选项，你不会因此偏离方向&lt;br &#x2F;&gt;
因为你给了承诺，你就不会失败&lt;br &#x2F;&gt;
即使需要花更多年，你也不会失败，除非放弃&lt;&#x2F;p&gt;
&lt;p&gt;Commit to one career path
Build your expertise and reputation over time
Because you cut off other options, you won&#x27;t be derailed by distraction.&lt;br &#x2F;&gt;
Since you&#x27;re committed, you can&#x27;t fail.&lt;br &#x2F;&gt;
Even if it takes you years longer than expected, it&#x27;s not failure until you give up.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;shi-yao-ye-bu-zuo-do-nothing&quot;&gt;什么也不做（Do Nothing）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;你的情绪认为你应该回应&lt;br &#x2F;&gt;
如果忽略它的急迫性，它就消失了&lt;br &#x2F;&gt;
观察自己&lt;br &#x2F;&gt;
你的大脑是最好的实验室&lt;br &#x2F;&gt;
也是最私密和宁静的工作场所&lt;&#x2F;p&gt;
&lt;p&gt;Your emotions insist they need you to respond
When you ignore the urges, they go away.&lt;br &#x2F;&gt;
Observe yourself.&lt;br &#x2F;&gt;
Your own mind is the best laboratory.&lt;br &#x2F;&gt;
It&#x27;s also the most private and peaceful place to work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果需要钱，就成为投资人&lt;br &#x2F;&gt;
这是产出投入比最高的方式&lt;&#x2F;p&gt;
&lt;p&gt;If you need money, be an investor.&lt;br &#x2F;&gt;
It&#x27;s the only career where you profit the most by doing the least.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果看起来有必要付诸行动，并且摆脱不了这个想法，先写下来&lt;br &#x2F;&gt;
当你在想一件事时，通常它会变得重要&lt;br &#x2F;&gt;
一段时间后你会发现，并不是&lt;&#x2F;p&gt;
&lt;p&gt;如果依旧觉得有必要，拉长下时间线&lt;br &#x2F;&gt;
一年之后还会觉得重要么？&lt;br &#x2F;&gt;
十年之后？&lt;br &#x2F;&gt;
把时间线拉得足够长，它就会显得不那么重要&lt;br &#x2F;&gt;
然后它就不会再缠着你了&lt;&#x2F;p&gt;
&lt;p&gt;If an action feels necessary, and you can&#x27;t let it go, just write it down for later.&lt;br &#x2F;&gt;
Everything seems more important while you&#x27;re thinking of it.&lt;br &#x2F;&gt;
Later, you&#x27;ll realize it&#x27;s not.&lt;&#x2F;p&gt;
&lt;p&gt;But if it still feels necessary, adjust your time frame.&lt;br &#x2F;&gt;
A year from now, will it be important?
Ten years from now?
Zoom out as far as you need to make it unimportant.&lt;br &#x2F;&gt;
Then you&#x27;re free of it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;chang-xian-si-wei-think-super-long-term&quot;&gt;长线思维（Think Super-Long-Term）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;着眼于未来&lt;br &#x2F;&gt;
做能对未来（将来的自己和后代们）产生积极作用的[小]事情&lt;&#x2F;p&gt;
&lt;p&gt;在大脑里装一个时间机器，不断想象未来的自己和后代们会生活在怎样的世界&lt;br &#x2F;&gt;
用行动让想象不再遥远&lt;&#x2F;p&gt;
&lt;p&gt;Serve the future
Do small things now with huge benefits for your old self, your descendants, and future generations.&lt;&#x2F;p&gt;
&lt;p&gt;Actions amplify through time to have a massive impact on the future.&lt;br &#x2F;&gt;
Let this fact guide your life.&lt;br &#x2F;&gt;
Use a time machine in your mind, constantly picturing your future self and your great-grandchildren&#x27;s world.&lt;br &#x2F;&gt;
Act now to influence that time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;想象未来的自己评判当前的选择&lt;br &#x2F;&gt;
做一个决定时，想象当你老了会怎样看待这个决定&lt;br &#x2F;&gt;
未来的自己和家人会因为你做了什么而感激你&lt;br &#x2F;&gt;
现在一些不起眼的事情会通过时间的复利在将来给予回报&lt;&#x2F;p&gt;
&lt;p&gt;Imagine your future self judging your current life choices.&lt;br &#x2F;&gt;
When making a decision, ask yourself how you&#x27;ll feel about it when you&#x27;re old.&lt;br &#x2F;&gt;
What would your future self and family thank you for?
Simple actions now will compound to give them a better life.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;推迟满足感&lt;br &#x2F;&gt;
今天的不适会在将来得到回报&lt;br &#x2F;&gt;
如果未来可期，就不会在意当前的付出&lt;br &#x2F;&gt;
你永远不会后悔没有放纵&lt;&#x2F;p&gt;
&lt;p&gt;Delay gratification.&lt;br &#x2F;&gt;
Today&#x27;s discomfort brings future rewards.&lt;br &#x2F;&gt;
When you have a clear view of the future, you won&#x27;t mind the small sacrifice.&lt;br &#x2F;&gt;
You never regret not indulging.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;把钱花在能带来长远回报的事情上，比如教育&lt;br &#x2F;&gt;
换句话说，不要花钱，只有投资&lt;br &#x2F;&gt;
越早开始越好，因为时间就是那个乘数&lt;&#x2F;p&gt;
&lt;p&gt;Only spend money on things that do long-term good, like education.&lt;br &#x2F;&gt;
In other words, never spend, only invest.&lt;br &#x2F;&gt;
The earlier you start, the better, since time is the multiplier.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尤其注意那些看起来无害的习惯&lt;br &#x2F;&gt;
假想每个 Action 都会持续下去，而不是一次性的&lt;br &#x2F;&gt;
吃一个饼干，持续下去，你就会变胖&lt;br &#x2F;&gt;
开心购物，持续下去，你就会负债累累&lt;br &#x2F;&gt;
你选择一个行为，就选择了它带来的（将来的）结果&lt;&#x2F;p&gt;
&lt;p&gt;Be extra-careful of habits that seem harmless.&lt;br &#x2F;&gt;
Imagine each choice continuing forever.&lt;br &#x2F;&gt;
Eat a cookie, and eventually you&#x27;re obese.&lt;br &#x2F;&gt;
Shop for fun, and eventually you&#x27;re deep in debt.&lt;br &#x2F;&gt;
When you choose a behavior, you choose its future consequences.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhi-zao-hui-yi-make-memories&quot;&gt;制造回忆（Make Memories）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你老了，甚至忘了经年发生的事情&lt;br &#x2F;&gt;
如果想不起来，就像没有发生过&lt;br &#x2F;&gt;
你可以有一个健康长寿的生命，但如果你记不住，那就像你只有短暂的生命一样&lt;br &#x2F;&gt;
这多可悲&lt;&#x2F;p&gt;
&lt;p&gt;你要避免出现这种状况&lt;br &#x2F;&gt;
避免单调，保持新鲜体验&lt;&#x2F;p&gt;
&lt;p&gt;What if, when you&#x27;re older, you can&#x27;t recall entire years?
If you can&#x27;t remember something, it&#x27;s like it never happened.&lt;br &#x2F;&gt;
You could have a long healthy life, but if you can&#x27;t remember it, it&#x27;s like you had a short life.&lt;br &#x2F;&gt;
What a horrible way to live.&lt;&#x2F;p&gt;
&lt;p&gt;You need to prevent this.&lt;br &#x2F;&gt;
Monotony is the enemy.&lt;br &#x2F;&gt;
Novelty is the solution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将你的经历变成故事&lt;br &#x2F;&gt;
故事是经历的精华&lt;br &#x2F;&gt;
让你的故事变得有趣&lt;br &#x2F;&gt;
通过复述好的故事，记忆会更持久，人们会偶尔谈及或者让你再讲一遍&lt;&#x2F;p&gt;
&lt;p&gt;Turn your experiences into stories.&lt;br &#x2F;&gt;
A story is the remains of an experience.&lt;br &#x2F;&gt;
Make your stories entertaining, so people like to hear them.&lt;br &#x2F;&gt;
By telling good stories, your memories can last longer, because people will echo them back to you occasionally, or ask you to tell them again.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有意义的事情越容易记住&lt;br &#x2F;&gt;
赋予事件以意义，以便记住他们&lt;&#x2F;p&gt;
&lt;p&gt;The more something means to you, the more you&#x27;ll remember it.&lt;br &#x2F;&gt;
Give moments meaning to remember them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jing-tong-xie-shi-yao-master-something&quot;&gt;精通些什么（Master Something）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;成为一个偏执狂，在一些困难的事情上做到足够出色&lt;br &#x2F;&gt;
给自己找一个可以在余生不断深入研究的东西&lt;br &#x2F;&gt;
精通是最好的目标，因为富人买不了，急躁的人无法急于求成，特权者不能继承它，没有人可以窃取它&lt;br &#x2F;&gt;
你只能通过自己的努力来获得&lt;&#x2F;p&gt;
&lt;p&gt;Be a monomaniac on a mission to be truly great at something difficult.&lt;br &#x2F;&gt;
Pick one thing and spend the rest of your life getting deeper into it.&lt;br &#x2F;&gt;
Mastery is the best goal because the rich can&#x27;t buy it, the impatient can&#x27;t rush it, the privileged can&#x27;t inherit it, and nobody can steal it.&lt;br &#x2F;&gt;
You can only earn it through hard work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学得越多，待学的就越多&lt;br &#x2F;&gt;
你能看到普通人看不到的东西&lt;br &#x2F;&gt;
随着逐渐深入，你会发现这条路越来越有趣&lt;&#x2F;p&gt;
&lt;p&gt;The more you learn about something, the more there is to learn.&lt;br &#x2F;&gt;
You see what normal people don&#x27;t see.&lt;br &#x2F;&gt;
The path gets more and more interesting as you go.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还没有决定要掌握什么，选择任何让你害怕、着迷的东西&lt;br &#x2F;&gt;
不要问，“这真的是我想要的吗？” 或 “这是我的热情所在吗？”&lt;br &#x2F;&gt;
这些问题导致无休止的搜索和失望&lt;br &#x2F;&gt;
人们不会因为选择错误的道路而失败——他们会因为不选择而失败&lt;br &#x2F;&gt;
做出你的选择，然后致力于不断改进&lt;br &#x2F;&gt;
在你开始找到感觉后，热情就会出现&lt;&#x2F;p&gt;
&lt;p&gt;If you haven’t decided what to master, pick anything that scares you, fascinates you, or infuriates you.&lt;br &#x2F;&gt;
Don’t ask, “Is this the real me?” or “Is this my passion?”
Those questions lead to endless searching and disappointment.&lt;br &#x2F;&gt;
People don’t fail by choosing the wrong path — they fail by not choosing.&lt;br &#x2F;&gt;
Make your choice, then make a lifetime commitment to constant improvement.&lt;br &#x2F;&gt;
The passion comes after you start getting good.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当只有一个优先级时，决策就会很容易&lt;br &#x2F;&gt;
Decisions are easy when you have only one priority&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;应该志向高远，这有助于你做成事&lt;br &#x2F;&gt;
大多数人在生活中失败的原因不是目标太高，而是目标太低&lt;br &#x2F;&gt;
如果你的目标很高但没达成，你并没有真的失败&lt;&#x2F;p&gt;
&lt;p&gt;Pursuing mastery is ambitious, which helps your chance of success.&lt;br &#x2F;&gt;
Most people fail in life not by aiming too high, but by aiming too low.&lt;br &#x2F;&gt;
If you aim high and miss, you don’t actually fail.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xun-qiu-tong-ku-pursue-pain&quot;&gt;寻求痛苦（Pursue Pain）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一切美好都来源于某种痛苦&lt;br &#x2F;&gt;
肌肉的酸痛让你更强壮&lt;br &#x2F;&gt;
练习的痛苦是通往精通之路&lt;br &#x2F;&gt;
艰难的谈话可以促进友谊&lt;&#x2F;p&gt;
&lt;p&gt;Everything good comes from some kind of pain.&lt;br &#x2F;&gt;
Muscle fatigue makes you healthy and strong.&lt;br &#x2F;&gt;
The pain of practice leads to mastery.&lt;br &#x2F;&gt;
Difficult conversations save your relationships.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生存之道就是与痛苦为伴&lt;br &#x2F;&gt;
用它作为你的指南针&lt;br &#x2F;&gt;
总是采取更难的选择&lt;br &#x2F;&gt;
总是逼迫自己到不舒服的状态&lt;br &#x2F;&gt;
忽略你的直觉&lt;&#x2F;p&gt;
&lt;p&gt;The way to live is to steer towards the pain.&lt;br &#x2F;&gt;
Use it as your compass.&lt;br &#x2F;&gt;
Always take the harder option.&lt;br &#x2F;&gt;
Always push into discomfort.&lt;br &#x2F;&gt;
Ignore your instincts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;选择痛苦，它就变得可以承受&lt;br &#x2F;&gt;
它变得无法伤害你&lt;br &#x2F;&gt;
你成了它的主人，而不是受害者&lt;&#x2F;p&gt;
&lt;p&gt;Choosing pain makes it bearable.&lt;br &#x2F;&gt;
It loses its power to hurt you.&lt;br &#x2F;&gt;
You become its master, not victim.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人没得选&lt;br &#x2F;&gt;
一旦你驯服了自己的痛苦，就帮更多的人去驯服他们的痛苦&lt;&#x2F;p&gt;
&lt;p&gt;容易的路越走越难，反之亦然&lt;&#x2F;p&gt;
&lt;p&gt;Most people don’t get to choose how they suffer.&lt;br &#x2F;&gt;
Once you tame pain for yourself, tame it for others.&lt;&#x2F;p&gt;
&lt;p&gt;The easy road leads to a hard future.&lt;br &#x2F;&gt;
The hard road leads to an easy future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;cheng-wei-xian-feng-be-a-famous-pioneer&quot;&gt;成为先锋（Be a Famous Pioneer）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;去经历伟大的冒险，去讲述精彩的故事，去激励他人&lt;br &#x2F;&gt;
追求大规模的媒体关注，不是为了虚荣心或自我，而是为了让你的故事能够帮助别人打开思路，激发想象力，带领更多的人来探索。&lt;&#x2F;p&gt;
&lt;p&gt;Your job is not just to act, but to tell a fascinating story of how you did so, and inspire others to do it.&lt;br &#x2F;&gt;
Make great adventures, but tell greater stories.&lt;br &#x2F;&gt;
Pursue massive media attention, not for vanity or ego, but so your stories can open minds, spark imaginations, and lead to further explorations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xuan-ze-jing-guo-shi-jian-jian-yan-de-shi-wu-value-only-what-has-endured&quot;&gt;选择经过时间检验的事物（ Value Only What Has Endured）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;新闻是嘈杂的，因为他们必须要炒作&lt;br &#x2F;&gt;
他们试图让你关注一些实际上并不重要的事情&lt;br &#x2F;&gt;
他们制造虚假的紧迫感、社会地位、恐惧、震惊，或任何可能的伎俩来操纵你的心理开关，最终帮助他们获利&lt;br &#x2F;&gt;
相比之下，真正重要的事情是安静的。&lt;&#x2F;p&gt;
&lt;p&gt;The world of news is noisy, because they have to hype it.&lt;br &#x2F;&gt;
They try to get you to pay attention to something that’s not actually important.&lt;br &#x2F;&gt;
They create a false sense of urgency, social status, fear, shock, or any tricks possible to manipulate your psychological triggers, and ultimately help them profit.&lt;br &#x2F;&gt;
By contrast, the truly important things are quiet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生活在过去&lt;br &#x2F;&gt;
观看伟大的电影&lt;br &#x2F;&gt;
阅读经典之作&lt;br &#x2F;&gt;
听听传奇故事&lt;br &#x2F;&gt;
这些东西之所以能持续下去，是因为它们经过了时间的考验&lt;br &#x2F;&gt;
时间是最好的过滤器&lt;&#x2F;p&gt;
&lt;p&gt;Live in the past.&lt;br &#x2F;&gt;
Watch the greatest movies of all time.&lt;br &#x2F;&gt;
Read the classics.&lt;br &#x2F;&gt;
Listen to the legends.&lt;br &#x2F;&gt;
These things have lasted because they work so well.&lt;br &#x2F;&gt;
Time is the best filter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;掌握基本原理，而不是新技巧&lt;br &#x2F;&gt;
学习那些不受时间影响的技艺&lt;br &#x2F;&gt;
这些知识不会失去价值&lt;br &#x2F;&gt;
在任何给定的领域，学习仍然存在的最古老的东西，因为它是最有可能持续的&lt;&#x2F;p&gt;
&lt;p&gt;Master the fundamentals, not new tricks.&lt;br &#x2F;&gt;
Learn the timeless aspects of your craft.&lt;br &#x2F;&gt;
This knowledge will never lose its value.&lt;br &#x2F;&gt;
In any given field, learn the oldest thing still around, since it’s the one most likely to last.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;xiao-dui-ren-sheng-laugh-at-life&quot;&gt;笑对人生（Laugh at Life）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;幽默是生命的精神--是健康、充满活力的思想和灵魂的标志&lt;br &#x2F;&gt;
Humor is the spirit of life — a sign of a healthy, vibrant mind and soul.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;幽默意味着超越必要性、超越现实地思考一件事&lt;br &#x2F;&gt;
这就是为什么我们钦佩机智的人&lt;br &#x2F;&gt;
它表明你迅速地从多个角度观察某件事情，找到最让你开心的那一个，并将其传达给别人&lt;br &#x2F;&gt;
观察力、创造力和同理心，都在一瞬间完成&lt;br &#x2F;&gt;
还有什么能比这更好地体现一个健康的心灵呢？&lt;&#x2F;p&gt;
&lt;p&gt;Humor means using your mind beyond necessity, beyond reality, for both noticing and imagining.&lt;br &#x2F;&gt;
That’s why we admire a quick wit.&lt;br &#x2F;&gt;
It shows you quickly looked at something from many angles, found the one that amused you the most, and considerately expressed it to someone else.&lt;br &#x2F;&gt;
Observation, creativity, and empathy, all in an instant.&lt;br &#x2F;&gt;
What could be a better sign of a healthy mind?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ju-an-si-wei-prepare-for-the-worst&quot;&gt;居安思危（Prepare for the Worst）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;事情会变得越来越难&lt;br &#x2F;&gt;
未来将考验你的耐力&lt;&#x2F;p&gt;
&lt;p&gt;到目前为止，你生活在一个繁荣的时代&lt;br &#x2F;&gt;
你没有经历过大规模的衰败，但你可能会&lt;br &#x2F;&gt;
赚钱会更难&lt;br &#x2F;&gt;
会更难快乐&lt;br &#x2F;&gt;
现在喜欢的很多东西都会消失&lt;br &#x2F;&gt;
回顾往昔，今年是你经历过的最轻松的一年&lt;&#x2F;p&gt;
&lt;p&gt;你会受伤或生病，失去看、听、移动或思考的能力&lt;br &#x2F;&gt;
你会向往你现在拥有的健康&lt;&#x2F;p&gt;
&lt;p&gt;Things are going to get harder.&lt;br &#x2F;&gt;
The future will test your strength.&lt;&#x2F;p&gt;
&lt;p&gt;So far, you’ve lived in a time of prosperity.&lt;br &#x2F;&gt;
You haven’t experienced massive devastation, but you probably will.&lt;br &#x2F;&gt;
It’ll be harder to make money.&lt;br &#x2F;&gt;
It’ll be harder to be happy.&lt;br &#x2F;&gt;
Much of what you love now will be gone.&lt;br &#x2F;&gt;
You’ll look back at this year as one of the easiest you ever had.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll get injured or sick, losing some of your ability to see, hear, move, or think.&lt;br &#x2F;&gt;
You’ll wish for the health you have now.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;未来是不可预测和不可控制的&lt;br &#x2F;&gt;
想象所有可能出错的事情&lt;br &#x2F;&gt;
为每一个做好准备，这样它们就不会惊到你或伤害你&lt;&#x2F;p&gt;
&lt;p&gt;The future is unpredictable and uncontrollable.&lt;br &#x2F;&gt;
Picture all the things that could go wrong.&lt;br &#x2F;&gt;
Prepare for each, so they won’t surprise or hurt you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;想象最糟糕的场景，直到它们感觉真实&lt;br &#x2F;&gt;
接受它们&lt;br &#x2F;&gt;
意识到最坏的情况并没有那么糟糕&lt;&#x2F;p&gt;
&lt;p&gt;Vividly imagine the worst scenarios until they feel real.&lt;br &#x2F;&gt;
Accepting them is the ultimate happiness and security.&lt;br &#x2F;&gt;
Realize that the worst is not that bad.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你最大的敌人是贪得无厌&lt;br &#x2F;&gt;
认识到你对生活的诉求，并破除这个习惯&lt;br &#x2F;&gt;
练习品味你所拥有的东西，以及它们带给你的愉悦&lt;&#x2F;p&gt;
&lt;p&gt;Your biggest enemy is insatiability.&lt;br &#x2F;&gt;
Recognize your desire to be entertained by life, and break the habit.&lt;br &#x2F;&gt;
Practice being happy with what you have.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;bian-de-fu-you-get-rich&quot;&gt;变得富有（Get Rich）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;金钱不过是一个中性的价值交换物&lt;br &#x2F;&gt;
能赚钱证明你正在为人们的生活增加价值&lt;br &#x2F;&gt;
变得富有说明你对世界有用，为他人做更多的事&lt;br &#x2F;&gt;
服务更多&lt;br &#x2F;&gt;
分享更多&lt;br &#x2F;&gt;
贡献更多&lt;br &#x2F;&gt;
世界会奖励你创造的价值&lt;br &#x2F;&gt;
追求财富，因为它是道德的、美好的、无限的&lt;&#x2F;p&gt;
&lt;p&gt;Money is nothing more than a neutral exchange of value.&lt;br &#x2F;&gt;
Making money is proof you’re adding value to people’s lives.&lt;br &#x2F;&gt;
Aiming to get rich is aiming to be useful to the world.&lt;br &#x2F;&gt;
It’s striving to do more for others.&lt;br &#x2F;&gt;
Serving more.&lt;br &#x2F;&gt;
Sharing more.&lt;br &#x2F;&gt;
Contributing more.&lt;br &#x2F;&gt;
The world rewards you for creating value.&lt;br &#x2F;&gt;
Pursue wealth because it’s moral, good, and unlimited.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;全力致富，否则就不会发生&lt;br &#x2F;&gt;
调整你的自我意识：你应该并且将会变得富有&lt;br &#x2F;&gt;
如果你潜意识里觉得自己不配，你就不会变得富有&lt;br &#x2F;&gt;
但如果你真的觉得你值得拥有它，你就会不惜一切代价去实现它&lt;br &#x2F;&gt;
所以先调整你的自我意识&lt;&#x2F;p&gt;
&lt;p&gt;Be fully committed to getting rich, or it won’t happen.&lt;br &#x2F;&gt;
Adjust your self-image so that you congruently feel that you should and will be rich.&lt;br &#x2F;&gt;
If you subconsciously don’t feel you deserve it, you’ll sabotage your pursuit.&lt;br &#x2F;&gt;
But if you truly feel you deserve it, you’ll do whatever it takes.&lt;br &#x2F;&gt;
So adjust your self-image first.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;chuang-zuo-create&quot;&gt;创作（Create）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Die empty.&lt;br &#x2F;&gt;
Get every idea out of your head and into reality.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你更愿意成为哪个？&lt;br &#x2F;&gt;
一个因为忙于消费而多年没有创造任何东西的人？&lt;br &#x2F;&gt;
或者因为你忙于创作而多年来没有消费任何东西的人？&lt;&#x2F;p&gt;
&lt;p&gt;不要等待灵感&lt;br &#x2F;&gt;
灵感永远不会迈出第一步&lt;br &#x2F;&gt;
只有当你表明你不需要她时，她才会来&lt;br &#x2F;&gt;
不管怎样，每天做你该做的事&lt;&#x2F;p&gt;
&lt;p&gt;Which would you rather be?&lt;br &#x2F;&gt;
Someone who hasn’t created anything in years because you’re so busy consuming?&lt;br &#x2F;&gt;
Or someone who hasn’t consumed anything in years because you’re so busy creating?&lt;&#x2F;p&gt;
&lt;p&gt;Don’t wait for inspiration.&lt;br &#x2F;&gt;
Inspiration will never make the first move.&lt;br &#x2F;&gt;
She comes only when you’ve shown you don’t need her.&lt;br &#x2F;&gt;
Do your work every day, no matter what.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ping-heng-balance-everything&quot;&gt;平衡（Balance Everything）&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;坏事情往往来自于极端&lt;br &#x2F;&gt;
这个太多&lt;br &#x2F;&gt;
或那个太少&lt;&#x2F;p&gt;
&lt;p&gt;All bad things in life come from extremes.&lt;br &#x2F;&gt;
Too much of this.&lt;br &#x2F;&gt;
Too little of that.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们不够平衡时，我们就会心烦意乱&lt;br &#x2F;&gt;
工作过度，爱得太浅，吃得太多，睡得不够&lt;br &#x2F;&gt;
只注重财富，却忽视健康&lt;br &#x2F;&gt;
专注于现在，却忽略了未来&lt;&#x2F;p&gt;
&lt;p&gt;When we lack balance, we’re upset.&lt;br &#x2F;&gt;
Over-worked, under-loved, over-eating, under-sleeping.&lt;br &#x2F;&gt;
Focused on wealth, but ignoring health.&lt;br &#x2F;&gt;
Focused on the present, but ignoring the future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;平衡生活的最佳工具是时钟&lt;br &#x2F;&gt;
就像猎人的狗一样，时钟将是您最好的盟友&lt;br &#x2F;&gt;
它会保护你，控制你的冲动，保护对你重要的东西&lt;&#x2F;p&gt;
&lt;p&gt;安排一切以确保你的时间和精力的平衡&lt;br &#x2F;&gt;
日程安排可以防止拖延、分心和痴迷&lt;br &#x2F;&gt;
时间表让你按照目标行事，而不是你的情绪&lt;&#x2F;p&gt;
&lt;p&gt;与朋友一起度过美好的时光&lt;br &#x2F;&gt;
安排体检&lt;br &#x2F;&gt;
安排学习时间&lt;br &#x2F;&gt;
安排你生活的方方面面，一个都不落&lt;&#x2F;p&gt;
&lt;p&gt;平衡的日程安排可以保护你免于不知所措和忽视重要的需求&lt;br &#x2F;&gt;
你不会过度工作、过度玩耍或过度放纵&lt;&#x2F;p&gt;
&lt;p&gt;The best tool for a balanced life is the clock.&lt;br &#x2F;&gt;
Like a hunter’s dog, the clock will be your best ally.&lt;br &#x2F;&gt;
It will guard you, keep your impulses in check, and protect what’s important to you.&lt;&#x2F;p&gt;
&lt;p&gt;Schedule everything to ensure balance of your time and effort.&lt;br &#x2F;&gt;
Scheduling prevents procrastination, distraction, and obsession.&lt;br &#x2F;&gt;
A schedule makes you act according to the goals of your highest self, not your passing mood.&lt;&#x2F;p&gt;
&lt;p&gt;Schedule quality time with dear friends.&lt;br &#x2F;&gt;
Schedule preventative health checkups. ”&lt;br &#x2F;&gt;
Schedule focused time to learn.&lt;br &#x2F;&gt;
Schedule each aspect of your life, ignoring none.&lt;&#x2F;p&gt;
&lt;p&gt;The balanced schedule protects you from hurting yourself, from getting overwhelmed and ignoring important needs.&lt;br &#x2F;&gt;
You won’t over-work, over-play, or over-indulge.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>软件设计的哲学</title>
            <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design-philosophy/</link>
            <guid>https://limboy.me/posts/software-design-philosophy/</guid>
            <description>&lt;p&gt;今天要推荐的书是「&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Philosophy-Software-Design-John-Ousterhout&#x2F;dp&#x2F;1732102201&quot;&gt;A Philosophy of Software Design&lt;&#x2F;a&gt;」，作者是 Tcl 语言的设计者，也是斯坦福大学的教授：John Ousterhou。他也在 Google 做了一个&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bmSAYlu0NcY&quot;&gt;相关的分享&lt;&#x2F;a&gt;。作为一个还在从事编程的大佬，看看他是怎么理解软件开发的哲学的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一切都是关于复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在作者看来，「复杂度」是核心，如果无法处理好复杂度，就很难构建大型&#x2F;复杂的系统。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-ding-yi&quot;&gt;复杂度的定义&lt;&#x2F;h3&gt;
&lt;p&gt;复杂度有没有简单的定义呢，作者认为复杂度就是理解和修改系统的成本。比如是否容易理解某一段代码是怎么工作的，如何跟上下游衔接的，处于架构中的哪个部分，改动它会对那些模块产生影响。如果这些都比较模糊，那就是复杂的。&lt;&#x2F;p&gt;
&lt;p&gt;还有一点是「Unknown unknowns」，比如为了完成某个 Feature，不知道哪些地方的代码需要做调整，或者需要知道哪些上下文，这种情况是最糟糕的。所以好的设计一定是「显式」的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fu-za-du-de-lai-yuan&quot;&gt;复杂度的来源&lt;&#x2F;h3&gt;
&lt;p&gt;依赖和模糊。依赖是指一段代码无法被独立理解和修改，必须参照&#x2F;修改相关代码。我们无法摆脱依赖，但可以让依赖尽量简单和显式。模糊就是一些重要的信息不够突出，比如用了一个通用的变量名，或者时间单位没有说明等。&lt;&#x2F;p&gt;
&lt;p&gt;复杂度也不是孤立的，平时如果不注意，日积月累之后想要再降下去就会比较难了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-xin-tai-zhan-zhu-bian-cheng-yu-zhan-lue-bian-cheng&quot;&gt;处理复杂度的心态：战术编程与战略编程&lt;&#x2F;h3&gt;
&lt;p&gt;战术编程就是只关注眼前需求，没有太考虑需求的本质和将来的演进。这样可能会让需求完成地更快，但也会给系统增加复杂度，进而带来更大的维护成本，于是就产生了「技术债」。&lt;&#x2F;p&gt;
&lt;p&gt;战略编程要意识到「Working code isn&#x27;t enough」，「a great design, which happens to work」才是目标，这需要投入时间去思考去雕琢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-li-fu-za-du-de-shou-duan-fen-jie-yu-feng-zhuang&quot;&gt;处理复杂度的手段：分解与封装&lt;&#x2F;h3&gt;
&lt;p&gt;分解就是将一个复杂系统拆分为多个相对独立的子系统，子系统之间也会产生依赖，处理依赖的方式是将子系统拆分为 interface 和 implementation。interface 里的内容是供消费方使用的，也就是 what，implementation 对应的是 how。interface 尽量简洁，把复杂度包在 implementation 里内部消化，形成 Deep Module。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841170-d08dfd00-d941-11eb-9e3f-dc0b110bb040.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个 interface 的提炼就涉及到抽象能力了，抽象就是去掉不重要的细节，留下最核心的本质。比如一个文件系统，不需要在 interface 里把文件存储的 block 等细节暴露出来，这样会增加使用者的负担，也会增加复杂度（将来如果换了一种实现，就要修改接口了）。&lt;&#x2F;p&gt;
&lt;p&gt;作者在视频中举了一个 Unix file I&#x2F;O 的例子&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;35974&#x2F;123841203-da176500-d941-11eb-918f-82edd6bb9463.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;封装就是信息隐藏，将具体怎么实现的都放到 implementation 里，使用方不需要关心，甚至可以随时更换实现，这样即使内部很复杂，因为没有上游依赖，所以不会将复杂度扩散出去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-jiang-di-fu-za-du-de-fang-shi-you-ya-di-she-ji-cuo-wu&quot;&gt;其他降低复杂度的方式：优雅地设计错误&lt;&#x2F;h3&gt;
&lt;p&gt;只要不符合预期就抛一个 Exception，这是最简单的处理，但对使用方可能不太友好，比如取数组的 Range 时，Index 超过长度抛一个 Exception；文件在使用时请求删除抛一个 Exception；参数校验不通过抛一个 Exception。如果多为使用方想一下，这些 Exception 都是必须要抛的么？有没有可能通过改变语义或设计来避免 Error？&lt;&#x2F;p&gt;
&lt;p&gt;作者举了一个 &lt;code&gt;unset&lt;&#x2F;code&gt; 的例子，一个开始他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：移除一个变量，这样如果传入的变量不存在就要抛异常，这样导致外面使用方要通过 try catch 的方式去使用这个方法，后来他把 &lt;code&gt;unset&lt;&#x2F;code&gt; 定义为：让一个变量不可用，如果传入的变量已经不可用了，那就不需要做处理。对比 Windows 和 Unix 对文件删除的不同处理方式（后者在运行时删除不抛出 error），也可以达到减少 Error 的效果。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;yi-ge-li-zi&quot;&gt;一个例子&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个程序，输出从 1 到 n 数字的字符串表示。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果  n  是 3 的倍数，输出“Fizz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  是 5 的倍数，输出“Buzz”；&lt;&#x2F;li&gt;
&lt;li&gt;如果  n  同时是 3 和 5 的倍数，输出 “FizzBuzz”。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果采用「战术编程」的话，很快就能写出一段可以 work 的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;FizzBuzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完全符合题意，也能正确运行，但调整空间太小了&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果条件变了，不是 5 而是 7 怎么办&lt;&#x2F;li&gt;
&lt;li&gt;如果不是输出 Fizz，Buzz 怎么办&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;考虑到这两点，我们再来调整下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;divisor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, divisor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将变量抽了出来，这样将来调整时，不需要动实现，只需改参数即可。&lt;&#x2F;p&gt;
&lt;p&gt;如果又来了个新需求：小于 10 的都要在前面补 0。如果求快，采用战术编程的话，直接在方法内部加入这个判断分支即可。但可以有更好的解法，比如将计算逻辑放到外面，方法内部只需要判断计算结果即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.predicate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;trigger&lt;&#x2F;span&gt;&lt;span&gt;.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fizzbuzz_v3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, [
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Fizz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;Buzz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;predicate&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来还可以有更多的演变，比如要输出到文件而不是 console，要具备可测性等等。可以看到一个简单的需求，战术编程和战略编程会带来很大的差异。这种思维和能力上的转变对于写出优雅的代码也会有帮助。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>The War of Art</title>
            <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-war-of-art/</link>
            <guid>https://limboy.me/posts/the-war-of-art/</guid>
            <description>&lt;p&gt;最近在看一本书：&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;War-Art-Through-Creative-Battles&#x2F;dp&#x2F;1936891026&quot;&gt;The War of Art&lt;&#x2F;a&gt;。目前还没有中文版，看起来比较累，加上老外习惯性的话痨，阅读起来也需要一点技巧。&lt;&#x2F;p&gt;
&lt;p&gt;看名字又是「战争」又是「艺术」，好像离自己有点远。其实通篇都是围绕一个主题来讲：Resistance，是与 Resistance 的战争。中文直译过来就是「抗拒」，它是艺术创作最大的敌人，拖延就是抗拒的一种表现。&lt;&#x2F;p&gt;
&lt;p&gt;再来说说「艺术」，Alan Kay 认为「Art is all the stuff that people make」。科学、技术也都是艺术，所以艺术的范畴可以很广。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-shi-yao-you-shi-hou-ming-zhi-dao-gai-zuo-shi-yao-que-zong-shi-mai-bu-chu-na-yi-bu&quot;&gt;为什么有时候明知道该做什么，却总是迈不出那一步&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-war-of-art&amp;#x2F;which-to-choose.jpg&quot;
        width=&quot;1800&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边的事情对自己的成长会更有帮助，右边的事情往往占据了更多的注意力。联想到该做的事时，会查询数据库，看看之前留下的印象是偏愉悦还是偏痛苦的。如果是偏痛苦，就自然不太想去做，也就产生了「Resistance」。同时，那些打发时间的事情查询结果却往往偏愉悦。那边一推，这边一拉，很容易就有了决定。这也是愧疚感产生的原因。&lt;&#x2F;p&gt;
&lt;p&gt;为什么该做的事会产生抗拒心理？因为&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;事情划分不够细，不知道从何下手。&lt;&#x2F;li&gt;
&lt;li&gt;做这些事往往伴随着痛苦，尤其是初期。&lt;&#x2F;li&gt;
&lt;li&gt;周期比较长，很难在短期内看到明显的变化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;人（至少）有两个自我：体验自我和叙事自我。体验自我负责体验过程，叙事自我负责记录，也就是下次会用到的数据库。问题就出在叙事自我只会挑峰值体验和结尾体验来记录，如果在做该做的事时，过程中和结尾都没有被爽到，那么能记录下来的就只有负面的信息（所以初期不要挑战难度过高的项目）。&lt;&#x2F;p&gt;
&lt;p&gt;与此同时，社交、新闻、游戏等 App 的获取成本极低，而内容又有趣好玩，叙事自我就会把这种「愉快」的感觉记录下来。&lt;&#x2F;p&gt;
&lt;p&gt;叙事自我不关心成长，它只是一个忠实的记录者，而我们做决定时又会很在意这些记录，于是矛盾就出现了：成长能让我们感觉到充实、平静，而这些记录却容易导致相反的决定。更有意思的是，我们会为这些「抗拒」找到合适的理由，以免让自己鄙视自己。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-de-geng-zhuan-ye&quot;&gt;变得更专业&lt;&#x2F;h3&gt;
&lt;p&gt;要让自己变得专业起来，如此才能创作出好的作品，享受进步的愉悦和开悟的快感。专业和业余的区别在于前者更持久，后者主要基于乐趣，一旦乐趣降低或消失就失去了前进的动力，而这个过程不可避免会遭遇低谷。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-war-of-art&amp;#x2F;grow-curves.gif&quot;
        width=&quot;3184&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接触到新事物时，往往遵循类似的曲线，状态会有起伏。要变得更专业，就必须降低叙事自我的权重，通过一些技巧来响应内心的召唤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-ding-kang-ju&quot;&gt;搞定「抗拒」&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;正是因为不想跑步，所以才跑步，这才是长距离跑者的思维方式 。&lt;&#x2F;p&gt;
&lt;p&gt;-- 村上春树。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;严歌苓写过一篇文章：活得过瘾。里面有一段话印象比较深刻：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我试着不写，可是不行，就像没醒透似的。一连多日不写，就是一连多日半打盹儿地过活，新陈代谢都不对了。出去旅行，同行的有丈夫，有时还有其他朋友。我的写作让他们都很头疼，一些计划要根据我的时间表转。他们抱怨，问我几天不写死不死得了。我说不写就是让我身上有一块痒痒，又不让我挠。哪怕早起一两个小时，我也得把过瘾的时间留出来。对我来说，生命一天不达到那个浓度、烈度，没有到达那个敏感度、兴奋点，那一天就活得窝囊。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最重要的其实就三条：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;让该做的事有一个足够小的切入点可以马上就做。&lt;&#x2F;li&gt;
&lt;li&gt;说服自己去做这件事。只要坚持几分钟，就会发现，其实也没那么痛苦。&lt;&#x2F;li&gt;
&lt;li&gt;持续 1 和 2。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;那些大量占用注意力的 app 第 1 点就做得很好，打开之后，马上就知道该做什么，并且产生愉悦感，使得下次还会记得打开。&lt;&#x2F;p&gt;
&lt;p&gt;人的适应能力很强，即使前几分钟确实痛苦，过了这段时间后就适应了。更高的乐趣往往伴随着痛苦，所以有句话说：世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。&lt;&#x2F;p&gt;
&lt;p&gt;道理虽然简单，做起来却异常困难，因为这里有一个强大的因素在起作用：习惯。习惯决定了很多东西，习惯了打开手机刷新闻，碎片时间刷微博，要对这种下意识的行为进行调整难度非常大，习惯形成的时间越长越难以调整。所以这个过程必然痛苦，要做好心理准备。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>操作系统是如何管理内存的</title>
            <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/os-memory/</link>
            <guid>https://limboy.me/posts/os-memory/</guid>
            <description>&lt;p&gt;最近在看 &lt;a href=&quot;http:&#x2F;&#x2F;pages.cs.wisc.edu&#x2F;%7Eremzi&#x2F;OSTEP&#x2F;&quot;&gt;Operating Systems: Three Easy Pieces&lt;&#x2F;a&gt; 这本书，作者在这方面有 20 多年的积累，同时文风非常朴实，不会被各种术语绕晕。该书进从虚拟化、并发、持久化这三个方面来剖析操作系统，从要达到的目标到遇到的问题到解决方案到新的问题，一层层地告诉你为什么会变成现在这个样子。&lt;&#x2F;p&gt;
&lt;p&gt;今天要讲的内容主要是对该书里面关于内存管理这块的一个小结，由于看的是 0.8 版，跟最新的 1.0 版可能会有些许出入。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;每个进程创建的内存地址都是虚拟地址，操作系统使用了虚拟化技术，让进程觉得它拥有了大块可支配的内存的假象，操作系统拿到这个地址后会将它转变为真实的内存地址，从而拿到对应的信息。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of code : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) main)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of heap : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) malloc(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;location of stack : &lt;&#x2F;span&gt;&lt;span&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;x)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;location of code : 0x10df2aec0
&lt;&#x2F;span&gt;&lt;span&gt;location of heap : 0x7fdeea400350
&lt;&#x2F;span&gt;&lt;span&gt;location of stack : 0x7ffee1cd560c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些都是虚拟地址。对于内存的虚拟化，有三个最重要的要素：透明（就像内存只为当前的进程所用）、高效（就像直接操作物理内存那样）、保护（进程之间不能随意读写各自的内存区域），伴随着这三个要素，就开始了探索之旅。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-gu-shi-dai&quot;&gt;远古时代&lt;&#x2F;h2&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;1.jpg&quot;
        width=&quot;222&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一开始，只有一个进程，一切都很美好，除了操作系统的自留地外，剩下的都给那个进程，想怎么折腾都行，只要别超出最大的容量。&lt;&#x2F;p&gt;
&lt;p&gt;但我们知道，那个时候，一台计算机是很贵的，比 iPhone XS Max 还贵，在这么昂贵的机器上同时只能运行一个程序实在浪费，于是就有了支持多进程的需求，所谓多进程，并不需要同时运行这些进程，只要它们都处于 ready 状态，操作系统快速地在它们之间切换，就能达到同时运行的假象。每个进程都需要内存，Context Switch 时，之前内存里的内容怎么办？简单粗暴的方式就是先 dump 到磁盘上，然后再从磁盘上 restore 之前 dump 的内容（如果有的话），但效果并不好，太慢了！&lt;&#x2F;p&gt;
&lt;p&gt;那怎么才能不慢呢？把进程对应的内存依旧留在物理内存中，需要的时候就切换到特定的区域。这就涉及到了内存的保护机制，毕竟进程之间可以随意读取、写入内容就乱套了，非常不安全。因此操作系统需要对物理内存做一层抽象，也就是「地址空间」(Address Space)，一个进程的地址空间包含了该进程所有相关内存，比如 code &#x2F; stack &#x2F; heap。一个 16 KB 的地址空间可能长这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;2.jpg&quot;
        width=&quot;363&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当程序运行时，heap 和 stack 共用中间 free 的区域，当然这只是 OS 层面的抽象。比如下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; this is the line of code we are interested in
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;变成汇编指令后，大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;  ;load 0+ebx into eax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;132&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: addl $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;add 3 to eax register
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;135&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: movl %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ebx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt; ;store eax back to mem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最前面的是 PC (Program Counter)，用来表示当前 code 的索引，比如 CPU 执行到 128 时，进行了 Context Switch，那么在 Switch 回来后，还可以接着从 132 开始执行（当然需要先把 PC 存起来）。之后的就是汇编代码，告诉 CPU 该如何操作。&lt;&#x2F;p&gt;
&lt;p&gt;从进程的角度看，内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;3.jpg&quot;
        width=&quot;272&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;真实的物理内存可能是这样的：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;4.jpg&quot;
        width=&quot;283&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从 32KB 处作为开始，48KB 作为结束。那 32 &#x2F; 48 可不可以动态设置呢，只要在 CPU 上整两个寄存器，base 和 bounds 就可以了，base 指明从哪里开始，bounds 指定哪里是边界。 因此真实物理地址和虚拟地址之间的关系是：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;physical address = virtual address + base
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有时，CPU 上用来做内存地址翻译的也会被叫做「内存管理单元 MMU」(Memory Management Unit)，随着功能越来越强大，MMU 也会变得越来越复杂。&lt;&#x2F;p&gt;
&lt;p&gt;base and bounds 这种做法最大的问题在于空间浪费，Stack 和 Heap 中间有一块 free space，即使没有用，也被占着，那如何才能解放这块区域呢，就有了下面的做法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-duan-segmentation&quot;&gt;分段（Segmentation）&lt;&#x2F;h2&gt;
&lt;p&gt;分段的思想很简单，之前不是一大块都是连在一起的么，现在要把你们都分开，code &#x2F; stack &#x2F; heap 各自成为一段，段内的空间是连续的，段与段之间不必连续，这样空间利用率上就更高了。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;7.jpg&quot;
        width=&quot;505&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;5.jpg&quot;
        width=&quot;484&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来问题就来了，一个进程会有多个段，如何知道一个内存地址对应的是哪个段呢？一个方法是用地址的前两个字节来表示：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;6.jpg&quot;
        width=&quot;333&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;00&lt;&#x2F;code&gt; 表示 code, &lt;code&gt;01&lt;&#x2F;code&gt; 表示 heap。获取物理地址的过程大概像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取前两个比特
&lt;&#x2F;span&gt;&lt;span&gt;Segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; SEG_MASK) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SEG_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 获取 Offset
&lt;&#x2F;span&gt;&lt;span&gt;Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; VirtualAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; Bounds[Segment])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;RaiseException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Base[Segment] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; Offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可能有些同学已经忘了位操作，这里简单复习下，所谓掩码就是用来屏蔽指定位的一串二进制，结合 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作就可以让其他位都变为 0，需要保留的位保持原样，比如 &lt;code&gt;110110&lt;&#x2F;code&gt; 这串二进制，想要保留前三位，同时把后三位清零，只需要与 &lt;code&gt;111000&lt;&#x2F;code&gt; 执行 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 操作即可。如果只想要前 3 位，那么向右移 3 位，&lt;code&gt;&amp;gt;&amp;gt; 3&lt;&#x2F;code&gt;，因此上面那段代码 &lt;code&gt;Segment&lt;&#x2F;code&gt; 就变成了前两个比特。&lt;&#x2F;p&gt;
&lt;p&gt;拿到了 &lt;code&gt;Segment&lt;&#x2F;code&gt; 和 &lt;code&gt;Offset&lt;&#x2F;code&gt;，先判断下是否在安全区域内，如果超出则抛出异常，不然就去找到真实的物理地址。&lt;&#x2F;p&gt;
&lt;p&gt;每个段依旧会有 Base 和 Bounds，但注意到有些段是向上扩张，有些是向下扩张，这个信息也需要被额外记录：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;8.jpg&quot;
        width=&quot;624&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，还会有其他的信息需要记录，比如是否可读写等。&lt;&#x2F;p&gt;
&lt;p&gt;那这个做法有没有问题呢，有的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;当 Context Switch 时，Segment Registers 必须被存储起来方便下次使用。&lt;&#x2F;li&gt;
&lt;li&gt;更大的问题是，每个进程自带了好几个段，且大小不一，容易形成碎片化(之前申请的内存被释放了)，创建新的地址空间时，就不那么方便了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;9.jpg&quot;
        width=&quot;570&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在这个例子中，当一个进程想要申请 20KB 的段时，虽然有 24KB 的剩余空间，但并不连续，因此会申请失败。一种解决方法是让内存空间变得更紧凑，比如暂停正在运行的进程，把内存拷贝到连续的地址空间，修改 Segment Register，这样就可以变成右图那样了。但是代价有点大，拷贝段会花费显著的时间。无论使用何种算法，碎片化一定会存在，只是好点的算法能降低碎片化程度。&lt;&#x2F;p&gt;
&lt;p&gt;顺便提一下 C 里面的内存申请，当 &lt;code&gt;malloc(size_t size)&lt;&#x2F;code&gt; 时，会返回一个指针，当 &lt;code&gt;free(void *pointer)&lt;&#x2F;code&gt; 时，会释放指针对应的区域，也就是说 &lt;code&gt;free&lt;&#x2F;code&gt; 时，不需要知道 &lt;code&gt;size&lt;&#x2F;code&gt;，这是因为申请内存时，有一块额外的区域用来存储这些信息，比如当用户执行 &lt;code&gt;ptr = malloc(20)&lt;&#x2F;code&gt; 时&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;10.jpg&quot;
        width=&quot;611&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了那 20 个字节，头部还留了点空间用来放 &lt;code&gt;size&lt;&#x2F;code&gt; 和 &lt;code&gt;magic&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; __header_t {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; magic;
&lt;&#x2F;span&gt;&lt;span&gt;} header_t;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    header_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;hptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;- sizeof&lt;&#x2F;span&gt;&lt;span&gt;(header_t);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;拿到指针后，可以判断 magic number 是否相等，然后计算需要 free 的 size (header + body)，这里有一个&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;%7Ebenson&#x2F;cs326&#x2F;pintos&#x2F;pintos&#x2F;src&#x2F;threads&#x2F;malloc.c&quot;&gt;简易的 malloc 实现&lt;&#x2F;a&gt;供参考。&lt;&#x2F;p&gt;
&lt;p&gt;既然段模式会有碎片化的问题，那如何才能避免呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-ye-paging&quot;&gt;分页（Paging）&lt;&#x2F;h2&gt;
&lt;p&gt;Paging 的思想是把地址空间切分成固定大小的单元。比如下面一个只有 64 字节的地址空间，每个 Page 16 个字节&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;11.jpg&quot;
        width=&quot;471&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对应到真实的物理地址：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;12.jpg&quot;
        width=&quot;441&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，虽然地址空间是连续的，但物理地址并不是。这样的好处是，不用去考虑 heap &#x2F; stack 会被申请多少 size，比如要申请 64 字节地址空间，只要给 4 个 free 的 page 即可，这样 OS 管理起来也很简单，比如只要维护一份 free pages list，然后给出前 4 个。为了记录虚拟页(Virtual Page)跟物理地址之间的关系，OS 需要维护给每个进程维护一份 Page Table，它的作用就是地址翻译。比如 &lt;code&gt;movl &amp;lt;virtual address&amp;gt;, %eax&lt;&#x2F;code&gt;，由于进程的地址空间是 64 字节，因此需要 6 个比特来表示（2^6 = 64）&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;13.jpg&quot;
        width=&quot;279&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于 Page Size 为 16 字节，因此 offset 为 4（4 个比特就能表示全一个 Page 里的任意位置），剩下的前两位作为 VPN (Virtual Page Number)&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;14.jpg&quot;
        width=&quot;275&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如 &lt;code&gt;movl 21, %eax&lt;&#x2F;code&gt;, 21 转成 2 进制就是 &lt;code&gt;010101&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;15.jpg&quot;
        width=&quot;285&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;经过地址翻译后，就能找到物理内存中的地址了&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;16.jpg&quot;
        width=&quot;345&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么问题又来了，Page Tables (用来将虚拟地址翻译成物理地址)存在哪里呢？在想这个问题前，先想下 Page Tables 大概有多大？&lt;&#x2F;p&gt;
&lt;p&gt;如果每个 Page Table Entry (PTE) 需要 4 个字节来保存 物理地址(PFN, Physical Frame Number)和其他的状态码，一个进程会有多少个 PTE 呢？假设地址空间为 32 位，Page Size 为 4KB，那么虚拟地址就可以被拆分成 20 bits 的 VPN 和 12 bits 的 Offset，有 2^20 个 VPN 可能需要翻译，就需要有对应数量的 PTE，因此一个进程大概需要 4MB 的内存来存储 Page Tables，想想如果有 100 个进程在运行，就需要 400MB，这个数量可不算小。&lt;&#x2F;p&gt;
&lt;p&gt;既然 Page Tables 如此之大，放 CPU 的寄存器里是不可能了，那就只能放内存了，因此在获取虚拟地址对应的物理内存地址时，需要先访问一次内存，这比直接访问 CPU 的寄存器会慢很多。&lt;&#x2F;p&gt;
&lt;p&gt;顺便来看一下 PTE 到底长啥样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;17.jpg&quot;
        width=&quot;599&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;前几位都是状态位，用来表示这段内存目前的状态，比如是否有效（Valid），是否可读，是否在 Swap 等。PFN 是真正的物理内存地址。&lt;&#x2F;p&gt;
&lt;p&gt;采用分页模式后，物理地址的获取过程就变成了这样：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; 把 VPN 摘出来
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 把 PTE 的地址组装好
&lt;&#x2F;span&gt;&lt;span&gt;PTEAddr = PTBR + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 访问地址，拿到内容，注意，这里访问了内存，会影响速度
&lt;&#x2F;span&gt;&lt;span&gt;PTE = AccessMemory(PTEAddr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 检查是否有效
&lt;&#x2F;span&gt;&lt;span&gt;if (PTE.Valid == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(SEGMENTATION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else if (CanAccess(PTE.ProtectBits) == False)
&lt;&#x2F;span&gt;&lt;span&gt;  RaiseException(PROTECTION_FAULT)
&lt;&#x2F;span&gt;&lt;span&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; 有效的话，再去拿真实的物理地址
&lt;&#x2F;span&gt;&lt;span&gt;  Offset = VirtualAddress &amp;amp; OFFSET_MASK
&lt;&#x2F;span&gt;&lt;span&gt;  PhysAddr = (PTE.PFN &amp;lt;&amp;lt; PFN_SHIFT) | offset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么如何对这个过程进行加速呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tlb-translation-lookaside-buffer&quot;&gt;TLB (Translation-Lookaside Buffer)&lt;&#x2F;h2&gt;
&lt;p&gt;如果要加速，最容易想到的就是加缓存，TLB 就是 CPU 芯片 MMU 的一部分，首先 check TLB 中有没有该虚拟地址对应的物理地址，有的话直接返回，这样就不用再访问内存了，自然也就快了。那这个 TLB 到底长怎样呢？可以认为是很简单的 Key-Value 对，再加上额外的一些状态码 &lt;code&gt;VPN | PFN | other bits&lt;&#x2F;code&gt;。注意这里也会有 valid bit，只不过这里表示的是当前这个是不是一个有效的翻译，而 Page Table 里的 valid 状态码表示的是该内存是否被初始化过，如果没有被初始化，那么 valid 就为 0。&lt;&#x2F;p&gt;
&lt;p&gt;再来看看 Context Switch。每个进程的 VPN 和 PFN 的对应关系是不一样的，因此上一个进程的对应关系对于下一个进程来说，完全无用。那怎么办？最简单粗暴的方式就是进程切换时，直接清空，这样虽然不会出问题，但也降低了缓存命中率，尤其是频繁切换的话。还有一种方法是多加一个字段来表示该段翻译对应的是哪个地址空间（ASID），有点像 PID。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;18.jpg&quot;
        width=&quot;362&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但 CPU 这寸土寸金的地方，不可能放很大的缓存，而且 size 越小，访问速度才会越快，当缓存满了之后怎么办？可以采用常见的策略，比如 LRU 或 Random。所以虽然内存被叫做 Random Access Memory，但也分是否命中缓存，那些命中 TLB 缓存的才是最快的。&lt;&#x2F;p&gt;
&lt;p&gt;OK，访问速度这个问题算是解决了，还有一个体积大的问题又该怎么处理呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smaller-tables&quot;&gt;Smaller Tables&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have two good and seemingly opposing ideas, you should always see if you can combine them into a hybrid that manages to achieve the best of both worlds.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回顾之前，我们采用段模式时，并没有体积大的问题，因为只需要 base and bounds 就可以了，那有没有可能把段和页结合起来呢？我们来试试，如果每个 Segment 对应一个 Table，这样就只需要 3 个 Table。对于 Segment 来说，现在 Bounds 变为了判断 Page Table 的边界（比如有多少个 Pages）。假设 32 位的地址空间，4KB Pages，就会变成这样：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;20.jpg&quot;
        width=&quot;648&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果 TLB 没有命中的话，过程大概如此&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;SN = (VirtualAddress &amp;amp; SEG_MASK) &amp;gt;&amp;gt; SN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;VPN = (VirtualAddress &amp;amp; VPN_MASK) &amp;gt;&amp;gt; VPN_SHIFT
&lt;&#x2F;span&gt;&lt;span&gt;AddressOfPTE = Base[SN] + (VPN * sizeof(PTE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这样 Segment 自带的碎片化问题依旧存在，到时 malloc 寻找可用空间时依旧会比较复杂。回过头来，我们再来看下，占用的这 4MB 空间真的是必须的么？&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;21.jpg&quot;
        width=&quot;444&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;22.jpg&quot;
        width=&quot;511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，中间的一大部分都是空的，但依旧会被填充（因为是采用数组的方式来访问），那有没有办法既能表达「无」的信息，又不占用空间呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multi-level-page-tables&quot;&gt;Multi-level Page Tables&lt;&#x2F;h3&gt;
&lt;p&gt;多级分页表。比如要去宿舍找同学玩，发现宿舍大楼门关着，那么就不用再到寝室了，多级分页表的思路也类似，在最前面先做一次粗检，如果粗检都不符合就直接打回，粗检通过之后再来一次细检，这样就能把空间给省下来，具体是怎么做的呢？&lt;&#x2F;p&gt;
&lt;p&gt;把 PTE(Page Table Entry, 包含了物理地址和状态码)放进 page-sized units（比如一个 Page 里放 16 个 PTE），如果该 Page 的 PTE 都无效，那么压根就不申请内存，然后外面包一层 Page Directory 用来表示里面是否有有效的 PTE。就像文件夹一样，如果文件夹里没有文件，自然就不会占用空间。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;23.jpg&quot;
        width=&quot;923&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;左边是单层 Page Table 的实现，可以看到，虽然只有最下面两层是 valid 的，但中间依旧会有很多被占用的空间（就像要访问数组的第 1000 个元素，必须先要把这 1000 个元素填满）。&lt;&#x2F;p&gt;
&lt;p&gt;右边是两层 Page Table 的实现，通过 Valid 状态码就可以知道是否有必要去物理地址拿内容，如果第一层的 Valid 为 1，那么地址转换后就可以拿到第二层 PTE 的内容，如果此时 Valid 为 0，抛出 Exception，为 1，那么继续去拿真正的存放在物理内存中的内容。 因此最外层的 Valid 为 1，只是表示里面至少有一个 Valid 的 PTE。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，空间上是不是节省了不少。但也有弊端，比如需要两次内存访问才能拿到真正的虚拟地址对应的内容，所以这是一个典型的时间换空间的做法。还有一个弊端就是复杂度，无论是硬件还是操作系统，处理起来肯定比一个线性的 Page Table 查找复杂，但为了省出来的内存，这个 tradeoff 还是可以接受的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;假设 CPU 在解析指令时，遇到了一个 14 位长的虚拟地址，现在要把它转换为真实地址，并取出其中的内容：&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;os-memory&amp;#x2F;25.jpg&quot;
        width=&quot;448&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Page Directory Index 告诉 CPU 去第几层找 PDE(Page Directory Entry)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;PDEAddr = PageDirBase + (PDIndex * sizeof(PDE))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;PageDirBase 对应具体的物理地址。如果 PDE 的 valid 位为 0，则直接抛异常，不然就把 Page Table Index 拿出来，找到 PTE，看看它的 valid 状态码，如果为 0，抛异常，为 1 则去取最终的物理地址中的内容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;如果要看更详细的，最好还是阅读原著，会有更细致的描述和一些没提到的内容，比如跟磁盘的内存交换。&lt;&#x2F;p&gt;
&lt;p&gt;了解这些底层的运行机制除了满足好奇外，还可以学到不少复杂系统的应对策略，对于其他的项目也会有所启发。比如其中提到的 Mechanism 和 Policy，前者指定大方向，后者处理实现；时间&#x2F;空间上的取舍；当有两种看起来相反的思路时，如何有效地混合；复杂度和性能之间的取舍等等。这些对于设计、编写高质量的程序都大有裨益。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>脑海里的演员们（Your Brain at Work）</title>
            <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/your-brain-at-work/</link>
            <guid>https://limboy.me/posts/your-brain-at-work/</guid>
            <description>&lt;p&gt;前一阵子看完了一本书，叫「&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Your-Brain-Work-Strategies-Distraction&#x2F;dp&#x2F;0061771295&quot;&gt;Your Brain at Work&lt;&#x2F;a&gt;」，亚马逊上评价还不错，豆瓣评分更是高达 9.3（虽然只有不到 200 人评价），可惜没有中文版，只能硬着头皮啃了下英文版。&lt;&#x2F;p&gt;
&lt;p&gt;这本书吸引我的点在于它从大脑的运作方式来阐述一些行为，而且会有相应的案例来描述反面例子和调整后的结果，除此之外还给出了一些模型方便联想和记忆。好比买了一辆车之后，告诉你平时要注意哪些不当操作，以及如何发挥最优的性能。所以脑子是个好东西，除了多用之外还要知道怎么用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-tai-he-yan-yuan-men&quot;&gt;舞台和演员们&lt;&#x2F;h3&gt;
&lt;p&gt;大脑的皮质层有一块区域叫「前额叶皮层」，这是人类进化到晚期才出现的皮质结构之一。这个区域主要负责高级认知功能，比如思考和决策（飞越疯人院里男主 McMurphy 最后就是被切除了额叶）。那它的工作机理大概是怎样的呢？作者给我们做了一个很好的比喻：舞台模型。&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_1.jpg&quot;
        width=&quot;834&quot; &#x2F;&gt;&lt;&#x2F;p&gt;&lt;h4 id=&quot;wu-tai-hen-xiao-zhi-rong-de-xia-4-ge-yan-yuan&quot;&gt;舞台很小，只容得下 4 个演员&lt;&#x2F;h4&gt;
&lt;p&gt;如果我们把前额叶的活动都抽象为「导演导一场戏」，什么时候演员演好了，导演满意了，任务就完成了。演员就是参与思考、决策的要素，也就是同一时间大脑可以容纳的思考元素是有限的。因此选择思考什么内容很重要。当你在思考中午应该吃什么、明天穿什么衣服、要不要给 XX 去个电话时，都会消耗舞台能量。舞台是一个神圣的地方，尽量让大人物在上面显摆吧。&lt;&#x2F;p&gt;
&lt;p&gt;4 个演员不是指 4 件事，而是某件事会涉及到的一些概念、要点。生活中我们会发现有一些人，他们的反应速度很快，感觉一下能思考很多层面，这并不是他们的舞台很大，而是演员的切换速度比较快，演员的选择上更优，以及演员和观众之间的联系更加密切。&lt;&#x2F;p&gt;
&lt;p&gt;对于新的概念，我们理解起来会比较累，因为观众都不太认识这个演员，自然光要给得足够强(新手光环)，这样能量消耗就多，就会感觉比较累。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mei-tian-de-xi-you-xian&quot;&gt;每天的戏有限&lt;&#x2F;h4&gt;
&lt;p&gt;由于舞台大小和资源的限制，每天能演的戏其实并不多，而我们往往有一种错觉，一天的时间很长，后面再做也无妨。而要演一出高质量的戏，需要导演、演员和灯光（可用资源）的配合，后面确实有时间，但这些要素不一定处于最佳状态。&lt;&#x2F;p&gt;
&lt;p&gt;还有一个重要的点是针对不同类型的戏，舞台需要重新布景，比如演话剧的不同桥段时，舞台的布景也不一样，而这也挺消耗资源的，所以最好是同一类型的戏一并拍完。在编程领域针对不同的任务特点，我们会把它们分为 CPU 密集型或 IO 密集型等，这里也可以进行类似的归类，比如创造、记忆、决策等，然后同类型的尽量打包处理，以此来降低功耗，提升效率。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;guan-zhong&quot;&gt;观众&lt;&#x2F;h4&gt;
&lt;p&gt;一场戏演完后，演员就要回到观众席了，所以演员和观众的身份是可以随时切换的，而观众就是记忆。那些坐在前排的观众是还比较新鲜的记忆，导演在选角时容易被选中。后排的观众就比较惨了，光照不足，如果长得不够有特点，或者导演对他印象不够深刻，很可能就再也没有上场的机会了，谁会记得一个月前的今天自己中午吃了什么呢。&lt;&#x2F;p&gt;
&lt;p&gt;所以为了不被遗忘，观众在短暂的上场时间里要尽量让导演印象深刻，跟底下的观众多一点互动（建立联系），下次当有关联的另一位观众上台时，导演可能还能想起你。所以对于一个新事物，如果仅仅停留在这件事物&#x2F;概念本身，即使当时记得很清楚，没有对它进行更全面的认识，一样会坐到后排而被遗忘。全面认识可以从这几个角度去考虑：为什么会有出现这个概念，它的定义是什么，有什么特性，使用场景是怎样的，能举几个例子么，它是如何实现的，跟它类似的有哪些，如果从更高层面去思考它的本质又是什么，在这个本质的前提下有哪些事物其实跟它是一样的。&lt;&#x2F;p&gt;
&lt;p&gt;所谓「贪多嚼不烂」就是这个道理，从短期看确实记了很多，印象也蛮深刻，因为那时还在观众席的前排，导演一回头就看见了。随着时间的流逝，又会有一批新的观众占据前排，而原先的那些就只能被迫到后排，如果导演在看着舞台上的演员想不起你时，就不容易再上场了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dao-yan&quot;&gt;导演&lt;&#x2F;h4&gt;
&lt;p&gt;导演是非常重要的一个角色，演哪一出，选谁来演，怎么演都靠他，大权在握。因此让导演保持在良好的状态很重要（awareness），而有些时候导演也很无奈，因为没有收到拍戏的需求，这个我们在后面的杏仁核劫持中会讲到。&lt;&#x2F;p&gt;
&lt;p&gt;如何让导演处于 Awareness 状态呢，一种方法是用第三视角来看自己的行为。费曼在研究「睡觉时我们的意识流是如何停顿下来的呢？」这个问题时，就经历了与自己对话的过程。「论语」里讲的「吾日三省吾身」也是类似的道理，要及时抽离出另一个自己来看待自己做的事情并反思。就好像不照镜子就不容易发现嘴角的那粒饭，而别人不一定会主动提醒你那粒饭的存在，想想自己每天带着那粒饭跟人打交道是不是很别扭。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;deng-guang-hen-xiao-hao-neng-liang&quot;&gt;灯光很消耗能量&lt;&#x2F;h4&gt;
&lt;p&gt;我们常说脑力劳动很累，是真的累，因为消耗的是实实在在的能量。舞台模型里，灯光就是这样的能量消耗体。演员要演戏就一定要有灯光，灯光的强弱也有阶段性，在灯光较强的阶段把重要的戏演了，这很重要，也就是我们常说的把先往瓶子里放大石头。一般来说上午的灯光比较强，毕竟休息了一晚上，这时可以先做重要的事，下午灯光相对弱一点了再做「便宜」点的事。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gei-wu-tai-jian-ya&quot;&gt;给舞台减压&lt;&#x2F;h4&gt;
&lt;p&gt;舞台既然是一个有限且宝贵的资源，有什么办法可以降低它的负荷呢，可以试试下面这几个：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;放到基底神经节。也就是让一些行为自动化，比如走路虽然也算一件事，但不怎么耗舞台资源，因为它的记忆大多存储在基底神经节。当一个行为被重复多次后，就会由它来接管。&lt;&#x2F;li&gt;
&lt;li&gt;使用视觉区域。理解一个比较抽象或复杂的概念时，可以在大脑里形成一个画面。比如在理解 TCP&#x2F;IP 协议时，可以想象一条破破烂烂的路，然后那些阻塞、丢包等概念就容易理解了。&lt;&#x2F;li&gt;
&lt;li&gt;写下来。我们总是容易高估大脑的能力，因为在当时可能确实记得比较清楚，但几天之后或者忙其他事情时就容易模糊甚至遗忘。&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;10788371&#x2F;&quot;&gt;清单革命&lt;&#x2F;a&gt;这本书就强调了写下来的重要性。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;hu-luo-bu-he-da-bang-du-xu-yao&quot;&gt;胡萝卜和大棒都需要&lt;&#x2F;h4&gt;
&lt;p&gt;演员也需要刺激，没有动力和压力就无法逼出他们的最佳状态(后面我们会讲到如何让人们更愿意去做某件事，也就是提升动力因素)。这两者的量要合适，过多或过少都不行。比如自己不太喜欢在众人面前分享，而正好需要做这件事，这就属于动力不足；离 DeadLine 不剩几天了，其他人的工作都差不多做完了，主要的瓶颈在自己这里，而自己心里又没什么底，这样就容易压力过大。&lt;&#x2F;p&gt;
&lt;p&gt;解决方法其实也很简单：重新认识。同一件事一定可以从多个角度来看待，就像一个鸡蛋，从侧面看是一个椭圆，而把它立起来从上往下看就是一个圆。比如由于某种原因必须去参加一个无聊的会议，会议里的人也很无聊，怎么办，看起来只能无聊地度过这段时间了？其实有很多玩法，比如给自己设计一个游戏：我猜下次这个人讲话时会讲 XX 这几个话题，这个人有哪些心理偏见，我自己身上有没有，为什么会有这么一个会议，有没有更好的形式，为什么是我来参加等等。通过对这个会议的重新认识就能发现很多乐趣，这样就不会显得那么无聊。&lt;&#x2F;p&gt;
&lt;p&gt;一些公司的高管往往有比较大的压力，如果无法良好应对，就容易出现决策失误。一种方式是把这些压力变成良性压力。比如想象最差情形是怎样，是不是可以承受，如果可以，那压力就不会那么大。如果无法让自己产生压力，也可以通过「重新认识」来形成，比如写一篇文章本身并没有什么压力，但如果想象一下读者对着这篇文章一脸不屑，甚至觉得漏洞百出时的表情是不是就有压力了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jian-shao-gan-rao&quot;&gt;减少干扰&lt;&#x2F;h4&gt;
&lt;p&gt;如果拍戏时被频繁打扰，这场戏自然就很难拍好了。这些打扰通常来自两部分：外部干扰和内部干扰。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;wai-bu-gan-rao&quot;&gt;外部干扰&lt;&#x2F;h5&gt;
&lt;p&gt;这个比较好理解，最常见的就是手机，各种 Notificaiton，还有就是内部的 IM，或者同事。这些看起来都难以避免，但还是有一些技巧，比如手机我们虽然不能粗暴地把它设置为飞行模式，至少可以把它调到静音，翻过来，来电话时能知道，一般的通知可以稍后处理(或者只针对重要的 App 开通知)。对于办公室的一些干扰或潜在干扰可以戴上耳机，一方面降低外部的噪音，另一方面也表示自己目前不想被打扰，除非有重要的事。&lt;&#x2F;p&gt;
&lt;p&gt;如果可能的话，在从事前额叶密集型事务时，最好找一个自己不会被打扰到的地方，不一定是安静的地方，我会比较喜欢咖啡馆。这样可以让保安们也休息下，因为你知道周围不会有什么人来打扰你，毕竟保持警觉的保安同学也在消耗资源。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;nei-bu-gan-rao&quot;&gt;内部干扰&lt;&#x2F;h5&gt;
&lt;p&gt;相对于外部干扰，内部干扰更容易发生，且影响更大。比如时不时地会冒出一些念头：刷个 Feed，看个新闻，玩个游戏等等，就好像是台下的观众会有冲到舞台的冲动（毕竟都是戏精），如果没有保安拦着就会影响正常的拍戏，而这些事往往有些特点：做的成本很低，又容易陷进去。我们常说的自制力也就是保安的执行力，而要让保安一直处于工作状态，不可避免地会消耗能量。因此不要太依赖自制力，最好让观众们都安分点。如何安分点呢，一种办法是延迟决定，有冲动想做某件事时，先「忍」一段时间，比如 30 秒，然后会发现欲望不那么强烈了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mei-you-si-lu-shi-gai-zen-yao-ban&quot;&gt;没有思路时该怎么办&lt;&#x2F;h4&gt;
&lt;p&gt;Clojure 作者 Rich Hickey 做过一个「&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matthiasn&#x2F;talk-transcripts&#x2F;blob&#x2F;master&#x2F;Hickey_Rich&#x2F;HammockDrivenDev.md&quot;&gt;Hammock Driven Development&lt;&#x2F;a&gt;」的分享，也就是「吊床驱动开发」，简单来讲就是当某个问题怎么想也想不到好的解决方案时，在吊床上睡一会，等醒来后指不定就有答案了。因为在这段非聚焦的场景下容易在潜意识中找到突破口，之前的 「Learning How to Learn」里提到过一个不错的例子，聚焦状态下，弹珠靠的比较紧，我们能快速得找到关联度较高的信息；而发散状态下，弹珠之间的缝隙就会变大，就更有可能触及到远处的弹珠（可能是某个灵感）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xing-ren-he-jie-chi&quot;&gt;杏仁核劫持&lt;&#x2F;h3&gt;
&lt;p&gt;又是一张辣眼睛的图···&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_2.jpg&quot;
        width=&quot;834&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们总觉得人是有自由意志的，在「未来简史」里也有提到，人其实并没有自由意志，甚至可能连意识都没有，只不过是神经元之间的神经递质传递，从树突传到轴突，轴突通过电信号再释放出一些化学物质给下一个神经元，这些数量庞大的神经元之间的信息传递让我们感觉有了意识、思维等。&lt;&#x2F;p&gt;
&lt;p&gt;我们做一个决定时有可能是前额叶帮我们做的（理性），也有可能是杏仁核处理的。杏仁核所在的边缘系统由来已久，哺乳动物也有类似的系统，它帮助我们在远古时代能够躲避猛兽的袭击，在面对老虎时，不需要计算它的瞬时启动速度、经过多久能追上自己等，杏仁核下命令直接跑就是了。又比如婴儿一般都喜欢花，害怕蛇，这些都是根植于基因，不需要后天习得。杏仁核就像一个小孩，很容易有情绪，它后面有一堵墙，上面记录了基因里的信息，以及后天的经验。当一件事情发生时，杏仁核如果发现能在墙上找到记录，可能就自动做决定了。在精心布置的苹果店里，会觉得苹果产品非常高贵，进而产生拥有欲望，然后就下单了。其实从理性层面上考虑，自己真的需要功能这么强劲的手机么，不一定吧。德州扑克也一样，在情绪主导下，很容易做出错误的决定。所以要避免杏仁核有比较大的波动，然后做出非理性决定。有几个方式可以试一下：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tie-biao-qian&quot;&gt;贴标签&lt;&#x2F;h4&gt;
&lt;p&gt;比如当自己处于一种比较难受的状态时，试着用一个词来描述：焦虑&#x2F;压力&#x2F;胡思乱想等等，就像捉妖记里在妖怪头上贴了一张符，他们就动不了了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhong-xin-ren-shi&quot;&gt;重新认识&lt;&#x2F;h4&gt;
&lt;p&gt;这个技能前面也有提到过，通过对事物进行重新认知来平衡动力和压力。比如在自己的这个岗位做不出成绩，是不是由于对这个岗位的认知不够。奇葩大会第二季里，一个叫「河森堡」的博物馆讲解员给我的印象蛮深刻的，在外人看来这是一个类似「导游」性质的职业，但他会根据一些古物去思索背后的原因，然后寻找证据，再用故事的形式向别人阐述，效果也很不错。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xiang-jie-jue-fang-an-er-bu-shi-wei-wen-ti-suo-kun-rao&quot;&gt;想解决方案而不是为问题所困扰&lt;&#x2F;h4&gt;
&lt;p&gt;书里提到一个例子，准备打车去机场时，忽然下起了雨，不太好打车，好不容易来了一辆车，也被前面的人拦走了，这时就容易沉浸在情绪里。如果换一个角度想着「如何才能打到车」就容易找到问题的解决办法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scarf-mo-xing&quot;&gt;SCARF 模型&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;your-brain-at-work&amp;#x2F;brain_3.jpg&quot;
        width=&quot;400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是一个动力模型，符合这个模型的，人们就更愿意去做；跟这个模型相背的，意愿就不那么强了，比较适合管理人员。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;status&quot;&gt;Status&lt;&#x2F;h4&gt;
&lt;p&gt;地位。我们都希望在一个团体中有一定的地位，或者说受到尊敬，当然这需要自己争取，从管理者的角度，也可以有意识地去加强一些成员的「地位感」，当发现一些事做得还不错时，及时在公众场合给予表扬。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;certainty&quot;&gt;Certainty&lt;&#x2F;h4&gt;
&lt;p&gt;相信。相信分解出来的步骤可以做成某件事。Elon Musk 有一次分享了他殖民火星的计划，分解成了几个阶段，听完之后觉得这事好像真的不是天方夜谭，，并没有物理定律或者科技上的限制，这种情况下做事就会有底。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;autonomy&quot;&gt;Autonomy&lt;&#x2F;h4&gt;
&lt;p&gt;自治。也就是选择空间，对于技术人员来说，这个方案是我自己想的，还是别人想好让我做的，是否可以选择我喜欢的语言来开发等，对于意愿上的影响也挺大的，我们都希望自己有一定的决策权力和空间，即使是一枚螺丝钉，至少也可以选择钉在哪块木板上。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;relatedness&quot;&gt;Relatedness&lt;&#x2F;h4&gt;
&lt;p&gt;社交。生命其实就是基因的载体，而最核心的大脑活动也只是神经元之间的互动，大脑与肌体的互动也是以一种可以理解的机械化的方式进行。其实跟电脑并没有太大的区别，电脑病毒也可以具有自我复制的能力，只不过一个是在硅层面进行，另一个是在化学层面发生。&lt;&#x2F;p&gt;
&lt;p&gt;我现在觉得人跟机器很大的一个不同点是，人（包括很多哺乳动物）都有社交的需求。Ray Dalio 在「原则」里面也有提到，有意义的工作和人际关系是非常重要和基础的需求，因此创造一个 Social 的氛围也蛮重要的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fairness&quot;&gt;Fairness&lt;&#x2F;h4&gt;
&lt;p&gt;公平。有一个游戏是两个人玩，给其中一人一百块钱，并且可以决定怎么分，而另一个人有否决权，也就是如果他不满意，两个人都拿不到钱。从理性角度出发，那个具有否决权的人只要能分到钱都不应该否决，但事实上，如果他觉得不公平，宁愿两个人谁都拿不到。「公平」是很重要的点，如果看到有人明明做得不够好，却得到晋升，心态就会发生变化，感觉自己没有必要那么辛苦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;这本书主要讲解了大脑几个区域的大致运行特点，在了解了这些特点之后，可以有针对地进行改进。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By understanding your brain, you increase your capacity to change your brain. The more you notice your own experience, whether it’s the small capacity of the stage, the dopamine high of novelty, or the way you need a moment to gather an insight, the more opportunities you have to become mindful, stop, and observe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Mindfulness isn’t difficult. What’s difficult is to remember to be mindful.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        
        
        <item>
            <title>对职业生涯感到迷茫时可以看看这本书</title>
            <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pivot/</link>
            <guid>https://limboy.me/posts/pivot/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o5wmam8j20rs15544o.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;无意中看到了蔡学镛推荐这本书，去 amazon 看了下，评分还挺高，于是就下了电子书，看下来收获还不少。&lt;&#x2F;p&gt;
&lt;p&gt;工作了一段时间之后往往会出现困惑：做的事情好像不再那么激动人心，是不是该转岗？不断涌入的小鲜肉貌似比自己有活力，是不是该跳槽？是不是该换一个方向？这些问题的折磨之处在于「选择」，选择不可避免地会失去一些东西，而我们又是那么害怕失去。慢慢地，就会感到恐慌。&lt;&#x2F;p&gt;
&lt;p&gt;介绍书的内容前，先介绍下作者：珍妮 · 布莱克（Jenny Blake），是 Google 「职业导师计划」的创始成员。在 Google 工作的五年间，她为 1000 多名员工提供了职业培训与指导，进而形成了一套「职业转型方法论」。&lt;&#x2F;p&gt;
&lt;p&gt;本书的核心内容全部浓缩在下面这张图里了：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o6e1r8yj20fq0iqgmx.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;转型分为 4 个阶段，这些阶段不是一次性的，就像上图描述的一样，是循环进行的。时间也不一定，几个月或几年都有可能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-jie-duan-da-ji-chu-plant&quot;&gt;第一阶段：打基础（Plant）&lt;&#x2F;h3&gt;
&lt;p&gt;作者用了一个很形象的比喻：篮球运动里的「转身」。首先要有一个支撑脚来作为基础，然后再做下一步动作。那这个基础是什么呢？&lt;&#x2F;p&gt;
&lt;p&gt;想象下如果钱不是问题，你会如何支配时间？做哪些事最让你兴奋？最引以为豪的事情是什么？希望别人如何介绍你？有没有仰慕的人，他们的什么特质吸引了你？目前面临的困境是什么？希望生活中多一点什么？&lt;&#x2F;p&gt;
&lt;p&gt;这些问题可以帮助找到自己最看重的东西，比如健康、创作、成长、财务自由等。然后围绕这些关键字看看可以做什么。比如「帮助他人」可以：教学、指导、分享等。&lt;&#x2F;p&gt;
&lt;p&gt;知道了自己最在乎的，以及相关的可以做的事情，接下来就可以按照优先级排序（如果不清楚优先级，可以问一下自己：如果只能选一个会选哪个）。&lt;&#x2F;p&gt;
&lt;p&gt;最后会出来一个列表，把它放在自己每天能看到的地方（比如壁纸）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kuai-le-gong-shi&quot;&gt;快乐公式&lt;&#x2F;h4&gt;
&lt;p&gt;由于个体间的差异，能够让我们快乐的事情也不一样，所以这个公式只能自己总结。可以从微观和宏观层面上去拆分。这是一个 Demo：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;ww1.sinaimg.cn&#x2F;large&#x2F;afe37136gy1fe0o6nmuh2j21390qralz.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;作者还给了一些建议，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;避免决策疲劳。精力有限，无论大小决策都需要精力，不要纠结于那些小事（比如今天穿什么）。&lt;&#x2F;li&gt;
&lt;li&gt;锻炼身体。转型过程可能比较漫长，身体一定要撑住。&lt;&#x2F;li&gt;
&lt;li&gt;冥想。有奇效。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ni-xi-wang-1-nian-hou-de-zi-ji-shi-zen-yang-de&quot;&gt;你希望 1 年后的自己是怎样的？&lt;&#x2F;h4&gt;
&lt;p&gt;通过前一步操作，有了罗盘。接下来就该知道具体该往哪里走了。&lt;&#x2F;p&gt;
&lt;p&gt;这个 1 年后的 vision 需要具体且对自己有诱惑力。只有具体才不会偏航；有诱惑力才能克服重重阻碍。那为什么不是 5 年呢？因为变数太多，就像 07 年 iPhone 出来了，Instagram 的作者们会在 04 年决定做一款 iPhone 应用么？&lt;&#x2F;p&gt;
&lt;p&gt;这个 vision 最好有画面感，那种想想就很美好的画面。 比如：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 年后的今天，我希望自己住在伦敦，在咖啡馆准备自己的国际商务课程。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以先有一些模糊的画面，再慢慢雕刻。比如「每天早上恨不得早点起床要做的事」、「通过自己的工作对一部分人产生正面影响」。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ming-que-zi-ji-de-qiang-xiang&quot;&gt;明确自己的强项&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;小时候很喜欢什么事情？&lt;&#x2F;li&gt;
&lt;li&gt;最近因为哪些事而备受称赞？&lt;&#x2F;li&gt;
&lt;li&gt;因为做了什么而有了一定的声誉？&lt;&#x2F;li&gt;
&lt;li&gt;做哪些事让自己感觉很陶醉？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些问题就像镜子，方便看见自己的优势。这样方便知道自己目前的状态，如果要去目的地，还差哪些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-er-jie-duan-sao-miao-scan&quot;&gt;第二阶段：扫描（Scan）&lt;&#x2F;h3&gt;
&lt;p&gt;这个阶段主要是寻找到达目的地的人（导师／贵人）、技能（是否具备转型所需的技能）和机会。多与自己仰慕的人交流，听取他们的建议；做一些调查；填补技能短板；明确怎样的机会是自己最想要的；适当地加强社交圈，增加曝光度。&lt;&#x2F;p&gt;
&lt;p&gt;这个阶段多想想我能提供什么？有哪些需要被解决的问题？同时让自己处于可被发现的状态（就像蓝牙设备一样），通过写作、作品、分享扩大影响圈，这样才能让机会找到你。&lt;&#x2F;p&gt;
&lt;p&gt;在寻找项目的过程中，多想想为什么要做这个项目？想要达到什么目标？想要影响哪些人？应该做些什么才能最大化自己的价值？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fa-zhan-zi-ji-de-she-qun&quot;&gt;发展自己的社群&lt;&#x2F;h4&gt;
&lt;p&gt;这需要时间，但是值得。作者离开 Google 的时候，就是通过在 20% 的业余时间建立的良好口碑，离职后依然有人持续地来咨询。就像 KK 说的，1000 个「死忠粉」，愿意买你出售的任何东西。&lt;&#x2F;p&gt;
&lt;p&gt;作者举了个例子：Daniel Kelleghan 之前作为摄影师在 Groupon 工作，离职后在世界各地拍时尚和建筑，通过与客户合作来维持收入，同时通过 Instagram 上的高质量照片来圈粉。3 年下来积攒了 7000 多个粉丝，由于高质量的图片，被 Instagram 官方推荐，然后就迎来了 10k 的粉丝。接着酒店和服装公司就自动找上门，现在他在很多地方都可以免费吃住，一些大品牌如奥迪也主动来谈合作。&lt;&#x2F;p&gt;
&lt;p&gt;最后如果实在不知道做什么，可以考虑那些没人愿意做的事，可能会有新的灵感，同时又会产生差异化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-san-jie-duan-shi-shui-pilot&quot;&gt;第三阶段：试水（Pilot）&lt;&#x2F;h3&gt;
&lt;p&gt;这个阶段主要是验证。有想法，快速实现和测试，逐步迭代，效果不好就换一个，效果好就投入更多的时间和精力培养。&lt;&#x2F;p&gt;
&lt;p&gt;产品开发中有一个 MVP 的概念：Minimum Viable Products。一个很典型的例子就是 ProductHunt，现在几乎成了发现新优产品的首选。在最开始就是找的网上一个分享链接的服务，邀请好友一起来分享有意思的产品，然后发现有很多的订阅，才开始考虑做一个 ProductHunt 的网站。找人通过修改开源项目，用 8 天的时间搭了一个类似 Hacker News 的简易网站。&lt;&#x2F;p&gt;
&lt;p&gt;合适的试水项目需要跟第一阶段的价值（对你来说最重要的东西）、愿景（最让你兴奋的）、技能、财力、社交圈强相关。&lt;&#x2F;p&gt;
&lt;p&gt;尽可能地在工作之余抽出时间来经营自己的项目。验证过程中，多想想哪些是可行的，哪些不可行，需要做出哪些改变。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-si-jie-duan-qi-dong-launch&quot;&gt;第四阶段：启动（Launch）&lt;&#x2F;h3&gt;
&lt;p&gt;如果来到了这个阶段那说明前几个阶段效果不错，这个阶段主要考虑的点是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;何时该踏出那一步。&lt;&#x2F;li&gt;
&lt;li&gt;关键的决策因素是什么？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;需要一点点勇气，同时评估失败的风险，相信自会有判断。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h3&gt;
&lt;p&gt;英文书看下来确实累，不过只要静下心来，问题倒也不大。这个模型其实跟产品的周期挺像的：先定义产品的价值和要解决的问题，然后快速出 MVP，内测、迭代，不断循环，直到质量和功能都 OK 了，正式上线。&lt;&#x2F;p&gt;
&lt;p&gt;还是挺有参考价值的，自己也会在接下来的时间中进行尝试。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>读《程序员的思维修炼》</title>
            <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/pragmatic-thinking-and-learning/</link>
            <guid>https://limboy.me/posts/pragmatic-thinking-and-learning/</guid>
            <description>&lt;p&gt;虽然冠以「程序员」的名头，但其实也适用于非程序员。这本书主要围绕「如何提升元学习能力」展开，所谓「元学习」就是学习如何学习。掌握了这种能力后在其他领域也可以如鱼得水。还介绍了 L 型和 R 型双 CPU 模式，阅读的技巧，目标的设定等等。读起来不累，同时又会有不少收获。&lt;&#x2F;p&gt;
&lt;p&gt;简单摘录了几句：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;培养幽默感，以建立更强大的隐喻。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;两个想法相距越远，越难以通过有效的隐喻联系起来。但我们遇到一个格外具有创造性的隐喻，且两参照系距离适中，我们就不得不几百年来一直歌颂这位作者。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;增加感官体验，以促进大脑的使用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;直觉和模式匹配能力超越了显性知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你的价值取决于你为团队带来的价值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是软件，软件不会老化，不会退化。但是大脑必须刷新，必须使用，否则就会丢失记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型在存储输入方面非常卖力，事实上可能你的每次经历，无论多么平淡乏味，都会被存储。但是它不一定被索引。当你努力解决一个问题时，R 型进程会搜索你的所有记忆以寻找解决方案。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型处理语言、分析、符号、抽象、时间、推理、数字、逻辑、现象思维。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R 型处理直觉、综合、想象。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;积极的情感对学习和创造性思维非常关键。当你充满了消极情绪时，你的大脑就开始停止提供多余的资源。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择或桌面的整理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你努力解决一个问题时，你的所有记忆都会被扫描——甚至那些你无法主动唤醒的记忆。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;养成一种收集思维鹅卵石的习惯，一旦有了积累，造墙的过程就会很容易。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你是否注意到伟大的想法或者领悟可能会在最出乎意料的时候降临？比如洗澡、刷盘子或其他一些枯燥、琐碎的工作时。这是因为 L 型有点厌倦了这种常规任务，走了神，这才让 R 型得以自由地展示自己地发现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;改变解决问题的角度（角色扮演）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;培养快速的洞察力，寻找不相关事物之间的关系或类比。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大脑不是一个用于填充的容器，而是一束需要点燃的火焰。这不是别人可以帮你做的，而是一件你必须自己做的事情。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;建立 SMART 任务实现你的目标。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所有的知识投资都有价值。即使你从来不会在工作中使用某项技术，它也会影响你思考和解决问题的方式。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;考虑投资的回报率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你种菜时，如果菜长的不好，你不会怪责菜，你会寻找其他理由。菜可能需要更多的肥料或者水，或者少晒太阳，你决不会怪责菜。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SQ3R 主动学习法(Survy, Question, Read, Recite, Review)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用思维导图做笔记。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;以教代学（橡皮鸭调试法），向你所在领域之外的人解释。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把事物分成大脑足以容纳的几部分。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L 型模式的 CPU 有一种「空闲循环」程序，如果没有更紧迫的事情值得你去注意，闲置程序将会停留在一些低等级的困扰或紧急的问题上，而这会干扰 R 型的处理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大部分冥想、瑜伽以及类似的练习都是为了这个相同的目标：缓和大脑里 L 型嘈杂的声音所带来的痛苦，生活在此刻，不要将你的精力不必要的分散，因为内心中喋喋不休的事情会击倒我们。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 wiki 来管理信息和知识。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;「不作为」是敌人，「错误」不是。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;给新习惯适应的时间。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;制定一段时间计划，然后努力实现。跟踪你的进度，当你感觉做得不够时，重新审视你的成果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;信念是真实的，你必须相信这种改变是可能的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;采取步步为营的细小步骤。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;新手的大脑有很多可能性，但是专家的却很少。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;抓住方向盘，不要自动驾驶。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>The Icarus Deception (伊卡洛斯的骗局)</title>
            <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-icarus-deception/</link>
            <guid>https://limboy.me/posts/the-icarus-deception/</guid>
            <description>&lt;p&gt;「&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;The-Icarus-Deception-High-Will&#x2F;dp&#x2F;B00AECT2XK&quot;&gt;The Icarus Deception&lt;&#x2F;a&gt;」(伊卡洛斯的骗局)是 Seth Godin 在&lt;a href=&quot;http:&#x2F;&#x2F;www.kickstarter.com&#x2F;projects&#x2F;297519465&#x2F;the-icarus-deception-why-make-art-new-from-seth-go&quot;&gt;KickStarter&lt;&#x2F;a&gt;上发起的一个项目。或许大家对伊卡洛斯这个人物不是很熟悉，先简单说一下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;「Fall of Icarus」源自于希腊神话的一个故事，Icarus 的爸爸为他做了蜡的羽毛，但是因为他太自信，太骄傲导致他飞得太靠近太阳，用蜡做成的羽毛融化而坠落。故事警惕人们要“谨守本分，了解自己的局限性”。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;而这本书就是要揭开这个骗局，youtube 上有 Seth Godin 对&lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=TdjBBdaAWqw&quot;&gt;这本书的解释&lt;&#x2F;a&gt;，不到 3 分钟，值得看一下。大意是，工作让人们有了安全感、安于现状，但工作也让人们不断地对自己产生怀疑：我为什么要做这些？社会希望、「帮助」你飞的低一点，但现状是互联网和社交网络，让信息的传播变得非常容易和快捷，你飞得越高，带来的影响就会越大。&lt;&#x2F;p&gt;
&lt;p&gt;摘录其中几个自己比较喜欢的片段。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于文化的原因，大部分人都倾向于规避风险，恐惧失败，没有意愿让世界变得更加美好。相反，他们被数字所束缚，因循守旧。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不经历痛苦就达到目标是不可能的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术家通过勇气、洞察力、创造力来挑战现状。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;信任、关系和惊喜是稀有之物。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你把钱用来创作出类拔萃的产品或服务，那么就不需要打广告。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;现在通过意见领袖来传播杰出产品的成本已经很低且很高效了，把一个平庸的产品通过推广渠道推到早已过载的用户手中这种做法已经收效甚微了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术没有正确答案，我们期望一个有意思的答案。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当前重要的：信任、授权、出色、领导力、易被传播的故事、人文。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Facebook 或 Twitter 上有多少 Follower 不重要，重要的是如果明天你没出现，有多少人会惦记着你。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;正确是好的，但有趣更好。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术家的习惯：静坐；自主学习；激发其他艺术家；用不同的方式去教；发布作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你的作品失败了，做更好的作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;我们夸大了落水的风险，却忽略了游泳的乐趣。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将每一个障碍变成学习的过程，而不是被动地去解决它。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果没有足够多的人质疑你，那么你并没有在做不一样的东西。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你不站出来或说出来，你就不会有羞愧感。工业社会告诉你避免被关注就可以避免羞愧，遵守规则就会获得稳定。但你也可以通过躲藏来避免羞愧，但那样你就会找不到快乐和稳定。「羞愧」是一个选择，它不能强加于你，但你可以选择接受。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;作为一个艺术家，你的作品必须打动观众&#x2F;用户。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;发布小的作品，然后大一点的作品，然后再是影响世界的作品。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;你可以冒风险去做可能错的事情，或者变得无聊。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;弊端在于用别人的尺度来衡量自己的艺术。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;艺术是努力的结果，是向某个特定的方向倾注大量的热情和精力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把尽量多的人带到一个房间里，然后再向其他的地方进发。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;成功的艺术家的习惯：学会销售自己的作品；学会感谢；在公共场合演讲；经常失败；看清世界，作出预判；教授他人；经常写作；联系他人；领导一个部落；把这些作为自己必须要承担的工作和任务。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;痛苦是旅途的一部分，没有痛苦，这趟旅途就不值得继续。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最大的失败源于对失败的恐惧而扼杀了自己的热情。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>The Dip</title>
            <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-dip/</link>
            <guid>https://limboy.me/posts/the-dip/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;the_dip&#x2F;&quot;&gt;The Dip&lt;&#x2F;a&gt; 是营销大师 Seth Godin 在 07 年写的一本小书，其核心的思想是：找到一个自己愿意投身的领域，并成为该领域的 No.1&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-dip&amp;#x2F;the-dip.jpg&quot;
        width=&quot;639&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很多人，无论是主动地还是被动地选择某个领域，无论是从事了 1 年还是 10 年，大部分都是处于「平均水平」，或者「高于平均水平」，但绝没到「该领域最好」的程度。这也是 Seth Godin 希望人们摆脱的状态，因为「赢者通吃」。大部分人是懒得去比较去探究的，它们会问：干这行的谁最 NB，然后直接就去找 TA 了。好比我们一说到巴黎马上就想到了「埃菲尔铁塔」，或者「卢浮宫」、「塞纳河」，又有多少人知道「玛德莱娜教堂」教堂呢。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;1519158.htm&quot;&gt;Zipf 定律&lt;&#x2F;a&gt;跟 80&#x2F;20 原则有点类似。Zipf 这个人做了一个研究，并得出结论：一个词在一个有相当长度的语篇中的等级序号与改词的出现次数乘积几乎是一个常数。比如：「the」出现得最多，为 200 次，那么「the」的 rank _ frequency = 200；「this」出现次数排第 5，为 40 次，那么「this」的 r _ f = 200；「September」的出现次数排第 100，一共出现了 2 次，那么 r * f = 200。如果把出现次数比作客户的话，第二名的客户数比第一名少了一半，第五名比第一名更是少了 80%。有点类似「长尾理论」的这张图&lt;&#x2F;p&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-dip&amp;#x2F;the-long-tail.jpg&quot;
        width=&quot;498&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然成为第一有这么明显的好处，为什么还是绝大多数人都无法做到呢？这里有很多原因，比如：没有看到成为第一能够带来的好处；在一个自己没有热情的领域苦苦挣扎；习惯了「舒适区」，不愿到「学习区」磨练等等。最常见的还是被短期的痛苦打败，因而放慢甚至停止了前进的步伐。&lt;&#x2F;p&gt;
&lt;p&gt;经历痛苦是难免的，它是实实在在的槛，只有真正能跨过去的，才能站在这个行业的顶端，也正是因为稀缺性，他们的价值被大大增加了。生活中的我们，会被各种各样的事物吸引注意力，在经历过一番努力后，开始沉浸于「Comfort Zone」，觉得已经「Good Enough」。按「Zipf 理论」来说，这是不划算的，因为越是处于前列，那么每进步一点带来的回报都是巨大的。&lt;&#x2F;p&gt;
&lt;p&gt;还要注意分辨 Dip 和 cul-de-sac(死胡同)，所谓「死胡同」，就是你明明花了很多时间，但收获却很小，或者 Dip 不够深，没有稀缺性。把过多的精力放在后者，带来的损失是双倍的。一旦发现是死胡同，那就尽快抽身。去找 Dip，找到很多人跨不过去，且已跨过去的人还不多的领域。&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>《穷查理宝典》小记</title>
            <pubDate>Wed, 30 May 2012 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/charles-thomas-munger/</link>
            <guid>https://limboy.me/posts/charles-thomas-munger/</guid>
            <description>&lt;p&gt;查理·芒格比较低调，可能很多人并不是太了解他。他是美国投资家，沃伦·巴菲特的黄金搭档，伯克希尔·哈撒韦公司的副主席。想要了解更多的话，&lt;a href=&quot;http:&#x2F;&#x2F;baike.baidu.com&#x2F;view&#x2F;1733776.htm&quot;&gt;请点这里&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;4208757&#x2F;&quot;&gt;《穷查理宝典》&lt;&#x2F;a&gt;收录了查理过去 20 年来主要的公开演讲，书中十一篇讲稿全面展现了这个传奇人物的聪明才智。&lt;&#x2F;p&gt;
&lt;p&gt;查理的一个很重要的观点是：融合各个重要学科的重要理论，并经常使用它们。我自己就有这感觉，看待一个问题时，往往凭着直觉，和在该领域的知识，孤立地去看。头脑里没有框架和多种模型，所以往往挖掘不到事物之间的深层联系。&lt;&#x2F;p&gt;
&lt;p&gt;基本上，无论从事哪种职业，这些重要学科的重要理论都会起到不少帮助。比如数学，心理学，统计学。不需要钻研得太深入，但对于那些重要的理论一定要了然于心，并经常运用。&lt;&#x2F;p&gt;
&lt;p&gt;还有就是我觉得最重要的，可能被很多人忽略的一个东西：好奇心。这是在各个领域辗转腾挪，又乐此不疲的关键因素。有了好奇心，才会有持续学习的动力，而持续学习的能力在很大程度上决定了一个人可以取得的成就。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qiong-cha-li-bao-dian-zhai-lu&quot;&gt;《穷查理宝典》摘录&lt;&#x2F;h3&gt;
&lt;p&gt;查理在他漫长的一生中，持续不断地收集并研究各种各样的人物，各行各业的企业以及政府管制、学术研究等各领域的著名失败案例。并把那些失败的原因排列成做出正确决策前的检查清单，这使他在人生，事业的决策上几乎从不犯重大错误。&lt;&#x2F;p&gt;
&lt;p&gt;他有儿童般的好奇心，又有第一流科学家所具备的研究素质和科学研究方法，一生都有强烈的求知欲，几乎对所有问题都感兴趣。任何一个问题在他看来都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上进行创新。&lt;&#x2F;p&gt;
&lt;p&gt;在他看来，世间宇宙万物都是一个相互作用的整体，人类的所有知识都是对这一整体研究的部分尝试，只有把这些思想结合起来，并贯穿在一个思想框架中，才能对正确的认知和决策起到帮助作用。所以他提倡要学习在所有学科中，真正重要的理论，并在此基础上形成所谓的“普世智慧”。&lt;&#x2F;p&gt;
&lt;p&gt;查理的兴趣不仅限于思考，凡事也喜欢亲力亲为，并注重细节。他有一艘世界上最大的私人双体游艇，而这艘游艇就是他自己设计的。他还是个出色的建筑师，他按自己的喜好建造房子，从最初的图纸设计到之后的每一个细节，他都全程参与。&lt;&#x2F;p&gt;
&lt;p&gt;手里只要有一本书，我就不会觉得浪费时间。&lt;&#x2F;p&gt;
&lt;p&gt;我一辈子想要的就是融入生活，我不希望自己被孤立。&lt;&#x2F;p&gt;
&lt;p&gt;他认为人应该对自己要严格要求，一生不断提高修养，以克服人性本身的弱点。&lt;&#x2F;p&gt;
&lt;p&gt;我的剑留给能挥舞它的人。&lt;&#x2F;p&gt;
&lt;p&gt;你必须知道重要学科的重要理论，并经常使用它们——要全部用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如经济学，试图用一种方法来解决所有问题。好比在手里拿着铁锤的人看来，世界就像一个钉子。这是处理问题的一种笨方法。&lt;&#x2F;p&gt;
&lt;p&gt;几乎每个系统都受到多种因素的影响，所以要理解这种系统，就必须熟练地运用来自不同学科的多元思维模式。&lt;&#x2F;p&gt;
&lt;p&gt;只要得到正确的收集和组织，他的多元思维模型便能提供一个背景或框架，使他具有看清生活本质和目标的非凡洞察力。&lt;&#x2F;p&gt;
&lt;p&gt;迅速地歼灭不该做的事情，接着对该做的事情发起熟练的，跨学科的攻击，然后当合适的机会来临——只有当合适的机会来临——就采取果断的行动。&lt;&#x2F;p&gt;
&lt;p&gt;一个企业的竞争优势是该企业的“护城河”，是保护企业免遭入侵的无形壕沟。优秀的公司拥有很深的护城河，这些护城河不断加宽，为公司提供长久的保护。&lt;&#x2F;p&gt;
&lt;p&gt;股价公道的伟大企业，比股价超低的普通企业好。&lt;&#x2F;p&gt;
&lt;p&gt;大多数玩家从被群体接受或者从对群体的归属感中得到快乐。然而好的玩家从他应付游戏里各种局面的能力中得到快乐。&lt;&#x2F;p&gt;
&lt;p&gt;他的投资行为结合了极度的耐心和极度的决心，一旦查理决定要投资，那么他很可能会决心下很大的赌注。他绝对不会小打小闹，或者进行小额的投机性投资。这类行为包含着不确定性，然而查理为数极少的投资行为却绝对不是不确定的。&lt;&#x2F;p&gt;
&lt;p&gt;随大流只能让你往平均值靠近。&lt;&#x2F;p&gt;
&lt;p&gt;如果你要变得更聪明，必须不停追问的问题是：为什么？为什么？为什么？&lt;&#x2F;p&gt;
&lt;p&gt;正视现实，即使你并不喜欢它——尤其当你不喜欢它的时候。&lt;&#x2F;p&gt;
&lt;p&gt;我是对的，你很聪明，迟早你会明白我是对的。&lt;&#x2F;p&gt;
&lt;p&gt;伯克希尔历史上最严重的错误是坐失良机的错误。我们看到了许多好机会，却没有采取行动。&lt;&#x2F;p&gt;
&lt;p&gt;如果你没有不停地学习，其他人将会超过你。&lt;&#x2F;p&gt;
&lt;p&gt;避免邪恶之人，尤其是那些性感诱惑人的异性。&lt;&#x2F;p&gt;
&lt;p&gt;我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的——没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我，觉得我是一本长了两条腿的书。&lt;&#x2F;p&gt;
&lt;p&gt;我觉得你要是想让人们认识有用的伟大概念，最好是将这些概念和提出它们的伟人的生活和个性联系在起来。&lt;&#x2F;p&gt;
&lt;p&gt;如果你担心通货膨胀，最好的预防手段之一就是在你的生活中别拥有大量愚蠢的需求——你不需要很多物质的商品。&lt;&#x2F;p&gt;
&lt;p&gt;反过来想，总是反过来想。许多难题只有在逆向思考的时候才能得到解决。例如，当年所有人都在试图修正麦克斯韦的电磁定律，以便它能符合牛顿的三大运动定律，然而爱因斯坦却转了 180 度的大弯，修正了牛顿定律，让其符合麦克斯韦的定律，结果他发明了相对论。&lt;&#x2F;p&gt;
&lt;p&gt;爱因斯坦说他那些成功的理论来自“好奇，专注，毅力和自省”。他所说的自省就是不停地实验和推翻他自己深爱的想法。&lt;&#x2F;p&gt;
&lt;p&gt;承担工作的责任，做可靠的人。&lt;&#x2F;p&gt;
&lt;p&gt;做出客观的评价很难，但却很重要。&lt;&#x2F;p&gt;
&lt;p&gt;如果只是记得一些孤立的事物，试图把他们硬凑起来，那么将无法真正理解任何东西。如果这些事物不在一个理论框架中相互联系，就无法把它们派上用场。&lt;&#x2F;p&gt;
&lt;p&gt;你必须拥有多元思维模型——因为如果你只能使用一两个，研究人性的心理学表明，你将会扭曲现实，直到它符合你的思维模型。&lt;&#x2F;p&gt;
&lt;p&gt;这么多年来，我一直跟巴菲特同事，他拥有许多优势，其中之一就是他能够自动地根据决策树理论和基本的排列组合原理来思考。&lt;&#x2F;p&gt;
&lt;p&gt;他要求布劳恩公司所有的交流必须遵守“5H1W”原则——你必须说明何人因何故需要在何时何地做何事。如果你写一封信或指示某人去做某事，但没有告诉他原因，那么你很可能会被解雇。如果你能将一堆模式的知识组合起来，回答一个又一个的为什么，就能更好地思考；同样道理，如果你告诉人们事情的时候，总是告诉他们原因，他们就能更深刻地理解你说的话，也会更重视你说的话。&lt;&#x2F;p&gt;
&lt;p&gt;那些来自硬科学和工程学的思维模型是地球上最可靠的思维模型。&lt;&#x2F;p&gt;
&lt;p&gt;人的头脑既是宇宙的光荣也是宇宙的耻辱。因为它的认知功能容易受误导，而且比感知功能更容易受误导。&lt;&#x2F;p&gt;
&lt;p&gt;你的规模优势可能是一种信息优势。我知道绿箭是一种另人满意的产品，可是对格罗滋毫不了解。如果绿箭卖 40 美分，格罗滋卖 35 美分，你们觉得我会为了区区 5 分钱而把某样我不了解的东西放到嘴巴里吗？——这毕竟是非常私人的地方。&lt;&#x2F;p&gt;
&lt;p&gt;规模大的缺陷是，这使竞争变得更有趣，因为大公司并非总是赢家——企业变大后，就会出现官僚机构的作风，而这种作风会造成敷衍塞责的情况——这也是人之本性。&lt;&#x2F;p&gt;
&lt;p&gt;在官僚机构里，当工作从你手上转到别人手上时，你会认为工作已经完成。当然了，实际上他并未完成。&lt;&#x2F;p&gt;
&lt;p&gt;巴甫洛夫联想：如果人们说了你确实不想听到的话——也就是让你不高兴的话——你会自然而然地生出抵触情绪。你必须训练自己摆脱这种反应。&lt;&#x2F;p&gt;
&lt;p&gt;当新的行业出现时，先行者会获得巨大的优势。如果你是先行者，你会遇到一种我称之为『冲浪』的模型——当冲浪者顺利冲上浪尖，并停留在那里，他能够冲很长一段时间。但如果他没冲上去，就会被海浪吞没。&lt;&#x2F;p&gt;
&lt;p&gt;成为赢家的方法是工作，工作，工作，再工作，并期待能够看准几次机会。&lt;&#x2F;p&gt;
&lt;p&gt;当沃伦在商学院讲课时，他说：我用一张考勤卡就能改善你最终的财务状况；这张卡片上有 20 格，所以你只能由 20 次打卡的机会——这代表你一生中所能拥有的投资次数。当你把卡打完之后就再也不能进行投资了。在这样的规则之下，你才会真正慎重地考虑你做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;正确的激励机制是非常重要的。联邦快递以前的派送系统总是出问题，那些职员从来没有及时完成工作，公司的管理层想尽办法，但没有一个生效。最后有人想到了好主意：不再以小时记薪，而是按班次记——而且职员只要工作完就可以回家。&lt;&#x2F;p&gt;
&lt;p&gt;年轻人应该在工作中追求：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;别兜售你自己不会购买的东西&lt;&#x2F;li&gt;
&lt;li&gt;别为你不尊敬和钦佩的人工作&lt;&#x2F;li&gt;
&lt;li&gt;只跟你喜欢的人同事&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;你们不需要了解所有知识，只要吸取各个学科最杰出的思想就行了，那并不难做到。&lt;&#x2F;p&gt;
&lt;p&gt;在当年，英国水手是十分粗鲁、古怪和危险的，他们讨厌“泡菜”，他们吃惯了英国的食物和饮料。所以怎么才能让英国水手吃泡菜呢？他是这么做的：所有官员聚集起来，并让普通水手都能看到他们。他让那些官员吃酸泡菜，但不让普通水手吃。经过一段时间后，库克说：嗯，普通水手每周也可以有一天吃酸泡菜。&lt;&#x2F;p&gt;
&lt;p&gt;优秀的文学作品需要读者略加思索才能理解。如果你动脑筋才懂得某个道理，你就会更好地记住它。&lt;&#x2F;p&gt;
&lt;p&gt;有一种蚂蚁，当它在巢穴里嗅到蚂蚁尸体散发出的外激素时，它就会和其他蚂蚁合作，把尸体运出巢穴。如果把这些激素涂在一只活蚂蚁身上，很自然，其他蚂蚁把这只活蚂蚁拖出了巢穴，尽管它在整个过程中不断地踢腿和挣扎。&lt;&#x2F;p&gt;
&lt;p&gt;如果你要说服别人，要诉诸利益而非理性。&lt;&#x2F;p&gt;
&lt;p&gt;即时的回报在改变和延续行为方面远远比延后的回报更有效。&lt;&#x2F;p&gt;
&lt;p&gt;新思想之所以很难被接受，并不是因为它们本身太过复杂，而是因为它们与原有的思想不一致。&lt;&#x2F;p&gt;
&lt;p&gt;当一个精子进入卵子，卵子就会自动开启一种封闭机制，阻止其他精子进入。人类头脑强烈地趋向于与此相同的结果。&lt;&#x2F;p&gt;
&lt;p&gt;和猿类，猴类和狗类等其他几类认知能力较低的动物相同，人类身上也有以德报德，以牙还牙的极端倾向。&lt;&#x2F;p&gt;
&lt;p&gt;化解过激敌意的标准方法是延迟自己的反应。“如果你觉得骂人是很好的反应，你可以留到明天再骂”&lt;&#x2F;p&gt;
&lt;p&gt;回馈倾向很大程度上是在潜意识层面发挥作用的。&lt;&#x2F;p&gt;
&lt;p&gt;即使是微不足道的联想，只要加以仔细地利用，也能对产品购买者产生极大的影响。鞋油的目标购买者或许很喜欢漂亮女孩，所以选择了那种包装上印着漂亮女孩的鞋油，或者他最近看到有漂亮女孩做广告的那种鞋油。&lt;&#x2F;p&gt;
&lt;p&gt;避免因为过去的成功而做蠢事的正确对策是：（1）谨慎地审视以往的每次成功，找出这些成功里面的偶然因素，以免受这些因素误导，从而夸大了计划中的新行动取得成功的概率。（2）看看新的行动将会遇到哪些在以往的成功经验中没有出现的危险因素。&lt;&#x2F;p&gt;
&lt;p&gt;结婚前要睁大双眼看清楚，结婚后要睁一只眼闭一只眼。&lt;&#x2F;p&gt;
&lt;p&gt;受简单联想影响的倾向在消除以德报德的自然倾向方面有惊人的效果。&lt;&#x2F;p&gt;
&lt;p&gt;被剥夺超级反应倾向：一个人得到 10 美元的快乐的分量，并不正好等于失去 10 美元给他带来的痛苦的分量。也就是说失去造成的伤害比得到带来的快乐多得多。&lt;&#x2F;p&gt;
&lt;p&gt;人们在失去或者可能失去财产、爱情、友谊、势力范围、身份、机会或其他任何有价值的东西时，通常会做出不理性的激烈反应。&lt;&#x2F;p&gt;
&lt;p&gt;人的本性：渴望具有重要性、渴望公平、渴望做出正确的选择、渴望吸引异性、害怕失去、渴望安全感、渴望被认同&lt;&#x2F;p&gt;
&lt;p&gt;社会认同什么时候最容易被激发？许多经验给出了下面这个明显的答案：人们在感到困惑或者有压力时，尤其是在既困惑又有压力时。&lt;&#x2F;p&gt;
&lt;p&gt;对比错误反映倾向：为了让正常的价格显得很低，商家通常会瞎编一个比正常价格高很多的虚假价格。人们即使对这种操纵消费者的伎俩心知肚明，也往往会忍不住上当。&lt;&#x2F;p&gt;
&lt;p&gt;施加压力可能是治疗最糟糕的疾病——丧失心智——的唯一方法（基于巴甫洛夫的狗的实验）&lt;&#x2F;p&gt;
&lt;p&gt;不用就忘&lt;&#x2F;p&gt;
&lt;p&gt;把一个人的技能编排成一张检查清单，并常常将这张清单派上用场，也是很重要的。&lt;&#x2F;p&gt;
&lt;p&gt;权威——错误影响倾向。美国有个医生给护士留了手写的字条，吩咐她如何治疗病人的耳痛。纸条上写着：Two drops, twice a day, r.ear。护士把 r.ear（右耳）看成了 rear（屁股），于是让病人翻过身，把滴耳液滴进了病人的肛门。&lt;&#x2F;p&gt;
&lt;p&gt;当几个模型联合起来，你就能得到 lollapalooza 效应（好几种力量共同作用于同一个方向）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>《软件随想录》小记</title>
            <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/more-joel-on-software/</link>
            <guid>https://limboy.me/posts/more-joel-on-software/</guid>
            <description>&lt;p&gt;非常感谢&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2009&#x2F;12&#x2F;chinese_version_of_mjos_is_on_sale.html&quot;&gt;阮一峰老师&lt;&#x2F;a&gt;用心的翻译。读起来完全没有生硬感，专有名词翻译地也很到位，还有很多贴心的脚注。&lt;&#x2F;p&gt;
&lt;p&gt;读完此书，对 Joel 的文章最大的感触是：观点鲜明，语言风趣，见解独到，(虽然有点拖泥带水的感觉，XDD)。简单摘录几段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果要让程序员高效地工作，你就必须要给予他们安静和宽敞的工作环境，比如私人办公室&lt;&#x2F;li&gt;
&lt;li&gt;让程序员干有趣的活是吸引优秀程序员最好的方法之一&lt;&#x2F;li&gt;
&lt;li&gt;让一流的新员工挑选自己的喜欢的项目&lt;&#x2F;li&gt;
&lt;li&gt;思考你得公司代表了怎样的追求，这种追求是怎样形成的，又是怎样被别人感受到的&lt;&#x2F;li&gt;
&lt;li&gt;程序员其实不在乎钱，除非你在其他事情上搞杂了。如果有人在抱怨薪水，而以前并没有出现这种情况，这经常是一种信号，表明人们并不真正喜欢他们的工作&lt;&#x2F;li&gt;
&lt;li&gt;大家坐在一起吃饭，感觉像个大家庭。创造一个有凝聚力的像胶水粘在一起的团队&lt;&#x2F;li&gt;
&lt;li&gt;指针和递归的真正价值在于那种你在学习它们的过程中所得到的思维深度&lt;&#x2F;li&gt;
&lt;li&gt;公司之所以需要管理，就是为了不影响聪明人的工作，让他们把事情做完&lt;&#x2F;li&gt;
&lt;li&gt;能不能清晰地写出技术文章，决定了你是一个口齿不清的程序员还是一个领袖。如果不是 Linus Torvalds 不断地散步福音，请问 Linux 操作系统会成功吗？虽然他是一个非常聪明的计算机天才。但是 Linux 吸引来全世界一大批志愿者的真正原因是 Linus Torvalds 的表达能力&lt;&#x2F;li&gt;
&lt;li&gt;当你改正了一个又一个小细节后，当你磨光，定型，擦亮，修饰你的产品的每一个小边角后，就会有神奇的事发生。你最后拿出来的是一件真正优秀的作品。它第一眼就让人觉得震撼，出类拔萃，工作起来完全符合直觉&lt;&#x2F;li&gt;
&lt;li&gt;世界上只有一件事比你自己设计软件更困难，那就是一个团队一起设计软件&lt;&#x2F;li&gt;
&lt;li&gt;最让我抓狂的就是有些开发团队养成了一个坏习惯，每次需要做决定时就开会&lt;&#x2F;li&gt;
&lt;li&gt;太多的选择最终限制了我们的自由，而不是解放了我们&lt;&#x2F;li&gt;
&lt;li&gt;避开攻击的最好方法之一，是让它看上去好像获得了成功&lt;&#x2F;li&gt;
&lt;li&gt;良好的社会化界面设计会创造更多的价值&lt;&#x2F;li&gt;
&lt;li&gt;如果你让某个功能很容易操作，人们就愿意使用它。通过这种方式，你能够暗中鼓励人们按预想的方式使用&lt;&#x2F;li&gt;
&lt;li&gt;空酒馆效应&lt;&#x2F;li&gt;
&lt;li&gt;解决轻而易举的事情是拿不到钱的，要挣钱，就别怕脏&lt;&#x2F;li&gt;
&lt;li&gt;如果你想保持增长，不管是个人，还是公司。唯一的方法就是扩张自己擅长处理的业务边界，除非故意要保持公司的小型化&lt;&#x2F;li&gt;
&lt;li&gt;如果日程规划是以&amp;quot;天&amp;quot;为单位，甚至以&amp;quot;周&amp;quot;为单位，我就认定它是没用的，你必须将日程规划分解成一些非常小的任务，这些任务能够在以&amp;quot;小时&amp;quot;为单位的时间段中完成，不能有任何任务所需的时间超过 16 小时&lt;&#x2F;li&gt;
&lt;li&gt;最好的工作条件 -&amp;gt; 最好的程序员 -&amp;gt; 最好的软件 -&amp;gt; 利润&lt;&#x2F;li&gt;
&lt;li&gt;如果你想压低程序员的工资，那你就会得到质量很垃圾的软件，而这实际上也不会为你省下很多钱&lt;&#x2F;li&gt;
&lt;li&gt;布鲁克斯法则：向一个已经延误的软件项目中增加人手，只会使他更加延误&lt;&#x2F;li&gt;
&lt;li&gt;一个优秀的程序员独自完成一项任务，就不需要额外的沟通和协调。如果同样的任务让 5 个程序员一起完成，他们之间就必须沟通和协调，这会花掉大量时间&lt;&#x2F;li&gt;
&lt;li&gt;用许多平庸的程序员取代少数优秀的程序员，这种做法的真正问题在于不管平庸的程序员工作多长时间，他们做出来的东西无法像优秀程序员做得那样好&lt;&#x2F;li&gt;
&lt;li&gt;你的公司的成功，依赖于程序员真正以办公室为家的程度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>高性能MySQL小结</title>
            <pubDate>Wed, 05 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/mysql-high-performance-tips/</link>
            <guid>https://limboy.me/posts/mysql-high-performance-tips/</guid>
            <description>&lt;p&gt;其实只看到了 1&#x2F;3，先记录一下，等以后有空了再补上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiang-cha-xun-jie-guo-dao-chu-dao-wen-jian&quot;&gt;将查询结果导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL QUERY INTO OUTFILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;sql&#x2F;file&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jiang-mei-ci-cao-zuo-du-dao-chu-dao-wen-jian&quot;&gt;将每次操作都导出到文件&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... &#x2F;&#x2F;这些操作，及操作的结果都会输出到对应的文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;文件内容大概会是这样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(none)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; use noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table information for completion of table and column names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; can turn off this feature to get a quicker startup with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; changed
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show tables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Tables_in_noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_category  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_comment   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_post      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_res       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_res  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_role_user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_tag       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;blog_user      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.00 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root@localhost&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;noah&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; from test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;foo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bar  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----+------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rows in set (0.02 sec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-zhuang-tai-ji-qi-ta-xin-xi&quot;&gt;显示 MySQL 当前状态及其他信息&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL当前状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;显示MySQL的变量信息，如version&#x2F;data_dir等等
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; VARIABLES LIKE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;%home%&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取包含home的变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;&#x2F;显示当前表的状态，注意后面的&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;，垂直显示结果
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DESCRIBE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;获取表结构
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SHOW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FULL COLUMNS FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;&#x2F;类似上面
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xian-shi-mysql-dang-qian-de-lian-jie-zhuang-kuang&quot;&gt;显示 MySQL 当前的连接状况&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 使用mysqladmin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysqladmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 或进入到mysql cli后执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show processlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 结果大概是这样
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Id  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Host      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;db   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Info             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;409 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;localhost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;noah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NULL  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; processlist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+-----+------+-----------+------+---------+------+-------+------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-timestamp&quot;&gt;关于 TIMESTAMP&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个 TIMESTAMP 字段会随着表其他字段的更新而自动更新，之后的 TIMESTAMP 字段则不会。&lt;&#x2F;li&gt;
&lt;li&gt;TIMESTAMP 的范围是：1970-2037；而 DATETIME 的范围是：1000-9999&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yi-chu-zhong-fu-de-xing&quot;&gt;移除重复的行&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 注意这个IGNORE参数，如果没加的话会报错，且执行失败
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 假设要去除a,b项重复的行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ALTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; IGNORE TABLE tbl ADD UNIQUE INDEX(a,b&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-kan-dang-qian-zai-cao-zuo-de-shu-ju-ku&quot;&gt;查看当前在操作的数据库&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; DATABASE(&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以在 mysql 的提示符上动点手脚&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# edit &#x2F;etc&#x2F;mysql&#x2F;my.cnf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[mysql]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#no-auto-rehash	# faster start of mysql but no tab completition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;u@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;d]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fu-zhi-yi-ge-biao&quot;&gt;复制一个表&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CREATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; TABLE tbl1 LIKE tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INSERT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; INTO tbl1 SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; FROM tbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# 也可以先用mysqladmin导出数据，再导入
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ding-chang-biao-yu-bian-chang-biao&quot;&gt;定长表与变长表&lt;&#x2F;h3&gt;
&lt;p&gt;包含任何 varchar、text 等变长字段的数据表，即为变长表，反之则为定长表。所以 CHAR 和 VARCHAR 不共存&lt;&#x2F;p&gt;
&lt;p&gt;CHAR(30)，最多可以容纳 30 个字符，但如果字符数不到 30 个的话，也会占用这些空间，只不过会在后面补上空格，但我们查询时又会发现尾部没有空格，这是因为空格已经被 CHAR 处理掉了。&lt;&#x2F;p&gt;
&lt;p&gt;VARCHAR(30)，也是最多可以容纳 30 个字符，但如果不足 30 个的话，有多少字符占多少空间，不会浪费。&lt;&#x2F;p&gt;
&lt;p&gt;变长表的优势在于有效利用空间，但由于记录大小不同，在其上进行许多删除或更新操作会使表中的碎片增多，需要定期 OPTIMIZE TABLE 以保持性能。&lt;&#x2F;p&gt;
&lt;p&gt;定长表的查询，检索和更新速度都比变长表快，但占用的空间也大。&lt;&#x2F;p&gt;
&lt;p&gt;PS:MySQL 5.0.3 之后 VARCHAR 的最大字符数为 65535&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-huan-bian-ma&quot;&gt;转换编码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; NAMES utf8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# CHARSET utf8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ju-he-han-shu&quot;&gt;聚合函数&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; + HAVING + GROUP BY (HAVING可以看作后置WHERE语句&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;MIN&#x2F;MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SUM&#x2F;AVG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DISTINCT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;所有的这些聚合函数加上GROUP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; BY之后，都只对GROUP BY部分有效。(不好理解，忽略&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bing-fa-kong-zhi&quot;&gt;并发控制&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;du-suo-gong-xiang-suo-xie-suo-pai-ta-suo&quot;&gt;读锁(共享锁)&#x2F;写锁(排他锁)&lt;&#x2F;h4&gt;
&lt;p&gt;当某一用户修改一部分数据时，MySQL 会禁止其他用户读取同一数据。大多数时，MySQL 都是以透明的方式实现锁的内部管理&lt;&#x2F;p&gt;
&lt;h4 id=&quot;suo-li-du&quot;&gt;锁粒度&lt;&#x2F;h4&gt;
&lt;p&gt;只锁定部分修改的数据，而不是所有的资源，或者只对要修改的数据片精确加锁。任何时间，在给定的资源上，被加锁的数据量越小，就可以允许更多的并发修改，只要相互之间互不冲突即可&lt;&#x2F;p&gt;
&lt;p&gt;这么做的问题是加锁也会消耗系统资源。如获得锁，检查锁是否已解除，以及释放锁等，都会增加系统开销。如果系统花费大量时间来管理锁，而不是读&#x2F;写数据，那么系统整体性能都可能会受到影响&lt;&#x2F;p&gt;
&lt;p&gt;所谓的锁策略，就是在锁开销和数据安全之间寻求一种平衡。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;biao-suo-myisam&quot;&gt;表锁(MyISAM)&lt;&#x2F;h4&gt;
&lt;p&gt;开销最小，但不适合频繁写操作&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xing-suo-innodb&quot;&gt;行锁(InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;可以支持最大的并发处理，但同时也会增加开销（InnoDb），由存储引擎实现，而不是 MySQL 服务器&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-wu&quot;&gt;事务&lt;&#x2F;h4&gt;
&lt;p&gt;一组原子性的 SQL 语句。要么全部执行(commit)，要么全部不执行(rollback)&lt;&#x2F;p&gt;
&lt;p&gt;正像锁粒度的增加会导致锁开销的增加一样，这种事务处理中的额外安全措施，也会导致数据库服务器要完成更多的额外工作&lt;&#x2F;p&gt;
&lt;p&gt;MySQL 默认操作是 AutoCommit，这意味着除非显示地开始一个事务，否则将把每个 SQL 操作视为一个单独事务自动执行&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-suo&quot;&gt;死锁&lt;&#x2F;h4&gt;
&lt;p&gt;两个或多个事务在同一资源上相互占用，并请求加锁时，导致的恶性循环现象&lt;&#x2F;p&gt;
&lt;p&gt;解决办法：死锁检测&#x2F;死锁超时机制。InnoDb 处理死锁的方法是，回滚拥有最少排他行级锁的事务。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yin-shi-he-xian-shi-suo-ding&quot;&gt;隐式和显式锁定&lt;&#x2F;h4&gt;
&lt;p&gt;InnoDb: 一个事务在执行过程中的任何时候，都可以获得锁，但只有在执行 COMMIT 或 ROLLBACK 语句后，才可以释放这些锁。&lt;&#x2F;p&gt;
&lt;p&gt;InnoDb 也支持显式锁定，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... LOCK IN SHARE MODE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ... FOR UPDATE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;duo-ban-ben-bing-fa-kong-zhi&quot;&gt;多版本并发控制&lt;&#x2F;h4&gt;
&lt;p&gt;MySQL 事务性存储引擎，如 InnoDb，不是简单使用行加锁机制，而是 MVCC 和行加锁机制关联使用。&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 不是 MySQL 独有的技术，其他如 Oracle, Postgresql 等都在使用&lt;&#x2F;p&gt;
&lt;p&gt;可以将 MVCC 设想成一种行级加锁的变形，它避免了很多情况下的锁操作，大大降低了系统的开销&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 是通过及时保存在某些时刻的数据快照，而得以实现的。&lt;&#x2F;p&gt;
&lt;p&gt;所谓&amp;quot;版本号&amp;quot;，其实是 InnoDb 维护的一个计数器，每启动一个事务，计数器随着递增，并将该号作为事务的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[INSERT]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为新增行的版本号&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[DELETE]&lt;&#x2F;strong&gt;
InnoDb 将系统当前的版本号设为被删除行的删除号，该行并未立即被物理删除&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE]&lt;&#x2F;strong&gt;
INSERT+DELETE&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[SELECT]&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;行版本号不大于事务版本号。这确保了该行在事务开始时已存在，或者由当前事务创建、更新&lt;&#x2F;li&gt;
&lt;li&gt;行删除号不存在，或者删除号大于事务版本号。这确保事务开始前行未被删除&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于被标记为删除的行，InnoDb 有专门的线程负责物理删除，当行满足如下条件时认为可以将其物理删除：当前不存在版本号小于该行删除号的事务，这样可以确保不会有事务再引用到该行&lt;&#x2F;p&gt;
&lt;p&gt;保存这些额外记录的好处，是使大多数读操作都不必申请加锁&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-yu-myisam&quot;&gt;关于 MyISAM&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;表加锁。并发低&#x2F;开销少&lt;&#x2F;li&gt;
&lt;li&gt;将每个表存储成两个文件：数据文件(.MYD)和索引文件(.MYI)&lt;&#x2F;li&gt;
&lt;li&gt;使用 CHECK TABLE mytable 和 REPAIR TABLE mytable 来修复表，也可以使用 myisamchk 命令&lt;&#x2F;li&gt;
&lt;li&gt;索引长度不能超过 1000(注意，如果是 utf8 的话，长度 x3)，InnoDb 没有此限制&lt;&#x2F;li&gt;
&lt;li&gt;可以延迟索引。使用表创建选项 DELAY_KEY_WRITE 创建的 MyISAM 表，在 SQL 结束之后，不会将索引的改变数据写入磁盘，而是在内存的键缓冲区中缓存索引改变数据，只有在清理缓冲区或关闭表时才将索引块转到磁盘。对于数据经常改变，并且频繁使用的表，这种模式大大提高了表的处理性能。不过，如果服务器或系统崩溃，索引将肯定损坏，并需要修复&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;guan-yu-innodb&quot;&gt;关于 InnoDb&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;行级锁。并发高&#x2F;开销相对高&lt;&#x2F;li&gt;
&lt;li&gt;高性能&lt;&#x2F;li&gt;
&lt;li&gt;崩溃后自动恢复&lt;&#x2F;li&gt;
&lt;li&gt;主键聚簇索引，辅助索引非聚簇索引(单独索引树)，辅助索引也会包含主键列，所以如果主键列较大，则它的辅助索引也会较大&lt;&#x2F;li&gt;
&lt;li&gt;任何改变 InnoDb 表结构的操作会导致整个表的重建，包括重建所有索引&lt;&#x2F;li&gt;
&lt;li&gt;外键约束&lt;&#x2F;li&gt;
&lt;li&gt;自动提交性能差？&lt;&#x2F;li&gt;
&lt;li&gt;可以显示锁定&lt;&#x2F;li&gt;
&lt;li&gt;不要对 InnoDb 使用不带 WHERE 语句的 count(*)，这会导致 InnoDb 执行全表扫描或索引扫描，而 MyISAM 只需要从相关记录中读取该值即可。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xing-neng-jian-ce&quot;&gt;性能检测&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SET PROFILING = 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;会把执行的语句和执行时间都打印出来，如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Duration   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Query                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00011700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00033500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.59868300 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.51746400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; count(name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; user_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;0.00846700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; table status like &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;user&amp;#39;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;+----------+------------+-----------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还可以针对某个 query 进行更细致的分析&lt;&#x2F;p&gt;
&lt;p&gt;也可以使用 FLUSH STATUS + SHOW SESSION STATUS&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SHOW PROFILE FOR QUERY 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-xun-huan-cun&quot;&gt;查询缓存&lt;&#x2F;h3&gt;
&lt;p&gt;MySQL 在第二次执行相同的 SQL 查询语句时，默认会使用查询缓存。加上&amp;quot;SQL_NO_CACHE&amp;quot;不使用查询缓存&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SQL_NO_CACHE username, ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-yu-null&quot;&gt;关于 NULL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免 NULL&lt;&#x2F;li&gt;
&lt;li&gt;MySQL 难以优化引用了可空列的查询，它会使索引，索引统计和值更加复杂&lt;&#x2F;li&gt;
&lt;li&gt;即使要在表中存储&amp;quot;没有值&amp;quot;的字段，还是有可能不使用 NULL 的，考虑使用 0 或空字符来代替它。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;suo-yin&quot;&gt;索引&lt;&#x2F;h3&gt;
&lt;p&gt;索引是性能问题的首要原因，先搞定索引，再去搞查询优化&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b-tree-suo-yin&quot;&gt;B-Tree 索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;根节点保存了指向子节点的指针，存储引擎根据指针寻找数据&lt;&#x2F;li&gt;
&lt;li&gt;当一个数据块不能放下所有索引字段数据时，就会形成树形的根节点或分支节点，所以树的深度和广度是由数据量决定的&lt;&#x2F;li&gt;
&lt;li&gt;每个节点包含了下层节点的链接，(没有相邻节点链接，上层链接可有可没有)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设建立了一个(last_name, first_name, birth)的索引，此索引对于以下类型可用&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;匹配全名 (例如可以找到一个叫Cuba Allen，并且出生于1960-01-01的人)
&lt;&#x2F;span&gt;&lt;span&gt;匹配最左前缀 (例如可以找到姓为Allen的人，仅适用于索引中的第一列)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于树的节点是排好序的，它们可以用于查找和 ORDER BY 查询&lt;&#x2F;p&gt;
&lt;p&gt;B-Tree 的局限在于如果查询不是从索引列的最左边开始，就无法使用索引。所以索引列的顺序至关重要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-xing-neng-suo-yin-ce-lue&quot;&gt;高性能索引策略&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;ge-chi-lie&quot;&gt;隔离列&lt;&#x2F;h4&gt;
&lt;p&gt;如果在查询中没有隔离索引的列，MySQL 通常不会是使用索引。&amp;quot;隔离&amp;quot;列意味着它不是表达式的一部分，也没有位于函数中。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-zhui-suo-yin&quot;&gt;前缀索引&lt;&#x2F;h4&gt;
&lt;p&gt;找到合适的前缀长度(计算全列的选择性，并使前缀的选择性接近于它)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCT city&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; COUNT(DISTINCE LEFT(city, 4&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;&#x2F;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; city_demo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也要注意如果数据分布非常不均匀，可能就会有问题&lt;&#x2F;p&gt;
&lt;p&gt;前缀索引能很好的减少索引的大小及提高速度，但 MySQL 不能在 ORDER BY 和 GROUP BY 中使用索引&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ju-ji-suo-yin-innodb&quot;&gt;聚集索引 (InnoDb)&lt;&#x2F;h4&gt;
&lt;p&gt;当表有聚集索引时，它的数据行实际保存在索引的叶子页(而不是指针)，所谓&amp;quot;聚集&amp;quot;就是指实际的数据行和相关的键值都保存在一起，每个表只能由一个聚集索引(主索引)，因为不能以此把行保存在两个地方&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以把相关数据保存在一起。如果没有使用聚集，读取每个邮件都会访问磁盘&lt;&#x2F;li&gt;
&lt;li&gt;数据访问快。聚集索引把索引和数据都保存到了同一棵 B-Tree 中，因此从聚集索引中取得的数据通常比在非聚集索引进行查找要快&lt;&#x2F;li&gt;
&lt;li&gt;聚集索引能最大限度地提升 I&#x2F;O 密集负载的性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;更新索引列代价是庞大的，因为它强制 InnoDb 把每个更新的行移到新位置&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引会比较大，因为它们的叶子包含了被引用行的主键列&lt;&#x2F;li&gt;
&lt;li&gt;辅助索引访问需要两次索引查找&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;fu-gai-suo-yin&quot;&gt;覆盖索引&lt;&#x2F;h4&gt;
&lt;p&gt;所有满足查询需要的数据的索引(只需要读取索引，不需要再读取行数据)，比如这条 SQL 语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; state_id, city, address FROM userinfo WHERE state_id = 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果只在 state_id 上建索引，则 city,address 都要从表里读取行数据&lt;&#x2F;p&gt;
&lt;p&gt;如果建立 index (state_id, city, address)，既能使用 state_id 索引，同时又可以使用覆盖索引，速度就快多了&lt;&#x2F;p&gt;
&lt;h4 id=&quot;duo-yu-he-zhong-fu-suo-yin&quot;&gt;多余和重复索引&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 允许你在统一列上创建多个索引，所以 MySQL 不得不单独维护每一个索引&lt;&#x2F;li&gt;
&lt;li&gt;如果列(A,B)上有索引，那么另外一个列(A)上的索引就是多余的(B-Tree)&lt;&#x2F;li&gt;
&lt;li&gt;大多数情况下，多余索引都是不好的，为了避免它，应该扩展已有索引，而不是添加新索引&lt;&#x2F;li&gt;
&lt;li&gt;索引越多，更新索引的开销越大，尤其是在数据很多的情况下&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>Unix编程艺术——Unix哲学</title>
            <pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/the-art-of-unix-programming/</link>
            <guid>https://limboy.me/posts/the-art-of-unix-programming/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1467587&#x2F;&quot;&gt;Unix 编程艺术&lt;&#x2F;a&gt;主要介绍了 Unix 系统领域中的设计和开发哲学、思想文化体系、原则与经验。此文大致摘录了 Unix 的哲学。&lt;&#x2F;p&gt;
&lt;p&gt;web 程序员也应该看看此书，软件开发和 web 开发很多地方都是相通的。看完之后，我甚至觉得 Unix 哲学对于做人也有很大的参考价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-yuan-ze-shi-yong-jian-ji-de-jie-kou-pin-he-jian-dan-de-bu-jian&quot;&gt;模块原则 (使用简洁的接口拼合简单的部件)&lt;&#x2F;h3&gt;
&lt;p&gt;计算机编程的本质就是控制复杂度&lt;&#x2F;p&gt;
&lt;p&gt;要编写复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂的软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qing-xi-yuan-ze-qing-xi-sheng-yu-ji-qiao&quot;&gt;清晰原则 (清晰胜于技巧)&lt;&#x2F;h3&gt;
&lt;p&gt;维护成本是高昂的，在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己看的。&lt;&#x2F;p&gt;
&lt;p&gt;在 Unix 传统中，这个建议不仅意味着代码注释。良好的 Unix 实践同样信奉在选择算法和实现时就应该考虑到将来的可扩展性。为了取得程序一丁点性能的提升就大幅增加技术的复杂性和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zu-he-yuan-ze-she-ji-shi-kao-lu-pin-jie-zu-he&quot;&gt;组合原则 (设计时考虑拼接组合)&lt;&#x2F;h3&gt;
&lt;p&gt;如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。&lt;&#x2F;p&gt;
&lt;p&gt;在输入方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。在经典的 Unix 下，多数程序都尽可能采用简单过滤器的形式，即将一个简单的文本输入流处理为一个简单的文本流输出。&lt;&#x2F;p&gt;
&lt;p&gt;Unix 程序员偏爱这种做法并不是因为它们仇视视图界面，而是因为如果程序不采用简单的文本输入输出流，它们就极难衔接。&lt;&#x2F;p&gt;
&lt;p&gt;要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑到文本流另一端的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fen-chi-yuan-ze-ce-lue-tong-ji-zhi-fen-chi-jie-kou-tong-yin-qing-fen-chi&quot;&gt;分离原则 (策略同机制分离，接口同引擎分离)&lt;&#x2F;h3&gt;
&lt;p&gt;把策略同机制揉成一团有两个负面影响：一来会使策略变得死板，难以适应用户需求的改变，二来也意味着任何策略的改变都可能会动摇机制。&lt;&#x2F;p&gt;
&lt;p&gt;可以将应用程序分成可以协作的前端和后端进程，通过 socket 专用应用协议进行通讯。这种双端设计方法大大降低了整体复杂度，bug 有望减少。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-ji-yuan-ze-she-ji-yao-jian-ji-fu-za-du-neng-di-jiu-di&quot;&gt;简洁原则 (设计要简洁，复杂度能低就低)&lt;&#x2F;h3&gt;
&lt;p&gt;来自多方面的压力常常会让程序变得复杂(bug 更多)，其中一种压力就是来自技术上的虚荣心理。Unix 程序员相互比的是谁能够做到&amp;quot;简洁而漂亮&amp;quot;并以此为荣。&lt;&#x2F;p&gt;
&lt;p&gt;更为常见的是，过度的复杂性往往来自于项目的需求，要避免这种状况，就需要鼓励一种软件文化，以简洁为美，人人对庞大复杂的东西群起而攻之。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lin-se-yuan-ze-chu-fei-que-wu-ta-fa-bu-yao-bian-xie-pang-da-de-cheng-xu&quot;&gt;吝啬原则 (除非确无它法，不要编写庞大的程序)&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;大&amp;quot;有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。由于人们对花费了大量精力才做出来的东西难以割舍，结果导致在庞大的程序中把投资浪费的注定要失败或者并非最佳的方案上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tou-ming-yuan-ze-she-ji-yao-ke-jian-yi-bian-shen-cha-he-diao-shi&quot;&gt;透明原则 (设计要可见，以便审查和调试)&lt;&#x2F;h3&gt;
&lt;p&gt;软件系统的透明性是指你一眼就能够看出软件是在做什么以及怎样做的。显示性是指程序带有监视和显示内部状态的功能。&lt;&#x2F;p&gt;
&lt;p&gt;设计时如果充分考虑到这些要求会给整个项目全过程都带来好处。至少，调试选项的设置应该尽量不要在事后，而应该在设计之初便考虑进去。这是考虑到程序不但应该能够展示其正确性，也应该能够把原开发者解决问题的思维模型告诉后来者。&lt;&#x2F;p&gt;
&lt;p&gt;程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。&lt;&#x2F;p&gt;
&lt;p&gt;出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对它进行操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-zhuang-yuan-ze-jian-zhuang-yuan-yu-tou-ming-yu-jian-ji&quot;&gt;健壮原则 (健壮源于透明与简洁)&lt;&#x2F;h3&gt;
&lt;p&gt;软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。&lt;&#x2F;p&gt;
&lt;p&gt;大多数软件禁不起磕碰，毛病很多，就是因为过于复杂，很难通盘考虑。如果不能够正确理解一个程序的逻辑，就不能确信其是否正确，也就不能在出错时修复它。&lt;&#x2F;p&gt;
&lt;p&gt;这也就带来了让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要有两种方法：透明化和简洁化。&lt;&#x2F;p&gt;
&lt;p&gt;上面曾说过，软件的透明性就是指一眼就能够看出是怎么回事，即人们不需要绞尽脑汁就能够推断出所有可能的情况，那么这个程序就是简洁的。程序越简洁，越透明，也就越健壮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;biao-shi-yuan-ze-ba-zhi-shi-dai-ru-shu-ju-yi-qiu-luo-ji-zhi-po-er-jian-zhuang&quot;&gt;表示原则 (把知识代入数据以求逻辑质朴而健壮)&lt;&#x2F;h3&gt;
&lt;p&gt;数据要比程序逻辑更容易驾驭。所以如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，应该主动将代码的复杂度转移到数据中去。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-su-yuan-ze-jie-kou-bi-mian-biao-xin-li-yi&quot;&gt;通俗原则 (接口避免标新立异)&lt;&#x2F;h3&gt;
&lt;p&gt;最易用的程序就是用户需要学习新东西最少的程序，换句话说最易用的程序就是最切合用户已有知识的程序。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-mo-yuan-ze-wu-hua-ke-shuo-na-jiu-chen-mo&quot;&gt;缄默原则 (无话可说？那就沉默)&lt;&#x2F;h3&gt;
&lt;p&gt;行为良好的程序应该默默工作，绝不唠唠叨叨，碍手碍脚。沉默是金。&lt;&#x2F;p&gt;
&lt;p&gt;简洁是 Unix 程序的核心风格。一旦程序的输出成为另一个程序的输入，就要很容易把需要的数据挑出来。站在人的角度上来说，重要的信息不应该混杂在冗长的程序内部行为信息中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-jiu-yuan-ze-chu-xian-yi-chang-shi-ma-shang-tui-chu-bing-gei-chu-zu-gou-cuo-wu-xin-xi&quot;&gt;补救原则 (出现异常时，马上退出并给出足够错误信息)&lt;&#x2F;h3&gt;
&lt;p&gt;软件在发生错误时也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，这就是最坏的情况了。&lt;&#x2F;p&gt;
&lt;p&gt;宽容地收，谨慎地发。就算输入的数据很不规范，一个设计良好的程序也会尽量领会其中的意义，以尽量与别的程序协作。然后要么抛出异常，要么为工作链的下一环程序输出一个严谨干净正确的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-ji-yuan-ze-zhu-hua-ji-qi-yi-fen-bu-hua-cheng-xu-yuan-yi-miao&quot;&gt;经济原则 (宁花机器一分，不花程序员一秒)&lt;&#x2F;h3&gt;
&lt;p&gt;随着技术的发展，开发公司和大多数用户都能得到廉价的机器，所以这一准则的合理性就显然不用多说了。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们在软件开发中严格遵循这条原则的话，大多数的应用场合应该使用高级语言，如 Perl,Python,Java,Php,甚至 Shell——这些语言可以将程序员从自行管理内存的负担中释放出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-cheng-yuan-ze-bi-mian-shou-gong-hack-jin-liang-bian-xie-cheng-xu-qu-sheng-cheng-cheng-xu&quot;&gt;生成原则 (避免手工 hack,尽量编写程序去生成程序)&lt;&#x2F;h3&gt;
&lt;p&gt;人类很不善于干辛苦的细节工作。因此程序中任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单越抽象，设计者就越容易做对。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-hua-yuan-ze-guo-zao-you-hua-shi-mo-e-zhi-yuan&quot;&gt;优化原则 (过早优化是万恶之源)&lt;&#x2F;h3&gt;
&lt;p&gt;还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更加损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。&lt;&#x2F;p&gt;
&lt;p&gt;先制作原型，再精雕细琢。优化之前先确保能用。&amp;quot;极限编程&amp;quot;宗师 Kent Beck 从另一种不同的文化将这点有效地扩展为：先求运行，再求正确，最后求快。&lt;&#x2F;p&gt;
&lt;p&gt;借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无须优化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-yang-yuan-ze-jue-bu-xiang-xin-suo-wei-bu-er-fa-men-de-duan-yan&quot;&gt;多样原则 (绝不相信所谓&amp;quot;不二法门&amp;quot;的断言)&lt;&#x2F;h3&gt;
&lt;p&gt;Unix 传统有一点很好，即从不相信任何所谓的&amp;quot;不二法门&amp;quot;。Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kuo-zhan-yuan-ze-she-ji-zhao-yan-wei-lai-wei-lai-zong-bi-yu-xiang-lai-de-kuai&quot;&gt;扩展原则 (设计着眼未来，未来总比预想来得快)&lt;&#x2F;h3&gt;
&lt;p&gt;要为数据格式和代码留下扩展的空间，否则就会发现自己常常被原先不明智选择捆住了手脚，因为你无法既要改变它们又要维持对原来的兼容性。&lt;&#x2F;p&gt;
&lt;p&gt;设计协议或是文本格式时，应使其具有充分的自描述性以便可以扩展。要么包含进一个版本号，要么采用独立、自描述的语句、按照可以随时插入新的而不会搞乱格式读取代码的方法组织格式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unix-zhe-xue-yi-yan-yi-bi-zhi&quot;&gt;Unix 哲学一言以蔽之&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;the-art-of-unix-programming&amp;#x2F;kiss.png&quot;
        width=&quot;468&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</description>
        </item>
        
        
        <item>
            <title>web开发从小工到大家</title>
            <pubDate>Sat, 18 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/web-development-journeyman-master/</link>
            <guid>https://limboy.me/posts/web-development-journeyman-master/</guid>
            <description>&lt;p&gt;大致总结了一下 web 程序员从小工到大家所需的基础知识，语言，工具，及应该阅读的书籍。&lt;&#x2F;p&gt;
&lt;p&gt;路漫漫其修远兮。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fundamental-books&quot;&gt;fundamental (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;code complete 2&lt;&#x2F;li&gt;
&lt;li&gt;the programic programmer&lt;&#x2F;li&gt;
&lt;li&gt;the c programming language 2&lt;&#x2F;li&gt;
&lt;li&gt;linux kernel development&lt;&#x2F;li&gt;
&lt;li&gt;introduction to algorithms 3&lt;&#x2F;li&gt;
&lt;li&gt;head first design patterns&lt;&#x2F;li&gt;
&lt;li&gt;the art of unix programming&lt;&#x2F;li&gt;
&lt;li&gt;http: the definitive guide&lt;&#x2F;li&gt;
&lt;li&gt;refactoring improving the design of existing code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language&quot;&gt;language&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;C&lt;&#x2F;li&gt;
&lt;li&gt;javascript&#x2F;nodejs&lt;&#x2F;li&gt;
&lt;li&gt;php&lt;&#x2F;li&gt;
&lt;li&gt;python&lt;&#x2F;li&gt;
&lt;li&gt;ruby&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tool&quot;&gt;tool&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;version control: git&lt;&#x2F;li&gt;
&lt;li&gt;web server: nginx apache&lt;&#x2F;li&gt;
&lt;li&gt;proxy: haproxy nginx&lt;&#x2F;li&gt;
&lt;li&gt;database: mysql&lt;&#x2F;li&gt;
&lt;li&gt;nosql: mongodb redis&lt;&#x2F;li&gt;
&lt;li&gt;project managment: redmine&lt;&#x2F;li&gt;
&lt;li&gt;bash: rsync iptables curl sed awk&lt;&#x2F;li&gt;
&lt;li&gt;test: ab siege http_load&lt;&#x2F;li&gt;
&lt;li&gt;fulltext search: sphinx lucene xapian coreseek&lt;&#x2F;li&gt;
&lt;li&gt;misc: gearman, jQuery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;master-books&quot;&gt;master (books)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;rapid development&lt;&#x2F;li&gt;
&lt;li&gt;Agile Software Development, Principles, Patterns, and Practices&lt;&#x2F;li&gt;
&lt;li&gt;peopleware 2&lt;&#x2F;li&gt;
&lt;li&gt;the mythical man-month&lt;&#x2F;li&gt;
&lt;li&gt;getting real&lt;&#x2F;li&gt;
&lt;li&gt;rework&lt;&#x2F;li&gt;
&lt;li&gt;building scalable web sites&lt;&#x2F;li&gt;
&lt;li&gt;high performance mysql&lt;&#x2F;li&gt;
&lt;li&gt;high performance web sites&lt;&#x2F;li&gt;
&lt;li&gt;97 Things Every Programmer Should Know&lt;&#x2F;li&gt;
&lt;li&gt;构建高性能 web 站点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>成为技术领导者</title>
            <pubDate>Thu, 02 Dec 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/becoming-a-technical-leader/</link>
            <guid>https://limboy.me/posts/becoming-a-technical-leader/</guid>
            <description>&lt;p&gt;久闻温伯格大名，此书对于想从技术路线转型到管理路线的童鞋会有不少收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;我们设定大大小小的目标，面对形形色色的挑战，最终都是让自己坚信可以克服达成目标道路上的所有困难。(我自己加的)&lt;&#x2F;li&gt;
&lt;li&gt;应该为任何想领导别人的欲望感到羞耻。&lt;&#x2F;li&gt;
&lt;li&gt;不会有人愿意追随不关心人的领导，除非他们别无选择。&lt;&#x2F;li&gt;
&lt;li&gt;领导就是营造一个使人们工作更有意义且效率更高的环境的过程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我能做到既成为一名领导者，同时又保持我的技术技能？&lt;&#x2F;li&gt;
&lt;li&gt;我不得不牺牲掉多少技术专长？&lt;&#x2F;li&gt;
&lt;li&gt;我能得到什么回报？&lt;&#x2F;li&gt;
&lt;li&gt;如果我是领导者，我必须指挥身边的人吗？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;xian-xing-mo-xing-he-you-ji-mo-xing&quot;&gt;线性模型和有机模型&lt;&#x2F;h3&gt;
&lt;p&gt;要成为一名有效的领导者，你必须根据自己的需要用到许多模型，并且能够根据实际情况的需要适当地从一个模型切换到另一个模型。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-jian-de-jie-shi&quot;&gt;事件的解释&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：一种结果源自一种原因&lt;&#x2F;li&gt;
&lt;li&gt;有机模型(系统性思考)：事件 X 是数以百计的其他因素作用的结果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;事实上大多数有人参与的重要事件，都是比较复杂的事件。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ding-yi-ge-ren&quot;&gt;定义个人&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：将个人分门别类&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：考虑人们的唯一性（个性+共性）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;有机模型不把人们与某种标准相比较，因此也不企图将人塑造成某种标准样本。&lt;&#x2F;p&gt;
&lt;p&gt;当我们的行为基于威胁&#x2F;奖赏模型时，我们往往认为领导者的工作就是散步威胁和施舍奖赏&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guan-xi-de-ding-yi&quot;&gt;关系的定义&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：按照角色而不是个人，施加影响的是老板而不是这个人。(适合大规模的规划)&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：一个独特的个体与另一个独特的个体间的联系。从生命的意义上来讲，两人是平等的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;利用有机模型解决问题，每个人都能受益。当我们采用这种方法对待其他人时，我们常常感到的是一种新发现的喜悦。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mian-dui-gai-bian-de-tai-du&quot;&gt;面对改变的态度&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;线性模型：每次只改变一件事&lt;&#x2F;li&gt;
&lt;li&gt;有机模型：每次只改变一件事是不可能的&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;认同有机模型的人们也需要安全感，但他们通过冒险和容忍不确定性来获得安全感。&lt;&#x2F;p&gt;
&lt;p&gt;在威胁&#x2F;奖赏模型下，我们可能通过努力保持所有的人和关系不变来获得安全感&lt;&#x2F;p&gt;
&lt;p&gt;有机模型期待和接受改变，将改变视为宇宙中的普通一部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ling-dao-de-moi-mo-xing&quot;&gt;领导的 MOI 模型&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;M:Motivation&lt;&#x2F;li&gt;
&lt;li&gt;O:Organization&lt;&#x2F;li&gt;
&lt;li&gt;I:ideas&#x2F;innovation&lt;&#x2F;li&gt;
&lt;li&gt;D:Determination(我自己加的)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;只要使这三者平衡，每个人都能成为优秀的领导者&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ling-dao-zhe-zuo-shi-yao&quot;&gt;领导者做什么&lt;&#x2F;h3&gt;
&lt;p&gt;所有那些一直非常成功的领导者通过鼓励人们重视创意或用更好的工作方式来提高工作效率&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-jue-wen-ti-xing-ling-dao-feng-ge-de-te-dian-zui-hao-de-ji-zhu-ling-dao-zhe-de-feng-ge&quot;&gt;解决问题型领导风格的特点(最好的技术领导者的风格)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;理解问题&lt;&#x2F;li&gt;
&lt;li&gt;管理想法的交流
&lt;ul&gt;
&lt;li&gt;为了保持想法的交流，不要轻易否定团队成员的想法&lt;&#x2F;li&gt;
&lt;li&gt;如果不得不否定，那么一定要明确，你所否定的只是这个想法，而不是提出这个想法的人&lt;&#x2F;li&gt;
&lt;li&gt;在给出你的想法之前要先对它进行检验&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;保证质量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;各个领导者有各自不同的方式完成这三种功能，这取决于他们在激励、组织和创意上的个人技巧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-xin-cun-zai-geng-hao-de-fang-fa&quot;&gt;相信存在更好的方法&lt;&#x2F;h3&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对于 MOI 现状，愿意改变多少？&lt;&#x2F;li&gt;
&lt;li&gt;下一个五年计划&#x2F;明年&#x2F;下月&#x2F;今天？&lt;&#x2F;li&gt;
&lt;li&gt;你现在的领导风格使你快乐吗？使你周围的人快乐吗？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ling-dao-zhe-shi-ru-he-cheng-chang-qi-lai-de&quot;&gt;领导者是如何成长起来的&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;shou-neng-sheng-qiao&quot;&gt;熟能生巧&lt;&#x2F;h3&gt;
&lt;p&gt;每天坚持练习，奇迹就会发生&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-qian-fei-yue&quot;&gt;向前飞跃&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;真正明显的进步来自于少数的几次突破，但突破依赖于扎实的基本功。&lt;&#x2F;li&gt;
&lt;li&gt;当你感到自己真正在进步时，就要开始寻找某种观念上的突破。&lt;&#x2F;li&gt;
&lt;li&gt;每当试图有所提高时，都要先经历一次小的退步，然后才能有大的提高。&lt;&#x2F;li&gt;
&lt;li&gt;高原阶段是存在的，但你不是在跳跃，而是在攀登。为了攀登到新的高度，必须离开原有的立足点，舍弃你擅长的东西，还有可能滑落低谷。如果你不舍得放弃你擅长的东西，那么你会继续缓慢地前进，但永远达不到新的高度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zai-xian-shi-she-hui-zhong-cheng-chang&quot;&gt;在现实社会中成长&lt;&#x2F;h3&gt;

&lt;p  style=&quot;text-align:center&quot; &gt;&lt;img src=&quot;&amp;#x2F;posts&amp;#x2F;becoming-a-technical-leader&amp;#x2F;grow.png&quot;
        width=&quot;526&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不论你取得的成就有多大，多辉煌，你永远不会忘记深处低谷体会到的痛苦。没有对美好事物的向往，这些痛苦会在你开始攀登之前就把你拉回原地。所以在你下次攀登之前，要想到站在顶峰的感觉。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-xun-huan&quot;&gt;元循环&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;每当我战胜了一个低谷，不仅跃升到一个新的高原，而且在向&amp;quot;元高原&amp;quot;前进的路上又迈进了几步，也就是说把握住了成长过程本身。在学新的计算机语言同时，更多的是在&lt;em&gt;学如何学&lt;&#x2F;em&gt;新的计算机语言。&lt;&#x2F;li&gt;
&lt;li&gt;要获得这种&amp;quot;元学习&amp;quot;的能力，你必须成功渡过第一个低谷。不是每个人都有足够的动力，或能够承受感情上的打击。&lt;&#x2F;li&gt;
&lt;li&gt;尽管如此，在我们努力成为一名领导者的过程中，我们在技术方面的&amp;quot;元学习&amp;quot;能力对我们的帮助是有限的。&lt;&#x2F;li&gt;
&lt;li&gt;可以尝试一条循序渐进的道路：用教育、领导一些小团体的方式向领导者方向成长。尽管如此，还是会时常忍受痛苦的煎熬。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Q:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;你有某种自己在相当长的时间里都一直在改善、提高的技能吗？你能描述你的进步吗？能将你的学习方法运用到成为一名更优秀的解决问题型领导者的学习中去吗？&lt;&#x2F;li&gt;
&lt;li&gt;你能描述你目前所处的高原阶段吗？有迹象标明你将面临低谷吗？&lt;&#x2F;li&gt;
&lt;li&gt;从你前一次攀登新高原到现在有多长时间了？你仍沉浸于停留在平坦高原时的感觉吗？你为攀登另一个高原做了什么准备？&lt;&#x2F;li&gt;
&lt;li&gt;在你生命的过程中，你学到了多少有关学习的知识？&lt;&#x2F;li&gt;
&lt;li&gt;为自己确立一个个人目标，每天保证练习至少 15 分钟，持续一周的时间。记录下进展，下一周，设立另一个目标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chuang-xin-de-zhang-ai&quot;&gt;创新的障碍&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;无法客观地监督自己(自蔽)&lt;&#x2F;li&gt;
&lt;li&gt;没问题综合症：不能准确理解问题的症结就草率提出先入为主的解决方案（自负）&lt;&#x2F;li&gt;
&lt;li&gt;坚信任何问题都只有唯一解答(教条)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;自我激励的一个方法：每天花 5 分钟写日记：事实-感受-发现（也可参考《晨间日记的奇迹》一书）&lt;&#x2F;p&gt;
</description>
        </item>
        
        
        <item>
            <title>软件构建设计</title>
            <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/software-design/</link>
            <guid>https://limboy.me/posts/software-design/</guid>
            <description>&lt;p&gt;这是《代码大全 2》的软件设计篇章，花了两天时间啃下来的，不得不感慨讲得很细致很到位。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-design-concepts&quot;&gt;Key Design Concepts&lt;&#x2F;h3&gt;
&lt;p&gt;Managing complexity is the most important technical topic in software development.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of all software-design techniques is to break acomplicated problem into simple pieces. The more independent the subsystems are, the more you make it safe to focus on one bit of complexity at a time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-characteristics&quot;&gt;design characteristics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimal complexity
&lt;ul&gt;
&lt;li&gt;Avoid making &amp;quot;clever&amp;quot; designs. clever designs are usually hard to understand. Instead make &amp;quot;simple&amp;quot; and &amp;quot;easy-to-understand&amp;quot; designs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ease of maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Loose coupling&lt;&#x2F;li&gt;
&lt;li&gt;Extensibility&lt;&#x2F;li&gt;
&lt;li&gt;Reusability&lt;&#x2F;li&gt;
&lt;li&gt;High fan-in
&lt;ul&gt;
&lt;li&gt;having a high number of classes that use a given class. High fan-in implies that a system has been designed to make good use of utility classes at the lower levels in the system.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Low-to-medium fan-outside
&lt;ul&gt;
&lt;li&gt;having a given class use a low-to-medium number of other classes (&amp;lt;7)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Portability&lt;&#x2F;li&gt;
&lt;li&gt;Leanness
&lt;ul&gt;
&lt;li&gt;designing the system so that it has no extra parts. a book is finished not when nothing more can be added but when nothing more can be taken away.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stratification
&lt;ul&gt;
&lt;li&gt;trying to keep the levels of decomposition stratified so that you can view the system at any single level and get a consistent view.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Standard techniques&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-steps-in-designing-with-objects&quot;&gt;The steps in designing with objects&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Identify the objects and their attributes (methods and data)&lt;&#x2F;li&gt;
&lt;li&gt;Determine what can be done to each object&lt;&#x2F;li&gt;
&lt;li&gt;Determine what each object is allowed to do to other objects&lt;&#x2F;li&gt;
&lt;li&gt;Determine the parts of each object that will be visible to other objects-which parts will be public and which will be private.&lt;&#x2F;li&gt;
&lt;li&gt;Define each object&#x27;s public interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;form-consistent-abstractions&quot;&gt;Form Consistent Abstractions&lt;&#x2F;h3&gt;
&lt;p&gt;Abstraction is the ability to engage with a concept while safely ignoring some of its details - handling different details at different levels.&lt;&#x2F;p&gt;
&lt;p&gt;A good class interface is an abstraction that allows you to focus on the interface without needing to worry about the internal workings of the class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;design-building-blocks-heuristics&quot;&gt;Design Building Blocks: Heuristics&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;encapsulate-implementation-details&quot;&gt;Encapsulate Implementation Details&lt;&#x2F;h3&gt;
&lt;p&gt;Encapsulate picks up where abstraction leaves off. you aren&#x27;t allowed to look at an object at any level of detail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inherit-when-inheritance-simplifies-the-design&quot;&gt;Inherit - When Inheritance Simplifies the Design&lt;&#x2F;h3&gt;
&lt;p&gt;Inheritance simplifies programming because you write a general routine to handle anything that depends on a door&#x27;s general properties and then write specific routines to handle specific operations on specific kinds of doors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hide-secrets-information-hiding&quot;&gt;Hide Secrets (Information Hiding)&lt;&#x2F;h3&gt;
&lt;p&gt;Information hiding is part of the foundation of both structured design and object-oriented design. In structured design, the notion of &amp;quot;black boxes&amp;quot; comes from information hiding. In object-oriented design, it gives rise to the concepts of encapsulation and modularity and it is associated with the concept of abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;One key task in designing a class is deciding which features should be known outside the class and which should remain secret.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identify-areas-likey-to-change&quot;&gt;Identify Areas Likey to Change&lt;&#x2F;h3&gt;
&lt;p&gt;Accommodating changes is one of the most chanllenging aspects of good program design. The goal is to isolate unstable areas so that the effect of a change will be limited to one routine, class, or package.&lt;&#x2F;p&gt;
&lt;p&gt;areas that are likely to change:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Business rules&lt;&#x2F;li&gt;
&lt;li&gt;Hardware dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Input and output&lt;&#x2F;li&gt;
&lt;li&gt;Nonstandard language features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keep-coupling-loose&quot;&gt;Keep Coupling Loose&lt;&#x2F;h3&gt;
&lt;p&gt;Coupling describes how tightly a class or routing is related to other classes or routines. The goal is to create classes and routines with small, direct, visible and flexible relations to other classes and routines.&lt;&#x2F;p&gt;
&lt;p&gt;Classes and routines are first and foremost intellectual tools for reducing complexity. If they&#x27;re not making your job simpler, they&#x27;re not doing thier jobs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;look-for-common-design-patterns&quot;&gt;Look for Common Design Patterns&lt;&#x2F;h3&gt;
&lt;p&gt;Popular Design Patterns&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract Factory&lt;&#x2F;li&gt;
&lt;li&gt;Adapter&lt;&#x2F;li&gt;
&lt;li&gt;Bridge&lt;&#x2F;li&gt;
&lt;li&gt;Composite&lt;&#x2F;li&gt;
&lt;li&gt;Decorator&lt;&#x2F;li&gt;
&lt;li&gt;Facade&lt;&#x2F;li&gt;
&lt;li&gt;Factory Method&lt;&#x2F;li&gt;
&lt;li&gt;Iterator&lt;&#x2F;li&gt;
&lt;li&gt;Observer&lt;&#x2F;li&gt;
&lt;li&gt;Singleton&lt;&#x2F;li&gt;
&lt;li&gt;Strategy&lt;&#x2F;li&gt;
&lt;li&gt;Template Method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-practices&quot;&gt;Design Practices&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;iterate&quot;&gt;Iterate&lt;&#x2F;h3&gt;
&lt;p&gt;Design is an iterative process. You don&#x27;t usually go from point A only to point B; you go from point A to point B and back to point A.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;divide-and-conquer&quot;&gt;Divide and Conquer&lt;&#x2F;h3&gt;
&lt;p&gt;no one&#x27;s skill is big enough to contain all the details of a complex program, and that applies just as well to design. Divide the program into different areas of concern, and then tackle each of those area individually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;top-down-and-bottom-up-design-approaches&quot;&gt;Top-Down and Bottom-Up Design Approaches&lt;&#x2F;h3&gt;
&lt;p&gt;Top-down design begins at a high level of abstraction. You define base classes or other nonspecific design elements. As you develop the design, you increase the level of detail, identifying derived classes, collaborating classes, and other detailed design elements.&lt;&#x2F;p&gt;
&lt;p&gt;Bottom-up design starts with specifics and works toward genealities. It typically begins by identifying concrete objects and then generalizes aggregations of objects and base classes from those specifics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;experimental-prototyping&quot;&gt;Experimental Prototyping&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;collaborative-design&quot;&gt;Collaborative Design&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;capturing-your-design-work&quot;&gt;Capturing Your Design Work&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Insert design documentation into the code itself&lt;&#x2F;li&gt;
&lt;li&gt;Capture design discussions and decisions on a wiki&lt;&#x2F;li&gt;
&lt;li&gt;Write e-mail summaries&lt;&#x2F;li&gt;
&lt;li&gt;Use a digital camera&lt;&#x2F;li&gt;
&lt;li&gt;Save design flip charts&lt;&#x2F;li&gt;
&lt;li&gt;Use CRC(Class, Responsibility, Collaborator) cards&lt;&#x2F;li&gt;
&lt;li&gt;Create UML diagrams at appropriate levels of detail&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        
        
        <item>
            <title>What I Wish I Knew When I Was 20</title>
            <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
            <link>https://limboy.me/posts/what-i-wish-i-knew-when-i-was-20/</link>
            <guid>https://limboy.me/posts/what-i-wish-i-knew-when-i-was-20/</guid>
            <description>&lt;p&gt;周末抽空把&amp;quot;What I Wish I Knew When I Was 20&amp;quot;大致看了一遍。因为是英文模糊版，所以稍微有点吃力。&lt;&#x2F;p&gt;
&lt;p&gt;bq. 《真希望我 20 几岁就知道的事》讲述蒂娜教授 17 岁的儿子即将进入大学，她意识到自己没能教给儿子足够的知识和技巧融入这个社会，取得成功，所以她回忆了自己 20 岁时想了解的事情——那些可以避免弯路和失败的宝贵经验。她从念神经科学的学生，到管理咨询行业的先锋，到斯坦福管理风险投资和创业项目的主管，职业经历丰富，有非常多可以分享和教授的精彩内容。 她写出了自己半生的职业实践和开战励志课程积累的经验，列出清单，举出大量的“创造性思维”的实例，给了自己的孩子一堂含金量最高的课：创意决定人生，突破规则，才能在千万人中脱颖而出！现在她举出为斯坦福大学、西点军校的学生讲解这门课程，帮助他们更顺利开展职场之路，掘得人生第一桶金。&lt;&#x2F;p&gt;
&lt;p&gt;本书的核心思想：突破传统框架的限制，细心发现，另辟蹊径，总能找到一条出路。对于各行各业想要有所作为的人多少都会有帮助，简单摘录了几段。翻译不到位还请见谅:)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;look at the world around them with fresh eyes, identifying opportunities in their own backyard, challenge tradition assumptions, in doing so generate enormous value from practilly nothing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;细心观察周围的世界，找出潜在的机会，挑战传统的方法，通过这种方式可以让你获得宝贵的财富，即使之前身无分文。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;opportunities are aboundant. at any place and time you can look around and identify problems that need solving&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;机会是很多的，任何时间和地点，只要细心观察，总会找到需要解决的问题。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;regardless of the size of the problem, there are usually creative ways to use the resources already at your disposal to solve them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;无论问题的大小，总是可以利用有限的资源，通过创新的方法来解决。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;an entrepreneur is someone who is always on the lookout for problems that can be turned into opportunities and finds creative ways to leverage limited resources to reach their goals.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;一个企业家总是尽最大努力将问题转变成机会，并且通过创新的途径和有限的资源去达成目标。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we often frame problems too tightly, and don&#x27;t step back and look at the problem more broadly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们总是会被问题本身框住，而不会后退一步，从更远的角度去看待问题。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we strive to create &amp;quot;T-Shaped people&amp;quot;, those with a depth of knowledge in at least one discipline and a breadth of knowledge about innovation and entrepreneurship that allows them to work effectively with professionals in other disciplines to bring their ideas to life. No matter what their role, having an entrepreneurial mind-set is key to solving problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们致力于培养&amp;quot;T 型&amp;quot;人才，那些至少精通一门领域，并且对其他领域也有独到的理解，有企业家精神，可以与其他领域的专家高效合作，然后把想法付诸实践。无论他们是什么职位，什么角色，企业家思想是解决问题的关键。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the key to success is the ability to extract the lessons out of each of these experiences and to move on with that new knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;成功的关键是从失败中吸取教训的能力，同时把这宝贵的经验运用到下一次的实践中。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we aren&#x27;t taught to embrace problems. we are taught that problems are to be avoided, or something to complain about.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;没有人教我们享受问题。我们总是被教导要避免问题，或者时不时地抱怨一下。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we can challenge ourselves every single day. that is, we can choose to view the world through different lenses - lenses that allow us to see problems in a new light. the more we take on problems, the more confident and proficient we become at solving them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们每天都可以挑战自己。我们可以换一个角度看待这个世界，看到这个世界的问题。越是频繁地与问题打交道，就越有搞定问题的信心。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;if we clearly define a problem, the solution will logically present itself.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;如果我们能很清晰地定义一个问题，解决方法往往也会一跃而出。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;interstingly, in many cases those who are on the front lines are so used to the problems they experience every day that they don&#x27;t even seen them, or can&#x27;t imagine radical approaches to solving them. (problem blindness)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;有趣的是，很多情况下，那些天天与问题打交道的人，会对问题熟视无睹，或者没有一个有效的解决方法。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;assumptions are sometimes so integrated into our view of the world that it&#x27;s hard to see them. however, with a little practice, it becomes a useful to look at your options in fresh light.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;有时&amp;quot;下意识&amp;quot;会深入到生活的每个角落，以致我们完全对其忽视。但是，只要稍加练习，就会从新的角度去看待它们。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;problems are aboundant, just waiting for those willing to find inventive solutions. this takes acute observation, coordinated teamwork, the ability to execute a plan, a willingness to learn from failure, and creative problem solving. but the first requirement is having the attitude that problems can be solved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;问题是无穷无尽的，只是在等待那些愿意找到解决方法的人。这需要细致的观察，团队配合，计划的执行能力，愿意从失败中吸取教训的心态，和创新的问题解决方式。但首先要具备的心态是：问题总是会被解决的。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;we define ourselves by our professions, our income, where we live, the car we drive, our education, and even by our horoscope. each definition locks us into specific assumptions about who we are and what we can do. we always make our own prisons, with rules that we wach create for ourselves, locking us into specific roles and out of an endless array of possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;我们通过职业、收入、住所、汽车、受教育程度、甚至星座来定义自己。每种定义都限制了自己所能做的事。我们总是把自己关在自己建造的监狱里，遵守着自己给自己制定的规则，把自己限制为某个角色，于是我们失去了更多的可能性。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;if others think your ideas are crazy, then you must on the right track.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;如果别人认为你的想法很疯狂，那你基本上就在正确的路上了。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;one of the biggest obstacles to taking on &amp;quot;impossible tasks&amp;quot; is that others are often quick to tell you they can&#x27;t be accomplished. once you decide to take it on, it is equally hard to break out of traditional approaches to solving it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;完成那些&amp;quot;不可能的任务&amp;quot;最大的障碍之一是，别人往往很快就告诉你，你做不来的。一旦你决定去做，要不按常理出牌也一样困难。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;one of the most important rules to brainstorming is to expend upon the ideas of others. with this approache, at the end of good brainstorming session, multiple people feel that they created or contributed to the best ideas to come out of the session.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;头脑风暴最重要的一点是，扩展别人的想法。这样，一个有效的头脑风暴，大部分人都会觉得最终的想法多多少少和自己有关系。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;rules are often meant to be broken: don&#x27;t ask for permission, but beg for forgiveness.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;规则常常是用来打破的：不要请求授权，但求事后原谅。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;there are often creative ways to work around the rules, to jump over the traditional hurdles, and to get to your goal by taking a side route.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;总是会有创新的方法来搞定规则，放弃那拥挤的主路，通过路边小道来达到你的目标。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the world is divided into people who wait for others to give them permission to do the things they want to do and people who grant themselves permission. some look inside themselves for motivation and others wait to be pushed forward by outside forces.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;这世界上有这么几拨人：一拨等待别人授权去做事想做的事，另一拨给自己授权。有些人挖掘自身的激情，有些人寻求外部的压力。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        
    </channel>
</rss>